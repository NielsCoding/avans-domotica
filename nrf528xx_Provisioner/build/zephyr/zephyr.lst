
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	00 55 00 20 fd 29 01 00 73 18 02 00 d1 29 01 00     .U. .)..s....)..
  10:	d1 29 01 00 d1 29 01 00 d1 29 01 00 00 00 00 00     .)...)...)......
	...
  2c:	d9 26 01 00 d1 29 01 00 00 00 00 00 85 26 01 00     .&...).......&..
  3c:	d1 29 01 00                                         .)..

00000040 <_irq_vector_table>:
  40:	89 27 01 00 e9 55 02 00 89 27 01 00 89 27 01 00     .'...U...'...'..
  50:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  60:	97 55 02 00 89 27 01 00 89 27 01 00 cf 55 02 00     .U...'...'...U..
  70:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  80:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  90:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  a0:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  b0:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  c0:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  d0:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  e0:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..
  f0:	89 27 01 00 89 27 01 00 89 27 01 00 89 27 01 00     .'...'...'...'..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fa8a 	bl	c638 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     134:	4801      	ldr	r0, [pc, #4]	; (13c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     136:	7800      	ldrb	r0, [r0, #0]
     138:	4770      	bx	lr
     13a:	0000      	.short	0x0000
     13c:	20000028 	.word	0x20000028

00000140 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     140:	b570      	push	{r4, r5, r6, lr}
     142:	f00c ff59 	bl	cff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     146:	4c13      	ldr	r4, [pc, #76]	; (194 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x4>)
     148:	f06f 0527 	mvn.w	r5, #39	; 0x27
     14c:	b928      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     14e:	f00c ff89 	bl	d064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     152:	b910      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     154:	f00c ff90 	bl	d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     158:	b120      	cbz	r0, 164 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     15a:	480f      	ldr	r0, [pc, #60]	; (198 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x8>)
     15c:	6060      	str	r0, [r4, #4]
     15e:	7065      	strb	r5, [r4, #1]
     160:	2008      	movs	r0, #8
     162:	e010      	b.n	186 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19>
     164:	f00c ff1d 	bl	cfa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     168:	b940      	cbnz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     16a:	f00c ff24 	bl	cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     16e:	b928      	cbnz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     170:	f00c ff38 	bl	cfe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     174:	b910      	cbnz	r0, 17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	f00c ff49 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     17a:	b130      	cbz	r0, 18a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d>
     17c:	4806      	ldr	r0, [pc, #24]	; (198 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x8>)
     17e:	3031      	adds	r0, #49	; 0x31
     180:	6060      	str	r0, [r4, #4]
     182:	7065      	strb	r5, [r4, #1]
     184:	2004      	movs	r0, #4
     186:	70a0      	strb	r0, [r4, #2]
     188:	bd70      	pop	{r4, r5, r6, pc}
     18a:	21e8      	movs	r1, #232	; 0xe8
     18c:	2074      	movs	r0, #116	; 0x74
     18e:	f003 fba3 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     192:	0000      	.short	0x0000
     194:	20000028 	.word	0x20000028
     198:	00010908 	.word	0x00010908

0000019c <mpsl_tx_power_radio_supported_power_adjust>:
     19c:	4907      	ldr	r1, [pc, #28]	; (1bc <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     19e:	f991 2002 	ldrsb.w	r2, [r1, #2]
     1a2:	4290      	cmp	r0, r2
     1a4:	da03      	bge.n	1ae <mpsl_tx_power_radio_supported_power_adjust+0x12>
     1a6:	f991 2001 	ldrsb.w	r2, [r1, #1]
     1aa:	4290      	cmp	r0, r2
     1ac:	dc01      	bgt.n	1b2 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     1ae:	4610      	mov	r0, r2
     1b0:	4770      	bx	lr
     1b2:	6849      	ldr	r1, [r1, #4]
     1b4:	1a80      	subs	r0, r0, r2
     1b6:	5608      	ldrsb	r0, [r1, r0]
     1b8:	4770      	bx	lr
     1ba:	0000      	.short	0x0000
     1bc:	20000028 	.word	0x20000028

000001c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1c4:	461c      	mov	r4, r3
     1c6:	4690      	mov	r8, r2
     1c8:	460d      	mov	r5, r1
     1ca:	4606      	mov	r6, r0
     1cc:	f06f 0715 	mvn.w	r7, #21
     1d0:	2804      	cmp	r0, #4
     1d2:	d804      	bhi.n	1de <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     1d4:	b11c      	cbz	r4, 1de <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     1d6:	f00c fb82 	bl	c8de <__udivmoddi4+0x2a6>
     1da:	42a8      	cmp	r0, r5
     1dc:	d802      	bhi.n	1e4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     1de:	4638      	mov	r0, r7
     1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1e4:	4805      	ldr	r0, [pc, #20]	; (1fc <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x8>)
     1e6:	4642      	mov	r2, r8
     1e8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     1ec:	b118      	cbz	r0, 1f6 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x2>
     1ee:	5740      	ldrsb	r0, [r0, r5]
     1f0:	4282      	cmp	r2, r0
     1f2:	dd00      	ble.n	1f6 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x2>
     1f4:	4602      	mov	r2, r0
     1f6:	7022      	strb	r2, [r4, #0]
     1f8:	2000      	movs	r0, #0
     1fa:	e7f1      	b.n	1e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     1fc:	20000f60 	.word	0x20000f60
     200:	2800      	cmp	r0, #0
     202:	d019      	beq.n	238 <CONFIG_FLASH_SIZE+0x38>
     204:	7803      	ldrb	r3, [r0, #0]
     206:	4913      	ldr	r1, [pc, #76]	; (254 <CONFIG_FLASH_SIZE+0x54>)
     208:	4a13      	ldr	r2, [pc, #76]	; (258 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT>)
     20a:	b113      	cbz	r3, 212 <CONFIG_FLASH_SIZE+0x12>
     20c:	2b01      	cmp	r3, #1
     20e:	d00e      	beq.n	22e <CONFIG_FLASH_SIZE+0x2e>
     210:	e011      	b.n	236 <CONFIG_FLASH_SIZE+0x36>
     212:	7903      	ldrb	r3, [r0, #4]
     214:	2b01      	cmp	r3, #1
     216:	d000      	beq.n	21a <CONFIG_FLASH_SIZE+0x1a>
     218:	b96b      	cbnz	r3, 236 <CONFIG_FLASH_SIZE+0x36>
     21a:	7943      	ldrb	r3, [r0, #5]
     21c:	b10b      	cbz	r3, 222 <CONFIG_FLASH_SIZE+0x22>
     21e:	2b01      	cmp	r3, #1
     220:	d109      	bne.n	236 <CONFIG_FLASH_SIZE+0x36>
     222:	6883      	ldr	r3, [r0, #8]
     224:	3b64      	subs	r3, #100	; 0x64
     226:	428b      	cmp	r3, r1
     228:	d205      	bcs.n	236 <CONFIG_FLASH_SIZE+0x36>
     22a:	68c0      	ldr	r0, [r0, #12]
     22c:	e00e      	b.n	24c <CONFIG_FLASH_SIZE+0x4c>
     22e:	7903      	ldrb	r3, [r0, #4]
     230:	2b01      	cmp	r3, #1
     232:	d002      	beq.n	23a <CONFIG_FLASH_SIZE+0x3a>
     234:	b10b      	cbz	r3, 23a <CONFIG_FLASH_SIZE+0x3a>
     236:	2000      	movs	r0, #0
     238:	4770      	bx	lr
     23a:	7943      	ldrb	r3, [r0, #5]
     23c:	b10b      	cbz	r3, 242 <CONFIG_FLASH_SIZE+0x42>
     23e:	2b01      	cmp	r3, #1
     240:	d1f9      	bne.n	236 <CONFIG_FLASH_SIZE+0x36>
     242:	68c3      	ldr	r3, [r0, #12]
     244:	3b64      	subs	r3, #100	; 0x64
     246:	428b      	cmp	r3, r1
     248:	d2f5      	bcs.n	236 <CONFIG_FLASH_SIZE+0x36>
     24a:	6880      	ldr	r0, [r0, #8]
     24c:	4290      	cmp	r0, r2
     24e:	d8f2      	bhi.n	236 <CONFIG_FLASH_SIZE+0x36>
     250:	2001      	movs	r0, #1
     252:	4770      	bx	lr
     254:	0001863d 	.word	0x0001863d
     258:	0f423fff 	.word	0x0f423fff
     25c:	b510      	push	{r4, lr}
     25e:	4c05      	ldr	r4, [pc, #20]	; (274 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x1c>)
     260:	6820      	ldr	r0, [r4, #0]
     262:	b110      	cbz	r0, 26a <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x12>
     264:	4780      	blx	r0
     266:	2000      	movs	r0, #0
     268:	6020      	str	r0, [r4, #0]
     26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     26e:	f002 b8d9 	b.w	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     272:	0000      	.short	0x0000
     274:	20000030 	.word	0x20000030

00000278 <mpsl_timeslot_session_open>:
     278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     27c:	460e      	mov	r6, r1
     27e:	0005      	movs	r5, r0
     280:	d004      	beq.n	28c <mpsl_timeslot_session_open+0x14>
     282:	f000 f847 	bl	314 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     286:	4607      	mov	r7, r0
     288:	2400      	movs	r4, #0
     28a:	e00b      	b.n	2a4 <mpsl_timeslot_session_open+0x2c>
     28c:	f06f 0015 	mvn.w	r0, #21
     290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     294:	4620      	mov	r0, r4
     296:	f000 f843 	bl	320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     29a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     29e:	b130      	cbz	r0, 2ae <mpsl_timeslot_session_open+0x36>
     2a0:	1c64      	adds	r4, r4, #1
     2a2:	b2e4      	uxtb	r4, r4
     2a4:	42bc      	cmp	r4, r7
     2a6:	d3f5      	bcc.n	294 <mpsl_timeslot_session_open+0x1c>
     2a8:	f06f 000b 	mvn.w	r0, #11
     2ac:	e7f0      	b.n	290 <mpsl_timeslot_session_open+0x18>
     2ae:	4627      	mov	r7, r4
     2b0:	2cff      	cmp	r4, #255	; 0xff
     2b2:	d0f9      	beq.n	2a8 <mpsl_timeslot_session_open+0x30>
     2b4:	4620      	mov	r0, r4
     2b6:	f000 f833 	bl	320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     2ba:	4604      	mov	r4, r0
     2bc:	f00c fcdb 	bl	cc76 <__udivmoddi4+0x63e>
     2c0:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     2c4:	4621      	mov	r1, r4
     2c6:	4808      	ldr	r0, [pc, #32]	; (2e8 <mpsl_timeslot_session_open+0x70>)
     2c8:	f002 f884 	bl	23d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     2cc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     2d0:	2820      	cmp	r0, #32
     2d2:	d006      	beq.n	2e2 <mpsl_timeslot_session_open+0x6a>
     2d4:	2001      	movs	r0, #1
     2d6:	6225      	str	r5, [r4, #32]
     2d8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     2dc:	7037      	strb	r7, [r6, #0]
     2de:	2000      	movs	r0, #0
     2e0:	e7d6      	b.n	290 <mpsl_timeslot_session_open+0x18>
     2e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
     2e6:	e7d3      	b.n	290 <mpsl_timeslot_session_open+0x18>
     2e8:	0000c9a1 	.word	0x0000c9a1

000002ec <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     2ec:	b510      	push	{r4, lr}
     2ee:	0782      	lsls	r2, r0, #30
     2f0:	d002      	beq.n	2f8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     2f2:	f06f 000d 	mvn.w	r0, #13
     2f6:	bd10      	pop	{r4, pc}
     2f8:	4a05      	ldr	r2, [pc, #20]	; (310 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x10>)
     2fa:	7011      	strb	r1, [r2, #0]
     2fc:	6050      	str	r0, [r2, #4]
     2fe:	b128      	cbz	r0, 30c <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc>
     300:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     304:	010a      	lsls	r2, r1, #4
     306:	2100      	movs	r1, #0
     308:	f00c ff3a 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     30c:	2000      	movs	r0, #0
     30e:	bd10      	pop	{r4, pc}
     310:	20000034 	.word	0x20000034

00000314 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     314:	4801      	ldr	r0, [pc, #4]	; (31c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     316:	7800      	ldrb	r0, [r0, #0]
     318:	4770      	bx	lr
     31a:	0000      	.short	0x0000
     31c:	20000034 	.word	0x20000034

00000320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     320:	4905      	ldr	r1, [pc, #20]	; (338 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     322:	780a      	ldrb	r2, [r1, #0]
     324:	4290      	cmp	r0, r2
     326:	d301      	bcc.n	32c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     328:	2000      	movs	r0, #0
     32a:	4770      	bx	lr
     32c:	6849      	ldr	r1, [r1, #4]
     32e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     332:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     336:	4770      	bx	lr
     338:	20000034 	.word	0x20000034

0000033c <MPSL_IRQ_RADIO_Handler>:
     33c:	490e      	ldr	r1, [pc, #56]	; (378 <MPSL_IRQ_RADIO_Handler+0x3c>)
     33e:	b510      	push	{r4, lr}
     340:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     344:	2820      	cmp	r0, #32
     346:	d012      	beq.n	36e <MPSL_IRQ_RADIO_Handler+0x32>
     348:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     34c:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     350:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     354:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     358:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     35c:	6840      	ldr	r0, [r0, #4]
     35e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     362:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     36a:	2104      	movs	r1, #4
     36c:	4710      	bx	r2
     36e:	f640 0187 	movw	r1, #2183	; 0x887
     372:	2070      	movs	r0, #112	; 0x70
     374:	f003 fab0 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     378:	20001374 	.word	0x20001374
     37c:	b570      	push	{r4, r5, r6, lr}
     37e:	4605      	mov	r5, r0
     380:	2a20      	cmp	r2, #32
     382:	d028      	beq.n	3d6 <MPSL_IRQ_RADIO_Handler+0x9a>
     384:	4819      	ldr	r0, [pc, #100]	; (3ec <MPSL_IRQ_RADIO_Handler+0xb0>)
     386:	4c1a      	ldr	r4, [pc, #104]	; (3f0 <MPSL_IRQ_RADIO_Handler+0xb4>)
     388:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     38c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     390:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     394:	4423      	add	r3, r4
     396:	2920      	cmp	r1, #32
     398:	d022      	beq.n	3e0 <MPSL_IRQ_RADIO_Handler+0xa4>
     39a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     39e:	7840      	ldrb	r0, [r0, #1]
     3a0:	784c      	ldrb	r4, [r1, #1]
     3a2:	7048      	strb	r0, [r1, #1]
     3a4:	4620      	mov	r0, r4
     3a6:	4601      	mov	r1, r0
     3a8:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     3ac:	4291      	cmp	r1, r2
     3ae:	7005      	strb	r5, [r0, #0]
     3b0:	7840      	ldrb	r0, [r0, #1]
     3b2:	d1f8      	bne.n	3a6 <MPSL_IRQ_RADIO_Handler+0x6a>
     3b4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     3b8:	2a20      	cmp	r2, #32
     3ba:	bf1a      	itte	ne
     3bc:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     3c0:	7054      	strbne	r4, [r2, #1]
     3c2:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     3c6:	2220      	movs	r2, #32
     3c8:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     3cc:	f88c 2001 	strb.w	r2, [ip, #1]
     3d0:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     3d4:	bd70      	pop	{r4, r5, r6, pc}
     3d6:	f240 2192 	movw	r1, #658	; 0x292
     3da:	2070      	movs	r0, #112	; 0x70
     3dc:	f003 fa7c 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     3e0:	f893 4020 	ldrb.w	r4, [r3, #32]
     3e4:	7840      	ldrb	r0, [r0, #1]
     3e6:	f883 0020 	strb.w	r0, [r3, #32]
     3ea:	e7db      	b.n	3a4 <MPSL_IRQ_RADIO_Handler+0x68>
     3ec:	200012f4 	.word	0x200012f4
     3f0:	20001374 	.word	0x20001374
     3f4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3f8:	b085      	sub	sp, #20
     3fa:	4615      	mov	r5, r2
     3fc:	460c      	mov	r4, r1
     3fe:	f002 f9cb 	bl	2798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     402:	4428      	add	r0, r5
     404:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     408:	9102      	str	r1, [sp, #8]
     40a:	6820      	ldr	r0, [r4, #0]
     40c:	1a40      	subs	r0, r0, r1
     40e:	0200      	lsls	r0, r0, #8
     410:	17c1      	asrs	r1, r0, #31
     412:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     416:	1200      	asrs	r0, r0, #8
     418:	2800      	cmp	r0, #0
     41a:	f300 80f0 	bgt.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
     41e:	f8dd 8020 	ldr.w	r8, [sp, #32]
     422:	48ca      	ldr	r0, [pc, #808]	; (74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>)
     424:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     428:	4408      	add	r0, r1
     42a:	9003      	str	r0, [sp, #12]
     42c:	f890 5020 	ldrb.w	r5, [r0, #32]
     430:	2020      	movs	r0, #32
     432:	4ec7      	ldr	r6, [pc, #796]	; (750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>)
     434:	46ea      	mov	sl, sp
     436:	f10d 0904 	add.w	r9, sp, #4
     43a:	f88d 0000 	strb.w	r0, [sp]
     43e:	2d20      	cmp	r5, #32
     440:	bf1c      	itt	ne
     442:	48c4      	ldrne	r0, [pc, #784]	; (754 <CONFIG_BT_HCI_TX_STACK_SIZE+0x154>)
     444:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     448:	d039      	beq.n	4be <CONFIG_BT_LONG_WQ_STACK_SIZE+0x4a>
     44a:	bf00      	nop
     44c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     450:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     454:	f100 0108 	add.w	r1, r0, #8
     458:	68c0      	ldr	r0, [r0, #12]
     45a:	6827      	ldr	r7, [r4, #0]
     45c:	1a38      	subs	r0, r7, r0
     45e:	0200      	lsls	r0, r0, #8
     460:	17c2      	asrs	r2, r0, #31
     462:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     466:	1200      	asrs	r0, r0, #8
     468:	d429      	bmi.n	4be <CONFIG_BT_LONG_WQ_STACK_SIZE+0x4a>
     46a:	89e0      	ldrh	r0, [r4, #14]
     46c:	b300      	cbz	r0, 4b0 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x3c>
     46e:	89c8      	ldrh	r0, [r1, #14]
     470:	b9f0      	cbnz	r0, 4b0 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x3c>
     472:	6808      	ldr	r0, [r1, #0]
     474:	9004      	str	r0, [sp, #16]
     476:	f003 f8a3 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     47a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     47e:	bf08      	it	eq
     480:	200d      	moveq	r0, #13
     482:	d00b      	beq.n	49c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x28>
     484:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     488:	3856      	subs	r0, #86	; 0x56
     48a:	bf08      	it	eq
     48c:	201c      	moveq	r0, #28
     48e:	d005      	beq.n	49c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x28>
     490:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     494:	389f      	subs	r0, #159	; 0x9f
     496:	bf14      	ite	ne
     498:	2000      	movne	r0, #0
     49a:	2032      	moveq	r0, #50	; 0x32
     49c:	1c41      	adds	r1, r0, #1
     49e:	9804      	ldr	r0, [sp, #16]
     4a0:	1a38      	subs	r0, r7, r0
     4a2:	0200      	lsls	r0, r0, #8
     4a4:	17c2      	asrs	r2, r0, #31
     4a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     4aa:	1200      	asrs	r0, r0, #8
     4ac:	4288      	cmp	r0, r1
     4ae:	db06      	blt.n	4be <CONFIG_BT_LONG_WQ_STACK_SIZE+0x4a>
     4b0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     4b4:	f88a 5000 	strb.w	r5, [sl]
     4b8:	7845      	ldrb	r5, [r0, #1]
     4ba:	2d20      	cmp	r5, #32
     4bc:	d1c6      	bne.n	44c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4c>
     4be:	f89a 0000 	ldrb.w	r0, [sl]
     4c2:	f889 0000 	strb.w	r0, [r9]
     4c6:	2d20      	cmp	r5, #32
     4c8:	bf1c      	itt	ne
     4ca:	48a2      	ldrne	r0, [pc, #648]	; (754 <CONFIG_BT_HCI_TX_STACK_SIZE+0x154>)
     4cc:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     4d0:	f000 8138 	beq.w	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     4d4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     4d8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     4dc:	6860      	ldr	r0, [r4, #4]
     4de:	f8d7 8008 	ldr.w	r8, [r7, #8]
     4e2:	f107 0108 	add.w	r1, r7, #8
     4e6:	eba8 0000 	sub.w	r0, r8, r0
     4ea:	0200      	lsls	r0, r0, #8
     4ec:	17c2      	asrs	r2, r0, #31
     4ee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     4f2:	1200      	asrs	r0, r0, #8
     4f4:	d427      	bmi.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     4f6:	89c8      	ldrh	r0, [r1, #14]
     4f8:	2800      	cmp	r0, #0
     4fa:	f000 8123 	beq.w	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     4fe:	89e0      	ldrh	r0, [r4, #14]
     500:	2800      	cmp	r0, #0
     502:	f040 811f 	bne.w	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     506:	f8d4 a000 	ldr.w	sl, [r4]
     50a:	f003 f859 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     50e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     512:	bf08      	it	eq
     514:	200d      	moveq	r0, #13
     516:	d00b      	beq.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     518:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     51c:	3856      	subs	r0, #86	; 0x56
     51e:	bf08      	it	eq
     520:	201c      	moveq	r0, #28
     522:	d005      	beq.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     524:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     528:	389f      	subs	r0, #159	; 0x9f
     52a:	bf14      	ite	ne
     52c:	2000      	movne	r0, #0
     52e:	2032      	moveq	r0, #50	; 0x32
     530:	1c41      	adds	r1, r0, #1
     532:	eba8 000a 	sub.w	r0, r8, sl
     536:	0200      	lsls	r0, r0, #8
     538:	17c2      	asrs	r2, r0, #31
     53a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     53e:	1200      	asrs	r0, r0, #8
     540:	4288      	cmp	r0, r1
     542:	f280 80ff 	bge.w	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     546:	f889 5000 	strb.w	r5, [r9]
     54a:	7e39      	ldrb	r1, [r7, #24]
     54c:	7c20      	ldrb	r0, [r4, #16]
     54e:	4281      	cmp	r1, r0
     550:	d906      	bls.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     552:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     556:	7845      	ldrb	r5, [r0, #1]
     558:	2d20      	cmp	r5, #32
     55a:	d1bb      	bne.n	4d4 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x60>
     55c:	f000 b8f2 	b.w	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     560:	f89d 0004 	ldrb.w	r0, [sp, #4]
     564:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     568:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     56c:	8ac1      	ldrh	r1, [r0, #22]
     56e:	68c5      	ldr	r5, [r0, #12]
     570:	bbe1      	cbnz	r1, 5ec <CONFIG_MAIN_STACK_SIZE+0x6c>
     572:	89e1      	ldrh	r1, [r4, #14]
     574:	b3d1      	cbz	r1, 5ec <CONFIG_MAIN_STACK_SIZE+0x6c>
     576:	6887      	ldr	r7, [r0, #8]
     578:	f003 f822 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     57c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     580:	bf08      	it	eq
     582:	200d      	moveq	r0, #13
     584:	d00b      	beq.n	59e <CONFIG_MAIN_STACK_SIZE+0x1e>
     586:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     58a:	3856      	subs	r0, #86	; 0x56
     58c:	bf08      	it	eq
     58e:	201c      	moveq	r0, #28
     590:	d005      	beq.n	59e <CONFIG_MAIN_STACK_SIZE+0x1e>
     592:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     596:	389f      	subs	r0, #159	; 0x9f
     598:	bf14      	ite	ne
     59a:	2000      	movne	r0, #0
     59c:	2032      	moveq	r0, #50	; 0x32
     59e:	1c41      	adds	r1, r0, #1
     5a0:	1be8      	subs	r0, r5, r7
     5a2:	0200      	lsls	r0, r0, #8
     5a4:	17c2      	asrs	r2, r0, #31
     5a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5aa:	1200      	asrs	r0, r0, #8
     5ac:	4288      	cmp	r0, r1
     5ae:	da1d      	bge.n	5ec <CONFIG_MAIN_STACK_SIZE+0x6c>
     5b0:	f003 f806 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     5b4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     5b8:	bf08      	it	eq
     5ba:	200d      	moveq	r0, #13
     5bc:	d00b      	beq.n	5d6 <CONFIG_MAIN_STACK_SIZE+0x56>
     5be:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     5c2:	3856      	subs	r0, #86	; 0x56
     5c4:	bf08      	it	eq
     5c6:	201c      	moveq	r0, #28
     5c8:	d005      	beq.n	5d6 <CONFIG_MAIN_STACK_SIZE+0x56>
     5ca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     5ce:	389f      	subs	r0, #159	; 0x9f
     5d0:	bf14      	ite	ne
     5d2:	2000      	movne	r0, #0
     5d4:	2032      	moveq	r0, #50	; 0x32
     5d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
     5da:	1c40      	adds	r0, r0, #1
     5dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     5e0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     5e4:	6889      	ldr	r1, [r1, #8]
     5e6:	4408      	add	r0, r1
     5e8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     5ec:	9802      	ldr	r0, [sp, #8]
     5ee:	1a28      	subs	r0, r5, r0
     5f0:	0200      	lsls	r0, r0, #8
     5f2:	17c1      	asrs	r1, r0, #31
     5f4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5f8:	1200      	asrs	r0, r0, #8
     5fa:	2800      	cmp	r0, #0
     5fc:	dd03      	ble.n	606 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     5fe:	b009      	add	sp, #36	; 0x24
     600:	2000      	movs	r0, #0
     602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     606:	e9d4 1000 	ldrd	r1, r0, [r4]
     60a:	1a40      	subs	r0, r0, r1
     60c:	4428      	add	r0, r5
     60e:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     612:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     616:	e9c4 1000 	strd	r1, r0, [r4]
     61a:	9808      	ldr	r0, [sp, #32]
     61c:	9004      	str	r0, [sp, #16]
     61e:	9803      	ldr	r0, [sp, #12]
     620:	46ea      	mov	sl, sp
     622:	f10d 0804 	add.w	r8, sp, #4
     626:	f890 5020 	ldrb.w	r5, [r0, #32]
     62a:	2020      	movs	r0, #32
     62c:	f88d 0000 	strb.w	r0, [sp]
     630:	2d20      	cmp	r5, #32
     632:	d03c      	beq.n	6ae <CONFIG_BT_HCI_TX_STACK_SIZE+0xae>
     634:	4847      	ldr	r0, [pc, #284]	; (754 <CONFIG_BT_HCI_TX_STACK_SIZE+0x154>)
     636:	9904      	ldr	r1, [sp, #16]
     638:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
     63c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     640:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     644:	f100 0108 	add.w	r1, r0, #8
     648:	68c0      	ldr	r0, [r0, #12]
     64a:	6827      	ldr	r7, [r4, #0]
     64c:	1a38      	subs	r0, r7, r0
     64e:	0200      	lsls	r0, r0, #8
     650:	17c2      	asrs	r2, r0, #31
     652:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     656:	1200      	asrs	r0, r0, #8
     658:	d429      	bmi.n	6ae <CONFIG_BT_HCI_TX_STACK_SIZE+0xae>
     65a:	89e0      	ldrh	r0, [r4, #14]
     65c:	b300      	cbz	r0, 6a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     65e:	89c8      	ldrh	r0, [r1, #14]
     660:	b9f0      	cbnz	r0, 6a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     662:	f8d1 9000 	ldr.w	r9, [r1]
     666:	f002 ffab 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     66a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     66e:	bf08      	it	eq
     670:	200d      	moveq	r0, #13
     672:	d00b      	beq.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     674:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     678:	3856      	subs	r0, #86	; 0x56
     67a:	bf08      	it	eq
     67c:	201c      	moveq	r0, #28
     67e:	d005      	beq.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     680:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     684:	389f      	subs	r0, #159	; 0x9f
     686:	bf14      	ite	ne
     688:	2000      	movne	r0, #0
     68a:	2032      	moveq	r0, #50	; 0x32
     68c:	1c41      	adds	r1, r0, #1
     68e:	eba7 0009 	sub.w	r0, r7, r9
     692:	0200      	lsls	r0, r0, #8
     694:	17c2      	asrs	r2, r0, #31
     696:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     69a:	1200      	asrs	r0, r0, #8
     69c:	4288      	cmp	r0, r1
     69e:	db06      	blt.n	6ae <CONFIG_BT_HCI_TX_STACK_SIZE+0xae>
     6a0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6a4:	f88a 5000 	strb.w	r5, [sl]
     6a8:	7845      	ldrb	r5, [r0, #1]
     6aa:	2d20      	cmp	r5, #32
     6ac:	d1c6      	bne.n	63c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     6ae:	f89a 0000 	ldrb.w	r0, [sl]
     6b2:	f888 0000 	strb.w	r0, [r8]
     6b6:	9804      	ldr	r0, [sp, #16]
     6b8:	2d20      	cmp	r5, #32
     6ba:	bf1c      	itt	ne
     6bc:	4925      	ldrne	r1, [pc, #148]	; (754 <CONFIG_BT_HCI_TX_STACK_SIZE+0x154>)
     6be:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     6c2:	d03f      	beq.n	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     6c4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     6c8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     6cc:	6861      	ldr	r1, [r4, #4]
     6ce:	f8d7 9008 	ldr.w	r9, [r7, #8]
     6d2:	f107 0008 	add.w	r0, r7, #8
     6d6:	eba9 0101 	sub.w	r1, r9, r1
     6da:	0209      	lsls	r1, r1, #8
     6dc:	17ca      	asrs	r2, r1, #31
     6de:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6e2:	1209      	asrs	r1, r1, #8
     6e4:	d422      	bmi.n	72c <CONFIG_BT_HCI_TX_STACK_SIZE+0x12c>
     6e6:	89c0      	ldrh	r0, [r0, #14]
     6e8:	b360      	cbz	r0, 744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     6ea:	89e0      	ldrh	r0, [r4, #14]
     6ec:	bb50      	cbnz	r0, 744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     6ee:	f8d4 a000 	ldr.w	sl, [r4]
     6f2:	f002 ff65 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     6f6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     6fa:	bf08      	it	eq
     6fc:	200d      	moveq	r0, #13
     6fe:	d00b      	beq.n	718 <CONFIG_BT_HCI_TX_STACK_SIZE+0x118>
     700:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     704:	3856      	subs	r0, #86	; 0x56
     706:	bf08      	it	eq
     708:	201c      	moveq	r0, #28
     70a:	d005      	beq.n	718 <CONFIG_BT_HCI_TX_STACK_SIZE+0x118>
     70c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     710:	389f      	subs	r0, #159	; 0x9f
     712:	bf14      	ite	ne
     714:	2000      	movne	r0, #0
     716:	2032      	moveq	r0, #50	; 0x32
     718:	1c41      	adds	r1, r0, #1
     71a:	eba9 000a 	sub.w	r0, r9, sl
     71e:	0200      	lsls	r0, r0, #8
     720:	17c2      	asrs	r2, r0, #31
     722:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     726:	1200      	asrs	r0, r0, #8
     728:	4288      	cmp	r0, r1
     72a:	da0b      	bge.n	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     72c:	f888 5000 	strb.w	r5, [r8]
     730:	7e38      	ldrb	r0, [r7, #24]
     732:	7c21      	ldrb	r1, [r4, #16]
     734:	4288      	cmp	r0, r1
     736:	f67f af13 	bls.w	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     73a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     73e:	7845      	ldrb	r5, [r0, #1]
     740:	2d20      	cmp	r5, #32
     742:	d1bf      	bne.n	6c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc4>
     744:	b009      	add	sp, #36	; 0x24
     746:	2001      	movs	r0, #1
     748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     74c:	20001374 	.word	0x20001374
     750:	20000f74 	.word	0x20000f74
     754:	200012f4 	.word	0x200012f4
     758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	460f      	mov	r7, r1
     75e:	4606      	mov	r6, r0
     760:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     764:	494b      	ldr	r1, [pc, #300]	; (894 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x94>)
     766:	4699      	mov	r9, r3
     768:	4408      	add	r0, r1
     76a:	4692      	mov	sl, r2
     76c:	f890 4020 	ldrb.w	r4, [r0, #32]
     770:	2020      	movs	r0, #32
     772:	7010      	strb	r0, [r2, #0]
     774:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     778:	2c20      	cmp	r4, #32
     77a:	bf1c      	itt	ne
     77c:	4846      	ldrne	r0, [pc, #280]	; (898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>)
     77e:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     782:	d038      	beq.n	7f6 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x26>
     784:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     788:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     78c:	f100 0108 	add.w	r1, r0, #8
     790:	68c0      	ldr	r0, [r0, #12]
     792:	6835      	ldr	r5, [r6, #0]
     794:	1a28      	subs	r0, r5, r0
     796:	0200      	lsls	r0, r0, #8
     798:	17c2      	asrs	r2, r0, #31
     79a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     79e:	1200      	asrs	r0, r0, #8
     7a0:	d429      	bmi.n	7f6 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x26>
     7a2:	89f0      	ldrh	r0, [r6, #14]
     7a4:	b300      	cbz	r0, 7e8 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x18>
     7a6:	89c8      	ldrh	r0, [r1, #14]
     7a8:	b9f0      	cbnz	r0, 7e8 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x18>
     7aa:	6808      	ldr	r0, [r1, #0]
     7ac:	9000      	str	r0, [sp, #0]
     7ae:	f002 ff07 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     7b2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     7b6:	bf08      	it	eq
     7b8:	200d      	moveq	r0, #13
     7ba:	d00b      	beq.n	7d4 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x4>
     7bc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     7c0:	3856      	subs	r0, #86	; 0x56
     7c2:	bf08      	it	eq
     7c4:	201c      	moveq	r0, #28
     7c6:	d005      	beq.n	7d4 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x4>
     7c8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     7cc:	389f      	subs	r0, #159	; 0x9f
     7ce:	bf14      	ite	ne
     7d0:	2000      	movne	r0, #0
     7d2:	2032      	moveq	r0, #50	; 0x32
     7d4:	1c41      	adds	r1, r0, #1
     7d6:	9800      	ldr	r0, [sp, #0]
     7d8:	1a28      	subs	r0, r5, r0
     7da:	0200      	lsls	r0, r0, #8
     7dc:	17c2      	asrs	r2, r0, #31
     7de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7e2:	1200      	asrs	r0, r0, #8
     7e4:	4288      	cmp	r0, r1
     7e6:	db06      	blt.n	7f6 <CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT+0x26>
     7e8:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     7ec:	f88a 4000 	strb.w	r4, [sl]
     7f0:	7844      	ldrb	r4, [r0, #1]
     7f2:	2c20      	cmp	r4, #32
     7f4:	d1c6      	bne.n	784 <CONFIG_BT_HCI_TX_STACK_SIZE+0x184>
     7f6:	f89a 0000 	ldrb.w	r0, [sl]
     7fa:	f889 0000 	strb.w	r0, [r9]
     7fe:	2c20      	cmp	r4, #32
     800:	bf1c      	itt	ne
     802:	4825      	ldrne	r0, [pc, #148]	; (898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>)
     804:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     808:	d040      	beq.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     80a:	bf00      	nop
     80c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     810:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     814:	6870      	ldr	r0, [r6, #4]
     816:	68bd      	ldr	r5, [r7, #8]
     818:	f107 0108 	add.w	r1, r7, #8
     81c:	1a28      	subs	r0, r5, r0
     81e:	0200      	lsls	r0, r0, #8
     820:	17c2      	asrs	r2, r0, #31
     822:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     826:	1200      	asrs	r0, r0, #8
     828:	d422      	bmi.n	870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>
     82a:	89c8      	ldrh	r0, [r1, #14]
     82c:	b370      	cbz	r0, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     82e:	89f0      	ldrh	r0, [r6, #14]
     830:	bb60      	cbnz	r0, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     832:	f8d6 b000 	ldr.w	fp, [r6]
     836:	f002 fec3 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     83a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     83e:	bf08      	it	eq
     840:	200d      	moveq	r0, #13
     842:	d00b      	beq.n	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
     844:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     848:	3856      	subs	r0, #86	; 0x56
     84a:	bf08      	it	eq
     84c:	201c      	moveq	r0, #28
     84e:	d005      	beq.n	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
     850:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     854:	389f      	subs	r0, #159	; 0x9f
     856:	bf14      	ite	ne
     858:	2000      	movne	r0, #0
     85a:	2032      	moveq	r0, #50	; 0x32
     85c:	1c41      	adds	r1, r0, #1
     85e:	eba5 000b 	sub.w	r0, r5, fp
     862:	0200      	lsls	r0, r0, #8
     864:	17c2      	asrs	r2, r0, #31
     866:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     86a:	1200      	asrs	r0, r0, #8
     86c:	4288      	cmp	r0, r1
     86e:	da0d      	bge.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     870:	f889 4000 	strb.w	r4, [r9]
     874:	7e38      	ldrb	r0, [r7, #24]
     876:	7c31      	ldrb	r1, [r6, #16]
     878:	4288      	cmp	r0, r1
     87a:	d802      	bhi.n	882 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x82>
     87c:	2000      	movs	r0, #0
     87e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     882:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     886:	7844      	ldrb	r4, [r0, #1]
     888:	2c20      	cmp	r4, #32
     88a:	d1bf      	bne.n	80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>
     88c:	2001      	movs	r0, #1
     88e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     892:	0000      	.short	0x0000
     894:	20001374 	.word	0x20001374
     898:	200012f4 	.word	0x200012f4
     89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8a0:	b082      	sub	sp, #8
     8a2:	4605      	mov	r5, r0
     8a4:	4614      	mov	r4, r2
     8a6:	4688      	mov	r8, r1
     8a8:	89d0      	ldrh	r0, [r2, #14]
     8aa:	aa01      	add	r2, sp, #4
     8ac:	4669      	mov	r1, sp
     8ae:	f001 ff8f 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     8b2:	f002 fcb7 	bl	3224 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     8b6:	f001 ff6f 	bl	2798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     8ba:	4607      	mov	r7, r0
     8bc:	4820      	ldr	r0, [pc, #128]	; (940 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x140>)
     8be:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
     8c2:	2920      	cmp	r1, #32
     8c4:	d004      	beq.n	8d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd0>
     8c6:	68c0      	ldr	r0, [r0, #12]
     8c8:	1d40      	adds	r0, r0, #5
     8ca:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     8ce:	e024      	b.n	91a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x11a>
     8d0:	89e0      	ldrh	r0, [r4, #14]
     8d2:	f105 0609 	add.w	r6, r5, #9
     8d6:	b1b0      	cbz	r0, 906 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x106>
     8d8:	f002 ff86 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     8dc:	b998      	cbnz	r0, 906 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x106>
     8de:	f002 fe6f 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     8e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     8e6:	bf08      	it	eq
     8e8:	200d      	moveq	r0, #13
     8ea:	d00b      	beq.n	904 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x104>
     8ec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     8f0:	3856      	subs	r0, #86	; 0x56
     8f2:	bf08      	it	eq
     8f4:	201c      	moveq	r0, #28
     8f6:	d005      	beq.n	904 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x104>
     8f8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     8fc:	389f      	subs	r0, #159	; 0x9f
     8fe:	bf14      	ite	ne
     900:	2000      	movne	r0, #0
     902:	2032      	moveq	r0, #50	; 0x32
     904:	4406      	add	r6, r0
     906:	f1b8 0f00 	cmp.w	r8, #0
     90a:	d104      	bne.n	916 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x116>
     90c:	9800      	ldr	r0, [sp, #0]
     90e:	4287      	cmp	r7, r0
     910:	bf84      	itt	hi
     912:	1a38      	subhi	r0, r7, r0
     914:	4406      	addhi	r6, r0
     916:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     91a:	e9d4 2000 	ldrd	r2, r0, [r4]
     91e:	1a80      	subs	r0, r0, r2
     920:	4408      	add	r0, r1
     922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     926:	e9c4 1000 	strd	r1, r0, [r4]
     92a:	42a9      	cmp	r1, r5
     92c:	bf24      	itt	cs
     92e:	b002      	addcs	sp, #8
     930:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
     934:	68a0      	ldr	r0, [r4, #8]
     936:	1c40      	adds	r0, r0, #1
     938:	60a0      	str	r0, [r4, #8]
     93a:	b002      	add	sp, #8
     93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     940:	20001374 	.word	0x20001374
     944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     948:	b097      	sub	sp, #92	; 0x5c
     94a:	4617      	mov	r7, r2
     94c:	468b      	mov	fp, r1
     94e:	4605      	mov	r5, r0
     950:	f002 f9d0 	bl	2cf4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     954:	4604      	mov	r4, r0
     956:	f002 fc65 	bl	3224 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     95a:	4606      	mov	r6, r0
     95c:	f1bb 0f01 	cmp.w	fp, #1
     960:	bf18      	it	ne
     962:	f1bb 0f02 	cmpne.w	fp, #2
     966:	d005      	beq.n	974 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x174>
     968:	f640 115d 	movw	r1, #2397	; 0x95d
     96c:	f04f 0070 	mov.w	r0, #112	; 0x70
     970:	f002 ffb2 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     974:	49f8      	ldr	r1, [pc, #992]	; (d58 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1a0>)
     976:	2001      	movs	r0, #1
     978:	6008      	str	r0, [r1, #0]
     97a:	49f8      	ldr	r1, [pc, #992]	; (d5c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1a4>)
     97c:	6889      	ldr	r1, [r1, #8]
     97e:	6008      	str	r0, [r1, #0]
     980:	2000      	movs	r0, #0
     982:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     986:	900c      	str	r0, [sp, #48]	; 0x30
     988:	1e40      	subs	r0, r0, #1
     98a:	900d      	str	r0, [sp, #52]	; 0x34
     98c:	49f4      	ldr	r1, [pc, #976]	; (d60 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1a8>)
     98e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
     992:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     996:	f100 0108 	add.w	r1, r0, #8
     99a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
     99e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
     9a2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
     9a6:	6980      	ldr	r0, [r0, #24]
     9a8:	9012      	str	r0, [sp, #72]	; 0x48
     9aa:	a80e      	add	r0, sp, #56	; 0x38
     9ac:	f000 fbc4 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     9b0:	9007      	str	r0, [sp, #28]
     9b2:	48ec      	ldr	r0, [pc, #944]	; (d64 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1ac>)
     9b4:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
     9b8:	8b80      	ldrh	r0, [r0, #28]
     9ba:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     9be:	f1b8 0f00 	cmp.w	r8, #0
     9c2:	bf04      	itt	eq
     9c4:	2000      	moveq	r0, #0
     9c6:	9006      	streq	r0, [sp, #24]
     9c8:	d00b      	beq.n	9e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e2>
     9ca:	2001      	movs	r0, #1
     9cc:	9006      	str	r0, [sp, #24]
     9ce:	48e5      	ldr	r0, [pc, #916]	; (d64 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1ac>)
     9d0:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     9d4:	b928      	cbnz	r0, 9e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e2>
     9d6:	f002 ff07 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     9da:	2800      	cmp	r0, #0
     9dc:	bf08      	it	eq
     9de:	2701      	moveq	r7, #1
     9e0:	d000      	beq.n	9e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e4>
     9e2:	2700      	movs	r7, #0
     9e4:	f002 fdec 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     9e8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     9ec:	bf08      	it	eq
     9ee:	200d      	moveq	r0, #13
     9f0:	d00b      	beq.n	a0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20a>
     9f2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     9f6:	3856      	subs	r0, #86	; 0x56
     9f8:	bf08      	it	eq
     9fa:	201c      	moveq	r0, #28
     9fc:	d005      	beq.n	a0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20a>
     9fe:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     a02:	389f      	subs	r0, #159	; 0x9f
     a04:	bf14      	ite	ne
     a06:	2000      	movne	r0, #0
     a08:	2032      	moveq	r0, #50	; 0x32
     a0a:	f04f 0900 	mov.w	r9, #0
     a0e:	46ca      	mov	sl, r9
     a10:	900b      	str	r0, [sp, #44]	; 0x2c
     a12:	4546      	cmp	r6, r8
     a14:	d938      	bls.n	a88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x288>
     a16:	9907      	ldr	r1, [sp, #28]
     a18:	f8df 934c 	ldr.w	r9, [pc, #844]	; d68 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1b0>
     a1c:	ea6f 0c06 	mvn.w	ip, r6
     a20:	466b      	mov	r3, sp
     a22:	aa16      	add	r2, sp, #88	; 0x58
     a24:	eb01 000c 	add.w	r0, r1, ip
     a28:	4549      	cmp	r1, r9
     a2a:	d904      	bls.n	a36 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x236>
     a2c:	f240 516f 	movw	r1, #1391	; 0x56f
     a30:	2070      	movs	r0, #112	; 0x70
     a32:	f002 ff51 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a36:	49cd      	ldr	r1, [pc, #820]	; (d6c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1b4>)
     a38:	458c      	cmp	ip, r1
     a3a:	dd04      	ble.n	a46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x246>
     a3c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
     a40:	2070      	movs	r0, #112	; 0x70
     a42:	f002 ff49 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a46:	49ca      	ldr	r1, [pc, #808]	; (d70 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1b8>)
     a48:	458c      	cmp	ip, r1
     a4a:	da04      	bge.n	a56 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x256>
     a4c:	f240 5171 	movw	r1, #1393	; 0x571
     a50:	2070      	movs	r0, #112	; 0x70
     a52:	f002 ff41 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a56:	49c7      	ldr	r1, [pc, #796]	; (d74 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1bc>)
     a58:	4281      	cmp	r1, r0
     a5a:	bfdc      	itt	le
     a5c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     a60:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     a64:	dd05      	ble.n	a72 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x272>
     a66:	2800      	cmp	r0, #0
     a68:	bfbc      	itt	lt
     a6a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     a6e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     a72:	4619      	mov	r1, r3
     a74:	f001 feac 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     a78:	9800      	ldr	r0, [sp, #0]
     a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
     a7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a80:	9000      	str	r0, [sp, #0]
     a82:	1a08      	subs	r0, r1, r0
     a84:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
     a88:	2f00      	cmp	r7, #0
     a8a:	bf18      	it	ne
     a8c:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
     a90:	d105      	bne.n	a9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x29e>
     a92:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a96:	2800      	cmp	r0, #0
     a98:	bf18      	it	ne
     a9a:	f04f 0a02 	movne.w	sl, #2
     a9e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     aa2:	d008      	beq.n	ab6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b6>
     aa4:	980e      	ldr	r0, [sp, #56]	; 0x38
     aa6:	1b00      	subs	r0, r0, r4
     aa8:	0200      	lsls	r0, r0, #8
     aaa:	17c1      	asrs	r1, r0, #31
     aac:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     ab0:	1200      	asrs	r0, r0, #8
     ab2:	2801      	cmp	r0, #1
     ab4:	da01      	bge.n	aba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ba>
     ab6:	2003      	movs	r0, #3
     ab8:	e00d      	b.n	ad6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2d6>
     aba:	b157      	cbz	r7, ad2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2d2>
     abc:	48a9      	ldr	r0, [pc, #676]	; (d64 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1ac>)
     abe:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     ac2:	b130      	cbz	r0, ad2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2d2>
     ac4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     ac8:	f110 0a00 	adds.w	sl, r0, #0
     acc:	bf18      	it	ne
     ace:	f04f 0a02 	movne.w	sl, #2
     ad2:	4625      	mov	r5, r4
     ad4:	2000      	movs	r0, #0
     ad6:	4482      	add	sl, r0
     ad8:	980e      	ldr	r0, [sp, #56]	; 0x38
     ada:	eba0 0009 	sub.w	r0, r0, r9
     ade:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     ae2:	1e50      	subs	r0, r2, #1
     ae4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ae8:	1b41      	subs	r1, r0, r5
     aea:	0209      	lsls	r1, r1, #8
     aec:	17cb      	asrs	r3, r1, #31
     aee:	eb01 6113 	add.w	r1, r1, r3, lsr #24
     af2:	1209      	asrs	r1, r1, #8
     af4:	4551      	cmp	r1, sl
     af6:	db04      	blt.n	b02 <__data_size+0xe>
     af8:	f1b9 0f00 	cmp.w	r9, #0
     afc:	bf18      	it	ne
     afe:	920e      	strne	r2, [sp, #56]	; 0x38
     b00:	e02d      	b.n	b5e <__data_size+0x6a>
     b02:	f1b9 0f00 	cmp.w	r9, #0
     b06:	d005      	beq.n	b14 <__data_size+0x20>
     b08:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
     b0c:	b920      	cbnz	r0, b18 <__data_size+0x24>
     b0e:	f002 fb7f 	bl	3210 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
     b12:	b108      	cbz	r0, b18 <__data_size+0x24>
     b14:	b9af      	cbnz	r7, b42 <__data_size+0x4e>
     b16:	e00c      	b.n	b32 <__data_size+0x3e>
     b18:	b92f      	cbnz	r7, b26 <__data_size+0x32>
     b1a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b1e:	2800      	cmp	r0, #0
     b20:	bf18      	it	ne
     b22:	f1aa 0a02 	subne.w	sl, sl, #2
     b26:	f04f 0900 	mov.w	r9, #0
     b2a:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
     b2e:	464e      	mov	r6, r9
     b30:	e007      	b.n	b42 <__data_size+0x4e>
     b32:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b36:	b120      	cbz	r0, b42 <__data_size+0x4e>
     b38:	2000      	movs	r0, #0
     b3a:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     b3e:	f1aa 0a02 	sub.w	sl, sl, #2
     b42:	980e      	ldr	r0, [sp, #56]	; 0x38
     b44:	eba0 0009 	sub.w	r0, r0, r9
     b48:	1e40      	subs	r0, r0, #1
     b4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b4e:	1b41      	subs	r1, r0, r5
     b50:	0209      	lsls	r1, r1, #8
     b52:	17ca      	asrs	r2, r1, #31
     b54:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b58:	1209      	asrs	r1, r1, #8
     b5a:	4551      	cmp	r1, sl
     b5c:	db7e      	blt.n	c5c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xa4>
     b5e:	9714      	str	r7, [sp, #80]	; 0x50
     b60:	4605      	mov	r5, r0
     b62:	f04f 0900 	mov.w	r9, #0
     b66:	9f06      	ldr	r7, [sp, #24]
     b68:	f001 ff9c 	bl	2aa4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b6c:	1a28      	subs	r0, r5, r0
     b6e:	0200      	lsls	r0, r0, #8
     b70:	17c1      	asrs	r1, r0, #31
     b72:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b76:	ea4f 2a20 	mov.w	sl, r0, asr #8
     b7a:	f002 fd21 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b7e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b82:	bf08      	it	eq
     b84:	200d      	moveq	r0, #13
     b86:	d00b      	beq.n	ba0 <__data_size+0xac>
     b88:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b8c:	3856      	subs	r0, #86	; 0x56
     b8e:	bf08      	it	eq
     b90:	201c      	moveq	r0, #28
     b92:	d005      	beq.n	ba0 <__data_size+0xac>
     b94:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b98:	389f      	subs	r0, #159	; 0x9f
     b9a:	bf14      	ite	ne
     b9c:	2000      	movne	r0, #0
     b9e:	2032      	moveq	r0, #50	; 0x32
     ba0:	300b      	adds	r0, #11
     ba2:	4582      	cmp	sl, r0
     ba4:	da20      	bge.n	be8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x30>
     ba6:	f1bb 0f01 	cmp.w	fp, #1
     baa:	d002      	beq.n	bb2 <__data_size+0xbe>
     bac:	9814      	ldr	r0, [sp, #80]	; 0x50
     bae:	b140      	cbz	r0, bc2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xa>
     bb0:	e012      	b.n	bd8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x20>
     bb2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bb6:	d11c      	bne.n	bf2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3a>
     bb8:	f640 01de 	movw	r1, #2270	; 0x8de
     bbc:	2070      	movs	r0, #112	; 0x70
     bbe:	f002 fe8b 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bc2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bc6:	d007      	beq.n	bd8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x20>
     bc8:	1b60      	subs	r0, r4, r5
     bca:	0200      	lsls	r0, r0, #8
     bcc:	17c1      	asrs	r1, r0, #31
     bce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     bd2:	1200      	asrs	r0, r0, #8
     bd4:	2804      	cmp	r0, #4
     bd6:	dd04      	ble.n	be2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2a>
     bd8:	462c      	mov	r4, r5
     bda:	4620      	mov	r0, r4
     bdc:	f001 ff88 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     be0:	e007      	b.n	bf2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3a>
     be2:	2800      	cmp	r0, #0
     be4:	dc63      	bgt.n	cae <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xf6>
     be6:	e004      	b.n	bf2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3a>
     be8:	462c      	mov	r4, r5
     bea:	4620      	mov	r0, r4
     bec:	f001 ff80 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bf0:	46b9      	mov	r9, r7
     bf2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bf6:	d055      	beq.n	ca4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xec>
     bf8:	980e      	ldr	r0, [sp, #56]	; 0x38
     bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     bfc:	1b00      	subs	r0, r0, r4
     bfe:	1b12      	subs	r2, r2, r4
     c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     c08:	2801      	cmp	r0, #1
     c0a:	d350      	bcc.n	cae <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xf6>
     c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     c10:	bf98      	it	ls
     c12:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
     c16:	d84a      	bhi.n	cae <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xf6>
     c18:	4620      	mov	r0, r4
     c1a:	f00c f8db 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c1e:	9907      	ldr	r1, [sp, #28]
     c20:	4a52      	ldr	r2, [pc, #328]	; (d6c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1b4>)
     c22:	1a0d      	subs	r5, r1, r0
     c24:	f04f 0a00 	mov.w	sl, #0
     c28:	1aaa      	subs	r2, r5, r2
     c2a:	f17a 0200 	sbcs.w	r2, sl, #0
     c2e:	d318      	bcc.n	c62 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xaa>
     c30:	4b4e      	ldr	r3, [pc, #312]	; (d6c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1b4>)
     c32:	1a42      	subs	r2, r0, r1
     c34:	1ad3      	subs	r3, r2, r3
     c36:	f17a 0300 	sbcs.w	r3, sl, #0
     c3a:	d312      	bcc.n	c62 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xaa>
     c3c:	4b4a      	ldr	r3, [pc, #296]	; (d68 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1b0>)
     c3e:	42ab      	cmp	r3, r5
     c40:	bf3e      	ittt	cc
     c42:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
     c46:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
     c4a:	1845      	addcc	r5, r0, r1
     c4c:	d309      	bcc.n	c62 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xaa>
     c4e:	4293      	cmp	r3, r2
     c50:	d231      	bcs.n	cb6 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xfe>
     c52:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
     c56:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
     c5a:	e000      	b.n	c5e <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xa6>
     c5c:	e027      	b.n	cae <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xf6>
     c5e:	4408      	add	r0, r1
     c60:	4245      	negs	r5, r0
     c62:	4f40      	ldr	r7, [pc, #256]	; (d64 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1ac>)
     c64:	7fb8      	ldrb	r0, [r7, #30]
     c66:	b358      	cbz	r0, cc0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x108>
     c68:	f1bb 0f01 	cmp.w	fp, #1
     c6c:	d005      	beq.n	c7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xc2>
     c6e:	2002      	movs	r0, #2
     c70:	f002 f97a 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c74:	2001      	movs	r0, #1
     c76:	f002 f977 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c7a:	45b0      	cmp	r8, r6
     c7c:	d22c      	bcs.n	cd8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x120>
     c7e:	eba5 0106 	sub.w	r1, r5, r6
     c82:	f04f 0002 	mov.w	r0, #2
     c86:	f002 f8b9 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c8a:	b390      	cbz	r0, cf2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x13a>
     c8c:	f1b8 0f00 	cmp.w	r8, #0
     c90:	bf1c      	itt	ne
     c92:	eba5 0108 	subne.w	r1, r5, r8
     c96:	2001      	movne	r0, #1
     c98:	d034      	beq.n	d04 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x14c>
     c9a:	bf00      	nop
     c9c:	f002 f8ae 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ca0:	b338      	cbz	r0, cf2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x13a>
     ca2:	e02f      	b.n	d04 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x14c>
     ca4:	f640 11f1 	movw	r1, #2545	; 0x9f1
     ca8:	2070      	movs	r0, #112	; 0x70
     caa:	f002 fe15 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cae:	b017      	add	sp, #92	; 0x5c
     cb0:	2000      	movs	r0, #0
     cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cb6:	f640 21c2 	movw	r1, #2754	; 0xac2
     cba:	2070      	movs	r0, #112	; 0x70
     cbc:	f002 fe0c 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cc0:	45b0      	cmp	r8, r6
     cc2:	bf34      	ite	cc
     cc4:	4630      	movcc	r0, r6
     cc6:	4640      	movcs	r0, r8
     cc8:	301e      	adds	r0, #30
     cca:	42a8      	cmp	r0, r5
     ccc:	dbcc      	blt.n	c68 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xb0>
     cce:	f640 2105 	movw	r1, #2565	; 0xa05
     cd2:	2070      	movs	r0, #112	; 0x70
     cd4:	f002 fe00 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cd8:	d90c      	bls.n	cf4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x13c>
     cda:	eba5 0108 	sub.w	r1, r5, r8
     cde:	2001      	movs	r0, #1
     ce0:	f002 f88c 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ce4:	b128      	cbz	r0, cf2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x13a>
     ce6:	2e00      	cmp	r6, #0
     ce8:	bf1c      	itt	ne
     cea:	1ba9      	subne	r1, r5, r6
     cec:	2002      	movne	r0, #2
     cee:	d009      	beq.n	d04 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x14c>
     cf0:	e7d4      	b.n	c9c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xe4>
     cf2:	e030      	b.n	d56 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x19e>
     cf4:	ea56 0008 	orrs.w	r0, r6, r8
     cf8:	d004      	beq.n	d04 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x14c>
     cfa:	f640 1141 	movw	r1, #2369	; 0x941
     cfe:	2070      	movs	r0, #112	; 0x70
     d00:	f002 fdea 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d04:	4629      	mov	r1, r5
     d06:	2000      	movs	r0, #0
     d08:	f002 f878 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d0c:	b318      	cbz	r0, d56 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x19e>
     d0e:	9806      	ldr	r0, [sp, #24]
     d10:	2601      	movs	r6, #1
     d12:	2800      	cmp	r0, #0
     d14:	bf04      	itt	eq
     d16:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
     d1a:	2800      	cmpeq	r0, #0
     d1c:	d002      	beq.n	d24 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x16c>
     d1e:	f1b9 0f00 	cmp.w	r9, #0
     d22:	d033      	beq.n	d8c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1d4>
     d24:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     d28:	b118      	cbz	r0, d32 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x17a>
     d2a:	f002 fc4f 	bl	35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d2e:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
     d32:	f1b9 0f00 	cmp.w	r9, #0
     d36:	d02c      	beq.n	d92 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1da>
     d38:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d3a:	1a20      	subs	r0, r4, r0
     d3c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d40:	2005      	movs	r0, #5
     d42:	f002 f85b 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d46:	b3e0      	cbz	r0, dc2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x20a>
     d48:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     d4c:	2800      	cmp	r0, #0
     d4e:	bf08      	it	eq
     d50:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
     d54:	e025      	b.n	da2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1ea>
     d56:	e00f      	b.n	d78 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1c0>
     d58:	40000508 	.word	0x40000508
     d5c:	2000003c 	.word	0x2000003c
     d60:	20000f74 	.word	0x20000f74
     d64:	20001374 	.word	0x20001374
     d68:	1e847fff 	.word	0x1e847fff
     d6c:	0f424000 	.word	0x0f424000
     d70:	f0bdc000 	.word	0xf0bdc000
     d74:	1e848000 	.word	0x1e848000
     d78:	2002      	movs	r0, #2
     d7a:	f002 f8f5 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d7e:	2001      	movs	r0, #1
     d80:	f002 f8f2 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d84:	b017      	add	sp, #92	; 0x5c
     d86:	2000      	movs	r0, #0
     d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d8c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     d90:	b190      	cbz	r0, db8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x200>
     d92:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     d96:	b120      	cbz	r0, da2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x1ea>
     d98:	2005      	movs	r0, #5
     d9a:	f002 f8e5 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d9e:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
     da2:	eba5 0008 	sub.w	r0, r5, r8
     da6:	f1a0 0119 	sub.w	r1, r0, #25
     daa:	2900      	cmp	r1, #0
     dac:	dc0f      	bgt.n	dce <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x216>
     dae:	f640 212e 	movw	r1, #2606	; 0xa2e
     db2:	2070      	movs	r0, #112	; 0x70
     db4:	f002 fd90 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     db8:	f002 fc24 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     dbc:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
     dc0:	e7b7      	b.n	d32 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x17a>
     dc2:	e7ff      	b.n	dc4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x20c>
     dc4:	f240 21f2 	movw	r1, #754	; 0x2f2
     dc8:	2070      	movs	r0, #112	; 0x70
     dca:	f002 fd85 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dce:	2003      	movs	r0, #3
     dd0:	f002 f814 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     dd4:	b1c0      	cbz	r0, e08 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x250>
     dd6:	480f      	ldr	r0, [pc, #60]	; (e14 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x25c>)
     dd8:	6880      	ldr	r0, [r0, #8]
     dda:	f8c0 a000 	str.w	sl, [r0]
     dde:	480e      	ldr	r0, [pc, #56]	; (e18 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x260>)
     de0:	f8c0 a000 	str.w	sl, [r0]
     de4:	ac0c      	add	r4, sp, #48	; 0x30
     de6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     dea:	6038      	str	r0, [r7, #0]
     dec:	6079      	str	r1, [r7, #4]
     dee:	60ba      	str	r2, [r7, #8]
     df0:	60fb      	str	r3, [r7, #12]
     df2:	ac10      	add	r4, sp, #64	; 0x40
     df4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     df8:	6138      	str	r0, [r7, #16]
     dfa:	6179      	str	r1, [r7, #20]
     dfc:	61ba      	str	r2, [r7, #24]
     dfe:	61fb      	str	r3, [r7, #28]
     e00:	b017      	add	sp, #92	; 0x5c
     e02:	2001      	movs	r0, #1
     e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e08:	f640 2136 	movw	r1, #2614	; 0xa36
     e0c:	2070      	movs	r0, #112	; 0x70
     e0e:	f002 fd63 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e12:	0000      	.short	0x0000
     e14:	2000003c 	.word	0x2000003c
     e18:	40000508 	.word	0x40000508
     e1c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     e20:	4606      	mov	r6, r0
     e22:	7808      	ldrb	r0, [r1, #0]
     e24:	7490      	strb	r0, [r2, #18]
     e26:	7ac8      	ldrb	r0, [r1, #11]
     e28:	7450      	strb	r0, [r2, #17]
     e2a:	7a88      	ldrb	r0, [r1, #10]
     e2c:	7410      	strb	r0, [r2, #16]
     e2e:	8908      	ldrh	r0, [r1, #8]
     e30:	81d0      	strh	r0, [r2, #14]
     e32:	f8df 8198 	ldr.w	r8, [pc, #408]	; fcc <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x414>
     e36:	6870      	ldr	r0, [r6, #4]
     e38:	469a      	mov	sl, r3
     e3a:	fba0 7908 	umull	r7, r9, r0, r8
     e3e:	4614      	mov	r4, r2
     e40:	460d      	mov	r5, r1
     e42:	6830      	ldr	r0, [r6, #0]
     e44:	f00b ffc6 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     e48:	19c1      	adds	r1, r0, r7
     e4a:	7828      	ldrb	r0, [r5, #0]
     e4c:	ea4f 0c68 	mov.w	ip, r8, asr #1
     e50:	f149 0200 	adc.w	r2, r9, #0
     e54:	f1a8 0e01 	sub.w	lr, r8, #1
     e58:	f1cc 0b00 	rsb	fp, ip, #0
     e5c:	b168      	cbz	r0, e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
     e5e:	89e0      	ldrh	r0, [r4, #14]
     e60:	7c67      	ldrb	r7, [r4, #17]
     e62:	43c0      	mvns	r0, r0
     e64:	f8d5 9004 	ldr.w	r9, [r5, #4]
     e68:	f104 020c 	add.w	r2, r4, #12
     e6c:	4560      	cmp	r0, ip
     e6e:	dd5f      	ble.n	f30 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x378>
     e70:	f44f 61ae 	mov.w	r1, #1392	; 0x570
     e74:	2070      	movs	r0, #112	; 0x70
     e76:	f002 fd2f 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e7a:	f8df 9154 	ldr.w	r9, [pc, #340]	; fd0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x418>
     e7e:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
     e82:	eb11 0a09 	adds.w	sl, r1, r9
     e86:	f142 0900 	adc.w	r9, r2, #0
     e8a:	ebb0 0a0a 	subs.w	sl, r0, sl
     e8e:	eb73 0909 	sbcs.w	r9, r3, r9
     e92:	d245      	bcs.n	f20 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x368>
     e94:	1a41      	subs	r1, r0, r1
     e96:	eb73 0102 	sbcs.w	r1, r3, r2
     e9a:	d341      	bcc.n	f20 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x368>
     e9c:	1bc7      	subs	r7, r0, r7
     e9e:	6870      	ldr	r0, [r6, #4]
     ea0:	60a0      	str	r0, [r4, #8]
     ea2:	4547      	cmp	r7, r8
     ea4:	d305      	bcc.n	eb2 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2fa>
     ea6:	1c40      	adds	r0, r0, #1
     ea8:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
     eac:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
     eb0:	60a0      	str	r0, [r4, #8]
     eb2:	89e0      	ldrh	r0, [r4, #14]
     eb4:	686d      	ldr	r5, [r5, #4]
     eb6:	43c1      	mvns	r1, r0
     eb8:	7c66      	ldrb	r6, [r4, #17]
     eba:	1878      	adds	r0, r7, r1
     ebc:	f104 020c 	add.w	r2, r4, #12
     ec0:	4577      	cmp	r7, lr
     ec2:	d904      	bls.n	ece <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x316>
     ec4:	f240 516f 	movw	r1, #1391	; 0x56f
     ec8:	2070      	movs	r0, #112	; 0x70
     eca:	f002 fd05 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ece:	4561      	cmp	r1, ip
     ed0:	dcce      	bgt.n	e70 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2b8>
     ed2:	4559      	cmp	r1, fp
     ed4:	db2f      	blt.n	f36 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x37e>
     ed6:	4580      	cmp	r8, r0
     ed8:	bfdc      	itt	le
     eda:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ede:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     ee2:	dd05      	ble.n	ef0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x338>
     ee4:	2800      	cmp	r0, #0
     ee6:	bfbc      	itt	lt
     ee8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     eec:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     ef0:	4621      	mov	r1, r4
     ef2:	f001 fc6d 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ef6:	6820      	ldr	r0, [r4, #0]
     ef8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     efc:	1978      	adds	r0, r7, r5
     efe:	1c40      	adds	r0, r0, #1
     f00:	6021      	str	r1, [r4, #0]
     f02:	2e00      	cmp	r6, #0
     f04:	bf08      	it	eq
     f06:	307a      	addeq	r0, #122	; 0x7a
     f08:	d003      	beq.n	f12 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x35a>
     f0a:	2e01      	cmp	r6, #1
     f0c:	bf08      	it	eq
     f0e:	3048      	addeq	r0, #72	; 0x48
     f10:	d134      	bne.n	f7c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3c4>
     f12:	f001 fc41 	bl	2798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f1a:	6060      	str	r0, [r4, #4]
     f1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f20:	6830      	ldr	r0, [r6, #0]
     f22:	1e40      	subs	r0, r0, #1
     f24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f28:	6020      	str	r0, [r4, #0]
     f2a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     f2e:	e7f4      	b.n	f1a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x362>
     f30:	4601      	mov	r1, r0
     f32:	4558      	cmp	r0, fp
     f34:	da04      	bge.n	f40 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x388>
     f36:	f240 5171 	movw	r1, #1393	; 0x571
     f3a:	2070      	movs	r0, #112	; 0x70
     f3c:	f002 fccc 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f40:	4580      	cmp	r8, r0
     f42:	bfdc      	itt	le
     f44:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     f48:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     f4c:	dd05      	ble.n	f5a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3a2>
     f4e:	2800      	cmp	r0, #0
     f50:	bfbc      	itt	lt
     f52:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     f56:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     f5a:	4621      	mov	r1, r4
     f5c:	f001 fc38 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f60:	6820      	ldr	r0, [r4, #0]
     f62:	2f00      	cmp	r7, #0
     f64:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f68:	f109 0001 	add.w	r0, r9, #1
     f6c:	6021      	str	r1, [r4, #0]
     f6e:	bf08      	it	eq
     f70:	307a      	addeq	r0, #122	; 0x7a
     f72:	d008      	beq.n	f86 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3ce>
     f74:	2f01      	cmp	r7, #1
     f76:	bf08      	it	eq
     f78:	3048      	addeq	r0, #72	; 0x48
     f7a:	d004      	beq.n	f86 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3ce>
     f7c:	f240 6124 	movw	r1, #1572	; 0x624
     f80:	2070      	movs	r0, #112	; 0x70
     f82:	f002 fca9 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f86:	f001 fc07 	bl	2798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f8a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f8e:	6061      	str	r1, [r4, #4]
     f90:	6870      	ldr	r0, [r6, #4]
     f92:	60a0      	str	r0, [r4, #8]
     f94:	2100      	movs	r1, #0
     f96:	4622      	mov	r2, r4
     f98:	6830      	ldr	r0, [r6, #0]
     f9a:	f7ff fc7f 	bl	89c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c>
     f9e:	6832      	ldr	r2, [r6, #0]
     fa0:	4653      	mov	r3, sl
     fa2:	4621      	mov	r1, r4
     fa4:	6928      	ldr	r0, [r5, #16]
     fa6:	f7ff fa25 	bl	3f4 <MPSL_IRQ_RADIO_Handler+0xb8>
     faa:	2800      	cmp	r0, #0
     fac:	bf18      	it	ne
     fae:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fb2:	e9d4 2100 	ldrd	r2, r1, [r4]
     fb6:	6830      	ldr	r0, [r6, #0]
     fb8:	1a89      	subs	r1, r1, r2
     fba:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     fbe:	4408      	add	r0, r1
     fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fc4:	e9c4 2000 	strd	r2, r0, [r4]
     fc8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fcc:	1e848000 	.word	0x1e848000
     fd0:	0f424000 	.word	0x0f424000
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	4d1e      	ldr	r5, [pc, #120]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     fd8:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
     fdc:	2820      	cmp	r0, #32
     fde:	bf18      	it	ne
     fe0:	bd70      	popne	{r4, r5, r6, pc}
     fe2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
     fe6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
     fea:	4428      	add	r0, r5
     fec:	f890 4020 	ldrb.w	r4, [r0, #32]
     ff0:	2c20      	cmp	r4, #32
     ff2:	d027      	beq.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
     ff4:	4b17      	ldr	r3, [pc, #92]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
     ff6:	eb03 1182 	add.w	r1, r3, r2, lsl #6
     ffa:	eb01 0144 	add.w	r1, r1, r4, lsl #1
     ffe:	7849      	ldrb	r1, [r1, #1]
    1000:	f880 1020 	strb.w	r1, [r0, #32]
    1004:	20ff      	movs	r0, #255	; 0xff
    1006:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    100a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    100e:	4621      	mov	r1, r4
    1010:	2002      	movs	r0, #2
    1012:	f000 f8cb 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1016:	2000      	movs	r0, #0
    1018:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    101c:	77a8      	strb	r0, [r5, #30]
    101e:	490e      	ldr	r1, [pc, #56]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
    1020:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1024:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1028:	7e00      	ldrb	r0, [r0, #24]
    102a:	2800      	cmp	r0, #0
    102c:	bf08      	it	eq
    102e:	f002 fe5f 	bleq	3cf0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1032:	2000      	movs	r0, #0
    1034:	4909      	ldr	r1, [pc, #36]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
    1036:	6849      	ldr	r1, [r1, #4]
    1038:	2900      	cmp	r1, #0
    103a:	bf08      	it	eq
    103c:	bd70      	popeq	{r4, r5, r6, pc}
    103e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1042:	4708      	bx	r1
    1044:	f44f 714b 	mov.w	r1, #812	; 0x32c
    1048:	2070      	movs	r0, #112	; 0x70
    104a:	f002 fc45 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    104e:	0000      	.short	0x0000
    1050:	20001374 	.word	0x20001374
    1054:	200012f4 	.word	0x200012f4
    1058:	20000f74 	.word	0x20000f74
    105c:	2000003c 	.word	0x2000003c
    1060:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1064:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>
    1068:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    106c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1070:	4440      	add	r0, r8
    1072:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1076:	2c20      	cmp	r4, #32
    1078:	bf08      	it	eq
    107a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    107e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1082:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    1086:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    108a:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    108e:	2607      	movs	r6, #7
    1090:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1094:	2801      	cmp	r0, #1
    1096:	d00e      	beq.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    1098:	2804      	cmp	r0, #4
    109a:	bf08      	it	eq
    109c:	2602      	moveq	r6, #2
    109e:	d00a      	beq.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    10a0:	2805      	cmp	r0, #5
    10a2:	bf0c      	ite	eq
    10a4:	2603      	moveq	r6, #3
    10a6:	2806      	cmpne	r0, #6
    10a8:	d005      	beq.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    10aa:	f640 01a8 	movw	r1, #2216	; 0x8a8
    10ae:	f04f 0070 	mov.w	r0, #112	; 0x70
    10b2:	f002 fc11 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10b6:	f1bb 0f00 	cmp.w	fp, #0
    10ba:	bf18      	it	ne
    10bc:	f3af 8000 	nopne.w
    10c0:	f3ef 8010 	mrs	r0, PRIMASK
    10c4:	b672      	cpsid	i
    10c6:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    10ca:	784a      	ldrb	r2, [r1, #1]
    10cc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    10d0:	4441      	add	r1, r8
    10d2:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    10d6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    10da:	42a2      	cmp	r2, r4
    10dc:	bf04      	itt	eq
    10de:	2220      	moveq	r2, #32
    10e0:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    10e4:	b1c0      	cbz	r0, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
    10e6:	462a      	mov	r2, r5
    10e8:	4621      	mov	r1, r4
    10ea:	2001      	movs	r0, #1
    10ec:	f000 f85e 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    10f0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    10f4:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    10f8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    10fc:	6840      	ldr	r0, [r0, #4]
    10fe:	4631      	mov	r1, r6
    1100:	4790      	blx	r2
    1102:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1106:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    110a:	4440      	add	r0, r8
    110c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1110:	2c20      	cmp	r4, #32
    1112:	d1ba      	bne.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    1114:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1118:	4806      	ldr	r0, [pc, #24]	; (1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    111a:	2800      	cmp	r0, #0
    111c:	bf18      	it	ne
    111e:	f3af 8000 	nopne.w
    1122:	b662      	cpsie	i
    1124:	e7df      	b.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
    1126:	0000      	.short	0x0000
    1128:	20001374 	.word	0x20001374
    112c:	00000000 	.word	0x00000000
    1130:	200012f4 	.word	0x200012f4
    1134:	00000000 	.word	0x00000000
    1138:	b510      	push	{r4, lr}
    113a:	4604      	mov	r4, r0
    113c:	6800      	ldr	r0, [r0, #0]
    113e:	f00b fe49 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1142:	4602      	mov	r2, r0
    1144:	89e0      	ldrh	r0, [r4, #14]
    1146:	7b21      	ldrb	r1, [r4, #12]
    1148:	4b14      	ldr	r3, [pc, #80]	; (119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>)
    114a:	4408      	add	r0, r1
    114c:	1c41      	adds	r1, r0, #1
    114e:	1850      	adds	r0, r2, r1
    1150:	429a      	cmp	r2, r3
    1152:	d904      	bls.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    1154:	f240 516f 	movw	r1, #1391	; 0x56f
    1158:	2070      	movs	r0, #112	; 0x70
    115a:	f002 fbbd 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    115e:	4a10      	ldr	r2, [pc, #64]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    1160:	4291      	cmp	r1, r2
    1162:	dd04      	ble.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1164:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1168:	2070      	movs	r0, #112	; 0x70
    116a:	f002 fbb5 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    116e:	4a0d      	ldr	r2, [pc, #52]	; (11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>)
    1170:	4291      	cmp	r1, r2
    1172:	da04      	bge.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
    1174:	f240 5171 	movw	r1, #1393	; 0x571
    1178:	2070      	movs	r0, #112	; 0x70
    117a:	f002 fbad 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    117e:	490a      	ldr	r1, [pc, #40]	; (11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>)
    1180:	4281      	cmp	r1, r0
    1182:	bfde      	ittt	le
    1184:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1188:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    118c:	bd10      	pople	{r4, pc}
    118e:	2800      	cmp	r0, #0
    1190:	bfbc      	itt	lt
    1192:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1196:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    119a:	bd10      	pop	{r4, pc}
    119c:	1e847fff 	.word	0x1e847fff
    11a0:	0f424000 	.word	0x0f424000
    11a4:	f0bdc000 	.word	0xf0bdc000
    11a8:	1e848000 	.word	0x1e848000
    11ac:	f8df c058 	ldr.w	ip, [pc, #88]	; 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    11b0:	b510      	push	{r4, lr}
    11b2:	2300      	movs	r3, #0
    11b4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    11b8:	2807      	cmp	r0, #7
    11ba:	d21f      	bcs.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
    11bc:	e8df f000 	tbb	[pc, r0]
    11c0:	05050505 	.word	0x05050505
    11c4:	00040404 	.word	0x00040404
    11c8:	2301      	movs	r3, #1
    11ca:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    11ce:	2b00      	cmp	r3, #0
    11d0:	bf08      	it	eq
    11d2:	bd10      	popeq	{r4, pc}
    11d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    11d8:	480c      	ldr	r0, [pc, #48]	; (120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>)
    11da:	4402      	add	r2, r0
    11dc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    11e0:	2820      	cmp	r0, #32
    11e2:	bf0e      	itee	eq
    11e4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    11e8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    11ec:	7041      	strbne	r1, [r0, #1]
    11ee:	2020      	movs	r0, #32
    11f0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    11f4:	7058      	strb	r0, [r3, #1]
    11f6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    11fa:	bd10      	pop	{r4, pc}
    11fc:	f44f 711a 	mov.w	r1, #616	; 0x268
    1200:	2070      	movs	r0, #112	; 0x70
    1202:	f002 fb69 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1206:	0000      	.short	0x0000
    1208:	200012f4 	.word	0x200012f4
    120c:	20001374 	.word	0x20001374
    1210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1214:	4617      	mov	r7, r2
    1216:	f8df a158 	ldr.w	sl, [pc, #344]	; 1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
    121a:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    121e:	4450      	add	r0, sl
    1220:	4688      	mov	r8, r1
    1222:	f890 4020 	ldrb.w	r4, [r0, #32]
    1226:	2901      	cmp	r1, #1
    1228:	4625      	mov	r5, r4
    122a:	bf18      	it	ne
    122c:	f1b8 0f02 	cmpne.w	r8, #2
    1230:	d005      	beq.n	123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
    1232:	f640 216c 	movw	r1, #2668	; 0xa6c
    1236:	f04f 0070 	mov.w	r0, #112	; 0x70
    123a:	f002 fb4d 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    123e:	f04f 0b00 	mov.w	fp, #0
    1242:	2d20      	cmp	r5, #32
    1244:	d044      	beq.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1246:	f89a 001e 	ldrb.w	r0, [sl, #30]
    124a:	2600      	movs	r6, #0
    124c:	2800      	cmp	r0, #0
    124e:	bf08      	it	eq
    1250:	2602      	moveq	r6, #2
    1252:	f001 fc27 	bl	2aa4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1256:	4b47      	ldr	r3, [pc, #284]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    1258:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    125c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1260:	688a      	ldr	r2, [r1, #8]
    1262:	68c9      	ldr	r1, [r1, #12]
    1264:	1a12      	subs	r2, r2, r0
    1266:	1a09      	subs	r1, r1, r0
    1268:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    126c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1270:	4296      	cmp	r6, r2
    1272:	bf99      	ittee	ls
    1274:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1278:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    127c:	4a3e      	ldrhi	r2, [pc, #248]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    127e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1282:	d923      	bls.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
    1284:	4622      	mov	r2, r4
    1286:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    128a:	784c      	ldrb	r4, [r1, #1]
    128c:	2c20      	cmp	r4, #32
    128e:	d015      	beq.n	12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>
    1290:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1294:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1298:	f8dc 1008 	ldr.w	r1, [ip, #8]
    129c:	f8dc c00c 	ldr.w	ip, [ip, #12]
    12a0:	1a09      	subs	r1, r1, r0
    12a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12a6:	ebac 0c00 	sub.w	ip, ip, r0
    12aa:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    12ae:	428e      	cmp	r6, r1
    12b0:	bf9c      	itt	ls
    12b2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    12b6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    12ba:	d8e3      	bhi.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
    12bc:	2a20      	cmp	r2, #32
    12be:	d005      	beq.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
    12c0:	463b      	mov	r3, r7
    12c2:	2120      	movs	r1, #32
    12c4:	2004      	movs	r0, #4
    12c6:	f7ff f859 	bl	37c <MPSL_IRQ_RADIO_Handler+0x40>
    12ca:	4604      	mov	r4, r0
    12cc:	42ac      	cmp	r4, r5
    12ce:	d10f      	bne.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    12d0:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    12d4:	2820      	cmp	r0, #32
    12d6:	d00f      	beq.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    12d8:	9900      	ldr	r1, [sp, #0]
    12da:	f8da 0008 	ldr.w	r0, [sl, #8]
    12de:	1c89      	adds	r1, r1, #2
    12e0:	1a08      	subs	r0, r1, r0
    12e2:	0200      	lsls	r0, r0, #8
    12e4:	17c1      	asrs	r1, r0, #31
    12e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    12ea:	1200      	asrs	r0, r0, #8
    12ec:	2800      	cmp	r0, #0
    12ee:	dd03      	ble.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    12f0:	b003      	add	sp, #12
    12f2:	2000      	movs	r0, #0
    12f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f8:	2d20      	cmp	r5, #32
    12fa:	d016      	beq.n	132a <CONFIG_FPROTECT_BLOCK_SIZE+0x32a>
    12fc:	462a      	mov	r2, r5
    12fe:	4641      	mov	r1, r8
    1300:	9800      	ldr	r0, [sp, #0]
    1302:	f7ff fb1f 	bl	944 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x144>
    1306:	2800      	cmp	r0, #0
    1308:	bf1f      	itttt	ne
    130a:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    130e:	2002      	movne	r0, #2
    1310:	b003      	addne	sp, #12
    1312:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1316:	463b      	mov	r3, r7
    1318:	462a      	mov	r2, r5
    131a:	2120      	movs	r1, #32
    131c:	2004      	movs	r0, #4
    131e:	f7ff f82d 	bl	37c <MPSL_IRQ_RADIO_Handler+0x40>
    1322:	b003      	add	sp, #12
    1324:	2000      	movs	r0, #0
    1326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    132a:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    132e:	b118      	cbz	r0, 1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    1330:	f002 f94c 	bl	35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1334:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1338:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    133c:	b120      	cbz	r0, 1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>
    133e:	2005      	movs	r0, #5
    1340:	f001 fe12 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1344:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1348:	2004      	movs	r0, #4
    134a:	f001 fe0d 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    134e:	f001 fe7b 	bl	3048 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1352:	2020      	movs	r0, #32
    1354:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1358:	4808      	ldr	r0, [pc, #32]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    135a:	6880      	ldr	r0, [r0, #8]
    135c:	f8c0 b000 	str.w	fp, [r0]
    1360:	4807      	ldr	r0, [pc, #28]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1362:	f8c0 b000 	str.w	fp, [r0]
    1366:	b003      	add	sp, #12
    1368:	2001      	movs	r0, #1
    136a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    136e:	0000      	.short	0x0000
    1370:	20001374 	.word	0x20001374
    1374:	20000f74 	.word	0x20000f74
    1378:	200012f4 	.word	0x200012f4
    137c:	2000003c 	.word	0x2000003c
    1380:	40000508 	.word	0x40000508

00001384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1388:	4e69      	ldr	r6, [pc, #420]	; (1530 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1a8>)
    138a:	4607      	mov	r7, r0
    138c:	b08d      	sub	sp, #52	; 0x34
    138e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1392:	4688      	mov	r8, r1
    1394:	2820      	cmp	r0, #32
    1396:	d055      	beq.n	1444 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xbc>
    1398:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    139c:	f106 0408 	add.w	r4, r6, #8
    13a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    13a4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    13a8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    13ac:	2020      	movs	r0, #32
    13ae:	f88d 0020 	strb.w	r0, [sp, #32]
    13b2:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    13b6:	aa0a      	add	r2, sp, #40	; 0x28
    13b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    13bc:	4430      	add	r0, r6
    13be:	a909      	add	r1, sp, #36	; 0x24
    13c0:	f890 5020 	ldrb.w	r5, [r0, #32]
    13c4:	68f0      	ldr	r0, [r6, #12]
    13c6:	9002      	str	r0, [sp, #8]
    13c8:	6830      	ldr	r0, [r6, #0]
    13ca:	4438      	add	r0, r7
    13cc:	f001 fa00 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    13d0:	f8da 000c 	ldr.w	r0, [sl, #12]
    13d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    13d6:	2f65      	cmp	r7, #101	; 0x65
    13d8:	4408      	add	r0, r1
    13da:	d338      	bcc.n	144e <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xc6>
    13dc:	4a55      	ldr	r2, [pc, #340]	; (1534 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1ac>)
    13de:	2100      	movs	r1, #0
    13e0:	1bd2      	subs	r2, r2, r7
    13e2:	eb71 0201 	sbcs.w	r2, r1, r1
    13e6:	d332      	bcc.n	144e <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xc6>
    13e8:	6822      	ldr	r2, [r4, #0]
    13ea:	1a82      	subs	r2, r0, r2
    13ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    13f0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    13f4:	d82b      	bhi.n	144e <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xc6>
    13f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13fa:	6060      	str	r0, [r4, #4]
    13fc:	4630      	mov	r0, r6
    13fe:	f884 8010 	strb.w	r8, [r4, #16]
    1402:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1406:	f10d 0a20 	add.w	sl, sp, #32
    140a:	2d20      	cmp	r5, #32
    140c:	bf1c      	itt	ne
    140e:	494a      	ldrne	r1, [pc, #296]	; (1538 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1b0>)
    1410:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1414:	d050      	beq.n	14b8 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x130>
    1416:	bf00      	nop
    1418:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    141c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1420:	6861      	ldr	r1, [r4, #4]
    1422:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1426:	f108 0008 	add.w	r0, r8, #8
    142a:	1a71      	subs	r1, r6, r1
    142c:	0209      	lsls	r1, r1, #8
    142e:	17ca      	asrs	r2, r1, #31
    1430:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1434:	1209      	asrs	r1, r1, #8
    1436:	d42d      	bmi.n	1494 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x10c>
    1438:	89c0      	ldrh	r0, [r0, #14]
    143a:	2800      	cmp	r0, #0
    143c:	d03c      	beq.n	14b8 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x130>
    143e:	89e0      	ldrh	r0, [r4, #14]
    1440:	b148      	cbz	r0, 1456 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xce>
    1442:	e039      	b.n	14b8 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x130>
    1444:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    1448:	2070      	movs	r0, #112	; 0x70
    144a:	f002 fa45 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    144e:	b00d      	add	sp, #52	; 0x34
    1450:	2001      	movs	r0, #1
    1452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1456:	6820      	ldr	r0, [r4, #0]
    1458:	900c      	str	r0, [sp, #48]	; 0x30
    145a:	f002 f8b1 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    145e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1462:	bf08      	it	eq
    1464:	200d      	moveq	r0, #13
    1466:	d00b      	beq.n	1480 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xf8>
    1468:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    146c:	3856      	subs	r0, #86	; 0x56
    146e:	bf08      	it	eq
    1470:	201c      	moveq	r0, #28
    1472:	d005      	beq.n	1480 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0xf8>
    1474:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1478:	389f      	subs	r0, #159	; 0x9f
    147a:	bf14      	ite	ne
    147c:	2000      	movne	r0, #0
    147e:	2032      	moveq	r0, #50	; 0x32
    1480:	1c41      	adds	r1, r0, #1
    1482:	980c      	ldr	r0, [sp, #48]	; 0x30
    1484:	1a30      	subs	r0, r6, r0
    1486:	0200      	lsls	r0, r0, #8
    1488:	17c2      	asrs	r2, r0, #31
    148a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    148e:	1200      	asrs	r0, r0, #8
    1490:	4288      	cmp	r0, r1
    1492:	da11      	bge.n	14b8 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x130>
    1494:	f88a 5000 	strb.w	r5, [sl]
    1498:	f898 1018 	ldrb.w	r1, [r8, #24]
    149c:	7c20      	ldrb	r0, [r4, #16]
    149e:	4281      	cmp	r1, r0
    14a0:	d805      	bhi.n	14ae <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x126>
    14a2:	9802      	ldr	r0, [sp, #8]
    14a4:	6060      	str	r0, [r4, #4]
    14a6:	b00d      	add	sp, #52	; 0x34
    14a8:	2002      	movs	r0, #2
    14aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ae:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    14b2:	7845      	ldrb	r5, [r0, #1]
    14b4:	2d20      	cmp	r5, #32
    14b6:	d1af      	bne.n	1418 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x90>
    14b8:	2005      	movs	r0, #5
    14ba:	f001 fd55 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    14be:	4c1c      	ldr	r4, [pc, #112]	; (1530 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1a8>)
    14c0:	f04f 30ff 	mov.w	r0, #4294967295
    14c4:	6060      	str	r0, [r4, #4]
    14c6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    14ca:	f89d 2020 	ldrb.w	r2, [sp, #32]
    14ce:	2120      	movs	r1, #32
    14d0:	2a20      	cmp	r2, #32
    14d2:	d003      	beq.n	14dc <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x154>
    14d4:	2005      	movs	r0, #5
    14d6:	f7fe ff51 	bl	37c <MPSL_IRQ_RADIO_Handler+0x40>
    14da:	e004      	b.n	14e6 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x15e>
    14dc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    14e0:	4420      	add	r0, r4
    14e2:	f890 0020 	ldrb.w	r0, [r0, #32]
    14e6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    14ea:	4913      	ldr	r1, [pc, #76]	; (1538 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1b0>)
    14ec:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    14f0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    14f4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    14f8:	7048      	strb	r0, [r1, #1]
    14fa:	6820      	ldr	r0, [r4, #0]
    14fc:	4438      	add	r0, r7
    14fe:	6020      	str	r0, [r4, #0]
    1500:	20ff      	movs	r0, #255	; 0xff
    1502:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1506:	7e60      	ldrb	r0, [r4, #25]
    1508:	2801      	cmp	r0, #1
    150a:	d105      	bne.n	1518 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x190>
    150c:	68e0      	ldr	r0, [r4, #12]
    150e:	1e40      	subs	r0, r0, #1
    1510:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1514:	f001 fb8c 	bl	2c30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1518:	f89d 0020 	ldrb.w	r0, [sp, #32]
    151c:	2820      	cmp	r0, #32
    151e:	d003      	beq.n	1528 <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1a0>
    1520:	4806      	ldr	r0, [pc, #24]	; (153c <CONFIG_BT_MESH_CFG_CLI_TIMEOUT+0x1b4>)
    1522:	7840      	ldrb	r0, [r0, #1]
    1524:	f002 faac 	bl	3a80 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1528:	b00d      	add	sp, #52	; 0x34
    152a:	2000      	movs	r0, #0
    152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1530:	20001374 	.word	0x20001374
    1534:	0f424000 	.word	0x0f424000
    1538:	200012f4 	.word	0x200012f4
    153c:	2000003c 	.word	0x2000003c

00001540 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1540:	b570      	push	{r4, r5, r6, lr}
    1542:	4a24      	ldr	r2, [pc, #144]	; (15d4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    1544:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1548:	2920      	cmp	r1, #32
    154a:	d03a      	beq.n	15c2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    154c:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1550:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    1554:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1558:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    155c:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    1560:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
    1564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1568:	4411      	add	r1, r2
    156a:	f891 1020 	ldrb.w	r1, [r1, #32]
    156e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1572:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1576:	2920      	cmp	r1, #32
    1578:	d028      	beq.n	15cc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    157a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    157e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1582:	7e2d      	ldrb	r5, [r5, #24]
    1584:	4285      	cmp	r5, r0
    1586:	bf84      	itt	hi
    1588:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    158c:	7849      	ldrbhi	r1, [r1, #1]
    158e:	d8f2      	bhi.n	1576 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    1590:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1594:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1598:	f8dc 000c 	ldr.w	r0, [ip, #12]
    159c:	6889      	ldr	r1, [r1, #8]
    159e:	6814      	ldr	r4, [r2, #0]
    15a0:	1a08      	subs	r0, r1, r0
    15a2:	0200      	lsls	r0, r0, #8
    15a4:	17c1      	asrs	r1, r0, #31
    15a6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15aa:	1200      	asrs	r0, r0, #8
    15ac:	d407      	bmi.n	15be <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    15ae:	f00b fc11 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    15b2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    15b6:	4288      	cmp	r0, r1
    15b8:	bf24      	itt	cs
    15ba:	1b00      	subcs	r0, r0, r4
    15bc:	bd70      	popcs	{r4, r5, r6, pc}
    15be:	2000      	movs	r0, #0
    15c0:	bd70      	pop	{r4, r5, r6, pc}
    15c2:	f640 3102 	movw	r1, #2818	; 0xb02
    15c6:	2070      	movs	r0, #112	; 0x70
    15c8:	f002 f986 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15cc:	f04f 30ff 	mov.w	r0, #4294967295
    15d0:	bd70      	pop	{r4, r5, r6, pc}
    15d2:	0000      	.short	0x0000
    15d4:	20001374 	.word	0x20001374

000015d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    15d8:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	4807      	ldr	r0, [pc, #28]	; (15fc <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    15e0:	4a07      	ldr	r2, [pc, #28]	; (1600 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    15e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    15e6:	6901      	ldr	r1, [r0, #16]
    15e8:	3008      	adds	r0, #8
    15ea:	fba1 4502 	umull	r4, r5, r1, r2
    15ee:	f7ff fda3 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    15f2:	1900      	adds	r0, r0, r4
    15f4:	f145 0100 	adc.w	r1, r5, #0
    15f8:	bd70      	pop	{r4, r5, r6, pc}
    15fa:	0000      	.short	0x0000
    15fc:	20000f74 	.word	0x20000f74
    1600:	1e848000 	.word	0x1e848000

00001604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1606:	4d6b      	ldr	r5, [pc, #428]	; (17b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    1608:	4a6b      	ldr	r2, [pc, #428]	; (17b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    160a:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    160e:	2601      	movs	r6, #1
    1610:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1614:	2808      	cmp	r0, #8
    1616:	d27c      	bcs.n	1712 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1618:	e8df f000 	tbb	[pc, r0]
    161c:	a9977004 	.word	0xa9977004
    1620:	b3ae41c7 	.word	0xb3ae41c7
    1624:	b919      	cbnz	r1, 162e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1626:	f001 ffed 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    162a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    162e:	8ae0      	ldrh	r0, [r4, #22]
    1630:	b110      	cbz	r0, 1638 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1632:	f002 f8d9 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1636:	b180      	cbz	r0, 165a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1638:	f7ff fccc 	bl	fd4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x41c>
    163c:	20ff      	movs	r0, #255	; 0xff
    163e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1642:	6861      	ldr	r1, [r4, #4]
    1644:	f1b1 3fff 	cmp.w	r1, #4294967295
    1648:	d003      	beq.n	1652 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    164a:	2005      	movs	r0, #5
    164c:	f001 fbd6 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1650:	b140      	cbz	r0, 1664 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1652:	7e60      	ldrb	r0, [r4, #25]
    1654:	2801      	cmp	r0, #1
    1656:	d110      	bne.n	167a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1658:	e009      	b.n	166e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    165a:	f640 0134 	movw	r1, #2100	; 0x834
    165e:	2070      	movs	r0, #112	; 0x70
    1660:	f002 f93a 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1664:	f640 0139 	movw	r1, #2105	; 0x839
    1668:	2070      	movs	r0, #112	; 0x70
    166a:	f002 f935 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    166e:	68e0      	ldr	r0, [r4, #12]
    1670:	1e40      	subs	r0, r0, #1
    1672:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1676:	f001 fadb 	bl	2c30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    167a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    167e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1682:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1686:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    168a:	6840      	ldr	r0, [r0, #4]
    168c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1690:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1694:	b001      	add	sp, #4
    1696:	2101      	movs	r1, #1
    1698:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    169c:	4710      	bx	r2
    169e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    16a2:	b140      	cbz	r0, 16b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    16a4:	b919      	cbnz	r1, 16ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    16a6:	f001 ffad 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16aa:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    16ae:	2000      	movs	r0, #0
    16b0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    16b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16b6:	f7ff fc8d 	bl	fd4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x41c>
    16ba:	f04f 30ff 	mov.w	r0, #4294967295
    16be:	6060      	str	r0, [r4, #4]
    16c0:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    16c4:	f88d 0000 	strb.w	r0, [sp]
    16c8:	f89d 0000 	ldrb.w	r0, [sp]
    16cc:	b188      	cbz	r0, 16f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    16ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16d2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    16d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    16da:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    16de:	6840      	ldr	r0, [r0, #4]
    16e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    16e4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    16e8:	b001      	add	sp, #4
    16ea:	2106      	movs	r1, #6
    16ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16f0:	4710      	bx	r2
    16f2:	f44f 6105 	mov.w	r1, #2128	; 0x850
    16f6:	2070      	movs	r0, #112	; 0x70
    16f8:	f002 f8ee 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fc:	f7ff fc6a 	bl	fd4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x41c>
    1700:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1704:	f002 f870 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1708:	b120      	cbz	r0, 1714 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    170a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    170e:	b130      	cbz	r0, 171e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    1710:	e009      	b.n	1726 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    1712:	e04a      	b.n	17aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    1714:	f640 015e 	movw	r1, #2142	; 0x85e
    1718:	2070      	movs	r0, #112	; 0x70
    171a:	f002 f8dd 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    171e:	f001 ff71 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1722:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1726:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    172a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    172e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1732:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1736:	6840      	ldr	r0, [r0, #4]
    1738:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    173c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1740:	b001      	add	sp, #4
    1742:	2100      	movs	r1, #0
    1744:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1748:	4710      	bx	r2
    174a:	f001 fd4d 	bl	31e8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    174e:	8ae0      	ldrh	r0, [r4, #22]
    1750:	b110      	cbz	r0, 1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    1752:	f002 f849 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1756:	b128      	cbz	r0, 1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    1758:	f001 fd5a 	bl	3210 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    175c:	2800      	cmp	r0, #0
    175e:	bf18      	it	ne
    1760:	7766      	strbne	r6, [r4, #29]
    1762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1764:	f640 0168 	movw	r1, #2152	; 0x868
    1768:	2070      	movs	r0, #112	; 0x70
    176a:	f002 f8b5 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    176e:	4813      	ldr	r0, [pc, #76]	; (17bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1770:	6006      	str	r6, [r0, #0]
    1772:	6890      	ldr	r0, [r2, #8]
    1774:	6006      	str	r6, [r0, #0]
    1776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1778:	7810      	ldrb	r0, [r2, #0]
    177a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    177e:	f002 b97f 	b.w	3a80 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1782:	f7ff fc27 	bl	fd4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x41c>
    1786:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    178a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    178e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1792:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1796:	6840      	ldr	r0, [r0, #4]
    1798:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    179c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    17a0:	b001      	add	sp, #4
    17a2:	2105      	movs	r1, #5
    17a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17a8:	4710      	bx	r2
    17aa:	f640 017b 	movw	r1, #2171	; 0x87b
    17ae:	2070      	movs	r0, #112	; 0x70
    17b0:	f002 f892 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17b4:	20000f74 	.word	0x20000f74
    17b8:	2000003c 	.word	0x2000003c
    17bc:	40000508 	.word	0x40000508

000017c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    17c0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17c4:	4682      	mov	sl, r0
    17c6:	48f0      	ldr	r0, [pc, #960]	; (1b88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    17c8:	b095      	sub	sp, #84	; 0x54
    17ca:	6800      	ldr	r0, [r0, #0]
    17cc:	4def      	ldr	r5, [pc, #956]	; (1b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    17ce:	05c0      	lsls	r0, r0, #23
    17d0:	0dc0      	lsrs	r0, r0, #23
    17d2:	d00e      	beq.n	17f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    17d4:	3810      	subs	r0, #16
    17d6:	b240      	sxtb	r0, r0
    17d8:	2800      	cmp	r0, #0
    17da:	bfb8      	it	lt
    17dc:	f000 000f 	andlt.w	r0, r0, #15
    17e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    17e4:	bfac      	ite	ge
    17e6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    17ea:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    17ee:	0940      	lsrs	r0, r0, #5
    17f0:	d00d      	beq.n	180e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    17f2:	9816      	ldr	r0, [sp, #88]	; 0x58
    17f4:	f04f 0b00 	mov.w	fp, #0
    17f8:	7800      	ldrb	r0, [r0, #0]
    17fa:	2800      	cmp	r0, #0
    17fc:	bf18      	it	ne
    17fe:	2801      	cmpne	r0, #1
    1800:	d018      	beq.n	1834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1802:	f240 7104 	movw	r1, #1796	; 0x704
    1806:	f04f 0070 	mov.w	r0, #112	; 0x70
    180a:	f002 f865 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    180e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1812:	f04f 0b01 	mov.w	fp, #1
    1816:	2820      	cmp	r0, #32
    1818:	d007      	beq.n	182a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    181a:	9816      	ldr	r0, [sp, #88]	; 0x58
    181c:	7800      	ldrb	r0, [r0, #0]
    181e:	b148      	cbz	r0, 1834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1820:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1824:	2070      	movs	r0, #112	; 0x70
    1826:	f002 f857 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    182a:	f240 61fd 	movw	r1, #1789	; 0x6fd
    182e:	2070      	movs	r0, #112	; 0x70
    1830:	f002 f852 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1834:	4cd6      	ldr	r4, [pc, #856]	; (1b90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    1836:	b124      	cbz	r4, 1842 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1838:	2100      	movs	r1, #0
    183a:	f240 7007 	movw	r0, #1799	; 0x707
    183e:	f3af 8000 	nop.w
    1842:	2000      	movs	r0, #0
    1844:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1848:	49d2      	ldr	r1, [pc, #840]	; (1b94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    184a:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    184e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1852:	f04f 0901 	mov.w	r9, #1
    1856:	9000      	str	r0, [sp, #0]
    1858:	b124      	cbz	r4, 1864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    185a:	2100      	movs	r1, #0
    185c:	f240 7012 	movw	r0, #1810	; 0x712
    1860:	f3af 8000 	nop.w
    1864:	f1b9 0f00 	cmp.w	r9, #0
    1868:	d00a      	beq.n	1880 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    186a:	bf00      	nop
    186c:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1870:	f04f 0800 	mov.w	r8, #0
    1874:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1878:	f1bb 0f00 	cmp.w	fp, #0
    187c:	d007      	beq.n	188e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    187e:	e038      	b.n	18f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1880:	48c5      	ldr	r0, [pc, #788]	; (1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    1882:	2800      	cmp	r0, #0
    1884:	bf18      	it	ne
    1886:	f3af 8000 	nopne.w
    188a:	b662      	cpsie	i
    188c:	e7ee      	b.n	186c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    188e:	4637      	mov	r7, r6
    1890:	2001      	movs	r0, #1
    1892:	ea20 0607 	bic.w	r6, r0, r7
    1896:	48c1      	ldr	r0, [pc, #772]	; (1b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    1898:	2240      	movs	r2, #64	; 0x40
    189a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    189e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    18a2:	f00b fbf3 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18a6:	b124      	cbz	r4, 18b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    18a8:	2100      	movs	r1, #0
    18aa:	f240 502f 	movw	r0, #1327	; 0x52f
    18ae:	f3af 8000 	nop.w
    18b2:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    18b6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    18ba:	4429      	add	r1, r5
    18bc:	4428      	add	r0, r5
    18be:	8c0a      	ldrh	r2, [r1, #32]
    18c0:	8402      	strh	r2, [r0, #32]
    18c2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    18c6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    18ca:	b124      	cbz	r4, 18d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    18cc:	2100      	movs	r1, #0
    18ce:	f240 5033 	movw	r0, #1331	; 0x533
    18d2:	f3af 8000 	nop.w
    18d6:	b124      	cbz	r4, 18e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    18d8:	2100      	movs	r1, #0
    18da:	f240 701c 	movw	r0, #1820	; 0x71c
    18de:	f3af 8000 	nop.w
    18e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    18e6:	f88d 0008 	strb.w	r0, [sp, #8]
    18ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    18ee:	2800      	cmp	r0, #0
    18f0:	d1b2      	bne.n	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    18f2:	b124      	cbz	r4, 18fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    18f4:	2100      	movs	r1, #0
    18f6:	f240 7026 	movw	r0, #1830	; 0x726
    18fa:	f3af 8000 	nop.w
    18fe:	a802      	add	r0, sp, #8
    1900:	f001 f8d6 	bl	2ab0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1908:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    190c:	4633      	mov	r3, r6
    190e:	aa09      	add	r2, sp, #36	; 0x24
    1910:	a80e      	add	r0, sp, #56	; 0x38
    1912:	9916      	ldr	r1, [sp, #88]	; 0x58
    1914:	f7ff fa82 	bl	e1c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x264>
    1918:	b124      	cbz	r4, 1924 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    191a:	2100      	movs	r1, #0
    191c:	f240 702d 	movw	r0, #1837	; 0x72d
    1920:	f3af 8000 	nop.w
    1924:	4a9d      	ldr	r2, [pc, #628]	; (1b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    1926:	990e      	ldr	r1, [sp, #56]	; 0x38
    1928:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    192c:	a809      	add	r0, sp, #36	; 0x24
    192e:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1932:	2a01      	cmp	r2, #1
    1934:	bf18      	it	ne
    1936:	2a02      	cmpne	r2, #2
    1938:	d138      	bne.n	19ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    193a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    193c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    193e:	eba2 0201 	sub.w	r2, r2, r1
    1942:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1946:	eba3 0101 	sub.w	r1, r3, r1
    194a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    194e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1952:	2a02      	cmp	r2, #2
    1954:	d364      	bcc.n	1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1956:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    195a:	bf98      	it	ls
    195c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1960:	d85e      	bhi.n	1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1962:	f04f 0801 	mov.w	r8, #1
    1966:	ab14      	add	r3, sp, #80	; 0x50
    1968:	aa13      	add	r2, sp, #76	; 0x4c
    196a:	4631      	mov	r1, r6
    196c:	f7fe fef4 	bl	758 <CONFIG_BT_HCI_TX_STACK_SIZE+0x158>
    1970:	2800      	cmp	r0, #0
    1972:	d05d      	beq.n	1a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1974:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1978:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    197c:	4633      	mov	r3, r6
    197e:	428a      	cmp	r2, r1
    1980:	d05a      	beq.n	1a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    1982:	2005      	movs	r0, #5
    1984:	f7fe fcfa 	bl	37c <MPSL_IRQ_RADIO_Handler+0x40>
    1988:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    198c:	7048      	strb	r0, [r1, #1]
    198e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1992:	2820      	cmp	r0, #32
    1994:	bf1c      	itt	ne
    1996:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    199a:	f880 a001 	strbne.w	sl, [r0, #1]
    199e:	d057      	beq.n	1a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    19a0:	4632      	mov	r2, r6
    19a2:	4651      	mov	r1, sl
    19a4:	f05f 0003 	movs.w	r0, #3
    19a8:	f7ff fc00 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    19ac:	b124      	cbz	r4, 19b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    19ae:	2100      	movs	r1, #0
    19b0:	f240 7032 	movw	r0, #1842	; 0x732
    19b4:	f3af 8000 	nop.w
    19b8:	4879      	ldr	r0, [pc, #484]	; (1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    19ba:	2800      	cmp	r0, #0
    19bc:	bf18      	it	ne
    19be:	f3af 8000 	nopne.w
    19c2:	f3ef 8910 	mrs	r9, PRIMASK
    19c6:	b672      	cpsid	i
    19c8:	b124      	cbz	r4, 19d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    19ca:	2100      	movs	r1, #0
    19cc:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    19d0:	f3af 8000 	nop.w
    19d4:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    19d8:	f88d 0008 	strb.w	r0, [sp, #8]
    19dc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    19e0:	2800      	cmp	r0, #0
    19e2:	f47f af39 	bne.w	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    19e6:	b124      	cbz	r4, 19f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    19e8:	2100      	movs	r1, #0
    19ea:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    19ee:	f3af 8000 	nop.w
    19f2:	af09      	add	r7, sp, #36	; 0x24
    19f4:	9800      	ldr	r0, [sp, #0]
    19f6:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    19fa:	f100 0708 	add.w	r7, r0, #8
    19fe:	f1b8 0f00 	cmp.w	r8, #0
    1a02:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    1a06:	990d      	ldr	r1, [sp, #52]	; 0x34
    1a08:	6181      	str	r1, [r0, #24]
    1a0a:	d053      	beq.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1a0c:	b124      	cbz	r4, 1a18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a0e:	2100      	movs	r1, #0
    1a10:	f240 704d 	movw	r0, #1869	; 0x74d
    1a14:	f3af 8000 	nop.w
    1a18:	f1bb 0f00 	cmp.w	fp, #0
    1a1c:	d13a      	bne.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    1a1e:	e01f      	b.n	1a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    1a20:	4632      	mov	r2, r6
    1a22:	4651      	mov	r1, sl
    1a24:	2004      	movs	r0, #4
    1a26:	f7ff fbc1 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1a2a:	f04f 0801 	mov.w	r8, #1
    1a2e:	e7bd      	b.n	19ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    1a30:	4632      	mov	r2, r6
    1a32:	4651      	mov	r1, sl
    1a34:	2004      	movs	r0, #4
    1a36:	e7b7      	b.n	19a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    1a38:	2920      	cmp	r1, #32
    1a3a:	bf19      	ittee	ne
    1a3c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1a40:	7840      	ldrbne	r0, [r0, #1]
    1a42:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    1a46:	4428      	addeq	r0, r5
    1a48:	bf08      	it	eq
    1a4a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1a4e:	e79b      	b.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    1a50:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    1a54:	4429      	add	r1, r5
    1a56:	f881 a020 	strb.w	sl, [r1, #32]
    1a5a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1a5e:	e79f      	b.n	19a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    1a60:	9811      	ldr	r0, [sp, #68]	; 0x44
    1a62:	f010 0fff 	tst.w	r0, #255	; 0xff
    1a66:	d015      	beq.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    1a68:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1a6c:	2820      	cmp	r0, #32
    1a6e:	d111      	bne.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    1a70:	b124      	cbz	r4, 1a7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    1a72:	2100      	movs	r1, #0
    1a74:	f240 7052 	movw	r0, #1874	; 0x752
    1a78:	f3af 8000 	nop.w
    1a7c:	4632      	mov	r2, r6
    1a7e:	2102      	movs	r1, #2
    1a80:	980e      	ldr	r0, [sp, #56]	; 0x38
    1a82:	f7ff fbc5 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1a86:	9010      	str	r0, [sp, #64]	; 0x40
    1a88:	b920      	cbnz	r0, 1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    1a8a:	9816      	ldr	r0, [sp, #88]	; 0x58
    1a8c:	7800      	ldrb	r0, [r0, #0]
    1a8e:	b1f0      	cbz	r0, 1ace <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    1a90:	2801      	cmp	r0, #1
    1a92:	d02b      	beq.n	1aec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    1a94:	b124      	cbz	r4, 1aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    1a96:	2100      	movs	r1, #0
    1a98:	f240 706f 	movw	r0, #1903	; 0x76f
    1a9c:	f3af 8000 	nop.w
    1aa0:	20ff      	movs	r0, #255	; 0xff
    1aa2:	f1bb 0f00 	cmp.w	fp, #0
    1aa6:	bf18      	it	ne
    1aa8:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    1aac:	d027      	beq.n	1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    1aae:	bf00      	nop
    1ab0:	f04f 0801 	mov.w	r8, #1
    1ab4:	b124      	cbz	r4, 1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    1ab6:	2100      	movs	r1, #0
    1ab8:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    1abc:	f3af 8000 	nop.w
    1ac0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ac2:	4e38      	ldr	r6, [pc, #224]	; (1ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    1ac4:	2802      	cmp	r0, #2
    1ac6:	d023      	beq.n	1b10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    1ac8:	2801      	cmp	r0, #1
    1aca:	d029      	beq.n	1b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    1acc:	e02d      	b.n	1b2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1ace:	b124      	cbz	r4, 1ada <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    1ad0:	2100      	movs	r1, #0
    1ad2:	f240 705a 	movw	r0, #1882	; 0x75a
    1ad6:	f3af 8000 	nop.w
    1ada:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1ade:	4651      	mov	r1, sl
    1ae0:	2004      	movs	r0, #4
    1ae2:	f7ff fb63 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1ae6:	f04f 0801 	mov.w	r8, #1
    1aea:	e7e3      	b.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1aec:	2c00      	cmp	r4, #0
    1aee:	f43f aeb3 	beq.w	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1af2:	2100      	movs	r1, #0
    1af4:	f240 7065 	movw	r0, #1893	; 0x765
    1af8:	f3af 8000 	nop.w
    1afc:	e6ac      	b.n	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1afe:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1b02:	2101      	movs	r1, #1
    1b04:	4391      	bics	r1, r2
    1b06:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    1b0a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1b0e:	e7cf      	b.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    1b10:	68a8      	ldr	r0, [r5, #8]
    1b12:	990e      	ldr	r1, [sp, #56]	; 0x38
    1b14:	1a40      	subs	r0, r0, r1
    1b16:	f00b f95d 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b1a:	6871      	ldr	r1, [r6, #4]
    1b1c:	b921      	cbnz	r1, 1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    1b1e:	e004      	b.n	1b2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b20:	6871      	ldr	r1, [r6, #4]
    1b22:	f04f 30ff 	mov.w	r0, #4294967295
    1b26:	b101      	cbz	r1, 1b2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b28:	4788      	blx	r1
    1b2a:	f1b9 0f00 	cmp.w	r9, #0
    1b2e:	d024      	beq.n	1b7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    1b30:	b124      	cbz	r4, 1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    1b32:	2100      	movs	r1, #0
    1b34:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    1b38:	f3af 8000 	nop.w
    1b3c:	f1b8 0f00 	cmp.w	r8, #0
    1b40:	d011      	beq.n	1b66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    1b42:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1b46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1b4a:	4428      	add	r0, r5
    1b4c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b50:	2820      	cmp	r0, #32
    1b52:	d008      	beq.n	1b66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    1b54:	b124      	cbz	r4, 1b60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    1b56:	2100      	movs	r1, #0
    1b58:	f240 7097 	movw	r0, #1943	; 0x797
    1b5c:	f3af 8000 	nop.w
    1b60:	7870      	ldrb	r0, [r6, #1]
    1b62:	f001 ff8d 	bl	3a80 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b66:	b124      	cbz	r4, 1b72 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    1b68:	2100      	movs	r1, #0
    1b6a:	f240 709c 	movw	r0, #1948	; 0x79c
    1b6e:	f3af 8000 	nop.w
    1b72:	b017      	add	sp, #92	; 0x5c
    1b74:	4640      	mov	r0, r8
    1b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b7a:	4807      	ldr	r0, [pc, #28]	; (1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    1b7c:	2800      	cmp	r0, #0
    1b7e:	bf18      	it	ne
    1b80:	f3af 8000 	nopne.w
    1b84:	b662      	cpsie	i
    1b86:	e7d3      	b.n	1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    1b88:	e000ed04 	.word	0xe000ed04
    1b8c:	20001374 	.word	0x20001374
    1b90:	00000000 	.word	0x00000000
    1b94:	20000f74 	.word	0x20000f74
    1b98:	00000000 	.word	0x00000000
    1b9c:	200012f4 	.word	0x200012f4
    1ba0:	00000000 	.word	0x00000000
    1ba4:	2000003c 	.word	0x2000003c

00001ba8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1ba8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bac:	48c9      	ldr	r0, [pc, #804]	; (1ed4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>)
    1bae:	b08a      	sub	sp, #40	; 0x28
    1bb0:	6800      	ldr	r0, [r0, #0]
    1bb2:	05c0      	lsls	r0, r0, #23
    1bb4:	0dc0      	lsrs	r0, r0, #23
    1bb6:	d011      	beq.n	1bdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1bb8:	3810      	subs	r0, #16
    1bba:	b240      	sxtb	r0, r0
    1bbc:	2800      	cmp	r0, #0
    1bbe:	bfb8      	it	lt
    1bc0:	f000 000f 	andlt.w	r0, r0, #15
    1bc4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1bc8:	bfac      	ite	ge
    1bca:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1bce:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1bd2:	0940      	lsrs	r0, r0, #5
    1bd4:	bf08      	it	eq
    1bd6:	f04f 0b01 	moveq.w	fp, #1
    1bda:	d001      	beq.n	1be0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1bdc:	f04f 0b00 	mov.w	fp, #0
    1be0:	980a      	ldr	r0, [sp, #40]	; 0x28
    1be2:	7800      	ldrb	r0, [r0, #0]
    1be4:	2800      	cmp	r0, #0
    1be6:	bf1e      	ittt	ne
    1be8:	2000      	movne	r0, #0
    1bea:	b00b      	addne	sp, #44	; 0x2c
    1bec:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bf0:	f04f 0a00 	mov.w	sl, #0
    1bf4:	4db8      	ldr	r5, [pc, #736]	; (1ed8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1bf6:	4cb9      	ldr	r4, [pc, #740]	; (1edc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>)
    1bf8:	46d1      	mov	r9, sl
    1bfa:	b125      	cbz	r5, 1c06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    1bfc:	2100      	movs	r1, #0
    1bfe:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1c02:	f3af 8000 	nop.w
    1c06:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    1c0a:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    1c0e:	f04f 0800 	mov.w	r8, #0
    1c12:	b125      	cbz	r5, 1c1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    1c14:	2100      	movs	r1, #0
    1c16:	f240 50be 	movw	r0, #1470	; 0x5be
    1c1a:	f3af 8000 	nop.w
    1c1e:	f1bb 0f00 	cmp.w	fp, #0
    1c22:	d123      	bne.n	1c6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    1c24:	4637      	mov	r7, r6
    1c26:	2001      	movs	r0, #1
    1c28:	ea20 0607 	bic.w	r6, r0, r7
    1c2c:	48ac      	ldr	r0, [pc, #688]	; (1ee0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1c2e:	2240      	movs	r2, #64	; 0x40
    1c30:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c34:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c38:	f00b fa28 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c3c:	b125      	cbz	r5, 1c48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    1c3e:	2100      	movs	r1, #0
    1c40:	f240 502f 	movw	r0, #1327	; 0x52f
    1c44:	f3af 8000 	nop.w
    1c48:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1c4c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1c50:	4421      	add	r1, r4
    1c52:	4420      	add	r0, r4
    1c54:	8c0a      	ldrh	r2, [r1, #32]
    1c56:	8402      	strh	r2, [r0, #32]
    1c58:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1c5c:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1c60:	b125      	cbz	r5, 1c6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    1c62:	2100      	movs	r1, #0
    1c64:	f240 5033 	movw	r0, #1331	; 0x533
    1c68:	f3af 8000 	nop.w
    1c6c:	b125      	cbz	r5, 1c78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    1c6e:	2100      	movs	r1, #0
    1c70:	f240 50c6 	movw	r0, #1478	; 0x5c6
    1c74:	f3af 8000 	nop.w
    1c78:	a808      	add	r0, sp, #32
    1c7a:	f000 ff19 	bl	2ab0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1c7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1c82:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1c86:	4633      	mov	r3, r6
    1c88:	466a      	mov	r2, sp
    1c8a:	a806      	add	r0, sp, #24
    1c8c:	990a      	ldr	r1, [sp, #40]	; 0x28
    1c8e:	f7ff f8c5 	bl	e1c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x264>
    1c92:	b125      	cbz	r5, 1c9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    1c94:	2100      	movs	r1, #0
    1c96:	f240 50cc 	movw	r0, #1484	; 0x5cc
    1c9a:	f3af 8000 	nop.w
    1c9e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1ca2:	2820      	cmp	r0, #32
    1ca4:	d019      	beq.n	1cda <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    1ca6:	68e0      	ldr	r0, [r4, #12]
    1ca8:	9900      	ldr	r1, [sp, #0]
    1caa:	1a09      	subs	r1, r1, r0
    1cac:	0209      	lsls	r1, r1, #8
    1cae:	17ca      	asrs	r2, r1, #31
    1cb0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cb4:	1209      	asrs	r1, r1, #8
    1cb6:	d510      	bpl.n	1cda <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    1cb8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cbc:	1a89      	subs	r1, r1, r2
    1cbe:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1cc2:	4408      	add	r0, r1
    1cc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cc8:	e9cd 3000 	strd	r3, r0, [sp]
    1ccc:	4293      	cmp	r3, r2
    1cce:	d202      	bcs.n	1cd6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1cd0:	9802      	ldr	r0, [sp, #8]
    1cd2:	1c40      	adds	r0, r0, #1
    1cd4:	9002      	str	r0, [sp, #8]
    1cd6:	f04f 0801 	mov.w	r8, #1
    1cda:	b14d      	cbz	r5, 1cf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    1cdc:	2100      	movs	r1, #0
    1cde:	f240 50df 	movw	r0, #1503	; 0x5df
    1ce2:	f3af 8000 	nop.w
    1ce6:	2100      	movs	r1, #0
    1ce8:	f240 50e5 	movw	r0, #1509	; 0x5e5
    1cec:	f3af 8000 	nop.w
    1cf0:	9900      	ldr	r1, [sp, #0]
    1cf2:	9806      	ldr	r0, [sp, #24]
    1cf4:	9a01      	ldr	r2, [sp, #4]
    1cf6:	1a09      	subs	r1, r1, r0
    1cf8:	1a10      	subs	r0, r2, r0
    1cfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d02:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1d06:	bf98      	it	ls
    1d08:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    1d0c:	d803      	bhi.n	1d16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    1d0e:	f1bb 0f00 	cmp.w	fp, #0
    1d12:	d10c      	bne.n	1d2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    1d14:	e003      	b.n	1d1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    1d16:	f1bb 0f00 	cmp.w	fp, #0
    1d1a:	d039      	beq.n	1d90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d1c:	e0c0      	b.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1d1e:	4633      	mov	r3, r6
    1d20:	4669      	mov	r1, sp
    1d22:	4870      	ldr	r0, [pc, #448]	; (1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1d24:	9a06      	ldr	r2, [sp, #24]
    1d26:	f7fe fb65 	bl	3f4 <MPSL_IRQ_RADIO_Handler+0xb8>
    1d2a:	ea48 0800 	orr.w	r8, r8, r0
    1d2e:	f1b8 0f00 	cmp.w	r8, #0
    1d32:	d023      	beq.n	1d7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d34:	9800      	ldr	r0, [sp, #0]
    1d36:	f00b f84d 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d3a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    1d3e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1d42:	4b69      	ldr	r3, [pc, #420]	; (1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1d44:	4411      	add	r1, r2
    1d46:	1c49      	adds	r1, r1, #1
    1d48:	1842      	adds	r2, r0, r1
    1d4a:	4298      	cmp	r0, r3
    1d4c:	d856      	bhi.n	1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1d4e:	4865      	ldr	r0, [pc, #404]	; (1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1d50:	4281      	cmp	r1, r0
    1d52:	dc7c      	bgt.n	1e4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1d54:	4240      	negs	r0, r0
    1d56:	4281      	cmp	r1, r0
    1d58:	db7a      	blt.n	1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    1d5a:	1c58      	adds	r0, r3, #1
    1d5c:	4290      	cmp	r0, r2
    1d5e:	bfdc      	itt	le
    1d60:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d64:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d68:	dd05      	ble.n	1d76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a>
    1d6a:	2a00      	cmp	r2, #0
    1d6c:	bfbc      	itt	lt
    1d6e:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d72:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d76:	980a      	ldr	r0, [sp, #40]	; 0x28
    1d78:	e9c0 2904 	strd	r2, r9, [r0, #16]
    1d7c:	f04f 0a01 	mov.w	sl, #1
    1d80:	2d00      	cmp	r5, #0
    1d82:	d07c      	beq.n	1e7e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x132>
    1d84:	2100      	movs	r1, #0
    1d86:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    1d8a:	f3af 8000 	nop.w
    1d8e:	e087      	b.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1d90:	9807      	ldr	r0, [sp, #28]
    1d92:	9002      	str	r0, [sp, #8]
    1d94:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1d98:	aa08      	add	r2, sp, #32
    1d9a:	a905      	add	r1, sp, #20
    1d9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    1da0:	f000 fd16 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1da4:	f001 fa3e 	bl	3224 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1da8:	f000 fcf6 	bl	2798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1dac:	4607      	mov	r7, r0
    1dae:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1db2:	2820      	cmp	r0, #32
    1db4:	d027      	beq.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1db6:	68e0      	ldr	r0, [r4, #12]
    1db8:	1d40      	adds	r0, r0, #5
    1dba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dbe:	bf00      	nop
    1dc0:	e9dd 2100 	ldrd	r2, r1, [sp]
    1dc4:	1a89      	subs	r1, r1, r2
    1dc6:	9000      	str	r0, [sp, #0]
    1dc8:	4408      	add	r0, r1
    1dca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dce:	9001      	str	r0, [sp, #4]
    1dd0:	9800      	ldr	r0, [sp, #0]
    1dd2:	4540      	cmp	r0, r8
    1dd4:	d202      	bcs.n	1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1dd6:	9802      	ldr	r0, [sp, #8]
    1dd8:	1c40      	adds	r0, r0, #1
    1dda:	9002      	str	r0, [sp, #8]
    1ddc:	201f      	movs	r0, #31
    1dde:	f88d 000c 	strb.w	r0, [sp, #12]
    1de2:	9800      	ldr	r0, [sp, #0]
    1de4:	f00a fff6 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1de8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    1dec:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1df0:	4b3d      	ldr	r3, [pc, #244]	; (1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1df2:	4411      	add	r1, r2
    1df4:	1c49      	adds	r1, r1, #1
    1df6:	1842      	adds	r2, r0, r1
    1df8:	4298      	cmp	r0, r3
    1dfa:	d92a      	bls.n	1e52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x106>
    1dfc:	f240 516f 	movw	r1, #1391	; 0x56f
    1e00:	2070      	movs	r0, #112	; 0x70
    1e02:	f001 fd69 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e06:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1e0a:	f108 0609 	add.w	r6, r8, #9
    1e0e:	b1b0      	cbz	r0, 1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e10:	f001 fcea 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e14:	b998      	cbnz	r0, 1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e16:	f001 fbd3 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1e1a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1e1e:	bf08      	it	eq
    1e20:	200d      	moveq	r0, #13
    1e22:	d00b      	beq.n	1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1e24:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1e28:	3856      	subs	r0, #86	; 0x56
    1e2a:	bf08      	it	eq
    1e2c:	201c      	moveq	r0, #28
    1e2e:	d005      	beq.n	1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1e30:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1e34:	389f      	subs	r0, #159	; 0x9f
    1e36:	bf14      	ite	ne
    1e38:	4648      	movne	r0, r9
    1e3a:	2032      	moveq	r0, #50	; 0x32
    1e3c:	4406      	add	r6, r0
    1e3e:	9805      	ldr	r0, [sp, #20]
    1e40:	4287      	cmp	r7, r0
    1e42:	bf84      	itt	hi
    1e44:	1a38      	subhi	r0, r7, r0
    1e46:	4406      	addhi	r6, r0
    1e48:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e4c:	e7b8      	b.n	1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1e4e:	e003      	b.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e50:	e00a      	b.n	1e68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>
    1e52:	4824      	ldr	r0, [pc, #144]	; (1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1e54:	4281      	cmp	r1, r0
    1e56:	dd04      	ble.n	1e62 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1e58:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1e5c:	2070      	movs	r0, #112	; 0x70
    1e5e:	f001 fd3b 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e62:	4822      	ldr	r0, [pc, #136]	; (1eec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1e64:	4281      	cmp	r1, r0
    1e66:	da04      	bge.n	1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e68:	f240 5171 	movw	r1, #1393	; 0x571
    1e6c:	2070      	movs	r0, #112	; 0x70
    1e6e:	f001 fd33 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e72:	481f      	ldr	r0, [pc, #124]	; (1ef0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a4>)
    1e74:	4290      	cmp	r0, r2
    1e76:	bfd8      	it	le
    1e78:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e7c:	e000      	b.n	1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>
    1e7e:	e00f      	b.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e80:	bfd8      	it	le
    1e82:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e86:	dd05      	ble.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e88:	2a00      	cmp	r2, #0
    1e8a:	bfbc      	itt	lt
    1e8c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e90:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e94:	980a      	ldr	r0, [sp, #40]	; 0x28
    1e96:	f04f 0a01 	mov.w	sl, #1
    1e9a:	46d0      	mov	r8, sl
    1e9c:	e9c0 2904 	strd	r2, r9, [r0, #16]
    1ea0:	ea1a 0f08 	tst.w	sl, r8
    1ea4:	d009      	beq.n	1eba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16e>
    1ea6:	980a      	ldr	r0, [sp, #40]	; 0x28
    1ea8:	4911      	ldr	r1, [pc, #68]	; (1ef0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a4>)
    1eaa:	9b02      	ldr	r3, [sp, #8]
    1eac:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    1eb0:	fbe3 2001 	umlal	r2, r0, r3, r1
    1eb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    1eb6:	e9c1 2004 	strd	r2, r0, [r1, #16]
    1eba:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1ebe:	f88d 0014 	strb.w	r0, [sp, #20]
    1ec2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f47f ae97 	bne.w	1bfa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    1ecc:	b00b      	add	sp, #44	; 0x2c
    1ece:	4650      	mov	r0, sl
    1ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ed4:	e000ed04 	.word	0xe000ed04
    1ed8:	00000000 	.word	0x00000000
    1edc:	20001374 	.word	0x20001374
    1ee0:	200012f4 	.word	0x200012f4
    1ee4:	0f424000 	.word	0x0f424000
    1ee8:	1e847fff 	.word	0x1e847fff
    1eec:	f0bdc000 	.word	0xf0bdc000
    1ef0:	1e848000 	.word	0x1e848000

00001ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ef4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ef8:	4d94      	ldr	r5, [pc, #592]	; (214c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14c>)
    1efa:	b08c      	sub	sp, #48	; 0x30
    1efc:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1f00:	2000      	movs	r0, #0
    1f02:	9009      	str	r0, [sp, #36]	; 0x24
    1f04:	9006      	str	r0, [sp, #24]
    1f06:	2001      	movs	r0, #1
    1f08:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    1f0c:	f04f 0800 	mov.w	r8, #0
    1f10:	4607      	mov	r7, r0
    1f12:	4c8f      	ldr	r4, [pc, #572]	; (2150 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x150>)
    1f14:	f8cd 001c 	str.w	r0, [sp, #28]
    1f18:	f000 fdc4 	bl	2aa4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1f1c:	9008      	str	r0, [sp, #32]
    1f1e:	b124      	cbz	r4, 1f2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    1f20:	2100      	movs	r1, #0
    1f22:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    1f26:	f3af 8000 	nop.w
    1f2a:	9807      	ldr	r0, [sp, #28]
    1f2c:	2800      	cmp	r0, #0
    1f2e:	d03c      	beq.n	1faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    1f30:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1f34:	b124      	cbz	r4, 1f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    1f36:	2100      	movs	r1, #0
    1f38:	f240 70b5 	movw	r0, #1973	; 0x7b5
    1f3c:	f3af 8000 	nop.w
    1f40:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    1f44:	2240      	movs	r2, #64	; 0x40
    1f46:	ea27 060a 	bic.w	r6, r7, sl
    1f4a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    1f4e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    1f52:	4683      	mov	fp, r0
    1f54:	f00b f89a 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f58:	b124      	cbz	r4, 1f64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    1f5a:	2100      	movs	r1, #0
    1f5c:	f240 502f 	movw	r0, #1327	; 0x52f
    1f60:	f3af 8000 	nop.w
    1f64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1f68:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    1f6c:	4428      	add	r0, r5
    1f6e:	4429      	add	r1, r5
    1f70:	9000      	str	r0, [sp, #0]
    1f72:	8c0a      	ldrh	r2, [r1, #32]
    1f74:	8402      	strh	r2, [r0, #32]
    1f76:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1f7a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1f7e:	b124      	cbz	r4, 1f8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1f80:	2100      	movs	r1, #0
    1f82:	f240 5033 	movw	r0, #1331	; 0x533
    1f86:	f3af 8000 	nop.w
    1f8a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1f8e:	f88d 0008 	strb.w	r0, [sp, #8]
    1f92:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f96:	b178      	cbz	r0, 1fb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    1f98:	2c00      	cmp	r4, #0
    1f9a:	bf1c      	itt	ne
    1f9c:	2100      	movne	r1, #0
    1f9e:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    1fa2:	d0b9      	beq.n	1f18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    1fa4:	f3af 8000 	nop.w
    1fa8:	e7b6      	b.n	1f18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    1faa:	486a      	ldr	r0, [pc, #424]	; (2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>)
    1fac:	2800      	cmp	r0, #0
    1fae:	bf18      	it	ne
    1fb0:	f3af 8000 	nopne.w
    1fb4:	b662      	cpsie	i
    1fb6:	e7bb      	b.n	1f30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    1fb8:	b124      	cbz	r4, 1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    1fba:	2100      	movs	r1, #0
    1fbc:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1fc0:	f3af 8000 	nop.w
    1fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    1fc6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1fca:	2803      	cmp	r0, #3
    1fcc:	d17d      	bne.n	20ca <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xca>
    1fce:	9a00      	ldr	r2, [sp, #0]
    1fd0:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fd2:	f892 0020 	ldrb.w	r0, [r2, #32]
    1fd6:	4288      	cmp	r0, r1
    1fd8:	bf14      	ite	ne
    1fda:	f04f 0a00 	movne.w	sl, #0
    1fde:	f04f 0a01 	moveq.w	sl, #1
    1fe2:	f102 0c20 	add.w	ip, r2, #32
    1fe6:	4683      	mov	fp, r0
    1fe8:	2220      	movs	r2, #32
    1fea:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    1fee:	e003      	b.n	1ff8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    1ff0:	4602      	mov	r2, r0
    1ff2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1ff6:	7840      	ldrb	r0, [r0, #1]
    1ff8:	4288      	cmp	r0, r1
    1ffa:	d002      	beq.n	2002 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2>
    1ffc:	2820      	cmp	r0, #32
    1ffe:	d00a      	beq.n	2016 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16>
    2000:	e7f6      	b.n	1ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2002:	2820      	cmp	r0, #32
    2004:	d007      	beq.n	2016 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16>
    2006:	4583      	cmp	fp, r0
    2008:	d107      	bne.n	201a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a>
    200a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    200e:	7840      	ldrb	r0, [r0, #1]
    2010:	f88c 0000 	strb.w	r0, [ip]
    2014:	e007      	b.n	2026 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x26>
    2016:	4640      	mov	r0, r8
    2018:	e00c      	b.n	2034 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34>
    201a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    201e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2022:	7840      	ldrb	r0, [r0, #1]
    2024:	7048      	strb	r0, [r1, #1]
    2026:	b124      	cbz	r4, 2032 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x32>
    2028:	2100      	movs	r1, #0
    202a:	f240 409a 	movw	r0, #1178	; 0x49a
    202e:	f3af 8000 	nop.w
    2032:	4638      	mov	r0, r7
    2034:	46c3      	mov	fp, r8
    2036:	ea10 0f0a 	tst.w	r0, sl
    203a:	bf18      	it	ne
    203c:	46bb      	movne	fp, r7
    203e:	2800      	cmp	r0, #0
    2040:	d04f      	beq.n	20e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe2>
    2042:	b124      	cbz	r4, 204e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e>
    2044:	2100      	movs	r1, #0
    2046:	f240 70c4 	movw	r0, #1988	; 0x7c4
    204a:	f3af 8000 	nop.w
    204e:	4632      	mov	r2, r6
    2050:	2001      	movs	r0, #1
    2052:	990c      	ldr	r1, [sp, #48]	; 0x30
    2054:	f7ff f8aa 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    2058:	b124      	cbz	r4, 2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    205a:	2100      	movs	r1, #0
    205c:	f240 70cd 	movw	r0, #1997	; 0x7cd
    2060:	f3af 8000 	nop.w
    2064:	483c      	ldr	r0, [pc, #240]	; (2158 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x158>)
    2066:	2800      	cmp	r0, #0
    2068:	bf18      	it	ne
    206a:	f3af 8000 	nopne.w
    206e:	f3ef 8010 	mrs	r0, PRIMASK
    2072:	b672      	cpsid	i
    2074:	9007      	str	r0, [sp, #28]
    2076:	b124      	cbz	r4, 2082 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x82>
    2078:	2100      	movs	r1, #0
    207a:	f240 70d2 	movw	r0, #2002	; 0x7d2
    207e:	f3af 8000 	nop.w
    2082:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2086:	f88d 0008 	strb.w	r0, [sp, #8]
    208a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    208e:	b138      	cbz	r0, 20a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa0>
    2090:	2c00      	cmp	r4, #0
    2092:	bf1c      	itt	ne
    2094:	2100      	movne	r1, #0
    2096:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    209a:	f43f af3d 	beq.w	1f18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    209e:	e781      	b.n	1fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    20a0:	f1bb 0f00 	cmp.w	fp, #0
    20a4:	d00a      	beq.n	20bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbc>
    20a6:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    20aa:	2820      	cmp	r0, #32
    20ac:	d106      	bne.n	20bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbc>
    20ae:	4632      	mov	r2, r6
    20b0:	2102      	movs	r1, #2
    20b2:	9808      	ldr	r0, [sp, #32]
    20b4:	f7ff f8ac 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    20b8:	9006      	str	r0, [sp, #24]
    20ba:	b1f8      	cbz	r0, 20fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xfc>
    20bc:	b124      	cbz	r4, 20c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc8>
    20be:	2100      	movs	r1, #0
    20c0:	f240 70ea 	movw	r0, #2026	; 0x7ea
    20c4:	f3af 8000 	nop.w
    20c8:	e000      	b.n	20cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xcc>
    20ca:	e00a      	b.n	20e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe2>
    20cc:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    20d0:	ea27 0000 	bic.w	r0, r7, r0
    20d4:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    20d8:	20ff      	movs	r0, #255	; 0xff
    20da:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    20de:	2001      	movs	r0, #1
    20e0:	9009      	str	r0, [sp, #36]	; 0x24
    20e2:	b124      	cbz	r4, 20ee <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xee>
    20e4:	2100      	movs	r1, #0
    20e6:	f240 70f3 	movw	r0, #2035	; 0x7f3
    20ea:	f3af 8000 	nop.w
    20ee:	9806      	ldr	r0, [sp, #24]
    20f0:	4e1a      	ldr	r6, [pc, #104]	; (215c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15c>)
    20f2:	2802      	cmp	r0, #2
    20f4:	d009      	beq.n	210a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10a>
    20f6:	2801      	cmp	r0, #1
    20f8:	d00f      	beq.n	211a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x11a>
    20fa:	e013      	b.n	2124 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x124>
    20fc:	b194      	cbz	r4, 2124 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x124>
    20fe:	2100      	movs	r1, #0
    2100:	f240 70e5 	movw	r0, #2021	; 0x7e5
    2104:	f3af 8000 	nop.w
    2108:	e7ec      	b.n	20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>
    210a:	68a9      	ldr	r1, [r5, #8]
    210c:	9808      	ldr	r0, [sp, #32]
    210e:	1a08      	subs	r0, r1, r0
    2110:	f00a fe60 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2114:	6871      	ldr	r1, [r6, #4]
    2116:	b921      	cbnz	r1, 2122 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x122>
    2118:	e004      	b.n	2124 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x124>
    211a:	6871      	ldr	r1, [r6, #4]
    211c:	f04f 30ff 	mov.w	r0, #4294967295
    2120:	b101      	cbz	r1, 2124 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x124>
    2122:	4788      	blx	r1
    2124:	9807      	ldr	r0, [sp, #28]
    2126:	b148      	cbz	r0, 213c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13c>
    2128:	b124      	cbz	r4, 2134 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x134>
    212a:	2100      	movs	r1, #0
    212c:	f640 0007 	movw	r0, #2055	; 0x807
    2130:	f3af 8000 	nop.w
    2134:	9809      	ldr	r0, [sp, #36]	; 0x24
    2136:	b00d      	add	sp, #52	; 0x34
    2138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    213c:	4805      	ldr	r0, [pc, #20]	; (2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>)
    213e:	2800      	cmp	r0, #0
    2140:	bf18      	it	ne
    2142:	f3af 8000 	nopne.w
    2146:	b662      	cpsie	i
    2148:	e7ee      	b.n	2128 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x128>
    214a:	0000      	.short	0x0000
    214c:	20001374 	.word	0x20001374
	...
    215c:	2000003c 	.word	0x2000003c

00002160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2160:	b510      	push	{r4, lr}
    2162:	2820      	cmp	r0, #32
    2164:	d211      	bcs.n	218a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2166:	490e      	ldr	r1, [pc, #56]	; (21a0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2168:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    216c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2170:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2174:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2178:	b13b      	cbz	r3, 218a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    217a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    217e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2182:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2186:	2a01      	cmp	r2, #1
    2188:	d001      	beq.n	218e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    218a:	2000      	movs	r0, #0
    218c:	bd10      	pop	{r4, pc}
    218e:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    2192:	4601      	mov	r1, r0
    2194:	2000      	movs	r0, #0
    2196:	f7ff f809 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    219a:	2001      	movs	r0, #1
    219c:	bd10      	pop	{r4, pc}
    219e:	0000      	.short	0x0000
    21a0:	20001374 	.word	0x20001374

000021a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    21a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21a8:	4e86      	ldr	r6, [pc, #536]	; (23c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    21aa:	4680      	mov	r8, r0
    21ac:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    21b0:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    21b4:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    21b8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    21bc:	2800      	cmp	r0, #0
    21be:	d071      	beq.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    21c0:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    21c4:	4d80      	ldr	r5, [pc, #512]	; (23c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    21c6:	b125      	cbz	r5, 21d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    21c8:	2100      	movs	r1, #0
    21ca:	f640 3076 	movw	r0, #2934	; 0xb76
    21ce:	f3af 8000 	nop.w
    21d2:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    21d6:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21da:	2801      	cmp	r0, #1
    21dc:	d018      	beq.n	2210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    21de:	b2c0      	uxtb	r0, r0
    21e0:	2804      	cmp	r0, #4
    21e2:	bf1c      	itt	ne
    21e4:	2805      	cmpne	r0, #5
    21e6:	2806      	cmpne	r0, #6
    21e8:	d061      	beq.n	22ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    21ea:	b12d      	cbz	r5, 21f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    21ec:	f04f 0100 	mov.w	r1, #0
    21f0:	f640 3082 	movw	r0, #2946	; 0xb82
    21f4:	f3af 8000 	nop.w
    21f8:	f001 fc98 	bl	3b2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    21fc:	b125      	cbz	r5, 2208 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    21fe:	2100      	movs	r1, #0
    2200:	f640 3086 	movw	r0, #2950	; 0xb86
    2204:	f3af 8000 	nop.w
    2208:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    220c:	2801      	cmp	r0, #1
    220e:	d1e6      	bne.n	21de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2210:	2401      	movs	r4, #1
    2212:	b125      	cbz	r5, 221e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2214:	2100      	movs	r1, #0
    2216:	f640 308d 	movw	r0, #2957	; 0xb8d
    221a:	f3af 8000 	nop.w
    221e:	2c00      	cmp	r4, #0
    2220:	d04b      	beq.n	22ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2222:	2000      	movs	r0, #0
    2224:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2228:	b125      	cbz	r5, 2234 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    222a:	2100      	movs	r1, #0
    222c:	f640 3092 	movw	r0, #2962	; 0xb92
    2230:	f3af 8000 	nop.w
    2234:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2238:	2001      	movs	r0, #1
    223a:	ea20 090b 	bic.w	r9, r0, fp
    223e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2242:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2246:	2240      	movs	r2, #64	; 0x40
    2248:	f00a ff20 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    224c:	b125      	cbz	r5, 2258 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    224e:	2100      	movs	r1, #0
    2250:	f240 502f 	movw	r0, #1327	; 0x52f
    2254:	f3af 8000 	nop.w
    2258:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    225c:	eb00 0a06 	add.w	sl, r0, r6
    2260:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2264:	4430      	add	r0, r6
    2266:	8c01      	ldrh	r1, [r0, #32]
    2268:	f8aa 1020 	strh.w	r1, [sl, #32]
    226c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2270:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2274:	b125      	cbz	r5, 2280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2276:	2100      	movs	r1, #0
    2278:	f240 5033 	movw	r0, #1331	; 0x533
    227c:	f3af 8000 	nop.w
    2280:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2284:	f88d 0000 	strb.w	r0, [sp]
    2288:	f89d 0000 	ldrb.w	r0, [sp]
    228c:	b1e0      	cbz	r0, 22c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    228e:	2d00      	cmp	r5, #0
    2290:	bf1c      	itt	ne
    2292:	2100      	movne	r1, #0
    2294:	f640 3098 	movwne	r0, #2968	; 0xb98
    2298:	d0bb      	beq.n	2212 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    229a:	bf00      	nop
    229c:	f3af 8000 	nop.w
    22a0:	e7b7      	b.n	2212 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22a2:	e7ff      	b.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    22a4:	f640 316d 	movw	r1, #2925	; 0xb6d
    22a8:	2070      	movs	r0, #112	; 0x70
    22aa:	f001 fb15 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22ae:	464a      	mov	r2, r9
    22b0:	4641      	mov	r1, r8
    22b2:	2001      	movs	r0, #1
    22b4:	f7fe ff7a 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    22b8:	e7a0      	b.n	21fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    22ba:	4844      	ldr	r0, [pc, #272]	; (23cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    22bc:	2800      	cmp	r0, #0
    22be:	bf18      	it	ne
    22c0:	f3af 8000 	nopne.w
    22c4:	b662      	cpsie	i
    22c6:	e7ac      	b.n	2222 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    22c8:	b125      	cbz	r5, 22d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    22ca:	2100      	movs	r1, #0
    22cc:	f640 309c 	movw	r0, #2972	; 0xb9c
    22d0:	f3af 8000 	nop.w
    22d4:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    22d8:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    22dc:	4640      	mov	r0, r8
    22de:	461c      	mov	r4, r3
    22e0:	f04f 0b20 	mov.w	fp, #32
    22e4:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    22e8:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    22ec:	e004      	b.n	22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    22ee:	46a3      	mov	fp, r4
    22f0:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    22f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
    22f8:	4284      	cmp	r4, r0
    22fa:	d002      	beq.n	2302 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    22fc:	2c20      	cmp	r4, #32
    22fe:	d02b      	beq.n	2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2300:	e7f5      	b.n	22ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    2302:	2c20      	cmp	r4, #32
    2304:	d028      	beq.n	2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2306:	42a3      	cmp	r3, r4
    2308:	d104      	bne.n	2314 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    230a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    230e:	7840      	ldrb	r0, [r0, #1]
    2310:	7008      	strb	r0, [r1, #0]
    2312:	e005      	b.n	2320 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2314:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2318:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    231c:	7840      	ldrb	r0, [r0, #1]
    231e:	7048      	strb	r0, [r1, #1]
    2320:	f1ba 0f00 	cmp.w	sl, #0
    2324:	d011      	beq.n	234a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2326:	b125      	cbz	r5, 2332 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2328:	2100      	movs	r1, #0
    232a:	f240 4092 	movw	r0, #1170	; 0x492
    232e:	f3af 8000 	nop.w
    2332:	f89a 0000 	ldrb.w	r0, [sl]
    2336:	42a0      	cmp	r0, r4
    2338:	d107      	bne.n	234a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    233a:	b125      	cbz	r5, 2346 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    233c:	2100      	movs	r1, #0
    233e:	f240 4095 	movw	r0, #1173	; 0x495
    2342:	f3af 8000 	nop.w
    2346:	f88a b000 	strb.w	fp, [sl]
    234a:	b15d      	cbz	r5, 2364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    234c:	2100      	movs	r1, #0
    234e:	f240 409a 	movw	r0, #1178	; 0x49a
    2352:	f3af 8000 	nop.w
    2356:	e000      	b.n	235a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2358:	b125      	cbz	r5, 2364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    235a:	2100      	movs	r1, #0
    235c:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    2360:	f3af 8000 	nop.w
    2364:	481a      	ldr	r0, [pc, #104]	; (23d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2366:	2800      	cmp	r0, #0
    2368:	bf18      	it	ne
    236a:	f3af 8000 	nopne.w
    236e:	f3ef 8410 	mrs	r4, PRIMASK
    2372:	b672      	cpsid	i
    2374:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2378:	f88d 0000 	strb.w	r0, [sp]
    237c:	f89d 0000 	ldrb.w	r0, [sp]
    2380:	b138      	cbz	r0, 2392 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    2382:	2d00      	cmp	r5, #0
    2384:	bf1c      	itt	ne
    2386:	2100      	movne	r1, #0
    2388:	f640 30a6 	movwne	r0, #2982	; 0xba6
    238c:	f43f af41 	beq.w	2212 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2390:	e784      	b.n	229c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2392:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2396:	20ff      	movs	r0, #255	; 0xff
    2398:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    239c:	b154      	cbz	r4, 23b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    239e:	2d00      	cmp	r5, #0
    23a0:	bf08      	it	eq
    23a2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a6:	2100      	movs	r1, #0
    23a8:	f640 30b3 	movw	r0, #2995	; 0xbb3
    23ac:	f3af 8000 	nop.w
    23b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b4:	4805      	ldr	r0, [pc, #20]	; (23cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    23b6:	2800      	cmp	r0, #0
    23b8:	bf18      	it	ne
    23ba:	f3af 8000 	nopne.w
    23be:	b662      	cpsie	i
    23c0:	e7ed      	b.n	239e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    23c2:	0000      	.short	0x0000
    23c4:	20001374 	.word	0x20001374
	...

000023d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	460d      	mov	r5, r1
    23d8:	4606      	mov	r6, r0
    23da:	f001 f9f3 	bl	37c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    23de:	480f      	ldr	r0, [pc, #60]	; (241c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    23e0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    23e4:	2400      	movs	r4, #0
    23e6:	3880      	subs	r0, #128	; 0x80
    23e8:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    23ec:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    23f0:	b129      	cbz	r1, 23fe <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    23f2:	1c61      	adds	r1, r4, #1
    23f4:	b2cc      	uxtb	r4, r1
    23f6:	2c20      	cmp	r4, #32
    23f8:	d3f8      	bcc.n	23ec <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    23fa:	2020      	movs	r0, #32
    23fc:	bd70      	pop	{r4, r5, r6, pc}
    23fe:	4808      	ldr	r0, [pc, #32]	; (2420 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2400:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2404:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2408:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    240c:	4621      	mov	r1, r4
    240e:	6045      	str	r5, [r0, #4]
    2410:	2001      	movs	r0, #1
    2412:	f7fe fecb 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    2416:	4620      	mov	r0, r4
    2418:	bd70      	pop	{r4, r5, r6, pc}
    241a:	0000      	.short	0x0000
    241c:	20001374 	.word	0x20001374
    2420:	20000f74 	.word	0x20000f74

00002424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2428:	f000 fb3c 	bl	2aa4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    242c:	4605      	mov	r5, r0
    242e:	f000 fe0b 	bl	3048 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2432:	4c60      	ldr	r4, [pc, #384]	; (25b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    2434:	6860      	ldr	r0, [r4, #4]
    2436:	f1b0 3fff 	cmp.w	r0, #4294967295
    243a:	bf1c      	itt	ne
    243c:	f04f 30ff 	movne.w	r0, #4294967295
    2440:	6060      	strne	r0, [r4, #4]
    2442:	7fa0      	ldrb	r0, [r4, #30]
    2444:	4f5c      	ldr	r7, [pc, #368]	; (25b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2446:	b990      	cbnz	r0, 246e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    2448:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    244c:	1a40      	subs	r0, r0, r1
    244e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2452:	f44f 710c 	mov.w	r1, #560	; 0x230
    2456:	f00a fcea 	bl	ce2e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    245a:	68e1      	ldr	r1, [r4, #12]
    245c:	4408      	add	r0, r1
    245e:	1a28      	subs	r0, r5, r0
    2460:	0200      	lsls	r0, r0, #8
    2462:	17c1      	asrs	r1, r0, #31
    2464:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2468:	1200      	asrs	r0, r0, #8
    246a:	0fc0      	lsrs	r0, r0, #31
    246c:	d012      	beq.n	2494 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    246e:	7e60      	ldrb	r0, [r4, #25]
    2470:	b320      	cbz	r0, 24bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    2472:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2476:	f88d 0000 	strb.w	r0, [sp]
    247a:	f89d 0000 	ldrb.w	r0, [sp]
    247e:	b1e8      	cbz	r0, 24bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    2480:	f000 fc3e 	bl	2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2484:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2488:	b1f0      	cbz	r0, 24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    248a:	f240 31d5 	movw	r1, #981	; 0x3d5
    248e:	2070      	movs	r0, #112	; 0x70
    2490:	f001 fa22 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2494:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2498:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    249c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    24a0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    24a4:	6840      	ldr	r0, [r0, #4]
    24a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    24aa:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    24ae:	2108      	movs	r1, #8
    24b0:	4790      	blx	r2
    24b2:	f240 31bd 	movw	r1, #957	; 0x3bd
    24b6:	2070      	movs	r0, #112	; 0x70
    24b8:	f001 fa0e 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24bc:	1ce8      	adds	r0, r5, #3
    24be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24c2:	f000 fb15 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    24c6:	e7dd      	b.n	2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    24c8:	2001      	movs	r0, #1
    24ca:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    24ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    24d2:	2820      	cmp	r0, #32
    24d4:	d021      	beq.n	251a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    24d6:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    24da:	2020      	movs	r0, #32
    24dc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    24e0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    24e4:	2600      	movs	r6, #0
    24e6:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    24ea:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    24ee:	6026      	str	r6, [r4, #0]
    24f0:	f000 fe9e 	bl	3230 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    24f4:	7720      	strb	r0, [r4, #28]
    24f6:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    24fa:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    24fe:	eb00 0a04 	add.w	sl, r0, r4
    2502:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2506:	2820      	cmp	r0, #32
    2508:	d012      	beq.n	2530 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    250a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    250e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2512:	7e81      	ldrb	r1, [r0, #26]
    2514:	2901      	cmp	r1, #1
    2516:	d005      	beq.n	2524 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    2518:	e00a      	b.n	2530 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    251a:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    251e:	2070      	movs	r0, #112	; 0x70
    2520:	f001 f9da 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2524:	f100 0208 	add.w	r2, r0, #8
    2528:	2101      	movs	r1, #1
    252a:	4628      	mov	r0, r5
    252c:	f7fe f9b6 	bl	89c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c>
    2530:	4642      	mov	r2, r8
    2532:	2101      	movs	r1, #1
    2534:	4628      	mov	r0, r5
    2536:	f7fe fe6b 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    253a:	0007      	movs	r7, r0
    253c:	d0f8      	beq.n	2530 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    253e:	481f      	ldr	r0, [pc, #124]	; (25bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    2540:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2544:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    2548:	2802      	cmp	r0, #2
    254a:	d104      	bne.n	2556 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    254c:	4642      	mov	r2, r8
    254e:	4649      	mov	r1, r9
    2550:	2006      	movs	r0, #6
    2552:	f7fe fe2b 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    2556:	20ff      	movs	r0, #255	; 0xff
    2558:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    255c:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    2560:	f8df 805c 	ldr.w	r8, [pc, #92]	; 25c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    2564:	2820      	cmp	r0, #32
    2566:	bf1c      	itt	ne
    2568:	f898 0001 	ldrbne.w	r0, [r8, #1]
    256c:	f001 fa88 	blne	3a80 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2570:	7f20      	ldrb	r0, [r4, #28]
    2572:	b118      	cbz	r0, 257c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    2574:	f000 fe38 	bl	31e8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2578:	7726      	strb	r6, [r4, #28]
    257a:	7766      	strb	r6, [r4, #29]
    257c:	2f02      	cmp	r7, #2
    257e:	d00f      	beq.n	25a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    2580:	2f01      	cmp	r7, #1
    2582:	bf18      	it	ne
    2584:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2588:	f04f 30ff 	mov.w	r0, #4294967295
    258c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2590:	2900      	cmp	r1, #0
    2592:	bf08      	it	eq
    2594:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2598:	b001      	add	sp, #4
    259a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    259e:	4708      	bx	r1
    25a0:	68a0      	ldr	r0, [r4, #8]
    25a2:	1b40      	subs	r0, r0, r5
    25a4:	f00a fc16 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    25a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    25ac:	2900      	cmp	r1, #0
    25ae:	d1f3      	bne.n	2598 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    25b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25b4:	20001374 	.word	0x20001374
    25b8:	20000f74 	.word	0x20000f74
    25bc:	200012f4 	.word	0x200012f4
    25c0:	2000003c 	.word	0x2000003c

000025c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    25c4:	b530      	push	{r4, r5, lr}
    25c6:	4c36      	ldr	r4, [pc, #216]	; (26a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    25c8:	4605      	mov	r5, r0
    25ca:	b083      	sub	sp, #12
    25cc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    25d0:	2820      	cmp	r0, #32
    25d2:	d008      	beq.n	25e6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    25d4:	6860      	ldr	r0, [r4, #4]
    25d6:	f1b0 3fff 	cmp.w	r0, #4294967295
    25da:	d009      	beq.n	25f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    25dc:	f640 21a1 	movw	r1, #2721	; 0xaa1
    25e0:	2070      	movs	r0, #112	; 0x70
    25e2:	f001 f979 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25e6:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    25ea:	2070      	movs	r0, #112	; 0x70
    25ec:	f001 f974 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25f0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    25f4:	492b      	ldr	r1, [pc, #172]	; (26a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    25f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    25fa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    25fe:	3008      	adds	r0, #8
    2600:	f7fe fd9a 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    2604:	4601      	mov	r1, r0
    2606:	4a28      	ldr	r2, [pc, #160]	; (26a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    2608:	4428      	add	r0, r5
    260a:	4291      	cmp	r1, r2
    260c:	d904      	bls.n	2618 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    260e:	f240 516f 	movw	r1, #1391	; 0x56f
    2612:	2070      	movs	r0, #112	; 0x70
    2614:	f001 f960 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2618:	4924      	ldr	r1, [pc, #144]	; (26ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    261a:	428d      	cmp	r5, r1
    261c:	dd04      	ble.n	2628 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    261e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2622:	2070      	movs	r0, #112	; 0x70
    2624:	f001 f958 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2628:	4921      	ldr	r1, [pc, #132]	; (26b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    262a:	428d      	cmp	r5, r1
    262c:	da04      	bge.n	2638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    262e:	f240 5171 	movw	r1, #1393	; 0x571
    2632:	2070      	movs	r0, #112	; 0x70
    2634:	f001 f950 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2638:	491e      	ldr	r1, [pc, #120]	; (26b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    263a:	4281      	cmp	r1, r0
    263c:	bfdc      	itt	le
    263e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2642:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2646:	dd05      	ble.n	2654 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2648:	2800      	cmp	r0, #0
    264a:	bfbc      	itt	lt
    264c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2650:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2654:	aa01      	add	r2, sp, #4
    2656:	4669      	mov	r1, sp
    2658:	f000 f8ba 	bl	27d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    265c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2660:	280f      	cmp	r0, #15
    2662:	bf8c      	ite	hi
    2664:	2001      	movhi	r0, #1
    2666:	2000      	movls	r0, #0
    2668:	9900      	ldr	r1, [sp, #0]
    266a:	4408      	add	r0, r1
    266c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2670:	6061      	str	r1, [r4, #4]
    2672:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2676:	f88d 0000 	strb.w	r0, [sp]
    267a:	f89d 0000 	ldrb.w	r0, [sp]
    267e:	2800      	cmp	r0, #0
    2680:	bf04      	itt	eq
    2682:	b003      	addeq	sp, #12
    2684:	bd30      	popeq	{r4, r5, pc}
    2686:	2005      	movs	r0, #5
    2688:	f000 fbb8 	bl	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    268c:	2800      	cmp	r0, #0
    268e:	bf1c      	itt	ne
    2690:	b003      	addne	sp, #12
    2692:	bd30      	popne	{r4, r5, pc}
    2694:	f640 21a8 	movw	r1, #2728	; 0xaa8
    2698:	2070      	movs	r0, #112	; 0x70
    269a:	f001 f91d 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    269e:	0000      	.short	0x0000
    26a0:	20001374 	.word	0x20001374
    26a4:	20000f74 	.word	0x20000f74
    26a8:	1e847fff 	.word	0x1e847fff
    26ac:	0f424000 	.word	0x0f424000
    26b0:	f0bdc000 	.word	0xf0bdc000
    26b4:	1e848000 	.word	0x1e848000

000026b8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	4c1c      	ldr	r4, [pc, #112]	; (272c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    26bc:	2120      	movs	r1, #32
    26be:	f884 1020 	strb.w	r1, [r4, #32]
    26c2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    26c6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    26ca:	2000      	movs	r0, #0
    26cc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    26d0:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    26d4:	1e42      	subs	r2, r0, #1
    26d6:	e9c4 0200 	strd	r0, r2, [r4]
    26da:	77a0      	strb	r0, [r4, #30]
    26dc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    26e0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    26e4:	7720      	strb	r0, [r4, #28]
    26e6:	7760      	strb	r0, [r4, #29]
    26e8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    26ec:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    26f0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    26f4:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    26f8:	2210      	movs	r2, #16
    26fa:	7088      	strb	r0, [r1, #2]
    26fc:	f801 0f04 	strb.w	r0, [r1, #4]!
    2700:	1e52      	subs	r2, r2, #1
    2702:	d1fa      	bne.n	26fa <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2704:	f000 fd9e 	bl	3244 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2708:	4d09      	ldr	r5, [pc, #36]	; (2730 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    270a:	2601      	movs	r6, #1
    270c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2710:	20ff      	movs	r0, #255	; 0xff
    2712:	7028      	strb	r0, [r5, #0]
    2714:	4807      	ldr	r0, [pc, #28]	; (2734 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2716:	f001 f995 	bl	3a44 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    271a:	7068      	strb	r0, [r5, #1]
    271c:	f001 f9f0 	bl	3b00 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2720:	60a8      	str	r0, [r5, #8]
    2722:	f000 fd19 	bl	3158 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2726:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    272a:	bd70      	pop	{r4, r5, r6, pc}
    272c:	20001374 	.word	0x20001374
    2730:	2000003c 	.word	0x2000003c
    2734:	00001061 	.word	0x00001061

00002738 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2738:	b570      	push	{r4, r5, r6, lr}
    273a:	4605      	mov	r5, r0
    273c:	2001      	movs	r0, #1
    273e:	fa00 f405 	lsl.w	r4, r0, r5
    2742:	460e      	mov	r6, r1
    2744:	2a00      	cmp	r2, #0
    2746:	bf08      	it	eq
    2748:	4808      	ldreq	r0, [pc, #32]	; (276c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    274a:	d00c      	beq.n	2766 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    274c:	2000      	movs	r0, #0
    274e:	f000 fce9 	bl	3124 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2752:	00e9      	lsls	r1, r5, #3
    2754:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2758:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    275c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2760:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2764:	4802      	ldr	r0, [pc, #8]	; (2770 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2766:	6004      	str	r4, [r0, #0]
    2768:	bd70      	pop	{r4, r5, r6, pc}
    276a:	0000      	.short	0x0000
    276c:	4001f508 	.word	0x4001f508
    2770:	4001f504 	.word	0x4001f504

00002774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2774:	b500      	push	{lr}
    2776:	b083      	sub	sp, #12
    2778:	4668      	mov	r0, sp
    277a:	f000 f999 	bl	2ab0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    277e:	9800      	ldr	r0, [sp, #0]
    2780:	f00a fb28 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2784:	9a01      	ldr	r2, [sp, #4]
    2786:	4b03      	ldr	r3, [pc, #12]	; (2794 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2788:	2100      	movs	r1, #0
    278a:	fbe2 0103 	umlal	r0, r1, r2, r3
    278e:	b003      	add	sp, #12
    2790:	bd00      	pop	{pc}
    2792:	0000      	.short	0x0000
    2794:	1e848000 	.word	0x1e848000

00002798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2798:	0b41      	lsrs	r1, r0, #13
    279a:	f248 6237 	movw	r2, #34359	; 0x8637
    279e:	4351      	muls	r1, r2
    27a0:	0c0a      	lsrs	r2, r1, #16
    27a2:	4b09      	ldr	r3, [pc, #36]	; (27c8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    27a4:	0251      	lsls	r1, r2, #9
    27a6:	fb02 0203 	mla	r2, r2, r3, r0
    27aa:	4808      	ldr	r0, [pc, #32]	; (27cc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    27ac:	4350      	muls	r0, r2
    27ae:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    27b2:	306e      	adds	r0, #110	; 0x6e
    27b4:	0d40      	lsrs	r0, r0, #21
    27b6:	425b      	negs	r3, r3
    27b8:	fb10 f303 	smulbb	r3, r0, r3
    27bc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    27c0:	bf88      	it	hi
    27c2:	1c49      	addhi	r1, r1, #1
    27c4:	4408      	add	r0, r1
    27c6:	4770      	bx	lr
    27c8:	ffffc2f7 	.word	0xffffc2f7
    27cc:	00010c6f 	.word	0x00010c6f

000027d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    27d0:	0b43      	lsrs	r3, r0, #13
    27d2:	f248 6c37 	movw	ip, #34359	; 0x8637
    27d6:	fb03 f30c 	mul.w	r3, r3, ip
    27da:	b430      	push	{r4, r5}
    27dc:	0c1b      	lsrs	r3, r3, #16
    27de:	f8df c044 	ldr.w	ip, [pc, #68]	; 2824 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    27e2:	025c      	lsls	r4, r3, #9
    27e4:	fb03 030c 	mla	r3, r3, ip, r0
    27e8:	480f      	ldr	r0, [pc, #60]	; (2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    27ea:	4358      	muls	r0, r3
    27ec:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    27f0:	eb04 000c 	add.w	r0, r4, ip
    27f4:	f643 5409 	movw	r4, #15625	; 0x3d09
    27f8:	fb1c f404 	smulbb	r4, ip, r4
    27fc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2800:	f643 5508 	movw	r5, #15624	; 0x3d08
    2804:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2808:	442c      	add	r4, r5
    280a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    280e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2812:	bf84      	itt	hi
    2814:	f04f 0c00 	movhi.w	ip, #0
    2818:	1c40      	addhi	r0, r0, #1
    281a:	6008      	str	r0, [r1, #0]
    281c:	f882 c000 	strb.w	ip, [r2]
    2820:	bc30      	pop	{r4, r5}
    2822:	4770      	bx	lr
    2824:	ffffc2f7 	.word	0xffffc2f7
    2828:	00010c6f 	.word	0x00010c6f

0000282c <MPSL_IRQ_RTC0_Handler>:
    282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2830:	4d3b      	ldr	r5, [pc, #236]	; (2920 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2832:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2836:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2924 <MPSL_IRQ_RTC0_Handler+0xf8>
    283a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    283e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2842:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2846:	f04f 0400 	mov.w	r4, #0
    284a:	d019      	beq.n	2880 <MPSL_IRQ_RTC0_Handler+0x54>
    284c:	4836      	ldr	r0, [pc, #216]	; (2928 <MPSL_IRQ_RTC0_Handler+0xfc>)
    284e:	6800      	ldr	r0, [r0, #0]
    2850:	b1b0      	cbz	r0, 2880 <MPSL_IRQ_RTC0_Handler+0x54>
    2852:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2856:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    285a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    285e:	f8d8 1000 	ldr.w	r1, [r8]
    2862:	1a40      	subs	r0, r0, r1
    2864:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2868:	2802      	cmp	r0, #2
    286a:	d302      	bcc.n	2872 <MPSL_IRQ_RTC0_Handler+0x46>
    286c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2870:	d906      	bls.n	2880 <MPSL_IRQ_RTC0_Handler+0x54>
    2872:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2876:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    287a:	2004      	movs	r0, #4
    287c:	f7fe fec2 	bl	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2880:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2884:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2888:	d01a      	beq.n	28c0 <MPSL_IRQ_RTC0_Handler+0x94>
    288a:	4828      	ldr	r0, [pc, #160]	; (292c <MPSL_IRQ_RTC0_Handler+0x100>)
    288c:	6800      	ldr	r0, [r0, #0]
    288e:	b1b8      	cbz	r0, 28c0 <MPSL_IRQ_RTC0_Handler+0x94>
    2890:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2894:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2898:	4825      	ldr	r0, [pc, #148]	; (2930 <MPSL_IRQ_RTC0_Handler+0x104>)
    289a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    289e:	f8d8 1000 	ldr.w	r1, [r8]
    28a2:	1a40      	subs	r0, r0, r1
    28a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28a8:	2802      	cmp	r0, #2
    28aa:	d302      	bcc.n	28b2 <MPSL_IRQ_RTC0_Handler+0x86>
    28ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    28b0:	d906      	bls.n	28c0 <MPSL_IRQ_RTC0_Handler+0x94>
    28b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    28b6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    28ba:	2005      	movs	r0, #5
    28bc:	f7fe fea2 	bl	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28c0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    28c4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28c8:	d01a      	beq.n	2900 <MPSL_IRQ_RTC0_Handler+0xd4>
    28ca:	481a      	ldr	r0, [pc, #104]	; (2934 <MPSL_IRQ_RTC0_Handler+0x108>)
    28cc:	6800      	ldr	r0, [r0, #0]
    28ce:	b1b8      	cbz	r0, 2900 <MPSL_IRQ_RTC0_Handler+0xd4>
    28d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    28d4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28d8:	4817      	ldr	r0, [pc, #92]	; (2938 <MPSL_IRQ_RTC0_Handler+0x10c>)
    28da:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    28de:	f8d8 1000 	ldr.w	r1, [r8]
    28e2:	1a40      	subs	r0, r0, r1
    28e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28e8:	2802      	cmp	r0, #2
    28ea:	d302      	bcc.n	28f2 <MPSL_IRQ_RTC0_Handler+0xc6>
    28ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    28f0:	d906      	bls.n	2900 <MPSL_IRQ_RTC0_Handler+0xd4>
    28f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    28f6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    28fa:	2006      	movs	r0, #6
    28fc:	f7fe fe82 	bl	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2900:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2904:	2800      	cmp	r0, #0
    2906:	bf08      	it	eq
    2908:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    290c:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2910:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2914:	4809      	ldr	r0, [pc, #36]	; (293c <MPSL_IRQ_RTC0_Handler+0x110>)
    2916:	68c1      	ldr	r1, [r0, #12]
    2918:	1c49      	adds	r1, r1, #1
    291a:	60c1      	str	r1, [r0, #12]
    291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2920:	4000b000 	.word	0x4000b000
    2924:	4000b504 	.word	0x4000b504
    2928:	4000b140 	.word	0x4000b140
    292c:	4000b144 	.word	0x4000b144
    2930:	4000b004 	.word	0x4000b004
    2934:	4000b148 	.word	0x4000b148
    2938:	4000b008 	.word	0x4000b008
    293c:	20000048 	.word	0x20000048

00002940 <MPSL_IRQ_TIMER0_Handler>:
    2940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2944:	4d38      	ldr	r5, [pc, #224]	; (2a28 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2946:	7828      	ldrb	r0, [r5, #0]
    2948:	2804      	cmp	r0, #4
    294a:	d068      	beq.n	2a1e <MPSL_IRQ_TIMER0_Handler+0xde>
    294c:	1ca8      	adds	r0, r5, #2
    294e:	2201      	movs	r2, #1
    2950:	7801      	ldrb	r1, [r0, #0]
    2952:	b159      	cbz	r1, 296c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2954:	2901      	cmp	r1, #1
    2956:	bf08      	it	eq
    2958:	706a      	strbeq	r2, [r5, #1]
    295a:	d002      	beq.n	2962 <MPSL_IRQ_TIMER0_Handler+0x22>
    295c:	7869      	ldrb	r1, [r5, #1]
    295e:	2900      	cmp	r1, #0
    2960:	d058      	beq.n	2a14 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2962:	2102      	movs	r1, #2
    2964:	7001      	strb	r1, [r0, #0]
    2966:	7840      	ldrb	r0, [r0, #1]
    2968:	f000 fafe 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    296c:	4c2f      	ldr	r4, [pc, #188]	; (2a2c <MPSL_IRQ_TIMER0_Handler+0xec>)
    296e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2972:	f04f 0800 	mov.w	r8, #0
    2976:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    297a:	f44f 7780 	mov.w	r7, #256	; 0x100
    297e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2982:	d00a      	beq.n	299a <MPSL_IRQ_TIMER0_Handler+0x5a>
    2984:	482a      	ldr	r0, [pc, #168]	; (2a30 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2986:	6800      	ldr	r0, [r0, #0]
    2988:	b138      	cbz	r0, 299a <MPSL_IRQ_TIMER0_Handler+0x5a>
    298a:	2003      	movs	r0, #3
    298c:	f000 faec 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2990:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2994:	2003      	movs	r0, #3
    2996:	f7fe fe35 	bl	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    299a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    299e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    29a2:	d00a      	beq.n	29ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    29a4:	4823      	ldr	r0, [pc, #140]	; (2a34 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    29a6:	6800      	ldr	r0, [r0, #0]
    29a8:	b138      	cbz	r0, 29ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    29aa:	2002      	movs	r0, #2
    29ac:	f000 fadc 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29b4:	2002      	movs	r0, #2
    29b6:	f7fe fe25 	bl	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29be:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    29c2:	d00a      	beq.n	29da <MPSL_IRQ_TIMER0_Handler+0x9a>
    29c4:	481c      	ldr	r0, [pc, #112]	; (2a38 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    29c6:	6800      	ldr	r0, [r0, #0]
    29c8:	b138      	cbz	r0, 29da <MPSL_IRQ_TIMER0_Handler+0x9a>
    29ca:	2001      	movs	r0, #1
    29cc:	f000 facc 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29d4:	2001      	movs	r0, #1
    29d6:	f7fe fe15 	bl	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    29e2:	bf08      	it	eq
    29e4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29e8:	4814      	ldr	r0, [pc, #80]	; (2a3c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    29ea:	6800      	ldr	r0, [r0, #0]
    29ec:	2800      	cmp	r0, #0
    29ee:	bf08      	it	eq
    29f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29f4:	2000      	movs	r0, #0
    29f6:	f000 fab7 	bl	2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29fa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29fe:	2004      	movs	r0, #4
    2a00:	7028      	strb	r0, [r5, #0]
    2a02:	f8c5 8004 	str.w	r8, [r5, #4]
    2a06:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a0e:	2000      	movs	r0, #0
    2a10:	f7fe bdf8 	b.w	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a14:	f240 419f 	movw	r1, #1183	; 0x49f
    2a18:	206c      	movs	r0, #108	; 0x6c
    2a1a:	f000 ff5d 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a22:	2007      	movs	r0, #7
    2a24:	f7fe bdee 	b.w	1604 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a28:	20000048 	.word	0x20000048
    2a2c:	40008000 	.word	0x40008000
    2a30:	4000814c 	.word	0x4000814c
    2a34:	40008148 	.word	0x40008148
    2a38:	40008144 	.word	0x40008144
    2a3c:	40008140 	.word	0x40008140
    2a40:	2201      	movs	r2, #1
    2a42:	0211      	lsls	r1, r2, #8
    2a44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a48:	2000      	movs	r0, #0
    2a4a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2a4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2a52:	f3bf 8f4f 	dsb	sy
    2a56:	f3bf 8f6f 	isb	sy
    2a5a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2a5e:	490e      	ldr	r1, [pc, #56]	; (2a98 <MPSL_IRQ_TIMER0_Handler+0x158>)
    2a60:	f841 2f04 	str.w	r2, [r1, #4]!
    2a64:	1e43      	subs	r3, r0, #1
    2a66:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2a6a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2a6e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2a72:	4b0a      	ldr	r3, [pc, #40]	; (2a9c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2a74:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a78:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2a7c:	1d1b      	adds	r3, r3, #4
    2a7e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a82:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a86:	1d1b      	adds	r3, r3, #4
    2a88:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a8c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2a90:	60ca      	str	r2, [r1, #12]
    2a92:	4903      	ldr	r1, [pc, #12]	; (2aa0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2a94:	7048      	strb	r0, [r1, #1]
    2a96:	4770      	bx	lr
    2a98:	40008000 	.word	0x40008000
    2a9c:	40008004 	.word	0x40008004
    2aa0:	20000048 	.word	0x20000048

00002aa4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2aa4:	4801      	ldr	r0, [pc, #4]	; (2aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2aa6:	6800      	ldr	r0, [r0, #0]
    2aa8:	4770      	bx	lr
    2aaa:	0000      	.short	0x0000
    2aac:	4000b504 	.word	0x4000b504

00002ab0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    2ab0:	b430      	push	{r4, r5}
    2ab2:	f3ef 8c10 	mrs	ip, PRIMASK
    2ab6:	b672      	cpsid	i
    2ab8:	2500      	movs	r5, #0
    2aba:	4b0b      	ldr	r3, [pc, #44]	; (2ae8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    2abc:	4a0b      	ldr	r2, [pc, #44]	; (2aec <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    2abe:	bf00      	nop
    2ac0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2ac4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    2ac8:	b12c      	cbz	r4, 2ad6 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    2aca:	68d1      	ldr	r1, [r2, #12]
    2acc:	1c49      	adds	r1, r1, #1
    2ace:	60d1      	str	r1, [r2, #12]
    2ad0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    2ad4:	e7f4      	b.n	2ac0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    2ad6:	68d2      	ldr	r2, [r2, #12]
    2ad8:	f1bc 0f00 	cmp.w	ip, #0
    2adc:	d100      	bne.n	2ae0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    2ade:	b662      	cpsie	i
    2ae0:	e9c0 1200 	strd	r1, r2, [r0]
    2ae4:	bc30      	pop	{r4, r5}
    2ae6:	4770      	bx	lr
    2ae8:	4000b000 	.word	0x4000b000
    2aec:	20000048 	.word	0x20000048

00002af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2af4:	4e46      	ldr	r6, [pc, #280]	; (2c10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2af6:	4605      	mov	r5, r0
    2af8:	1eb7      	subs	r7, r6, #2
    2afa:	7833      	ldrb	r3, [r6, #0]
    2afc:	68b9      	ldr	r1, [r7, #8]
    2afe:	2b01      	cmp	r3, #1
    2b00:	bf04      	itt	eq
    2b02:	42a9      	cmpeq	r1, r5
    2b04:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b08:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2b0c:	4a41      	ldr	r2, [pc, #260]	; (2c14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2b0e:	6010      	str	r0, [r2, #0]
    2b10:	4a42      	ldr	r2, [pc, #264]	; (2c1c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b12:	4841      	ldr	r0, [pc, #260]	; (2c18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2b14:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2b18:	f102 0c04 	add.w	ip, r2, #4
    2b1c:	f04f 0400 	mov.w	r4, #0
    2b20:	2b00      	cmp	r3, #0
    2b22:	d062      	beq.n	2bea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2b24:	483e      	ldr	r0, [pc, #248]	; (2c20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b26:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2b2a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    2b2e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2b32:	bf00      	nop
    2b34:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    2b38:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2b3c:	f04f 0801 	mov.w	r8, #1
    2b40:	2800      	cmp	r0, #0
    2b42:	bf01      	itttt	eq
    2b44:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    2b48:	2800      	cmpeq	r0, #0
    2b4a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    2b4e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    2b52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2b56:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2b5a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2b5e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2b62:	4830      	ldr	r0, [pc, #192]	; (2c24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2b64:	f8d0 c000 	ldr.w	ip, [r0]
    2b68:	eba5 0c0c 	sub.w	ip, r5, ip
    2b6c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2b70:	f1bc 0f02 	cmp.w	ip, #2
    2b74:	d344      	bcc.n	2c00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    2b76:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    2b7a:	d841      	bhi.n	2c00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    2b7c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    2b80:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    2b84:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    2b88:	b12b      	cbz	r3, 2b96 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    2b8a:	6802      	ldr	r2, [r0, #0]
    2b8c:	1a8a      	subs	r2, r1, r2
    2b8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2b92:	2a02      	cmp	r2, #2
    2b94:	d3f9      	bcc.n	2b8a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    2b96:	f8c7 8004 	str.w	r8, [r7, #4]
    2b9a:	703c      	strb	r4, [r7, #0]
    2b9c:	f7ff ff50 	bl	2a40 <MPSL_IRQ_TIMER0_Handler+0x100>
    2ba0:	4821      	ldr	r0, [pc, #132]	; (2c28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2ba2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2ba6:	f364 0101 	bfi	r1, r4, #0, #2
    2baa:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2bae:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2bb2:	2102      	movs	r1, #2
    2bb4:	f361 0201 	bfi	r2, r1, #0, #2
    2bb8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2bbc:	2104      	movs	r1, #4
    2bbe:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    2bc2:	f8c0 800c 	str.w	r8, [r0, #12]
    2bc6:	6879      	ldr	r1, [r7, #4]
    2bc8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2bcc:	1580      	asrs	r0, r0, #22
    2bce:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2bd2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2bd6:	4915      	ldr	r1, [pc, #84]	; (2c2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    2bd8:	05c0      	lsls	r0, r0, #23
    2bda:	6008      	str	r0, [r1, #0]
    2bdc:	2004      	movs	r0, #4
    2bde:	60bd      	str	r5, [r7, #8]
    2be0:	7070      	strb	r0, [r6, #1]
    2be2:	f886 8000 	strb.w	r8, [r6]
    2be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bea:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2bee:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    2bf2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2bf6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    2bfa:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2bfe:	e799      	b.n	2b34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    2c00:	2000      	movs	r0, #0
    2c02:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2c06:	f240 2193 	movw	r1, #659	; 0x293
    2c0a:	206c      	movs	r0, #108	; 0x6c
    2c0c:	f000 fe64 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c10:	2000004a 	.word	0x2000004a
    2c14:	4001f508 	.word	0x4001f508
    2c18:	fffbfffd 	.word	0xfffbfffd
    2c1c:	4000b000 	.word	0x4000b000
    2c20:	fffafffd 	.word	0xfffafffd
    2c24:	4000b504 	.word	0x4000b504
    2c28:	40008000 	.word	0x40008000
    2c2c:	4001f504 	.word	0x4001f504

00002c30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2c30:	b570      	push	{r4, r5, r6, lr}
    2c32:	4c2a      	ldr	r4, [pc, #168]	; (2cdc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    2c34:	68a1      	ldr	r1, [r4, #8]
    2c36:	4281      	cmp	r1, r0
    2c38:	bf14      	ite	ne
    2c3a:	2201      	movne	r2, #1
    2c3c:	2200      	moveq	r2, #0
    2c3e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 2ce0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    2c42:	f89c 5000 	ldrb.w	r5, [ip]
    2c46:	2d02      	cmp	r5, #2
    2c48:	d002      	beq.n	2c50 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2c4a:	2a00      	cmp	r2, #0
    2c4c:	d034      	beq.n	2cb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    2c4e:	e002      	b.n	2c56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2c50:	2a00      	cmp	r2, #0
    2c52:	bf08      	it	eq
    2c54:	bd70      	popeq	{r4, r5, r6, pc}
    2c56:	7862      	ldrb	r2, [r4, #1]
    2c58:	b39a      	cbz	r2, 2cc2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2c5a:	4b22      	ldr	r3, [pc, #136]	; (2ce4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c60:	601a      	str	r2, [r3, #0]
    2c62:	4b21      	ldr	r3, [pc, #132]	; (2ce8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    2c64:	1392      	asrs	r2, r2, #14
    2c66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2c6a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    2c6e:	2200      	movs	r2, #0
    2c70:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    2c74:	4a1d      	ldr	r2, [pc, #116]	; (2cec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2c76:	6816      	ldr	r6, [r2, #0]
    2c78:	1b86      	subs	r6, r0, r6
    2c7a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    2c7e:	2e02      	cmp	r6, #2
    2c80:	d324      	bcc.n	2ccc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2c82:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    2c86:	d821      	bhi.n	2ccc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2c88:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2c8c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    2c90:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    2c94:	b12d      	cbz	r5, 2ca2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    2c96:	6813      	ldr	r3, [r2, #0]
    2c98:	1acb      	subs	r3, r1, r3
    2c9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c9e:	2b02      	cmp	r3, #2
    2ca0:	d3f9      	bcc.n	2c96 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    2ca2:	4b13      	ldr	r3, [pc, #76]	; (2cf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2ca4:	2102      	movs	r1, #2
    2ca6:	074a      	lsls	r2, r1, #29
    2ca8:	601a      	str	r2, [r3, #0]
    2caa:	60a0      	str	r0, [r4, #8]
    2cac:	2004      	movs	r0, #4
    2cae:	f88c 0001 	strb.w	r0, [ip, #1]
    2cb2:	f88c 1000 	strb.w	r1, [ip]
    2cb6:	bd70      	pop	{r4, r5, r6, pc}
    2cb8:	f240 21a1 	movw	r1, #673	; 0x2a1
    2cbc:	206c      	movs	r0, #108	; 0x6c
    2cbe:	f000 fe0b 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cc2:	f240 21a5 	movw	r1, #677	; 0x2a5
    2cc6:	206c      	movs	r0, #108	; 0x6c
    2cc8:	f000 fe06 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ccc:	2000      	movs	r0, #0
    2cce:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2cd2:	f240 21b1 	movw	r1, #689	; 0x2b1
    2cd6:	206c      	movs	r0, #108	; 0x6c
    2cd8:	f000 fdfe 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cdc:	20000048 	.word	0x20000048
    2ce0:	2000004a 	.word	0x2000004a
    2ce4:	4001f508 	.word	0x4001f508
    2ce8:	4000b000 	.word	0x4000b000
    2cec:	4000b504 	.word	0x4000b504
    2cf0:	4001f504 	.word	0x4001f504

00002cf4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2cf4:	4801      	ldr	r0, [pc, #4]	; (2cfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2cf6:	6880      	ldr	r0, [r0, #8]
    2cf8:	4770      	bx	lr
    2cfa:	0000      	.short	0x0000
    2cfc:	20000048 	.word	0x20000048

00002d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d04:	4836      	ldr	r0, [pc, #216]	; (2de0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2d06:	4a35      	ldr	r2, [pc, #212]	; (2ddc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2d08:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2d0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 2de4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    2d10:	1d03      	adds	r3, r0, #4
    2d12:	2100      	movs	r1, #0
    2d14:	f89c 4000 	ldrb.w	r4, [ip]
    2d18:	b184      	cbz	r4, 2d3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    2d1a:	4a33      	ldr	r2, [pc, #204]	; (2de8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2d1c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2d20:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2d24:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2d28:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    2d2c:	2301      	movs	r3, #1
    2d2e:	2a00      	cmp	r2, #0
    2d30:	bf04      	itt	eq
    2d32:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    2d36:	2800      	cmpeq	r0, #0
    2d38:	d111      	bne.n	2d5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    2d3a:	e00a      	b.n	2d52 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    2d3c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2d40:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2d44:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2d48:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2d4c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2d50:	e7ea      	b.n	2d28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2d52:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2d56:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2d5a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    2d5e:	2c02      	cmp	r4, #2
    2d60:	d004      	beq.n	2d6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    2d62:	f240 21bd 	movw	r1, #701	; 0x2bd
    2d66:	206c      	movs	r0, #108	; 0x6c
    2d68:	f000 fdb6 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d6c:	4e1f      	ldr	r6, [pc, #124]	; (2dec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2d6e:	6830      	ldr	r0, [r6, #0]
    2d70:	4c1f      	ldr	r4, [pc, #124]	; (2df0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2d72:	1cc0      	adds	r0, r0, #3
    2d74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d78:	68a2      	ldr	r2, [r4, #8]
    2d7a:	4d1e      	ldr	r5, [pc, #120]	; (2df4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2d7c:	4290      	cmp	r0, r2
    2d7e:	d00b      	beq.n	2d98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2d80:	6837      	ldr	r7, [r6, #0]
    2d82:	1bd7      	subs	r7, r2, r7
    2d84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2d88:	2f04      	cmp	r7, #4
    2d8a:	d305      	bcc.n	2d98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2d8c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    2d90:	d802      	bhi.n	2d98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2d92:	f7ff fead 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d96:	e01b      	b.n	2dd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2d98:	6830      	ldr	r0, [r6, #0]
    2d9a:	1a10      	subs	r0, r2, r0
    2d9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2da0:	2802      	cmp	r0, #2
    2da2:	d313      	bcc.n	2dcc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2da4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2da8:	d810      	bhi.n	2dcc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2daa:	4a13      	ldr	r2, [pc, #76]	; (2df8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    2dac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2db0:	6010      	str	r0, [r2, #0]
    2db2:	6063      	str	r3, [r4, #4]
    2db4:	7021      	strb	r1, [r4, #0]
    2db6:	606b      	str	r3, [r5, #4]
    2db8:	60eb      	str	r3, [r5, #12]
    2dba:	0040      	lsls	r0, r0, #1
    2dbc:	1f11      	subs	r1, r2, #4
    2dbe:	6008      	str	r0, [r1, #0]
    2dc0:	2004      	movs	r0, #4
    2dc2:	f88c 0001 	strb.w	r0, [ip, #1]
    2dc6:	f88c 3000 	strb.w	r3, [ip]
    2dca:	e001      	b.n	2dd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2dcc:	6063      	str	r3, [r4, #4]
    2dce:	7021      	strb	r1, [r4, #0]
    2dd0:	6860      	ldr	r0, [r4, #4]
    2dd2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dda:	0000      	.short	0x0000
    2ddc:	fffbfffd 	.word	0xfffbfffd
    2de0:	4000b000 	.word	0x4000b000
    2de4:	2000004a 	.word	0x2000004a
    2de8:	fffafffd 	.word	0xfffafffd
    2dec:	4000b504 	.word	0x4000b504
    2df0:	20000048 	.word	0x20000048
    2df4:	40008000 	.word	0x40008000
    2df8:	4001f508 	.word	0x4001f508

00002dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e00:	4a54      	ldr	r2, [pc, #336]	; (2f54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    2e02:	2500      	movs	r5, #0
    2e04:	2401      	movs	r4, #1
    2e06:	f892 c000 	ldrb.w	ip, [r2]
    2e0a:	7853      	ldrb	r3, [r2, #1]
    2e0c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    2e10:	2807      	cmp	r0, #7
    2e12:	d27d      	bcs.n	2f10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2e14:	e8df f000 	tbb	[pc, r0]
    2e18:	04040404 	.word	0x04040404
    2e1c:	00585858 	.word	0x00585858
    2e20:	4a4d      	ldr	r2, [pc, #308]	; (2f58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    2e22:	6897      	ldr	r7, [r2, #8]
    2e24:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    2e28:	bf04      	itt	eq
    2e2a:	7852      	ldrbeq	r2, [r2, #1]
    2e2c:	2a00      	cmpeq	r2, #0
    2e2e:	d003      	beq.n	2e38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2e30:	f1bc 0f02 	cmp.w	ip, #2
    2e34:	d005      	beq.n	2e42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2e36:	e026      	b.n	2e86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2e38:	f240 314d 	movw	r1, #845	; 0x34d
    2e3c:	206c      	movs	r0, #108	; 0x6c
    2e3e:	f000 fd4b 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e42:	1f1a      	subs	r2, r3, #4
    2e44:	b2d2      	uxtb	r2, r2
    2e46:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    2e4a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    2e4e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    2e52:	2200      	movs	r2, #0
    2e54:	f1bc 0f01 	cmp.w	ip, #1
    2e58:	d003      	beq.n	2e62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    2e5a:	f1bc 0f02 	cmp.w	ip, #2
    2e5e:	d008      	beq.n	2e72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    2e60:	e00e      	b.n	2e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2e62:	2b04      	cmp	r3, #4
    2e64:	bf24      	itt	cs
    2e66:	6837      	ldrcs	r7, [r6, #0]
    2e68:	2f00      	cmpcs	r7, #0
    2e6a:	bf08      	it	eq
    2e6c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    2e70:	e006      	b.n	2e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2e72:	2b04      	cmp	r3, #4
    2e74:	bf24      	itt	cs
    2e76:	6837      	ldrcs	r7, [r6, #0]
    2e78:	2f00      	cmpcs	r7, #0
    2e7a:	bf08      	it	eq
    2e7c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    2e80:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    2e84:	d1e5      	bne.n	2e52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    2e86:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 2f5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    2e8a:	f100 0210 	add.w	r2, r0, #16
    2e8e:	fa04 f202 	lsl.w	r2, r4, r2
    2e92:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2e96:	f04f 0340 	mov.w	r3, #64	; 0x40
    2e9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2e9e:	b2db      	uxtb	r3, r3
    2ea0:	4463      	add	r3, ip
    2ea2:	601c      	str	r4, [r3, #0]
    2ea4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2ea8:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    2eac:	eba1 0303 	sub.w	r3, r1, r3
    2eb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2eb4:	2b03      	cmp	r3, #3
    2eb6:	bf26      	itte	cs
    2eb8:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2ebc:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    2ec0:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    2ec4:	d237      	bcs.n	2f36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    2ec6:	e03c      	b.n	2f42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    2ec8:	f1bc 0f00 	cmp.w	ip, #0
    2ecc:	d006      	beq.n	2edc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2ece:	4283      	cmp	r3, r0
    2ed0:	d104      	bne.n	2edc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2ed2:	f240 316d 	movw	r1, #877	; 0x36d
    2ed6:	206c      	movs	r0, #108	; 0x6c
    2ed8:	f000 fcfe 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2edc:	1f02      	subs	r2, r0, #4
    2ede:	b2d3      	uxtb	r3, r2
    2ee0:	2b03      	cmp	r3, #3
    2ee2:	d304      	bcc.n	2eee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    2ee4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    2ee8:	206c      	movs	r0, #108	; 0x6c
    2eea:	f000 fcf5 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eee:	f8df c070 	ldr.w	ip, [pc, #112]	; 2f60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    2ef2:	f103 0210 	add.w	r2, r3, #16
    2ef6:	fa04 f202 	lsl.w	r2, r4, r2
    2efa:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2efe:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    2f02:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2f06:	f84c 5003 	str.w	r5, [ip, r3]
    2f0a:	4b16      	ldr	r3, [pc, #88]	; (2f64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	e000      	b.n	2f12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2f10:	e01a      	b.n	2f48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    2f12:	1f00      	subs	r0, r0, #4
    2f14:	1acb      	subs	r3, r1, r3
    2f16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2f1a:	b2c0      	uxtb	r0, r0
    2f1c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2f20:	2b02      	cmp	r3, #2
    2f22:	d30b      	bcc.n	2f3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    2f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2f28:	d808      	bhi.n	2f3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    2f2a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f2e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    2f32:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    2f36:	2001      	movs	r0, #1
    2f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f3c:	2100      	movs	r1, #0
    2f3e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f42:	2000      	movs	r0, #0
    2f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f48:	f240 3171 	movw	r1, #881	; 0x371
    2f4c:	206c      	movs	r0, #108	; 0x6c
    2f4e:	f000 fcc3 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f52:	0000      	.short	0x0000
    2f54:	2000004a 	.word	0x2000004a
    2f58:	20000048 	.word	0x20000048
    2f5c:	40008000 	.word	0x40008000
    2f60:	4000b000 	.word	0x4000b000
    2f64:	4000b504 	.word	0x4000b504

00002f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f6c:	2601      	movs	r6, #1
    2f6e:	2700      	movs	r7, #0
    2f70:	f44f 78a0 	mov.w	r8, #320	; 0x140
    2f74:	2807      	cmp	r0, #7
    2f76:	d251      	bcs.n	301c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    2f78:	e8df f000 	tbb	[pc, r0]
    2f7c:	04040404 	.word	0x04040404
    2f80:	00191919 	.word	0x00191919
    2f84:	f100 0110 	add.w	r1, r0, #16
    2f88:	fa06 f201 	lsl.w	r2, r6, r1
    2f8c:	4926      	ldr	r1, [pc, #152]	; (3028 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2f92:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2f96:	2200      	movs	r2, #0
    2f98:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2f9c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    2fa0:	508f      	str	r7, [r1, r2]
    2fa2:	4922      	ldr	r1, [pc, #136]	; (302c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2fa4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2fa8:	9000      	str	r0, [sp, #0]
    2faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fae:	4d20      	ldr	r5, [pc, #128]	; (3030 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2fb0:	1f01      	subs	r1, r0, #4
    2fb2:	b2cc      	uxtb	r4, r1
    2fb4:	7829      	ldrb	r1, [r5, #0]
    2fb6:	b179      	cbz	r1, 2fd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2fb8:	786a      	ldrb	r2, [r5, #1]
    2fba:	4282      	cmp	r2, r0
    2fbc:	d10c      	bne.n	2fd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2fbe:	4a1d      	ldr	r2, [pc, #116]	; (3034 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2fc0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2fc4:	6010      	str	r0, [r2, #0]
    2fc6:	2901      	cmp	r1, #1
    2fc8:	bf08      	it	eq
    2fca:	f7ff fd39 	bleq	2a40 <MPSL_IRQ_TIMER0_Handler+0x100>
    2fce:	702f      	strb	r7, [r5, #0]
    2fd0:	4919      	ldr	r1, [pc, #100]	; (3038 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2fd2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2fd6:	6088      	str	r0, [r1, #8]
    2fd8:	4918      	ldr	r1, [pc, #96]	; (303c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2fda:	f104 0010 	add.w	r0, r4, #16
    2fde:	fa06 f000 	lsl.w	r0, r6, r0
    2fe2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2fe6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    2fea:	00a0      	lsls	r0, r4, #2
    2fec:	4408      	add	r0, r1
    2fee:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2ff2:	4a13      	ldr	r2, [pc, #76]	; (3040 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2ff4:	6812      	ldr	r2, [r2, #0]
    2ff6:	1a80      	subs	r0, r0, r2
    2ff8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ffc:	2802      	cmp	r0, #2
    2ffe:	d307      	bcc.n	3010 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3000:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3004:	2000      	movs	r0, #0
    3006:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    300a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    300e:	500f      	str	r7, [r1, r0]
    3010:	480c      	ldr	r0, [pc, #48]	; (3044 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3012:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3016:	9000      	str	r0, [sp, #0]
    3018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    301c:	f240 31f5 	movw	r1, #1013	; 0x3f5
    3020:	206c      	movs	r0, #108	; 0x6c
    3022:	f000 fc59 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3026:	0000      	.short	0x0000
    3028:	40008000 	.word	0x40008000
    302c:	40008140 	.word	0x40008140
    3030:	2000004a 	.word	0x2000004a
    3034:	4001f508 	.word	0x4001f508
    3038:	20000048 	.word	0x20000048
    303c:	4000b000 	.word	0x4000b000
    3040:	4000b504 	.word	0x4000b504
    3044:	4000b140 	.word	0x4000b140

00003048 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3048:	4825      	ldr	r0, [pc, #148]	; (30e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    304a:	4a24      	ldr	r2, [pc, #144]	; (30dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    304c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3050:	4924      	ldr	r1, [pc, #144]	; (30e4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3052:	1d03      	adds	r3, r0, #4
    3054:	f891 c000 	ldrb.w	ip, [r1]
    3058:	2100      	movs	r1, #0
    305a:	f1bc 0f00 	cmp.w	ip, #0
    305e:	d010      	beq.n	3082 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3060:	4a21      	ldr	r2, [pc, #132]	; (30e8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3062:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3066:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    306a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    306e:	bf00      	nop
    3070:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3074:	2a00      	cmp	r2, #0
    3076:	bf04      	itt	eq
    3078:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    307c:	2800      	cmpeq	r0, #0
    307e:	d111      	bne.n	30a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3080:	e00a      	b.n	3098 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3082:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3086:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    308a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    308e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3092:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3096:	e7eb      	b.n	3070 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3098:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    309c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    30a0:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    30a4:	4811      	ldr	r0, [pc, #68]	; (30ec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    30a6:	f04f 32ff 	mov.w	r2, #4294967295
    30aa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    30ae:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    30b2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    30b6:	f100 0204 	add.w	r2, r0, #4
    30ba:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    30be:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    30c2:	f102 0204 	add.w	r2, r2, #4
    30c6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    30ca:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    30ce:	f102 0204 	add.w	r2, r2, #4
    30d2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    30d6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    30da:	4770      	bx	lr
    30dc:	fffbfffd 	.word	0xfffbfffd
    30e0:	4000b000 	.word	0x4000b000
    30e4:	2000004a 	.word	0x2000004a
    30e8:	fffafffd 	.word	0xfffafffd
    30ec:	40008000 	.word	0x40008000

000030f0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    30f0:	b510      	push	{r4, lr}
    30f2:	2807      	cmp	r0, #7
    30f4:	d20d      	bcs.n	3112 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    30f6:	e8df f000 	tbb	[pc, r0]
    30fa:	0404      	.short	0x0404
    30fc:	06060404 	.word	0x06060404
    3100:	0006      	.short	0x0006
    3102:	4906      	ldr	r1, [pc, #24]	; (311c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3104:	e002      	b.n	310c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3106:	1f00      	subs	r0, r0, #4
    3108:	4905      	ldr	r1, [pc, #20]	; (3120 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    310a:	b2c0      	uxtb	r0, r0
    310c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3110:	bd10      	pop	{r4, pc}
    3112:	f240 3195 	movw	r1, #917	; 0x395
    3116:	206c      	movs	r0, #108	; 0x6c
    3118:	f000 fbde 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    311c:	40008140 	.word	0x40008140
    3120:	4000b140 	.word	0x4000b140

00003124 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3124:	b510      	push	{r4, lr}
    3126:	2807      	cmp	r0, #7
    3128:	d20d      	bcs.n	3146 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    312a:	e8df f000 	tbb	[pc, r0]
    312e:	0404      	.short	0x0404
    3130:	06060404 	.word	0x06060404
    3134:	0006      	.short	0x0006
    3136:	4906      	ldr	r1, [pc, #24]	; (3150 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3138:	e002      	b.n	3140 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    313a:	1f00      	subs	r0, r0, #4
    313c:	4905      	ldr	r1, [pc, #20]	; (3154 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    313e:	b2c0      	uxtb	r0, r0
    3140:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3144:	bd10      	pop	{r4, pc}
    3146:	f240 3195 	movw	r1, #917	; 0x395
    314a:	206c      	movs	r0, #108	; 0x6c
    314c:	f000 fbc4 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3150:	40008140 	.word	0x40008140
    3154:	4000b140 	.word	0x4000b140

00003158 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3158:	b570      	push	{r4, r5, r6, lr}
    315a:	481f      	ldr	r0, [pc, #124]	; (31d8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    315c:	2400      	movs	r4, #0
    315e:	2104      	movs	r1, #4
    3160:	7004      	strb	r4, [r0, #0]
    3162:	1e80      	subs	r0, r0, #2
    3164:	7001      	strb	r1, [r0, #0]
    3166:	0589      	lsls	r1, r1, #22
    3168:	60c4      	str	r4, [r0, #12]
    316a:	6081      	str	r1, [r0, #8]
    316c:	f7ff fc68 	bl	2a40 <MPSL_IRQ_TIMER0_Handler+0x100>
    3170:	2501      	movs	r5, #1
    3172:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3176:	02eb      	lsls	r3, r5, #11
    3178:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    317c:	f3bf 8f4f 	dsb	sy
    3180:	f3bf 8f6f 	isb	sy
    3184:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3188:	4814      	ldr	r0, [pc, #80]	; (31dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    318a:	6045      	str	r5, [r0, #4]
    318c:	6085      	str	r5, [r0, #8]
    318e:	4914      	ldr	r1, [pc, #80]	; (31e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3190:	680a      	ldr	r2, [r1, #0]
    3192:	2a00      	cmp	r2, #0
    3194:	d1fc      	bne.n	3190 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3196:	1e51      	subs	r1, r2, #1
    3198:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    319c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    31a0:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    31a4:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    31a8:	490e      	ldr	r1, [pc, #56]	; (31e4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    31aa:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31ae:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    31b2:	1d09      	adds	r1, r1, #4
    31b4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31b8:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    31bc:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    31c0:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    31c4:	6005      	str	r5, [r0, #0]
    31c6:	f44f 7182 	mov.w	r1, #260	; 0x104
    31ca:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    31ce:	2102      	movs	r1, #2
    31d0:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    31d4:	bd70      	pop	{r4, r5, r6, pc}
    31d6:	0000      	.short	0x0000
    31d8:	2000004a 	.word	0x2000004a
    31dc:	4000b000 	.word	0x4000b000
    31e0:	4000b504 	.word	0x4000b504
    31e4:	4000b004 	.word	0x4000b004

000031e8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    31e8:	4808      	ldr	r0, [pc, #32]	; (320c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    31ea:	f990 0000 	ldrsb.w	r0, [r0]
    31ee:	2800      	cmp	r0, #0
    31f0:	bfb8      	it	lt
    31f2:	4770      	bxlt	lr
    31f4:	f000 011f 	and.w	r1, r0, #31
    31f8:	2201      	movs	r2, #1
    31fa:	fa02 f101 	lsl.w	r1, r2, r1
    31fe:	0940      	lsrs	r0, r0, #5
    3200:	0080      	lsls	r0, r0, #2
    3202:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3206:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    320a:	4770      	bx	lr
    320c:	20000204 	.word	0x20000204

00003210 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3210:	4803      	ldr	r0, [pc, #12]	; (3220 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3212:	7800      	ldrb	r0, [r0, #0]
    3214:	2803      	cmp	r0, #3
    3216:	bf0c      	ite	eq
    3218:	2001      	moveq	r0, #1
    321a:	2000      	movne	r0, #0
    321c:	4770      	bx	lr
    321e:	0000      	.short	0x0000
    3220:	200001f4 	.word	0x200001f4

00003224 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3224:	4801      	ldr	r0, [pc, #4]	; (322c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3226:	8840      	ldrh	r0, [r0, #2]
    3228:	4770      	bx	lr
    322a:	0000      	.short	0x0000
    322c:	200001f4 	.word	0x200001f4

00003230 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3230:	4803      	ldr	r0, [pc, #12]	; (3240 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3232:	7800      	ldrb	r0, [r0, #0]
    3234:	2802      	cmp	r0, #2
    3236:	bf16      	itet	ne
    3238:	2803      	cmpne	r0, #3
    323a:	2001      	moveq	r0, #1
    323c:	2000      	movne	r0, #0
    323e:	4770      	bx	lr
    3240:	200001f4 	.word	0x200001f4

00003244 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3244:	4802      	ldr	r0, [pc, #8]	; (3250 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3246:	2100      	movs	r1, #0
    3248:	7001      	strb	r1, [r0, #0]
    324a:	8041      	strh	r1, [r0, #2]
    324c:	4770      	bx	lr
    324e:	0000      	.short	0x0000
    3250:	200001f4 	.word	0x200001f4

00003254 <MPSL_IRQ_CLOCK_Handler>:
    3254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3258:	4c16      	ldr	r4, [pc, #88]	; (32b4 <MPSL_IRQ_CLOCK_Handler+0x60>)
    325a:	7a60      	ldrb	r0, [r4, #9]
    325c:	2800      	cmp	r0, #0
    325e:	d027      	beq.n	32b0 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3260:	f44f 7180 	mov.w	r1, #256	; 0x100
    3264:	058d      	lsls	r5, r1, #22
    3266:	4628      	mov	r0, r5
    3268:	f009 fe05 	bl	ce76 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    326c:	4680      	mov	r8, r0
    326e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3272:	4628      	mov	r0, r5
    3274:	f009 fdff 	bl	ce76 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3278:	2600      	movs	r6, #0
    327a:	4607      	mov	r7, r0
    327c:	f1b8 0f00 	cmp.w	r8, #0
    3280:	d009      	beq.n	3296 <MPSL_IRQ_CLOCK_Handler+0x42>
    3282:	2001      	movs	r0, #1
    3284:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3288:	7920      	ldrb	r0, [r4, #4]
    328a:	b120      	cbz	r0, 3296 <MPSL_IRQ_CLOCK_Handler+0x42>
    328c:	7126      	strb	r6, [r4, #4]
    328e:	69e0      	ldr	r0, [r4, #28]
    3290:	b108      	cbz	r0, 3296 <MPSL_IRQ_CLOCK_Handler+0x42>
    3292:	4780      	blx	r0
    3294:	61e6      	str	r6, [r4, #28]
    3296:	b137      	cbz	r7, 32a6 <MPSL_IRQ_CLOCK_Handler+0x52>
    3298:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    329c:	2002      	movs	r0, #2
    329e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    32a2:	f000 fa4d 	bl	3740 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    32a6:	4640      	mov	r0, r8
    32a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32ac:	f000 b858 	b.w	3360 <MPSL_IRQ_CLOCK_Handler+0x10c>
    32b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32b4:	20000058 	.word	0x20000058
    32b8:	b510      	push	{r4, lr}
    32ba:	f009 fe86 	bl	cfca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    32be:	b930      	cbnz	r0, 32ce <MPSL_IRQ_CLOCK_Handler+0x7a>
    32c0:	f009 fea4 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    32c4:	b918      	cbnz	r0, 32ce <MPSL_IRQ_CLOCK_Handler+0x7a>
    32c6:	f009 fed7 	bl	d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    32ca:	2800      	cmp	r0, #0
    32cc:	d002      	beq.n	32d4 <MPSL_IRQ_CLOCK_Handler+0x80>
    32ce:	4902      	ldr	r1, [pc, #8]	; (32d8 <MPSL_IRQ_CLOCK_Handler+0x84>)
    32d0:	2002      	movs	r0, #2
    32d2:	6008      	str	r0, [r1, #0]
    32d4:	bd10      	pop	{r4, pc}
    32d6:	0000      	.short	0x0000
    32d8:	40000c34 	.word	0x40000c34
    32dc:	b570      	push	{r4, r5, r6, lr}
    32de:	f000 f991 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32e2:	f000 fa81 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32e6:	4c09      	ldr	r4, [pc, #36]	; (330c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    32e8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    32ec:	b130      	cbz	r0, 32fc <MPSL_IRQ_CLOCK_Handler+0xa8>
    32ee:	f7ff ffe3 	bl	32b8 <MPSL_IRQ_CLOCK_Handler+0x64>
    32f2:	2001      	movs	r0, #1
    32f4:	6128      	str	r0, [r5, #16]
    32f6:	2004      	movs	r0, #4
    32f8:	72a0      	strb	r0, [r4, #10]
    32fa:	e004      	b.n	3306 <MPSL_IRQ_CLOCK_Handler+0xb2>
    32fc:	2003      	movs	r0, #3
    32fe:	72a0      	strb	r0, [r4, #10]
    3300:	2001      	movs	r0, #1
    3302:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3306:	2000      	movs	r0, #0
    3308:	71e0      	strb	r0, [r4, #7]
    330a:	bd70      	pop	{r4, r5, r6, pc}
    330c:	20000058 	.word	0x20000058
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	4c12      	ldr	r4, [pc, #72]	; (335c <MPSL_IRQ_CLOCK_Handler+0x108>)
    3314:	79a0      	ldrb	r0, [r4, #6]
    3316:	b1e0      	cbz	r0, 3352 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3318:	79e1      	ldrb	r1, [r4, #7]
    331a:	1e40      	subs	r0, r0, #1
    331c:	4281      	cmp	r1, r0
    331e:	da18      	bge.n	3352 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3320:	f000 fa62 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3324:	4605      	mov	r5, r0
    3326:	f000 fb4b 	bl	39c0 <mpsl_temperature_get>
    332a:	79a1      	ldrb	r1, [r4, #6]
    332c:	2901      	cmp	r1, #1
    332e:	d902      	bls.n	3336 <MPSL_IRQ_CLOCK_Handler+0xe2>
    3330:	79e1      	ldrb	r1, [r4, #7]
    3332:	1c49      	adds	r1, r1, #1
    3334:	71e1      	strb	r1, [r4, #7]
    3336:	b10d      	cbz	r5, 333c <MPSL_IRQ_CLOCK_Handler+0xe8>
    3338:	6961      	ldr	r1, [r4, #20]
    333a:	e000      	b.n	333e <MPSL_IRQ_CLOCK_Handler+0xea>
    333c:	6921      	ldr	r1, [r4, #16]
    333e:	1a41      	subs	r1, r0, r1
    3340:	2902      	cmp	r1, #2
    3342:	da02      	bge.n	334a <MPSL_IRQ_CLOCK_Handler+0xf6>
    3344:	f111 0f02 	cmn.w	r1, #2
    3348:	dc07      	bgt.n	335a <MPSL_IRQ_CLOCK_Handler+0x106>
    334a:	b10d      	cbz	r5, 3350 <MPSL_IRQ_CLOCK_Handler+0xfc>
    334c:	6160      	str	r0, [r4, #20]
    334e:	e000      	b.n	3352 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3350:	6120      	str	r0, [r4, #16]
    3352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3356:	f7ff bfc1 	b.w	32dc <MPSL_IRQ_CLOCK_Handler+0x88>
    335a:	bd70      	pop	{r4, r5, r6, pc}
    335c:	20000058 	.word	0x20000058
    3360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3364:	4606      	mov	r6, r0
    3366:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    336a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    336e:	4628      	mov	r0, r5
    3370:	f009 fd81 	bl	ce76 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3374:	4680      	mov	r8, r0
    3376:	f44f 7188 	mov.w	r1, #272	; 0x110
    337a:	4628      	mov	r0, r5
    337c:	f009 fd7b 	bl	ce76 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3380:	4c27      	ldr	r4, [pc, #156]	; (3420 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3382:	4682      	mov	sl, r0
    3384:	7827      	ldrb	r7, [r4, #0]
    3386:	f104 0008 	add.w	r0, r4, #8
    338a:	f009 fde8 	bl	cf5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    338e:	b110      	cbz	r0, 3396 <MPSL_IRQ_CLOCK_Handler+0x142>
    3390:	f240 11b9 	movw	r1, #441	; 0x1b9
    3394:	e016      	b.n	33c4 <MPSL_IRQ_CLOCK_Handler+0x170>
    3396:	f04f 0901 	mov.w	r9, #1
    339a:	b146      	cbz	r6, 33ae <MPSL_IRQ_CLOCK_Handler+0x15a>
    339c:	7aa0      	ldrb	r0, [r4, #10]
    339e:	2803      	cmp	r0, #3
    33a0:	d105      	bne.n	33ae <MPSL_IRQ_CLOCK_Handler+0x15a>
    33a2:	2004      	movs	r0, #4
    33a4:	72a0      	strb	r0, [r4, #10]
    33a6:	f7ff ff87 	bl	32b8 <MPSL_IRQ_CLOCK_Handler+0x64>
    33aa:	f8c5 9010 	str.w	r9, [r5, #16]
    33ae:	2600      	movs	r6, #0
    33b0:	f1b8 0f00 	cmp.w	r8, #0
    33b4:	d018      	beq.n	33e8 <MPSL_IRQ_CLOCK_Handler+0x194>
    33b6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    33ba:	7aa0      	ldrb	r0, [r4, #10]
    33bc:	2804      	cmp	r0, #4
    33be:	d004      	beq.n	33ca <MPSL_IRQ_CLOCK_Handler+0x176>
    33c0:	f240 11cb 	movw	r1, #459	; 0x1cb
    33c4:	206d      	movs	r0, #109	; 0x6d
    33c6:	f000 fa87 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ca:	f009 fdfe 	bl	cfca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    33ce:	b928      	cbnz	r0, 33dc <MPSL_IRQ_CLOCK_Handler+0x188>
    33d0:	f009 fe1c 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33d4:	b910      	cbnz	r0, 33dc <MPSL_IRQ_CLOCK_Handler+0x188>
    33d6:	f009 fe4f 	bl	d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    33da:	b108      	cbz	r0, 33e0 <MPSL_IRQ_CLOCK_Handler+0x18c>
    33dc:	4811      	ldr	r0, [pc, #68]	; (3424 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    33de:	6006      	str	r6, [r0, #0]
    33e0:	2002      	movs	r0, #2
    33e2:	72a0      	strb	r0, [r4, #10]
    33e4:	f000 f8f2 	bl	35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33e8:	f1ba 0f00 	cmp.w	sl, #0
    33ec:	d008      	beq.n	3400 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    33ee:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    33f2:	7aa0      	ldrb	r0, [r4, #10]
    33f4:	2802      	cmp	r0, #2
    33f6:	d101      	bne.n	33fc <MPSL_IRQ_CLOCK_Handler+0x1a8>
    33f8:	f7ff ff8a 	bl	3310 <MPSL_IRQ_CLOCK_Handler+0xbc>
    33fc:	f8c5 9014 	str.w	r9, [r5, #20]
    3400:	b13f      	cbz	r7, 3412 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3402:	7026      	strb	r6, [r4, #0]
    3404:	7aa0      	ldrb	r0, [r4, #10]
    3406:	2802      	cmp	r0, #2
    3408:	d101      	bne.n	340e <MPSL_IRQ_CLOCK_Handler+0x1ba>
    340a:	f7ff ff67 	bl	32dc <MPSL_IRQ_CLOCK_Handler+0x88>
    340e:	f000 f8dd 	bl	35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3416:	4802      	ldr	r0, [pc, #8]	; (3420 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3418:	3008      	adds	r0, #8
    341a:	f009 bdb7 	b.w	cf8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    341e:	0000      	.short	0x0000
    3420:	20000058 	.word	0x20000058
    3424:	40000c34 	.word	0x40000c34
    3428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    342c:	4c5f      	ldr	r4, [pc, #380]	; (35ac <MPSL_IRQ_CLOCK_Handler+0x358>)
    342e:	2700      	movs	r7, #0
    3430:	4606      	mov	r6, r0
    3432:	61a7      	str	r7, [r4, #24]
    3434:	7842      	ldrb	r2, [r0, #1]
    3436:	7881      	ldrb	r1, [r0, #2]
    3438:	7800      	ldrb	r0, [r0, #0]
    343a:	72e0      	strb	r0, [r4, #11]
    343c:	7162      	strb	r2, [r4, #5]
    343e:	71a1      	strb	r1, [r4, #6]
    3440:	71e7      	strb	r7, [r4, #7]
    3442:	f04f 0801 	mov.w	r8, #1
    3446:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    344a:	2805      	cmp	r0, #5
    344c:	d225      	bcs.n	349a <MPSL_IRQ_CLOCK_Handler+0x246>
    344e:	e8df f000 	tbb	[pc, r0]
    3452:	0310      	.short	0x0310
    3454:	00222006 	.word	0x00222006
    3458:	f8c4 8018 	str.w	r8, [r4, #24]
    345c:	e009      	b.n	3472 <MPSL_IRQ_CLOCK_Handler+0x21e>
    345e:	f000 f8d1 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3462:	2101      	movs	r1, #1
    3464:	4628      	mov	r0, r5
    3466:	f009 fd0b 	bl	ce80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    346a:	2800      	cmp	r0, #0
    346c:	d0f9      	beq.n	3462 <MPSL_IRQ_CLOCK_Handler+0x20e>
    346e:	2002      	movs	r0, #2
    3470:	61a0      	str	r0, [r4, #24]
    3472:	f009 fd31 	bl	ced8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3476:	b1b0      	cbz	r0, 34a6 <MPSL_IRQ_CLOCK_Handler+0x252>
    3478:	f000 f9d0 	bl	381c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    347c:	7e21      	ldrb	r1, [r4, #24]
    347e:	f001 0103 	and.w	r1, r1, #3
    3482:	4288      	cmp	r0, r1
    3484:	d10f      	bne.n	34a6 <MPSL_IRQ_CLOCK_Handler+0x252>
    3486:	79b0      	ldrb	r0, [r6, #6]
    3488:	b150      	cbz	r0, 34a0 <MPSL_IRQ_CLOCK_Handler+0x24c>
    348a:	2002      	movs	r0, #2
    348c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3490:	e070      	b.n	3574 <MPSL_IRQ_CLOCK_Handler+0x320>
    3492:	4847      	ldr	r0, [pc, #284]	; (35b0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3494:	e7ec      	b.n	3470 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3496:	4847      	ldr	r0, [pc, #284]	; (35b4 <MPSL_IRQ_CLOCK_Handler+0x360>)
    3498:	e7ea      	b.n	3470 <MPSL_IRQ_CLOCK_Handler+0x21c>
    349a:	f240 313a 	movw	r1, #826	; 0x33a
    349e:	e04d      	b.n	353c <MPSL_IRQ_CLOCK_Handler+0x2e8>
    34a0:	f000 f990 	bl	37c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    34a4:	e066      	b.n	3574 <MPSL_IRQ_CLOCK_Handler+0x320>
    34a6:	f8c5 800c 	str.w	r8, [r5, #12]
    34aa:	f44f 7a82 	mov.w	sl, #260	; 0x104
    34ae:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    34b2:	69a0      	ldr	r0, [r4, #24]
    34b4:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    34b8:	f009 fd73 	bl	cfa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    34bc:	b940      	cbnz	r0, 34d0 <MPSL_IRQ_CLOCK_Handler+0x27c>
    34be:	f009 fd7a 	bl	cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    34c2:	b928      	cbnz	r0, 34d0 <MPSL_IRQ_CLOCK_Handler+0x27c>
    34c4:	f009 fd8e 	bl	cfe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    34c8:	b910      	cbnz	r0, 34d0 <MPSL_IRQ_CLOCK_Handler+0x27c>
    34ca:	f009 fd9f 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    34ce:	b138      	cbz	r0, 34e0 <MPSL_IRQ_CLOCK_Handler+0x28c>
    34d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    34d4:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    34d8:	4937      	ldr	r1, [pc, #220]	; (35b8 <MPSL_IRQ_CLOCK_Handler+0x364>)
    34da:	f3c0 3042 	ubfx	r0, r0, #13, #3
    34de:	6008      	str	r0, [r1, #0]
    34e0:	f009 fd5f 	bl	cfa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    34e4:	b940      	cbnz	r0, 34f8 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    34e6:	f009 fd66 	bl	cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    34ea:	b928      	cbnz	r0, 34f8 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    34ec:	f009 fd7a 	bl	cfe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    34f0:	b910      	cbnz	r0, 34f8 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    34f2:	f009 fd8b 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    34f6:	b118      	cbz	r0, 3500 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    34f8:	492f      	ldr	r1, [pc, #188]	; (35b8 <MPSL_IRQ_CLOCK_Handler+0x364>)
    34fa:	3110      	adds	r1, #16
    34fc:	f8c1 8000 	str.w	r8, [r1]
    3500:	f8c5 8008 	str.w	r8, [r5, #8]
    3504:	2002      	movs	r0, #2
    3506:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    350a:	79b0      	ldrb	r0, [r6, #6]
    350c:	bb90      	cbnz	r0, 3574 <MPSL_IRQ_CLOCK_Handler+0x320>
    350e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3512:	f010 0f02 	tst.w	r0, #2
    3516:	d00f      	beq.n	3538 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3518:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 35bc <MPSL_IRQ_CLOCK_Handler+0x368>
    351c:	f8d9 1000 	ldr.w	r1, [r9]
    3520:	43c9      	mvns	r1, r1
    3522:	f341 1100 	sbfx	r1, r1, #4, #1
    3526:	f101 0801 	add.w	r8, r1, #1
    352a:	f8d9 1000 	ldr.w	r1, [r9]
    352e:	f041 0110 	orr.w	r1, r1, #16
    3532:	f8c9 1000 	str.w	r1, [r9]
    3536:	e007      	b.n	3548 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    3538:	f240 21fb 	movw	r1, #763	; 0x2fb
    353c:	206d      	movs	r0, #109	; 0x6d
    353e:	f000 f9cb 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3542:	bf00      	nop
    3544:	f000 faf2 	bl	3b2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3548:	4651      	mov	r1, sl
    354a:	4628      	mov	r0, r5
    354c:	f009 fc93 	bl	ce76 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3550:	2800      	cmp	r0, #0
    3552:	d0f7      	beq.n	3544 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3554:	f000 f936 	bl	37c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3558:	f1b8 0f00 	cmp.w	r8, #0
    355c:	d105      	bne.n	356a <MPSL_IRQ_CLOCK_Handler+0x316>
    355e:	f8d9 1000 	ldr.w	r1, [r9]
    3562:	f021 0110 	bic.w	r1, r1, #16
    3566:	f8c9 1000 	str.w	r1, [r9]
    356a:	2002      	movs	r0, #2
    356c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3570:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3574:	79a0      	ldrb	r0, [r4, #6]
    3576:	b170      	cbz	r0, 3596 <MPSL_IRQ_CLOCK_Handler+0x342>
    3578:	7830      	ldrb	r0, [r6, #0]
    357a:	b960      	cbnz	r0, 3596 <MPSL_IRQ_CLOCK_Handler+0x342>
    357c:	f000 f934 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3580:	4606      	mov	r6, r0
    3582:	f000 fa1d 	bl	39c0 <mpsl_temperature_get>
    3586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    358a:	b116      	cbz	r6, 3592 <MPSL_IRQ_CLOCK_Handler+0x33e>
    358c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3590:	e001      	b.n	3596 <MPSL_IRQ_CLOCK_Handler+0x342>
    3592:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3596:	2101      	movs	r1, #1
    3598:	4628      	mov	r0, r5
    359a:	f009 fc71 	bl	ce80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    359e:	b108      	cbz	r0, 35a4 <MPSL_IRQ_CLOCK_Handler+0x350>
    35a0:	f000 f91c 	bl	37dc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35a4:	72a7      	strb	r7, [r4, #10]
    35a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35aa:	0000      	.short	0x0000
    35ac:	20000058 	.word	0x20000058
    35b0:	00020001 	.word	0x00020001
    35b4:	00030001 	.word	0x00030001
    35b8:	4000053c 	.word	0x4000053c
    35bc:	e000ed10 	.word	0xe000ed10

000035c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    35c0:	4801      	ldr	r0, [pc, #4]	; (35c8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    35c2:	89c0      	ldrh	r0, [r0, #14]
    35c4:	4770      	bx	lr
    35c6:	0000      	.short	0x0000
    35c8:	20000058 	.word	0x20000058

000035cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    35cc:	b510      	push	{r4, lr}
    35ce:	f3ef 8410 	mrs	r4, PRIMASK
    35d2:	b672      	cpsid	i
    35d4:	480a      	ldr	r0, [pc, #40]	; (3600 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    35d6:	7841      	ldrb	r1, [r0, #1]
    35d8:	b129      	cbz	r1, 35e6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    35da:	7841      	ldrb	r1, [r0, #1]
    35dc:	1e49      	subs	r1, r1, #1
    35de:	7041      	strb	r1, [r0, #1]
    35e0:	7841      	ldrb	r1, [r0, #1]
    35e2:	b129      	cbz	r1, 35f0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    35e4:	e008      	b.n	35f8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    35e6:	f44f 718e 	mov.w	r1, #284	; 0x11c
    35ea:	206d      	movs	r0, #109	; 0x6d
    35ec:	f000 f974 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35f0:	7880      	ldrb	r0, [r0, #2]
    35f2:	b908      	cbnz	r0, 35f8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    35f4:	f000 f906 	bl	3804 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    35f8:	2c00      	cmp	r4, #0
    35fa:	d100      	bne.n	35fe <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    35fc:	b662      	cpsie	i
    35fe:	bd10      	pop	{r4, pc}
    3600:	20000058 	.word	0x20000058

00003604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3604:	b510      	push	{r4, lr}
    3606:	f3ef 8410 	mrs	r4, PRIMASK
    360a:	b672      	cpsid	i
    360c:	4806      	ldr	r0, [pc, #24]	; (3628 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    360e:	7841      	ldrb	r1, [r0, #1]
    3610:	1c49      	adds	r1, r1, #1
    3612:	7041      	strb	r1, [r0, #1]
    3614:	7840      	ldrb	r0, [r0, #1]
    3616:	2801      	cmp	r0, #1
    3618:	d101      	bne.n	361e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    361a:	f009 fc48 	bl	ceae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    361e:	2c00      	cmp	r4, #0
    3620:	d100      	bne.n	3624 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3622:	b662      	cpsie	i
    3624:	bd10      	pop	{r4, pc}
    3626:	0000      	.short	0x0000
    3628:	20000058 	.word	0x20000058

0000362c <mpsl_clock_hfclk_release>:
    362c:	4805      	ldr	r0, [pc, #20]	; (3644 <mpsl_clock_hfclk_release+0x18>)
    362e:	b510      	push	{r4, lr}
    3630:	78c1      	ldrb	r1, [r0, #3]
    3632:	b121      	cbz	r1, 363e <mpsl_clock_hfclk_release+0x12>
    3634:	2100      	movs	r1, #0
    3636:	7101      	strb	r1, [r0, #4]
    3638:	70c1      	strb	r1, [r0, #3]
    363a:	f7ff ffc7 	bl	35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    363e:	2000      	movs	r0, #0
    3640:	bd10      	pop	{r4, pc}
    3642:	0000      	.short	0x0000
    3644:	20000058 	.word	0x20000058

00003648 <mpsl_clock_hfclk_request>:
    3648:	b570      	push	{r4, r5, r6, lr}
    364a:	4c0c      	ldr	r4, [pc, #48]	; (367c <mpsl_clock_hfclk_request+0x34>)
    364c:	78e1      	ldrb	r1, [r4, #3]
    364e:	b961      	cbnz	r1, 366a <mpsl_clock_hfclk_request+0x22>
    3650:	2501      	movs	r5, #1
    3652:	70e5      	strb	r5, [r4, #3]
    3654:	61e0      	str	r0, [r4, #28]
    3656:	f7ff ffd5 	bl	3604 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    365a:	f000 f8c5 	bl	37e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    365e:	b130      	cbz	r0, 366e <mpsl_clock_hfclk_request+0x26>
    3660:	69e0      	ldr	r0, [r4, #28]
    3662:	b110      	cbz	r0, 366a <mpsl_clock_hfclk_request+0x22>
    3664:	4780      	blx	r0
    3666:	2000      	movs	r0, #0
    3668:	61e0      	str	r0, [r4, #28]
    366a:	2000      	movs	r0, #0
    366c:	bd70      	pop	{r4, r5, r6, pc}
    366e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3672:	7125      	strb	r5, [r4, #4]
    3674:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3678:	e7f7      	b.n	366a <mpsl_clock_hfclk_request+0x22>
    367a:	0000      	.short	0x0000
    367c:	20000058 	.word	0x20000058

00003680 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3684:	0005      	movs	r5, r0
    3686:	f06f 0015 	mvn.w	r0, #21
    368a:	d03f      	beq.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    368c:	7829      	ldrb	r1, [r5, #0]
    368e:	2904      	cmp	r1, #4
    3690:	d83c      	bhi.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3692:	2900      	cmp	r1, #0
    3694:	7869      	ldrb	r1, [r5, #1]
    3696:	d03b      	beq.n	3710 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3698:	2900      	cmp	r1, #0
    369a:	d137      	bne.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    369c:	78a9      	ldrb	r1, [r5, #2]
    369e:	2900      	cmp	r1, #0
    36a0:	d134      	bne.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    36a2:	2000      	movs	r0, #0
    36a4:	f009 fbb2 	bl	ce0c <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1e>
    36a8:	2000      	movs	r0, #0
    36aa:	f009 fba2 	bl	cdf2 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    36ae:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    36b2:	f04f 31ff 	mov.w	r1, #4294967295
    36b6:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    36ba:	2600      	movs	r6, #0
    36bc:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    36c0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    36c4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    36c8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    36cc:	4c14      	ldr	r4, [pc, #80]	; (3720 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    36ce:	7066      	strb	r6, [r4, #1]
    36d0:	88a8      	ldrh	r0, [r5, #4]
    36d2:	81a0      	strh	r0, [r4, #12]
    36d4:	f009 fbe2 	bl	ce9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    36d8:	2701      	movs	r7, #1
    36da:	b108      	cbz	r0, 36e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    36dc:	70e7      	strb	r7, [r4, #3]
    36de:	7067      	strb	r7, [r4, #1]
    36e0:	2101      	movs	r1, #1
    36e2:	4640      	mov	r0, r8
    36e4:	f009 fbcc 	bl	ce80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    36e8:	b108      	cbz	r0, 36ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    36ea:	f000 f877 	bl	37dc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    36ee:	f240 50f5 	movw	r0, #1525	; 0x5f5
    36f2:	81e0      	strh	r0, [r4, #14]
    36f4:	4628      	mov	r0, r5
    36f6:	f7ff fe97 	bl	3428 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    36fa:	7267      	strb	r7, [r4, #9]
    36fc:	2000      	movs	r0, #0
    36fe:	f009 fb78 	bl	cdf2 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
    3702:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3706:	4630      	mov	r0, r6
    3708:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3710:	2900      	cmp	r1, #0
    3712:	d0fb      	beq.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3714:	2920      	cmp	r1, #32
    3716:	d8f9      	bhi.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3718:	78a9      	ldrb	r1, [r5, #2]
    371a:	2921      	cmp	r1, #33	; 0x21
    371c:	d9c1      	bls.n	36a2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    371e:	e7f5      	b.n	370c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3720:	20000058 	.word	0x20000058

00003724 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3724:	4801      	ldr	r0, [pc, #4]	; (372c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3726:	8980      	ldrh	r0, [r0, #12]
    3728:	4770      	bx	lr
    372a:	0000      	.short	0x0000
    372c:	20000058 	.word	0x20000058

00003730 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3730:	4802      	ldr	r0, [pc, #8]	; (373c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3732:	7a80      	ldrb	r0, [r0, #10]
    3734:	2800      	cmp	r0, #0
    3736:	d000      	beq.n	373a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3738:	2001      	movs	r0, #1
    373a:	4770      	bx	lr
    373c:	20000058 	.word	0x20000058

00003740 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3742:	4d1f      	ldr	r5, [pc, #124]	; (37c0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3744:	7ae8      	ldrb	r0, [r5, #11]
    3746:	2800      	cmp	r0, #0
    3748:	d10f      	bne.n	376a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    374a:	7e28      	ldrb	r0, [r5, #24]
    374c:	f000 0003 	and.w	r0, r0, #3
    3750:	f009 fbb2 	bl	ceb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3754:	2800      	cmp	r0, #0
    3756:	d008      	beq.n	376a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3758:	f3ef 8110 	mrs	r1, PRIMASK
    375c:	b672      	cpsid	i
    375e:	f7ff ffe7 	bl	3730 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3762:	b118      	cbz	r0, 376c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3764:	2900      	cmp	r1, #0
    3766:	d100      	bne.n	376a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3768:	b662      	cpsie	i
    376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    376c:	2601      	movs	r6, #1
    376e:	72ae      	strb	r6, [r5, #10]
    3770:	b901      	cbnz	r1, 3774 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3772:	b662      	cpsie	i
    3774:	2018      	movs	r0, #24
    3776:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    377a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    377e:	61a6      	str	r6, [r4, #24]
    3780:	f44f 7020 	mov.w	r0, #640	; 0x280
    3784:	f8ad 0000 	strh.w	r0, [sp]
    3788:	f8bd 0000 	ldrh.w	r0, [sp]
    378c:	1e41      	subs	r1, r0, #1
    378e:	f8ad 1000 	strh.w	r1, [sp]
    3792:	d2f9      	bcs.n	3788 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3794:	2700      	movs	r7, #0
    3796:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    379a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    379e:	4808      	ldr	r0, [pc, #32]	; (37c0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    37a0:	3008      	adds	r0, #8
    37a2:	f009 fbef 	bl	cf84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    37a6:	702f      	strb	r7, [r5, #0]
    37a8:	f7ff fd98 	bl	32dc <MPSL_IRQ_CLOCK_Handler+0x88>
    37ac:	6166      	str	r6, [r4, #20]
    37ae:	7968      	ldrb	r0, [r5, #5]
    37b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    37b4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    37b8:	2018      	movs	r0, #24
    37ba:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37c0:	20000058 	.word	0x20000058

000037c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    37c4:	b510      	push	{r4, lr}
    37c6:	4c04      	ldr	r4, [pc, #16]	; (37d8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    37c8:	7e20      	ldrb	r0, [r4, #24]
    37ca:	f000 0003 	and.w	r0, r0, #3
    37ce:	f009 fb73 	bl	ceb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    37d2:	2800      	cmp	r0, #0
    37d4:	d0f8      	beq.n	37c8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    37d6:	bd10      	pop	{r4, pc}
    37d8:	20000058 	.word	0x20000058

000037dc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    37dc:	4901      	ldr	r1, [pc, #4]	; (37e4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    37de:	2001      	movs	r0, #1
    37e0:	7008      	strb	r0, [r1, #0]
    37e2:	4770      	bx	lr
    37e4:	20000205 	.word	0x20000205

000037e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    37e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37ec:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    37f0:	b918      	cbnz	r0, 37fa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    37f2:	4803      	ldr	r0, [pc, #12]	; (3800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    37f4:	7800      	ldrb	r0, [r0, #0]
    37f6:	2800      	cmp	r0, #0
    37f8:	d000      	beq.n	37fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    37fa:	2001      	movs	r0, #1
    37fc:	4770      	bx	lr
    37fe:	0000      	.short	0x0000
    3800:	20000205 	.word	0x20000205

00003804 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3804:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3808:	2101      	movs	r1, #1
    380a:	6041      	str	r1, [r0, #4]
    380c:	2100      	movs	r1, #0
    380e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3812:	4801      	ldr	r0, [pc, #4]	; (3818 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3814:	7001      	strb	r1, [r0, #0]
    3816:	4770      	bx	lr
    3818:	20000205 	.word	0x20000205

0000381c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    381c:	4802      	ldr	r0, [pc, #8]	; (3828 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    381e:	6800      	ldr	r0, [r0, #0]
    3820:	f000 0003 	and.w	r0, r0, #3
    3824:	4770      	bx	lr
    3826:	0000      	.short	0x0000
    3828:	4000041c 	.word	0x4000041c
    382c:	b510      	push	{r4, lr}
    382e:	b131      	cbz	r1, 383e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3830:	2901      	cmp	r1, #1
    3832:	d007      	beq.n	3844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3834:	f240 3102 	movw	r1, #770	; 0x302
    3838:	a005      	add	r0, pc, #20	; (adr r0, 3850 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    383a:	f000 f821 	bl	3880 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    383e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3842:	e001      	b.n	3848 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3844:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3848:	f000 0001 	and.w	r0, r0, #1
    384c:	bd10      	pop	{r4, pc}
    384e:	0000      	.short	0x0000
    3850:	5f66726e 	.word	0x5f66726e
    3854:	636f6c63 	.word	0x636f6c63
    3858:	00682e6b 	.word	0x00682e6b
    385c:	f3bf 8f4f 	dsb	sy
    3860:	4805      	ldr	r0, [pc, #20]	; (3878 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3862:	6801      	ldr	r1, [r0, #0]
    3864:	4a05      	ldr	r2, [pc, #20]	; (387c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3866:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    386a:	4311      	orrs	r1, r2
    386c:	6001      	str	r1, [r0, #0]
    386e:	f3bf 8f4f 	dsb	sy
    3872:	bf00      	nop
    3874:	e7fd      	b.n	3872 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3876:	0000      	.short	0x0000
    3878:	e000ed0c 	.word	0xe000ed0c
    387c:	05fa0004 	.word	0x05fa0004

00003880 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3880:	b672      	cpsid	i
    3882:	4a03      	ldr	r2, [pc, #12]	; (3890 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3884:	6852      	ldr	r2, [r2, #4]
    3886:	b102      	cbz	r2, 388a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3888:	4790      	blx	r2
    388a:	f7ff ffe7 	bl	385c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    388e:	0000      	.short	0x0000
    3890:	20000078 	.word	0x20000078
    3894:	4806      	ldr	r0, [pc, #24]	; (38b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3896:	b510      	push	{r4, lr}
    3898:	2100      	movs	r1, #0
    389a:	6001      	str	r1, [r0, #0]
    389c:	2101      	movs	r1, #1
    389e:	6001      	str	r1, [r0, #0]
    38a0:	4608      	mov	r0, r1
    38a2:	f009 fb30 	bl	cf06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38aa:	2001      	movs	r0, #1
    38ac:	f009 bb1e 	b.w	ceec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38b0:	40001ffc 	.word	0x40001ffc
    38b4:	4807      	ldr	r0, [pc, #28]	; (38d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    38b6:	b510      	push	{r4, lr}
    38b8:	2101      	movs	r1, #1
    38ba:	6041      	str	r1, [r0, #4]
    38bc:	1e89      	subs	r1, r1, #2
    38be:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38c2:	200c      	movs	r0, #12
    38c4:	f009 fb1f 	bl	cf06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38cc:	200c      	movs	r0, #12
    38ce:	f009 bb0d 	b.w	ceec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38d2:	0000      	.short	0x0000
    38d4:	4000c000 	.word	0x4000c000

000038d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    38d8:	b50e      	push	{r1, r2, r3, lr}
    38da:	b672      	cpsid	i
    38dc:	4a0f      	ldr	r2, [pc, #60]	; (391c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    38de:	6855      	ldr	r5, [r2, #4]
    38e0:	b1d5      	cbz	r5, 3918 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    38e2:	2200      	movs	r2, #0
    38e4:	4603      	mov	r3, r0
    38e6:	466e      	mov	r6, sp
    38e8:	240a      	movs	r4, #10
    38ea:	e003      	b.n	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    38ec:	fbb0 f0f4 	udiv	r0, r0, r4
    38f0:	1c52      	adds	r2, r2, #1
    38f2:	b2d2      	uxtb	r2, r2
    38f4:	2800      	cmp	r0, #0
    38f6:	d1f9      	bne.n	38ec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    38f8:	54b0      	strb	r0, [r6, r2]
    38fa:	e009      	b.n	3910 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    38fc:	fbb3 f0f4 	udiv	r0, r3, r4
    3900:	fb04 3010 	mls	r0, r4, r0, r3
    3904:	fbb3 f3f4 	udiv	r3, r3, r4
    3908:	1e52      	subs	r2, r2, #1
    390a:	b2d2      	uxtb	r2, r2
    390c:	3030      	adds	r0, #48	; 0x30
    390e:	54b0      	strb	r0, [r6, r2]
    3910:	2a00      	cmp	r2, #0
    3912:	d1f3      	bne.n	38fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3914:	4630      	mov	r0, r6
    3916:	47a8      	blx	r5
    3918:	f7ff ffa0 	bl	385c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    391c:	20000078 	.word	0x20000078

00003920 <mpsl_init>:
    3920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3924:	4c18      	ldr	r4, [pc, #96]	; (3988 <mpsl_init+0x68>)
    3926:	4606      	mov	r6, r0
    3928:	4617      	mov	r7, r2
    392a:	7860      	ldrb	r0, [r4, #1]
    392c:	460d      	mov	r5, r1
    392e:	b118      	cbz	r0, 3938 <mpsl_init+0x18>
    3930:	f04f 30ff 	mov.w	r0, #4294967295
    3934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3938:	f7fc fc02 	bl	140 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    393c:	b906      	cbnz	r6, 3940 <mpsl_init+0x20>
    393e:	4e13      	ldr	r6, [pc, #76]	; (398c <mpsl_init+0x6c>)
    3940:	6067      	str	r7, [r4, #4]
    3942:	7025      	strb	r5, [r4, #0]
    3944:	f7ff ffa6 	bl	3894 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3948:	f7ff ffb4 	bl	38b4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    394c:	4630      	mov	r0, r6
    394e:	f7ff fe97 	bl	3680 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3952:	0006      	movs	r6, r0
    3954:	d1ee      	bne.n	3934 <mpsl_init+0x14>
    3956:	f7fe feaf 	bl	26b8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    395a:	f7ff fef1 	bl	3740 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    395e:	f009 f991 	bl	cc84 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3962:	4628      	mov	r0, r5
    3964:	f009 fac2 	bl	ceec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3968:	2001      	movs	r0, #1
    396a:	2d00      	cmp	r5, #0
    396c:	db09      	blt.n	3982 <mpsl_init+0x62>
    396e:	f005 011f 	and.w	r1, r5, #31
    3972:	fa00 f101 	lsl.w	r1, r0, r1
    3976:	096a      	lsrs	r2, r5, #5
    3978:	0092      	lsls	r2, r2, #2
    397a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    397e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3982:	7060      	strb	r0, [r4, #1]
    3984:	4630      	mov	r0, r6
    3986:	e7d5      	b.n	3934 <mpsl_init+0x14>
    3988:	20000078 	.word	0x20000078
    398c:	0000cf28 	.word	0x0000cf28

00003990 <mpsl_is_initialized>:
    3990:	4801      	ldr	r0, [pc, #4]	; (3998 <mpsl_is_initialized+0x8>)
    3992:	7840      	ldrb	r0, [r0, #1]
    3994:	4770      	bx	lr
    3996:	0000      	.short	0x0000
    3998:	20000078 	.word	0x20000078

0000399c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    399c:	4807      	ldr	r0, [pc, #28]	; (39bc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    399e:	f990 0000 	ldrsb.w	r0, [r0]
    39a2:	2800      	cmp	r0, #0
    39a4:	db09      	blt.n	39ba <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    39a6:	f000 021f 	and.w	r2, r0, #31
    39aa:	2101      	movs	r1, #1
    39ac:	4091      	lsls	r1, r2
    39ae:	0940      	lsrs	r0, r0, #5
    39b0:	0080      	lsls	r0, r0, #2
    39b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    39b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    39ba:	4770      	bx	lr
    39bc:	20000078 	.word	0x20000078

000039c0 <mpsl_temperature_get>:
    39c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39c4:	2601      	movs	r6, #1
    39c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    39ca:	0331      	lsls	r1, r6, #12
    39cc:	f04f 0800 	mov.w	r8, #0
    39d0:	4640      	mov	r0, r8
    39d2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    39d6:	f3bf 8f4f 	dsb	sy
    39da:	f3bf 8f6f 	isb	sy
    39de:	4c16      	ldr	r4, [pc, #88]	; (3a38 <mpsl_temperature_get+0x78>)
    39e0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    39e4:	200c      	movs	r0, #12
    39e6:	f009 faad 	bl	cf44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39ea:	4d14      	ldr	r5, [pc, #80]	; (3a3c <mpsl_temperature_get+0x7c>)
    39ec:	6828      	ldr	r0, [r5, #0]
    39ee:	43c0      	mvns	r0, r0
    39f0:	f340 1700 	sbfx	r7, r0, #4, #1
    39f4:	6828      	ldr	r0, [r5, #0]
    39f6:	f040 0010 	orr.w	r0, r0, #16
    39fa:	6028      	str	r0, [r5, #0]
    39fc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3a00:	6026      	str	r6, [r4, #0]
    3a02:	1c7f      	adds	r7, r7, #1
    3a04:	e002      	b.n	3a0c <mpsl_temperature_get+0x4c>
    3a06:	bf00      	nop
    3a08:	f000 f890 	bl	3b2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3a0c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3a10:	2800      	cmp	r0, #0
    3a12:	d0f9      	beq.n	3a08 <mpsl_temperature_get+0x48>
    3a14:	b91f      	cbnz	r7, 3a1e <mpsl_temperature_get+0x5e>
    3a16:	6828      	ldr	r0, [r5, #0]
    3a18:	f020 0010 	bic.w	r0, r0, #16
    3a1c:	6028      	str	r0, [r5, #0]
    3a1e:	4808      	ldr	r0, [pc, #32]	; (3a40 <mpsl_temperature_get+0x80>)
    3a20:	6805      	ldr	r5, [r0, #0]
    3a22:	6066      	str	r6, [r4, #4]
    3a24:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3a28:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3a2c:	200c      	movs	r0, #12
    3a2e:	f009 fa89 	bl	cf44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3a32:	4628      	mov	r0, r5
    3a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a38:	4000c000 	.word	0x4000c000
    3a3c:	e000ed10 	.word	0xe000ed10
    3a40:	4000c508 	.word	0x4000c508

00003a44 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3a44:	b510      	push	{r4, lr}
    3a46:	4602      	mov	r2, r0
    3a48:	2005      	movs	r0, #5
    3a4a:	490c      	ldr	r1, [pc, #48]	; (3a7c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3a4c:	e004      	b.n	3a58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3a4e:	bf00      	nop
    3a50:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3a54:	791b      	ldrb	r3, [r3, #4]
    3a56:	b133      	cbz	r3, 3a66 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3a58:	1e40      	subs	r0, r0, #1
    3a5a:	b2c0      	uxtb	r0, r0
    3a5c:	d2f8      	bcs.n	3a50 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3a5e:	2148      	movs	r1, #72	; 0x48
    3a60:	2069      	movs	r0, #105	; 0x69
    3a62:	f7ff ff39 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a66:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3a6a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3a6e:	2200      	movs	r2, #0
    3a70:	714a      	strb	r2, [r1, #5]
    3a72:	718a      	strb	r2, [r1, #6]
    3a74:	2201      	movs	r2, #1
    3a76:	710a      	strb	r2, [r1, #4]
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	0000      	.short	0x0000
    3a7c:	200013a4 	.word	0x200013a4

00003a80 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3a80:	b510      	push	{r4, lr}
    3a82:	2805      	cmp	r0, #5
    3a84:	d301      	bcc.n	3a8a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3a86:	2158      	movs	r1, #88	; 0x58
    3a88:	e006      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a8a:	490a      	ldr	r1, [pc, #40]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a8c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3a90:	7901      	ldrb	r1, [r0, #4]
    3a92:	2901      	cmp	r1, #1
    3a94:	d003      	beq.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a96:	2159      	movs	r1, #89	; 0x59
    3a98:	2069      	movs	r0, #105	; 0x69
    3a9a:	f7ff ff1d 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a9e:	7941      	ldrb	r1, [r0, #5]
    3aa0:	7982      	ldrb	r2, [r0, #6]
    3aa2:	1c49      	adds	r1, r1, #1
    3aa4:	b2c9      	uxtb	r1, r1
    3aa6:	428a      	cmp	r2, r1
    3aa8:	d000      	beq.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3aaa:	7141      	strb	r1, [r0, #5]
    3aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ab0:	f7ff bf74 	b.w	399c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3ab4:	200013a4 	.word	0x200013a4

00003ab8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3ab8:	b570      	push	{r4, r5, r6, lr}
    3aba:	2505      	movs	r5, #5
    3abc:	4e0e      	ldr	r6, [pc, #56]	; (3af8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3abe:	4c0f      	ldr	r4, [pc, #60]	; (3afc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3ac0:	e016      	b.n	3af0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ac2:	7821      	ldrb	r1, [r4, #0]
    3ac4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3ac8:	7902      	ldrb	r2, [r0, #4]
    3aca:	2a01      	cmp	r2, #1
    3acc:	d108      	bne.n	3ae0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3ace:	7942      	ldrb	r2, [r0, #5]
    3ad0:	7983      	ldrb	r3, [r0, #6]
    3ad2:	429a      	cmp	r2, r3
    3ad4:	d004      	beq.n	3ae0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3ad6:	7942      	ldrb	r2, [r0, #5]
    3ad8:	7182      	strb	r2, [r0, #6]
    3ada:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3ade:	4780      	blx	r0
    3ae0:	7820      	ldrb	r0, [r4, #0]
    3ae2:	1c40      	adds	r0, r0, #1
    3ae4:	b2c0      	uxtb	r0, r0
    3ae6:	7020      	strb	r0, [r4, #0]
    3ae8:	2805      	cmp	r0, #5
    3aea:	d301      	bcc.n	3af0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3aec:	2000      	movs	r0, #0
    3aee:	7020      	strb	r0, [r4, #0]
    3af0:	1e6d      	subs	r5, r5, #1
    3af2:	b2ed      	uxtb	r5, r5
    3af4:	d2e5      	bcs.n	3ac2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3af6:	bd70      	pop	{r4, r5, r6, pc}
    3af8:	200013a4 	.word	0x200013a4
    3afc:	20000206 	.word	0x20000206

00003b00 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3b00:	b500      	push	{lr}
    3b02:	f009 fa4e 	bl	cfa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b06:	b940      	cbnz	r0, 3b1a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b08:	f009 fa55 	bl	cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b0c:	b928      	cbnz	r0, 3b1a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b0e:	f009 fa69 	bl	cfe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b12:	b910      	cbnz	r0, 3b1a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b14:	f009 fa7a 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b18:	b108      	cbz	r0, 3b1e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3b1a:	4802      	ldr	r0, [pc, #8]	; (3b24 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3b1c:	bd00      	pop	{pc}
    3b1e:	4802      	ldr	r0, [pc, #8]	; (3b28 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3b20:	bd00      	pop	{pc}
    3b22:	0000      	.short	0x0000
    3b24:	4000050c 	.word	0x4000050c
    3b28:	4001e700 	.word	0x4001e700

00003b2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3b2c:	b510      	push	{r4, lr}
    3b2e:	f009 fa6d 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b32:	b330      	cbz	r0, 3b82 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3b34:	f3ef 8010 	mrs	r0, PRIMASK
    3b38:	b1c8      	cbz	r0, 3b6e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3b3a:	2100      	movs	r1, #0
    3b3c:	b672      	cpsid	i
    3b3e:	4812      	ldr	r0, [pc, #72]	; (3b88 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3b40:	6802      	ldr	r2, [r0, #0]
    3b42:	6803      	ldr	r3, [r0, #0]
    3b44:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3b48:	f043 0310 	orr.w	r3, r3, #16
    3b4c:	6003      	str	r3, [r0, #0]
    3b4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3b52:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3b56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3b5a:	431c      	orrs	r4, r3
    3b5c:	d000      	beq.n	3b60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3b5e:	bf40      	sev
    3b60:	bf20      	wfe
    3b62:	bf00      	nop
    3b64:	bf00      	nop
    3b66:	bf00      	nop
    3b68:	bf00      	nop
    3b6a:	b112      	cbz	r2, 3b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3b6c:	e005      	b.n	3b7a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3b6e:	2101      	movs	r1, #1
    3b70:	e7e4      	b.n	3b3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3b72:	6802      	ldr	r2, [r0, #0]
    3b74:	f022 0210 	bic.w	r2, r2, #16
    3b78:	6002      	str	r2, [r0, #0]
    3b7a:	2900      	cmp	r1, #0
    3b7c:	d000      	beq.n	3b80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3b7e:	b662      	cpsie	i
    3b80:	bd10      	pop	{r4, pc}
    3b82:	bf20      	wfe
    3b84:	bd10      	pop	{r4, pc}
    3b86:	0000      	.short	0x0000
    3b88:	e000ed10 	.word	0xe000ed10

00003b8c <mpsl_cx_granted_ops_get>:
    3b8c:	4901      	ldr	r1, [pc, #4]	; (3b94 <mpsl_cx_granted_ops_get+0x8>)
    3b8e:	6809      	ldr	r1, [r1, #0]
    3b90:	6889      	ldr	r1, [r1, #8]
    3b92:	4708      	bx	r1
    3b94:	20000080 	.word	0x20000080

00003b98 <mpsl_cx_register_callback>:
    3b98:	4901      	ldr	r1, [pc, #4]	; (3ba0 <mpsl_cx_register_callback+0x8>)
    3b9a:	6809      	ldr	r1, [r1, #0]
    3b9c:	6909      	ldr	r1, [r1, #16]
    3b9e:	4708      	bx	r1
    3ba0:	20000080 	.word	0x20000080

00003ba4 <mpsl_cx_release>:
    3ba4:	4801      	ldr	r0, [pc, #4]	; (3bac <mpsl_cx_release+0x8>)
    3ba6:	6800      	ldr	r0, [r0, #0]
    3ba8:	6840      	ldr	r0, [r0, #4]
    3baa:	4700      	bx	r0
    3bac:	20000080 	.word	0x20000080

00003bb0 <mpsl_cx_request>:
    3bb0:	4901      	ldr	r1, [pc, #4]	; (3bb8 <mpsl_cx_request+0x8>)
    3bb2:	6809      	ldr	r1, [r1, #0]
    3bb4:	6809      	ldr	r1, [r1, #0]
    3bb6:	4708      	bx	r1
    3bb8:	20000080 	.word	0x20000080

00003bbc <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
    3bbc:	0000d255 0000d24d 0000d241 0000d251     U...M...A...Q...
    3bcc:	0000d249 4c0eb570 28007860 7820d117     I...p..L`x.(.. x
    3bdc:	28012500 2002d106 69207020 6920b110     .%.(...  p i.. i
    3bec:	61254780 28037820 7025d109 28006920     .G%a x.(..%p i.(
    3bfc:	6860d005 47806940 47806920 bd706125     ..`h@i.G i.G%ap.
    3c0c:	20000084                                ... 

00003c10 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    3c10:	b510      	push	{r4, lr}
    3c12:	4c08      	ldr	r4, [pc, #32]	; (3c34 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    3c14:	7820      	ldrb	r0, [r4, #0]
    3c16:	2802      	cmp	r0, #2
    3c18:	d002      	beq.n	3c20 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    3c1a:	7820      	ldrb	r0, [r4, #0]
    3c1c:	2803      	cmp	r0, #3
    3c1e:	d102      	bne.n	3c26 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3c20:	6860      	ldr	r0, [r4, #4]
    3c22:	6880      	ldr	r0, [r0, #8]
    3c24:	4780      	blx	r0
    3c26:	2000      	movs	r0, #0
    3c28:	70a0      	strb	r0, [r4, #2]
    3c2a:	7060      	strb	r0, [r4, #1]
    3c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c30:	f7ff bfce 	b.w	3bd0 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    3c34:	20000084 	.word	0x20000084

00003c38 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
    3c38:	4802      	ldr	r0, [pc, #8]	; (3c44 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
    3c3a:	7800      	ldrb	r0, [r0, #0]
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d000      	beq.n	3c42 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
    3c40:	2001      	movs	r0, #1
    3c42:	4770      	bx	lr
    3c44:	20000084 	.word	0x20000084

00003c48 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3c48:	b538      	push	{r3, r4, r5, lr}
    3c4a:	4604      	mov	r4, r0
    3c4c:	2805      	cmp	r0, #5
    3c4e:	d304      	bcc.n	3c5a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    3c50:	f240 113d 	movw	r1, #317	; 0x13d
    3c54:	2068      	movs	r0, #104	; 0x68
    3c56:	f7ff fe3f 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c5a:	f7ff ffb9 	bl	3bd0 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    3c5e:	4d10      	ldr	r5, [pc, #64]	; (3ca0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
    3c60:	2001      	movs	r0, #1
    3c62:	7068      	strb	r0, [r5, #1]
    3c64:	7828      	ldrb	r0, [r5, #0]
    3c66:	2802      	cmp	r0, #2
    3c68:	d116      	bne.n	3c98 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
    3c6a:	6868      	ldr	r0, [r5, #4]
    3c6c:	68c1      	ldr	r1, [r0, #12]
    3c6e:	4620      	mov	r0, r4
    3c70:	4788      	blx	r1
    3c72:	490c      	ldr	r1, [pc, #48]	; (3ca4 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
    3c74:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3c78:	7852      	ldrb	r2, [r2, #1]
    3c7a:	4282      	cmp	r2, r0
    3c7c:	d30d      	bcc.n	3c9a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    3c7e:	78a8      	ldrb	r0, [r5, #2]
    3c80:	2801      	cmp	r0, #1
    3c82:	d00a      	beq.n	3c9a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
    3c84:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3c88:	f88d 0000 	strb.w	r0, [sp]
    3c8c:	f88d 4001 	strb.w	r4, [sp, #1]
    3c90:	6868      	ldr	r0, [r5, #4]
    3c92:	6801      	ldr	r1, [r0, #0]
    3c94:	4668      	mov	r0, sp
    3c96:	4788      	blx	r1
    3c98:	bd38      	pop	{r3, r4, r5, pc}
    3c9a:	2001      	movs	r0, #1
    3c9c:	e7f4      	b.n	3c88 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
    3c9e:	0000      	.short	0x0000
    3ca0:	20000084 	.word	0x20000084
    3ca4:	20001708 	.word	0x20001708

00003ca8 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    3ca8:	4905      	ldr	r1, [pc, #20]	; (3cc0 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    3caa:	780a      	ldrb	r2, [r1, #0]
    3cac:	2a02      	cmp	r2, #2
    3cae:	d004      	beq.n	3cba <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3cb0:	780a      	ldrb	r2, [r1, #0]
    3cb2:	2a03      	cmp	r2, #3
    3cb4:	d001      	beq.n	3cba <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3cb6:	2000      	movs	r0, #0
    3cb8:	4770      	bx	lr
    3cba:	6849      	ldr	r1, [r1, #4]
    3cbc:	6909      	ldr	r1, [r1, #16]
    3cbe:	4708      	bx	r1
    3cc0:	20000084 	.word	0x20000084

00003cc4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    3cc4:	b510      	push	{r4, lr}
    3cc6:	b158      	cbz	r0, 3ce0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3cc8:	4908      	ldr	r1, [pc, #32]	; (3cec <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3cca:	780a      	ldrb	r2, [r1, #0]
    3ccc:	2a02      	cmp	r2, #2
    3cce:	d002      	beq.n	3cd6 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3cd0:	780a      	ldrb	r2, [r1, #0]
    3cd2:	2a03      	cmp	r2, #3
    3cd4:	d109      	bne.n	3cea <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    3cd6:	6849      	ldr	r1, [r1, #4]
    3cd8:	6849      	ldr	r1, [r1, #4]
    3cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cde:	4708      	bx	r1
    3ce0:	f240 1153 	movw	r1, #339	; 0x153
    3ce4:	2068      	movs	r0, #104	; 0x68
    3ce6:	f7ff fdf7 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cea:	bd10      	pop	{r4, pc}
    3cec:	20000084 	.word	0x20000084

00003cf0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    3cf0:	4901      	ldr	r1, [pc, #4]	; (3cf8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    3cf2:	2001      	movs	r0, #1
    3cf4:	7088      	strb	r0, [r1, #2]
    3cf6:	4770      	bx	lr
    3cf8:	20000084 	.word	0x20000084

00003cfc <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    3cfc:	4805      	ldr	r0, [pc, #20]	; (3d14 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    3cfe:	7801      	ldrb	r1, [r0, #0]
    3d00:	2902      	cmp	r1, #2
    3d02:	d004      	beq.n	3d0e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3d04:	7801      	ldrb	r1, [r0, #0]
    3d06:	2903      	cmp	r1, #3
    3d08:	d001      	beq.n	3d0e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3d0a:	2000      	movs	r0, #0
    3d0c:	4770      	bx	lr
    3d0e:	6840      	ldr	r0, [r0, #4]
    3d10:	6980      	ldr	r0, [r0, #24]
    3d12:	4700      	bx	r0
    3d14:	20000084 	.word	0x20000084

00003d18 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3d18:	0000d279 0000d2b1 0000d29b 0000d289     y...............
    3d28:	0000d295 0000d283 0000d277 0000d275     ........w...u...
    3d38:	0000d2ad 0000d2a1 0000d28f 0000d27d     ............}...
    3d48:	0000d26f 0000d267 0000d26b 0000d261     o...g...k...a...

00003d58 <mpsl_fem_disable>:
    3d58:	4801      	ldr	r0, [pc, #4]	; (3d60 <mpsl_fem_disable+0x8>)
    3d5a:	6800      	ldr	r0, [r0, #0]
    3d5c:	6800      	ldr	r0, [r0, #0]
    3d5e:	4700      	bx	r0
    3d60:	20000098 	.word	0x20000098

00003d64 <mpsl_fem_lna_configuration_clear>:
    3d64:	4801      	ldr	r0, [pc, #4]	; (3d6c <mpsl_fem_lna_configuration_clear+0x8>)
    3d66:	6800      	ldr	r0, [r0, #0]
    3d68:	6940      	ldr	r0, [r0, #20]
    3d6a:	4700      	bx	r0
    3d6c:	20000098 	.word	0x20000098

00003d70 <mpsl_fem_lna_configuration_set>:
    3d70:	4a01      	ldr	r2, [pc, #4]	; (3d78 <mpsl_fem_lna_configuration_set+0x8>)
    3d72:	6812      	ldr	r2, [r2, #0]
    3d74:	68d2      	ldr	r2, [r2, #12]
    3d76:	4710      	bx	r2
    3d78:	20000098 	.word	0x20000098

00003d7c <mpsl_fem_lna_is_configured>:
    3d7c:	4901      	ldr	r1, [pc, #4]	; (3d84 <mpsl_fem_lna_is_configured+0x8>)
    3d7e:	6809      	ldr	r1, [r1, #0]
    3d80:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    3d82:	4708      	bx	r1
    3d84:	20000098 	.word	0x20000098

00003d88 <mpsl_fem_pa_configuration_clear>:
    3d88:	4801      	ldr	r0, [pc, #4]	; (3d90 <mpsl_fem_pa_configuration_clear+0x8>)
    3d8a:	6800      	ldr	r0, [r0, #0]
    3d8c:	6900      	ldr	r0, [r0, #16]
    3d8e:	4700      	bx	r0
    3d90:	20000098 	.word	0x20000098

00003d94 <mpsl_fem_pa_configuration_set>:
    3d94:	4a01      	ldr	r2, [pc, #4]	; (3d9c <mpsl_fem_pa_configuration_set+0x8>)
    3d96:	6812      	ldr	r2, [r2, #0]
    3d98:	6892      	ldr	r2, [r2, #8]
    3d9a:	4710      	bx	r2
    3d9c:	20000098 	.word	0x20000098

00003da0 <mpsl_fem_pa_gain_set>:
    3da0:	4901      	ldr	r1, [pc, #4]	; (3da8 <mpsl_fem_pa_gain_set+0x8>)
    3da2:	6809      	ldr	r1, [r1, #0]
    3da4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3da6:	4708      	bx	r1
    3da8:	20000098 	.word	0x20000098

00003dac <mpsl_fem_pa_is_configured>:
    3dac:	4901      	ldr	r1, [pc, #4]	; (3db4 <mpsl_fem_pa_is_configured+0x8>)
    3dae:	6809      	ldr	r1, [r1, #0]
    3db0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    3db2:	4708      	bx	r1
    3db4:	20000098 	.word	0x20000098

00003db8 <mpsl_fem_tx_power_split>:
    3db8:	4b01      	ldr	r3, [pc, #4]	; (3dc0 <mpsl_fem_tx_power_split+0x8>)
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	685b      	ldr	r3, [r3, #4]
    3dbe:	4718      	bx	r3
    3dc0:	20000098 	.word	0x20000098

00003dc4 <mpsl_fem_device_config_254_apply_get>:
    3dc4:	4801      	ldr	r0, [pc, #4]	; (3dcc <mpsl_fem_device_config_254_apply_get+0x8>)
    3dc6:	7800      	ldrb	r0, [r0, #0]
    3dc8:	4770      	bx	lr
    3dca:	0000      	.short	0x0000
    3dcc:	20000207 	.word	0x20000207
    3dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3dd2:	4c14      	ldr	r4, [pc, #80]	; (3e24 <mpsl_fem_device_config_254_apply_get+0x60>)
    3dd4:	7a20      	ldrb	r0, [r4, #8]
    3dd6:	f88d 0001 	strb.w	r0, [sp, #1]
    3dda:	79e0      	ldrb	r0, [r4, #7]
    3ddc:	f88d 0000 	strb.w	r0, [sp]
    3de0:	79a0      	ldrb	r0, [r4, #6]
    3de2:	f8ad 0004 	strh.w	r0, [sp, #4]
    3de6:	7960      	ldrb	r0, [r4, #5]
    3de8:	f8ad 0002 	strh.w	r0, [sp, #2]
    3dec:	4668      	mov	r0, sp
    3dee:	f006 faa1 	bl	a334 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3df2:	b108      	cbz	r0, 3df8 <mpsl_fem_device_config_254_apply_get+0x34>
    3df4:	2183      	movs	r1, #131	; 0x83
    3df6:	e010      	b.n	3e1a <mpsl_fem_device_config_254_apply_get+0x56>
    3df8:	68e0      	ldr	r0, [r4, #12]
    3dfa:	9002      	str	r0, [sp, #8]
    3dfc:	a802      	add	r0, sp, #8
    3dfe:	f006 faaf 	bl	a360 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3e02:	b108      	cbz	r0, 3e08 <mpsl_fem_device_config_254_apply_get+0x44>
    3e04:	2187      	movs	r1, #135	; 0x87
    3e06:	e008      	b.n	3e1a <mpsl_fem_device_config_254_apply_get+0x56>
    3e08:	4807      	ldr	r0, [pc, #28]	; (3e28 <mpsl_fem_device_config_254_apply_get+0x64>)
    3e0a:	6800      	ldr	r0, [r0, #0]
    3e0c:	9003      	str	r0, [sp, #12]
    3e0e:	a803      	add	r0, sp, #12
    3e10:	f00b ff8b 	bl	fd2a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3e14:	2800      	cmp	r0, #0
    3e16:	d003      	beq.n	3e20 <mpsl_fem_device_config_254_apply_get+0x5c>
    3e18:	218b      	movs	r1, #139	; 0x8b
    3e1a:	2003      	movs	r0, #3
    3e1c:	f000 f958 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e20:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3e22:	0000      	.short	0x0000
    3e24:	200013cc 	.word	0x200013cc
    3e28:	0000417c 	.word	0x0000417c
    3e2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3e2e:	4604      	mov	r4, r0
    3e30:	6800      	ldr	r0, [r0, #0]
    3e32:	460d      	mov	r5, r1
    3e34:	f100 0003 	add.w	r0, r0, #3
    3e38:	f020 0003 	bic.w	r0, r0, #3
    3e3c:	6020      	str	r0, [r4, #0]
    3e3e:	f04f 0000 	mov.w	r0, #0
    3e42:	9000      	str	r0, [sp, #0]
    3e44:	9001      	str	r0, [sp, #4]
    3e46:	7808      	ldrb	r0, [r1, #0]
    3e48:	f88d 0001 	strb.w	r0, [sp, #1]
    3e4c:	7848      	ldrb	r0, [r1, #1]
    3e4e:	f88d 0002 	strb.w	r0, [sp, #2]
    3e52:	7888      	ldrb	r0, [r1, #2]
    3e54:	f88d 0003 	strb.w	r0, [sp, #3]
    3e58:	78c8      	ldrb	r0, [r1, #3]
    3e5a:	f88d 0004 	strb.w	r0, [sp, #4]
    3e5e:	7928      	ldrb	r0, [r5, #4]
    3e60:	0016      	movs	r6, r2
    3e62:	f88d 0005 	strb.w	r0, [sp, #5]
    3e66:	d001      	beq.n	3e6c <mpsl_fem_device_config_254_apply_get+0xa8>
    3e68:	2000      	movs	r0, #0
    3e6a:	e000      	b.n	3e6e <mpsl_fem_device_config_254_apply_get+0xaa>
    3e6c:	6820      	ldr	r0, [r4, #0]
    3e6e:	4669      	mov	r1, sp
    3e70:	f000 fb12 	bl	4498 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3e74:	6821      	ldr	r1, [r4, #0]
    3e76:	4408      	add	r0, r1
    3e78:	6020      	str	r0, [r4, #0]
    3e7a:	78a9      	ldrb	r1, [r5, #2]
    3e7c:	b141      	cbz	r1, 3e90 <mpsl_fem_device_config_254_apply_get+0xcc>
    3e7e:	8a6b      	ldrh	r3, [r5, #18]
    3e80:	78ea      	ldrb	r2, [r5, #3]
    3e82:	b106      	cbz	r6, 3e86 <mpsl_fem_device_config_254_apply_get+0xc2>
    3e84:	2000      	movs	r0, #0
    3e86:	f000 fdd9 	bl	4a3c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    3e8a:	6821      	ldr	r1, [r4, #0]
    3e8c:	4408      	add	r0, r1
    3e8e:	6020      	str	r0, [r4, #0]
    3e90:	4819      	ldr	r0, [pc, #100]	; (3ef8 <mpsl_fem_device_config_254_apply_get+0x134>)
    3e92:	78c1      	ldrb	r1, [r0, #3]
    3e94:	b179      	cbz	r1, 3eb6 <mpsl_fem_device_config_254_apply_get+0xf2>
    3e96:	7c29      	ldrb	r1, [r5, #16]
    3e98:	b169      	cbz	r1, 3eb6 <mpsl_fem_device_config_254_apply_get+0xf2>
    3e9a:	7900      	ldrb	r0, [r0, #4]
    3e9c:	b108      	cbz	r0, 3ea2 <mpsl_fem_device_config_254_apply_get+0xde>
    3e9e:	22ff      	movs	r2, #255	; 0xff
    3ea0:	e000      	b.n	3ea4 <mpsl_fem_device_config_254_apply_get+0xe0>
    3ea2:	2225      	movs	r2, #37	; 0x25
    3ea4:	b10e      	cbz	r6, 3eaa <mpsl_fem_device_config_254_apply_get+0xe6>
    3ea6:	2000      	movs	r0, #0
    3ea8:	e000      	b.n	3eac <mpsl_fem_device_config_254_apply_get+0xe8>
    3eaa:	6820      	ldr	r0, [r4, #0]
    3eac:	f000 fe5c 	bl	4b68 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3eb0:	6821      	ldr	r1, [r4, #0]
    3eb2:	4408      	add	r0, r1
    3eb4:	6020      	str	r0, [r4, #0]
    3eb6:	7928      	ldrb	r0, [r5, #4]
    3eb8:	b168      	cbz	r0, 3ed6 <mpsl_fem_device_config_254_apply_get+0x112>
    3eba:	6820      	ldr	r0, [r4, #0]
    3ebc:	1cc0      	adds	r0, r0, #3
    3ebe:	f020 0003 	bic.w	r0, r0, #3
    3ec2:	6020      	str	r0, [r4, #0]
    3ec4:	7d2a      	ldrb	r2, [r5, #20]
    3ec6:	7929      	ldrb	r1, [r5, #4]
    3ec8:	b106      	cbz	r6, 3ecc <mpsl_fem_device_config_254_apply_get+0x108>
    3eca:	2000      	movs	r0, #0
    3ecc:	f006 fdb4 	bl	aa38 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>
    3ed0:	6821      	ldr	r1, [r4, #0]
    3ed2:	4408      	add	r0, r1
    3ed4:	6020      	str	r0, [r4, #0]
    3ed6:	7d68      	ldrb	r0, [r5, #21]
    3ed8:	2800      	cmp	r0, #0
    3eda:	d00c      	beq.n	3ef6 <mpsl_fem_device_config_254_apply_get+0x132>
    3edc:	6820      	ldr	r0, [r4, #0]
    3ede:	1cc0      	adds	r0, r0, #3
    3ee0:	f020 0003 	bic.w	r0, r0, #3
    3ee4:	6020      	str	r0, [r4, #0]
    3ee6:	7d69      	ldrb	r1, [r5, #21]
    3ee8:	b106      	cbz	r6, 3eec <mpsl_fem_device_config_254_apply_get+0x128>
    3eea:	2000      	movs	r0, #0
    3eec:	f000 fe6c 	bl	4bc8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>
    3ef0:	6821      	ldr	r1, [r4, #0]
    3ef2:	4408      	add	r0, r1
    3ef4:	6020      	str	r0, [r4, #0]
    3ef6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3ef8:	2000009c 	.word	0x2000009c

00003efc <sdc_build_revision_get>:
    3efc:	b510      	push	{r4, lr}
    3efe:	b128      	cbz	r0, 3f0c <sdc_build_revision_get+0x10>
    3f00:	2214      	movs	r2, #20
    3f02:	4904      	ldr	r1, [pc, #16]	; (3f14 <sdc_build_revision_get+0x18>)
    3f04:	f009 f8c2 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f08:	2000      	movs	r0, #0
    3f0a:	bd10      	pop	{r4, pc}
    3f0c:	f06f 0015 	mvn.w	r0, #21
    3f10:	bd10      	pop	{r4, pc}
    3f12:	0000      	.short	0x0000
    3f14:	00004198 	.word	0x00004198

00003f18 <sdc_cfg_set>:
    3f18:	b570      	push	{r4, r5, r6, lr}
    3f1a:	b110      	cbz	r0, 3f22 <sdc_cfg_set+0xa>
    3f1c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3f20:	bd70      	pop	{r4, r5, r6, pc}
    3f22:	4c30      	ldr	r4, [pc, #192]	; (3fe4 <sdc_cfg_set+0xcc>)
    3f24:	7860      	ldrb	r0, [r4, #1]
    3f26:	b110      	cbz	r0, 3f2e <sdc_cfg_set+0x16>
    3f28:	f04f 30ff 	mov.w	r0, #4294967295
    3f2c:	bd70      	pop	{r4, r5, r6, pc}
    3f2e:	b321      	cbz	r1, 3f7a <sdc_cfg_set+0x62>
    3f30:	f06f 0015 	mvn.w	r0, #21
    3f34:	2a00      	cmp	r2, #0
    3f36:	d0f9      	beq.n	3f2c <sdc_cfg_set+0x14>
    3f38:	4b2b      	ldr	r3, [pc, #172]	; (3fe8 <sdc_cfg_set+0xd0>)
    3f3a:	290c      	cmp	r1, #12
    3f3c:	d2f6      	bcs.n	3f2c <sdc_cfg_set+0x14>
    3f3e:	e8df f001 	tbb	[pc, r1]
    3f42:	0706      	.short	0x0706
    3f44:	201d0d0a 	.word	0x201d0d0a
    3f48:	3726342c 	.word	0x3726342c
    3f4c:	3f3a      	.short	0x3f3a
    3f4e:	e7ed      	b.n	3f2c <sdc_cfg_set+0x14>
    3f50:	7810      	ldrb	r0, [r2, #0]
    3f52:	7018      	strb	r0, [r3, #0]
    3f54:	e038      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3f56:	7810      	ldrb	r0, [r2, #0]
    3f58:	7058      	strb	r0, [r3, #1]
    3f5a:	e035      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3f5c:	7891      	ldrb	r1, [r2, #2]
    3f5e:	2900      	cmp	r1, #0
    3f60:	d0e4      	beq.n	3f2c <sdc_cfg_set+0x14>
    3f62:	78d1      	ldrb	r1, [r2, #3]
    3f64:	2900      	cmp	r1, #0
    3f66:	d0e1      	beq.n	3f2c <sdc_cfg_set+0x14>
    3f68:	7811      	ldrb	r1, [r2, #0]
    3f6a:	291b      	cmp	r1, #27
    3f6c:	d3de      	bcc.n	3f2c <sdc_cfg_set+0x14>
    3f6e:	7851      	ldrb	r1, [r2, #1]
    3f70:	291b      	cmp	r1, #27
    3f72:	d3db      	bcc.n	3f2c <sdc_cfg_set+0x14>
    3f74:	6810      	ldr	r0, [r2, #0]
    3f76:	f8c3 0005 	str.w	r0, [r3, #5]
    3f7a:	e025      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3f7c:	6810      	ldr	r0, [r2, #0]
    3f7e:	60d8      	str	r0, [r3, #12]
    3f80:	e022      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3f82:	7811      	ldrb	r1, [r2, #0]
    3f84:	78da      	ldrb	r2, [r3, #3]
    3f86:	4291      	cmp	r1, r2
    3f88:	d3d0      	bcc.n	3f2c <sdc_cfg_set+0x14>
    3f8a:	7099      	strb	r1, [r3, #2]
    3f8c:	e01c      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3f8e:	7811      	ldrb	r1, [r2, #0]
    3f90:	789a      	ldrb	r2, [r3, #2]
    3f92:	4291      	cmp	r1, r2
    3f94:	d8ca      	bhi.n	3f2c <sdc_cfg_set+0x14>
    3f96:	70d9      	strb	r1, [r3, #3]
    3f98:	e016      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3f9a:	78e1      	ldrb	r1, [r4, #3]
    3f9c:	b111      	cbz	r1, 3fa4 <sdc_cfg_set+0x8c>
    3f9e:	7811      	ldrb	r1, [r2, #0]
    3fa0:	2902      	cmp	r1, #2
    3fa2:	d3c3      	bcc.n	3f2c <sdc_cfg_set+0x14>
    3fa4:	7810      	ldrb	r0, [r2, #0]
    3fa6:	7418      	strb	r0, [r3, #16]
    3fa8:	e00e      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3faa:	8810      	ldrh	r0, [r2, #0]
    3fac:	8258      	strh	r0, [r3, #18]
    3fae:	e00b      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3fb0:	7810      	ldrb	r0, [r2, #0]
    3fb2:	7118      	strb	r0, [r3, #4]
    3fb4:	e008      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3fb6:	7811      	ldrb	r1, [r2, #0]
    3fb8:	2902      	cmp	r1, #2
    3fba:	d3b7      	bcc.n	3f2c <sdc_cfg_set+0x14>
    3fbc:	7519      	strb	r1, [r3, #20]
    3fbe:	e003      	b.n	3fc8 <sdc_cfg_set+0xb0>
    3fc0:	7811      	ldrb	r1, [r2, #0]
    3fc2:	2908      	cmp	r1, #8
    3fc4:	d8b2      	bhi.n	3f2c <sdc_cfg_set+0x14>
    3fc6:	7559      	strb	r1, [r3, #21]
    3fc8:	2201      	movs	r2, #1
    3fca:	4907      	ldr	r1, [pc, #28]	; (3fe8 <sdc_cfg_set+0xd0>)
    3fcc:	2000      	movs	r0, #0
    3fce:	f009 f989 	bl	d2e4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    3fd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3fd6:	db02      	blt.n	3fde <sdc_cfg_set+0xc6>
    3fd8:	f06f 000b 	mvn.w	r0, #11
    3fdc:	bd70      	pop	{r4, r5, r6, pc}
    3fde:	2101      	movs	r1, #1
    3fe0:	70a1      	strb	r1, [r4, #2]
    3fe2:	bd70      	pop	{r4, r5, r6, pc}
    3fe4:	2000009c 	.word	0x2000009c
    3fe8:	200013cc 	.word	0x200013cc

00003fec <sdc_enable>:
    3fec:	b570      	push	{r4, r5, r6, lr}
    3fee:	460c      	mov	r4, r1
    3ff0:	0005      	movs	r5, r0
    3ff2:	d019      	beq.n	4028 <sdc_enable+0x3c>
    3ff4:	b1c4      	cbz	r4, 4028 <sdc_enable+0x3c>
    3ff6:	f000 f903 	bl	4200 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3ffa:	b1c0      	cbz	r0, 402e <sdc_enable+0x42>
    3ffc:	4628      	mov	r0, r5
    3ffe:	f7ff fd21 	bl	3a44 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4002:	4d0c      	ldr	r5, [pc, #48]	; (4034 <sdc_enable+0x48>)
    4004:	2200      	movs	r2, #0
    4006:	490c      	ldr	r1, [pc, #48]	; (4038 <sdc_enable+0x4c>)
    4008:	7028      	strb	r0, [r5, #0]
    400a:	4620      	mov	r0, r4
    400c:	f009 f96a 	bl	d2e4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4010:	f00c fc4d 	bl	108ae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4014:	2100      	movs	r1, #0
    4016:	7828      	ldrb	r0, [r5, #0]
    4018:	f006 fc5e 	bl	a8d8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    401c:	f7ff fed8 	bl	3dd0 <mpsl_fem_device_config_254_apply_get+0xc>
    4020:	2001      	movs	r0, #1
    4022:	7068      	strb	r0, [r5, #1]
    4024:	2000      	movs	r0, #0
    4026:	bd70      	pop	{r4, r5, r6, pc}
    4028:	f06f 0015 	mvn.w	r0, #21
    402c:	bd70      	pop	{r4, r5, r6, pc}
    402e:	f04f 30ff 	mov.w	r0, #4294967295
    4032:	bd70      	pop	{r4, r5, r6, pc}
    4034:	2000009c 	.word	0x2000009c
    4038:	200013cc 	.word	0x200013cc

0000403c <sdc_init>:
    403c:	b530      	push	{r4, r5, lr}
    403e:	b087      	sub	sp, #28
    4040:	0005      	movs	r5, r0
    4042:	d00c      	beq.n	405e <sdc_init+0x22>
    4044:	f7ff fca4 	bl	3990 <mpsl_is_initialized>
    4048:	f04f 34ff 	mov.w	r4, #4294967295
    404c:	b120      	cbz	r0, 4058 <sdc_init+0x1c>
    404e:	f7ff fb69 	bl	3724 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4052:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4056:	d905      	bls.n	4064 <sdc_init+0x28>
    4058:	4620      	mov	r0, r4
    405a:	b007      	add	sp, #28
    405c:	bd30      	pop	{r4, r5, pc}
    405e:	f06f 0015 	mvn.w	r0, #21
    4062:	e7fa      	b.n	405a <sdc_init+0x1e>
    4064:	4c15      	ldr	r4, [pc, #84]	; (40bc <sdc_init+0x80>)
    4066:	4816      	ldr	r0, [pc, #88]	; (40c0 <sdc_init+0x84>)
    4068:	60a5      	str	r5, [r4, #8]
    406a:	f000 f9f1 	bl	4450 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    406e:	2000      	movs	r0, #0
    4070:	7060      	strb	r0, [r4, #1]
    4072:	70a0      	strb	r0, [r4, #2]
    4074:	70e0      	strb	r0, [r4, #3]
    4076:	7120      	strb	r0, [r4, #4]
    4078:	4601      	mov	r1, r0
    407a:	2218      	movs	r2, #24
    407c:	4668      	mov	r0, sp
    407e:	f009 f87f 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4082:	2218      	movs	r2, #24
    4084:	490f      	ldr	r1, [pc, #60]	; (40c4 <sdc_init+0x88>)
    4086:	4668      	mov	r0, sp
    4088:	f009 f800 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    408c:	2218      	movs	r2, #24
    408e:	4669      	mov	r1, sp
    4090:	480d      	ldr	r0, [pc, #52]	; (40c8 <sdc_init+0x8c>)
    4092:	f008 fffb 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4096:	f3ef 8410 	mrs	r4, PRIMASK
    409a:	b672      	cpsid	i
    409c:	f06f 000c 	mvn.w	r0, #12
    40a0:	f000 fdd4 	bl	4c4c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    40a4:	4809      	ldr	r0, [pc, #36]	; (40cc <sdc_init+0x90>)
    40a6:	f000 fe9f 	bl	4de8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    40aa:	b118      	cbz	r0, 40b4 <sdc_init+0x78>
    40ac:	219e      	movs	r1, #158	; 0x9e
    40ae:	2003      	movs	r0, #3
    40b0:	f000 f80e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40b4:	b904      	cbnz	r4, 40b8 <sdc_init+0x7c>
    40b6:	b662      	cpsie	i
    40b8:	2000      	movs	r0, #0
    40ba:	e7ce      	b.n	405a <sdc_init+0x1e>
    40bc:	2000009c 	.word	0x2000009c
    40c0:	00003dd1 	.word	0x00003dd1
    40c4:	00004180 	.word	0x00004180
    40c8:	200013cc 	.word	0x200013cc
    40cc:	0000422d 	.word	0x0000422d

000040d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    40d0:	b50e      	push	{r1, r2, r3, lr}
    40d2:	b672      	cpsid	i
    40d4:	4a15      	ldr	r2, [pc, #84]	; (412c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    40d6:	6895      	ldr	r5, [r2, #8]
    40d8:	b1dd      	cbz	r5, 4112 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    40da:	2200      	movs	r2, #0
    40dc:	4603      	mov	r3, r0
    40de:	466e      	mov	r6, sp
    40e0:	240a      	movs	r4, #10
    40e2:	e003      	b.n	40ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    40e4:	fbb0 f0f4 	udiv	r0, r0, r4
    40e8:	1c52      	adds	r2, r2, #1
    40ea:	b2d2      	uxtb	r2, r2
    40ec:	2800      	cmp	r0, #0
    40ee:	d1f9      	bne.n	40e4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    40f0:	54b0      	strb	r0, [r6, r2]
    40f2:	e00a      	b.n	410a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    40f4:	b2d8      	uxtb	r0, r3
    40f6:	fbb0 f7f4 	udiv	r7, r0, r4
    40fa:	fbb3 f3f4 	udiv	r3, r3, r4
    40fe:	fb04 0017 	mls	r0, r4, r7, r0
    4102:	1e52      	subs	r2, r2, #1
    4104:	b2d2      	uxtb	r2, r2
    4106:	3030      	adds	r0, #48	; 0x30
    4108:	54b0      	strb	r0, [r6, r2]
    410a:	2a00      	cmp	r2, #0
    410c:	d1f2      	bne.n	40f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    410e:	4630      	mov	r0, r6
    4110:	47a8      	blx	r5
    4112:	f3bf 8f4f 	dsb	sy
    4116:	4806      	ldr	r0, [pc, #24]	; (4130 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4118:	6801      	ldr	r1, [r0, #0]
    411a:	4a06      	ldr	r2, [pc, #24]	; (4134 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    411c:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4120:	4311      	orrs	r1, r2
    4122:	6001      	str	r1, [r0, #0]
    4124:	f3bf 8f4f 	dsb	sy
    4128:	bf00      	nop
    412a:	e7fd      	b.n	4128 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    412c:	2000009c 	.word	0x2000009c
    4130:	e000ed0c 	.word	0xe000ed0c
    4134:	05fa0004 	.word	0x05fa0004

00004138 <sdc_support_adv>:
    4138:	4806      	ldr	r0, [pc, #24]	; (4154 <sdc_support_adv+0x1c>)
    413a:	b510      	push	{r4, lr}
    413c:	7881      	ldrb	r1, [r0, #2]
    413e:	7840      	ldrb	r0, [r0, #1]
    4140:	4301      	orrs	r1, r0
    4142:	d002      	beq.n	414a <sdc_support_adv+0x12>
    4144:	f04f 30ff 	mov.w	r0, #4294967295
    4148:	bd10      	pop	{r4, pc}
    414a:	f006 fbf1 	bl	a930 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    414e:	2000      	movs	r0, #0
    4150:	bd10      	pop	{r4, pc}
    4152:	0000      	.short	0x0000
    4154:	2000009c 	.word	0x2000009c

00004158 <sdc_support_scan>:
    4158:	4807      	ldr	r0, [pc, #28]	; (4178 <sdc_support_scan+0x20>)
    415a:	b510      	push	{r4, lr}
    415c:	7881      	ldrb	r1, [r0, #2]
    415e:	7842      	ldrb	r2, [r0, #1]
    4160:	4311      	orrs	r1, r2
    4162:	d002      	beq.n	416a <sdc_support_scan+0x12>
    4164:	f04f 30ff 	mov.w	r0, #4294967295
    4168:	bd10      	pop	{r4, pc}
    416a:	2101      	movs	r1, #1
    416c:	70c1      	strb	r1, [r0, #3]
    416e:	f006 fbf1 	bl	a954 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    4172:	2000      	movs	r0, #0
    4174:	bd10      	pop	{r4, pc}
    4176:	0000      	.short	0x0000
    4178:	2000009c 	.word	0x2000009c
    417c:	00000001 	.word	0x00000001
    4180:	00010101 	.word	0x00010101
    4184:	031b1b00 	.word	0x031b1b00
    4188:	00000002 	.word	0x00000002
    418c:	00001d4c 	.word	0x00001d4c
    4190:	001f0003 	.word	0x001f0003
    4194:	00000002 	.word	0x00000002
    4198:	f1925c29 	.word	0xf1925c29
    419c:	d1928136 	.word	0xd1928136
    41a0:	f1f0a9b7 	.word	0xf1f0a9b7
    41a4:	194ce999 	.word	0x194ce999
    41a8:	4a83231f 	.word	0x4a83231f

000041ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    41ac:	4a05      	ldr	r2, [pc, #20]	; (41c4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    41ae:	b510      	push	{r4, lr}
    41b0:	6852      	ldr	r2, [r2, #4]
    41b2:	b112      	cbz	r2, 41ba <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    41b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41b8:	4710      	bx	r2
    41ba:	2192      	movs	r1, #146	; 0x92
    41bc:	2004      	movs	r0, #4
    41be:	f7ff ff87 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41c2:	0000      	.short	0x0000
    41c4:	200013e4 	.word	0x200013e4

000041c8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    41c8:	4a05      	ldr	r2, [pc, #20]	; (41e0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    41ca:	b510      	push	{r4, lr}
    41cc:	6812      	ldr	r2, [r2, #0]
    41ce:	b112      	cbz	r2, 41d6 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    41d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41d4:	4710      	bx	r2
    41d6:	218c      	movs	r1, #140	; 0x8c
    41d8:	2004      	movs	r0, #4
    41da:	f7ff ff79 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41de:	0000      	.short	0x0000
    41e0:	200013e4 	.word	0x200013e4

000041e4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    41e4:	4a05      	ldr	r2, [pc, #20]	; (41fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    41e6:	b510      	push	{r4, lr}
    41e8:	6892      	ldr	r2, [r2, #8]
    41ea:	b112      	cbz	r2, 41f2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    41ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41f0:	4710      	bx	r2
    41f2:	2198      	movs	r1, #152	; 0x98
    41f4:	2004      	movs	r0, #4
    41f6:	f7ff ff6b 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41fa:	0000      	.short	0x0000
    41fc:	200013e4 	.word	0x200013e4

00004200 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4200:	4805      	ldr	r0, [pc, #20]	; (4218 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4202:	6801      	ldr	r1, [r0, #0]
    4204:	b129      	cbz	r1, 4212 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4206:	6841      	ldr	r1, [r0, #4]
    4208:	b119      	cbz	r1, 4212 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    420a:	6880      	ldr	r0, [r0, #8]
    420c:	b108      	cbz	r0, 4212 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    420e:	2001      	movs	r0, #1
    4210:	4770      	bx	lr
    4212:	2000      	movs	r0, #0
    4214:	4770      	bx	lr
    4216:	0000      	.short	0x0000
    4218:	200013e4 	.word	0x200013e4

0000421c <sdc_rand_source_register>:
    421c:	4902      	ldr	r1, [pc, #8]	; (4228 <sdc_rand_source_register+0xc>)
    421e:	c80d      	ldmia	r0, {r0, r2, r3}
    4220:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4224:	2000      	movs	r0, #0
    4226:	4770      	bx	lr
    4228:	200013e4 	.word	0x200013e4

0000422c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    422e:	4c12      	ldr	r4, [pc, #72]	; (4278 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4230:	2600      	movs	r6, #0
    4232:	6825      	ldr	r5, [r4, #0]
    4234:	e011      	b.n	425a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4236:	9800      	ldr	r0, [sp, #0]
    4238:	2802      	cmp	r0, #2
    423a:	d002      	beq.n	4242 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    423c:	2803      	cmp	r0, #3
    423e:	d10c      	bne.n	425a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4240:	e006      	b.n	4250 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4242:	6820      	ldr	r0, [r4, #0]
    4244:	b110      	cbz	r0, 424c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4246:	2000      	movs	r0, #0
    4248:	6026      	str	r6, [r4, #0]
    424a:	e005      	b.n	4258 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    424c:	2128      	movs	r1, #40	; 0x28
    424e:	e00c      	b.n	426a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4250:	6820      	ldr	r0, [r4, #0]
    4252:	b168      	cbz	r0, 4270 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4254:	2001      	movs	r0, #1
    4256:	6026      	str	r6, [r4, #0]
    4258:	47a8      	blx	r5
    425a:	4668      	mov	r0, sp
    425c:	f000 fd96 	bl	4d8c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4260:	2800      	cmp	r0, #0
    4262:	d0e8      	beq.n	4236 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4264:	2805      	cmp	r0, #5
    4266:	d005      	beq.n	4274 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4268:	2135      	movs	r1, #53	; 0x35
    426a:	2004      	movs	r0, #4
    426c:	f7ff ff30 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4270:	212d      	movs	r1, #45	; 0x2d
    4272:	e7fa      	b.n	426a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4276:	0000      	.short	0x0000
    4278:	200000a8 	.word	0x200000a8
    427c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    427e:	4c1f      	ldr	r4, [pc, #124]	; (42fc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4280:	4605      	mov	r5, r0
    4282:	7820      	ldrb	r0, [r4, #0]
    4284:	b140      	cbz	r0, 4298 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4286:	78a2      	ldrb	r2, [r4, #2]
    4288:	1c61      	adds	r1, r4, #1
    428a:	4628      	mov	r0, r5
    428c:	1c92      	adds	r2, r2, #2
    428e:	f008 fefd 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4292:	2000      	movs	r0, #0
    4294:	7020      	strb	r0, [r4, #0]
    4296:	e021      	b.n	42dc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4298:	4819      	ldr	r0, [pc, #100]	; (4300 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    429a:	f001 faf5 	bl	5888 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    429e:	2800      	cmp	r0, #0
    42a0:	d01d      	beq.n	42de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    42a2:	4c17      	ldr	r4, [pc, #92]	; (4300 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    42a4:	7820      	ldrb	r0, [r4, #0]
    42a6:	2814      	cmp	r0, #20
    42a8:	d104      	bne.n	42b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    42aa:	210a      	movs	r1, #10
    42ac:	203e      	movs	r0, #62	; 0x3e
    42ae:	f000 f829 	bl	4304 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    42b2:	b118      	cbz	r0, 42bc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    42b4:	7820      	ldrb	r0, [r4, #0]
    42b6:	280a      	cmp	r0, #10
    42b8:	d005      	beq.n	42c6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    42ba:	e009      	b.n	42d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    42bc:	4910      	ldr	r1, [pc, #64]	; (4300 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    42be:	4628      	mov	r0, r5
    42c0:	f009 fb17 	bl	d8f2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    42c4:	e00a      	b.n	42dc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    42c6:	2105      	movs	r1, #5
    42c8:	203e      	movs	r0, #62	; 0x3e
    42ca:	f000 f81b 	bl	4304 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    42ce:	b138      	cbz	r0, 42e0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    42d0:	490b      	ldr	r1, [pc, #44]	; (4300 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    42d2:	4628      	mov	r0, r5
    42d4:	f009 f865 	bl	d3a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    42d8:	2800      	cmp	r0, #0
    42da:	d000      	beq.n	42de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    42dc:	2001      	movs	r0, #1
    42de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    42e0:	88a0      	ldrh	r0, [r4, #4]
    42e2:	f8ad 0000 	strh.w	r0, [sp]
    42e6:	a901      	add	r1, sp, #4
    42e8:	4668      	mov	r0, sp
    42ea:	f009 fc38 	bl	db5e <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    42ee:	2800      	cmp	r0, #0
    42f0:	d0f5      	beq.n	42de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    42f2:	219c      	movs	r1, #156	; 0x9c
    42f4:	2008      	movs	r0, #8
    42f6:	f7ff feeb 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42fa:	0000      	.short	0x0000
    42fc:	200014f8 	.word	0x200014f8
    4300:	200013f0 	.word	0x200013f0
    4304:	b570      	push	{r4, r5, r6, lr}
    4306:	460c      	mov	r4, r1
    4308:	4605      	mov	r5, r0
    430a:	f000 f84b 	bl	43a4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    430e:	2800      	cmp	r0, #0
    4310:	d002      	beq.n	4318 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4312:	2d3e      	cmp	r5, #62	; 0x3e
    4314:	d001      	beq.n	431a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xee>
    4316:	2001      	movs	r0, #1
    4318:	bd70      	pop	{r4, r5, r6, pc}
    431a:	2c12      	cmp	r4, #18
    431c:	d106      	bne.n	432c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    431e:	4806      	ldr	r0, [pc, #24]	; (4338 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>)
    4320:	7801      	ldrb	r1, [r0, #0]
    4322:	2902      	cmp	r1, #2
    4324:	d002      	beq.n	432c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x100>
    4326:	7840      	ldrb	r0, [r0, #1]
    4328:	2800      	cmp	r0, #0
    432a:	d0f5      	beq.n	4318 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    432c:	4620      	mov	r0, r4
    432e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4332:	f000 b849 	b.w	43c8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    4336:	0000      	.short	0x0000
    4338:	20000208 	.word	0x20000208

0000433c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    433c:	4901      	ldr	r1, [pc, #4]	; (4344 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    433e:	7048      	strb	r0, [r1, #1]
    4340:	4770      	bx	lr
    4342:	0000      	.short	0x0000
    4344:	20000208 	.word	0x20000208
    4348:	b570      	push	{r4, r5, r6, lr}
    434a:	780a      	ldrb	r2, [r1, #0]
    434c:	7082      	strb	r2, [r0, #2]
    434e:	b33a      	cbz	r2, 43a0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4350:	2a01      	cmp	r2, #1
    4352:	d825      	bhi.n	43a0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4354:	2313      	movs	r3, #19
    4356:	7003      	strb	r3, [r0, #0]
    4358:	2300      	movs	r3, #0
    435a:	e00a      	b.n	4372 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    435c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4360:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4364:	78a6      	ldrb	r6, [r4, #2]
    4366:	70ee      	strb	r6, [r5, #3]
    4368:	8864      	ldrh	r4, [r4, #2]
    436a:	0a24      	lsrs	r4, r4, #8
    436c:	1c5b      	adds	r3, r3, #1
    436e:	712c      	strb	r4, [r5, #4]
    4370:	b2db      	uxtb	r3, r3
    4372:	4293      	cmp	r3, r2
    4374:	d3f2      	bcc.n	435c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    4376:	2300      	movs	r3, #0
    4378:	e00b      	b.n	4392 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    437a:	bf00      	nop
    437c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4380:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4384:	792e      	ldrb	r6, [r5, #4]
    4386:	7166      	strb	r6, [r4, #5]
    4388:	88ad      	ldrh	r5, [r5, #4]
    438a:	0a2d      	lsrs	r5, r5, #8
    438c:	1c5b      	adds	r3, r3, #1
    438e:	71a5      	strb	r5, [r4, #6]
    4390:	b2db      	uxtb	r3, r3
    4392:	4293      	cmp	r3, r2
    4394:	d3f2      	bcc.n	437c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    4396:	2101      	movs	r1, #1
    4398:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    439c:	b2c0      	uxtb	r0, r0
    439e:	bd70      	pop	{r4, r5, r6, pc}
    43a0:	2000      	movs	r0, #0
    43a2:	bd70      	pop	{r4, r5, r6, pc}

000043a4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    43a4:	2840      	cmp	r0, #64	; 0x40
    43a6:	d203      	bcs.n	43b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    43a8:	1e40      	subs	r0, r0, #1
    43aa:	b2c1      	uxtb	r1, r0
    43ac:	4805      	ldr	r0, [pc, #20]	; (43c4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    43ae:	e005      	b.n	43bc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    43b0:	28ff      	cmp	r0, #255	; 0xff
    43b2:	d005      	beq.n	43c0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    43b4:	3840      	subs	r0, #64	; 0x40
    43b6:	b2c1      	uxtb	r1, r0
    43b8:	4802      	ldr	r0, [pc, #8]	; (43c4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    43ba:	3008      	adds	r0, #8
    43bc:	f009 bac3 	b.w	d946 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    43c0:	2001      	movs	r0, #1
    43c2:	4770      	bx	lr
    43c4:	200000ac 	.word	0x200000ac

000043c8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    43c8:	1e40      	subs	r0, r0, #1
    43ca:	b2c1      	uxtb	r1, r0
    43cc:	4801      	ldr	r0, [pc, #4]	; (43d4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    43ce:	f009 baba 	b.w	d946 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    43d2:	0000      	.short	0x0000
    43d4:	200000bc 	.word	0x200000bc

000043d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    43d8:	4902      	ldr	r1, [pc, #8]	; (43e4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    43da:	6802      	ldr	r2, [r0, #0]
    43dc:	610a      	str	r2, [r1, #16]
    43de:	6840      	ldr	r0, [r0, #4]
    43e0:	6148      	str	r0, [r1, #20]
    43e2:	4770      	bx	lr
    43e4:	200000ac 	.word	0x200000ac

000043e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    43e8:	4905      	ldr	r1, [pc, #20]	; (4400 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    43ea:	6802      	ldr	r2, [r0, #0]
    43ec:	600a      	str	r2, [r1, #0]
    43ee:	6840      	ldr	r0, [r0, #4]
    43f0:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    43f4:	600a      	str	r2, [r1, #0]
    43f6:	4a03      	ldr	r2, [pc, #12]	; (4404 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    43f8:	4310      	orrs	r0, r2
    43fa:	6048      	str	r0, [r1, #4]
    43fc:	4770      	bx	lr
    43fe:	0000      	.short	0x0000
    4400:	200000ac 	.word	0x200000ac
    4404:	024007f8 	.word	0x024007f8

00004408 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4408:	4807      	ldr	r0, [pc, #28]	; (4428 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    440a:	f04f 31ff 	mov.w	r1, #4294967295
    440e:	2200      	movs	r2, #0
    4410:	6001      	str	r1, [r0, #0]
    4412:	0cc9      	lsrs	r1, r1, #19
    4414:	6041      	str	r1, [r0, #4]
    4416:	f100 0108 	add.w	r1, r0, #8
    441a:	201f      	movs	r0, #31
    441c:	600a      	str	r2, [r1, #0]
    441e:	604a      	str	r2, [r1, #4]
    4420:	3108      	adds	r1, #8
    4422:	e9c1 0200 	strd	r0, r2, [r1]
    4426:	4770      	bx	lr
    4428:	200000ac 	.word	0x200000ac

0000442c <sdc_hci_cmd_cb_reset>:
    442c:	b510      	push	{r4, lr}
    442e:	f7ff ffeb 	bl	4408 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4432:	2000      	movs	r0, #0
    4434:	f7ff ff82 	bl	433c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    4438:	f00b fde1 	bl	fffe <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    443c:	4604      	mov	r4, r0
    443e:	4803      	ldr	r0, [pc, #12]	; (444c <sdc_hci_cmd_cb_reset+0x20>)
    4440:	6800      	ldr	r0, [r0, #0]
    4442:	b100      	cbz	r0, 4446 <sdc_hci_cmd_cb_reset+0x1a>
    4444:	4780      	blx	r0
    4446:	4620      	mov	r0, r4
    4448:	bd10      	pop	{r4, pc}
    444a:	0000      	.short	0x0000
    444c:	200000c4 	.word	0x200000c4

00004450 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4450:	4901      	ldr	r1, [pc, #4]	; (4458 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4452:	6008      	str	r0, [r1, #0]
    4454:	4770      	bx	lr
    4456:	0000      	.short	0x0000
    4458:	200000c4 	.word	0x200000c4

0000445c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    445c:	2102      	movs	r1, #2
    445e:	8001      	strh	r1, [r0, #0]
    4460:	8041      	strh	r1, [r0, #2]
    4462:	2100      	movs	r1, #0
    4464:	7101      	strb	r1, [r0, #4]
    4466:	2129      	movs	r1, #41	; 0x29
    4468:	7141      	strb	r1, [r0, #5]
    446a:	f249 215c 	movw	r1, #37468	; 0x925c
    446e:	80c1      	strh	r1, [r0, #6]
    4470:	4901      	ldr	r1, [pc, #4]	; (4478 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4472:	6081      	str	r1, [r0, #8]
    4474:	2000      	movs	r0, #0
    4476:	4770      	bx	lr
    4478:	928136f1 	.word	0x928136f1

0000447c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    447c:	b510      	push	{r4, lr}
    447e:	2805      	cmp	r0, #5
    4480:	d304      	bcc.n	448c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4482:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4486:	2017      	movs	r0, #23
    4488:	f7ff fe22 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    448c:	4901      	ldr	r1, [pc, #4]	; (4494 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    448e:	5c08      	ldrb	r0, [r1, r0]
    4490:	bd10      	pop	{r4, pc}
    4492:	0000      	.short	0x0000
    4494:	200015fc 	.word	0x200015fc

00004498 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    449a:	4604      	mov	r4, r0
    449c:	788a      	ldrb	r2, [r1, #2]
    449e:	7848      	ldrb	r0, [r1, #1]
    44a0:	4402      	add	r2, r0
    44a2:	2aff      	cmp	r2, #255	; 0xff
    44a4:	d902      	bls.n	44ac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    44a6:	f240 115f 	movw	r1, #351	; 0x15f
    44aa:	e01d      	b.n	44e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    44ac:	780a      	ldrb	r2, [r1, #0]
    44ae:	4282      	cmp	r2, r0
    44b0:	d902      	bls.n	44b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    44b2:	f240 1163 	movw	r1, #355	; 0x163
    44b6:	e017      	b.n	44e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    44b8:	9400      	str	r4, [sp, #0]
    44ba:	b1c4      	cbz	r4, 44ee <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x56>
    44bc:	2600      	movs	r6, #0
    44be:	784b      	ldrb	r3, [r1, #1]
    44c0:	f891 c002 	ldrb.w	ip, [r1, #2]
    44c4:	794a      	ldrb	r2, [r1, #5]
    44c6:	eb0c 0003 	add.w	r0, ip, r3
    44ca:	b2c5      	uxtb	r5, r0
    44cc:	42aa      	cmp	r2, r5
    44ce:	d900      	bls.n	44d2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    44d0:	4615      	mov	r5, r2
    44d2:	78c8      	ldrb	r0, [r1, #3]
    44d4:	42a8      	cmp	r0, r5
    44d6:	d900      	bls.n	44da <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    44d8:	4605      	mov	r5, r0
    44da:	1ce7      	adds	r7, r4, #3
    44dc:	f027 0703 	bic.w	r7, r7, #3
    44e0:	42a7      	cmp	r7, r4
    44e2:	d006      	beq.n	44f2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5a>
    44e4:	f240 1179 	movw	r1, #377	; 0x179
    44e8:	2017      	movs	r0, #23
    44ea:	f7ff fdf1 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44ee:	2601      	movs	r6, #1
    44f0:	e7e5      	b.n	44be <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x26>
    44f2:	4f15      	ldr	r7, [pc, #84]	; (4548 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>)
    44f4:	703b      	strb	r3, [r7, #0]
    44f6:	f887 c001 	strb.w	ip, [r7, #1]
    44fa:	70b8      	strb	r0, [r7, #2]
    44fc:	7908      	ldrb	r0, [r1, #4]
    44fe:	70f8      	strb	r0, [r7, #3]
    4500:	713a      	strb	r2, [r7, #4]
    4502:	4631      	mov	r1, r6
    4504:	4668      	mov	r0, sp
    4506:	f000 f90f 	bl	4728 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    450a:	2100      	movs	r1, #0
    450c:	468c      	mov	ip, r1
    450e:	9800      	ldr	r0, [sp, #0]
    4510:	1cc0      	adds	r0, r0, #3
    4512:	f020 0003 	bic.w	r0, r0, #3
    4516:	9000      	str	r0, [sp, #0]
    4518:	b95e      	cbnz	r6, 4532 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x9a>
    451a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    451e:	61d8      	str	r0, [r3, #28]
    4520:	2000      	movs	r0, #0
    4522:	e004      	b.n	452e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x96>
    4524:	69da      	ldr	r2, [r3, #28]
    4526:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    452a:	1c40      	adds	r0, r0, #1
    452c:	b2c0      	uxtb	r0, r0
    452e:	42a8      	cmp	r0, r5
    4530:	d3f8      	bcc.n	4524 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8c>
    4532:	9800      	ldr	r0, [sp, #0]
    4534:	1c49      	adds	r1, r1, #1
    4536:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    453a:	b2c9      	uxtb	r1, r1
    453c:	9000      	str	r0, [sp, #0]
    453e:	2905      	cmp	r1, #5
    4540:	d3e5      	bcc.n	450e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x76>
    4542:	1b00      	subs	r0, r0, r4
    4544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4546:	0000      	.short	0x0000
    4548:	200015fc 	.word	0x200015fc

0000454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    454c:	b570      	push	{r4, r5, r6, lr}
    454e:	4604      	mov	r4, r0
    4550:	f009 ff2f 	bl	e3b2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4554:	b108      	cbz	r0, 455a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4556:	2010      	movs	r0, #16
    4558:	bd70      	pop	{r4, r5, r6, pc}
    455a:	7825      	ldrb	r5, [r4, #0]
    455c:	f000 f920 	bl	47a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4560:	4602      	mov	r2, r0
    4562:	480c      	ldr	r0, [pc, #48]	; (4594 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4564:	8861      	ldrh	r1, [r4, #2]
    4566:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    456a:	e00e      	b.n	458a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    456c:	69c3      	ldr	r3, [r0, #28]
    456e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4572:	b143      	cbz	r3, 4586 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4574:	1c4a      	adds	r2, r1, #1
    4576:	8062      	strh	r2, [r4, #2]
    4578:	80a1      	strh	r1, [r4, #4]
    457a:	69c0      	ldr	r0, [r0, #28]
    457c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4580:	60a0      	str	r0, [r4, #8]
    4582:	2000      	movs	r0, #0
    4584:	bd70      	pop	{r4, r5, r6, pc}
    4586:	1c49      	adds	r1, r1, #1
    4588:	b289      	uxth	r1, r1
    458a:	4291      	cmp	r1, r2
    458c:	d3ee      	bcc.n	456c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    458e:	8061      	strh	r1, [r4, #2]
    4590:	2005      	movs	r0, #5
    4592:	bd70      	pop	{r4, r5, r6, pc}
    4594:	200015fc 	.word	0x200015fc

00004598 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    459c:	4607      	mov	r7, r0
    459e:	b111      	cbz	r1, 45a6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    45a0:	2000      	movs	r0, #0
    45a2:	b938      	cbnz	r0, 45b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
    45a4:	e001      	b.n	45aa <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x12>
    45a6:	2001      	movs	r0, #1
    45a8:	e7fb      	b.n	45a2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    45aa:	2901      	cmp	r1, #1
    45ac:	d002      	beq.n	45b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
    45ae:	2000      	movs	r0, #0
    45b0:	b938      	cbnz	r0, 45c2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2a>
    45b2:	e001      	b.n	45b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    45b4:	2001      	movs	r0, #1
    45b6:	e7fb      	b.n	45b0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x18>
    45b8:	2902      	cmp	r1, #2
    45ba:	d002      	beq.n	45c2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2a>
    45bc:	2000      	movs	r0, #0
    45be:	b938      	cbnz	r0, 45d0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
    45c0:	e001      	b.n	45c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2e>
    45c2:	2001      	movs	r0, #1
    45c4:	e7fb      	b.n	45be <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x26>
    45c6:	2903      	cmp	r1, #3
    45c8:	d002      	beq.n	45d0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
    45ca:	2000      	movs	r0, #0
    45cc:	b960      	cbnz	r0, 45e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    45ce:	e001      	b.n	45d4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    45d0:	2001      	movs	r0, #1
    45d2:	e7fb      	b.n	45cc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x34>
    45d4:	2904      	cmp	r1, #4
    45d6:	d007      	beq.n	45e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    45d8:	2000      	movs	r0, #0
    45da:	2800      	cmp	r0, #0
    45dc:	d01f      	beq.n	461e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x86>
    45de:	2400      	movs	r4, #0
    45e0:	4812      	ldr	r0, [pc, #72]	; (462c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x94>)
    45e2:	2901      	cmp	r1, #1
    45e4:	d002      	beq.n	45ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x54>
    45e6:	e002      	b.n	45ee <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x56>
    45e8:	2001      	movs	r0, #1
    45ea:	e7f6      	b.n	45da <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x42>
    45ec:	7804      	ldrb	r4, [r0, #0]
    45ee:	2300      	movs	r3, #0
    45f0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    45f4:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    45f8:	f810 e001 	ldrb.w	lr, [r0, r1]
    45fc:	e008      	b.n	4610 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x78>
    45fe:	1918      	adds	r0, r3, r4
    4600:	f8dc 501c 	ldr.w	r5, [ip, #28]
    4604:	b280      	uxth	r0, r0
    4606:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    460a:	b125      	cbz	r5, 4616 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x7e>
    460c:	1c5b      	adds	r3, r3, #1
    460e:	b29b      	uxth	r3, r3
    4610:	459e      	cmp	lr, r3
    4612:	d8f4      	bhi.n	45fe <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x66>
    4614:	4630      	mov	r0, r6
    4616:	8038      	strh	r0, [r7, #0]
    4618:	42b0      	cmp	r0, r6
    461a:	d102      	bne.n	4622 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8a>
    461c:	2000      	movs	r0, #0
    461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4626:	f000 b835 	b.w	4694 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    462a:	0000      	.short	0x0000
    462c:	200015fc 	.word	0x200015fc

00004630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4634:	4607      	mov	r7, r0
    4636:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    463a:	460c      	mov	r4, r1
    463c:	f243 0602 	movw	r6, #12290	; 0x3002
    4640:	38ff      	subs	r0, #255	; 0xff
    4642:	d020      	beq.n	4686 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4644:	2c05      	cmp	r4, #5
    4646:	d302      	bcc.n	464e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4648:	2007      	movs	r0, #7
    464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    464e:	4638      	mov	r0, r7
    4650:	f000 f85a 	bl	4708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4654:	0005      	movs	r5, r0
    4656:	d016      	beq.n	4686 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4658:	480c      	ldr	r0, [pc, #48]	; (468c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    465a:	4629      	mov	r1, r5
    465c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4660:	4638      	mov	r0, r7
    4662:	4790      	blx	r2
    4664:	480a      	ldr	r0, [pc, #40]	; (4690 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4666:	2100      	movs	r1, #0
    4668:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    466c:	69f0      	ldr	r0, [r6, #28]
    466e:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    4672:	4620      	mov	r0, r4
    4674:	f000 f88a 	bl	478c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4678:	4602      	mov	r2, r0
    467a:	4629      	mov	r1, r5
    467c:	68b0      	ldr	r0, [r6, #8]
    467e:	f009 fc9a 	bl	dfb6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4682:	2000      	movs	r0, #0
    4684:	e7e1      	b.n	464a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4686:	4630      	mov	r0, r6
    4688:	e7df      	b.n	464a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    468a:	0000      	.short	0x0000
    468c:	000047dc 	.word	0x000047dc
    4690:	200015fc 	.word	0x200015fc
    4694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4698:	4690      	mov	r8, r2
    469a:	460e      	mov	r6, r1
    469c:	4607      	mov	r7, r0
    469e:	f009 fcd6 	bl	e04e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    46a2:	b148      	cbz	r0, 46b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    46a4:	4816      	ldr	r0, [pc, #88]	; (4700 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    46a6:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    46aa:	69e0      	ldr	r0, [r4, #28]
    46ac:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    46b0:	b128      	cbz	r0, 46be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    46b2:	f44f 719d 	mov.w	r1, #314	; 0x13a
    46b6:	e015      	b.n	46e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    46b8:	f240 1139 	movw	r1, #313	; 0x139
    46bc:	e012      	b.n	46e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    46be:	68a0      	ldr	r0, [r4, #8]
    46c0:	2800      	cmp	r0, #0
    46c2:	d01a      	beq.n	46fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    46c4:	4630      	mov	r0, r6
    46c6:	f000 f861 	bl	478c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    46ca:	4601      	mov	r1, r0
    46cc:	68a0      	ldr	r0, [r4, #8]
    46ce:	f009 fc1a 	bl	df06 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    46d2:	0005      	movs	r5, r0
    46d4:	d010      	beq.n	46f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    46d6:	69e0      	ldr	r0, [r4, #28]
    46d8:	2e05      	cmp	r6, #5
    46da:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    46de:	d304      	bcc.n	46ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    46e0:	f240 1145 	movw	r1, #325	; 0x145
    46e4:	2017      	movs	r0, #23
    46e6:	f7ff fcf3 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ea:	4806      	ldr	r0, [pc, #24]	; (4704 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    46ec:	4642      	mov	r2, r8
    46ee:	4629      	mov	r1, r5
    46f0:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    46f4:	4638      	mov	r0, r7
    46f6:	4798      	blx	r3
    46f8:	4628      	mov	r0, r5
    46fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46fe:	0000      	.short	0x0000
    4700:	200015fc 	.word	0x200015fc
    4704:	000047c8 	.word	0x000047c8
    4708:	b570      	push	{r4, r5, r6, lr}
    470a:	460c      	mov	r4, r1
    470c:	4605      	mov	r5, r0
    470e:	f009 fc9e 	bl	e04e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4712:	2800      	cmp	r0, #0
    4714:	d005      	beq.n	4722 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4716:	4803      	ldr	r0, [pc, #12]	; (4724 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4718:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    471c:	69c0      	ldr	r0, [r0, #28]
    471e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4722:	bd70      	pop	{r4, r5, r6, pc}
    4724:	200015fc 	.word	0x200015fc
    4728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    472c:	4f16      	ldr	r7, [pc, #88]	; (4788 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    472e:	4688      	mov	r8, r1
    4730:	4605      	mov	r5, r0
    4732:	2400      	movs	r4, #0
    4734:	6828      	ldr	r0, [r5, #0]
    4736:	1cc0      	adds	r0, r0, #3
    4738:	f020 0003 	bic.w	r0, r0, #3
    473c:	6028      	str	r0, [r5, #0]
    473e:	4620      	mov	r0, r4
    4740:	f000 f824 	bl	478c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4744:	5d39      	ldrb	r1, [r7, r4]
    4746:	4341      	muls	r1, r0
    4748:	f1b8 0f00 	cmp.w	r8, #0
    474c:	d001      	beq.n	4752 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    474e:	2000      	movs	r0, #0
    4750:	e000      	b.n	4754 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4752:	6828      	ldr	r0, [r5, #0]
    4754:	9000      	str	r0, [sp, #0]
    4756:	b118      	cbz	r0, 4760 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4758:	2600      	movs	r6, #0
    475a:	b11e      	cbz	r6, 4764 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>
    475c:	2000      	movs	r0, #0
    475e:	e002      	b.n	4766 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x136>
    4760:	2601      	movs	r6, #1
    4762:	e7fa      	b.n	475a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4764:	4668      	mov	r0, sp
    4766:	f009 fbff 	bl	df68 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    476a:	b91e      	cbnz	r6, 4774 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>
    476c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4770:	9a00      	ldr	r2, [sp, #0]
    4772:	608a      	str	r2, [r1, #8]
    4774:	6829      	ldr	r1, [r5, #0]
    4776:	1c64      	adds	r4, r4, #1
    4778:	4408      	add	r0, r1
    477a:	b2e4      	uxtb	r4, r4
    477c:	6028      	str	r0, [r5, #0]
    477e:	2c05      	cmp	r4, #5
    4780:	d3d8      	bcc.n	4734 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4786:	0000      	.short	0x0000
    4788:	200015fc 	.word	0x200015fc
    478c:	4903      	ldr	r1, [pc, #12]	; (479c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    478e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4792:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4796:	1cc0      	adds	r0, r0, #3
    4798:	4008      	ands	r0, r1
    479a:	4770      	bx	lr
    479c:	000047f0 	.word	0x000047f0
    47a0:	4b08      	ldr	r3, [pc, #32]	; (47c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x194>)
    47a2:	7818      	ldrb	r0, [r3, #0]
    47a4:	7859      	ldrb	r1, [r3, #1]
    47a6:	4408      	add	r0, r1
    47a8:	b2c1      	uxtb	r1, r0
    47aa:	7898      	ldrb	r0, [r3, #2]
    47ac:	4281      	cmp	r1, r0
    47ae:	d300      	bcc.n	47b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
    47b0:	4608      	mov	r0, r1
    47b2:	78da      	ldrb	r2, [r3, #3]
    47b4:	4290      	cmp	r0, r2
    47b6:	d200      	bcs.n	47ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
    47b8:	4610      	mov	r0, r2
    47ba:	7919      	ldrb	r1, [r3, #4]
    47bc:	4288      	cmp	r0, r1
    47be:	d200      	bcs.n	47c2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x192>
    47c0:	4608      	mov	r0, r1
    47c2:	4770      	bx	lr
    47c4:	200015fc 	.word	0x200015fc
    47c8:	0000e063 	.word	0x0000e063
    47cc:	0000e063 	.word	0x0000e063
    47d0:	0000e063 	.word	0x0000e063
    47d4:	0000e063 	.word	0x0000e063
    47d8:	0000e063 	.word	0x0000e063
    47dc:	0000f837 	.word	0x0000f837
    47e0:	0000f473 	.word	0x0000f473
    47e4:	0000ebbb 	.word	0x0000ebbb
    47e8:	00010899 	.word	0x00010899
    47ec:	0001089f 	.word	0x0001089f
    47f0:	034802e8 	.word	0x034802e8
    47f4:	00800158 	.word	0x00800158
    47f8:	00000090 	.word	0x00000090

000047fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    47fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4800:	4c27      	ldr	r4, [pc, #156]	; (48a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    4802:	4607      	mov	r7, r0
    4804:	b081      	sub	sp, #4
    4806:	6820      	ldr	r0, [r4, #0]
    4808:	469a      	mov	sl, r3
    480a:	4693      	mov	fp, r2
    480c:	b158      	cbz	r0, 4826 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    480e:	7a01      	ldrb	r1, [r0, #8]
    4810:	42b9      	cmp	r1, r7
    4812:	d903      	bls.n	481c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4814:	6840      	ldr	r0, [r0, #4]
    4816:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    481a:	b140      	cbz	r0, 482e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    481c:	f243 0002 	movw	r0, #12290	; 0x3002
    4820:	b005      	add	sp, #20
    4822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4826:	21a5      	movs	r1, #165	; 0xa5
    4828:	2018      	movs	r0, #24
    482a:	f7ff fc51 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    482e:	4619      	mov	r1, r3
    4830:	9802      	ldr	r0, [sp, #8]
    4832:	f009 fc30 	bl	e096 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4836:	4680      	mov	r8, r0
    4838:	4658      	mov	r0, fp
    483a:	990e      	ldr	r1, [sp, #56]	; 0x38
    483c:	f009 fc21 	bl	e082 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4840:	4606      	mov	r6, r0
    4842:	eb08 0006 	add.w	r0, r8, r6
    4846:	1d00      	adds	r0, r0, #4
    4848:	b285      	uxth	r5, r0
    484a:	6820      	ldr	r0, [r4, #0]
    484c:	46a1      	mov	r9, r4
    484e:	4629      	mov	r1, r5
    4850:	6800      	ldr	r0, [r0, #0]
    4852:	f009 fb58 	bl	df06 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4856:	0004      	movs	r4, r0
    4858:	d01f      	beq.n	489a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    485a:	8065      	strh	r5, [r4, #2]
    485c:	8026      	strh	r6, [r4, #0]
    485e:	980e      	ldr	r0, [sp, #56]	; 0x38
    4860:	1d25      	adds	r5, r4, #4
    4862:	9000      	str	r0, [sp, #0]
    4864:	4631      	mov	r1, r6
    4866:	465a      	mov	r2, fp
    4868:	2301      	movs	r3, #1
    486a:	4628      	mov	r0, r5
    486c:	f009 faa8 	bl	ddc0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4870:	8820      	ldrh	r0, [r4, #0]
    4872:	4641      	mov	r1, r8
    4874:	4428      	add	r0, r5
    4876:	230a      	movs	r3, #10
    4878:	9a02      	ldr	r2, [sp, #8]
    487a:	f8cd a000 	str.w	sl, [sp]
    487e:	f009 fa9f 	bl	ddc0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4882:	8820      	ldrh	r0, [r4, #0]
    4884:	1941      	adds	r1, r0, r5
    4886:	4628      	mov	r0, r5
    4888:	f009 facd 	bl	de26 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    488c:	f8d9 0000 	ldr.w	r0, [r9]
    4890:	6840      	ldr	r0, [r0, #4]
    4892:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4896:	2000      	movs	r0, #0
    4898:	e7c2      	b.n	4820 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    489a:	2004      	movs	r0, #4
    489c:	e7c0      	b.n	4820 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    489e:	0000      	.short	0x0000
    48a0:	200000c8 	.word	0x200000c8

000048a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    48a4:	b570      	push	{r4, r5, r6, lr}
    48a6:	4c14      	ldr	r4, [pc, #80]	; (48f8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    48a8:	6823      	ldr	r3, [r4, #0]
    48aa:	b18b      	cbz	r3, 48d0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    48ac:	7a19      	ldrb	r1, [r3, #8]
    48ae:	4281      	cmp	r1, r0
    48b0:	d912      	bls.n	48d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    48b2:	685a      	ldr	r2, [r3, #4]
    48b4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    48b8:	b171      	cbz	r1, 48d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    48ba:	2500      	movs	r5, #0
    48bc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    48c0:	884a      	ldrh	r2, [r1, #2]
    48c2:	6818      	ldr	r0, [r3, #0]
    48c4:	f009 fb77 	bl	dfb6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    48c8:	6821      	ldr	r1, [r4, #0]
    48ca:	2000      	movs	r0, #0
    48cc:	7a0a      	ldrb	r2, [r1, #8]
    48ce:	e00c      	b.n	48ea <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    48d0:	21c8      	movs	r1, #200	; 0xc8
    48d2:	2018      	movs	r0, #24
    48d4:	f7ff fbfc 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48d8:	f243 0002 	movw	r0, #12290	; 0x3002
    48dc:	bd70      	pop	{r4, r5, r6, pc}
    48de:	684b      	ldr	r3, [r1, #4]
    48e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    48e4:	b933      	cbnz	r3, 48f4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    48e6:	1c40      	adds	r0, r0, #1
    48e8:	b2c0      	uxtb	r0, r0
    48ea:	4282      	cmp	r2, r0
    48ec:	d8f7      	bhi.n	48de <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    48ee:	6808      	ldr	r0, [r1, #0]
    48f0:	f009 fb56 	bl	dfa0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    48f4:	2000      	movs	r0, #0
    48f6:	bd70      	pop	{r4, r5, r6, pc}
    48f8:	200000c8 	.word	0x200000c8

000048fc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    48fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4900:	460d      	mov	r5, r1
    4902:	0004      	movs	r4, r0
    4904:	4690      	mov	r8, r2
    4906:	f04f 0600 	mov.w	r6, #0
    490a:	d009      	beq.n	4920 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    490c:	2700      	movs	r7, #0
    490e:	1ce0      	adds	r0, r4, #3
    4910:	f020 0003 	bic.w	r0, r0, #3
    4914:	42a0      	cmp	r0, r4
    4916:	d005      	beq.n	4924 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4918:	2186      	movs	r1, #134	; 0x86
    491a:	2018      	movs	r0, #24
    491c:	f7ff fbd8 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4920:	2701      	movs	r7, #1
    4922:	e7f4      	b.n	490e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4924:	b1cd      	cbz	r5, 495a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4926:	4611      	mov	r1, r2
    4928:	2000      	movs	r0, #0
    492a:	f009 fb1d 	bl	df68 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    492e:	300c      	adds	r0, #12
    4930:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4934:	b98f      	cbnz	r7, 495a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4936:	4f0a      	ldr	r7, [pc, #40]	; (4960 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4938:	f104 000c 	add.w	r0, r4, #12
    493c:	00aa      	lsls	r2, r5, #2
    493e:	603c      	str	r4, [r7, #0]
    4940:	7225      	strb	r5, [r4, #8]
    4942:	6060      	str	r0, [r4, #4]
    4944:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4948:	6020      	str	r0, [r4, #0]
    494a:	2100      	movs	r1, #0
    494c:	6860      	ldr	r0, [r4, #4]
    494e:	f008 fc17 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4952:	4641      	mov	r1, r8
    4954:	6838      	ldr	r0, [r7, #0]
    4956:	f009 fb07 	bl	df68 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    495a:	4630      	mov	r0, r6
    495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4960:	200000c8 	.word	0x200000c8

00004964 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4964:	4909      	ldr	r1, [pc, #36]	; (498c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4966:	b510      	push	{r4, lr}
    4968:	4602      	mov	r2, r0
    496a:	6809      	ldr	r1, [r1, #0]
    496c:	2000      	movs	r0, #0
    496e:	b149      	cbz	r1, 4984 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4970:	7a0b      	ldrb	r3, [r1, #8]
    4972:	4293      	cmp	r3, r2
    4974:	d905      	bls.n	4982 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4976:	6849      	ldr	r1, [r1, #4]
    4978:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    497c:	2900      	cmp	r1, #0
    497e:	d000      	beq.n	4982 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4980:	1d08      	adds	r0, r1, #4
    4982:	bd10      	pop	{r4, pc}
    4984:	21ee      	movs	r1, #238	; 0xee
    4986:	2018      	movs	r0, #24
    4988:	f7ff fba2 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    498c:	200000c8 	.word	0x200000c8

00004990 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4990:	490a      	ldr	r1, [pc, #40]	; (49bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4992:	b510      	push	{r4, lr}
    4994:	4602      	mov	r2, r0
    4996:	6809      	ldr	r1, [r1, #0]
    4998:	2000      	movs	r0, #0
    499a:	b159      	cbz	r1, 49b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    499c:	7a0b      	ldrb	r3, [r1, #8]
    499e:	4293      	cmp	r3, r2
    49a0:	d907      	bls.n	49b2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    49a2:	6849      	ldr	r1, [r1, #4]
    49a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    49a8:	2900      	cmp	r1, #0
    49aa:	d002      	beq.n	49b2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    49ac:	f831 0b04 	ldrh.w	r0, [r1], #4
    49b0:	4408      	add	r0, r1
    49b2:	bd10      	pop	{r4, pc}
    49b4:	21fc      	movs	r1, #252	; 0xfc
    49b6:	2018      	movs	r0, #24
    49b8:	f7ff fb8a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49bc:	200000c8 	.word	0x200000c8
    49c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49c4:	4e1c      	ldr	r6, [pc, #112]	; (4a38 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
    49c6:	6845      	ldr	r5, [r0, #4]
    49c8:	4604      	mov	r4, r0
    49ca:	2200      	movs	r2, #0
    49cc:	b1a1      	cbz	r1, 49f8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    49ce:	2001      	movs	r0, #1
    49d0:	7060      	strb	r0, [r4, #1]
    49d2:	8870      	ldrh	r0, [r6, #2]
    49d4:	0883      	lsrs	r3, r0, #2
    49d6:	2000      	movs	r0, #0
    49d8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    49dc:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    49e0:	830a      	strh	r2, [r1, #24]
    49e2:	840b      	strh	r3, [r1, #32]
    49e4:	fb00 5103 	mla	r1, r0, r3, r5
    49e8:	6071      	str	r1, [r6, #4]
    49ea:	1821      	adds	r1, r4, r0
    49ec:	1c40      	adds	r0, r0, #1
    49ee:	750a      	strb	r2, [r1, #20]
    49f0:	2804      	cmp	r0, #4
    49f2:	d3f1      	bcc.n	49d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    49f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49f8:	7062      	strb	r2, [r4, #1]
    49fa:	2000      	movs	r0, #0
    49fc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4a00:	830a      	strh	r2, [r1, #24]
    4a02:	840a      	strh	r2, [r1, #32]
    4a04:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4a08:	604a      	str	r2, [r1, #4]
    4a0a:	1821      	adds	r1, r4, r0
    4a0c:	1c40      	adds	r0, r0, #1
    4a0e:	750a      	strb	r2, [r1, #20]
    4a10:	2804      	cmp	r0, #4
    4a12:	d3f3      	bcc.n	49fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4a14:	8870      	ldrh	r0, [r6, #2]
    4a16:	f009 fbbd 	bl	e194 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x130>
    4a1a:	4607      	mov	r7, r0
    4a1c:	8870      	ldrh	r0, [r6, #2]
    4a1e:	f009 fbc0 	bl	e1a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13e>
    4a22:	6065      	str	r5, [r4, #4]
    4a24:	8420      	strh	r0, [r4, #32]
    4a26:	1829      	adds	r1, r5, r0
    4a28:	60a1      	str	r1, [r4, #8]
    4a2a:	8467      	strh	r7, [r4, #34]	; 0x22
    4a2c:	60e5      	str	r5, [r4, #12]
    4a2e:	84a0      	strh	r0, [r4, #36]	; 0x24
    4a30:	6121      	str	r1, [r4, #16]
    4a32:	84e7      	strh	r7, [r4, #38]	; 0x26
    4a34:	e7de      	b.n	49f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
    4a36:	0000      	.short	0x0000
    4a38:	200000cc 	.word	0x200000cc

00004a3c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a40:	b180      	cbz	r0, 4a64 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    4a42:	2600      	movs	r6, #0
    4a44:	4411      	add	r1, r2
    4a46:	b2cf      	uxtb	r7, r1
    4a48:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4ae8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xac>
    4a4c:	1cc1      	adds	r1, r0, #3
    4a4e:	2400      	movs	r4, #0
    4a50:	f021 0103 	bic.w	r1, r1, #3
    4a54:	f888 7000 	strb.w	r7, [r8]
    4a58:	4281      	cmp	r1, r0
    4a5a:	d005      	beq.n	4a68 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2c>
    4a5c:	214e      	movs	r1, #78	; 0x4e
    4a5e:	2009      	movs	r0, #9
    4a60:	f7ff fb36 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a64:	2601      	movs	r6, #1
    4a66:	e7ed      	b.n	4a44 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4a68:	2b1f      	cmp	r3, #31
    4a6a:	d804      	bhi.n	4a76 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    4a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4a70:	ea01 0583 	and.w	r5, r1, r3, lsl #2
    4a74:	e009      	b.n	4a8a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4e>
    4a76:	0059      	lsls	r1, r3, #1
    4a78:	2bff      	cmp	r3, #255	; 0xff
    4a7a:	d90c      	bls.n	4a96 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5a>
    4a7c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4a80:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4a84:	d200      	bcs.n	4a88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4a86:	4611      	mov	r1, r2
    4a88:	b28d      	uxth	r5, r1
    4a8a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4a8e:	1ced      	adds	r5, r5, #3
    4a90:	400d      	ands	r5, r1
    4a92:	b136      	cbz	r6, 4aa2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    4a94:	e009      	b.n	4aaa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6e>
    4a96:	227c      	movs	r2, #124	; 0x7c
    4a98:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4a9c:	d3f4      	bcc.n	4a88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4a9e:	217c      	movs	r1, #124	; 0x7c
    4aa0:	e7f2      	b.n	4a88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4aa2:	f8c8 0004 	str.w	r0, [r8, #4]
    4aa6:	f8a8 5002 	strh.w	r5, [r8, #2]
    4aaa:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    4aae:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
    4ab2:	2100      	movs	r1, #0
    4ab4:	f04f 0901 	mov.w	r9, #1
    4ab8:	e00f      	b.n	4ada <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9e>
    4aba:	b95e      	cbnz	r6, 4ad4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x98>
    4abc:	f8d8 4004 	ldr.w	r4, [r8, #4]
    4ac0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    4ac4:	eb00 0c02 	add.w	ip, r0, r2
    4ac8:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
    4acc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    4ad0:	f8c3 c004 	str.w	ip, [r3, #4]
    4ad4:	1c49      	adds	r1, r1, #1
    4ad6:	442a      	add	r2, r5
    4ad8:	b2c9      	uxtb	r1, r1
    4ada:	42b9      	cmp	r1, r7
    4adc:	d3ed      	bcc.n	4aba <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x7e>
    4ade:	1dd2      	adds	r2, r2, #7
    4ae0:	f022 0007 	bic.w	r0, r2, #7
    4ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ae8:	200000cc 	.word	0x200000cc

00004aec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4aec:	b570      	push	{r4, r5, r6, lr}
    4aee:	4811      	ldr	r0, [pc, #68]	; (4b34 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    4af0:	2400      	movs	r4, #0
    4af2:	4621      	mov	r1, r4
    4af4:	7802      	ldrb	r2, [r0, #0]
    4af6:	e00c      	b.n	4b12 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
    4af8:	6845      	ldr	r5, [r0, #4]
    4afa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    4afe:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    4b02:	b123      	cbz	r3, 4b0e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
    4b04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4b08:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
    4b0c:	e003      	b.n	4b16 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
    4b0e:	1c49      	adds	r1, r1, #1
    4b10:	b2c9      	uxtb	r1, r1
    4b12:	4291      	cmp	r1, r2
    4b14:	d3f0      	bcc.n	4af8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4b16:	b144      	cbz	r4, 4b2a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
    4b18:	2500      	movs	r5, #0
    4b1a:	70a5      	strb	r5, [r4, #2]
    4b1c:	2101      	movs	r1, #1
    4b1e:	4620      	mov	r0, r4
    4b20:	f7ff ff4e 	bl	49c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4b24:	7025      	strb	r5, [r4, #0]
    4b26:	4620      	mov	r0, r4
    4b28:	bd70      	pop	{r4, r5, r6, pc}
    4b2a:	21a9      	movs	r1, #169	; 0xa9
    4b2c:	2009      	movs	r0, #9
    4b2e:	f7ff facf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b32:	0000      	.short	0x0000
    4b34:	200000cc 	.word	0x200000cc

00004b38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4b38:	4804      	ldr	r0, [pc, #16]	; (4b4c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4b3a:	b510      	push	{r4, lr}
    4b3c:	8840      	ldrh	r0, [r0, #2]
    4b3e:	0884      	lsrs	r4, r0, #2
    4b40:	f009 fb2f 	bl	e1a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13e>
    4b44:	4284      	cmp	r4, r0
    4b46:	d300      	bcc.n	4b4a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4b48:	4620      	mov	r0, r4
    4b4a:	bd10      	pop	{r4, pc}
    4b4c:	200000cc 	.word	0x200000cc

00004b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4b50:	4801      	ldr	r0, [pc, #4]	; (4b58 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    4b52:	7840      	ldrb	r0, [r0, #1]
    4b54:	4770      	bx	lr
    4b56:	0000      	.short	0x0000
    4b58:	200000d4 	.word	0x200000d4

00004b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4b5c:	4801      	ldr	r0, [pc, #4]	; (4b64 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    4b5e:	6840      	ldr	r0, [r0, #4]
    4b60:	4770      	bx	lr
    4b62:	0000      	.short	0x0000
    4b64:	200000d4 	.word	0x200000d4

00004b68 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b6c:	460c      	mov	r4, r1
    4b6e:	4607      	mov	r7, r0
    4b70:	4616      	mov	r6, r2
    4b72:	212e      	movs	r1, #46	; 0x2e
    4b74:	4610      	mov	r0, r2
    4b76:	460d      	mov	r5, r1
    4b78:	4622      	mov	r2, r4
    4b7a:	f009 f983 	bl	de84 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4b7e:	4680      	mov	r8, r0
    4b80:	b157      	cbz	r7, 4b98 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4b82:	4638      	mov	r0, r7
    4b84:	4641      	mov	r1, r8
    4b86:	4632      	mov	r2, r6
    4b88:	462b      	mov	r3, r5
    4b8a:	9400      	str	r4, [sp, #0]
    4b8c:	f009 f918 	bl	ddc0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4b90:	4803      	ldr	r0, [pc, #12]	; (4ba0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4b92:	6047      	str	r7, [r0, #4]
    4b94:	7004      	strb	r4, [r0, #0]
    4b96:	7046      	strb	r6, [r0, #1]
    4b98:	4640      	mov	r0, r8
    4b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b9e:	0000      	.short	0x0000
    4ba0:	200000d4 	.word	0x200000d4

00004ba4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4ba4:	4802      	ldr	r0, [pc, #8]	; (4bb0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4ba6:	7842      	ldrb	r2, [r0, #1]
    4ba8:	7801      	ldrb	r1, [r0, #0]
    4baa:	6840      	ldr	r0, [r0, #4]
    4bac:	f7ff bfdc 	b.w	4b68 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4bb0:	200000d4 	.word	0x200000d4

00004bb4 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>:
    4bb4:	4b03      	ldr	r3, [pc, #12]	; (4bc4 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI+0x10>)
    4bb6:	2100      	movs	r1, #0
    4bb8:	7818      	ldrb	r0, [r3, #0]
    4bba:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    4bbe:	6858      	ldr	r0, [r3, #4]
    4bc0:	f008 bade 	b.w	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4bc4:	200000dc 	.word	0x200000dc

00004bc8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>:
    4bc8:	b510      	push	{r4, lr}
    4bca:	460c      	mov	r4, r1
    4bcc:	b110      	cbz	r0, 4bd4 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xc>
    4bce:	2200      	movs	r2, #0
    4bd0:	b112      	cbz	r2, 4bd8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x10>
    4bd2:	e00f      	b.n	4bf4 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x2c>
    4bd4:	2201      	movs	r2, #1
    4bd6:	e7fb      	b.n	4bd0 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x8>
    4bd8:	1cc1      	adds	r1, r0, #3
    4bda:	f021 0103 	bic.w	r1, r1, #3
    4bde:	4281      	cmp	r1, r0
    4be0:	d003      	beq.n	4bea <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x22>
    4be2:	2120      	movs	r1, #32
    4be4:	2041      	movs	r0, #65	; 0x41
    4be6:	f7ff fa73 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bea:	4904      	ldr	r1, [pc, #16]	; (4bfc <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x34>)
    4bec:	6048      	str	r0, [r1, #4]
    4bee:	700c      	strb	r4, [r1, #0]
    4bf0:	f7ff ffe0 	bl	4bb4 <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>
    4bf4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    4bf8:	bd10      	pop	{r4, pc}
    4bfa:	0000      	.short	0x0000
    4bfc:	200000dc 	.word	0x200000dc
    4c00:	b530      	push	{r4, r5, lr}
    4c02:	490d      	ldr	r1, [pc, #52]	; (4c38 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x70>)
    4c04:	2001      	movs	r0, #1
    4c06:	6048      	str	r0, [r1, #4]
    4c08:	1e82      	subs	r2, r0, #2
    4c0a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4c0e:	490b      	ldr	r1, [pc, #44]	; (4c3c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x74>)
    4c10:	6088      	str	r0, [r1, #8]
    4c12:	2300      	movs	r3, #0
    4c14:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4c18:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4c1c:	4c08      	ldr	r4, [pc, #32]	; (4c40 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x78>)
    4c1e:	6023      	str	r3, [r4, #0]
    4c20:	1d25      	adds	r5, r4, #4
    4c22:	6028      	str	r0, [r5, #0]
    4c24:	6088      	str	r0, [r1, #8]
    4c26:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4c2a:	6023      	str	r3, [r4, #0]
    4c2c:	6028      	str	r0, [r5, #0]
    4c2e:	4906      	ldr	r1, [pc, #24]	; (4c48 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x80>)
    4c30:	4804      	ldr	r0, [pc, #16]	; (4c44 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x7c>)
    4c32:	6008      	str	r0, [r1, #0]
    4c34:	bd30      	pop	{r4, r5, pc}
    4c36:	0000      	.short	0x0000
    4c38:	4000e000 	.word	0x4000e000
    4c3c:	4000f000 	.word	0x4000f000
    4c40:	4000f500 	.word	0x4000f500
    4c44:	3ff60000 	.word	0x3ff60000
    4c48:	4001f508 	.word	0x4001f508

00004c4c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4c4c:	b510      	push	{r4, lr}
    4c4e:	4604      	mov	r4, r0
    4c50:	f7ff ffd6 	bl	4c00 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x38>
    4c54:	f009 fb7a 	bl	e34c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4c58:	f000 f888 	bl	4d6c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4c5c:	4905      	ldr	r1, [pc, #20]	; (4c74 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4c5e:	4804      	ldr	r0, [pc, #16]	; (4c70 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4c60:	6008      	str	r0, [r1, #0]
    4c62:	4620      	mov	r0, r4
    4c64:	f000 f8b8 	bl	4dd8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c6c:	f000 b8d0 	b.w	4e10 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4c70:	3ff60000 	.word	0x3ff60000
    4c74:	4001f508 	.word	0x4001f508
    4c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c7c:	4682      	mov	sl, r0
    4c7e:	4838      	ldr	r0, [pc, #224]	; (4d60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4c80:	f008 f96d 	bl	cf5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4c84:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4d60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4c88:	b128      	cbz	r0, 4c96 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4c8a:	2601      	movs	r6, #1
    4c8c:	f10b 0001 	add.w	r0, fp, #1
    4c90:	21ff      	movs	r1, #255	; 0xff
    4c92:	7001      	strb	r1, [r0, #0]
    4c94:	e000      	b.n	4c98 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4c96:	2600      	movs	r6, #0
    4c98:	f44f 7580 	mov.w	r5, #256	; 0x100
    4c9c:	4c31      	ldr	r4, [pc, #196]	; (4d64 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4c9e:	f04f 0800 	mov.w	r8, #0
    4ca2:	1d2f      	adds	r7, r5, #4
    4ca4:	2101      	movs	r1, #1
    4ca6:	6061      	str	r1, [r4, #4]
    4ca8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4cac:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4cb0:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    4cb4:	6021      	str	r1, [r4, #0]
    4cb6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4d68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4cba:	e01c      	b.n	4cf6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4cbc:	f8d9 0000 	ldr.w	r0, [r9]
    4cc0:	06c0      	lsls	r0, r0, #27
    4cc2:	d518      	bpl.n	4cf6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4cc4:	200e      	movs	r0, #14
    4cc6:	f009 fb50 	bl	e36a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4cca:	f3ef 8010 	mrs	r0, PRIMASK
    4cce:	9000      	str	r0, [sp, #0]
    4cd0:	b672      	cpsid	i
    4cd2:	2103      	movs	r1, #3
    4cd4:	4620      	mov	r0, r4
    4cd6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4cda:	4629      	mov	r1, r5
    4cdc:	f009 fb52 	bl	e384 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4ce0:	b930      	cbnz	r0, 4cf0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4ce2:	4639      	mov	r1, r7
    4ce4:	4620      	mov	r0, r4
    4ce6:	f009 fb4d 	bl	e384 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4cea:	b908      	cbnz	r0, 4cf0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4cec:	f7fe ff1e 	bl	3b2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4cf0:	9800      	ldr	r0, [sp, #0]
    4cf2:	b900      	cbnz	r0, 4cf6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4cf4:	b662      	cpsie	i
    4cf6:	4629      	mov	r1, r5
    4cf8:	4620      	mov	r0, r4
    4cfa:	f009 fb43 	bl	e384 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4cfe:	b928      	cbnz	r0, 4d0c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    4d00:	4639      	mov	r1, r7
    4d02:	4620      	mov	r0, r4
    4d04:	f009 fb3e 	bl	e384 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4d08:	2800      	cmp	r0, #0
    4d0a:	d0d7      	beq.n	4cbc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    4d0c:	4639      	mov	r1, r7
    4d0e:	4620      	mov	r0, r4
    4d10:	f009 fb38 	bl	e384 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4d14:	2800      	cmp	r0, #0
    4d16:	d1c5      	bne.n	4ca4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    4d18:	bb06      	cbnz	r6, 4d5c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4d1a:	f89b 1001 	ldrb.w	r1, [fp, #1]
    4d1e:	f88d 1000 	strb.w	r1, [sp]
    4d22:	9900      	ldr	r1, [sp, #0]
    4d24:	9100      	str	r1, [sp, #0]
    4d26:	f89d 1000 	ldrb.w	r1, [sp]
    4d2a:	b109      	cbz	r1, 4d30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    4d2c:	2501      	movs	r5, #1
    4d2e:	e000      	b.n	4d32 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    4d30:	2500      	movs	r5, #0
    4d32:	f10b 0001 	add.w	r0, fp, #1
    4d36:	f880 8000 	strb.w	r8, [r0]
    4d3a:	2003      	movs	r0, #3
    4d3c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4d40:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4d44:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4d48:	200e      	movs	r0, #14
    4d4a:	f009 fb0e 	bl	e36a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4d4e:	4804      	ldr	r0, [pc, #16]	; (4d60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4d50:	f008 f91c 	bl	cf8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4d54:	b115      	cbz	r5, 4d5c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4d56:	2011      	movs	r0, #17
    4d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d5c:	2000      	movs	r0, #0
    4d5e:	e7fb      	b.n	4d58 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    4d60:	2000020a 	.word	0x2000020a
    4d64:	4000e000 	.word	0x4000e000
    4d68:	e000ed10 	.word	0xe000ed10

00004d6c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4d6c:	b510      	push	{r4, lr}
    4d6e:	4806      	ldr	r0, [pc, #24]	; (4d88 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4d70:	f008 f908 	bl	cf84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4d74:	b118      	cbz	r0, 4d7e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    4d76:	2127      	movs	r1, #39	; 0x27
    4d78:	201d      	movs	r0, #29
    4d7a:	f7ff f9a9 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d7e:	4802      	ldr	r0, [pc, #8]	; (4d88 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4d80:	2100      	movs	r1, #0
    4d82:	7041      	strb	r1, [r0, #1]
    4d84:	bd10      	pop	{r4, pc}
    4d86:	0000      	.short	0x0000
    4d88:	2000020a 	.word	0x2000020a

00004d8c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4d8c:	b570      	push	{r4, r5, r6, lr}
    4d8e:	4911      	ldr	r1, [pc, #68]	; (4dd4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4d90:	680a      	ldr	r2, [r1, #0]
    4d92:	b1ea      	cbz	r2, 4dd0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4d94:	2300      	movs	r3, #0
    4d96:	461d      	mov	r5, r3
    4d98:	2401      	movs	r4, #1
    4d9a:	684a      	ldr	r2, [r1, #4]
    4d9c:	1c52      	adds	r2, r2, #1
    4d9e:	604a      	str	r2, [r1, #4]
    4da0:	2a0c      	cmp	r2, #12
    4da2:	d300      	bcc.n	4da6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4da4:	604d      	str	r5, [r1, #4]
    4da6:	790e      	ldrb	r6, [r1, #4]
    4da8:	fa04 f206 	lsl.w	r2, r4, r6
    4dac:	680e      	ldr	r6, [r1, #0]
    4dae:	4216      	tst	r6, r2
    4db0:	d00b      	beq.n	4dca <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4db2:	f3ef 8310 	mrs	r3, PRIMASK
    4db6:	b672      	cpsid	i
    4db8:	680c      	ldr	r4, [r1, #0]
    4dba:	4394      	bics	r4, r2
    4dbc:	600c      	str	r4, [r1, #0]
    4dbe:	b903      	cbnz	r3, 4dc2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4dc0:	b662      	cpsie	i
    4dc2:	6849      	ldr	r1, [r1, #4]
    4dc4:	6001      	str	r1, [r0, #0]
    4dc6:	2000      	movs	r0, #0
    4dc8:	bd70      	pop	{r4, r5, r6, pc}
    4dca:	1c5b      	adds	r3, r3, #1
    4dcc:	2b0c      	cmp	r3, #12
    4dce:	d3e4      	bcc.n	4d9a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4dd0:	2005      	movs	r0, #5
    4dd2:	bd70      	pop	{r4, r5, r6, pc}
    4dd4:	200000e4 	.word	0x200000e4

00004dd8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4dd8:	4802      	ldr	r0, [pc, #8]	; (4de4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4dda:	2100      	movs	r1, #0
    4ddc:	6001      	str	r1, [r0, #0]
    4dde:	6041      	str	r1, [r0, #4]
    4de0:	4770      	bx	lr
    4de2:	0000      	.short	0x0000
    4de4:	200000e4 	.word	0x200000e4

00004de8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4de8:	b510      	push	{r4, lr}
    4dea:	4c08      	ldr	r4, [pc, #32]	; (4e0c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4dec:	7861      	ldrb	r1, [r4, #1]
    4dee:	b109      	cbz	r1, 4df4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4df0:	200f      	movs	r0, #15
    4df2:	bd10      	pop	{r4, pc}
    4df4:	f7fe fe26 	bl	3a44 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4df8:	7020      	strb	r0, [r4, #0]
    4dfa:	28ff      	cmp	r0, #255	; 0xff
    4dfc:	d001      	beq.n	4e02 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4dfe:	2000      	movs	r0, #0
    4e00:	bd10      	pop	{r4, pc}
    4e02:	2178      	movs	r1, #120	; 0x78
    4e04:	201f      	movs	r0, #31
    4e06:	f7ff f963 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e0a:	0000      	.short	0x0000
    4e0c:	20000000 	.word	0x20000000

00004e10 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4e10:	4901      	ldr	r1, [pc, #4]	; (4e18 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4e12:	2000      	movs	r0, #0
    4e14:	7048      	strb	r0, [r1, #1]
    4e16:	4770      	bx	lr
    4e18:	20000000 	.word	0x20000000

00004e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    4e1c:	4905      	ldr	r1, [pc, #20]	; (4e34 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    4e1e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    4e20:	4282      	cmp	r2, r0
    4e22:	bf18      	it	ne
    4e24:	4770      	bxne	lr
    4e26:	2000      	movs	r0, #0
    4e28:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    4e2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4e30:	8588      	strh	r0, [r1, #44]	; 0x2c
    4e32:	4770      	bx	lr
    4e34:	200016d0 	.word	0x200016d0

00004e38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4e38:	4a0a      	ldr	r2, [pc, #40]	; (4e64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4e3a:	b110      	cbz	r0, 4e42 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4e3c:	2801      	cmp	r0, #1
    4e3e:	d007      	beq.n	4e50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4e40:	e00e      	b.n	4e60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4e42:	7850      	ldrb	r0, [r2, #1]
    4e44:	b160      	cbz	r0, 4e60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4e46:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4e4a:	6008      	str	r0, [r1, #0]
    4e4c:	88d0      	ldrh	r0, [r2, #6]
    4e4e:	e004      	b.n	4e5a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4e50:	7810      	ldrb	r0, [r2, #0]
    4e52:	b128      	cbz	r0, 4e60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4e54:	6890      	ldr	r0, [r2, #8]
    4e56:	6008      	str	r0, [r1, #0]
    4e58:	8990      	ldrh	r0, [r2, #12]
    4e5a:	8088      	strh	r0, [r1, #4]
    4e5c:	2001      	movs	r0, #1
    4e5e:	4770      	bx	lr
    4e60:	2000      	movs	r0, #0
    4e62:	4770      	bx	lr
    4e64:	2000020c 	.word	0x2000020c

00004e68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4e68:	4a09      	ldr	r2, [pc, #36]	; (4e90 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
    4e6a:	2301      	movs	r3, #1
    4e6c:	b140      	cbz	r0, 4e80 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
    4e6e:	2801      	cmp	r0, #1
    4e70:	bf18      	it	ne
    4e72:	4770      	bxne	lr
    4e74:	7013      	strb	r3, [r2, #0]
    4e76:	6808      	ldr	r0, [r1, #0]
    4e78:	6090      	str	r0, [r2, #8]
    4e7a:	8888      	ldrh	r0, [r1, #4]
    4e7c:	8190      	strh	r0, [r2, #12]
    4e7e:	4770      	bx	lr
    4e80:	7053      	strb	r3, [r2, #1]
    4e82:	6808      	ldr	r0, [r1, #0]
    4e84:	f8c2 0002 	str.w	r0, [r2, #2]
    4e88:	8888      	ldrh	r0, [r1, #4]
    4e8a:	80d0      	strh	r0, [r2, #6]
    4e8c:	4770      	bx	lr
    4e8e:	0000      	.short	0x0000
    4e90:	2000020c 	.word	0x2000020c

00004e94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4e94:	4906      	ldr	r1, [pc, #24]	; (4eb0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4e96:	b110      	cbz	r0, 4e9e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4e98:	2801      	cmp	r0, #1
    4e9a:	d003      	beq.n	4ea4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4e9c:	e006      	b.n	4eac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4e9e:	7848      	ldrb	r0, [r1, #1]
    4ea0:	b910      	cbnz	r0, 4ea8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4ea2:	e003      	b.n	4eac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4ea4:	7808      	ldrb	r0, [r1, #0]
    4ea6:	b108      	cbz	r0, 4eac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4ea8:	2001      	movs	r0, #1
    4eaa:	4770      	bx	lr
    4eac:	2000      	movs	r0, #0
    4eae:	4770      	bx	lr
    4eb0:	2000020c 	.word	0x2000020c

00004eb4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4eb4:	4901      	ldr	r1, [pc, #4]	; (4ebc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4eb6:	7708      	strb	r0, [r1, #28]
    4eb8:	4770      	bx	lr
    4eba:	0000      	.short	0x0000
    4ebc:	20000df2 	.word	0x20000df2

00004ec0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    4ec0:	4602      	mov	r2, r0
    4ec2:	4807      	ldr	r0, [pc, #28]	; (4ee0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    4ec4:	b510      	push	{r4, lr}
    4ec6:	7800      	ldrb	r0, [r0, #0]
    4ec8:	b138      	cbz	r0, 4eda <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    4eca:	4806      	ldr	r0, [pc, #24]	; (4ee4 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    4ecc:	7881      	ldrb	r1, [r0, #2]
    4ece:	b121      	cbz	r1, 4eda <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    4ed0:	1cc0      	adds	r0, r0, #3
    4ed2:	f005 fdf3 	bl	aabc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    4ed6:	2001      	movs	r0, #1
    4ed8:	bd10      	pop	{r4, pc}
    4eda:	2000      	movs	r0, #0
    4edc:	bd10      	pop	{r4, pc}
    4ede:	0000      	.short	0x0000
    4ee0:	200001f8 	.word	0x200001f8
    4ee4:	20001712 	.word	0x20001712

00004ee8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    4ee8:	4800      	ldr	r0, [pc, #0]	; (4eec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    4eea:	4770      	bx	lr
    4eec:	200018e5 	.word	0x200018e5

00004ef0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    4ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ef4:	4c12      	ldr	r4, [pc, #72]	; (4f40 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x50>)
    4ef6:	2600      	movs	r6, #0
    4ef8:	4635      	mov	r5, r6
    4efa:	78a0      	ldrb	r0, [r4, #2]
    4efc:	2800      	cmp	r0, #0
    4efe:	bf8c      	ite	hi
    4f00:	4f10      	ldrhi	r7, [pc, #64]	; (4f44 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x54>)
    4f02:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f06:	1960      	adds	r0, r4, r5
    4f08:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    4f0c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    4f10:	2a01      	cmp	r2, #1
    4f12:	d002      	beq.n	4f1a <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x2a>
    4f14:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    4f18:	b158      	cbz	r0, 4f32 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x42>
    4f1a:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
    4f1e:	55bd      	strb	r5, [r7, r6]
    4f20:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    4f24:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    4f28:	4630      	mov	r0, r6
    4f2a:	1c73      	adds	r3, r6, #1
    4f2c:	b2de      	uxtb	r6, r3
    4f2e:	f007 f88d 	bl	c04c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    4f32:	1c68      	adds	r0, r5, #1
    4f34:	b2c5      	uxtb	r5, r0
    4f36:	78a0      	ldrb	r0, [r4, #2]
    4f38:	42a8      	cmp	r0, r5
    4f3a:	d8e4      	bhi.n	4f06 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x16>
    4f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f40:	20001712 	.word	0x20001712
    4f44:	200001fc 	.word	0x200001fc

00004f48 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    4f48:	4904      	ldr	r1, [pc, #16]	; (4f5c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    4f4a:	788a      	ldrb	r2, [r1, #2]
    4f4c:	4282      	cmp	r2, r0
    4f4e:	bf86      	itte	hi
    4f50:	4408      	addhi	r0, r1
    4f52:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    4f56:	2000      	movls	r0, #0
    4f58:	4770      	bx	lr
    4f5a:	0000      	.short	0x0000
    4f5c:	20001712 	.word	0x20001712

00004f60 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    4f60:	4904      	ldr	r1, [pc, #16]	; (4f74 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    4f62:	788a      	ldrb	r2, [r1, #2]
    4f64:	4282      	cmp	r2, r0
    4f66:	bf86      	itte	hi
    4f68:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    4f6c:	3083      	addhi	r0, #131	; 0x83
    4f6e:	2000      	movls	r0, #0
    4f70:	4770      	bx	lr
    4f72:	0000      	.short	0x0000
    4f74:	20001712 	.word	0x20001712

00004f78 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    4f78:	4a05      	ldr	r2, [pc, #20]	; (4f90 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    4f7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4f7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    4f82:	6802      	ldr	r2, [r0, #0]
    4f84:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    4f88:	8880      	ldrh	r0, [r0, #4]
    4f8a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    4f8e:	4770      	bx	lr
    4f90:	20001712 	.word	0x20001712

00004f94 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    4f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f98:	4c13      	ldr	r4, [pc, #76]	; (4fe8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x54>)
    4f9a:	4606      	mov	r6, r0
    4f9c:	2500      	movs	r5, #0
    4f9e:	78a0      	ldrb	r0, [r4, #2]
    4fa0:	2800      	cmp	r0, #0
    4fa2:	bf98      	it	ls
    4fa4:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fa8:	b2c0      	uxtb	r0, r0
    4faa:	42a8      	cmp	r0, r5
    4fac:	d914      	bls.n	4fd8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    4fae:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4fb2:	3083      	adds	r0, #131	; 0x83
    4fb4:	d010      	beq.n	4fd8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    4fb6:	1961      	adds	r1, r4, r5
    4fb8:	f891 1143 	ldrb.w	r1, [r1, #323]	; 0x143
    4fbc:	b961      	cbnz	r1, 4fd8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x44>
    4fbe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4fc2:	eb04 0741 	add.w	r7, r4, r1, lsl #1
    4fc6:	f207 110b 	addw	r1, r7, #267	; 0x10b
    4fca:	4632      	mov	r2, r6
    4fcc:	f009 fa2e 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    4fd0:	f8b7 010f 	ldrh.w	r0, [r7, #271]	; 0x10f
    4fd4:	f8a7 010f 	strh.w	r0, [r7, #271]	; 0x10f
    4fd8:	1c68      	adds	r0, r5, #1
    4fda:	b2c5      	uxtb	r5, r0
    4fdc:	78a0      	ldrb	r0, [r4, #2]
    4fde:	42a8      	cmp	r0, r5
    4fe0:	d8e2      	bhi.n	4fa8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x14>
    4fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fe6:	0000      	.short	0x0000
    4fe8:	20001712 	.word	0x20001712

00004fec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    4fec:	4904      	ldr	r1, [pc, #16]	; (5000 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    4fee:	788a      	ldrb	r2, [r1, #2]
    4ff0:	4282      	cmp	r2, r0
    4ff2:	bf86      	itte	hi
    4ff4:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    4ff8:	1cc0      	addhi	r0, r0, #3
    4ffa:	2000      	movls	r0, #0
    4ffc:	4770      	bx	lr
    4ffe:	0000      	.short	0x0000
    5000:	20001712 	.word	0x20001712

00005004 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5004:	4908      	ldr	r1, [pc, #32]	; (5028 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5006:	788a      	ldrb	r2, [r1, #2]
    5008:	4282      	cmp	r2, r0
    500a:	d903      	bls.n	5014 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    500c:	180a      	adds	r2, r1, r0
    500e:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5012:	b10a      	cbz	r2, 5018 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5014:	2000      	movs	r0, #0
    5016:	4770      	bx	lr
    5018:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    501c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5020:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5024:	4770      	bx	lr
    5026:	0000      	.short	0x0000
    5028:	20001712 	.word	0x20001712

0000502c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    502c:	b510      	push	{r4, lr}
    502e:	f240 12d3 	movw	r2, #467	; 0x1d3
    5032:	2100      	movs	r1, #0
    5034:	4807      	ldr	r0, [pc, #28]	; (5054 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    5036:	f008 f8a3 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    503a:	2208      	movs	r2, #8
    503c:	21ff      	movs	r1, #255	; 0xff
    503e:	4806      	ldr	r0, [pc, #24]	; (5058 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5040:	f008 f89e 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5044:	4805      	ldr	r0, [pc, #20]	; (505c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5046:	2100      	movs	r1, #0
    5048:	7001      	strb	r1, [r0, #0]
    504a:	7041      	strb	r1, [r0, #1]
    504c:	f44f 7161 	mov.w	r1, #900	; 0x384
    5050:	8041      	strh	r1, [r0, #2]
    5052:	bd10      	pop	{r4, pc}
    5054:	20001712 	.word	0x20001712
    5058:	200001fc 	.word	0x200001fc
    505c:	200001f8 	.word	0x200001f8

00005060 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>:
    5060:	b570      	push	{r4, r5, r6, lr}
    5062:	460c      	mov	r4, r1
    5064:	4605      	mov	r5, r0
    5066:	f005 fe4f 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    506a:	f005 fd3f 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    506e:	480a      	ldr	r0, [pc, #40]	; (5098 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x38>)
    5070:	462a      	mov	r2, r5
    5072:	7800      	ldrb	r0, [r0, #0]
    5074:	b168      	cbz	r0, 5092 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    5076:	4b09      	ldr	r3, [pc, #36]	; (509c <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x3c>)
    5078:	7899      	ldrb	r1, [r3, #2]
    507a:	b151      	cbz	r1, 5092 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI+0x32>
    507c:	2c00      	cmp	r4, #0
    507e:	bf0c      	ite	eq
    5080:	f103 0083 	addeq.w	r0, r3, #131	; 0x83
    5084:	1cd8      	addne	r0, r3, #3
    5086:	f005 fd19 	bl	aabc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    508a:	f005 fd59 	bl	ab40 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    508e:	2001      	movs	r0, #1
    5090:	bd70      	pop	{r4, r5, r6, pc}
    5092:	2000      	movs	r0, #0
    5094:	bd70      	pop	{r4, r5, r6, pc}
    5096:	0000      	.short	0x0000
    5098:	200001f8 	.word	0x200001f8
    509c:	20001712 	.word	0x20001712

000050a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    50a0:	4b0b      	ldr	r3, [pc, #44]	; (50d0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    50a2:	f893 c002 	ldrb.w	ip, [r3, #2]
    50a6:	4584      	cmp	ip, r0
    50a8:	bf9c      	itt	ls
    50aa:	2000      	movls	r0, #0
    50ac:	4770      	bxls	lr
    50ae:	4418      	add	r0, r3
    50b0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    50b4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    50b8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    50bc:	700b      	strb	r3, [r1, #0]
    50be:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    50c2:	6011      	str	r1, [r2, #0]
    50c4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    50c8:	8090      	strh	r0, [r2, #4]
    50ca:	2001      	movs	r0, #1
    50cc:	4770      	bx	lr
    50ce:	0000      	.short	0x0000
    50d0:	20001712 	.word	0x20001712

000050d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    50d4:	4907      	ldr	r1, [pc, #28]	; (50f4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    50d6:	788a      	ldrb	r2, [r1, #2]
    50d8:	4282      	cmp	r2, r0
    50da:	bf9c      	itt	ls
    50dc:	2000      	movls	r0, #0
    50de:	4770      	bxls	lr
    50e0:	4408      	add	r0, r1
    50e2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    50e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    50ea:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    50ee:	f000 0001 	and.w	r0, r0, #1
    50f2:	4770      	bx	lr
    50f4:	20001712 	.word	0x20001712

000050f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    50f8:	b510      	push	{r4, lr}
    50fa:	f000 f977 	bl	53ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    50fe:	2810      	cmp	r0, #16
    5100:	d014      	beq.n	512c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5102:	4a0b      	ldr	r2, [pc, #44]	; (5130 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    5104:	4601      	mov	r1, r0
    5106:	2000      	movs	r0, #0
    5108:	f892 c002 	ldrb.w	ip, [r2, #2]
    510c:	f1bc 0f00 	cmp.w	ip, #0
    5110:	d90c      	bls.n	512c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5112:	1813      	adds	r3, r2, r0
    5114:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    5118:	428b      	cmp	r3, r1
    511a:	d103      	bne.n	5124 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    511c:	2810      	cmp	r0, #16
    511e:	bf18      	it	ne
    5120:	bd10      	popne	{r4, pc}
    5122:	e003      	b.n	512c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5124:	1c40      	adds	r0, r0, #1
    5126:	b2c0      	uxtb	r0, r0
    5128:	4584      	cmp	ip, r0
    512a:	d8f2      	bhi.n	5112 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    512c:	2008      	movs	r0, #8
    512e:	bd10      	pop	{r4, pc}
    5130:	20001712 	.word	0x20001712

00005134 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>:
    5134:	4602      	mov	r2, r0
    5136:	4806      	ldr	r0, [pc, #24]	; (5150 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ+0x1c>)
    5138:	b510      	push	{r4, lr}
    513a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    513e:	2101      	movs	r1, #1
    5140:	3083      	adds	r0, #131	; 0x83
    5142:	f005 fcbb 	bl	aabc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    514a:	f005 bcf9 	b.w	ab40 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>
    514e:	0000      	.short	0x0000
    5150:	20001712 	.word	0x20001712

00005154 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5154:	4801      	ldr	r0, [pc, #4]	; (515c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5156:	8840      	ldrh	r0, [r0, #2]
    5158:	4770      	bx	lr
    515a:	0000      	.short	0x0000
    515c:	200001f8 	.word	0x200001f8

00005160 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5164:	4617      	mov	r7, r2
    5166:	2501      	movs	r5, #1
    5168:	2200      	movs	r2, #0
    516a:	461e      	mov	r6, r3
    516c:	462c      	mov	r4, r5
    516e:	703a      	strb	r2, [r7, #0]
    5170:	f000 f93c 	bl	53ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5174:	2810      	cmp	r0, #16
    5176:	d027      	beq.n	51c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    5178:	4918      	ldr	r1, [pc, #96]	; (51dc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x7c>)
    517a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    517e:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    5182:	f002 0201 	and.w	r2, r2, #1
    5186:	703a      	strb	r2, [r7, #0]
    5188:	788b      	ldrb	r3, [r1, #2]
    518a:	2200      	movs	r2, #0
    518c:	2b00      	cmp	r3, #0
    518e:	d91b      	bls.n	51c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    5190:	eb01 0c02 	add.w	ip, r1, r2
    5194:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5198:	4584      	cmp	ip, r0
    519a:	d119      	bne.n	51d0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    519c:	2a10      	cmp	r2, #16
    519e:	d013      	beq.n	51c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    51a0:	2e00      	cmp	r6, #0
    51a2:	bf18      	it	ne
    51a4:	7032      	strbne	r2, [r6, #0]
    51a6:	7888      	ldrb	r0, [r1, #2]
    51a8:	4290      	cmp	r0, r2
    51aa:	d90d      	bls.n	51c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    51ac:	eb01 1002 	add.w	r0, r1, r2, lsl #4
    51b0:	f110 0f03 	cmn.w	r0, #3
    51b4:	d008      	beq.n	51c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    51b6:	1888      	adds	r0, r1, r2
    51b8:	f890 414b 	ldrb.w	r4, [r0, #331]	; 0x14b
    51bc:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    51c0:	2801      	cmp	r0, #1
    51c2:	bf0c      	ite	eq
    51c4:	2501      	moveq	r5, #1
    51c6:	2500      	movne	r5, #0
    51c8:	ea45 0004 	orr.w	r0, r5, r4
    51cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51d0:	1c52      	adds	r2, r2, #1
    51d2:	b2d2      	uxtb	r2, r2
    51d4:	4293      	cmp	r3, r2
    51d6:	d8db      	bhi.n	5190 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x30>
    51d8:	e7f6      	b.n	51c8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x68>
    51da:	0000      	.short	0x0000
    51dc:	20001712 	.word	0x20001712

000051e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    51e0:	4906      	ldr	r1, [pc, #24]	; (51fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    51e2:	788a      	ldrb	r2, [r1, #2]
    51e4:	4282      	cmp	r2, r0
    51e6:	d906      	bls.n	51f6 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    51e8:	4408      	add	r0, r1
    51ea:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    51ee:	2800      	cmp	r0, #0
    51f0:	bf04      	itt	eq
    51f2:	2001      	moveq	r0, #1
    51f4:	4770      	bxeq	lr
    51f6:	2000      	movs	r0, #0
    51f8:	4770      	bx	lr
    51fa:	0000      	.short	0x0000
    51fc:	20001712 	.word	0x20001712

00005200 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5200:	b570      	push	{r4, r5, r6, lr}
    5202:	460d      	mov	r5, r1
    5204:	4604      	mov	r4, r0
    5206:	f000 f8f1 	bl	53ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    520a:	4a1a      	ldr	r2, [pc, #104]	; (5274 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    520c:	2810      	cmp	r0, #16
    520e:	d014      	beq.n	523a <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    5210:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    5214:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    5218:	f010 0f01 	tst.w	r0, #1
    521c:	bf1c      	itt	ne
    521e:	2001      	movne	r0, #1
    5220:	bd70      	popne	{r4, r5, r6, pc}
    5222:	7850      	ldrb	r0, [r2, #1]
    5224:	2808      	cmp	r0, #8
    5226:	bf3c      	itt	cc
    5228:	2001      	movcc	r0, #1
    522a:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    522e:	d21e      	bcs.n	526e <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5230:	7850      	ldrb	r0, [r2, #1]
    5232:	1c40      	adds	r0, r0, #1
    5234:	7050      	strb	r0, [r2, #1]
    5236:	2001      	movs	r0, #1
    5238:	bd70      	pop	{r4, r5, r6, pc}
    523a:	7850      	ldrb	r0, [r2, #1]
    523c:	2808      	cmp	r0, #8
    523e:	d216      	bcs.n	526e <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5240:	7813      	ldrb	r3, [r2, #0]
    5242:	2001      	movs	r0, #1
    5244:	1c59      	adds	r1, r3, #1
    5246:	7011      	strb	r1, [r2, #0]
    5248:	2b10      	cmp	r3, #16
    524a:	d303      	bcc.n	5254 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    524c:	2146      	movs	r1, #70	; 0x46
    524e:	2028      	movs	r0, #40	; 0x28
    5250:	f7fe ff3e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5254:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5258:	6829      	ldr	r1, [r5, #0]
    525a:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    525e:	88a9      	ldrh	r1, [r5, #4]
    5260:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5264:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5268:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    526c:	e7e0      	b.n	5230 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    526e:	2000      	movs	r0, #0
    5270:	bd70      	pop	{r4, r5, r6, pc}
    5272:	0000      	.short	0x0000
    5274:	20001712 	.word	0x20001712

00005278 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>:
    5278:	4801      	ldr	r0, [pc, #4]	; (5280 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ+0x8>)
    527a:	7840      	ldrb	r0, [r0, #1]
    527c:	4770      	bx	lr
    527e:	0000      	.short	0x0000
    5280:	200001f8 	.word	0x200001f8

00005284 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    5284:	4901      	ldr	r1, [pc, #4]	; (528c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    5286:	7048      	strb	r0, [r1, #1]
    5288:	4770      	bx	lr
    528a:	0000      	.short	0x0000
    528c:	200001f8 	.word	0x200001f8

00005290 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5290:	b470      	push	{r4, r5, r6}
    5292:	482b      	ldr	r0, [pc, #172]	; (5340 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    5294:	2500      	movs	r5, #0
    5296:	7801      	ldrb	r1, [r0, #0]
    5298:	1e49      	subs	r1, r1, #1
    529a:	b24b      	sxtb	r3, r1
    529c:	2b00      	cmp	r3, #0
    529e:	db46      	blt.n	532e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    52a0:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    52a4:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    52a8:	f011 0f01 	tst.w	r1, #1
    52ac:	d03b      	beq.n	5326 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    52ae:	7842      	ldrb	r2, [r0, #1]
    52b0:	b2d9      	uxtb	r1, r3
    52b2:	1e52      	subs	r2, r2, #1
    52b4:	7042      	strb	r2, [r0, #1]
    52b6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    52ba:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    52be:	f890 c002 	ldrb.w	ip, [r0, #2]
    52c2:	2200      	movs	r2, #0
    52c4:	f1bc 0f00 	cmp.w	ip, #0
    52c8:	d90b      	bls.n	52e2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    52ca:	1884      	adds	r4, r0, r2
    52cc:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    52d0:	428e      	cmp	r6, r1
    52d2:	d102      	bne.n	52da <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    52d4:	2a10      	cmp	r2, #16
    52d6:	d126      	bne.n	5326 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    52d8:	e003      	b.n	52e2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    52da:	1c52      	adds	r2, r2, #1
    52dc:	b2d2      	uxtb	r2, r2
    52de:	4594      	cmp	ip, r2
    52e0:	d8f3      	bhi.n	52ca <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    52e2:	7802      	ldrb	r2, [r0, #0]
    52e4:	1e52      	subs	r2, r2, #1
    52e6:	b2d2      	uxtb	r2, r2
    52e8:	7002      	strb	r2, [r0, #0]
    52ea:	428a      	cmp	r2, r1
    52ec:	d01b      	beq.n	5326 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    52ee:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    52f2:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    52f6:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    52fa:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    52fe:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5302:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5306:	7884      	ldrb	r4, [r0, #2]
    5308:	f890 c000 	ldrb.w	ip, [r0]
    530c:	2200      	movs	r2, #0
    530e:	2c00      	cmp	r4, #0
    5310:	d909      	bls.n	5326 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5312:	1886      	adds	r6, r0, r2
    5314:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    5318:	4566      	cmp	r6, ip
    531a:	d10c      	bne.n	5336 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    531c:	2a10      	cmp	r2, #16
    531e:	bf1c      	itt	ne
    5320:	4402      	addne	r2, r0
    5322:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5326:	1e59      	subs	r1, r3, #1
    5328:	b24b      	sxtb	r3, r1
    532a:	2b00      	cmp	r3, #0
    532c:	dab8      	bge.n	52a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    532e:	4805      	ldr	r0, [pc, #20]	; (5344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    5330:	7045      	strb	r5, [r0, #1]
    5332:	bc70      	pop	{r4, r5, r6}
    5334:	4770      	bx	lr
    5336:	1c52      	adds	r2, r2, #1
    5338:	b2d2      	uxtb	r2, r2
    533a:	4294      	cmp	r4, r2
    533c:	d8e9      	bhi.n	5312 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    533e:	e7f2      	b.n	5326 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5340:	20001712 	.word	0x20001712
    5344:	200001f8 	.word	0x200001f8

00005348 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    534c:	4d25      	ldr	r5, [pc, #148]	; (53e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    534e:	2600      	movs	r6, #0
    5350:	4634      	mov	r4, r6
    5352:	7828      	ldrb	r0, [r5, #0]
    5354:	2800      	cmp	r0, #0
    5356:	bf8c      	ite	hi
    5358:	4f23      	ldrhi	r7, [pc, #140]	; (53e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    535a:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    535e:	bf00      	nop
    5360:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5364:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    5368:	f011 0f01 	tst.w	r1, #1
    536c:	d032      	beq.n	53d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    536e:	78aa      	ldrb	r2, [r5, #2]
    5370:	2100      	movs	r1, #0
    5372:	4623      	mov	r3, r4
    5374:	2a00      	cmp	r2, #0
    5376:	d909      	bls.n	538c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    5378:	eb05 0c01 	add.w	ip, r5, r1
    537c:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5380:	459c      	cmp	ip, r3
    5382:	d004      	beq.n	538e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    5384:	1c49      	adds	r1, r1, #1
    5386:	b2c9      	uxtb	r1, r1
    5388:	428a      	cmp	r2, r1
    538a:	d8f5      	bhi.n	5378 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    538c:	2110      	movs	r1, #16
    538e:	428a      	cmp	r2, r1
    5390:	bf86      	itte	hi
    5392:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    5396:	1cd3      	addhi	r3, r2, #3
    5398:	2300      	movls	r3, #0
    539a:	2200      	movs	r2, #0
    539c:	2910      	cmp	r1, #16
    539e:	d00c      	beq.n	53ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    53a0:	eb05 0c01 	add.w	ip, r5, r1
    53a4:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    53a8:	f1b8 0f01 	cmp.w	r8, #1
    53ac:	d004      	beq.n	53b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    53ae:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    53b2:	f1bc 0f00 	cmp.w	ip, #0
    53b6:	d000      	beq.n	53ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    53b8:	2201      	movs	r2, #1
    53ba:	1e52      	subs	r2, r2, #1
    53bc:	4213      	tst	r3, r2
    53be:	d109      	bne.n	53d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    53c0:	55b9      	strb	r1, [r7, r6]
    53c2:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    53c6:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    53ca:	4630      	mov	r0, r6
    53cc:	1c73      	adds	r3, r6, #1
    53ce:	b2de      	uxtb	r6, r3
    53d0:	f006 fe3c 	bl	c04c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    53d4:	1c60      	adds	r0, r4, #1
    53d6:	b2c4      	uxtb	r4, r0
    53d8:	7828      	ldrb	r0, [r5, #0]
    53da:	42a0      	cmp	r0, r4
    53dc:	d8c0      	bhi.n	5360 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    53de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53e2:	0000      	.short	0x0000
    53e4:	20001712 	.word	0x20001712
    53e8:	200001fc 	.word	0x200001fc
    53ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    53f0:	4b20      	ldr	r3, [pc, #128]	; (5474 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>)
    53f2:	4602      	mov	r2, r0
    53f4:	2000      	movs	r0, #0
    53f6:	f893 8000 	ldrb.w	r8, [r3]
    53fa:	f1b8 0f00 	cmp.w	r8, #0
    53fe:	d934      	bls.n	546a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x122>
    5400:	780f      	ldrb	r7, [r1, #0]
    5402:	784e      	ldrb	r6, [r1, #1]
    5404:	788d      	ldrb	r5, [r1, #2]
    5406:	78cc      	ldrb	r4, [r1, #3]
    5408:	f891 c004 	ldrb.w	ip, [r1, #4]
    540c:	f891 a005 	ldrb.w	sl, [r1, #5]
    5410:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    5414:	f891 9153 	ldrb.w	r9, [r1, #339]	; 0x153
    5418:	f891 b154 	ldrb.w	fp, [r1, #340]	; 0x154
    541c:	ea82 0909 	eor.w	r9, r2, r9
    5420:	ea87 0b0b 	eor.w	fp, r7, fp
    5424:	44d9      	add	r9, fp
    5426:	f891 b155 	ldrb.w	fp, [r1, #341]	; 0x155
    542a:	ea86 0b0b 	eor.w	fp, r6, fp
    542e:	44d9      	add	r9, fp
    5430:	f891 b156 	ldrb.w	fp, [r1, #342]	; 0x156
    5434:	ea85 0b0b 	eor.w	fp, r5, fp
    5438:	44d9      	add	r9, fp
    543a:	f891 b157 	ldrb.w	fp, [r1, #343]	; 0x157
    543e:	ea84 0b0b 	eor.w	fp, r4, fp
    5442:	44d9      	add	r9, fp
    5444:	f891 b158 	ldrb.w	fp, [r1, #344]	; 0x158
    5448:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
    544c:	ea8c 0b0b 	eor.w	fp, ip, fp
    5450:	44d9      	add	r9, fp
    5452:	ea8a 0101 	eor.w	r1, sl, r1
    5456:	eb11 0f09 	cmn.w	r1, r9
    545a:	bf04      	itt	eq
    545c:	e8bd 0ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5460:	4770      	bxeq	lr
    5462:	1c40      	adds	r0, r0, #1
    5464:	b2c0      	uxtb	r0, r0
    5466:	4580      	cmp	r8, r0
    5468:	d8d2      	bhi.n	5410 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    546a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    546e:	2010      	movs	r0, #16
    5470:	4770      	bx	lr
    5472:	0000      	.short	0x0000
    5474:	20001712 	.word	0x20001712
    5478:	4925      	ldr	r1, [pc, #148]	; (5510 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c8>)
    547a:	b410      	push	{r4}
    547c:	784a      	ldrb	r2, [r1, #1]
    547e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    5482:	1e52      	subs	r2, r2, #1
    5484:	704a      	strb	r2, [r1, #1]
    5486:	2200      	movs	r2, #0
    5488:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    548c:	f891 c002 	ldrb.w	ip, [r1, #2]
    5490:	f1bc 0f00 	cmp.w	ip, #0
    5494:	d90d      	bls.n	54b2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    5496:	188b      	adds	r3, r1, r2
    5498:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    549c:	4284      	cmp	r4, r0
    549e:	d104      	bne.n	54aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x162>
    54a0:	2a10      	cmp	r2, #16
    54a2:	bf1c      	itt	ne
    54a4:	bc10      	popne	{r4}
    54a6:	4770      	bxne	lr
    54a8:	e003      	b.n	54b2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    54aa:	1c52      	adds	r2, r2, #1
    54ac:	b2d2      	uxtb	r2, r2
    54ae:	4594      	cmp	ip, r2
    54b0:	d8f1      	bhi.n	5496 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14e>
    54b2:	780a      	ldrb	r2, [r1, #0]
    54b4:	1e52      	subs	r2, r2, #1
    54b6:	b2d2      	uxtb	r2, r2
    54b8:	700a      	strb	r2, [r1, #0]
    54ba:	4282      	cmp	r2, r0
    54bc:	bf04      	itt	eq
    54be:	bc10      	popeq	{r4}
    54c0:	4770      	bxeq	lr
    54c2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    54c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    54ca:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    54ce:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    54d2:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    54d6:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    54da:	788c      	ldrb	r4, [r1, #2]
    54dc:	f891 c000 	ldrb.w	ip, [r1]
    54e0:	2200      	movs	r2, #0
    54e2:	2c00      	cmp	r4, #0
    54e4:	bf9c      	itt	ls
    54e6:	bc10      	popls	{r4}
    54e8:	4770      	bxls	lr
    54ea:	188b      	adds	r3, r1, r2
    54ec:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    54f0:	4563      	cmp	r3, ip
    54f2:	d106      	bne.n	5502 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    54f4:	2a10      	cmp	r2, #16
    54f6:	bf1c      	itt	ne
    54f8:	4411      	addne	r1, r2
    54fa:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    54fe:	bc10      	pop	{r4}
    5500:	4770      	bx	lr
    5502:	1c52      	adds	r2, r2, #1
    5504:	b2d2      	uxtb	r2, r2
    5506:	4294      	cmp	r4, r2
    5508:	d8ef      	bhi.n	54ea <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1a2>
    550a:	bc10      	pop	{r4}
    550c:	4770      	bx	lr
    550e:	0000      	.short	0x0000
    5510:	20001712 	.word	0x20001712

00005514 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    5514:	b570      	push	{r4, r5, r6, lr}
    5516:	b08c      	sub	sp, #48	; 0x30
    5518:	f100 0410 	add.w	r4, r0, #16
    551c:	461d      	mov	r5, r3
    551e:	4616      	mov	r6, r2
    5520:	f10d 3cff 	add.w	ip, sp, #4294967295
    5524:	f05f 0008 	movs.w	r0, #8
    5528:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    552c:	f88c 2001 	strb.w	r2, [ip, #1]
    5530:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    5534:	f80c 2f02 	strb.w	r2, [ip, #2]!
    5538:	1e40      	subs	r0, r0, #1
    553a:	d1f5      	bne.n	5528 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    553c:	f101 0c10 	add.w	ip, r1, #16
    5540:	466c      	mov	r4, sp
    5542:	f10d 010f 	add.w	r1, sp, #15
    5546:	2008      	movs	r0, #8
    5548:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    554c:	704a      	strb	r2, [r1, #1]
    554e:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    5552:	f801 2f02 	strb.w	r2, [r1, #2]!
    5556:	1e40      	subs	r0, r0, #1
    5558:	d1f6      	bne.n	5548 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    555a:	4620      	mov	r0, r4
    555c:	f008 ff1f 	bl	e39e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    5560:	b17e      	cbz	r6, 5582 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    5562:	1e6a      	subs	r2, r5, #1
    5564:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5568:	f05f 0108 	movs.w	r1, #8
    556c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5570:	7053      	strb	r3, [r2, #1]
    5572:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    5576:	f802 3f02 	strb.w	r3, [r2, #2]!
    557a:	1e49      	subs	r1, r1, #1
    557c:	d1f6      	bne.n	556c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    557e:	b00c      	add	sp, #48	; 0x30
    5580:	bd70      	pop	{r4, r5, r6, pc}
    5582:	9808      	ldr	r0, [sp, #32]
    5584:	6028      	str	r0, [r5, #0]
    5586:	9809      	ldr	r0, [sp, #36]	; 0x24
    5588:	6068      	str	r0, [r5, #4]
    558a:	980a      	ldr	r0, [sp, #40]	; 0x28
    558c:	60a8      	str	r0, [r5, #8]
    558e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5590:	60e8      	str	r0, [r5, #12]
    5592:	b00c      	add	sp, #48	; 0x30
    5594:	bd70      	pop	{r4, r5, r6, pc}
	...

00005598 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5598:	b570      	push	{r4, r5, r6, lr}
    559a:	4604      	mov	r4, r0
    559c:	2601      	movs	r6, #1
    559e:	b169      	cbz	r1, 55bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x24>
    55a0:	2901      	cmp	r1, #1
    55a2:	d024      	beq.n	55ee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x56>
    55a4:	2902      	cmp	r1, #2
    55a6:	d04b      	beq.n	5640 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    55a8:	2903      	cmp	r1, #3
    55aa:	bf18      	it	ne
    55ac:	bd70      	popne	{r4, r5, r6, pc}
    55ae:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
    55b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55b6:	30a6      	adds	r0, #166	; 0xa6
    55b8:	f000 b8e6 	b.w	5788 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    55bc:	f44f 7252 	mov.w	r2, #840	; 0x348
    55c0:	2100      	movs	r1, #0
    55c2:	f007 fddd 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    55c6:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    55ca:	f005 f9f9 	bl	a9c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    55ce:	f644 122b 	movw	r2, #18731	; 0x492b
    55d2:	4010      	ands	r0, r2
    55d4:	f8c4 00f2 	str.w	r0, [r4, #242]	; 0xf2
    55d8:	f001 0106 	and.w	r1, r1, #6
    55dc:	f8c4 10f6 	str.w	r1, [r4, #246]	; 0xf6
    55e0:	20fe      	movs	r0, #254	; 0xfe
    55e2:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    55e6:	207f      	movs	r0, #127	; 0x7f
    55e8:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    55ec:	bd70      	pop	{r4, r5, r6, pc}
    55ee:	2500      	movs	r5, #0
    55f0:	f8a4 5286 	strh.w	r5, [r4, #646]	; 0x286
    55f4:	f884 527b 	strb.w	r5, [r4, #635]	; 0x27b
    55f8:	6961      	ldr	r1, [r4, #20]
    55fa:	4816      	ldr	r0, [pc, #88]	; (5654 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    55fc:	460a      	mov	r2, r1
    55fe:	4408      	add	r0, r1
    5600:	fbb0 f0f1 	udiv	r0, r0, r1
    5604:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    5608:	f640 30b8 	movw	r0, #3000	; 0xbb8
    560c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
    5610:	8be3      	ldrh	r3, [r4, #30]
    5612:	f104 0090 	add.w	r0, r4, #144	; 0x90
    5616:	f000 f867 	bl	56e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    561a:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
    561e:	1e48      	subs	r0, r1, #1
    5620:	f000 f8b2 	bl	5788 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5624:	f007 fd0e 	bl	d044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5628:	b138      	cbz	r0, 563a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa2>
    562a:	69a0      	ldr	r0, [r4, #24]
    562c:	f000 fc52 	bl	5ed4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5630:	2800      	cmp	r0, #0
    5632:	bf04      	itt	eq
    5634:	f884 626c 	strbeq.w	r6, [r4, #620]	; 0x26c
    5638:	bd70      	popeq	{r4, r5, r6, pc}
    563a:	f884 526c 	strb.w	r5, [r4, #620]	; 0x26c
    563e:	bd70      	pop	{r4, r5, r6, pc}
    5640:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    5644:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
    5648:	6961      	ldr	r1, [r4, #20]
    564a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    564e:	3090      	adds	r0, #144	; 0x90
    5650:	f000 b84a 	b.w	56e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    5654:	01c9c37f 	.word	0x01c9c37f

00005658 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    5658:	f641 524c 	movw	r2, #7500	; 0x1d4c
    565c:	4291      	cmp	r1, r2
    565e:	bf3d      	ittte	cc
    5660:	4905      	ldrcc	r1, [pc, #20]	; (5678 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI+0x20>)
    5662:	fba1 1000 	umullcc	r1, r0, r1, r0
    5666:	0940      	lsrcc	r0, r0, #5
    5668:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    566c:	bf28      	it	cs
    566e:	fbb0 f0f1 	udivcs	r0, r0, r1
    5672:	b280      	uxth	r0, r0
    5674:	4770      	bx	lr
    5676:	0000      	.short	0x0000
    5678:	51eb851f 	.word	0x51eb851f

0000567c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    567c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    5680:	4291      	cmp	r1, r2
    5682:	bf3d      	ittte	cc
    5684:	4905      	ldrcc	r1, [pc, #20]	; (569c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>)
    5686:	fba1 1000 	umullcc	r1, r0, r1, r0
    568a:	0940      	lsrcc	r0, r0, #5
    568c:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
    5690:	bf28      	it	cs
    5692:	fbb0 f0f1 	udivcs	r0, r0, r1
    5696:	b2c0      	uxtb	r0, r0
    5698:	4770      	bx	lr
    569a:	0000      	.short	0x0000
    569c:	51eb851f 	.word	0x51eb851f

000056a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    56a0:	b430      	push	{r4, r5}
    56a2:	2200      	movs	r2, #0
    56a4:	f1a1 0c01 	sub.w	ip, r1, #1
    56a8:	f1bc 0f00 	cmp.w	ip, #0
    56ac:	dd12      	ble.n	56d4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    56ae:	1e43      	subs	r3, r0, #1
    56b0:	f011 0f01 	tst.w	r1, #1
    56b4:	bf08      	it	eq
    56b6:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    56ba:	785c      	ldrb	r4, [r3, #1]
    56bc:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    56c0:	d008      	beq.n	56d4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    56c2:	bf00      	nop
    56c4:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    56c8:	4322      	orrs	r2, r4
    56ca:	785c      	ldrb	r4, [r3, #1]
    56cc:	432a      	orrs	r2, r5
    56ce:	f1bc 0c01 	subs.w	ip, ip, #1
    56d2:	d1f7      	bne.n	56c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    56d4:	1e49      	subs	r1, r1, #1
    56d6:	bf5c      	itt	pl
    56d8:	5c40      	ldrbpl	r0, [r0, r1]
    56da:	4302      	orrpl	r2, r0
    56dc:	2a00      	cmp	r2, #0
    56de:	bf0c      	ite	eq
    56e0:	2001      	moveq	r0, #1
    56e2:	2000      	movne	r0, #0
    56e4:	bc30      	pop	{r4, r5}
    56e6:	4770      	bx	lr
    56e8:	b410      	push	{r4}
    56ea:	f04f 0c00 	mov.w	ip, #0
    56ee:	f8a0 c042 	strh.w	ip, [r0, #66]	; 0x42
    56f2:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
    56f6:	4c18      	ldr	r4, [pc, #96]	; (5758 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>)
    56f8:	fb0c fc01 	mul.w	ip, ip, r1
    56fc:	fbbc fcf2 	udiv	ip, ip, r2
    5700:	f8a0 c046 	strh.w	ip, [r0, #70]	; 0x46
    5704:	f242 7c10 	movw	ip, #10000	; 0x2710
    5708:	fb03 f30c 	mul.w	r3, r3, ip
    570c:	fbb3 f3f2 	udiv	r3, r3, r2
    5710:	1c5b      	adds	r3, r3, #1
    5712:	b29b      	uxth	r3, r3
    5714:	fb03 fc02 	mul.w	ip, r3, r2
    5718:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    571c:	45a4      	cmp	ip, r4
    571e:	bf84      	itt	hi
    5720:	1e5b      	subhi	r3, r3, #1
    5722:	f8a0 3044 	strhhi.w	r3, [r0, #68]	; 0x44
    5726:	4b0d      	ldr	r3, [pc, #52]	; (575c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>)
    5728:	f240 2c71 	movw	ip, #625	; 0x271
    572c:	fbb3 f3f2 	udiv	r3, r3, r2
    5730:	1c5b      	adds	r3, r3, #1
    5732:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
    5736:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    5738:	fb03 f30c 	mul.w	r3, r3, ip
    573c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5740:	1e5b      	subs	r3, r3, #1
    5742:	fbb3 f3f2 	udiv	r3, r3, r2
    5746:	6383      	str	r3, [r0, #56]	; 0x38
    5748:	6b43      	ldr	r3, [r0, #52]	; 0x34
    574a:	4359      	muls	r1, r3
    574c:	fbb1 f1f2 	udiv	r1, r1, r2
    5750:	6341      	str	r1, [r0, #52]	; 0x34
    5752:	bc10      	pop	{r4}
    5754:	4770      	bx	lr
    5756:	0000      	.short	0x0000
    5758:	01e84800 	.word	0x01e84800
    575c:	02625a00 	.word	0x02625a00

00005760 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5760:	4907      	ldr	r1, [pc, #28]	; (5780 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
    5762:	b508      	push	{r3, lr}
    5764:	7809      	ldrb	r1, [r1, #0]
    5766:	f88d 1000 	strb.w	r1, [sp]
    576a:	f89d 1000 	ldrb.w	r1, [sp]
    576e:	2900      	cmp	r1, #0
    5770:	bf1c      	itt	ne
    5772:	2000      	movne	r0, #0
    5774:	bd08      	popne	{r3, pc}
    5776:	4903      	ldr	r1, [pc, #12]	; (5784 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
    5778:	f00b f8bd 	bl	108f6 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    577c:	2001      	movs	r0, #1
    577e:	bd08      	pop	{r3, pc}
    5780:	2000021a 	.word	0x2000021a
    5784:	2000021b 	.word	0x2000021b

00005788 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    5788:	b510      	push	{r4, lr}
    578a:	4604      	mov	r4, r0
    578c:	1c40      	adds	r0, r0, #1
    578e:	4288      	cmp	r0, r1
    5790:	bf18      	it	ne
    5792:	f00b f8b0 	blne	108f6 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    5796:	7960      	ldrb	r0, [r4, #5]
    5798:	f000 001f 	and.w	r0, r0, #31
    579c:	7160      	strb	r0, [r4, #5]
    579e:	2000      	movs	r0, #0
    57a0:	f884 000b 	strb.w	r0, [r4, #11]
    57a4:	eb04 0c00 	add.w	ip, r4, r0
    57a8:	1c40      	adds	r0, r0, #1
    57aa:	f89c 2001 	ldrb.w	r2, [ip, #1]
    57ae:	f002 0101 	and.w	r1, r2, #1
    57b2:	0852      	lsrs	r2, r2, #1
    57b4:	f002 0301 	and.w	r3, r2, #1
    57b8:	4419      	add	r1, r3
    57ba:	0852      	lsrs	r2, r2, #1
    57bc:	f002 0301 	and.w	r3, r2, #1
    57c0:	4419      	add	r1, r3
    57c2:	0852      	lsrs	r2, r2, #1
    57c4:	f002 0301 	and.w	r3, r2, #1
    57c8:	440b      	add	r3, r1
    57ca:	0851      	lsrs	r1, r2, #1
    57cc:	f001 0201 	and.w	r2, r1, #1
    57d0:	441a      	add	r2, r3
    57d2:	0849      	lsrs	r1, r1, #1
    57d4:	f001 0301 	and.w	r3, r1, #1
    57d8:	441a      	add	r2, r3
    57da:	0849      	lsrs	r1, r1, #1
    57dc:	f001 0301 	and.w	r3, r1, #1
    57e0:	441a      	add	r2, r3
    57e2:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    57e6:	f88c 1006 	strb.w	r1, [ip, #6]
    57ea:	7ae2      	ldrb	r2, [r4, #11]
    57ec:	2805      	cmp	r0, #5
    57ee:	4411      	add	r1, r2
    57f0:	72e1      	strb	r1, [r4, #11]
    57f2:	dbd7      	blt.n	57a4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
    57f4:	bd10      	pop	{r4, pc}
	...

000057f8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    57f8:	4904      	ldr	r1, [pc, #16]	; (580c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    57fa:	7d89      	ldrb	r1, [r1, #22]
    57fc:	f001 0104 	and.w	r1, r1, #4
    5800:	4308      	orrs	r0, r1
    5802:	bf0c      	ite	eq
    5804:	2001      	moveq	r0, #1
    5806:	2000      	movne	r0, #0
    5808:	4770      	bx	lr
    580a:	0000      	.short	0x0000
    580c:	2000162c 	.word	0x2000162c

00005810 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    5810:	4803      	ldr	r0, [pc, #12]	; (5820 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    5812:	7d80      	ldrb	r0, [r0, #22]
    5814:	f010 0f02 	tst.w	r0, #2
    5818:	bf0c      	ite	eq
    581a:	2001      	moveq	r0, #1
    581c:	2000      	movne	r0, #0
    581e:	4770      	bx	lr
    5820:	2000162c 	.word	0x2000162c

00005824 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    5824:	4803      	ldr	r0, [pc, #12]	; (5834 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    5826:	7d80      	ldrb	r0, [r0, #22]
    5828:	f010 0f01 	tst.w	r0, #1
    582c:	bf0c      	ite	eq
    582e:	2001      	moveq	r0, #1
    5830:	2000      	movne	r0, #0
    5832:	4770      	bx	lr
    5834:	2000162c 	.word	0x2000162c

00005838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    5838:	b508      	push	{r3, lr}
    583a:	b1d8      	cbz	r0, 5874 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3c>
    583c:	7a03      	ldrb	r3, [r0, #8]
    583e:	f88d 3000 	strb.w	r3, [sp]
    5842:	f89d 3000 	ldrb.w	r3, [sp]
    5846:	2b00      	cmp	r3, #0
    5848:	bf18      	it	ne
    584a:	bd08      	popne	{r3, pc}
    584c:	2300      	movs	r3, #0
    584e:	6003      	str	r3, [r0, #0]
    5850:	6041      	str	r1, [r0, #4]
    5852:	f3ef 8310 	mrs	r3, PRIMASK
    5856:	b672      	cpsid	i
    5858:	490a      	ldr	r1, [pc, #40]	; (5884 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>)
    585a:	f8d1 c000 	ldr.w	ip, [r1]
    585e:	f1bc 0f00 	cmp.w	ip, #0
    5862:	bf1a      	itte	ne
    5864:	f8d1 c004 	ldrne.w	ip, [r1, #4]
    5868:	f8cc 0000 	strne.w	r0, [ip]
    586c:	6008      	streq	r0, [r1, #0]
    586e:	6048      	str	r0, [r1, #4]
    5870:	b933      	cbnz	r3, 5880 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    5872:	e004      	b.n	587e <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x46>
    5874:	f240 4141 	movw	r1, #1089	; 0x441
    5878:	2010      	movs	r0, #16
    587a:	f7fe fc29 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    587e:	b662      	cpsie	i
    5880:	7202      	strb	r2, [r0, #8]
    5882:	bd08      	pop	{r3, pc}
    5884:	200000f0 	.word	0x200000f0

00005888 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    588c:	b087      	sub	sp, #28
    588e:	0004      	movs	r4, r0
    5890:	d00f      	beq.n	58b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a>
    5892:	48fe      	ldr	r0, [pc, #1016]	; (5c8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x404>)
    5894:	2701      	movs	r7, #1
    5896:	2500      	movs	r5, #0
    5898:	7801      	ldrb	r1, [r0, #0]
    589a:	2900      	cmp	r1, #0
    589c:	bf08      	it	eq
    589e:	f8df b3f0 	ldreq.w	fp, [pc, #1008]	; 5c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x408>
    58a2:	d00b      	beq.n	58bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    58a4:	7065      	strb	r5, [r4, #1]
    58a6:	2103      	movs	r1, #3
    58a8:	7021      	strb	r1, [r4, #0]
    58aa:	7127      	strb	r7, [r4, #4]
    58ac:	7005      	strb	r5, [r0, #0]
    58ae:	f000 b8ba 	b.w	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    58b2:	f240 315d 	movw	r1, #861	; 0x35d
    58b6:	2010      	movs	r0, #16
    58b8:	f7fe fc0a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58bc:	f8db 0000 	ldr.w	r0, [fp]
    58c0:	46a8      	mov	r8, r5
    58c2:	2800      	cmp	r0, #0
    58c4:	bf08      	it	eq
    58c6:	4646      	moveq	r6, r8
    58c8:	d022      	beq.n	5910 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    58ca:	7a01      	ldrb	r1, [r0, #8]
    58cc:	f88d 1000 	strb.w	r1, [sp]
    58d0:	f89d 1000 	ldrb.w	r1, [sp]
    58d4:	2908      	cmp	r1, #8
    58d6:	d109      	bne.n	58ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>
    58d8:	6840      	ldr	r0, [r0, #4]
    58da:	8800      	ldrh	r0, [r0, #0]
    58dc:	f7ff f842 	bl	4964 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    58e0:	f008 f99a 	bl	dc18 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    58e4:	2800      	cmp	r0, #0
    58e6:	bf08      	it	eq
    58e8:	462e      	moveq	r6, r5
    58ea:	d011      	beq.n	5910 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    58ec:	f3ef 8010 	mrs	r0, PRIMASK
    58f0:	f8db 6000 	ldr.w	r6, [fp]
    58f4:	b672      	cpsid	i
    58f6:	6831      	ldr	r1, [r6, #0]
    58f8:	f8cb 1000 	str.w	r1, [fp]
    58fc:	b900      	cbnz	r0, 5900 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    58fe:	b662      	cpsie	i
    5900:	7a30      	ldrb	r0, [r6, #8]
    5902:	f88d 0000 	strb.w	r0, [sp]
    5906:	f89d 0000 	ldrb.w	r0, [sp]
    590a:	2800      	cmp	r0, #0
    590c:	bf08      	it	eq
    590e:	46b8      	moveq	r8, r7
    5910:	f1b8 0f00 	cmp.w	r8, #0
    5914:	d1d2      	bne.n	58bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5916:	b1de      	cbz	r6, 5950 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc8>
    5918:	7a30      	ldrb	r0, [r6, #8]
    591a:	f88d 0000 	strb.w	r0, [sp]
    591e:	f89d 8000 	ldrb.w	r8, [sp]
    5922:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    5926:	f080 8284 	bcs.w	5e32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    592a:	e8df f008 	tbb	[pc, r8]
    592e:	fdfe      	.short	0xfdfe
    5930:	fdfc2480 	.word	0xfdfc2480
    5934:	fdfdfbfd 	.word	0xfdfdfbfd
    5938:	fefdfdfd 	.word	0xfefdfdfd
    593c:	fdfdfc24 	.word	0xfdfdfc24
    5940:	5454fc24 	.word	0x5454fc24
    5944:	24fdfd54 	.word	0x24fdfd54
    5948:	f9fafdfd 	.word	0xf9fafdfd
    594c:	f715f824 	.word	0xf715f824
    5950:	b007      	add	sp, #28
    5952:	2000      	movs	r0, #0
    5954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5958:	7065      	strb	r5, [r4, #1]
    595a:	2014      	movs	r0, #20
    595c:	7020      	strb	r0, [r4, #0]
    595e:	6065      	str	r5, [r4, #4]
    5960:	60a5      	str	r5, [r4, #8]
    5962:	60e5      	str	r5, [r4, #12]
    5964:	6125      	str	r5, [r4, #16]
    5966:	6165      	str	r5, [r4, #20]
    5968:	61a5      	str	r5, [r4, #24]
    596a:	61e5      	str	r5, [r4, #28]
    596c:	2002      	movs	r0, #2
    596e:	6225      	str	r5, [r4, #32]
    5970:	7120      	strb	r0, [r4, #4]
    5972:	7235      	strb	r5, [r6, #8]
    5974:	e057      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5976:	48c7      	ldr	r0, [pc, #796]	; (5c94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x40c>)
    5978:	6803      	ldr	r3, [r0, #0]
    597a:	2b00      	cmp	r3, #0
    597c:	bf04      	itt	eq
    597e:	46a9      	moveq	r9, r5
    5980:	7235      	strbeq	r5, [r6, #8]
    5982:	d050      	beq.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5984:	6870      	ldr	r0, [r6, #4]
    5986:	4642      	mov	r2, r8
    5988:	4621      	mov	r1, r4
    598a:	4798      	blx	r3
    598c:	7820      	ldrb	r0, [r4, #0]
    598e:	6871      	ldr	r1, [r6, #4]
    5990:	2814      	cmp	r0, #20
    5992:	d002      	beq.n	599a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5994:	2817      	cmp	r0, #23
    5996:	d003      	beq.n	59a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    5998:	e01b      	b.n	59d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    599a:	7920      	ldrb	r0, [r4, #4]
    599c:	b930      	cbnz	r0, 59ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>
    599e:	e018      	b.n	59d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    59a0:	7920      	ldrb	r0, [r4, #4]
    59a2:	b1b0      	cbz	r0, 59d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    59a4:	4608      	mov	r0, r1
    59a6:	f009 fa37 	bl	ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    59aa:	b990      	cbnz	r0, 59d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    59ac:	88e4      	ldrh	r4, [r4, #6]
    59ae:	2101      	movs	r1, #1
    59b0:	4620      	mov	r0, r4
    59b2:	f008 fb31 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    59b6:	b160      	cbz	r0, 59d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    59b8:	8800      	ldrh	r0, [r0, #0]
    59ba:	f7ff fa2f 	bl	4e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    59be:	2101      	movs	r1, #1
    59c0:	4620      	mov	r0, r4
    59c2:	f7fe fe35 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    59c6:	b120      	cbz	r0, 59d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14a>
    59c8:	f44f 71af 	mov.w	r1, #350	; 0x15e
    59cc:	2010      	movs	r0, #16
    59ce:	f7fe fb7f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59d2:	7235      	strb	r5, [r6, #8]
    59d4:	e027      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    59d6:	48b0      	ldr	r0, [pc, #704]	; (5c98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x410>)
    59d8:	6803      	ldr	r3, [r0, #0]
    59da:	2b00      	cmp	r3, #0
    59dc:	bf04      	itt	eq
    59de:	46a9      	moveq	r9, r5
    59e0:	7235      	strbeq	r5, [r6, #8]
    59e2:	d020      	beq.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    59e4:	f1b8 0f15 	cmp.w	r8, #21
    59e8:	d017      	beq.n	5a1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    59ea:	6877      	ldr	r7, [r6, #4]
    59ec:	4642      	mov	r2, r8
    59ee:	4621      	mov	r1, r4
    59f0:	4638      	mov	r0, r7
    59f2:	4798      	blx	r3
    59f4:	7820      	ldrb	r0, [r4, #0]
    59f6:	281b      	cmp	r0, #27
    59f8:	d003      	beq.n	5a02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    59fa:	2819      	cmp	r0, #25
    59fc:	d10b      	bne.n	5a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    59fe:	7920      	ldrb	r0, [r4, #4]
    5a00:	b148      	cbz	r0, 5a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    5a02:	8938      	ldrh	r0, [r7, #8]
    5a04:	2104      	movs	r1, #4
    5a06:	f7fe fe13 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5a0a:	b128      	cbz	r0, 5a18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x190>
    5a0c:	f44f 716b 	mov.w	r1, #940	; 0x3ac
    5a10:	2010      	movs	r0, #16
    5a12:	f7fe fb5d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a16:	7235      	strb	r5, [r6, #8]
    5a18:	e005      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a1a:	4ba0      	ldr	r3, [pc, #640]	; (5c9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x414>)
    5a1c:	6870      	ldr	r0, [r6, #4]
    5a1e:	2200      	movs	r2, #0
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	4621      	mov	r1, r4
    5a24:	4798      	blx	r3
    5a26:	b007      	add	sp, #28
    5a28:	2001      	movs	r0, #1
    5a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a2e:	489c      	ldr	r0, [pc, #624]	; (5ca0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    5a30:	6803      	ldr	r3, [r0, #0]
    5a32:	2b00      	cmp	r3, #0
    5a34:	bf04      	itt	eq
    5a36:	46a9      	moveq	r9, r5
    5a38:	7235      	strbeq	r5, [r6, #8]
    5a3a:	d0f4      	beq.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a3c:	2202      	movs	r2, #2
    5a3e:	4621      	mov	r1, r4
    5a40:	2000      	movs	r0, #0
    5a42:	4798      	blx	r3
    5a44:	f004 ff5a 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    5a48:	2800      	cmp	r0, #0
    5a4a:	d0ec      	beq.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5a4c:	7820      	ldrb	r0, [r4, #0]
    5a4e:	2805      	cmp	r0, #5
    5a50:	d003      	beq.n	5a5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d2>
    5a52:	21cf      	movs	r1, #207	; 0xcf
    5a54:	2010      	movs	r0, #16
    5a56:	f7fe fb3b 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a5a:	7ba0      	ldrb	r0, [r4, #14]
    5a5c:	f010 0f10 	tst.w	r0, #16
    5a60:	d022      	beq.n	5aa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x220>
    5a62:	221c      	movs	r2, #28
    5a64:	1d21      	adds	r1, r4, #4
    5a66:	488f      	ldr	r0, [pc, #572]	; (5ca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    5a68:	f007 fb10 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a6c:	7b22      	ldrb	r2, [r4, #12]
    5a6e:	f104 0120 	add.w	r1, r4, #32
    5a72:	488d      	ldr	r0, [pc, #564]	; (5ca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    5a74:	f007 fb0a 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a78:	498a      	ldr	r1, [pc, #552]	; (5ca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>)
    5a7a:	7a88      	ldrb	r0, [r1, #10]
    5a7c:	f010 0f04 	tst.w	r0, #4
    5a80:	d002      	beq.n	5a88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x200>
    5a82:	7cc8      	ldrb	r0, [r1, #19]
    5a84:	28fe      	cmp	r0, #254	; 0xfe
    5a86:	d015      	beq.n	5ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x22c>
    5a88:	f04f 0204 	mov.w	r2, #4
    5a8c:	7022      	strb	r2, [r4, #0]
    5a8e:	6808      	ldr	r0, [r1, #0]
    5a90:	6060      	str	r0, [r4, #4]
    5a92:	6848      	ldr	r0, [r1, #4]
    5a94:	60a0      	str	r0, [r4, #8]
    5a96:	8908      	ldrh	r0, [r1, #8]
    5a98:	81a0      	strh	r0, [r4, #12]
    5a9a:	7a88      	ldrb	r0, [r1, #10]
    5a9c:	f010 0f08 	tst.w	r0, #8
    5aa0:	bf18      	it	ne
    5aa2:	73a2      	strbne	r2, [r4, #14]
    5aa4:	d133      	bne.n	5b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    5aa6:	e01d      	b.n	5ae4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x25c>
    5aa8:	f04f 01d0 	mov.w	r1, #208	; 0xd0
    5aac:	f04f 0010 	mov.w	r0, #16
    5ab0:	f7fe fb0e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ab4:	2013      	movs	r0, #19
    5ab6:	7020      	strb	r0, [r4, #0]
    5ab8:	7808      	ldrb	r0, [r1, #0]
    5aba:	7120      	strb	r0, [r4, #4]
    5abc:	7167      	strb	r7, [r4, #5]
    5abe:	7848      	ldrb	r0, [r1, #1]
    5ac0:	71a0      	strb	r0, [r4, #6]
    5ac2:	f8d1 0002 	ldr.w	r0, [r1, #2]
    5ac6:	f8c4 0007 	str.w	r0, [r4, #7]
    5aca:	88c8      	ldrh	r0, [r1, #6]
    5acc:	f8a4 000b 	strh.w	r0, [r4, #11]
    5ad0:	20fe      	movs	r0, #254	; 0xfe
    5ad2:	7360      	strb	r0, [r4, #13]
    5ad4:	6948      	ldr	r0, [r1, #20]
    5ad6:	f8c4 000e 	str.w	r0, [r4, #14]
    5ada:	8b08      	ldrh	r0, [r1, #24]
    5adc:	8260      	strh	r0, [r4, #18]
    5ade:	7a48      	ldrb	r0, [r1, #9]
    5ae0:	7520      	strb	r0, [r4, #20]
    5ae2:	e7a0      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5ae4:	f010 0f01 	tst.w	r0, #1
    5ae8:	bf1c      	itt	ne
    5aea:	f010 0f02 	tstne.w	r0, #2
    5aee:	73a5      	strbne	r5, [r4, #14]
    5af0:	d10d      	bne.n	5b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    5af2:	f010 0f04 	tst.w	r0, #4
    5af6:	bf18      	it	ne
    5af8:	73a7      	strbne	r7, [r4, #14]
    5afa:	d108      	bne.n	5b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x286>
    5afc:	f010 0f01 	tst.w	r0, #1
    5b00:	d116      	bne.n	5b30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a8>
    5b02:	f010 0f02 	tst.w	r0, #2
    5b06:	bf18      	it	ne
    5b08:	2002      	movne	r0, #2
    5b0a:	d011      	beq.n	5b30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a8>
    5b0c:	73a0      	strb	r0, [r4, #14]
    5b0e:	7a0a      	ldrb	r2, [r1, #8]
    5b10:	2a1f      	cmp	r2, #31
    5b12:	d917      	bls.n	5b44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2bc>
    5b14:	f44f 718a 	mov.w	r1, #276	; 0x114
    5b18:	2010      	movs	r0, #16
    5b1a:	e007      	b.n	5b2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a4>
    5b1c:	e151      	b.n	5dc2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x53a>
    5b1e:	e183      	b.n	5e28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5a0>
    5b20:	e170      	b.n	5e04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x57c>
    5b22:	e178      	b.n	5e16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58e>
    5b24:	e158      	b.n	5dd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x550>
    5b26:	e013      	b.n	5b50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c8>
    5b28:	e03a      	b.n	5ba0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x318>
    5b2a:	e182      	b.n	5e32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5aa>
    5b2c:	f7fe fad0 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b30:	f010 0f03 	tst.w	r0, #3
    5b34:	bf08      	it	eq
    5b36:	2003      	moveq	r0, #3
    5b38:	d0e8      	beq.n	5b0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x284>
    5b3a:	f240 1111 	movw	r1, #273	; 0x111
    5b3e:	2010      	movs	r0, #16
    5b40:	f7fe fac6 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b44:	4958      	ldr	r1, [pc, #352]	; (5ca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
    5b46:	f104 000f 	add.w	r0, r4, #15
    5b4a:	f007 fa9f 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b4e:	e76a      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5b50:	4853      	ldr	r0, [pc, #332]	; (5ca0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x418>)
    5b52:	6803      	ldr	r3, [r0, #0]
    5b54:	2b00      	cmp	r3, #0
    5b56:	bf04      	itt	eq
    5b58:	46a9      	moveq	r9, r5
    5b5a:	7235      	strbeq	r5, [r6, #8]
    5b5c:	f43f af63 	beq.w	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5b60:	4642      	mov	r2, r8
    5b62:	4621      	mov	r1, r4
    5b64:	2000      	movs	r0, #0
    5b66:	4798      	blx	r3
    5b68:	7820      	ldrb	r0, [r4, #0]
    5b6a:	2818      	cmp	r0, #24
    5b6c:	bf04      	itt	eq
    5b6e:	7920      	ldrbeq	r0, [r4, #4]
    5b70:	2801      	cmpeq	r0, #1
    5b72:	d113      	bne.n	5b9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    5b74:	88e0      	ldrh	r0, [r4, #6]
    5b76:	f04f 0100 	mov.w	r1, #0
    5b7a:	f008 fa4d 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5b7e:	0004      	movs	r4, r0
    5b80:	d00c      	beq.n	5b9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    5b82:	8820      	ldrh	r0, [r4, #0]
    5b84:	f7ff f94a 	bl	4e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5b88:	8820      	ldrh	r0, [r4, #0]
    5b8a:	2100      	movs	r1, #0
    5b8c:	f7fe fd50 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5b90:	b120      	cbz	r0, 5b9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x314>
    5b92:	f44f 7196 	mov.w	r1, #300	; 0x12c
    5b96:	2010      	movs	r0, #16
    5b98:	f7fe fa9a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b9c:	7235      	strb	r5, [r6, #8]
    5b9e:	e742      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5ba0:	4842      	ldr	r0, [pc, #264]	; (5cac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x424>)
    5ba2:	6800      	ldr	r0, [r0, #0]
    5ba4:	2800      	cmp	r0, #0
    5ba6:	f000 8149 	beq.w	5e3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b4>
    5baa:	6870      	ldr	r0, [r6, #4]
    5bac:	b178      	cbz	r0, 5bce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x346>
    5bae:	f100 0990 	add.w	r9, r0, #144	; 0x90
    5bb2:	f500 71b9 	add.w	r1, r0, #370	; 0x172
    5bb6:	f8b0 a000 	ldrh.w	sl, [r0]
    5bba:	4640      	mov	r0, r8
    5bbc:	f1b8 0f10 	cmp.w	r8, #16
    5bc0:	d063      	beq.n	5c8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x402>
    5bc2:	dc09      	bgt.n	5bd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x350>
    5bc4:	2801      	cmp	r0, #1
    5bc6:	d00c      	beq.n	5be2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x35a>
    5bc8:	280b      	cmp	r0, #11
    5bca:	d021      	beq.n	5c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x388>
    5bcc:	e0c0      	b.n	5d50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    5bce:	f240 2182 	movw	r1, #642	; 0x282
    5bd2:	2010      	movs	r0, #16
    5bd4:	f7fe fa7c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bd8:	281a      	cmp	r0, #26
    5bda:	d078      	beq.n	5cce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x446>
    5bdc:	281b      	cmp	r0, #27
    5bde:	d031      	beq.n	5c44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3bc>
    5be0:	e0b6      	b.n	5d50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    5be2:	f1b9 0f00 	cmp.w	r9, #0
    5be6:	d00d      	beq.n	5c04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x37c>
    5be8:	7065      	strb	r5, [r4, #1]
    5bea:	7027      	strb	r7, [r4, #0]
    5bec:	7125      	strb	r5, [r4, #4]
    5bee:	f8a4 a005 	strh.w	sl, [r4, #5]
    5bf2:	f899 005d 	ldrb.w	r0, [r9, #93]	; 0x5d
    5bf6:	71e0      	strb	r0, [r4, #7]
    5bf8:	f8b9 005e 	ldrh.w	r0, [r9, #94]	; 0x5e
    5bfc:	8120      	strh	r0, [r4, #8]
    5bfe:	f8b9 0060 	ldrh.w	r0, [r9, #96]	; 0x60
    5c02:	8160      	strh	r0, [r4, #10]
    5c04:	f1b8 0f0b 	cmp.w	r8, #11
    5c08:	bf1c      	itt	ne
    5c0a:	46a9      	movne	r9, r5
    5c0c:	7235      	strbne	r5, [r6, #8]
    5c0e:	e70a      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5c10:	4650      	mov	r0, sl
    5c12:	f7fe febd 	bl	4990 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5c16:	b180      	cbz	r0, 5c3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3b2>
    5c18:	7065      	strb	r5, [r4, #1]
    5c1a:	210f      	movs	r1, #15
    5c1c:	7021      	strb	r1, [r4, #0]
    5c1e:	f8a4 a006 	strh.w	sl, [r4, #6]
    5c22:	8127      	strh	r7, [r4, #8]
    5c24:	2200      	movs	r2, #0
    5c26:	7127      	strb	r7, [r4, #4]
    5c28:	4611      	mov	r1, r2
    5c2a:	f008 f8ff 	bl	de2c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5c2e:	f1b8 0f0b 	cmp.w	r8, #11
    5c32:	bf1c      	itt	ne
    5c34:	46a9      	movne	r9, r5
    5c36:	7235      	strbne	r5, [r6, #8]
    5c38:	e6f5      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5c3a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    5c3e:	2010      	movs	r0, #16
    5c40:	f7fe fa46 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c44:	f7ff fdee 	bl	5824 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    5c48:	b390      	cbz	r0, 5cb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x428>
    5c4a:	7235      	strb	r5, [r6, #8]
    5c4c:	4650      	mov	r0, sl
    5c4e:	f8ad a000 	strh.w	sl, [sp]
    5c52:	a902      	add	r1, sp, #8
    5c54:	f008 fc6a 	bl	e52c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5c58:	b120      	cbz	r0, 5c64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3dc>
    5c5a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    5c5e:	2010      	movs	r0, #16
    5c60:	f7fe fa36 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c64:	9803      	ldr	r0, [sp, #12]
    5c66:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    5c6a:	f88d 1002 	strb.w	r1, [sp, #2]
    5c6e:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    5c72:	f88d 1003 	strb.w	r1, [sp, #3]
    5c76:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    5c7a:	f8ad 0004 	strh.w	r0, [sp, #4]
    5c7e:	2102      	movs	r1, #2
    5c80:	4668      	mov	r0, sp
    5c82:	f00a f9c3 	bl	1000c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    5c86:	b1d0      	cbz	r0, 5cbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x436>
    5c88:	e014      	b.n	5cb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x42c>
    5c8a:	e051      	b.n	5d30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4a8>
    5c8c:	20001930 	.word	0x20001930
    5c90:	200000f0 	.word	0x200000f0
    5c94:	200000f8 	.word	0x200000f8
    5c98:	20000108 	.word	0x20000108
    5c9c:	20000104 	.word	0x20000104
    5ca0:	2000010c 	.word	0x2000010c
    5ca4:	200018f5 	.word	0x200018f5
    5ca8:	20001911 	.word	0x20001911
    5cac:	20000100 	.word	0x20000100
    5cb0:	e04d      	b.n	5d4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c6>
    5cb2:	e00c      	b.n	5cce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x446>
    5cb4:	f44f 71c2 	mov.w	r1, #388	; 0x184
    5cb8:	2010      	movs	r0, #16
    5cba:	f7fe fa09 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cbe:	f1b8 0f0b 	cmp.w	r8, #11
    5cc2:	bf1c      	itt	ne
    5cc4:	46a9      	movne	r9, r5
    5cc6:	7235      	strbne	r5, [r6, #8]
    5cc8:	f47f adf8 	bne.w	58bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5ccc:	e6ab      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5cce:	f7ff fd9f 	bl	5810 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    5cd2:	b3e0      	cbz	r0, 5d4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c6>
    5cd4:	7235      	strb	r5, [r6, #8]
    5cd6:	a903      	add	r1, sp, #12
    5cd8:	4650      	mov	r0, sl
    5cda:	f00a f805 	bl	fce8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    5cde:	b120      	cbz	r0, 5cea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x462>
    5ce0:	f240 118b 	movw	r1, #395	; 0x18b
    5ce4:	2010      	movs	r0, #16
    5ce6:	f7fe f9f3 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cea:	f8ad a000 	strh.w	sl, [sp]
    5cee:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    5cf2:	f8ad 0002 	strh.w	r0, [sp, #2]
    5cf6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    5cfa:	f8ad 0004 	strh.w	r0, [sp, #4]
    5cfe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5d02:	f8ad 0006 	strh.w	r0, [sp, #6]
    5d06:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    5d0a:	f8ad 0008 	strh.w	r0, [sp, #8]
    5d0e:	4668      	mov	r0, sp
    5d10:	f00a f819 	bl	fd46 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    5d14:	b120      	cbz	r0, 5d20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x498>
    5d16:	f44f 71ca 	mov.w	r1, #404	; 0x194
    5d1a:	2010      	movs	r0, #16
    5d1c:	f7fe f9d8 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d20:	f1b8 0f0b 	cmp.w	r8, #11
    5d24:	bf1c      	itt	ne
    5d26:	46a9      	movne	r9, r5
    5d28:	7235      	strbne	r5, [r6, #8]
    5d2a:	f47f adc7 	bne.w	58bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5d2e:	e67a      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5d30:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    5d34:	f000 0001 	and.w	r0, r0, #1
    5d38:	f7ff fd5e 	bl	57f8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    5d3c:	b1c0      	cbz	r0, 5d70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4e8>
    5d3e:	f1b8 0f0b 	cmp.w	r8, #11
    5d42:	bf1c      	itt	ne
    5d44:	46a9      	movne	r9, r5
    5d46:	7235      	strbne	r5, [r6, #8]
    5d48:	f47f adb8 	bne.w	58bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    5d4c:	e66b      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5d4e:	e7ff      	b.n	5d50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c8>
    5d50:	f1b8 0f08 	cmp.w	r8, #8
    5d54:	d011      	beq.n	5d7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4f2>
    5d56:	483a      	ldr	r0, [pc, #232]	; (5e40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    5d58:	6803      	ldr	r3, [r0, #0]
    5d5a:	b11b      	cbz	r3, 5d64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4dc>
    5d5c:	6870      	ldr	r0, [r6, #4]
    5d5e:	4642      	mov	r2, r8
    5d60:	4621      	mov	r1, r4
    5d62:	4798      	blx	r3
    5d64:	f1b8 0f0b 	cmp.w	r8, #11
    5d68:	bf1c      	itt	ne
    5d6a:	46a9      	movne	r9, r5
    5d6c:	7235      	strbne	r5, [r6, #8]
    5d6e:	e65a      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5d70:	4833      	ldr	r0, [pc, #204]	; (5e40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    5d72:	6803      	ldr	r3, [r0, #0]
    5d74:	2b00      	cmp	r3, #0
    5d76:	d1f1      	bne.n	5d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4d4>
    5d78:	e7f4      	b.n	5d64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4dc>
    5d7a:	4650      	mov	r0, sl
    5d7c:	f7fe fdf2 	bl	4964 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5d80:	f007 ff4a 	bl	dc18 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5d84:	b1c0      	cbz	r0, 5db8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x530>
    5d86:	4650      	mov	r0, sl
    5d88:	f7ff f848 	bl	4e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5d8c:	2100      	movs	r1, #0
    5d8e:	4650      	mov	r0, sl
    5d90:	f7fe fc4e 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5d94:	2101      	movs	r1, #1
    5d96:	4650      	mov	r0, sl
    5d98:	f7fe fc4a 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5d9c:	f1b9 0f00 	cmp.w	r9, #0
    5da0:	d008      	beq.n	5db4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x52c>
    5da2:	7065      	strb	r5, [r4, #1]
    5da4:	200c      	movs	r0, #12
    5da6:	7020      	strb	r0, [r4, #0]
    5da8:	7125      	strb	r5, [r4, #4]
    5daa:	f8a4 a005 	strh.w	sl, [r4, #5]
    5dae:	f899 002e 	ldrb.w	r0, [r9, #46]	; 0x2e
    5db2:	71e0      	strb	r0, [r4, #7]
    5db4:	7235      	strb	r5, [r6, #8]
    5db6:	e636      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5db8:	f240 21c3 	movw	r1, #707	; 0x2c3
    5dbc:	2010      	movs	r0, #16
    5dbe:	f7fe f987 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dc2:	7065      	strb	r5, [r4, #1]
    5dc4:	201d      	movs	r0, #29
    5dc6:	7020      	strb	r0, [r4, #0]
    5dc8:	f8d6 0009 	ldr.w	r0, [r6, #9]
    5dcc:	6060      	str	r0, [r4, #4]
    5dce:	f8d6 000d 	ldr.w	r0, [r6, #13]
    5dd2:	60a0      	str	r0, [r4, #8]
    5dd4:	7235      	strb	r5, [r6, #8]
    5dd6:	e626      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5dd8:	4819      	ldr	r0, [pc, #100]	; (5e40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b8>)
    5dda:	6800      	ldr	r0, [r0, #0]
    5ddc:	b180      	cbz	r0, 5e00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x578>
    5dde:	6870      	ldr	r0, [r6, #4]
    5de0:	7065      	strb	r5, [r4, #1]
    5de2:	210a      	movs	r1, #10
    5de4:	7021      	strb	r1, [r4, #0]
    5de6:	8801      	ldrh	r1, [r0, #0]
    5de8:	80a1      	strh	r1, [r4, #4]
    5dea:	f8d0 1338 	ldr.w	r1, [r0, #824]	; 0x338
    5dee:	f8d0 233c 	ldr.w	r2, [r0, #828]	; 0x33c
    5df2:	f8c4 1006 	str.w	r1, [r4, #6]
    5df6:	f8c4 200a 	str.w	r2, [r4, #10]
    5dfa:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
    5dfe:	81e0      	strh	r0, [r4, #14]
    5e00:	7235      	strb	r5, [r6, #8]
    5e02:	e610      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5e04:	480f      	ldr	r0, [pc, #60]	; (5e44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5bc>)
    5e06:	6803      	ldr	r3, [r0, #0]
    5e08:	b11b      	cbz	r3, 5e12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58a>
    5e0a:	2200      	movs	r2, #0
    5e0c:	4621      	mov	r1, r4
    5e0e:	4610      	mov	r0, r2
    5e10:	4798      	blx	r3
    5e12:	7235      	strb	r5, [r6, #8]
    5e14:	e607      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5e16:	480c      	ldr	r0, [pc, #48]	; (5e48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5c0>)
    5e18:	6803      	ldr	r3, [r0, #0]
    5e1a:	b11b      	cbz	r3, 5e24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x59c>
    5e1c:	2200      	movs	r2, #0
    5e1e:	4621      	mov	r1, r4
    5e20:	4610      	mov	r0, r2
    5e22:	4798      	blx	r3
    5e24:	7235      	strb	r5, [r6, #8]
    5e26:	e5fe      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5e28:	7065      	strb	r5, [r4, #1]
    5e2a:	2027      	movs	r0, #39	; 0x27
    5e2c:	7020      	strb	r0, [r4, #0]
    5e2e:	7235      	strb	r5, [r6, #8]
    5e30:	e5f9      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5e32:	f240 412d 	movw	r1, #1069	; 0x42d
    5e36:	2010      	movs	r0, #16
    5e38:	f7fe f94a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e3c:	7235      	strb	r5, [r6, #8]
    5e3e:	e5f2      	b.n	5a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    5e40:	20000100 	.word	0x20000100
    5e44:	20000110 	.word	0x20000110
    5e48:	200000fc 	.word	0x200000fc

00005e4c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    5e4c:	4909      	ldr	r1, [pc, #36]	; (5e74 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x28>)
    5e4e:	7008      	strb	r0, [r1, #0]
    5e50:	2000      	movs	r0, #0
    5e52:	6048      	str	r0, [r1, #4]
    5e54:	6088      	str	r0, [r1, #8]
    5e56:	4908      	ldr	r1, [pc, #32]	; (5e78 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2c>)
    5e58:	f8c1 003b 	str.w	r0, [r1, #59]	; 0x3b
    5e5c:	f8c1 003f 	str.w	r0, [r1, #63]	; 0x3f
    5e60:	f8c1 0043 	str.w	r0, [r1, #67]	; 0x43
    5e64:	f8c1 0047 	str.w	r0, [r1, #71]	; 0x47
    5e68:	f8a1 004b 	strh.w	r0, [r1, #75]	; 0x4b
    5e6c:	f881 004d 	strb.w	r0, [r1, #77]	; 0x4d
    5e70:	4770      	bx	lr
    5e72:	0000      	.short	0x0000
    5e74:	200000ec 	.word	0x200000ec
    5e78:	200018f5 	.word	0x200018f5

00005e7c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    5e7c:	4908      	ldr	r1, [pc, #32]	; (5ea0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x24>)
    5e7e:	2000      	movs	r0, #0
    5e80:	6048      	str	r0, [r1, #4]
    5e82:	6088      	str	r0, [r1, #8]
    5e84:	4907      	ldr	r1, [pc, #28]	; (5ea4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x28>)
    5e86:	f8c1 003b 	str.w	r0, [r1, #59]	; 0x3b
    5e8a:	f8c1 003f 	str.w	r0, [r1, #63]	; 0x3f
    5e8e:	f8c1 0043 	str.w	r0, [r1, #67]	; 0x43
    5e92:	f8c1 0047 	str.w	r0, [r1, #71]	; 0x47
    5e96:	f8a1 004b 	strh.w	r0, [r1, #75]	; 0x4b
    5e9a:	f881 004d 	strb.w	r0, [r1, #77]	; 0x4d
    5e9e:	4770      	bx	lr
    5ea0:	200000ec 	.word	0x200000ec
    5ea4:	200018f5 	.word	0x200018f5

00005ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    5ea8:	4801      	ldr	r0, [pc, #4]	; (5eb0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    5eaa:	7800      	ldrb	r0, [r0, #0]
    5eac:	f7fd bde8 	b.w	3a80 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5eb0:	200000ec 	.word	0x200000ec

00005eb4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    5eb4:	4902      	ldr	r1, [pc, #8]	; (5ec0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    5eb6:	4801      	ldr	r0, [pc, #4]	; (5ebc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    5eb8:	6008      	str	r0, [r1, #0]
    5eba:	4770      	bx	lr
    5ebc:	0000ec77 	.word	0x0000ec77
    5ec0:	200000f8 	.word	0x200000f8

00005ec4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    5ec4:	4902      	ldr	r1, [pc, #8]	; (5ed0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    5ec6:	4801      	ldr	r0, [pc, #4]	; (5ecc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    5ec8:	6008      	str	r0, [r1, #0]
    5eca:	4770      	bx	lr
    5ecc:	00007b39 	.word	0x00007b39
    5ed0:	2000010c 	.word	0x2000010c

00005ed4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    5ed4:	b470      	push	{r4, r5, r6}
    5ed6:	f06f 021f 	mvn.w	r2, #31
    5eda:	0c01      	lsrs	r1, r0, #16
    5edc:	ea02 2590 	and.w	r5, r2, r0, lsr #10
    5ee0:	231f      	movs	r3, #31
    5ee2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5ee6:	3854      	subs	r0, #84	; 0x54
    5ee8:	bf1c      	itt	ne
    5eea:	f5a1 40aa 	subne.w	r0, r1, #21760	; 0x5500
    5eee:	f1b0 0055 	subsne.w	r0, r0, #85	; 0x55
    5ef2:	d009      	beq.n	5f08 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    5ef4:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5ef8:	38aa      	subs	r0, #170	; 0xaa
    5efa:	bf1e      	ittt	ne
    5efc:	f5a1 402a 	subne.w	r0, r1, #43520	; 0xaa00
    5f00:	f1b0 00aa 	subsne.w	r0, r0, #170	; 0xaa
    5f04:	2001      	movne	r0, #1
    5f06:	d100      	bne.n	5f0a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x36>
    5f08:	2000      	movs	r0, #0
    5f0a:	f04f 0c00 	mov.w	ip, #0
    5f0e:	4662      	mov	r2, ip
    5f10:	ea4f 040c 	mov.w	r4, ip
    5f14:	ea8c 0601 	eor.w	r6, ip, r1
    5f18:	43f6      	mvns	r6, r6
    5f1a:	4316      	orrs	r6, r2
    5f1c:	f1b6 3fff 	cmp.w	r6, #4294967295
    5f20:	d011      	beq.n	5f46 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x72>
    5f22:	f005 0601 	and.w	r6, r5, #1
    5f26:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    5f2a:	ea4c 3cc6 	orr.w	ip, ip, r6, lsl #15
    5f2e:	f003 0601 	and.w	r6, r3, #1
    5f32:	0852      	lsrs	r2, r2, #1
    5f34:	086d      	lsrs	r5, r5, #1
    5f36:	085b      	lsrs	r3, r3, #1
    5f38:	1c64      	adds	r4, r4, #1
    5f3a:	ea42 32c6 	orr.w	r2, r2, r6, lsl #15
    5f3e:	2c16      	cmp	r4, #22
    5f40:	d3e8      	bcc.n	5f14 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x40>
    5f42:	bc70      	pop	{r4, r5, r6}
    5f44:	4770      	bx	lr
    5f46:	bc70      	pop	{r4, r5, r6}
    5f48:	2000      	movs	r0, #0
    5f4a:	4770      	bx	lr

00005f4c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    5f4c:	b510      	push	{r4, lr}
    5f4e:	4c0c      	ldr	r4, [pc, #48]	; (5f80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
    5f50:	2108      	movs	r1, #8
    5f52:	4620      	mov	r0, r4
    5f54:	f7fe f946 	bl	41e4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    5f58:	6820      	ldr	r0, [r4, #0]
    5f5a:	2800      	cmp	r0, #0
    5f5c:	bf04      	itt	eq
    5f5e:	6860      	ldreq	r0, [r4, #4]
    5f60:	2800      	cmpeq	r0, #0
    5f62:	d0f5      	beq.n	5f50 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    5f64:	4c07      	ldr	r4, [pc, #28]	; (5f84 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x38>)
    5f66:	bf00      	nop
    5f68:	f04f 0108 	mov.w	r1, #8
    5f6c:	4620      	mov	r0, r4
    5f6e:	f7fe f939 	bl	41e4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    5f72:	6820      	ldr	r0, [r4, #0]
    5f74:	2800      	cmp	r0, #0
    5f76:	bf04      	itt	eq
    5f78:	6860      	ldreq	r0, [r4, #4]
    5f7a:	2800      	cmpeq	r0, #0
    5f7c:	d0f4      	beq.n	5f68 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1c>
    5f7e:	bd10      	pop	{r4, pc}
    5f80:	20000114 	.word	0x20000114
    5f84:	2000011c 	.word	0x2000011c

00005f88 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    5f88:	4a09      	ldr	r2, [pc, #36]	; (5fb0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x28>)
    5f8a:	480a      	ldr	r0, [pc, #40]	; (5fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x2c>)
    5f8c:	e9d2 1300 	ldrd	r1, r3, [r2]
    5f90:	4348      	muls	r0, r1
    5f92:	404b      	eors	r3, r1
    5f94:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
    5f98:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
    5f9c:	6011      	str	r1, [r2, #0]
    5f9e:	ea4f 60f0 	mov.w	r0, r0, ror #27
    5fa2:	ea4f 41f3 	mov.w	r1, r3, ror #19
    5fa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5faa:	6051      	str	r1, [r2, #4]
    5fac:	4770      	bx	lr
    5fae:	0000      	.short	0x0000
    5fb0:	20000114 	.word	0x20000114
    5fb4:	9e3779bb 	.word	0x9e3779bb

00005fb8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    5fb8:	4a09      	ldr	r2, [pc, #36]	; (5fe0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x28>)
    5fba:	480a      	ldr	r0, [pc, #40]	; (5fe4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x2c>)
    5fbc:	e9d2 1300 	ldrd	r1, r3, [r2]
    5fc0:	4348      	muls	r0, r1
    5fc2:	404b      	eors	r3, r1
    5fc4:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
    5fc8:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
    5fcc:	6011      	str	r1, [r2, #0]
    5fce:	ea4f 60f0 	mov.w	r0, r0, ror #27
    5fd2:	ea4f 41f3 	mov.w	r1, r3, ror #19
    5fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5fda:	6051      	str	r1, [r2, #4]
    5fdc:	4770      	bx	lr
    5fde:	0000      	.short	0x0000
    5fe0:	2000011c 	.word	0x2000011c
    5fe4:	9e3779bb 	.word	0x9e3779bb

00005fe8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    5fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fec:	4604      	mov	r4, r0
    5fee:	7c80      	ldrb	r0, [r0, #18]
    5ff0:	2800      	cmp	r0, #0
    5ff2:	bf16      	itet	ne
    5ff4:	2802      	cmpne	r0, #2
    5ff6:	2000      	moveq	r0, #0
    5ff8:	2001      	movne	r0, #1
    5ffa:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    5ffe:	b318      	cbz	r0, 6048 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x60>
    6000:	7e60      	ldrb	r0, [r4, #25]
    6002:	b368      	cbz	r0, 6060 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
    6004:	f8d4 0013 	ldr.w	r0, [r4, #19]
    6008:	f8c4 0061 	str.w	r0, [r4, #97]	; 0x61
    600c:	f8b4 0017 	ldrh.w	r0, [r4, #23]
    6010:	f8a4 0065 	strh.w	r0, [r4, #101]	; 0x65
    6014:	7ca0      	ldrb	r0, [r4, #18]
    6016:	2802      	cmp	r0, #2
    6018:	bf16      	itet	ne
    601a:	2803      	cmpne	r0, #3
    601c:	2101      	moveq	r1, #1
    601e:	2100      	movne	r1, #0
    6020:	76a1      	strb	r1, [r4, #26]
    6022:	f04f 0008 	mov.w	r0, #8
    6026:	76e0      	strb	r0, [r4, #27]
    6028:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    602c:	f04f 0701 	mov.w	r7, #1
    6030:	f04f 0800 	mov.w	r8, #0
    6034:	2801      	cmp	r0, #1
    6036:	bf04      	itt	eq
    6038:	f894 2066 	ldrbeq.w	r2, [r4, #102]	; 0x66
    603c:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    6040:	d01b      	beq.n	607a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    6042:	2801      	cmp	r0, #1
    6044:	d011      	beq.n	606a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6046:	e016      	b.n	6076 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8e>
    6048:	f104 0161 	add.w	r1, r4, #97	; 0x61
    604c:	2000      	movs	r0, #0
    604e:	f7fe fef3 	bl	4e38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6052:	2800      	cmp	r0, #0
    6054:	d1de      	bne.n	6014 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2c>
    6056:	f240 418a 	movw	r1, #1162	; 0x48a
    605a:	202d      	movs	r0, #45	; 0x2d
    605c:	f7fe f838 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6060:	f240 418e 	movw	r1, #1166	; 0x48e
    6064:	202d      	movs	r0, #45	; 0x2d
    6066:	f7fe f833 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    606a:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    606e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6072:	2840      	cmp	r0, #64	; 0x40
    6074:	d001      	beq.n	607a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
    6076:	2000      	movs	r0, #0
    6078:	e000      	b.n	607c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
    607a:	2001      	movs	r0, #1
    607c:	7720      	strb	r0, [r4, #28]
    607e:	b131      	cbz	r1, 608e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa6>
    6080:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    6084:	f104 0168 	add.w	r1, r4, #104	; 0x68
    6088:	f7ff f836 	bl	50f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    608c:	76e0      	strb	r0, [r4, #27]
    608e:	f7ff f861 	bl	5154 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6092:	4937      	ldr	r1, [pc, #220]	; (6170 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x188>)
    6094:	fba0 6501 	umull	r6, r5, r0, r1
    6098:	f7fc fb6c 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    609c:	1980      	adds	r0, r0, r6
    609e:	4169      	adcs	r1, r5
    60a0:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    60a4:	2600      	movs	r6, #0
    60a6:	7ee0      	ldrb	r0, [r4, #27]
    60a8:	f7fe ff5a 	bl	4f60 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    60ac:	4605      	mov	r5, r0
    60ae:	7ea0      	ldrb	r0, [r4, #26]
    60b0:	2800      	cmp	r0, #0
    60b2:	bf18      	it	ne
    60b4:	2d00      	cmpne	r5, #0
    60b6:	d003      	beq.n	60c0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xd8>
    60b8:	7ee0      	ldrb	r0, [r4, #27]
    60ba:	f7fe ff45 	bl	4f48 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    60be:	b158      	cbz	r0, 60d8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf0>
    60c0:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    60c4:	2800      	cmp	r0, #0
    60c6:	bf1c      	itt	ne
    60c8:	7f20      	ldrbne	r0, [r4, #28]
    60ca:	2800      	cmpne	r0, #0
    60cc:	d01d      	beq.n	610a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    60ce:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    60d2:	2801      	cmp	r0, #1
    60d4:	d00e      	beq.n	60f4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10c>
    60d6:	e013      	b.n	6100 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x118>
    60d8:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
    60dc:	4632      	mov	r2, r6
    60de:	f104 0161 	add.w	r1, r4, #97	; 0x61
    60e2:	4628      	mov	r0, r5
    60e4:	f008 f9a2 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    60e8:	7ee1      	ldrb	r1, [r4, #27]
    60ea:	f104 0061 	add.w	r0, r4, #97	; 0x61
    60ee:	f7fe ff43 	bl	4f78 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    60f2:	e00a      	b.n	610a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    60f4:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    60f8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    60fc:	2840      	cmp	r0, #64	; 0x40
    60fe:	d02f      	beq.n	6160 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>
    6100:	4641      	mov	r1, r8
    6102:	f104 0061 	add.w	r0, r4, #97	; 0x61
    6106:	f008 f980 	bl	e40a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    610a:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
    610e:	78a0      	ldrb	r0, [r4, #2]
    6110:	f010 0f04 	tst.w	r0, #4
    6114:	bf08      	it	eq
    6116:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    611a:	2600      	movs	r6, #0
    611c:	7ee0      	ldrb	r0, [r4, #27]
    611e:	f7fe ff65 	bl	4fec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6122:	0005      	movs	r5, r0
    6124:	bf08      	it	eq
    6126:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    612a:	2110      	movs	r1, #16
    612c:	f7ff fab8 	bl	56a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6130:	2800      	cmp	r0, #0
    6132:	bf18      	it	ne
    6134:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    6138:	f884 706e 	strb.w	r7, [r4, #110]	; 0x6e
    613c:	4632      	mov	r2, r6
    613e:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    6142:	4628      	mov	r0, r5
    6144:	f008 f972 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6148:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    614c:	4c09      	ldr	r4, [pc, #36]	; (6174 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x18c>)
    614e:	68a0      	ldr	r0, [r4, #8]
    6150:	f008 fcba 	bl	eac8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6154:	68a0      	ldr	r0, [r4, #8]
    6156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    615a:	2101      	movs	r1, #1
    615c:	f008 bcbb 	b.w	ead6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6160:	f7fe fec2 	bl	4ee8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    6164:	4632      	mov	r2, r6
    6166:	f104 0161 	add.w	r1, r4, #97	; 0x61
    616a:	f008 f95f 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    616e:	e7cc      	b.n	610a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
    6170:	000f4240 	.word	0x000f4240
    6174:	20000124 	.word	0x20000124

00006178 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    6178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    617a:	4604      	mov	r4, r0
    617c:	3028      	adds	r0, #40	; 0x28
    617e:	f008 feee 	bl	ef5e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6182:	8861      	ldrh	r1, [r4, #2]
    6184:	f3c1 1200 	ubfx	r2, r1, #4, #1
    6188:	b122      	cbz	r2, 6194 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1c>
    618a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    618e:	2228      	movs	r2, #40	; 0x28
    6190:	f001 ba34 	b.w	75fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6194:	f3c1 0240 	ubfx	r2, r1, #1, #1
    6198:	2a00      	cmp	r2, #0
    619a:	bf14      	ite	ne
    619c:	f8b4 c054 	ldrhne.w	ip, [r4, #84]	; 0x54
    61a0:	f8b4 c04c 	ldrheq.w	ip, [r4, #76]	; 0x4c
    61a4:	7922      	ldrb	r2, [r4, #4]
    61a6:	4b1e      	ldr	r3, [pc, #120]	; (6220 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa8>)
    61a8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    61ac:	2a08      	cmp	r2, #8
    61ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    61b2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
    61b6:	fbb3 f6f5 	udiv	r6, r3, r5
    61ba:	bf08      	it	eq
    61bc:	2540      	moveq	r5, #64	; 0x40
    61be:	d00a      	beq.n	61d6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x5e>
    61c0:	2a04      	cmp	r2, #4
    61c2:	bf08      	it	eq
    61c4:	2510      	moveq	r5, #16
    61c6:	d006      	beq.n	61d6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x5e>
    61c8:	2a02      	cmp	r2, #2
    61ca:	bf07      	ittee	eq
    61cc:	2504      	moveq	r5, #4
    61ce:	2312      	moveq	r3, #18
    61d0:	2508      	movne	r5, #8
    61d2:	2319      	movne	r3, #25
    61d4:	e000      	b.n	61d8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x60>
    61d6:	2314      	movs	r3, #20
    61d8:	fb15 f303 	smulbb	r3, r5, r3
    61dc:	2a08      	cmp	r2, #8
    61de:	bf08      	it	eq
    61e0:	2540      	moveq	r5, #64	; 0x40
    61e2:	d019      	beq.n	6218 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa0>
    61e4:	2a04      	cmp	r2, #4
    61e6:	bf08      	it	eq
    61e8:	252e      	moveq	r5, #46	; 0x2e
    61ea:	d015      	beq.n	6218 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa0>
    61ec:	2500      	movs	r5, #0
    61ee:	2a02      	cmp	r2, #2
    61f0:	bf0c      	ite	eq
    61f2:	2218      	moveq	r2, #24
    61f4:	2228      	movne	r2, #40	; 0x28
    61f6:	442a      	add	r2, r5
    61f8:	441a      	add	r2, r3
    61fa:	fb12 6200 	smlabb	r2, r2, r0, r6
    61fe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    6202:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    6206:	4410      	add	r0, r2
    6208:	9100      	str	r1, [sp, #0]
    620a:	4601      	mov	r1, r0
    620c:	7962      	ldrb	r2, [r4, #5]
    620e:	2301      	movs	r3, #1
    6210:	4660      	mov	r0, ip
    6212:	f000 fe83 	bl	6f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x474>
    6216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6218:	f44f 72a8 	mov.w	r2, #336	; 0x150
    621c:	e7eb      	b.n	61f6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x7e>
    621e:	0000      	.short	0x0000
    6220:	000075b0 	.word	0x000075b0

00006224 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6228:	4680      	mov	r8, r0
    622a:	b08d      	sub	sp, #52	; 0x34
    622c:	460c      	mov	r4, r1
    622e:	69c2      	ldr	r2, [r0, #28]
    6230:	e9d8 0105 	ldrd	r0, r1, [r8, #20]
    6234:	e9d8 7600 	ldrd	r7, r6, [r8]
    6238:	e9d8 a903 	ldrd	sl, r9, [r8, #12]
    623c:	9205      	str	r2, [sp, #20]
    623e:	e9cd 0103 	strd	r0, r1, [sp, #12]
    6242:	f8d8 0020 	ldr.w	r0, [r8, #32]
    6246:	9006      	str	r0, [sp, #24]
    6248:	a801      	add	r0, sp, #4
    624a:	f008 ff00 	bl	f04e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    624e:	7aa0      	ldrb	r0, [r4, #10]
    6250:	f360 4917 	bfi	r9, r0, #16, #8
    6254:	7820      	ldrb	r0, [r4, #0]
    6256:	f360 0707 	bfi	r7, r0, #0, #8
    625a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    625e:	f8ad 0000 	strh.w	r0, [sp]
    6262:	f89d 0000 	ldrb.w	r0, [sp]
    6266:	f000 0101 	and.w	r1, r0, #1
    626a:	f3c0 0240 	ubfx	r2, r0, #1, #1
    626e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6272:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6276:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    627a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    627e:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6282:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6286:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    628a:	f3c0 1240 	ubfx	r2, r0, #5, #1
    628e:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6292:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6296:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
    629a:	7d20      	ldrb	r0, [r4, #20]
    629c:	f36b 471f 	bfi	r7, fp, #16, #16
    62a0:	2801      	cmp	r0, #1
    62a2:	bf18      	it	ne
    62a4:	2802      	cmpne	r0, #2
    62a6:	d003      	beq.n	62b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x8c>
    62a8:	2803      	cmp	r0, #3
    62aa:	bf08      	it	eq
    62ac:	2008      	moveq	r0, #8
    62ae:	d10e      	bne.n	62ce <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xaa>
    62b0:	7861      	ldrb	r1, [r4, #1]
    62b2:	f360 0607 	bfi	r6, r0, #0, #8
    62b6:	f011 0f10 	tst.w	r1, #16
    62ba:	d10f      	bne.n	62dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb8>
    62bc:	7da1      	ldrb	r1, [r4, #22]
    62be:	2901      	cmp	r1, #1
    62c0:	bf18      	it	ne
    62c2:	2902      	cmpne	r1, #2
    62c4:	d008      	beq.n	62d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb4>
    62c6:	2903      	cmp	r1, #3
    62c8:	bf08      	it	eq
    62ca:	2108      	moveq	r1, #8
    62cc:	d004      	beq.n	62d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb4>
    62ce:	f240 21bb 	movw	r1, #699	; 0x2bb
    62d2:	2006      	movs	r0, #6
    62d4:	f7fd fefc 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62d8:	f361 260f 	bfi	r6, r1, #8, #8
    62dc:	f3ca 4107 	ubfx	r1, sl, #16, #8
    62e0:	2901      	cmp	r1, #1
    62e2:	d008      	beq.n	62f6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xd2>
    62e4:	7a61      	ldrb	r1, [r4, #9]
    62e6:	a801      	add	r0, sp, #4
    62e8:	f008 fe8c 	bl	f004 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    62ec:	7d20      	ldrb	r0, [r4, #20]
    62ee:	2101      	movs	r1, #1
    62f0:	2802      	cmp	r0, #2
    62f2:	d10f      	bne.n	6314 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    62f4:	e00b      	b.n	630e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xea>
    62f6:	2104      	movs	r1, #4
    62f8:	2808      	cmp	r0, #8
    62fa:	bf08      	it	eq
    62fc:	f361 0607 	bfieq	r6, r1, #0, #8
    6300:	f3c6 2007 	ubfx	r0, r6, #8, #8
    6304:	2808      	cmp	r0, #8
    6306:	bf08      	it	eq
    6308:	f361 260f 	bfieq	r6, r1, #8, #8
    630c:	e7ea      	b.n	62e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc0>
    630e:	7d60      	ldrb	r0, [r4, #21]
    6310:	1c40      	adds	r0, r0, #1
    6312:	b2c1      	uxtb	r1, r0
    6314:	7ea0      	ldrb	r0, [r4, #26]
    6316:	1c40      	adds	r0, r0, #1
    6318:	b2c2      	uxtb	r2, r0
    631a:	a801      	add	r0, sp, #4
    631c:	f008 fe08 	bl	ef30 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6320:	0c38      	lsrs	r0, r7, #16
    6322:	f010 0f08 	tst.w	r0, #8
    6326:	f04f 0500 	mov.w	r5, #0
    632a:	d124      	bne.n	6376 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x152>
    632c:	a801      	add	r0, sp, #4
    632e:	f008 fe16 	bl	ef5e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6332:	7861      	ldrb	r1, [r4, #1]
    6334:	f011 0f10 	tst.w	r1, #16
    6338:	d07b      	beq.n	6432 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x20e>
    633a:	2228      	movs	r2, #40	; 0x28
    633c:	4659      	mov	r1, fp
    633e:	f001 f95d 	bl	75fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6342:	bf00      	nop
    6344:	f240 2171 	movw	r1, #625	; 0x271
    6348:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    634c:	fbb0 f0f1 	udiv	r0, r0, r1
    6350:	fb00 f501 	mul.w	r5, r0, r1
    6354:	f8d4 0002 	ldr.w	r0, [r4, #2]
    6358:	f240 2271 	movw	r2, #625	; 0x271
    635c:	0a00      	lsrs	r0, r0, #8
    635e:	4341      	muls	r1, r0
    6360:	f8d4 0005 	ldr.w	r0, [r4, #5]
    6364:	0a00      	lsrs	r0, r0, #8
    6366:	4350      	muls	r0, r2
    6368:	428d      	cmp	r5, r1
    636a:	bf98      	it	ls
    636c:	460d      	movls	r5, r1
    636e:	d902      	bls.n	6376 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x152>
    6370:	4285      	cmp	r5, r0
    6372:	bf88      	it	hi
    6374:	4605      	movhi	r5, r0
    6376:	7ca0      	ldrb	r0, [r4, #18]
    6378:	f360 290f 	bfi	r9, r0, #8, #8
    637c:	7e20      	ldrb	r0, [r4, #24]
    637e:	2801      	cmp	r0, #1
    6380:	bf18      	it	ne
    6382:	2000      	movne	r0, #0
    6384:	f360 0a07 	bfi	sl, r0, #0, #8
    6388:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    638c:	f007 ff15 	bl	e1ba <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6390:	4683      	mov	fp, r0
    6392:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    6396:	f007 ffb8 	bl	e30a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    639a:	4583      	cmp	fp, r0
    639c:	bf28      	it	cs
    639e:	4658      	movcs	r0, fp
    63a0:	b198      	cbz	r0, 63ca <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1a6>
    63a2:	a901      	add	r1, sp, #4
    63a4:	9108      	str	r1, [sp, #32]
    63a6:	0c39      	lsrs	r1, r7, #16
    63a8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    63ac:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    63b0:	0a31      	lsrs	r1, r6, #8
    63b2:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
    63b6:	950a      	str	r5, [sp, #40]	; 0x28
    63b8:	a908      	add	r1, sp, #32
    63ba:	f001 f803 	bl	73c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c4>
    63be:	2800      	cmp	r0, #0
    63c0:	bf02      	ittt	eq
    63c2:	2045      	moveq	r0, #69	; 0x45
    63c4:	b00d      	addeq	sp, #52	; 0x34
    63c6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63ca:	f8c8 a00c 	str.w	sl, [r8, #12]
    63ce:	f8c8 7000 	str.w	r7, [r8]
    63d2:	e9c8 6501 	strd	r6, r5, [r8, #4]
    63d6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    63da:	9a05      	ldr	r2, [sp, #20]
    63dc:	f8c8 9010 	str.w	r9, [r8, #16]
    63e0:	f8c8 201c 	str.w	r2, [r8, #28]
    63e4:	e9c8 0105 	strd	r0, r1, [r8, #20]
    63e8:	9806      	ldr	r0, [sp, #24]
    63ea:	f8c8 0020 	str.w	r0, [r8, #32]
    63ee:	9801      	ldr	r0, [sp, #4]
    63f0:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
    63f4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    63f8:	f8a8 002c 	strh.w	r0, [r8, #44]	; 0x2c
    63fc:	7ae0      	ldrb	r0, [r4, #11]
    63fe:	2800      	cmp	r0, #0
    6400:	bf16      	itet	ne
    6402:	2802      	cmpne	r0, #2
    6404:	2000      	moveq	r0, #0
    6406:	2001      	movne	r0, #1
    6408:	f888 0067 	strb.w	r0, [r8, #103]	; 0x67
    640c:	68e0      	ldr	r0, [r4, #12]
    640e:	f8c8 0068 	str.w	r0, [r8, #104]	; 0x68
    6412:	8a20      	ldrh	r0, [r4, #16]
    6414:	f8a8 006c 	strh.w	r0, [r8, #108]	; 0x6c
    6418:	7de0      	ldrb	r0, [r4, #23]
    641a:	f898 103e 	ldrb.w	r1, [r8, #62]	; 0x3e
    641e:	f360 1107 	bfi	r1, r0, #4, #4
    6422:	f888 103e 	strb.w	r1, [r8, #62]	; 0x3e
    6426:	b00d      	add	sp, #52	; 0x34
    6428:	f04f 0000 	mov.w	r0, #0
    642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6430:	e7ff      	b.n	6432 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x20e>
    6432:	4603      	mov	r3, r0
    6434:	b2f0      	uxtb	r0, r6
    6436:	4921      	ldr	r1, [pc, #132]	; (64bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x298>)
    6438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    643c:	2808      	cmp	r0, #8
    643e:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    6442:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    6446:	fbb1 f2f2 	udiv	r2, r1, r2
    644a:	bf08      	it	eq
    644c:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    6450:	d00d      	beq.n	646e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x24a>
    6452:	2804      	cmp	r0, #4
    6454:	bf08      	it	eq
    6456:	f04f 0c10 	moveq.w	ip, #16
    645a:	d008      	beq.n	646e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x24a>
    645c:	2802      	cmp	r0, #2
    645e:	bf07      	ittee	eq
    6460:	f04f 0c04 	moveq.w	ip, #4
    6464:	2112      	moveq	r1, #18
    6466:	f04f 0c08 	movne.w	ip, #8
    646a:	2119      	movne	r1, #25
    646c:	e000      	b.n	6470 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x24c>
    646e:	2114      	movs	r1, #20
    6470:	fb1c f101 	smulbb	r1, ip, r1
    6474:	2808      	cmp	r0, #8
    6476:	bf08      	it	eq
    6478:	2540      	moveq	r5, #64	; 0x40
    647a:	d01b      	beq.n	64b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x290>
    647c:	2804      	cmp	r0, #4
    647e:	bf08      	it	eq
    6480:	252e      	moveq	r5, #46	; 0x2e
    6482:	d017      	beq.n	64b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x290>
    6484:	2802      	cmp	r0, #2
    6486:	bf0c      	ite	eq
    6488:	2018      	moveq	r0, #24
    648a:	2028      	movne	r0, #40	; 0x28
    648c:	4428      	add	r0, r5
    648e:	4408      	add	r0, r1
    6490:	fb10 2003 	smlabb	r0, r0, r3, r2
    6494:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    6498:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    649c:	1845      	adds	r5, r0, r1
    649e:	f7fe fb4b 	bl	4b38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    64a2:	0c39      	lsrs	r1, r7, #16
    64a4:	9100      	str	r1, [sp, #0]
    64a6:	f3c6 2207 	ubfx	r2, r6, #8, #8
    64aa:	2301      	movs	r3, #1
    64ac:	4629      	mov	r1, r5
    64ae:	f000 fd35 	bl	6f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x474>
    64b2:	e747      	b.n	6344 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x120>
    64b4:	f44f 70a8 	mov.w	r0, #336	; 0x150
    64b8:	e7e8      	b.n	648c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x268>
    64ba:	0000      	.short	0x0000
    64bc:	000075b0 	.word	0x000075b0

000064c0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    64c0:	4a10      	ldr	r2, [pc, #64]	; (6504 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x44>)
    64c2:	b510      	push	{r4, lr}
    64c4:	2100      	movs	r1, #0
    64c6:	7011      	strb	r1, [r2, #0]
    64c8:	4c0f      	ldr	r4, [pc, #60]	; (6508 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x48>)
    64ca:	60a0      	str	r0, [r4, #8]
    64cc:	7810      	ldrb	r0, [r2, #0]
    64ce:	b120      	cbz	r0, 64da <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    64d0:	f240 310a 	movw	r1, #778	; 0x30a
    64d4:	202d      	movs	r0, #45	; 0x2d
    64d6:	f7fd fdfb 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64da:	6011      	str	r1, [r2, #0]
    64dc:	6051      	str	r1, [r2, #4]
    64de:	6091      	str	r1, [r2, #8]
    64e0:	60d1      	str	r1, [r2, #12]
    64e2:	6111      	str	r1, [r2, #16]
    64e4:	6151      	str	r1, [r2, #20]
    64e6:	6191      	str	r1, [r2, #24]
    64e8:	61d1      	str	r1, [r2, #28]
    64ea:	f004 fc0d 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    64ee:	f004 fafd 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    64f2:	68e0      	ldr	r0, [r4, #12]
    64f4:	2800      	cmp	r0, #0
    64f6:	bf18      	it	ne
    64f8:	bd10      	popne	{r4, pc}
    64fa:	f240 310d 	movw	r1, #781	; 0x30d
    64fe:	202d      	movs	r0, #45	; 0x2d
    6500:	f7fd fde6 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6504:	20001658 	.word	0x20001658
    6508:	20000124 	.word	0x20000124

0000650c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    650c:	4902      	ldr	r1, [pc, #8]	; (6518 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    650e:	4801      	ldr	r0, [pc, #4]	; (6514 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6510:	60c8      	str	r0, [r1, #12]
    6512:	4770      	bx	lr
    6514:	000075e4 	.word	0x000075e4
    6518:	20000124 	.word	0x20000124

0000651c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    651c:	4902      	ldr	r1, [pc, #8]	; (6528 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    651e:	6048      	str	r0, [r1, #4]
    6520:	68c9      	ldr	r1, [r1, #12]
    6522:	6809      	ldr	r1, [r1, #0]
    6524:	4708      	bx	r1
    6526:	0000      	.short	0x0000
    6528:	20000124 	.word	0x20000124

0000652c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    652c:	490b      	ldr	r1, [pc, #44]	; (655c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x30>)
    652e:	b510      	push	{r4, lr}
    6530:	7808      	ldrb	r0, [r1, #0]
    6532:	2800      	cmp	r0, #0
    6534:	bf18      	it	ne
    6536:	240c      	movne	r4, #12
    6538:	d001      	beq.n	653e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    653a:	4620      	mov	r0, r4
    653c:	bd10      	pop	{r4, pc}
    653e:	2400      	movs	r4, #0
    6540:	600c      	str	r4, [r1, #0]
    6542:	604c      	str	r4, [r1, #4]
    6544:	608c      	str	r4, [r1, #8]
    6546:	60cc      	str	r4, [r1, #12]
    6548:	610c      	str	r4, [r1, #16]
    654a:	614c      	str	r4, [r1, #20]
    654c:	618c      	str	r4, [r1, #24]
    654e:	61cc      	str	r4, [r1, #28]
    6550:	f004 fbda 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6554:	f004 faca 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6558:	e7ef      	b.n	653a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    655a:	0000      	.short	0x0000
    655c:	20001658 	.word	0x20001658

00006560 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6560:	4905      	ldr	r1, [pc, #20]	; (6578 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    6562:	b510      	push	{r4, lr}
    6564:	7809      	ldrb	r1, [r1, #0]
    6566:	2901      	cmp	r1, #1
    6568:	bf1c      	itt	ne
    656a:	2000      	movne	r0, #0
    656c:	bd10      	popne	{r4, pc}
    656e:	f000 febd 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    6572:	2000      	movs	r0, #0
    6574:	bd10      	pop	{r4, pc}
    6576:	0000      	.short	0x0000
    6578:	20001658 	.word	0x20001658
    657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6580:	4e70      	ldr	r6, [pc, #448]	; (6744 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1e4>)
    6582:	000f      	movs	r7, r1
    6584:	4604      	mov	r4, r0
    6586:	d027      	beq.n	65d8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x78>
    6588:	f104 0028 	add.w	r0, r4, #40	; 0x28
    658c:	f008 fd3c 	bl	f008 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6590:	b9c0      	cbnz	r0, 65c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x64>
    6592:	78a0      	ldrb	r0, [r4, #2]
    6594:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6598:	2800      	cmp	r0, #0
    659a:	d038      	beq.n	660e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xae>
    659c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    65a0:	f008 fcdd 	bl	ef5e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    65a4:	4605      	mov	r5, r0
    65a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    65aa:	f008 fd2d 	bl	f008 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    65ae:	1a28      	subs	r0, r5, r0
    65b0:	b2c0      	uxtb	r0, r0
    65b2:	f008 fd59 	bl	f068 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    65b6:	6871      	ldr	r1, [r6, #4]
    65b8:	4408      	add	r0, r1
    65ba:	6070      	str	r0, [r6, #4]
    65bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    65c0:	f008 fd4d 	bl	f05e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    65c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    65c8:	f008 fcd9 	bl	ef7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    65cc:	f005 fa62 	bl	ba94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    65d0:	7921      	ldrb	r1, [r4, #4]
    65d2:	2025      	movs	r0, #37	; 0x25
    65d4:	f005 fa2a 	bl	ba2c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    65d8:	4d5b      	ldr	r5, [pc, #364]	; (6748 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1e8>)
    65da:	f894 806e 	ldrb.w	r8, [r4, #110]	; 0x6e
    65de:	2100      	movs	r1, #0
    65e0:	68a8      	ldr	r0, [r5, #8]
    65e2:	8001      	strh	r1, [r0, #0]
    65e4:	7801      	ldrb	r1, [r0, #0]
    65e6:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    65ea:	7001      	strb	r1, [r0, #0]
    65ec:	8861      	ldrh	r1, [r4, #2]
    65ee:	2913      	cmp	r1, #19
    65f0:	d02d      	beq.n	664e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xee>
    65f2:	dc11      	bgt.n	6618 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xb8>
    65f4:	2910      	cmp	r1, #16
    65f6:	bf08      	it	eq
    65f8:	2102      	moveq	r1, #2
    65fa:	d03d      	beq.n	6678 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x118>
    65fc:	2912      	cmp	r1, #18
    65fe:	bf08      	it	eq
    6600:	2106      	moveq	r1, #6
    6602:	d039      	beq.n	6678 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x118>
    6604:	f240 614a 	movw	r1, #1610	; 0x64a
    6608:	202d      	movs	r0, #45	; 0x2d
    660a:	f7fd fd61 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    660e:	4620      	mov	r0, r4
    6610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6614:	f000 be6a 	b.w	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    6618:	2915      	cmp	r1, #21
    661a:	bf18      	it	ne
    661c:	291d      	cmpne	r1, #29
    661e:	d1f1      	bne.n	6604 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xa4>
    6620:	f04f 0101 	mov.w	r1, #1
    6624:	f008 fa2e 	bl	ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6628:	68a8      	ldr	r0, [r5, #8]
    662a:	f1b8 0f00 	cmp.w	r8, #0
    662e:	7801      	ldrb	r1, [r0, #0]
    6630:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    6634:	f041 0120 	orr.w	r1, r1, #32
    6638:	7001      	strb	r1, [r0, #0]
    663a:	d013      	beq.n	6664 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x104>
    663c:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    6640:	f008 fa42 	bl	eac8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6644:	2101      	movs	r1, #1
    6646:	68a8      	ldr	r0, [r5, #8]
    6648:	f008 fa45 	bl	ead6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    664c:	e016      	b.n	667c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x11c>
    664e:	2100      	movs	r1, #0
    6650:	f008 fa18 	bl	ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6654:	68a8      	ldr	r0, [r5, #8]
    6656:	7801      	ldrb	r1, [r0, #0]
    6658:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    665c:	f041 0120 	orr.w	r1, r1, #32
    6660:	7001      	strb	r1, [r0, #0]
    6662:	e00b      	b.n	667c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x11c>
    6664:	f104 0168 	add.w	r1, r4, #104	; 0x68
    6668:	f008 fa2e 	bl	eac8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    666c:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    6670:	68a8      	ldr	r0, [r5, #8]
    6672:	f008 fa30 	bl	ead6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6676:	e001      	b.n	667c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x11c>
    6678:	f008 fa04 	bl	ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    667c:	46a0      	mov	r8, r4
    667e:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6682:	68a8      	ldr	r0, [r5, #8]
    6684:	f008 fa30 	bl	eae8 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6688:	f898 1060 	ldrb.w	r1, [r8, #96]	; 0x60
    668c:	68a8      	ldr	r0, [r5, #8]
    668e:	f008 fa32 	bl	eaf6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6692:	8860      	ldrh	r0, [r4, #2]
    6694:	281d      	cmp	r0, #29
    6696:	bf18      	it	ne
    6698:	2815      	cmpne	r0, #21
    669a:	d005      	beq.n	66a8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x148>
    669c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
    66a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    66a2:	68a8      	ldr	r0, [r5, #8]
    66a4:	f008 f9de 	bl	ea64 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    66a8:	68a8      	ldr	r0, [r5, #8]
    66aa:	f004 ff9d 	bl	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    66ae:	2004      	movs	r0, #4
    66b0:	7030      	strb	r0, [r6, #0]
    66b2:	b327      	cbz	r7, 66fe <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x19e>
    66b4:	8860      	ldrh	r0, [r4, #2]
    66b6:	2810      	cmp	r0, #16
    66b8:	d031      	beq.n	671e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1be>
    66ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    66be:	68b5      	ldr	r5, [r6, #8]
    66c0:	f008 fc4d 	bl	ef5e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    66c4:	4607      	mov	r7, r0
    66c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    66ca:	f008 fc9d 	bl	f008 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    66ce:	1a38      	subs	r0, r7, r0
    66d0:	1e40      	subs	r0, r0, #1
    66d2:	b2c0      	uxtb	r0, r0
    66d4:	8861      	ldrh	r1, [r4, #2]
    66d6:	2228      	movs	r2, #40	; 0x28
    66d8:	f000 ffb6 	bl	7648 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    66dc:	4405      	add	r5, r0
    66de:	78a0      	ldrb	r0, [r4, #2]
    66e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    66e4:	b130      	cbz	r0, 66f4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x194>
    66e6:	6870      	ldr	r0, [r6, #4]
    66e8:	4405      	add	r5, r0
    66ea:	f008 fcc1 	bl	f070 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    66ee:	4428      	add	r0, r5
    66f0:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    66f4:	7922      	ldrb	r2, [r4, #4]
    66f6:	4629      	mov	r1, r5
    66f8:	2000      	movs	r0, #0
    66fa:	f004 ffc3 	bl	b684 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    66fe:	8860      	ldrh	r0, [r4, #2]
    6700:	2813      	cmp	r0, #19
    6702:	d015      	beq.n	6730 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1d0>
    6704:	dc10      	bgt.n	6728 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c8>
    6706:	2810      	cmp	r0, #16
    6708:	bf08      	it	eq
    670a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    670e:	2812      	cmp	r0, #18
    6710:	d00e      	beq.n	6730 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1d0>
    6712:	bf00      	nop
    6714:	f640 5148 	movw	r1, #3400	; 0xd48
    6718:	202d      	movs	r0, #45	; 0x2d
    671a:	f7fd fcd9 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    671e:	7921      	ldrb	r1, [r4, #4]
    6720:	2000      	movs	r0, #0
    6722:	f004 fbc1 	bl	aea8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6726:	e7ea      	b.n	66fe <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x19e>
    6728:	2815      	cmp	r0, #21
    672a:	bf18      	it	ne
    672c:	281d      	cmpne	r0, #29
    672e:	d1f1      	bne.n	6714 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    6730:	7922      	ldrb	r2, [r4, #4]
    6732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6736:	f04f 0101 	mov.w	r1, #1
    673a:	f04f 0000 	mov.w	r0, #0
    673e:	f005 b8e9 	b.w	b914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6742:	0000      	.short	0x0000
    6744:	20001658 	.word	0x20001658
    6748:	20000124 	.word	0x20000124
    674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6750:	4e4a      	ldr	r6, [pc, #296]	; (687c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x31c>)
    6752:	4681      	mov	r9, r0
    6754:	7830      	ldrb	r0, [r6, #0]
    6756:	2802      	cmp	r0, #2
    6758:	bf1c      	itt	ne
    675a:	7830      	ldrbne	r0, [r6, #0]
    675c:	2803      	cmpne	r0, #3
    675e:	d005      	beq.n	676c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x20c>
    6760:	f640 41b9 	movw	r1, #3257	; 0xcb9
    6764:	f04f 002d 	mov.w	r0, #45	; 0x2d
    6768:	f7fd fcb2 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    676c:	4c44      	ldr	r4, [pc, #272]	; (6880 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x320>)
    676e:	6865      	ldr	r5, [r4, #4]
    6770:	7b28      	ldrb	r0, [r5, #12]
    6772:	b140      	cbz	r0, 6786 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x226>
    6774:	f105 003f 	add.w	r0, r5, #63	; 0x3f
    6778:	f005 f93a 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    677c:	2800      	cmp	r0, #0
    677e:	bf04      	itt	eq
    6780:	207f      	moveq	r0, #127	; 0x7f
    6782:	f885 003f 	strbeq.w	r0, [r5, #63]	; 0x3f
    6786:	f8d4 c008 	ldr.w	ip, [r4, #8]
    678a:	6861      	ldr	r1, [r4, #4]
    678c:	f04f 0800 	mov.w	r8, #0
    6790:	f89c 0000 	ldrb.w	r0, [ip]
    6794:	6a0a      	ldr	r2, [r1, #32]
    6796:	f000 070f 	and.w	r7, r0, #15
    679a:	2a00      	cmp	r2, #0
    679c:	bf18      	it	ne
    679e:	f892 8077 	ldrbne.w	r8, [r2, #119]	; 0x77
    67a2:	f1b9 0f00 	cmp.w	r9, #0
    67a6:	d04d      	beq.n	6844 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e4>
    67a8:	f101 0361 	add.w	r3, r1, #97	; 0x61
    67ac:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    67b0:	09c0      	lsrs	r0, r0, #7
    67b2:	f10c 0109 	add.w	r1, ip, #9
    67b6:	f007 fe01 	bl	e3bc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    67ba:	2800      	cmp	r0, #0
    67bc:	d042      	beq.n	6844 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e4>
    67be:	6865      	ldr	r5, [r4, #4]
    67c0:	2f05      	cmp	r7, #5
    67c2:	d121      	bne.n	6808 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2a8>
    67c4:	68a0      	ldr	r0, [r4, #8]
    67c6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    67ca:	f000 001f 	and.w	r0, r0, #31
    67ce:	2810      	cmp	r0, #16
    67d0:	d91a      	bls.n	6808 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2a8>
    67d2:	7be8      	ldrb	r0, [r5, #15]
    67d4:	b1c0      	cbz	r0, 6808 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2a8>
    67d6:	20ff      	movs	r0, #255	; 0xff
    67d8:	f88d 0000 	strb.w	r0, [sp]
    67dc:	466a      	mov	r2, sp
    67de:	2105      	movs	r1, #5
    67e0:	4628      	mov	r0, r5
    67e2:	f000 fb13 	bl	6e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x364>
    67e6:	b368      	cbz	r0, 6844 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e4>
    67e8:	68a0      	ldr	r0, [r4, #8]
    67ea:	2222      	movs	r2, #34	; 0x22
    67ec:	1cc1      	adds	r1, r0, #3
    67ee:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    67f2:	f006 fc4b 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    67f6:	221e      	movs	r2, #30
    67f8:	4629      	mov	r1, r5
    67fa:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    67fe:	f7ff f81b 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6802:	f7ff fb51 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6806:	e01d      	b.n	6844 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e4>
    6808:	4641      	mov	r1, r8
    680a:	68a0      	ldr	r0, [r4, #8]
    680c:	f008 f87c 	bl	e908 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6810:	b1c0      	cbz	r0, 6844 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e4>
    6812:	7832      	ldrb	r2, [r6, #0]
    6814:	6860      	ldr	r0, [r4, #4]
    6816:	4639      	mov	r1, r7
    6818:	2a02      	cmp	r2, #2
    681a:	bf1c      	itt	ne
    681c:	7832      	ldrbne	r2, [r6, #0]
    681e:	2a03      	cmpne	r2, #3
    6820:	d005      	beq.n	682e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ce>
    6822:	f640 4192 	movw	r1, #3218	; 0xc92
    6826:	f04f 002d 	mov.w	r0, #45	; 0x2d
    682a:	f7fd fc51 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    682e:	68e2      	ldr	r2, [r4, #12]
    6830:	7833      	ldrb	r3, [r6, #0]
    6832:	6952      	ldr	r2, [r2, #20]
    6834:	f06f 0c07 	mvn.w	ip, #7
    6838:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    683c:	58d2      	ldr	r2, [r2, r3]
    683e:	4790      	blx	r2
    6840:	4605      	mov	r5, r0
    6842:	e000      	b.n	6846 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e6>
    6844:	2501      	movs	r5, #1
    6846:	7bb0      	ldrb	r0, [r6, #14]
    6848:	b118      	cbz	r0, 6852 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f2>
    684a:	f004 fa5d 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    684e:	f004 f94d 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6852:	2d00      	cmp	r5, #0
    6854:	bf08      	it	eq
    6856:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    685a:	6860      	ldr	r0, [r4, #4]
    685c:	f008 fc1a 	bl	f094 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6860:	b138      	cbz	r0, 6872 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x312>
    6862:	f004 fa79 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6866:	68e0      	ldr	r0, [r4, #12]
    6868:	6880      	ldr	r0, [r0, #8]
    686a:	b001      	add	sp, #4
    686c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6870:	4700      	bx	r0
    6872:	6860      	ldr	r0, [r4, #4]
    6874:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6878:	f000 bd38 	b.w	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    687c:	20001658 	.word	0x20001658
    6880:	20000124 	.word	0x20000124
    6884:	b530      	push	{r4, r5, lr}
    6886:	b083      	sub	sp, #12
    6888:	2903      	cmp	r1, #3
    688a:	d002      	beq.n	6892 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x332>
    688c:	2905      	cmp	r1, #5
    688e:	d074      	beq.n	697a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x41a>
    6890:	e06f      	b.n	6972 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x412>
    6892:	4604      	mov	r4, r0
    6894:	20ff      	movs	r0, #255	; 0xff
    6896:	f88d 0008 	strb.w	r0, [sp, #8]
    689a:	aa02      	add	r2, sp, #8
    689c:	2103      	movs	r1, #3
    689e:	4620      	mov	r0, r4
    68a0:	f000 fab4 	bl	6e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x364>
    68a4:	2800      	cmp	r0, #0
    68a6:	d064      	beq.n	6972 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x412>
    68a8:	7b20      	ldrb	r0, [r4, #12]
    68aa:	4d38      	ldr	r5, [pc, #224]	; (698c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x42c>)
    68ac:	2800      	cmp	r0, #0
    68ae:	d03e      	beq.n	692e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3ce>
    68b0:	f894 00ce 	ldrb.w	r0, [r4, #206]	; 0xce
    68b4:	f88d 0000 	strb.w	r0, [sp]
    68b8:	f89d 0000 	ldrb.w	r0, [sp]
    68bc:	bbb8      	cbnz	r0, 692e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3ce>
    68be:	f89d 0008 	ldrb.w	r0, [sp, #8]
    68c2:	7821      	ldrb	r1, [r4, #0]
    68c4:	f884 10cf 	strb.w	r1, [r4, #207]	; 0xcf
    68c8:	28ff      	cmp	r0, #255	; 0xff
    68ca:	d011      	beq.n	68f0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x390>
    68cc:	f104 02d1 	add.w	r2, r4, #209	; 0xd1
    68d0:	1e51      	subs	r1, r2, #1
    68d2:	f7fe fbe5 	bl	50a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    68d6:	b130      	cbz	r0, 68e6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x386>
    68d8:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
    68dc:	f040 0102 	orr.w	r1, r0, #2
    68e0:	f884 10d0 	strb.w	r1, [r4, #208]	; 0xd0
    68e4:	e012      	b.n	690c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x3ac>
    68e6:	f640 7193 	movw	r1, #3987	; 0xf93
    68ea:	202d      	movs	r0, #45	; 0x2d
    68ec:	f7fd fbf0 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68f0:	68a8      	ldr	r0, [r5, #8]
    68f2:	7801      	ldrb	r1, [r0, #0]
    68f4:	f3c1 1280 	ubfx	r2, r1, #6, #1
    68f8:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
    68fc:	f8d0 2003 	ldr.w	r2, [r0, #3]
    6900:	f8c4 20d1 	str.w	r2, [r4, #209]	; 0xd1
    6904:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6908:	f8a4 00d5 	strh.w	r0, [r4, #213]	; 0xd5
    690c:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
    6910:	287f      	cmp	r0, #127	; 0x7f
    6912:	d029      	beq.n	6968 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x408>
    6914:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    6918:	217f      	movs	r1, #127	; 0x7f
    691a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
    691e:	2219      	movs	r2, #25
    6920:	4621      	mov	r1, r4
    6922:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    6926:	f7fe ff87 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    692a:	f7ff fabd 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    692e:	68a8      	ldr	r0, [r5, #8]
    6930:	2100      	movs	r1, #0
    6932:	8001      	strh	r1, [r0, #0]
    6934:	2104      	movs	r1, #4
    6936:	f008 f8a5 	bl	ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    693a:	f104 0161 	add.w	r1, r4, #97	; 0x61
    693e:	68a8      	ldr	r0, [r5, #8]
    6940:	f008 f8d2 	bl	eae8 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6944:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    6948:	68a8      	ldr	r0, [r5, #8]
    694a:	f008 f8d4 	bl	eaf6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    694e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    6952:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6954:	68a8      	ldr	r0, [r5, #8]
    6956:	f008 f8d7 	bl	eb08 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    695a:	490d      	ldr	r1, [pc, #52]	; (6990 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x430>)
    695c:	2005      	movs	r0, #5
    695e:	7008      	strb	r0, [r1, #0]
    6960:	68a8      	ldr	r0, [r5, #8]
    6962:	f004 fe41 	bl	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6966:	e00e      	b.n	6986 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x426>
    6968:	f640 51fb 	movw	r1, #3579	; 0xdfb
    696c:	202d      	movs	r0, #45	; 0x2d
    696e:	f7fd fbaf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6972:	b003      	add	sp, #12
    6974:	2001      	movs	r0, #1
    6976:	bd30      	pop	{r4, r5, pc}
    6978:	e7ff      	b.n	697a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x41a>
    697a:	4906      	ldr	r1, [pc, #24]	; (6994 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x434>)
    697c:	6809      	ldr	r1, [r1, #0]
    697e:	b111      	cbz	r1, 6986 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x426>
    6980:	4788      	blx	r1
    6982:	2800      	cmp	r0, #0
    6984:	d0f5      	beq.n	6972 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x412>
    6986:	b003      	add	sp, #12
    6988:	2000      	movs	r0, #0
    698a:	bd30      	pop	{r4, r5, pc}
    698c:	20000124 	.word	0x20000124
    6990:	20001658 	.word	0x20001658
    6994:	20000134 	.word	0x20000134
    6998:	4a09      	ldr	r2, [pc, #36]	; (69c0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x460>)
    699a:	0003      	movs	r3, r0
    699c:	6850      	ldr	r0, [r2, #4]
    699e:	d001      	beq.n	69a4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x444>
    69a0:	f000 bca4 	b.w	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    69a4:	2900      	cmp	r1, #0
    69a6:	bf08      	it	eq
    69a8:	4770      	bxeq	lr
    69aa:	68d1      	ldr	r1, [r2, #12]
    69ac:	4a05      	ldr	r2, [pc, #20]	; (69c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x464>)
    69ae:	6909      	ldr	r1, [r1, #16]
    69b0:	7812      	ldrb	r2, [r2, #0]
    69b2:	f06f 030f 	mvn.w	r3, #15
    69b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    69ba:	5889      	ldr	r1, [r1, r2]
    69bc:	4708      	bx	r1
    69be:	0000      	.short	0x0000
    69c0:	20000124 	.word	0x20000124
    69c4:	20001658 	.word	0x20001658
    69c8:	b570      	push	{r4, r5, r6, lr}
    69ca:	4604      	mov	r4, r0
    69cc:	8840      	ldrh	r0, [r0, #2]
    69ce:	2810      	cmp	r0, #16
    69d0:	d010      	beq.n	69f4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x494>
    69d2:	4d11      	ldr	r5, [pc, #68]	; (6a18 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4b8>)
    69d4:	7ba8      	ldrb	r0, [r5, #14]
    69d6:	b120      	cbz	r0, 69e2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x482>
    69d8:	f004 f8c8 	bl	ab6c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    69dc:	2040      	movs	r0, #64	; 0x40
    69de:	f004 f9a1 	bl	ad24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    69e2:	480e      	ldr	r0, [pc, #56]	; (6a1c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4bc>)
    69e4:	6880      	ldr	r0, [r0, #8]
    69e6:	f004 fdff 	bl	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69ea:	78a0      	ldrb	r0, [r4, #2]
    69ec:	f010 0f04 	tst.w	r0, #4
    69f0:	d10b      	bne.n	6a0a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4aa>
    69f2:	e005      	b.n	6a00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4a0>
    69f4:	4620      	mov	r0, r4
    69f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    69fa:	2101      	movs	r1, #1
    69fc:	f7ff bdbe 	b.w	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    6a00:	2100      	movs	r1, #0
    6a02:	7922      	ldrb	r2, [r4, #4]
    6a04:	4608      	mov	r0, r1
    6a06:	f004 ff85 	bl	b914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a0a:	2000      	movs	r0, #0
    6a0c:	f004 fc7a 	bl	b304 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6a10:	2002      	movs	r0, #2
    6a12:	7028      	strb	r0, [r5, #0]
    6a14:	bd70      	pop	{r4, r5, r6, pc}
    6a16:	0000      	.short	0x0000
    6a18:	20001658 	.word	0x20001658
    6a1c:	20000124 	.word	0x20000124
    6a20:	b570      	push	{r4, r5, r6, lr}
    6a22:	4c1f      	ldr	r4, [pc, #124]	; (6aa0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x540>)
    6a24:	6865      	ldr	r5, [r4, #4]
    6a26:	7b28      	ldrb	r0, [r5, #12]
    6a28:	b140      	cbz	r0, 6a3c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4dc>
    6a2a:	f105 003f 	add.w	r0, r5, #63	; 0x3f
    6a2e:	f004 ffdf 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6a32:	2800      	cmp	r0, #0
    6a34:	bf04      	itt	eq
    6a36:	207f      	moveq	r0, #127	; 0x7f
    6a38:	f885 003f 	strbeq.w	r0, [r5, #63]	; 0x3f
    6a3c:	4d19      	ldr	r5, [pc, #100]	; (6aa4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x544>)
    6a3e:	7ba8      	ldrb	r0, [r5, #14]
    6a40:	b118      	cbz	r0, 6a4a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x4ea>
    6a42:	f004 f961 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a46:	f004 f851 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a4a:	6860      	ldr	r0, [r4, #4]
    6a4c:	f008 fb22 	bl	f094 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6a50:	b1a8      	cbz	r0, 6a7e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x51e>
    6a52:	6860      	ldr	r0, [r4, #4]
    6a54:	8841      	ldrh	r1, [r0, #2]
    6a56:	f3c1 1200 	ubfx	r2, r1, #4, #1
    6a5a:	2a00      	cmp	r2, #0
    6a5c:	bf04      	itt	eq
    6a5e:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    6a62:	2900      	cmpeq	r1, #0
    6a64:	d00b      	beq.n	6a7e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x51e>
    6a66:	7829      	ldrb	r1, [r5, #0]
    6a68:	2902      	cmp	r1, #2
    6a6a:	bf1c      	itt	ne
    6a6c:	7829      	ldrbne	r1, [r5, #0]
    6a6e:	2903      	cmpne	r1, #3
    6a70:	d00a      	beq.n	6a88 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x528>
    6a72:	f640 31c6 	movw	r1, #3014	; 0xbc6
    6a76:	f04f 002d 	mov.w	r0, #45	; 0x2d
    6a7a:	f7fd fb29 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a7e:	6860      	ldr	r0, [r4, #4]
    6a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a84:	f000 bc32 	b.w	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    6a88:	68e1      	ldr	r1, [r4, #12]
    6a8a:	782a      	ldrb	r2, [r5, #0]
    6a8c:	68c9      	ldr	r1, [r1, #12]
    6a8e:	f06f 0307 	mvn.w	r3, #7
    6a92:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6a96:	5889      	ldr	r1, [r1, r2]
    6a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a9c:	4708      	bx	r1
    6a9e:	0000      	.short	0x0000
    6aa0:	20000124 	.word	0x20000124
    6aa4:	20001658 	.word	0x20001658

00006aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6aac:	4da3      	ldr	r5, [pc, #652]	; (6d3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    6aae:	4604      	mov	r4, r0
    6ab0:	b08a      	sub	sp, #40	; 0x28
    6ab2:	7828      	ldrb	r0, [r5, #0]
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d17c      	bne.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    6ab8:	7820      	ldrb	r0, [r4, #0]
    6aba:	28ff      	cmp	r0, #255	; 0xff
    6abc:	d079      	beq.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    6abe:	2600      	movs	r6, #0
    6ac0:	81ae      	strh	r6, [r5, #12]
    6ac2:	606e      	str	r6, [r5, #4]
    6ac4:	706e      	strb	r6, [r5, #1]
    6ac6:	70ae      	strb	r6, [r5, #2]
    6ac8:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
    6acc:	489c      	ldr	r0, [pc, #624]	; (6d40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    6ace:	af02      	add	r7, sp, #8
    6ad0:	f8df 8270 	ldr.w	r8, [pc, #624]	; 6d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    6ad4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    6ad6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    6ada:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6ade:	6840      	ldr	r0, [r0, #4]
    6ae0:	9005      	str	r0, [sp, #20]
    6ae2:	a802      	add	r0, sp, #8
    6ae4:	f004 fbf8 	bl	b2d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6ae8:	f004 fcd6 	bl	b498 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6aec:	f005 fae6 	bl	c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    6af0:	f004 f90a 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6af4:	f003 fffa 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6af8:	4893      	ldr	r0, [pc, #588]	; (6d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>)
    6afa:	f004 ff83 	bl	ba04 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6afe:	4893      	ldr	r0, [pc, #588]	; (6d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>)
    6b00:	f004 ff8a 	bl	ba18 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6b04:	2000      	movs	r0, #0
    6b06:	f7fd f89f 	bl	3c48 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    6b0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6b0e:	f008 faa6 	bl	f05e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6b12:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6b16:	f008 fa32 	bl	ef7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6b1a:	f004 ffbb 	bl	ba94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6b1e:	7921      	ldrb	r1, [r4, #4]
    6b20:	2025      	movs	r0, #37	; 0x25
    6b22:	f004 ff83 	bl	ba2c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6b26:	f994 0010 	ldrsb.w	r0, [r4, #16]
    6b2a:	f004 fd51 	bl	b5d0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6b2e:	7921      	ldrb	r1, [r4, #4]
    6b30:	2000      	movs	r0, #0
    6b32:	f004 fa83 	bl	b03c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6b36:	2701      	movs	r7, #1
    6b38:	60a8      	str	r0, [r5, #8]
    6b3a:	2800      	cmp	r0, #0
    6b3c:	bf01      	itttt	eq
    6b3e:	702f      	strbeq	r7, [r5, #0]
    6b40:	2000      	moveq	r0, #0
    6b42:	b00a      	addeq	sp, #40	; 0x28
    6b44:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b48:	7f20      	ldrb	r0, [r4, #28]
    6b4a:	2800      	cmp	r0, #0
    6b4c:	bf01      	itttt	eq
    6b4e:	7ea0      	ldrbeq	r0, [r4, #26]
    6b50:	2800      	cmpeq	r0, #0
    6b52:	78a0      	ldrbeq	r0, [r4, #2]
    6b54:	f010 0f04 	tsteq.w	r0, #4
    6b58:	d066      	beq.n	6c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>
    6b5a:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6b5e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6b62:	ea81 0102 	eor.w	r1, r1, r2
    6b66:	ea71 0000 	orns	r0, r1, r0
    6b6a:	d079      	beq.n	6c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    6b6c:	f7fb fe02 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6b70:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    6b74:	1a80      	subs	r0, r0, r2
    6b76:	eb71 0003 	sbcs.w	r0, r1, r3
    6b7a:	d371      	bcc.n	6c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    6b7c:	f7fe faea 	bl	5154 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6b80:	4973      	ldr	r1, [pc, #460]	; (6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a8>)
    6b82:	fba0 a901 	umull	sl, r9, r0, r1
    6b86:	f7fb fdf5 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6b8a:	eb10 000a 	adds.w	r0, r0, sl
    6b8e:	eb41 0109 	adc.w	r1, r1, r9
    6b92:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6b96:	f04f 0a01 	mov.w	sl, #1
    6b9a:	7ee0      	ldrb	r0, [r4, #27]
    6b9c:	f7fe f9e0 	bl	4f60 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6ba0:	4681      	mov	r9, r0
    6ba2:	7ea0      	ldrb	r0, [r4, #26]
    6ba4:	2800      	cmp	r0, #0
    6ba6:	bf18      	it	ne
    6ba8:	f1b9 0f00 	cmpne.w	r9, #0
    6bac:	d005      	beq.n	6bba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x112>
    6bae:	7ee0      	ldrb	r0, [r4, #27]
    6bb0:	e000      	b.n	6bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    6bb2:	e00e      	b.n	6bd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12a>
    6bb4:	f7fe f9c8 	bl	4f48 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6bb8:	b178      	cbz	r0, 6bda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x132>
    6bba:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    6bbe:	2800      	cmp	r0, #0
    6bc0:	bf1c      	itt	ne
    6bc2:	7f20      	ldrbne	r0, [r4, #28]
    6bc4:	2800      	cmpne	r0, #0
    6bc6:	d021      	beq.n	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    6bc8:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6bcc:	2801      	cmp	r0, #1
    6bce:	d012      	beq.n	6bf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14e>
    6bd0:	e017      	b.n	6c02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    6bd2:	b00a      	add	sp, #40	; 0x28
    6bd4:	200c      	movs	r0, #12
    6bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bda:	463a      	mov	r2, r7
    6bdc:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
    6be0:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6be4:	4648      	mov	r0, r9
    6be6:	f007 fc21 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6bea:	7ee1      	ldrb	r1, [r4, #27]
    6bec:	f104 0061 	add.w	r0, r4, #97	; 0x61
    6bf0:	f7fe f9c2 	bl	4f78 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    6bf4:	e00a      	b.n	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    6bf6:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    6bfa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    6bfe:	2840      	cmp	r0, #64	; 0x40
    6c00:	d013      	beq.n	6c2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x182>
    6c02:	4651      	mov	r1, sl
    6c04:	f104 0061 	add.w	r0, r4, #97	; 0x61
    6c08:	f007 fbff 	bl	e40a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    6c0c:	78a0      	ldrb	r0, [r4, #2]
    6c0e:	f010 0f04 	tst.w	r0, #4
    6c12:	d025      	beq.n	6c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    6c14:	7ee0      	ldrb	r0, [r4, #27]
    6c16:	f7fe f9e9 	bl	4fec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6c1a:	ea5f 0900 	movs.w	r9, r0
    6c1e:	d01f      	beq.n	6c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    6c20:	2110      	movs	r1, #16
    6c22:	f7fe fd3d 	bl	56a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6c26:	b140      	cbz	r0, 6c3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x192>
    6c28:	e01a      	b.n	6c60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>
    6c2a:	f7fe f95d 	bl	4ee8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    6c2e:	463a      	mov	r2, r7
    6c30:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6c34:	f007 fbfa 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6c38:	e7e8      	b.n	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    6c3a:	463a      	mov	r2, r7
    6c3c:	f884 706e 	strb.w	r7, [r4, #110]	; 0x6e
    6c40:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    6c44:	4648      	mov	r0, r9
    6c46:	f007 fbf1 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6c4a:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    6c4e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6c52:	f007 ff39 	bl	eac8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6c56:	2101      	movs	r1, #1
    6c58:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6c5c:	f007 ff3b 	bl	ead6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6c60:	f104 0148 	add.w	r1, r4, #72	; 0x48
    6c64:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6c66:	f007 fb1e 	bl	e2a6 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    6c6a:	4607      	mov	r7, r0
    6c6c:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6c70:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6c72:	f007 fb1b 	bl	e2ac <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    6c76:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    6c7a:	4338      	orrs	r0, r7
    6c7c:	f88d 1004 	strb.w	r1, [sp, #4]
    6c80:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6c84:	2900      	cmp	r1, #0
    6c86:	bf18      	it	ne
    6c88:	2101      	movne	r1, #1
    6c8a:	4308      	orrs	r0, r1
    6c8c:	d018      	beq.n	6cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    6c8e:	78a0      	ldrb	r0, [r4, #2]
    6c90:	f3c0 1000 	ubfx	r0, r0, #4, #1
    6c94:	2800      	cmp	r0, #0
    6c96:	bf04      	itt	eq
    6c98:	f8b4 003d 	ldrheq.w	r0, [r4, #61]	; 0x3d
    6c9c:	f3c0 070b 	ubfxeq	r7, r0, #0, #12
    6ca0:	d10e      	bne.n	6cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    6ca2:	bf00      	nop
    6ca4:	f7ff f970 	bl	5f88 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    6ca8:	f3c0 000b 	ubfx	r0, r0, #0, #12
    6cac:	42b8      	cmp	r0, r7
    6cae:	d0f9      	beq.n	6ca4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1fc>
    6cb0:	f8b4 103d 	ldrh.w	r1, [r4, #61]	; 0x3d
    6cb4:	f360 010b 	bfi	r1, r0, #0, #12
    6cb8:	f8a4 103d 	strh.w	r1, [r4, #61]	; 0x3d
    6cbc:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
    6cc0:	f7fe fb42 	bl	5348 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6cc4:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6cc8:	1cc0      	adds	r0, r0, #3
    6cca:	f7fe f8f9 	bl	4ec0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6cce:	73a8      	strb	r0, [r5, #14]
    6cd0:	78a0      	ldrb	r0, [r4, #2]
    6cd2:	f010 0f01 	tst.w	r0, #1
    6cd6:	d02c      	beq.n	6d32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    6cd8:	a906      	add	r1, sp, #24
    6cda:	2001      	movs	r0, #1
    6cdc:	f007 f9a6 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6ce0:	b120      	cbz	r0, 6cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6ce2:	f640 118c 	movw	r1, #2444	; 0x98c
    6ce6:	202d      	movs	r0, #45	; 0x2d
    6ce8:	f7fd f9f2 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cec:	20ff      	movs	r0, #255	; 0xff
    6cee:	7628      	strb	r0, [r5, #24]
    6cf0:	a806      	add	r0, sp, #24
    6cf2:	6a26      	ldr	r6, [r4, #32]
    6cf4:	f7fd fc2a 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6cf8:	b9d8      	cbnz	r0, 6d32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    6cfa:	9c08      	ldr	r4, [sp, #32]
    6cfc:	42b4      	cmp	r4, r6
    6cfe:	d013      	beq.n	6d28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    6d00:	7a72      	ldrb	r2, [r6, #9]
    6d02:	7a60      	ldrb	r0, [r4, #9]
    6d04:	f106 030a 	add.w	r3, r6, #10
    6d08:	f104 010a 	add.w	r1, r4, #10
    6d0c:	f007 fb56 	bl	e3bc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6d10:	b150      	cbz	r0, 6d28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    6d12:	78a0      	ldrb	r0, [r4, #2]
    6d14:	7628      	strb	r0, [r5, #24]
    6d16:	f8d4 0003 	ldr.w	r0, [r4, #3]
    6d1a:	f8c5 0019 	str.w	r0, [r5, #25]
    6d1e:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    6d22:	f8a5 001d 	strh.w	r0, [r5, #29]
    6d26:	e004      	b.n	6d32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    6d28:	a806      	add	r0, sp, #24
    6d2a:	f7fd fc0f 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6d2e:	2800      	cmp	r0, #0
    6d30:	d0e3      	beq.n	6cfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    6d32:	b00a      	add	sp, #40	; 0x28
    6d34:	2000      	movs	r0, #0
    6d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d3a:	0000      	.short	0x0000
    6d3c:	20001658 	.word	0x20001658
    6d40:	000075c4 	.word	0x000075c4
    6d44:	20000124 	.word	0x20000124
    6d48:	8e89bed6 	.word	0x8e89bed6
    6d4c:	000075ad 	.word	0x000075ad
    6d50:	000f4240 	.word	0x000f4240
    6d54:	b510      	push	{r4, lr}
    6d56:	4604      	mov	r4, r0
    6d58:	f7ff fea6 	bl	6aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6d5c:	2800      	cmp	r0, #0
    6d5e:	bf18      	it	ne
    6d60:	bd10      	popne	{r4, pc}
    6d62:	4805      	ldr	r0, [pc, #20]	; (6d78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>)
    6d64:	7800      	ldrb	r0, [r0, #0]
    6d66:	2801      	cmp	r0, #1
    6d68:	d003      	beq.n	6d72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    6d6a:	2100      	movs	r1, #0
    6d6c:	4620      	mov	r0, r4
    6d6e:	f7ff fc05 	bl	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    6d72:	2000      	movs	r0, #0
    6d74:	bd10      	pop	{r4, pc}
    6d76:	0000      	.short	0x0000
    6d78:	20001658 	.word	0x20001658
    6d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d80:	4e20      	ldr	r6, [pc, #128]	; (6e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35c>)
    6d82:	4d21      	ldr	r5, [pc, #132]	; (6e08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x360>)
    6d84:	6874      	ldr	r4, [r6, #4]
    6d86:	7828      	ldrb	r0, [r5, #0]
    6d88:	2800      	cmp	r0, #0
    6d8a:	bf08      	it	eq
    6d8c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d90:	7828      	ldrb	r0, [r5, #0]
    6d92:	2802      	cmp	r0, #2
    6d94:	bf1c      	itt	ne
    6d96:	7828      	ldrbne	r0, [r5, #0]
    6d98:	2803      	cmpne	r0, #3
    6d9a:	d111      	bne.n	6dc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6d9c:	7b20      	ldrb	r0, [r4, #12]
    6d9e:	b148      	cbz	r0, 6db4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    6da0:	4627      	mov	r7, r4
    6da2:	f104 003f 	add.w	r0, r4, #63	; 0x3f
    6da6:	f004 fe23 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    6daa:	2800      	cmp	r0, #0
    6dac:	bf04      	itt	eq
    6dae:	207f      	moveq	r0, #127	; 0x7f
    6db0:	f887 003f 	strbeq.w	r0, [r7, #63]	; 0x3f
    6db4:	7ba8      	ldrb	r0, [r5, #14]
    6db6:	b118      	cbz	r0, 6dc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6db8:	f003 ffa6 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6dbc:	f003 fe96 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6dc0:	f7fc ff26 	bl	3c10 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    6dc4:	7830      	ldrb	r0, [r6, #0]
    6dc6:	b1c0      	cbz	r0, 6dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x352>
    6dc8:	4620      	mov	r0, r4
    6dca:	f008 f963 	bl	f094 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6dce:	b1a0      	cbz	r0, 6dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x352>
    6dd0:	6870      	ldr	r0, [r6, #4]
    6dd2:	7881      	ldrb	r1, [r0, #2]
    6dd4:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    6dd8:	b121      	cbz	r1, 6de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    6dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dde:	2101      	movs	r1, #1
    6de0:	f7ff bbcc 	b.w	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    6de4:	4604      	mov	r4, r0
    6de6:	3028      	adds	r0, #40	; 0x28
    6de8:	f008 f90e 	bl	f008 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6dec:	b128      	cbz	r0, 6dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x352>
    6dee:	4620      	mov	r0, r4
    6df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6df4:	2101      	movs	r1, #1
    6df6:	f7ff bbc1 	b.w	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    6dfa:	4620      	mov	r0, r4
    6dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e00:	f000 ba74 	b.w	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    6e04:	20000124 	.word	0x20000124
    6e08:	20001658 	.word	0x20001658
    6e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e10:	4690      	mov	r8, r2
    6e12:	460d      	mov	r5, r1
    6e14:	4604      	mov	r4, r0
    6e16:	2903      	cmp	r1, #3
    6e18:	bf1b      	ittet	ne
    6e1a:	f894 0078 	ldrbne.w	r0, [r4, #120]	; 0x78
    6e1e:	2800      	cmpne	r0, #0
    6e20:	f04f 0900 	moveq.w	r9, #0
    6e24:	f04f 0901 	movne.w	r9, #1
    6e28:	f003 ff88 	bl	ad3c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6e2c:	4606      	mov	r6, r0
    6e2e:	2d03      	cmp	r5, #3
    6e30:	d008      	beq.n	6e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6e32:	2701      	movs	r7, #1
    6e34:	2d05      	cmp	r5, #5
    6e36:	bf02      	ittt	eq
    6e38:	78a0      	ldrbeq	r0, [r4, #2]
    6e3a:	f010 0001 	andseq.w	r0, r0, #1
    6e3e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e42:	e007      	b.n	6e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6e44:	78a0      	ldrb	r0, [r4, #2]
    6e46:	2702      	movs	r7, #2
    6e48:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6e4c:	2800      	cmp	r0, #0
    6e4e:	bf08      	it	eq
    6e50:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e54:	f1b9 0f00 	cmp.w	r9, #0
    6e58:	d159      	bne.n	6f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    6e5a:	482e      	ldr	r0, [pc, #184]	; (6f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x46c>)
    6e5c:	7b80      	ldrb	r0, [r0, #14]
    6e5e:	b140      	cbz	r0, 6e72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    6e60:	f007 fb4e 	bl	e500 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6e64:	f888 0000 	strb.w	r0, [r8]
    6e68:	28ff      	cmp	r0, #255	; 0xff
    6e6a:	d002      	beq.n	6e72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    6e6c:	f7fe f932 	bl	50d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6e70:	4306      	orrs	r6, r0
    6e72:	4d29      	ldr	r5, [pc, #164]	; (6f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>)
    6e74:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
    6e78:	f104 0368 	add.w	r3, r4, #104	; 0x68
    6e7c:	68a9      	ldr	r1, [r5, #8]
    6e7e:	f811 0b03 	ldrb.w	r0, [r1], #3
    6e82:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6e86:	f007 fa99 	bl	e3bc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6e8a:	f898 1000 	ldrb.w	r1, [r8]
    6e8e:	29ff      	cmp	r1, #255	; 0xff
    6e90:	d004      	beq.n	6e9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    6e92:	b9b8      	cbnz	r0, 6ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    6e94:	7ee0      	ldrb	r0, [r4, #27]
    6e96:	4288      	cmp	r0, r1
    6e98:	d116      	bne.n	6ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    6e9a:	e013      	b.n	6ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    6e9c:	b1a0      	cbz	r0, 6ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    6e9e:	68a9      	ldr	r1, [r5, #8]
    6ea0:	f811 0b03 	ldrb.w	r0, [r1], #3
    6ea4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6ea8:	f7fe f926 	bl	50f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6eac:	4680      	mov	r8, r0
    6eae:	f7fe f997 	bl	51e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    6eb2:	b138      	cbz	r0, 6ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    6eb4:	4640      	mov	r0, r8
    6eb6:	f7fe f899 	bl	4fec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6eba:	b118      	cbz	r0, 6ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    6ebc:	2110      	movs	r1, #16
    6ebe:	f7fe fbef 	bl	56a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6ec2:	b108      	cbz	r0, 6ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    6ec4:	2001      	movs	r0, #1
    6ec6:	e000      	b.n	6eca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    6ec8:	2000      	movs	r0, #0
    6eca:	78a1      	ldrb	r1, [r4, #2]
    6ecc:	f011 0f04 	tst.w	r1, #4
    6ed0:	d001      	beq.n	6ed6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6ed2:	b1e0      	cbz	r0, 6f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    6ed4:	e018      	b.n	6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    6ed6:	b9be      	cbnz	r6, 6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    6ed8:	7c60      	ldrb	r0, [r4, #17]
    6eda:	2800      	cmp	r0, #0
    6edc:	bf18      	it	ne
    6ede:	42b8      	cmpne	r0, r7
    6ee0:	d115      	bne.n	6f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    6ee2:	68a9      	ldr	r1, [r5, #8]
    6ee4:	f811 0b03 	ldrb.w	r0, [r1], #3
    6ee8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6eec:	f7fe f904 	bl	50f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6ef0:	4604      	mov	r4, r0
    6ef2:	f7fe f975 	bl	51e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    6ef6:	b138      	cbz	r0, 6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    6ef8:	4620      	mov	r0, r4
    6efa:	f7fe f877 	bl	4fec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6efe:	b118      	cbz	r0, 6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    6f00:	2110      	movs	r1, #16
    6f02:	f7fe fbcd 	bl	56a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6f06:	b110      	cbz	r0, 6f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    6f08:	2001      	movs	r0, #1
    6f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f0e:	2000      	movs	r0, #0
    6f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f14:	20001658 	.word	0x20001658
    6f18:	20000124 	.word	0x20000124
    6f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f20:	f244 2555 	movw	r5, #16981	; 0x4255
    6f24:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    6f28:	f00c 0401 	and.w	r4, ip, #1
    6f2c:	f3cc 0a40 	ubfx	sl, ip, #1, #1
    6f30:	f1a0 0ceb 	sub.w	ip, r0, #235	; 0xeb
    6f34:	9400      	str	r4, [sp, #0]
    6f36:	ea54 0b0a 	orrs.w	fp, r4, sl
    6f3a:	fa1f fc8c 	uxth.w	ip, ip
    6f3e:	f10c 04f6 	add.w	r4, ip, #246	; 0xf6
    6f42:	fb04 f405 	mul.w	r4, r4, r5
    6f46:	ea4f 5994 	mov.w	r9, r4, lsr #22
    6f4a:	fb0c f405 	mul.w	r4, ip, r5
    6f4e:	ea4f 5794 	mov.w	r7, r4, lsr #22
    6f52:	b2fc      	uxtb	r4, r7
    6f54:	f06f 05f6 	mvn.w	r5, #246	; 0xf6
    6f58:	fb14 f405 	smulbb	r4, r4, r5
    6f5c:	eb04 060c 	add.w	r6, r4, ip
    6f60:	fa1f fc86 	uxth.w	ip, r6
    6f64:	f10c 0805 	add.w	r8, ip, #5
    6f68:	f04f 0c00 	mov.w	ip, #0
    6f6c:	f44f 74c8 	mov.w	r4, #400	; 0x190
    6f70:	f44f 75bf 	mov.w	r5, #382	; 0x17e
    6f74:	f000 8148 	beq.w	7208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    6f78:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    6f7c:	f1ba 0f00 	cmp.w	sl, #0
    6f80:	d01b      	beq.n	6fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    6f82:	2a08      	cmp	r2, #8
    6f84:	bf04      	itt	eq
    6f86:	46a3      	moveq	fp, r4
    6f88:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    6f8c:	d00f      	beq.n	6fae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    6f8e:	2a04      	cmp	r2, #4
    6f90:	bf04      	itt	eq
    6f92:	46ab      	moveq	fp, r5
    6f94:	f04f 0a10 	moveq.w	sl, #16
    6f98:	d009      	beq.n	6fae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    6f9a:	2a02      	cmp	r2, #2
    6f9c:	bf07      	ittee	eq
    6f9e:	f10c 0b18 	addeq.w	fp, ip, #24
    6fa2:	f04f 0a04 	moveq.w	sl, #4
    6fa6:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    6faa:	f04f 0a08 	movne.w	sl, #8
    6fae:	eb0a 0e8a 	add.w	lr, sl, sl, lsl #2
    6fb2:	eb0e 1a8a 	add.w	sl, lr, sl, lsl #6
    6fb6:	44da      	add	sl, fp
    6fb8:	e01a      	b.n	6ff0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x548>
    6fba:	b1db      	cbz	r3, 6ff4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    6fbc:	2a08      	cmp	r2, #8
    6fbe:	bf04      	itt	eq
    6fc0:	46a3      	moveq	fp, r4
    6fc2:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    6fc6:	d00f      	beq.n	6fe8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x540>
    6fc8:	2a04      	cmp	r2, #4
    6fca:	bf04      	itt	eq
    6fcc:	46ab      	moveq	fp, r5
    6fce:	f04f 0a10 	moveq.w	sl, #16
    6fd2:	d009      	beq.n	6fe8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x540>
    6fd4:	2a02      	cmp	r2, #2
    6fd6:	bf07      	ittee	eq
    6fd8:	f10c 0b18 	addeq.w	fp, ip, #24
    6fdc:	f04f 0a04 	moveq.w	sl, #4
    6fe0:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    6fe4:	f04f 0a08 	movne.w	sl, #8
    6fe8:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
    6fec:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    6ff0:	4451      	add	r1, sl
    6ff2:	e021      	b.n	7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    6ff4:	28ff      	cmp	r0, #255	; 0xff
    6ff6:	bf34      	ite	cc
    6ff8:	4682      	movcc	sl, r0
    6ffa:	f04f 0aff 	movcs.w	sl, #255	; 0xff
    6ffe:	f10a 0b05 	add.w	fp, sl, #5
    7002:	2a08      	cmp	r2, #8
    7004:	bf04      	itt	eq
    7006:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    700a:	fb0b 110a 	mlaeq	r1, fp, sl, r1
    700e:	d027      	beq.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    7010:	2a04      	cmp	r2, #4
    7012:	d01f      	beq.n	7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7014:	2a02      	cmp	r2, #2
    7016:	bf0c      	ite	eq
    7018:	f04f 0a04 	moveq.w	sl, #4
    701c:	f04f 0a08 	movne.w	sl, #8
    7020:	fb0b 110a 	mla	r1, fp, sl, r1
    7024:	bf07      	ittee	eq
    7026:	46e2      	moveq	sl, ip
    7028:	f04f 0b18 	moveq.w	fp, #24
    702c:	f04f 0a00 	movne.w	sl, #0
    7030:	f04f 0b28 	movne.w	fp, #40	; 0x28
    7034:	44da      	add	sl, fp
    7036:	4451      	add	r1, sl
    7038:	319c      	adds	r1, #156	; 0x9c
    703a:	f002 0a0c 	and.w	sl, r2, #12
    703e:	f1ba 0f00 	cmp.w	sl, #0
    7042:	bf18      	it	ne
    7044:	f04f 0a28 	movne.w	sl, #40	; 0x28
    7048:	4451      	add	r1, sl
    704a:	bf18      	it	ne
    704c:	f501 6141 	addne.w	r1, r1, #3088	; 0xc10
    7050:	d126      	bne.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7052:	e008      	b.n	7066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    7054:	f04f 0a10 	mov.w	sl, #16
    7058:	fb0b 110a 	mla	r1, fp, sl, r1
    705c:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    7060:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    7064:	e7e6      	b.n	7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    7066:	2a08      	cmp	r2, #8
    7068:	bf04      	itt	eq
    706a:	46a3      	moveq	fp, r4
    706c:	f04f 0a40 	moveq.w	sl, #64	; 0x40
    7070:	d00f      	beq.n	7092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
    7072:	2a04      	cmp	r2, #4
    7074:	bf04      	itt	eq
    7076:	46ab      	moveq	fp, r5
    7078:	f04f 0a10 	moveq.w	sl, #16
    707c:	d009      	beq.n	7092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
    707e:	2a02      	cmp	r2, #2
    7080:	bf07      	ittee	eq
    7082:	f10c 0b18 	addeq.w	fp, ip, #24
    7086:	f04f 0a04 	moveq.w	sl, #4
    708a:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    708e:	f04f 0a08 	movne.w	sl, #8
    7092:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
    7096:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    709a:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
    709e:	4451      	add	r1, sl
    70a0:	f101 0a98 	add.w	sl, r1, #152	; 0x98
    70a4:	9900      	ldr	r1, [sp, #0]
    70a6:	b1c1      	cbz	r1, 70da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda>
    70a8:	2a08      	cmp	r2, #8
    70aa:	bf08      	it	eq
    70ac:	2040      	moveq	r0, #64	; 0x40
    70ae:	d00c      	beq.n	70ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    70b0:	2a04      	cmp	r2, #4
    70b2:	bf04      	itt	eq
    70b4:	462c      	moveq	r4, r5
    70b6:	2010      	moveq	r0, #16
    70b8:	d007      	beq.n	70ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    70ba:	2a02      	cmp	r2, #2
    70bc:	bf07      	ittee	eq
    70be:	f10c 0418 	addeq.w	r4, ip, #24
    70c2:	2004      	moveq	r0, #4
    70c4:	f10c 0428 	addne.w	r4, ip, #40	; 0x28
    70c8:	2008      	movne	r0, #8
    70ca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    70ce:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    70d2:	4420      	add	r0, r4
    70d4:	eb00 010a 	add.w	r1, r0, sl
    70d8:	e091      	b.n	71fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    70da:	b1bb      	cbz	r3, 710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    70dc:	2a08      	cmp	r2, #8
    70de:	bf04      	itt	eq
    70e0:	46a3      	moveq	fp, r4
    70e2:	2140      	moveq	r1, #64	; 0x40
    70e4:	d00c      	beq.n	7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    70e6:	2a04      	cmp	r2, #4
    70e8:	bf04      	itt	eq
    70ea:	46ab      	moveq	fp, r5
    70ec:	2110      	moveq	r1, #16
    70ee:	d007      	beq.n	7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    70f0:	2a02      	cmp	r2, #2
    70f2:	bf07      	ittee	eq
    70f4:	f10c 0b18 	addeq.w	fp, ip, #24
    70f8:	2104      	moveq	r1, #4
    70fa:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    70fe:	2108      	movne	r1, #8
    7100:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    7104:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    7108:	4451      	add	r1, sl
    710a:	e01c      	b.n	7146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    710c:	28ff      	cmp	r0, #255	; 0xff
    710e:	bf34      	ite	cc
    7110:	4601      	movcc	r1, r0
    7112:	21ff      	movcs	r1, #255	; 0xff
    7114:	f101 0b05 	add.w	fp, r1, #5
    7118:	2a08      	cmp	r2, #8
    711a:	bf04      	itt	eq
    711c:	2140      	moveq	r1, #64	; 0x40
    711e:	fb0b aa01 	mlaeq	sl, fp, r1, sl
    7122:	d01e      	beq.n	7162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    7124:	2a04      	cmp	r2, #4
    7126:	d018      	beq.n	715a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    7128:	2a02      	cmp	r2, #2
    712a:	bf0c      	ite	eq
    712c:	2104      	moveq	r1, #4
    712e:	2108      	movne	r1, #8
    7130:	fb0b aa01 	mla	sl, fp, r1, sl
    7134:	bf07      	ittee	eq
    7136:	4661      	moveq	r1, ip
    7138:	f04f 0b18 	moveq.w	fp, #24
    713c:	2100      	movne	r1, #0
    713e:	f04f 0b28 	movne.w	fp, #40	; 0x28
    7142:	4459      	add	r1, fp
    7144:	4451      	add	r1, sl
    7146:	28eb      	cmp	r0, #235	; 0xeb
    7148:	d959      	bls.n	71fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    714a:	b313      	cbz	r3, 7192 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x192>
    714c:	2a08      	cmp	r2, #8
    714e:	d00e      	beq.n	716e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e>
    7150:	2a04      	cmp	r2, #4
    7152:	d009      	beq.n	7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    7154:	2a02      	cmp	r2, #2
    7156:	d00c      	beq.n	7172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    7158:	e00f      	b.n	717a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a>
    715a:	2110      	movs	r1, #16
    715c:	fb0b aa01 	mla	sl, fp, r1, sl
    7160:	212e      	movs	r1, #46	; 0x2e
    7162:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    7166:	e7ec      	b.n	7142 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142>
    7168:	462c      	mov	r4, r5
    716a:	2010      	movs	r0, #16
    716c:	e008      	b.n	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    716e:	2040      	movs	r0, #64	; 0x40
    7170:	e006      	b.n	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    7172:	f10c 0418 	add.w	r4, ip, #24
    7176:	2004      	movs	r0, #4
    7178:	e002      	b.n	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    717a:	f10c 0428 	add.w	r4, ip, #40	; 0x28
    717e:	2008      	movs	r0, #8
    7180:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    7184:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7188:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    718c:	fb09 1100 	mla	r1, r9, r0, r1
    7190:	e035      	b.n	71fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    7192:	b2fb      	uxtb	r3, r7
    7194:	2a08      	cmp	r2, #8
    7196:	bf04      	itt	eq
    7198:	4620      	moveq	r0, r4
    719a:	2740      	moveq	r7, #64	; 0x40
    719c:	d00c      	beq.n	71b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8>
    719e:	2a04      	cmp	r2, #4
    71a0:	bf04      	itt	eq
    71a2:	4628      	moveq	r0, r5
    71a4:	2710      	moveq	r7, #16
    71a6:	d007      	beq.n	71b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8>
    71a8:	2a02      	cmp	r2, #2
    71aa:	bf07      	ittee	eq
    71ac:	f10c 0018 	addeq.w	r0, ip, #24
    71b0:	2704      	moveq	r7, #4
    71b2:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
    71b6:	2708      	movne	r7, #8
    71b8:	eb07 1787 	add.w	r7, r7, r7, lsl #6
    71bc:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    71c0:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    71c4:	fb03 1100 	mla	r1, r3, r0, r1
    71c8:	0430      	lsls	r0, r6, #16
    71ca:	0c00      	lsrs	r0, r0, #16
    71cc:	d017      	beq.n	71fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    71ce:	2a08      	cmp	r2, #8
    71d0:	d007      	beq.n	71e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e2>
    71d2:	2a04      	cmp	r2, #4
    71d4:	d002      	beq.n	71dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    71d6:	2a02      	cmp	r2, #2
    71d8:	d005      	beq.n	71e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e6>
    71da:	e008      	b.n	71ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ee>
    71dc:	462c      	mov	r4, r5
    71de:	2010      	movs	r0, #16
    71e0:	e008      	b.n	71f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>
    71e2:	2040      	movs	r0, #64	; 0x40
    71e4:	e006      	b.n	71f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>
    71e6:	f10c 0418 	add.w	r4, ip, #24
    71ea:	2004      	movs	r0, #4
    71ec:	e002      	b.n	71f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>
    71ee:	f10c 0428 	add.w	r4, ip, #40	; 0x28
    71f2:	2008      	movs	r0, #8
    71f4:	fb08 1000 	mla	r0, r8, r0, r1
    71f8:	4420      	add	r0, r4
    71fa:	f500 71a5 	add.w	r1, r0, #330	; 0x14a
    71fe:	f201 100b 	addw	r0, r1, #267	; 0x10b
    7202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7206:	bf00      	nop
    7208:	f501 7aa5 	add.w	sl, r1, #330	; 0x14a
    720c:	b1bb      	cbz	r3, 723e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23e>
    720e:	2a08      	cmp	r2, #8
    7210:	bf04      	itt	eq
    7212:	46a3      	moveq	fp, r4
    7214:	2140      	moveq	r1, #64	; 0x40
    7216:	d00c      	beq.n	7232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    7218:	2a04      	cmp	r2, #4
    721a:	bf04      	itt	eq
    721c:	46ab      	moveq	fp, r5
    721e:	2110      	moveq	r1, #16
    7220:	d007      	beq.n	7232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    7222:	2a02      	cmp	r2, #2
    7224:	bf07      	ittee	eq
    7226:	f10c 0b18 	addeq.w	fp, ip, #24
    722a:	2104      	moveq	r1, #4
    722c:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
    7230:	2108      	movne	r1, #8
    7232:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    7236:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
    723a:	4451      	add	r1, sl
    723c:	e01c      	b.n	7278 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x278>
    723e:	28ff      	cmp	r0, #255	; 0xff
    7240:	bf34      	ite	cc
    7242:	4601      	movcc	r1, r0
    7244:	21ff      	movcs	r1, #255	; 0xff
    7246:	f101 0b05 	add.w	fp, r1, #5
    724a:	2a08      	cmp	r2, #8
    724c:	bf04      	itt	eq
    724e:	2140      	moveq	r1, #64	; 0x40
    7250:	fb0b aa01 	mlaeq	sl, fp, r1, sl
    7254:	d021      	beq.n	729a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29a>
    7256:	2a04      	cmp	r2, #4
    7258:	d01b      	beq.n	7292 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x292>
    725a:	2a02      	cmp	r2, #2
    725c:	bf0c      	ite	eq
    725e:	2104      	moveq	r1, #4
    7260:	2108      	movne	r1, #8
    7262:	fb0b aa01 	mla	sl, fp, r1, sl
    7266:	bf07      	ittee	eq
    7268:	4661      	moveq	r1, ip
    726a:	f04f 0b18 	moveq.w	fp, #24
    726e:	2100      	movne	r1, #0
    7270:	f04f 0b28 	movne.w	fp, #40	; 0x28
    7274:	4459      	add	r1, fp
    7276:	4451      	add	r1, sl
    7278:	28eb      	cmp	r0, #235	; 0xeb
    727a:	d9c0      	bls.n	71fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    727c:	b183      	cbz	r3, 72a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    727e:	2a08      	cmp	r2, #8
    7280:	f43f af75 	beq.w	716e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e>
    7284:	2a04      	cmp	r2, #4
    7286:	f43f af6f 	beq.w	7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    728a:	2a02      	cmp	r2, #2
    728c:	f47f af75 	bne.w	717a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a>
    7290:	e76f      	b.n	7172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    7292:	2110      	movs	r1, #16
    7294:	fb0b aa01 	mla	sl, fp, r1, sl
    7298:	212e      	movs	r1, #46	; 0x2e
    729a:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    729e:	e7e9      	b.n	7274 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x274>
    72a0:	b2fb      	uxtb	r3, r7
    72a2:	2a08      	cmp	r2, #8
    72a4:	bf04      	itt	eq
    72a6:	4627      	moveq	r7, r4
    72a8:	2040      	moveq	r0, #64	; 0x40
    72aa:	d00c      	beq.n	72c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c6>
    72ac:	2a04      	cmp	r2, #4
    72ae:	bf04      	itt	eq
    72b0:	462f      	moveq	r7, r5
    72b2:	2010      	moveq	r0, #16
    72b4:	d007      	beq.n	72c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c6>
    72b6:	2a02      	cmp	r2, #2
    72b8:	bf07      	ittee	eq
    72ba:	f10c 0718 	addeq.w	r7, ip, #24
    72be:	2004      	moveq	r0, #4
    72c0:	f10c 0728 	addne.w	r7, ip, #40	; 0x28
    72c4:	2008      	movne	r0, #8
    72c6:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    72ca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    72ce:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    72d2:	fb03 1100 	mla	r1, r3, r0, r1
    72d6:	0430      	lsls	r0, r6, #16
    72d8:	0c00      	lsrs	r0, r0, #16
    72da:	d090      	beq.n	71fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fe>
    72dc:	2a08      	cmp	r2, #8
    72de:	d080      	beq.n	71e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e2>
    72e0:	2a04      	cmp	r2, #4
    72e2:	f43f af7b 	beq.w	71dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    72e6:	2a02      	cmp	r2, #2
    72e8:	d181      	bne.n	71ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ee>
    72ea:	e77c      	b.n	71e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e6>
    72ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72f0:	4604      	mov	r4, r0
    72f2:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    72f6:	4e32      	ldr	r6, [pc, #200]	; (73c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c0>)
    72f8:	1c40      	adds	r0, r0, #1
    72fa:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    72fe:	7bb0      	ldrb	r0, [r6, #14]
    7300:	2500      	movs	r5, #0
    7302:	b120      	cbz	r0, 730e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30e>
    7304:	f003 fd00 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7308:	f003 fbf0 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    730c:	73b5      	strb	r5, [r6, #14]
    730e:	7035      	strb	r5, [r6, #0]
    7310:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    7314:	b128      	cbz	r0, 7322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    7316:	4620      	mov	r0, r4
    7318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    731c:	2101      	movs	r1, #1
    731e:	f007 bece 	b.w	f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7322:	7b60      	ldrb	r0, [r4, #13]
    7324:	2800      	cmp	r0, #0
    7326:	d044      	beq.n	73b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b2>
    7328:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
    732c:	4288      	cmp	r0, r1
    732e:	d840      	bhi.n	73b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b2>
    7330:	2101      	movs	r1, #1
    7332:	4620      	mov	r0, r4
    7334:	f007 fec3 	bl	f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7338:	78a0      	ldrb	r0, [r4, #2]
    733a:	f010 0f01 	tst.w	r0, #1
    733e:	d022      	beq.n	7386 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x386>
    7340:	6a20      	ldr	r0, [r4, #32]
    7342:	2643      	movs	r6, #67	; 0x43
    7344:	8807      	ldrh	r7, [r0, #0]
    7346:	f7fe fdaf 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    734a:	f003 fad7 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    734e:	2800      	cmp	r0, #0
    7350:	bf18      	it	ne
    7352:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    7356:	7820      	ldrb	r0, [r4, #0]
    7358:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    735c:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
    7360:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7364:	7b60      	ldrb	r0, [r4, #13]
    7366:	b910      	cbnz	r0, 736e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36e>
    7368:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
    736c:	e003      	b.n	7376 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x376>
    736e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    7372:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    7376:	4621      	mov	r1, r4
    7378:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    737c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7380:	2212      	movs	r2, #18
    7382:	f7fe ba59 	b.w	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7386:	f64f 77ff 	movw	r7, #65535	; 0xffff
    738a:	2643      	movs	r6, #67	; 0x43
    738c:	f7fe fd8c 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7390:	f003 fab4 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    7394:	2800      	cmp	r0, #0
    7396:	bf18      	it	ne
    7398:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    739c:	7820      	ldrb	r0, [r4, #0]
    739e:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    73a2:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
    73a6:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    73aa:	7b60      	ldrb	r0, [r4, #13]
    73ac:	2800      	cmp	r0, #0
    73ae:	d1de      	bne.n	736e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36e>
    73b0:	e7da      	b.n	7368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    73b2:	4620      	mov	r0, r4
    73b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73b8:	2100      	movs	r1, #0
    73ba:	f007 be80 	b.w	f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    73be:	0000      	.short	0x0000
    73c0:	20001658 	.word	0x20001658
    73c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73c6:	790a      	ldrb	r2, [r1, #4]
    73c8:	f012 0f18 	tst.w	r2, #24
    73cc:	d15c      	bne.n	7488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    73ce:	4605      	mov	r5, r0
    73d0:	000c      	movs	r4, r1
    73d2:	d028      	beq.n	7426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x426>
    73d4:	6820      	ldr	r0, [r4, #0]
    73d6:	2800      	cmp	r0, #0
    73d8:	d02a      	beq.n	7430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    73da:	f007 fdc0 	bl	ef5e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    73de:	7b23      	ldrb	r3, [r4, #12]
    73e0:	7b62      	ldrb	r2, [r4, #13]
    73e2:	2b04      	cmp	r3, #4
    73e4:	bf08      	it	eq
    73e6:	2308      	moveq	r3, #8
    73e8:	2a04      	cmp	r2, #4
    73ea:	bf08      	it	eq
    73ec:	2208      	moveq	r2, #8
    73ee:	4929      	ldr	r1, [pc, #164]	; (7494 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x494>)
    73f0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    73f4:	2b08      	cmp	r3, #8
    73f6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    73fa:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    73fe:	fbb1 f7fc 	udiv	r7, r1, ip
    7402:	bf08      	it	eq
    7404:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    7408:	d017      	beq.n	743a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43a>
    740a:	2b04      	cmp	r3, #4
    740c:	bf08      	it	eq
    740e:	f04f 0c10 	moveq.w	ip, #16
    7412:	d012      	beq.n	743a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43a>
    7414:	2b02      	cmp	r3, #2
    7416:	bf07      	ittee	eq
    7418:	f04f 0c04 	moveq.w	ip, #4
    741c:	2112      	moveq	r1, #18
    741e:	f04f 0c08 	movne.w	ip, #8
    7422:	2119      	movne	r1, #25
    7424:	e00a      	b.n	743c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43c>
    7426:	f240 31e2 	movw	r1, #994	; 0x3e2
    742a:	202d      	movs	r0, #45	; 0x2d
    742c:	f7fc fe50 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7430:	f240 31e3 	movw	r1, #995	; 0x3e3
    7434:	202d      	movs	r0, #45	; 0x2d
    7436:	f7fc fe4b 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    743a:	2114      	movs	r1, #20
    743c:	fb1c f101 	smulbb	r1, ip, r1
    7440:	2600      	movs	r6, #0
    7442:	2b08      	cmp	r3, #8
    7444:	bf08      	it	eq
    7446:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    744a:	d01f      	beq.n	748c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48c>
    744c:	2b04      	cmp	r3, #4
    744e:	bf08      	it	eq
    7450:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    7454:	d01a      	beq.n	748c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48c>
    7456:	46b4      	mov	ip, r6
    7458:	2b02      	cmp	r3, #2
    745a:	bf0c      	ite	eq
    745c:	2318      	moveq	r3, #24
    745e:	2328      	movne	r3, #40	; 0x28
    7460:	4463      	add	r3, ip
    7462:	4419      	add	r1, r3
    7464:	fb11 7100 	smlabb	r1, r1, r0, r7
    7468:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    746c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    7470:	4401      	add	r1, r0
    7472:	88a0      	ldrh	r0, [r4, #4]
    7474:	9000      	str	r0, [sp, #0]
    7476:	2300      	movs	r3, #0
    7478:	4628      	mov	r0, r5
    747a:	f7ff fd4f 	bl	6f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x474>
    747e:	68a1      	ldr	r1, [r4, #8]
    7480:	4281      	cmp	r1, r0
    7482:	bf3c      	itt	cc
    7484:	4630      	movcc	r0, r6
    7486:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
    7488:	2001      	movs	r0, #1
    748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    748c:	f44f 73a8 	mov.w	r3, #336	; 0x150
    7490:	e7e6      	b.n	7460 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x460>
    7492:	0000      	.short	0x0000
    7494:	000075b0 	.word	0x000075b0
    7498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    749a:	4604      	mov	r4, r0
    749c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    74a0:	4616      	mov	r6, r2
    74a2:	460d      	mov	r5, r1
    74a4:	f88d 0000 	strb.w	r0, [sp]
    74a8:	f89d 0000 	ldrb.w	r0, [sp]
    74ac:	b120      	cbz	r0, 74b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b8>
    74ae:	f640 31fa 	movw	r1, #3066	; 0xbfa
    74b2:	202d      	movs	r0, #45	; 0x2d
    74b4:	f7fc fe0c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74b8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    74bc:	8828      	ldrh	r0, [r5, #0]
    74be:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    74c2:	2b00      	cmp	r3, #0
    74c4:	bf18      	it	ne
    74c6:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    74c8:	6968      	ldr	r0, [r5, #20]
    74ca:	f007 f853 	bl	e574 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    74ce:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    74d2:	8ba8      	ldrh	r0, [r5, #28]
    74d4:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    74d8:	8be8      	ldrh	r0, [r5, #30]
    74da:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    74de:	f895 026d 	ldrb.w	r0, [r5, #621]	; 0x26d
    74e2:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
    74e6:	7ea0      	ldrb	r0, [r4, #26]
    74e8:	2100      	movs	r1, #0
    74ea:	b148      	cbz	r0, 7500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>
    74ec:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    74f0:	2801      	cmp	r0, #1
    74f2:	d105      	bne.n	7500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>
    74f4:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    74f8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    74fc:	2840      	cmp	r0, #64	; 0x40
    74fe:	d02e      	beq.n	755e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55e>
    7500:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    7504:	b140      	cbz	r0, 7518 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x518>
    7506:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    750a:	2801      	cmp	r0, #1
    750c:	bf04      	itt	eq
    750e:	f894 0066 	ldrbeq.w	r0, [r4, #102]	; 0x66
    7512:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    7516:	d022      	beq.n	755e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55e>
    7518:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
    751c:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
    7520:	481c      	ldr	r0, [pc, #112]	; (7594 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x594>)
    7522:	2eff      	cmp	r6, #255	; 0xff
    7524:	6880      	ldr	r0, [r0, #8]
    7526:	7801      	ldrb	r1, [r0, #0]
    7528:	f3c1 1180 	ubfx	r1, r1, #6, #1
    752c:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
    7530:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7534:	d021      	beq.n	757a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    7536:	f8c4 109a 	str.w	r1, [r4, #154]	; 0x9a
    753a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    753e:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    7542:	f104 028e 	add.w	r2, r4, #142	; 0x8e
    7546:	1e51      	subs	r1, r2, #1
    7548:	4630      	mov	r0, r6
    754a:	f7fd fda9 	bl	50a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    754e:	b178      	cbz	r0, 7570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>
    7550:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
    7554:	f040 0002 	orr.w	r0, r0, #2
    7558:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    755e:	f8d4 0061 	ldr.w	r0, [r4, #97]	; 0x61
    7562:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    7566:	f8b4 0065 	ldrh.w	r0, [r4, #101]	; 0x65
    756a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    756e:	e7d7      	b.n	7520 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x520>
    7570:	f640 411b 	movw	r1, #3099	; 0xc1b
    7574:	202d      	movs	r0, #45	; 0x2d
    7576:	f7fc fdab 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    757a:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    757e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7582:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7586:	f104 009a 	add.w	r0, r4, #154	; 0x9a
    758a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    758e:	f009 b9b7 	b.w	10900 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    7592:	0000      	.short	0x0000
    7594:	20000124 	.word	0x20000124
    7598:	4802      	ldr	r0, [pc, #8]	; (75a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>)
    759a:	2101      	movs	r1, #1
    759c:	6840      	ldr	r0, [r0, #4]
    759e:	f7fe bfed 	b.w	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    75a2:	0000      	.short	0x0000
    75a4:	20000124 	.word	0x20000124
    75a8:	00000003 	.word	0x00000003
    75ac:	55555501 	.word	0x55555501
    75b0:	a62c0000 	.word	0xa62c0000
    75b4:	0000a1e0 	.word	0x0000a1e0
    75b8:	0000a820 	.word	0x0000a820
    75bc:	00000000 	.word	0x00000000
    75c0:	0000a820 	.word	0x0000a820
    75c4:	00006a21 	.word	0x00006a21
    75c8:	0000674d 	.word	0x0000674d
    75cc:	00006999 	.word	0x00006999
    75d0:	00000000 	.word	0x00000000
    75d4:	00006885 	.word	0x00006885
    75d8:	000069c9 	.word	0x000069c9
    75dc:	0000ef25 	.word	0x0000ef25
    75e0:	0000ef2b 	.word	0x0000ef2b
    75e4:	00006d55 	.word	0x00006d55
    75e8:	00006d7d 	.word	0x00006d7d
    75ec:	00007599 	.word	0x00007599
    75f0:	000075e0 	.word	0x000075e0
    75f4:	000075d8 	.word	0x000075d8
    75f8:	000075d4 	.word	0x000075d4

000075fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    75fc:	b510      	push	{r4, lr}
    75fe:	1e42      	subs	r2, r0, #1
    7600:	2a02      	cmp	r2, #2
    7602:	d903      	bls.n	760c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    7604:	21ca      	movs	r1, #202	; 0xca
    7606:	202f      	movs	r0, #47	; 0x2f
    7608:	f7fc fd62 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    760c:	1e40      	subs	r0, r0, #1
    760e:	2910      	cmp	r1, #16
    7610:	bf02      	ittt	eq
    7612:	490a      	ldreq	r1, [pc, #40]	; (763c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    7614:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    7618:	bd10      	popeq	{r4, pc}
    761a:	2912      	cmp	r1, #18
    761c:	bf14      	ite	ne
    761e:	2913      	cmpne	r1, #19
    7620:	4907      	ldreq	r1, [pc, #28]	; (7640 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    7622:	d007      	beq.n	7634 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    7624:	2915      	cmp	r1, #21
    7626:	bf08      	it	eq
    7628:	4906      	ldreq	r1, [pc, #24]	; (7644 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    762a:	d003      	beq.n	7634 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    762c:	21d8      	movs	r1, #216	; 0xd8
    762e:	202f      	movs	r0, #47	; 0x2f
    7630:	f7fc fd4e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7634:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7638:	bd10      	pop	{r4, pc}
    763a:	0000      	.short	0x0000
    763c:	0000f088 	.word	0x0000f088
    7640:	0000f082 	.word	0x0000f082
    7644:	0000f08e 	.word	0x0000f08e

00007648 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7648:	1e42      	subs	r2, r0, #1
    764a:	b510      	push	{r4, lr}
    764c:	b2d2      	uxtb	r2, r2
    764e:	2a01      	cmp	r2, #1
    7650:	d905      	bls.n	765e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    7652:	291d      	cmp	r1, #29
    7654:	d01e      	beq.n	7694 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    7656:	21ee      	movs	r1, #238	; 0xee
    7658:	202f      	movs	r0, #47	; 0x2f
    765a:	f7fc fd39 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    765e:	2913      	cmp	r1, #19
    7660:	d014      	beq.n	768c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    7662:	dc08      	bgt.n	7676 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7664:	2910      	cmp	r1, #16
    7666:	bf02      	ittt	eq
    7668:	480d      	ldreq	r0, [pc, #52]	; (76a0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    766a:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    766e:	bd10      	popeq	{r4, pc}
    7670:	2912      	cmp	r1, #18
    7672:	d00b      	beq.n	768c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    7674:	e005      	b.n	7682 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    7676:	2915      	cmp	r1, #21
    7678:	bf08      	it	eq
    767a:	480a      	ldreq	r0, [pc, #40]	; (76a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    767c:	d007      	beq.n	768e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    767e:	291d      	cmp	r1, #29
    7680:	d008      	beq.n	7694 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    7682:	f44f 7181 	mov.w	r1, #258	; 0x102
    7686:	202f      	movs	r0, #47	; 0x2f
    7688:	f7fc fd22 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    768c:	4806      	ldr	r0, [pc, #24]	; (76a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    768e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7692:	bd10      	pop	{r4, pc}
    7694:	f240 315a 	movw	r1, #858	; 0x35a
    7698:	fb10 f001 	smulbb	r0, r0, r1
    769c:	bd10      	pop	{r4, pc}
    769e:	0000      	.short	0x0000
    76a0:	0000f076 	.word	0x0000f076
    76a4:	0000f07e 	.word	0x0000f07e
    76a8:	0000f07a 	.word	0x0000f07a

000076ac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    76ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76b0:	4604      	mov	r4, r0
    76b2:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
    76b6:	b083      	sub	sp, #12
    76b8:	4616      	mov	r6, r2
    76ba:	460d      	mov	r5, r1
    76bc:	bb40      	cbnz	r0, 7710 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
    76be:	4621      	mov	r1, r4
    76c0:	486a      	ldr	r0, [pc, #424]	; (786c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1c0>)
    76c2:	f7fa fe87 	bl	23d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    76c6:	4607      	mov	r7, r0
    76c8:	2820      	cmp	r0, #32
    76ca:	d021      	beq.n	7710 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
    76cc:	2250      	movs	r2, #80	; 0x50
    76ce:	2100      	movs	r1, #0
    76d0:	f504 7084 	add.w	r0, r4, #264	; 0x108
    76d4:	f005 fd54 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    76d8:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
    76dc:	f04f 0801 	mov.w	r8, #1
    76e0:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    76e4:	f884 8120 	strb.w	r8, [r4, #288]	; 0x120
    76e8:	b135      	cbz	r5, 76f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    76ea:	f7fe fc65 	bl	5fb8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    76ee:	f000 0007 	and.w	r0, r0, #7
    76f2:	1c40      	adds	r0, r0, #1
    76f4:	f885 029c 	strb.w	r0, [r5, #668]	; 0x29c
    76f8:	4620      	mov	r0, r4
    76fa:	f007 fb91 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    76fe:	2800      	cmp	r0, #0
    7700:	bf08      	it	eq
    7702:	256b      	moveq	r5, #107	; 0x6b
    7704:	d029      	beq.n	775a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xae>
    7706:	4620      	mov	r0, r4
    7708:	f007 fb7c 	bl	ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    770c:	b120      	cbz	r0, 7718 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x6c>
    770e:	e00a      	b.n	7726 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    7710:	b003      	add	sp, #12
    7712:	200c      	movs	r0, #12
    7714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7718:	4620      	mov	r0, r4
    771a:	f007 fb85 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    771e:	2800      	cmp	r0, #0
    7720:	bf08      	it	eq
    7722:	2542      	moveq	r5, #66	; 0x42
    7724:	d000      	beq.n	7728 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7c>
    7726:	2549      	movs	r5, #73	; 0x49
    7728:	4668      	mov	r0, sp
    772a:	f7fc fb3f 	bl	3dac <mpsl_fem_pa_is_configured>
    772e:	f89d 0000 	ldrb.w	r0, [sp]
    7732:	2800      	cmp	r0, #0
    7734:	bf14      	ite	ne
    7736:	2701      	movne	r7, #1
    7738:	2700      	moveq	r7, #0
    773a:	a801      	add	r0, sp, #4
    773c:	f7fc fb1e 	bl	3d7c <mpsl_fem_lna_is_configured>
    7740:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7744:	2800      	cmp	r0, #0
    7746:	bf18      	it	ne
    7748:	2001      	movne	r0, #1
    774a:	4338      	orrs	r0, r7
    774c:	bf18      	it	ne
    774e:	3509      	addne	r5, #9
    7750:	f7fc fa72 	bl	3c38 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    7754:	2800      	cmp	r0, #0
    7756:	bf18      	it	ne
    7758:	3518      	addne	r5, #24
    775a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
    775e:	2002      	movs	r0, #2
    7760:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
    7764:	f884 8133 	strb.w	r8, [r4, #307]	; 0x133
    7768:	2500      	movs	r5, #0
    776a:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
    776e:	f005 fb26 	bl	cdbe <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7772:	4607      	mov	r7, r0
    7774:	f8b4 9130 	ldrh.w	r9, [r4, #304]	; 0x130
    7778:	f7fb ff22 	bl	35c0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    777c:	454f      	cmp	r7, r9
    777e:	bf98      	it	ls
    7780:	464f      	movls	r7, r9
    7782:	4438      	add	r0, r7
    7784:	30cc      	adds	r0, #204	; 0xcc
    7786:	b287      	uxth	r7, r0
    7788:	4620      	mov	r0, r4
    778a:	f007 fb45 	bl	ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    778e:	b378      	cbz	r0, 77f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x144>
    7790:	f009 f868 	bl	10864 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7794:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7798:	b281      	uxth	r1, r0
    779a:	4630      	mov	r0, r6
    779c:	f005 fb47 	bl	ce2e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    77a0:	4430      	add	r0, r6
    77a2:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    77a6:	f7fa ffe5 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    77aa:	19c0      	adds	r0, r0, r7
    77ac:	4169      	adcs	r1, r5
    77ae:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
    77b2:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    77b6:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
    77ba:	4620      	mov	r0, r4
    77bc:	f007 fb26 	bl	ee0c <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    77c0:	b140      	cbz	r0, 77d4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x128>
    77c2:	4620      	mov	r0, r4
    77c4:	f7fe fcd8 	bl	6178 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    77c8:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    77cc:	1a30      	subs	r0, r6, r0
    77ce:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    77d2:	e005      	b.n	77e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    77d4:	2001      	movs	r0, #1
    77d6:	f007 fc47 	bl	f068 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    77da:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    77de:	1a30      	subs	r0, r6, r0
    77e0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    77e4:	f04f 30ff 	mov.w	r0, #4294967295
    77e8:	0841      	lsrs	r1, r0, #1
    77ea:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
    77ee:	e026      	b.n	783e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x192>
    77f0:	e7ff      	b.n	77f2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x146>
    77f2:	4620      	mov	r0, r4
    77f4:	f7fe fcc0 	bl	6178 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    77f8:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    77fc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    7800:	f884 8109 	strb.w	r8, [r4, #265]	; 0x109
    7804:	f7fa ffb6 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7808:	4681      	mov	r9, r0
    780a:	4688      	mov	r8, r1
    780c:	f7fe fbd4 	bl	5fb8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7810:	f242 7110 	movw	r1, #10000	; 0x2710
    7814:	fbb0 f2f1 	udiv	r2, r0, r1
    7818:	fb01 0012 	mls	r0, r1, r2, r0
    781c:	4438      	add	r0, r7
    781e:	eb10 0009 	adds.w	r0, r0, r9
    7822:	eb45 0108 	adc.w	r1, r5, r8
    7826:	2e00      	cmp	r6, #0
    7828:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
    782c:	bf04      	itt	eq
    782e:	f04f 30ff 	moveq.w	r0, #4294967295
    7832:	0841      	lsreq	r1, r0, #1
    7834:	d001      	beq.n	783a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x18e>
    7836:	1980      	adds	r0, r0, r6
    7838:	4169      	adcs	r1, r5
    783a:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
    783e:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    7842:	f504 7194 	add.w	r1, r4, #296	; 0x128
    7846:	f7f9 ffbb 	bl	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    784a:	b148      	cbz	r0, 7860 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1b4>
    784c:	f8a4 5140 	strh.w	r5, [r4, #320]	; 0x140
    7850:	2100      	movs	r1, #0
    7852:	4620      	mov	r0, r4
    7854:	f007 fb0e 	bl	ee74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7858:	b003      	add	sp, #12
    785a:	2000      	movs	r0, #0
    785c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7860:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    7864:	2030      	movs	r0, #48	; 0x30
    7866:	f7fc fc33 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    786a:	0000      	.short	0x0000
    786c:	0000f257 	.word	0x0000f257

00007870 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7870:	4803      	ldr	r0, [pc, #12]	; (7880 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    7872:	2100      	movs	r1, #0
    7874:	7001      	strb	r1, [r0, #0]
    7876:	2201      	movs	r2, #1
    7878:	7082      	strb	r2, [r0, #2]
    787a:	7041      	strb	r1, [r0, #1]
    787c:	f000 b802 	b.w	7884 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7880:	20000138 	.word	0x20000138

00007884 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    7884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7888:	b086      	sub	sp, #24
    788a:	4669      	mov	r1, sp
    788c:	2002      	movs	r0, #2
    788e:	f006 fbcd 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7892:	b120      	cbz	r0, 789e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1a>
    7894:	f240 1137 	movw	r1, #311	; 0x137
    7898:	2030      	movs	r0, #48	; 0x30
    789a:	f7fc fc19 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    789e:	4668      	mov	r0, sp
    78a0:	f7fc fe54 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    78a4:	2601      	movs	r6, #1
    78a6:	2500      	movs	r5, #0
    78a8:	bb10      	cbnz	r0, 78f0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x6c>
    78aa:	9c02      	ldr	r4, [sp, #8]
    78ac:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    78b0:	b1c8      	cbz	r0, 78e6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    78b2:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
    78b6:	2101      	movs	r1, #1
    78b8:	4620      	mov	r0, r4
    78ba:	f007 fadb 	bl	ee74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    78be:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    78c2:	b180      	cbz	r0, 78e6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
    78c4:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    78c8:	f7fa fb14 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    78cc:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    78d0:	f7fa fc68 	bl	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    78d4:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    78d8:	f7fa fc42 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    78dc:	2800      	cmp	r0, #0
    78de:	bf18      	it	ne
    78e0:	f884 5120 	strbne.w	r5, [r4, #288]	; 0x120
    78e4:	d010      	beq.n	7908 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x84>
    78e6:	4668      	mov	r0, sp
    78e8:	f7fc fe30 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    78ec:	2800      	cmp	r0, #0
    78ee:	d0dc      	beq.n	78aa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x26>
    78f0:	4f2c      	ldr	r7, [pc, #176]	; (79a4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x120>)
    78f2:	707e      	strb	r6, [r7, #1]
    78f4:	a903      	add	r1, sp, #12
    78f6:	2001      	movs	r0, #1
    78f8:	f006 fb98 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    78fc:	2800      	cmp	r0, #0
    78fe:	bf08      	it	eq
    7900:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    7904:	d02d      	beq.n	7962 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    7906:	e027      	b.n	7958 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xd4>
    7908:	f240 2109 	movw	r1, #521	; 0x209
    790c:	2030      	movs	r0, #48	; 0x30
    790e:	f7fc fbdf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7912:	9805      	ldr	r0, [sp, #20]
    7914:	2800      	cmp	r0, #0
    7916:	bf1c      	itt	ne
    7918:	f890 12ac 	ldrbne.w	r1, [r0, #684]	; 0x2ac
    791c:	2900      	cmpne	r1, #0
    791e:	d020      	beq.n	7962 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
    7920:	8800      	ldrh	r0, [r0, #0]
    7922:	42b0      	cmp	r0, r6
    7924:	bf18      	it	ne
    7926:	f04f 0820 	movne.w	r8, #32
    792a:	d035      	beq.n	7998 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    792c:	2101      	movs	r1, #1
    792e:	f006 fb73 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7932:	0004      	movs	r4, r0
    7934:	d01b      	beq.n	796e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xea>
    7936:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
    793a:	f7fa fc33 	bl	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    793e:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
    7942:	f894 02f4 	ldrb.w	r0, [r4, #756]	; 0x2f4
    7946:	f7fa fc0b 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    794a:	f884 82f4 	strb.w	r8, [r4, #756]	; 0x2f4
    794e:	a903      	add	r1, sp, #12
    7950:	2001      	movs	r0, #1
    7952:	f006 fb6b 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7956:	b1d0      	cbz	r0, 798e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10a>
    7958:	f240 1103 	movw	r1, #259	; 0x103
    795c:	2030      	movs	r0, #48	; 0x30
    795e:	f7fc fbb7 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7962:	a803      	add	r0, sp, #12
    7964:	f7fc fdf2 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7968:	2800      	cmp	r0, #0
    796a:	d0d2      	beq.n	7912 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x8e>
    796c:	e014      	b.n	7998 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    796e:	f240 1123 	movw	r1, #291	; 0x123
    7972:	2030      	movs	r0, #48	; 0x30
    7974:	f7fc fbac 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7978:	9805      	ldr	r0, [sp, #20]
    797a:	2800      	cmp	r0, #0
    797c:	bf1c      	itt	ne
    797e:	f890 12ac 	ldrbne.w	r1, [r0, #684]	; 0x2ac
    7982:	2900      	cmpne	r1, #0
    7984:	d003      	beq.n	798e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10a>
    7986:	8800      	ldrh	r0, [r0, #0]
    7988:	42b0      	cmp	r0, r6
    798a:	d1cf      	bne.n	792c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xa8>
    798c:	e004      	b.n	7998 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x114>
    798e:	a803      	add	r0, sp, #12
    7990:	f7fc fddc 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7994:	2800      	cmp	r0, #0
    7996:	d0ef      	beq.n	7978 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
    7998:	707d      	strb	r5, [r7, #1]
    799a:	b006      	add	sp, #24
    799c:	2000      	movs	r0, #0
    799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79a2:	0000      	.short	0x0000
    79a4:	20000138 	.word	0x20000138

000079a8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    79a8:	4901      	ldr	r1, [pc, #4]	; (79b0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    79aa:	7008      	strb	r0, [r1, #0]
    79ac:	4770      	bx	lr
    79ae:	0000      	.short	0x0000
    79b0:	20000138 	.word	0x20000138

000079b4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    79b4:	4908      	ldr	r1, [pc, #32]	; (79d8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    79b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    79ba:	fbb1 f1f2 	udiv	r1, r1, r2
    79be:	b510      	push	{r4, lr}
    79c0:	f201 11d7 	addw	r1, r1, #471	; 0x1d7
    79c4:	f007 f8b0 	bl	eb28 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    79c8:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
    79cc:	bf28      	it	cs
    79ce:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
    79d2:	b280      	uxth	r0, r0
    79d4:	bd10      	pop	{r4, pc}
    79d6:	0000      	.short	0x0000
    79d8:	0001527d 	.word	0x0001527d

000079dc <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>:
    79dc:	b510      	push	{r4, lr}
    79de:	4c11      	ldr	r4, [pc, #68]	; (7a24 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x48>)
    79e0:	6862      	ldr	r2, [r4, #4]
    79e2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    79e6:	2a03      	cmp	r2, #3
    79e8:	d004      	beq.n	79f4 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x18>
    79ea:	f640 4121 	movw	r1, #3105	; 0xc21
    79ee:	2032      	movs	r0, #50	; 0x32
    79f0:	f7fc fb6e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79f4:	2802      	cmp	r0, #2
    79f6:	bf18      	it	ne
    79f8:	2803      	cmpne	r0, #3
    79fa:	d005      	beq.n	7a08 <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ+0x2c>
    79fc:	f640 412f 	movw	r1, #3119	; 0xc2f
    7a00:	f04f 0032 	mov.w	r0, #50	; 0x32
    7a04:	f7fc fb64 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a08:	2900      	cmp	r1, #0
    7a0a:	bf18      	it	ne
    7a0c:	f001 fae6 	blne	8fdc <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    7a10:	2000      	movs	r0, #0
    7a12:	6861      	ldr	r1, [r4, #4]
    7a14:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    7a18:	f881 00c4 	strb.w	r0, [r1, #196]	; 0xc4
    7a1c:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    7a20:	bd10      	pop	{r4, pc}
    7a22:	0000      	.short	0x0000
    7a24:	20000150 	.word	0x20000150

00007a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    7a28:	4801      	ldr	r0, [pc, #4]	; (7a30 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    7a2a:	6840      	ldr	r0, [r0, #4]
    7a2c:	30c0      	adds	r0, #192	; 0xc0
    7a2e:	4770      	bx	lr
    7a30:	20000150 	.word	0x20000150

00007a34 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    7a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a38:	4c38      	ldr	r4, [pc, #224]	; (7b1c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xe8>)
    7a3a:	6861      	ldr	r1, [r4, #4]
    7a3c:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
    7a40:	2800      	cmp	r0, #0
    7a42:	bf16      	itet	ne
    7a44:	2802      	cmpne	r0, #2
    7a46:	2000      	moveq	r0, #0
    7a48:	2001      	movne	r0, #1
    7a4a:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    7a4e:	f101 014a 	add.w	r1, r1, #74	; 0x4a
    7a52:	f7fd f9f1 	bl	4e38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7a56:	6860      	ldr	r0, [r4, #4]
    7a58:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
    7a5c:	2902      	cmp	r1, #2
    7a5e:	bf16      	itet	ne
    7a60:	2903      	cmpne	r1, #3
    7a62:	2101      	moveq	r1, #1
    7a64:	2100      	movne	r1, #0
    7a66:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    7a6a:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
    7a6e:	f100 034a 	add.w	r3, r0, #74	; 0x4a
    7a72:	f04f 0700 	mov.w	r7, #0
    7a76:	2a01      	cmp	r2, #1
    7a78:	bf04      	itt	eq
    7a7a:	795b      	ldrbeq	r3, [r3, #5]
    7a7c:	f013 0fc0 	tsteq.w	r3, #192	; 0xc0
    7a80:	d00a      	beq.n	7a98 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    7a82:	f100 034a 	add.w	r3, r0, #74	; 0x4a
    7a86:	2a01      	cmp	r2, #1
    7a88:	d104      	bne.n	7a94 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x60>
    7a8a:	795a      	ldrb	r2, [r3, #5]
    7a8c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    7a90:	2a40      	cmp	r2, #64	; 0x40
    7a92:	d001      	beq.n	7a98 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x64>
    7a94:	2200      	movs	r2, #0
    7a96:	e000      	b.n	7a9a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x66>
    7a98:	2201      	movs	r2, #1
    7a9a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    7a9e:	2a00      	cmp	r2, #0
    7aa0:	bf04      	itt	eq
    7aa2:	2900      	cmpeq	r1, #0
    7aa4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aa8:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
    7aac:	f7fd fb52 	bl	5154 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7ab0:	491b      	ldr	r1, [pc, #108]	; (7b20 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xec>)
    7ab2:	fba0 6501 	umull	r6, r5, r0, r1
    7ab6:	f7fa fe5d 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7aba:	1980      	adds	r0, r0, r6
    7abc:	4169      	adcs	r1, r5
    7abe:	e9c8 0100 	strd	r0, r1, [r8]
    7ac2:	6860      	ldr	r0, [r4, #4]
    7ac4:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    7ac8:	2800      	cmp	r0, #0
    7aca:	bf1c      	itt	ne
    7acc:	2000      	movne	r0, #0
    7ace:	f7fd fa61 	blne	4f94 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7ad2:	2500      	movs	r5, #0
    7ad4:	6860      	ldr	r0, [r4, #4]
    7ad6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    7ada:	2900      	cmp	r1, #0
    7adc:	bf1a      	itte	ne
    7ade:	f890 105c 	ldrbne.w	r1, [r0, #92]	; 0x5c
    7ae2:	2900      	cmpne	r1, #0
    7ae4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ae8:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    7aec:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    7af0:	2901      	cmp	r1, #1
    7af2:	d104      	bne.n	7afe <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xca>
    7af4:	7951      	ldrb	r1, [r2, #5]
    7af6:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    7afa:	2940      	cmp	r1, #64	; 0x40
    7afc:	d005      	beq.n	7b0a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0xd6>
    7afe:	4639      	mov	r1, r7
    7b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b04:	304a      	adds	r0, #74	; 0x4a
    7b06:	f006 bc80 	b.w	e40a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7b0a:	f7fd f9ed 	bl	4ee8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7b0e:	6861      	ldr	r1, [r4, #4]
    7b10:	462a      	mov	r2, r5
    7b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b16:	314a      	adds	r1, #74	; 0x4a
    7b18:	f006 bc88 	b.w	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7b1c:	20000150 	.word	0x20000150
    7b20:	000f4240 	.word	0x000f4240

00007b24 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>:
    7b24:	4803      	ldr	r0, [pc, #12]	; (7b34 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ+0x10>)
    7b26:	b510      	push	{r4, lr}
    7b28:	6840      	ldr	r0, [r0, #4]
    7b2a:	308c      	adds	r0, #140	; 0x8c
    7b2c:	f008 fe8b 	bl	10846 <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>
    7b30:	2000      	movs	r0, #0
    7b32:	bd10      	pop	{r4, pc}
    7b34:	20000150 	.word	0x20000150

00007b38 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI>:
    7b38:	b570      	push	{r4, r5, r6, lr}
    7b3a:	4608      	mov	r0, r1
    7b3c:	2a02      	cmp	r2, #2
    7b3e:	d00d      	beq.n	7b5c <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x24>
    7b40:	4e22      	ldr	r6, [pc, #136]	; (7bcc <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x94>)
    7b42:	2500      	movs	r5, #0
    7b44:	2a04      	cmp	r2, #4
    7b46:	6871      	ldr	r1, [r6, #4]
    7b48:	d00c      	beq.n	7b64 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x2c>
    7b4a:	2a0f      	cmp	r2, #15
    7b4c:	d010      	beq.n	7b70 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x38>
    7b4e:	2a13      	cmp	r2, #19
    7b50:	d034      	beq.n	7bbc <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x84>
    7b52:	f240 31f3 	movw	r1, #1011	; 0x3f3
    7b56:	2032      	movs	r0, #50	; 0x32
    7b58:	f7fc faba 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b60:	f001 b93e 	b.w	8de0 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY>
    7b64:	7045      	strb	r5, [r0, #1]
    7b66:	2207      	movs	r2, #7
    7b68:	7002      	strb	r2, [r0, #0]
    7b6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    7b6c:	6041      	str	r1, [r0, #4]
    7b6e:	bd70      	pop	{r4, r5, r6, pc}
    7b70:	4604      	mov	r4, r0
    7b72:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7b74:	690a      	ldr	r2, [r1, #16]
    7b76:	f8c0 2003 	str.w	r2, [r0, #3]
    7b7a:	8a8a      	ldrh	r2, [r1, #20]
    7b7c:	f8a0 2007 	strh.w	r2, [r0, #7]
    7b80:	7bc8      	ldrb	r0, [r1, #15]
    7b82:	2800      	cmp	r0, #0
    7b84:	bf1a      	itte	ne
    7b86:	2802      	cmpne	r0, #2
    7b88:	2001      	movne	r0, #1
    7b8a:	2000      	moveq	r0, #0
    7b8c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    7b8e:	f101 010a 	add.w	r1, r1, #10
    7b92:	7090      	strb	r0, [r2, #2]
    7b94:	7065      	strb	r5, [r4, #1]
    7b96:	f04f 0014 	mov.w	r0, #20
    7b9a:	7020      	strb	r0, [r4, #0]
    7b9c:	f04f 0220 	mov.w	r2, #32
    7ba0:	f104 0004 	add.w	r0, r4, #4
    7ba4:	f005 fa72 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7ba8:	7225      	strb	r5, [r4, #8]
    7baa:	6870      	ldr	r0, [r6, #4]
    7bac:	6d40      	ldr	r0, [r0, #84]	; 0x54
    7bae:	8800      	ldrh	r0, [r0, #0]
    7bb0:	f7fc fed8 	bl	4964 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bb8:	f006 b8fc 	b.w	ddb4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7bbc:	7045      	strb	r5, [r0, #1]
    7bbe:	2218      	movs	r2, #24
    7bc0:	7002      	strb	r2, [r0, #0]
    7bc2:	f8d1 1042 	ldr.w	r1, [r1, #66]	; 0x42
    7bc6:	6041      	str	r1, [r0, #4]
    7bc8:	bd70      	pop	{r4, r5, r6, pc}
    7bca:	0000      	.short	0x0000
    7bcc:	20000150 	.word	0x20000150

00007bd0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    7bd0:	480b      	ldr	r0, [pc, #44]	; (7c00 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    7bd2:	6840      	ldr	r0, [r0, #4]
    7bd4:	6e81      	ldr	r1, [r0, #104]	; 0x68
    7bd6:	2900      	cmp	r1, #0
    7bd8:	bf04      	itt	eq
    7bda:	200c      	moveq	r0, #12
    7bdc:	4770      	bxeq	lr
    7bde:	f100 016d 	add.w	r1, r0, #109	; 0x6d
    7be2:	22ff      	movs	r2, #255	; 0xff
    7be4:	700a      	strb	r2, [r1, #0]
    7be6:	2200      	movs	r2, #0
    7be8:	6682      	str	r2, [r0, #104]	; 0x68
    7bea:	700a      	strb	r2, [r1, #0]
    7bec:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    7bf0:	2101      	movs	r1, #1
    7bf2:	fa01 f000 	lsl.w	r0, r1, r0
    7bf6:	4903      	ldr	r1, [pc, #12]	; (7c04 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x34>)
    7bf8:	6008      	str	r0, [r1, #0]
    7bfa:	2000      	movs	r0, #0
    7bfc:	4770      	bx	lr
    7bfe:	0000      	.short	0x0000
    7c00:	20000150 	.word	0x20000150
    7c04:	4001f508 	.word	0x4001f508

00007c08 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    7c08:	4602      	mov	r2, r0
    7c0a:	b510      	push	{r4, lr}
    7c0c:	480f      	ldr	r0, [pc, #60]	; (7c4c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x44>)
    7c0e:	460c      	mov	r4, r1
    7c10:	6082      	str	r2, [r0, #8]
    7c12:	68c1      	ldr	r1, [r0, #12]
    7c14:	b1a1      	cbz	r1, 7c40 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x38>
    7c16:	6842      	ldr	r2, [r0, #4]
    7c18:	2000      	movs	r0, #0
    7c1a:	f8a2 00c2 	strh.w	r0, [r2, #194]	; 0xc2
    7c1e:	f882 00c4 	strb.w	r0, [r2, #196]	; 0xc4
    7c22:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
    7c26:	f001 f9af 	bl	8f88 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    7c2a:	4620      	mov	r0, r4
    7c2c:	f000 f834 	bl	7c98 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    7c30:	2800      	cmp	r0, #0
    7c32:	bf08      	it	eq
    7c34:	bd10      	popeq	{r4, pc}
    7c36:	f640 1174 	movw	r1, #2420	; 0x974
    7c3a:	2032      	movs	r0, #50	; 0x32
    7c3c:	f7fc fa48 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c40:	f640 116e 	movw	r1, #2414	; 0x96e
    7c44:	2032      	movs	r0, #50	; 0x32
    7c46:	f7fc fa43 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c4a:	0000      	.short	0x0000
    7c4c:	20000150 	.word	0x20000150

00007c50 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    7c50:	4902      	ldr	r1, [pc, #8]	; (7c5c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    7c52:	4801      	ldr	r0, [pc, #4]	; (7c58 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    7c54:	60c8      	str	r0, [r1, #12]
    7c56:	4770      	bx	lr
    7c58:	00008db4 	.word	0x00008db4
    7c5c:	20000150 	.word	0x20000150

00007c60 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    7c60:	b570      	push	{r4, r5, r6, lr}
    7c62:	4604      	mov	r4, r0
    7c64:	f7fc ff7a 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7c68:	4605      	mov	r5, r0
    7c6a:	f7fc ff71 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7c6e:	4601      	mov	r1, r0
    7c70:	4628      	mov	r0, r5
    7c72:	f006 f915 	bl	dea0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    7c76:	0001      	movs	r1, r0
    7c78:	d006      	beq.n	7c88 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x28>
    7c7a:	4806      	ldr	r0, [pc, #24]	; (7c94 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x34>)
    7c7c:	68c0      	ldr	r0, [r0, #12]
    7c7e:	6802      	ldr	r2, [r0, #0]
    7c80:	4620      	mov	r0, r4
    7c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c86:	4710      	bx	r2
    7c88:	f640 217b 	movw	r1, #2683	; 0xa7b
    7c8c:	2032      	movs	r0, #50	; 0x32
    7c8e:	f7fc fa1f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c92:	0000      	.short	0x0000
    7c94:	20000150 	.word	0x20000150

00007c98 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	4d22      	ldr	r5, [pc, #136]	; (7d24 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x8c>)
    7c9c:	4606      	mov	r6, r0
    7c9e:	6868      	ldr	r0, [r5, #4]
    7ca0:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    7ca4:	2901      	cmp	r1, #1
    7ca6:	bf1f      	itttt	ne
    7ca8:	f890 0078 	ldrbne.w	r0, [r0, #120]	; 0x78
    7cac:	2800      	cmpne	r0, #0
    7cae:	200c      	movne	r0, #12
    7cb0:	bd70      	popne	{r4, r5, r6, pc}
    7cb2:	f7fc ff77 	bl	4ba4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    7cb6:	f001 f967 	bl	8f88 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    7cba:	6868      	ldr	r0, [r5, #4]
    7cbc:	2400      	movs	r4, #0
    7cbe:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    7cc2:	b130      	cbz	r0, 7cd2 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x3a>
    7cc4:	f003 f820 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7cc8:	f002 ff10 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ccc:	6868      	ldr	r0, [r5, #4]
    7cce:	f880 4084 	strb.w	r4, [r0, #132]	; 0x84
    7cd2:	2246      	movs	r2, #70	; 0x46
    7cd4:	2100      	movs	r1, #0
    7cd6:	6868      	ldr	r0, [r5, #4]
    7cd8:	f005 fa52 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7cdc:	6869      	ldr	r1, [r5, #4]
    7cde:	2001      	movs	r0, #1
    7ce0:	f881 405d 	strb.w	r4, [r1, #93]	; 0x5d
    7ce4:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    7ce8:	f881 4058 	strb.w	r4, [r1, #88]	; 0x58
    7cec:	f881 4082 	strb.w	r4, [r1, #130]	; 0x82
    7cf0:	f881 605e 	strb.w	r6, [r1, #94]	; 0x5e
    7cf4:	f881 40b0 	strb.w	r4, [r1, #176]	; 0xb0
    7cf8:	2007      	movs	r0, #7
    7cfa:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    7cfe:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    7d02:	22ff      	movs	r2, #255	; 0xff
    7d04:	7002      	strb	r2, [r0, #0]
    7d06:	f881 406c 	strb.w	r4, [r1, #108]	; 0x6c
    7d0a:	668c      	str	r4, [r1, #104]	; 0x68
    7d0c:	7004      	strb	r4, [r0, #0]
    7d0e:	f881 40b3 	strb.w	r4, [r1, #179]	; 0xb3
    7d12:	f881 40b4 	strb.w	r4, [r1, #180]	; 0xb4
    7d16:	3048      	adds	r0, #72	; 0x48
    7d18:	7004      	strb	r4, [r0, #0]
    7d1a:	2000      	movs	r0, #0
    7d1c:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    7d20:	bd70      	pop	{r4, r5, r6, pc}
    7d22:	0000      	.short	0x0000
    7d24:	20000150 	.word	0x20000150

00007d28 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    7d28:	4805      	ldr	r0, [pc, #20]	; (7d40 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    7d2a:	6840      	ldr	r0, [r0, #4]
    7d2c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    7d30:	2800      	cmp	r0, #0
    7d32:	bf16      	itet	ne
    7d34:	2802      	cmpne	r0, #2
    7d36:	2000      	moveq	r0, #0
    7d38:	2001      	movne	r0, #1
    7d3a:	f7fd b8ab 	b.w	4e94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    7d3e:	0000      	.short	0x0000
    7d40:	20000150 	.word	0x20000150

00007d44 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    7d44:	7801      	ldrb	r1, [r0, #0]
    7d46:	2200      	movs	r2, #0
    7d48:	f011 0f01 	tst.w	r1, #1
    7d4c:	4923      	ldr	r1, [pc, #140]	; (7ddc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x98>)
    7d4e:	6849      	ldr	r1, [r1, #4]
    7d50:	d009      	beq.n	7d66 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x22>
    7d52:	7842      	ldrb	r2, [r0, #1]
    7d54:	2300      	movs	r3, #0
    7d56:	2a03      	cmp	r2, #3
    7d58:	bf08      	it	eq
    7d5a:	654b      	streq	r3, [r1, #84]	; 0x54
    7d5c:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    7d60:	2201      	movs	r2, #1
    7d62:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    7d66:	7803      	ldrb	r3, [r0, #0]
    7d68:	f013 0f02 	tst.w	r3, #2
    7d6c:	d00e      	beq.n	7d8c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x48>
    7d6e:	7883      	ldrb	r3, [r0, #2]
    7d70:	f04f 0c00 	mov.w	ip, #0
    7d74:	2b03      	cmp	r3, #3
    7d76:	bf08      	it	eq
    7d78:	f8c1 c054 	streq.w	ip, [r1, #84]	; 0x54
    7d7c:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
    7d80:	2302      	movs	r3, #2
    7d82:	eb01 0c02 	add.w	ip, r1, r2
    7d86:	1c52      	adds	r2, r2, #1
    7d88:	f88c 30c6 	strb.w	r3, [ip, #198]	; 0xc6
    7d8c:	7803      	ldrb	r3, [r0, #0]
    7d8e:	f013 0f04 	tst.w	r3, #4
    7d92:	d00c      	beq.n	7dae <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x6a>
    7d94:	78c3      	ldrb	r3, [r0, #3]
    7d96:	f04f 0c00 	mov.w	ip, #0
    7d9a:	2b03      	cmp	r3, #3
    7d9c:	bf08      	it	eq
    7d9e:	f8c1 c054 	streq.w	ip, [r1, #84]	; 0x54
    7da2:	f881 3058 	strb.w	r3, [r1, #88]	; 0x58
    7da6:	440a      	add	r2, r1
    7da8:	2308      	movs	r3, #8
    7daa:	f882 30c6 	strb.w	r3, [r2, #198]	; 0xc6
    7dae:	7902      	ldrb	r2, [r0, #4]
    7db0:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    7db4:	7942      	ldrb	r2, [r0, #5]
    7db6:	2a00      	cmp	r2, #0
    7db8:	bf16      	itet	ne
    7dba:	2a02      	cmpne	r2, #2
    7dbc:	2301      	moveq	r3, #1
    7dbe:	2300      	movne	r3, #0
    7dc0:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
    7dc4:	f881 2059 	strb.w	r2, [r1, #89]	; 0x59
    7dc8:	7982      	ldrb	r2, [r0, #6]
    7dca:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
    7dce:	79c0      	ldrb	r0, [r0, #7]
    7dd0:	f881 005b 	strb.w	r0, [r1, #91]	; 0x5b
    7dd4:	f04f 0000 	mov.w	r0, #0
    7dd8:	4770      	bx	lr
    7dda:	0000      	.short	0x0000
    7ddc:	20000150 	.word	0x20000150

00007de0 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    7de0:	4801      	ldr	r0, [pc, #4]	; (7de8 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    7de2:	68c0      	ldr	r0, [r0, #12]
    7de4:	6840      	ldr	r0, [r0, #4]
    7de6:	4700      	bx	r0
    7de8:	20000150 	.word	0x20000150

00007dec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    7dec:	b538      	push	{r3, r4, r5, lr}
    7dee:	4c13      	ldr	r4, [pc, #76]	; (7e3c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x50>)
    7df0:	2200      	movs	r2, #0
    7df2:	6860      	ldr	r0, [r4, #4]
    7df4:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7df8:	f88d 1000 	strb.w	r1, [sp]
    7dfc:	f89d 1000 	ldrb.w	r1, [sp]
    7e00:	b931      	cbnz	r1, 7e10 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x24>
    7e02:	6e81      	ldr	r1, [r0, #104]	; 0x68
    7e04:	2900      	cmp	r1, #0
    7e06:	bf1c      	itt	ne
    7e08:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    7e0c:	f7fa fc94 	blne	2738 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7e10:	6860      	ldr	r0, [r4, #4]
    7e12:	2500      	movs	r5, #0
    7e14:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    7e18:	b130      	cbz	r0, 7e28 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x3c>
    7e1a:	f002 ff75 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7e1e:	f002 fe65 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7e22:	6860      	ldr	r0, [r4, #4]
    7e24:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    7e28:	6860      	ldr	r0, [r4, #4]
    7e2a:	f8a0 50c2 	strh.w	r5, [r0, #194]	; 0xc2
    7e2e:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
    7e32:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
    7e36:	2000      	movs	r0, #0
    7e38:	bd38      	pop	{r3, r4, r5, pc}
    7e3a:	0000      	.short	0x0000
    7e3c:	20000150 	.word	0x20000150

00007e40 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    7e40:	4809      	ldr	r0, [pc, #36]	; (7e68 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x28>)
    7e42:	6840      	ldr	r0, [r0, #4]
    7e44:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    7e48:	2903      	cmp	r1, #3
    7e4a:	bf0c      	ite	eq
    7e4c:	2101      	moveq	r1, #1
    7e4e:	2100      	movne	r1, #0
    7e50:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    7e54:	bf04      	itt	eq
    7e56:	6d41      	ldreq	r1, [r0, #84]	; 0x54
    7e58:	8809      	ldrheq	r1, [r1, #0]
    7e5a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    7e5e:	2213      	movs	r2, #19
    7e60:	2100      	movs	r1, #0
    7e62:	3038      	adds	r0, #56	; 0x38
    7e64:	f7fd bce8 	b.w	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7e68:	20000150 	.word	0x20000150

00007e6c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    7e6c:	4802      	ldr	r0, [pc, #8]	; (7e78 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    7e6e:	6840      	ldr	r0, [r0, #4]
    7e70:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7e74:	4770      	bx	lr
    7e76:	0000      	.short	0x0000
    7e78:	20000150 	.word	0x20000150

00007e7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    7e7c:	480c      	ldr	r0, [pc, #48]	; (7eb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    7e7e:	6841      	ldr	r1, [r0, #4]
    7e80:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    7e84:	2803      	cmp	r0, #3
    7e86:	d004      	beq.n	7e92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    7e88:	2801      	cmp	r0, #1
    7e8a:	bf18      	it	ne
    7e8c:	2802      	cmpne	r0, #2
    7e8e:	d007      	beq.n	7ea0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    7e90:	e004      	b.n	7e9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    7e92:	f891 005a 	ldrb.w	r0, [r1, #90]	; 0x5a
    7e96:	2801      	cmp	r0, #1
    7e98:	bf08      	it	eq
    7e9a:	4770      	bxeq	lr
    7e9c:	2000      	movs	r0, #0
    7e9e:	4770      	bx	lr
    7ea0:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    7ea4:	2801      	cmp	r0, #1
    7ea6:	bf14      	ite	ne
    7ea8:	2803      	cmpne	r0, #3
    7eaa:	2001      	moveq	r0, #1
    7eac:	d1f6      	bne.n	7e9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    7eae:	4770      	bx	lr
    7eb0:	20000150 	.word	0x20000150
    7eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7eb8:	4e1d      	ldr	r6, [pc, #116]	; (7f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4>)
    7eba:	4605      	mov	r5, r0
    7ebc:	460f      	mov	r7, r1
    7ebe:	6870      	ldr	r0, [r6, #4]
    7ec0:	491c      	ldr	r1, [pc, #112]	; (7f34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb8>)
    7ec2:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
    7ec6:	5c0c      	ldrb	r4, [r1, r0]
    7ec8:	4620      	mov	r0, r4
    7eca:	f003 fde3 	bl	ba94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7ece:	6870      	ldr	r0, [r6, #4]
    7ed0:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    7ed4:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    7ed8:	30c6      	adds	r0, #198	; 0xc6
    7eda:	5c0c      	ldrb	r4, [r1, r0]
    7edc:	2c01      	cmp	r4, #1
    7ede:	bf08      	it	eq
    7ee0:	2025      	moveq	r0, #37	; 0x25
    7ee2:	d00e      	beq.n	7f02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    7ee4:	2c02      	cmp	r4, #2
    7ee6:	bf08      	it	eq
    7ee8:	200d      	moveq	r0, #13
    7eea:	d00a      	beq.n	7f02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    7eec:	2c04      	cmp	r4, #4
    7eee:	bf14      	ite	ne
    7ef0:	2c08      	cmpne	r4, #8
    7ef2:	200f      	moveq	r0, #15
    7ef4:	d005      	beq.n	7f02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x86>
    7ef6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    7efa:	f04f 0032 	mov.w	r0, #50	; 0x32
    7efe:	f7fc f8e7 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f02:	4621      	mov	r1, r4
    7f04:	f003 fd92 	bl	ba2c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    7f08:	4638      	mov	r0, r7
    7f0a:	f003 fb6d 	bl	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f0e:	4621      	mov	r1, r4
    7f10:	f04f 0001 	mov.w	r0, #1
    7f14:	b135      	cbz	r5, 7f24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>
    7f16:	f003 f891 	bl	b03c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	bf08      	it	eq
    7f1e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f22:	e001      	b.n	7f28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>
    7f24:	f002 ffc0 	bl	aea8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7f28:	2001      	movs	r0, #1
    7f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f2e:	0000      	.short	0x0000
    7f30:	20000150 	.word	0x20000150
    7f34:	00010969 	.word	0x00010969
    7f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f3c:	4c73      	ldr	r4, [pc, #460]	; (810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>)
    7f3e:	460f      	mov	r7, r1
    7f40:	4606      	mov	r6, r0
    7f42:	6840      	ldr	r0, [r0, #4]
    7f44:	6861      	ldr	r1, [r4, #4]
    7f46:	4690      	mov	r8, r2
    7f48:	f04f 0a01 	mov.w	sl, #1
    7f4c:	2f07      	cmp	r7, #7
    7f4e:	bf04      	itt	eq
    7f50:	2800      	cmpeq	r0, #0
    7f52:	f1b8 0f00 	cmpeq.w	r8, #0
    7f56:	d00a      	beq.n	7f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf2>
    7f58:	f04f 0900 	mov.w	r9, #0
    7f5c:	f88d 9000 	strb.w	r9, [sp]
    7f60:	46eb      	mov	fp, sp
    7f62:	2800      	cmp	r0, #0
    7f64:	d07a      	beq.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    7f66:	7c72      	ldrb	r2, [r6, #17]
    7f68:	2a01      	cmp	r2, #1
    7f6a:	d011      	beq.n	7f90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x114>
    7f6c:	e017      	b.n	7f9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x122>
    7f6e:	f881 a08a 	strb.w	sl, [r1, #138]	; 0x8a
    7f72:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    7f76:	2800      	cmp	r0, #0
    7f78:	bf08      	it	eq
    7f7a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f7e:	f008 fc8f 	bl	108a0 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI>
    7f82:	2800      	cmp	r0, #0
    7f84:	bf1c      	itt	ne
    7f86:	6860      	ldrne	r0, [r4, #4]
    7f88:	f880 a08b 	strbne.w	sl, [r0, #139]	; 0x8b
    7f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f90:	7942      	ldrb	r2, [r0, #5]
    7f92:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    7f96:	2a40      	cmp	r2, #64	; 0x40
    7f98:	bf08      	it	eq
    7f9a:	2501      	moveq	r5, #1
    7f9c:	d000      	beq.n	7fa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x124>
    7f9e:	2500      	movs	r5, #0
    7fa0:	2f07      	cmp	r7, #7
    7fa2:	d128      	bne.n	7ff6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17a>
    7fa4:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    7fa8:	2a00      	cmp	r2, #0
    7faa:	bf18      	it	ne
    7fac:	2d00      	cmpne	r5, #0
    7fae:	d011      	beq.n	7fd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    7fb0:	f1b8 0f00 	cmp.w	r8, #0
    7fb4:	bf04      	itt	eq
    7fb6:	f891 10c1 	ldrbeq.w	r1, [r1, #193]	; 0xc1
    7fba:	2901      	cmpeq	r1, #1
    7fbc:	d015      	beq.n	7fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    7fbe:	bf00      	nop
    7fc0:	f006 fa9e 	bl	e500 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7fc4:	4601      	mov	r1, r0
    7fc6:	6860      	ldr	r0, [r4, #4]
    7fc8:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    7fcc:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    7fd0:	f880 a088 	strb.w	sl, [r0, #136]	; 0x88
    7fd4:	6860      	ldr	r0, [r4, #4]
    7fd6:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    7fda:	29ff      	cmp	r1, #255	; 0xff
    7fdc:	d013      	beq.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7fde:	4608      	mov	r0, r1
    7fe0:	f7fd f878 	bl	50d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7fe4:	f88d 0000 	strb.w	r0, [sp]
    7fe8:	e038      	b.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    7fea:	2101      	movs	r1, #1
    7fec:	f7fd f838 	bl	5060 <sym_CMDXCVZHYNPLMTHXOO2UL3QOD6EXLAZP5GS7LRI>
    7ff0:	6861      	ldr	r1, [r4, #4]
    7ff2:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    7ff6:	6860      	ldr	r0, [r4, #4]
    7ff8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    7ffc:	2800      	cmp	r0, #0
    7ffe:	bf18      	it	ne
    8000:	2d00      	cmpne	r5, #0
    8002:	d0e7      	beq.n	7fd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    8004:	e7dc      	b.n	7fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x144>
    8006:	f896 c011 	ldrb.w	ip, [r6, #17]
    800a:	f100 0380 	add.w	r3, r0, #128	; 0x80
    800e:	465a      	mov	r2, fp
    8010:	4660      	mov	r0, ip
    8012:	6871      	ldr	r1, [r6, #4]
    8014:	f7fd f8a4 	bl	5160 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    8018:	f090 0f01 	teq	r0, #1
    801c:	d01e      	beq.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    801e:	6860      	ldr	r0, [r4, #4]
    8020:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    8024:	f880 908b 	strb.w	r9, [r0, #139]	; 0x8b
    8028:	f04f 0200 	mov.w	r2, #0
    802c:	68b0      	ldr	r0, [r6, #8]
    802e:	2800      	cmp	r0, #0
    8030:	bf08      	it	eq
    8032:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8036:	2f07      	cmp	r7, #7
    8038:	bf18      	it	ne
    803a:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    803e:	6861      	ldr	r1, [r4, #4]
    8040:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8044:	29ff      	cmp	r1, #255	; 0xff
    8046:	bf14      	ite	ne
    8048:	2a00      	cmpne	r2, #0
    804a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    804e:	f7fd f871 	bl	5134 <sym_NILI2ETYIVMR32XQ6WFMUWXYMXNONBSH2DACBCQ>
    8052:	6860      	ldr	r0, [r4, #4]
    8054:	f880 a089 	strb.w	sl, [r0, #137]	; 0x89
    8058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    805c:	6861      	ldr	r1, [r4, #4]
    805e:	f89d 0000 	ldrb.w	r0, [sp]
    8062:	2f07      	cmp	r7, #7
    8064:	f891 5051 	ldrb.w	r5, [r1, #81]	; 0x51
    8068:	d309      	bcc.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    806a:	2f08      	cmp	r7, #8
    806c:	d829      	bhi.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    806e:	f1b8 0f00 	cmp.w	r8, #0
    8072:	d002      	beq.n	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
    8074:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    8078:	b319      	cbz	r1, 80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    807a:	6871      	ldr	r1, [r6, #4]
    807c:	b119      	cbz	r1, 8086 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86>
    807e:	2d00      	cmp	r5, #0
    8080:	bf08      	it	eq
    8082:	4605      	moveq	r5, r0
    8084:	e01e      	b.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    8086:	f1b8 0f00 	cmp.w	r8, #0
    808a:	d105      	bne.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
    808c:	7870      	ldrb	r0, [r6, #1]
    808e:	f010 0f10 	tst.w	r0, #16
    8092:	bf18      	it	ne
    8094:	4655      	movne	r5, sl
    8096:	d115      	bne.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    8098:	f007 f9f6 	bl	f488 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>
    809c:	b130      	cbz	r0, 80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>
    809e:	6860      	ldr	r0, [r4, #4]
    80a0:	f890 008a 	ldrb.w	r0, [r0, #138]	; 0x8a
    80a4:	2800      	cmp	r0, #0
    80a6:	bf18      	it	ne
    80a8:	2001      	movne	r0, #1
    80aa:	d100      	bne.n	80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
    80ac:	2000      	movs	r0, #0
    80ae:	4328      	orrs	r0, r5
    80b0:	d105      	bne.n	80be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe>
    80b2:	f7fd f8e1 	bl	5278 <sym_WPF5GN3T7F3CCL7OKOL6G2LW47JA44MC6XIU4NQ>
    80b6:	2800      	cmp	r0, #0
    80b8:	bf08      	it	eq
    80ba:	2500      	moveq	r5, #0
    80bc:	d002      	beq.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    80be:	2501      	movs	r5, #1
    80c0:	e000      	b.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    80c2:	464d      	mov	r5, r9
    80c4:	6860      	ldr	r0, [r4, #4]
    80c6:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    80ca:	4811      	ldr	r0, [pc, #68]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    80cc:	6802      	ldr	r2, [r0, #0]
    80ce:	b12a      	cbz	r2, 80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80d0:	4641      	mov	r1, r8
    80d2:	4630      	mov	r0, r6
    80d4:	4790      	blx	r2
    80d6:	6861      	ldr	r1, [r4, #4]
    80d8:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
    80dc:	6870      	ldr	r0, [r6, #4]
    80de:	b150      	cbz	r0, 80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
    80e0:	6860      	ldr	r0, [r4, #4]
    80e2:	7c71      	ldrb	r1, [r6, #17]
    80e4:	f880 109b 	strb.w	r1, [r0, #155]	; 0x9b
    80e8:	6871      	ldr	r1, [r6, #4]
    80ea:	680a      	ldr	r2, [r1, #0]
    80ec:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    80f0:	8889      	ldrh	r1, [r1, #4]
    80f2:	f8a0 1098 	strh.w	r1, [r0, #152]	; 0x98
    80f6:	6860      	ldr	r0, [r4, #4]
    80f8:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    80fc:	2900      	cmp	r1, #0
    80fe:	bf06      	itte	eq
    8100:	f890 008a 	ldrbeq.w	r0, [r0, #138]	; 0x8a
    8104:	2800      	cmpeq	r0, #0
    8106:	2201      	movne	r2, #1
    8108:	d190      	bne.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    810a:	e78d      	b.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    810c:	20000150 	.word	0x20000150
    8110:	20000160 	.word	0x20000160
    8114:	b510      	push	{r4, lr}
    8116:	480c      	ldr	r0, [pc, #48]	; (8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>)
    8118:	f003 fc6a 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    811c:	4c0a      	ldr	r4, [pc, #40]	; (8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>)
    811e:	2800      	cmp	r0, #0
    8120:	bf04      	itt	eq
    8122:	207f      	moveq	r0, #127	; 0x7f
    8124:	7020      	strbeq	r0, [r4, #0]
    8126:	6860      	ldr	r0, [r4, #4]
    8128:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    812c:	b138      	cbz	r0, 813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
    812e:	f002 fdeb 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8132:	f002 fcdb 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8136:	6861      	ldr	r1, [r4, #4]
    8138:	2000      	movs	r0, #0
    813a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    813e:	f002 fe0b 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8142:	2005      	movs	r0, #5
    8144:	bd10      	pop	{r4, pc}
    8146:	0000      	.short	0x0000
    8148:	20000150 	.word	0x20000150
    814c:	b510      	push	{r4, lr}
    814e:	4805      	ldr	r0, [pc, #20]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
    8150:	f003 fc4e 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    8154:	b910      	cbnz	r0, 815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>
    8156:	4903      	ldr	r1, [pc, #12]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
    8158:	207f      	movs	r0, #127	; 0x7f
    815a:	7008      	strb	r0, [r1, #0]
    815c:	f002 fdfc 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8160:	2005      	movs	r0, #5
    8162:	bd10      	pop	{r4, pc}
    8164:	20000150 	.word	0x20000150
    8168:	b570      	push	{r4, r5, r6, lr}
    816a:	4606      	mov	r6, r0
    816c:	b08a      	sub	sp, #40	; 0x28
    816e:	4814      	ldr	r0, [pc, #80]	; (81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>)
    8170:	f003 fc3e 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    8174:	4d12      	ldr	r5, [pc, #72]	; (81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>)
    8176:	2800      	cmp	r0, #0
    8178:	bf04      	itt	eq
    817a:	207f      	moveq	r0, #127	; 0x7f
    817c:	7028      	strbeq	r0, [r5, #0]
    817e:	7830      	ldrb	r0, [r6, #0]
    8180:	4669      	mov	r1, sp
    8182:	f000 040f 	and.w	r4, r0, #15
    8186:	4622      	mov	r2, r4
    8188:	4630      	mov	r0, r6
    818a:	f000 ff97 	bl	90bc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    818e:	2200      	movs	r2, #0
    8190:	4621      	mov	r1, r4
    8192:	4668      	mov	r0, sp
    8194:	f7ff fed0 	bl	7f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc>
    8198:	4621      	mov	r1, r4
    819a:	4668      	mov	r0, sp
    819c:	f000 f91e 	bl	83dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3dc>
    81a0:	6869      	ldr	r1, [r5, #4]
    81a2:	4604      	mov	r4, r0
    81a4:	f891 1084 	ldrb.w	r1, [r1, #132]	; 0x84
    81a8:	b139      	cbz	r1, 81ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ba>
    81aa:	f002 fdad 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    81ae:	f002 fc9d 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    81b2:	6868      	ldr	r0, [r5, #4]
    81b4:	2100      	movs	r1, #0
    81b6:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    81ba:	b00a      	add	sp, #40	; 0x28
    81bc:	4620      	mov	r0, r4
    81be:	bd70      	pop	{r4, r5, r6, pc}
    81c0:	20000150 	.word	0x20000150
    81c4:	b570      	push	{r4, r5, r6, lr}
    81c6:	7801      	ldrb	r1, [r0, #0]
    81c8:	b08a      	sub	sp, #40	; 0x28
    81ca:	f001 060f 	and.w	r6, r1, #15
    81ce:	4632      	mov	r2, r6
    81d0:	a901      	add	r1, sp, #4
    81d2:	f000 ff73 	bl	90bc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    81d6:	9802      	ldr	r0, [sp, #8]
    81d8:	4c28      	ldr	r4, [pc, #160]	; (827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>)
    81da:	7801      	ldrb	r1, [r0, #0]
    81dc:	6860      	ldr	r0, [r4, #4]
    81de:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    81e2:	4291      	cmp	r1, r2
    81e4:	d125      	bne.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    81e6:	9902      	ldr	r1, [sp, #8]
    81e8:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    81ec:	7849      	ldrb	r1, [r1, #1]
    81ee:	4291      	cmp	r1, r2
    81f0:	d11f      	bne.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    81f2:	9902      	ldr	r1, [sp, #8]
    81f4:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    81f8:	7889      	ldrb	r1, [r1, #2]
    81fa:	4291      	cmp	r1, r2
    81fc:	d119      	bne.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    81fe:	9902      	ldr	r1, [sp, #8]
    8200:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8204:	78c9      	ldrb	r1, [r1, #3]
    8206:	4291      	cmp	r1, r2
    8208:	d113      	bne.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    820a:	9902      	ldr	r1, [sp, #8]
    820c:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    8210:	7909      	ldrb	r1, [r1, #4]
    8212:	4291      	cmp	r1, r2
    8214:	d10d      	bne.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    8216:	9902      	ldr	r1, [sp, #8]
    8218:	f890 2099 	ldrb.w	r2, [r0, #153]	; 0x99
    821c:	7949      	ldrb	r1, [r1, #5]
    821e:	4291      	cmp	r1, r2
    8220:	d107      	bne.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    8222:	f89d 1015 	ldrb.w	r1, [sp, #21]
    8226:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    822a:	4281      	cmp	r1, r0
    822c:	bf08      	it	eq
    822e:	2501      	moveq	r5, #1
    8230:	d000      	beq.n	8234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x234>
    8232:	2500      	movs	r5, #0
    8234:	f002 fd90 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8238:	4810      	ldr	r0, [pc, #64]	; (827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>)
    823a:	f003 fbd9 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    823e:	217f      	movs	r1, #127	; 0x7f
    8240:	2800      	cmp	r0, #0
    8242:	bf08      	it	eq
    8244:	7021      	strbeq	r1, [r4, #0]
    8246:	2e04      	cmp	r6, #4
    8248:	d110      	bne.n	826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    824a:	b17d      	cbz	r5, 826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    824c:	f994 0000 	ldrsb.w	r0, [r4]
    8250:	287f      	cmp	r0, #127	; 0x7f
    8252:	d00e      	beq.n	8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
    8254:	7021      	strb	r1, [r4, #0]
    8256:	9000      	str	r0, [sp, #0]
    8258:	6860      	ldr	r0, [r4, #4]
    825a:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    825e:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    8262:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8266:	a801      	add	r0, sp, #4
    8268:	f007 f9c4 	bl	f5f4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    826c:	b00a      	add	sp, #40	; 0x28
    826e:	2005      	movs	r0, #5
    8270:	bd70      	pop	{r4, r5, r6, pc}
    8272:	f240 411d 	movw	r1, #1053	; 0x41d
    8276:	2032      	movs	r0, #50	; 0x32
    8278:	f7fb ff2a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    827c:	20000150 	.word	0x20000150
    8280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8284:	4c54      	ldr	r4, [pc, #336]	; (83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>)
    8286:	4607      	mov	r7, r0
    8288:	2100      	movs	r1, #0
    828a:	6860      	ldr	r0, [r4, #4]
    828c:	2f03      	cmp	r7, #3
    828e:	f100 0678 	add.w	r6, r0, #120	; 0x78
    8292:	68a0      	ldr	r0, [r4, #8]
    8294:	8001      	strh	r1, [r0, #0]
    8296:	d002      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    8298:	2f05      	cmp	r7, #5
    829a:	d004      	beq.n	82a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a6>
    829c:	e05a      	b.n	8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>
    829e:	2103      	movs	r1, #3
    82a0:	f006 fbf0 	bl	ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    82a4:	e056      	b.n	8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>
    82a6:	2105      	movs	r1, #5
    82a8:	f006 fbec 	bl	ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    82ac:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    82b0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    82b2:	6989      	ldr	r1, [r1, #24]
    82b4:	f8c5 100f 	str.w	r1, [r5, #15]
    82b8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    82ba:	8c0a      	ldrh	r2, [r1, #32]
    82bc:	f8a5 2013 	strh.w	r2, [r5, #19]
    82c0:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    82c4:	7569      	strb	r1, [r5, #21]
    82c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    82c8:	6941      	ldr	r1, [r0, #20]
    82ca:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    82cc:	f7fd f9d6 	bl	567c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    82d0:	75a8      	strb	r0, [r5, #22]
    82d2:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    82d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    82d8:	6941      	ldr	r1, [r0, #20]
    82da:	6a80      	ldr	r0, [r0, #40]	; 0x28
    82dc:	f7fd f9bc 	bl	5658 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    82e0:	75e8      	strb	r0, [r5, #23]
    82e2:	0a00      	lsrs	r0, r0, #8
    82e4:	7628      	strb	r0, [r5, #24]
    82e6:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    82ea:	6d40      	ldr	r0, [r0, #84]	; 0x54
    82ec:	6940      	ldr	r0, [r0, #20]
    82ee:	f006 f941 	bl	e574 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    82f2:	7668      	strb	r0, [r5, #25]
    82f4:	0a00      	lsrs	r0, r0, #8
    82f6:	76a8      	strb	r0, [r5, #26]
    82f8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    82fc:	6d51      	ldr	r1, [r2, #84]	; 0x54
    82fe:	8b89      	ldrh	r1, [r1, #28]
    8300:	76c1      	strb	r1, [r0, #27]
    8302:	0a09      	lsrs	r1, r1, #8
    8304:	7701      	strb	r1, [r0, #28]
    8306:	6d51      	ldr	r1, [r2, #84]	; 0x54
    8308:	8bc9      	ldrh	r1, [r1, #30]
    830a:	7741      	strb	r1, [r0, #29]
    830c:	0a09      	lsrs	r1, r1, #8
    830e:	7781      	strb	r1, [r0, #30]
    8310:	6d51      	ldr	r1, [r2, #84]	; 0x54
    8312:	301f      	adds	r0, #31
    8314:	31a7      	adds	r1, #167	; 0xa7
    8316:	f008 faee 	bl	108f6 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    831a:	e9d4 0501 	ldrd	r0, r5, [r4, #4]
    831e:	6d40      	ldr	r0, [r0, #84]	; 0x54
    8320:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    8324:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    8328:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    832c:	f000 001f 	and.w	r0, r0, #31
    8330:	4308      	orrs	r0, r1
    8332:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    8336:	f002 fb79 	bl	aa2c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    833a:	2807      	cmp	r0, #7
    833c:	bf88      	it	hi
    833e:	2007      	movhi	r0, #7
    8340:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    8344:	22e0      	movs	r2, #224	; 0xe0
    8346:	f001 011f 	and.w	r1, r1, #31
    834a:	ea02 1040 	and.w	r0, r2, r0, lsl #5
    834e:	4308      	orrs	r0, r1
    8350:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    8354:	f106 011c 	add.w	r1, r6, #28
    8358:	68a0      	ldr	r0, [r4, #8]
    835a:	f006 fbb5 	bl	eac8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    835e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    8362:	68a0      	ldr	r0, [r4, #8]
    8364:	f006 fbb7 	bl	ead6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8368:	6860      	ldr	r0, [r4, #4]
    836a:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    836e:	f890 6049 	ldrb.w	r6, [r0, #73]	; 0x49
    8372:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8376:	b1a1      	cbz	r1, 83a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a2>
    8378:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    837c:	f04f 0801 	mov.w	r8, #1
    8380:	2903      	cmp	r1, #3
    8382:	d106      	bne.n	8392 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x392>
    8384:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    8388:	2900      	cmp	r1, #0
    838a:	bf18      	it	ne
    838c:	f890 0083 	ldrbne.w	r0, [r0, #131]	; 0x83
    8390:	d101      	bne.n	8396 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x396>
    8392:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    8396:	f7fc fe35 	bl	5004 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    839a:	2800      	cmp	r0, #0
    839c:	bf1c      	itt	ne
    839e:	4646      	movne	r6, r8
    83a0:	4605      	movne	r5, r0
    83a2:	4629      	mov	r1, r5
    83a4:	68a0      	ldr	r0, [r4, #8]
    83a6:	f006 fb9f 	bl	eae8 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    83aa:	4631      	mov	r1, r6
    83ac:	68a0      	ldr	r0, [r4, #8]
    83ae:	f006 fba2 	bl	eaf6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    83b2:	68a0      	ldr	r0, [r4, #8]
    83b4:	f003 f918 	bl	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    83b8:	2f05      	cmp	r7, #5
    83ba:	bf18      	it	ne
    83bc:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    83c0:	6860      	ldr	r0, [r4, #4]
    83c2:	682a      	ldr	r2, [r5, #0]
    83c4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    83c6:	f8c1 200a 	str.w	r2, [r1, #10]
    83ca:	88aa      	ldrh	r2, [r5, #4]
    83cc:	81ca      	strh	r2, [r1, #14]
    83ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
    83d0:	7246      	strb	r6, [r0, #9]
    83d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83d6:	0000      	.short	0x0000
    83d8:	20000150 	.word	0x20000150
    83dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83e0:	4cee      	ldr	r4, [pc, #952]	; (879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>)
    83e2:	267f      	movs	r6, #127	; 0x7f
    83e4:	2701      	movs	r7, #1
    83e6:	2500      	movs	r5, #0
    83e8:	f994 3000 	ldrsb.w	r3, [r4]
    83ec:	6862      	ldr	r2, [r4, #4]
    83ee:	b083      	sub	sp, #12
    83f0:	2900      	cmp	r1, #0
    83f2:	d067      	beq.n	84c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c4>
    83f4:	2901      	cmp	r1, #1
    83f6:	d07c      	beq.n	84f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f2>
    83f8:	2705      	movs	r7, #5
    83fa:	2902      	cmp	r1, #2
    83fc:	d007      	beq.n	840e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40e>
    83fe:	2906      	cmp	r1, #6
    8400:	d02a      	beq.n	8458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x458>
    8402:	f002 fca9 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8406:	b003      	add	sp, #12
    8408:	4638      	mov	r0, r7
    840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    840e:	4605      	mov	r5, r0
    8410:	f002 fca2 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8414:	6860      	ldr	r0, [r4, #4]
    8416:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    841a:	b1c9      	cbz	r1, 8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
    841c:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    8420:	2901      	cmp	r1, #1
    8422:	bf18      	it	ne
    8424:	2902      	cmpne	r1, #2
    8426:	d113      	bne.n	8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
    8428:	f994 1000 	ldrsb.w	r1, [r4]
    842c:	297f      	cmp	r1, #127	; 0x7f
    842e:	f000 81b0 	beq.w	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    8432:	7026      	strb	r6, [r4, #0]
    8434:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    8438:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    843c:	e9cd 3200 	strd	r3, r2, [sp]
    8440:	9102      	str	r1, [sp, #8]
    8442:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    8446:	23ff      	movs	r3, #255	; 0xff
    8448:	2102      	movs	r1, #2
    844a:	4628      	mov	r0, r5
    844c:	f007 f82e 	bl	f4ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8450:	b003      	add	sp, #12
    8452:	4638      	mov	r0, r7
    8454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8458:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
    845c:	b129      	cbz	r1, 846a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46a>
    845e:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
    8462:	2902      	cmp	r1, #2
    8464:	d007      	beq.n	8476 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x476>
    8466:	2901      	cmp	r1, #1
    8468:	d01d      	beq.n	84a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a6>
    846a:	f002 fc75 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    846e:	b003      	add	sp, #12
    8470:	2005      	movs	r0, #5
    8472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8476:	2b7f      	cmp	r3, #127	; 0x7f
    8478:	f000 818b 	beq.w	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    847c:	7026      	strb	r6, [r4, #0]
    847e:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    8482:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    8486:	f8cd c000 	str.w	ip, [sp]
    848a:	e9cd 1301 	strd	r1, r3, [sp, #4]
    848e:	23ff      	movs	r3, #255	; 0xff
    8490:	2106      	movs	r1, #6
    8492:	324a      	adds	r2, #74	; 0x4a
    8494:	f007 f80a 	bl	f4ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8498:	6861      	ldr	r1, [r4, #4]
    849a:	200b      	movs	r0, #11
    849c:	f881 50b0 	strb.w	r5, [r1, #176]	; 0xb0
    84a0:	b003      	add	sp, #12
    84a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84a6:	2b7f      	cmp	r3, #127	; 0x7f
    84a8:	f000 8173 	beq.w	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    84ac:	7026      	strb	r6, [r4, #0]
    84ae:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    84b2:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    84b6:	f8cd c000 	str.w	ip, [sp]
    84ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
    84be:	23ff      	movs	r3, #255	; 0xff
    84c0:	2106      	movs	r1, #6
    84c2:	e039      	b.n	8538 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x538>
    84c4:	f892 108a 	ldrb.w	r1, [r2, #138]	; 0x8a
    84c8:	2900      	cmp	r1, #0
    84ca:	f000 8141 	beq.w	8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>
    84ce:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
    84d2:	2902      	cmp	r1, #2
    84d4:	d008      	beq.n	84e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e8>
    84d6:	2901      	cmp	r1, #1
    84d8:	d020      	beq.n	851c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x51c>
    84da:	2903      	cmp	r1, #3
    84dc:	d02e      	beq.n	853c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53c>
    84de:	f640 61ec 	movw	r1, #3820	; 0xeec
    84e2:	2032      	movs	r0, #50	; 0x32
    84e4:	f7fb fdf4 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84e8:	2b7f      	cmp	r3, #127	; 0x7f
    84ea:	f000 8152 	beq.w	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    84ee:	7026      	strb	r6, [r4, #0]
    84f0:	e000      	b.n	84f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f4>
    84f2:	e05e      	b.n	85b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b2>
    84f4:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    84f8:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    84fc:	f8cd c000 	str.w	ip, [sp]
    8500:	e9cd 1301 	strd	r1, r3, [sp, #4]
    8504:	23ff      	movs	r3, #255	; 0xff
    8506:	2100      	movs	r1, #0
    8508:	324a      	adds	r2, #74	; 0x4a
    850a:	f006 ffcf 	bl	f4ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    850e:	6860      	ldr	r0, [r4, #4]
    8510:	f880 70b0 	strb.w	r7, [r0, #176]	; 0xb0
    8514:	b003      	add	sp, #12
    8516:	200b      	movs	r0, #11
    8518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    851c:	2b7f      	cmp	r3, #127	; 0x7f
    851e:	f000 8138 	beq.w	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    8522:	7026      	strb	r6, [r4, #0]
    8524:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
    8528:	f892 c081 	ldrb.w	ip, [r2, #129]	; 0x81
    852c:	f8cd c000 	str.w	ip, [sp]
    8530:	e9cd 1301 	strd	r1, r3, [sp, #4]
    8534:	23ff      	movs	r3, #255	; 0xff
    8536:	2100      	movs	r1, #0
    8538:	324a      	adds	r2, #74	; 0x4a
    853a:	e0a6      	b.n	868a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68a>
    853c:	6841      	ldr	r1, [r0, #4]
    853e:	f892 c061 	ldrb.w	ip, [r2, #97]	; 0x61
    8542:	780b      	ldrb	r3, [r1, #0]
    8544:	4563      	cmp	r3, ip
    8546:	d11f      	bne.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8548:	784b      	ldrb	r3, [r1, #1]
    854a:	f892 c062 	ldrb.w	ip, [r2, #98]	; 0x62
    854e:	4563      	cmp	r3, ip
    8550:	d11a      	bne.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8552:	788b      	ldrb	r3, [r1, #2]
    8554:	f892 c063 	ldrb.w	ip, [r2, #99]	; 0x63
    8558:	4563      	cmp	r3, ip
    855a:	d115      	bne.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    855c:	78cb      	ldrb	r3, [r1, #3]
    855e:	f892 c064 	ldrb.w	ip, [r2, #100]	; 0x64
    8562:	4563      	cmp	r3, ip
    8564:	d110      	bne.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8566:	790b      	ldrb	r3, [r1, #4]
    8568:	f892 c065 	ldrb.w	ip, [r2, #101]	; 0x65
    856c:	4563      	cmp	r3, ip
    856e:	d10b      	bne.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8570:	7949      	ldrb	r1, [r1, #5]
    8572:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
    8576:	4299      	cmp	r1, r3
    8578:	d106      	bne.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    857a:	7c40      	ldrb	r0, [r0, #17]
    857c:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
    8580:	4288      	cmp	r0, r1
    8582:	bf08      	it	eq
    8584:	2001      	moveq	r0, #1
    8586:	d000      	beq.n	858a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58a>
    8588:	2000      	movs	r0, #0
    858a:	f892 105a 	ldrb.w	r1, [r2, #90]	; 0x5a
    858e:	2901      	cmp	r1, #1
    8590:	d07e      	beq.n	8690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x690>
    8592:	2800      	cmp	r0, #0
    8594:	d17c      	bne.n	8690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x690>
    8596:	4882      	ldr	r0, [pc, #520]	; (87a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a0>)
    8598:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    859c:	2908      	cmp	r1, #8
    859e:	d078      	beq.n	8692 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x692>
    85a0:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    85a4:	4288      	cmp	r0, r1
    85a6:	d073      	beq.n	8690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x690>
    85a8:	e0d2      	b.n	8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>
    85aa:	b003      	add	sp, #12
    85ac:	2005      	movs	r0, #5
    85ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85b2:	4605      	mov	r5, r0
    85b4:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    85b8:	f892 a08a 	ldrb.w	sl, [r2, #138]	; 0x8a
    85bc:	2800      	cmp	r0, #0
    85be:	bf14      	ite	ne
    85c0:	f04f 0900 	movne.w	r9, #0
    85c4:	f04f 0901 	moveq.w	r9, #1
    85c8:	2700      	movs	r7, #0
    85ca:	7ca8      	ldrb	r0, [r5, #18]
    85cc:	68a9      	ldr	r1, [r5, #8]
    85ce:	2801      	cmp	r0, #1
    85d0:	d107      	bne.n	85e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e2>
    85d2:	7948      	ldrb	r0, [r1, #5]
    85d4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    85d8:	2840      	cmp	r0, #64	; 0x40
    85da:	bf08      	it	eq
    85dc:	f04f 0801 	moveq.w	r8, #1
    85e0:	d001      	beq.n	85e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e6>
    85e2:	f04f 0800 	mov.w	r8, #0
    85e6:	f892 0058 	ldrb.w	r0, [r2, #88]	; 0x58
    85ea:	2803      	cmp	r0, #3
    85ec:	d106      	bne.n	85fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fc>
    85ee:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
    85f2:	2800      	cmp	r0, #0
    85f4:	bf18      	it	ne
    85f6:	f892 0083 	ldrbne.w	r0, [r2, #131]	; 0x83
    85fa:	d101      	bne.n	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
    85fc:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
    8600:	9000      	str	r0, [sp, #0]
    8602:	f7fc fcad 	bl	4f60 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    8606:	ea5f 0b00 	movs.w	fp, r0
    860a:	d043      	beq.n	8694 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x694>
    860c:	9800      	ldr	r0, [sp, #0]
    860e:	f7fc fc9b 	bl	4f48 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    8612:	2800      	cmp	r0, #0
    8614:	bf18      	it	ne
    8616:	f04f 0901 	movne.w	r9, #1
    861a:	f1b8 0f00 	cmp.w	r8, #0
    861e:	d039      	beq.n	8694 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x694>
    8620:	4658      	mov	r0, fp
    8622:	68a9      	ldr	r1, [r5, #8]
    8624:	f005 ff3a 	bl	e49c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    8628:	0007      	movs	r7, r0
    862a:	6860      	ldr	r0, [r4, #4]
    862c:	f890 b049 	ldrb.w	fp, [r0, #73]	; 0x49
    8630:	bf18      	it	ne
    8632:	f04b 0b02 	orrne.w	fp, fp, #2
    8636:	4601      	mov	r1, r0
    8638:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    863c:	2803      	cmp	r0, #3
    863e:	d02d      	beq.n	869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>
    8640:	f002 fb8a 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8644:	f1ba 0f00 	cmp.w	sl, #0
    8648:	d0af      	beq.n	85aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5aa>
    864a:	6860      	ldr	r0, [r4, #4]
    864c:	7caa      	ldrb	r2, [r5, #18]
    864e:	f100 014a 	add.w	r1, r0, #74	; 0x4a
    8652:	f890 c049 	ldrb.w	ip, [r0, #73]	; 0x49
    8656:	68ab      	ldr	r3, [r5, #8]
    8658:	4660      	mov	r0, ip
    865a:	f005 feaf 	bl	e3bc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    865e:	2800      	cmp	r0, #0
    8660:	bf08      	it	eq
    8662:	2f00      	cmpeq	r7, #0
    8664:	d077      	beq.n	8756 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x756>
    8666:	f994 0000 	ldrsb.w	r0, [r4]
    866a:	287f      	cmp	r0, #127	; 0x7f
    866c:	d06f      	beq.n	874e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74e>
    866e:	7026      	strb	r6, [r4, #0]
    8670:	6861      	ldr	r1, [r4, #4]
    8672:	f891 209a 	ldrb.w	r2, [r1, #154]	; 0x9a
    8676:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
    867a:	e9cd 3200 	strd	r3, r2, [sp]
    867e:	9002      	str	r0, [sp, #8]
    8680:	f101 024a 	add.w	r2, r1, #74	; 0x4a
    8684:	465b      	mov	r3, fp
    8686:	2101      	movs	r1, #1
    8688:	4628      	mov	r0, r5
    868a:	f006 ff0f 	bl	f4ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    868e:	e78c      	b.n	85aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5aa>
    8690:	e058      	b.n	8744 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x744>
    8692:	e05d      	b.n	8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>
    8694:	6860      	ldr	r0, [r4, #4]
    8696:	f890 b049 	ldrb.w	fp, [r0, #73]	; 0x49
    869a:	e7cc      	b.n	8636 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x636>
    869c:	6868      	ldr	r0, [r5, #4]
    869e:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    86a2:	7802      	ldrb	r2, [r0, #0]
    86a4:	429a      	cmp	r2, r3
    86a6:	d120      	bne.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86a8:	7842      	ldrb	r2, [r0, #1]
    86aa:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    86ae:	429a      	cmp	r2, r3
    86b0:	d11b      	bne.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86b2:	7882      	ldrb	r2, [r0, #2]
    86b4:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    86b8:	429a      	cmp	r2, r3
    86ba:	d116      	bne.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86bc:	78c2      	ldrb	r2, [r0, #3]
    86be:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    86c2:	429a      	cmp	r2, r3
    86c4:	d111      	bne.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86c6:	7902      	ldrb	r2, [r0, #4]
    86c8:	f891 3065 	ldrb.w	r3, [r1, #101]	; 0x65
    86cc:	429a      	cmp	r2, r3
    86ce:	d10c      	bne.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86d0:	7940      	ldrb	r0, [r0, #5]
    86d2:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    86d6:	4290      	cmp	r0, r2
    86d8:	d107      	bne.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86da:	7c68      	ldrb	r0, [r5, #17]
    86dc:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    86e0:	4290      	cmp	r0, r2
    86e2:	bf08      	it	eq
    86e4:	f04f 0801 	moveq.w	r8, #1
    86e8:	d001      	beq.n	86ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ee>
    86ea:	f04f 0800 	mov.w	r8, #0
    86ee:	4c2c      	ldr	r4, [pc, #176]	; (87a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a0>)
    86f0:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    86f4:	2808      	cmp	r0, #8
    86f6:	d005      	beq.n	8704 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x704>
    86f8:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
    86fc:	4290      	cmp	r0, r2
    86fe:	bf08      	it	eq
    8700:	2601      	moveq	r6, #1
    8702:	d000      	beq.n	8706 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x706>
    8704:	2600      	movs	r6, #0
    8706:	b957      	cbnz	r7, 871e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x71e>
    8708:	f1b9 0f00 	cmp.w	r9, #0
    870c:	d009      	beq.n	8722 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x722>
    870e:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    8712:	7caa      	ldrb	r2, [r5, #18]
    8714:	314a      	adds	r1, #74	; 0x4a
    8716:	68ab      	ldr	r3, [r5, #8]
    8718:	f005 fe50 	bl	e3bc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    871c:	b108      	cbz	r0, 8722 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x722>
    871e:	2101      	movs	r1, #1
    8720:	e000      	b.n	8724 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x724>
    8722:	2100      	movs	r1, #0
    8724:	f1ba 0f00 	cmp.w	sl, #0
    8728:	d009      	beq.n	873e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73e>
    872a:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    872e:	2801      	cmp	r0, #1
    8730:	d003      	beq.n	873a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73a>
    8732:	b920      	cbnz	r0, 873e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73e>
    8734:	ea58 0006 	orrs.w	r0, r8, r6
    8738:	d001      	beq.n	873e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73e>
    873a:	2001      	movs	r0, #1
    873c:	e000      	b.n	8740 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x740>
    873e:	2000      	movs	r0, #0
    8740:	4201      	tst	r1, r0
    8742:	d005      	beq.n	8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>
    8744:	b003      	add	sp, #12
    8746:	200c      	movs	r0, #12
    8748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    874c:	e003      	b.n	8756 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x756>
    874e:	e020      	b.n	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    8750:	f002 fb02 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8754:	e729      	b.n	85aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5aa>
    8756:	6860      	ldr	r0, [r4, #4]
    8758:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    875c:	2903      	cmp	r1, #3
    875e:	bf18      	it	ne
    8760:	2902      	cmpne	r1, #2
    8762:	f47f af22 	bne.w	85aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5aa>
    8766:	f1b8 0f00 	cmp.w	r8, #0
    876a:	f43f af1e 	beq.w	85aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5aa>
    876e:	f994 1000 	ldrsb.w	r1, [r4]
    8772:	297f      	cmp	r1, #127	; 0x7f
    8774:	d00d      	beq.n	8792 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x792>
    8776:	7026      	strb	r6, [r4, #0]
    8778:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
    877c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    8780:	e9cd 3200 	strd	r3, r2, [sp]
    8784:	9102      	str	r1, [sp, #8]
    8786:	23fe      	movs	r3, #254	; 0xfe
    8788:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    878c:	2101      	movs	r1, #1
    878e:	4628      	mov	r0, r5
    8790:	e77b      	b.n	868a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68a>
    8792:	f240 411d 	movw	r1, #1053	; 0x41d
    8796:	2032      	movs	r0, #50	; 0x32
    8798:	f7fb fc9a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    879c:	20000150 	.word	0x20000150
    87a0:	20000e18 	.word	0x20000e18
    87a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87a8:	4607      	mov	r7, r0
    87aa:	f7fc f9d7 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    87ae:	4604      	mov	r4, r0
    87b0:	f7fc f9ce 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    87b4:	4601      	mov	r1, r0
    87b6:	4620      	mov	r0, r4
    87b8:	f005 fb72 	bl	dea0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    87bc:	0005      	movs	r5, r0
    87be:	d00e      	beq.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    87c0:	4c32      	ldr	r4, [pc, #200]	; (888c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88c>)
    87c2:	6860      	ldr	r0, [r4, #4]
    87c4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    87c8:	2801      	cmp	r0, #1
    87ca:	bf1c      	itt	ne
    87cc:	2802      	cmpne	r0, #2
    87ce:	2803      	cmpne	r0, #3
    87d0:	d00a      	beq.n	87e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e8>
    87d2:	f241 5119 	movw	r1, #5401	; 0x1519
    87d6:	f04f 0032 	mov.w	r0, #50	; 0x32
    87da:	f7fb fc79 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87de:	f241 5113 	movw	r1, #5395	; 0x1513
    87e2:	2032      	movs	r0, #50	; 0x32
    87e4:	f7fb fc74 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87e8:	f06f 0613 	mvn.w	r6, #19
    87ec:	b327      	cbz	r7, 8838 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x838>
    87ee:	4628      	mov	r0, r5
    87f0:	f005 ffae 	bl	e750 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    87f4:	b918      	cbnz	r0, 87fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fe>
    87f6:	4628      	mov	r0, r5
    87f8:	f006 f8e9 	bl	e9ce <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    87fc:	b1e0      	cbz	r0, 8838 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x838>
    87fe:	6861      	ldr	r1, [r4, #4]
    8800:	4628      	mov	r0, r5
    8802:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    8806:	2a05      	cmp	r2, #5
    8808:	d204      	bcs.n	8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>
    880a:	f241 419d 	movw	r1, #5277	; 0x149d
    880e:	2032      	movs	r0, #50	; 0x32
    8810:	f7fb fc5e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8814:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    8818:	2a0b      	cmp	r2, #11
    881a:	d304      	bcc.n	8826 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x826>
    881c:	f241 419e 	movw	r1, #5278	; 0x149e
    8820:	2032      	movs	r0, #50	; 0x32
    8822:	f7fb fc55 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8826:	68e2      	ldr	r2, [r4, #12]
    8828:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    882c:	6952      	ldr	r2, [r2, #20]
    882e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8832:	5851      	ldr	r1, [r2, r1]
    8834:	4788      	blx	r1
    8836:	e01a      	b.n	886e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86e>
    8838:	6860      	ldr	r0, [r4, #4]
    883a:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    883e:	2905      	cmp	r1, #5
    8840:	d204      	bcs.n	884c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84c>
    8842:	f241 5109 	movw	r1, #5385	; 0x1509
    8846:	2032      	movs	r0, #50	; 0x32
    8848:	f7fb fc42 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    884c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    8850:	290b      	cmp	r1, #11
    8852:	d304      	bcc.n	885e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85e>
    8854:	f241 510a 	movw	r1, #5386	; 0x150a
    8858:	2032      	movs	r0, #50	; 0x32
    885a:	f7fb fc39 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    885e:	68e1      	ldr	r1, [r4, #12]
    8860:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8864:	6989      	ldr	r1, [r1, #24]
    8866:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    886a:	5808      	ldr	r0, [r1, r0]
    886c:	4780      	blx	r0
    886e:	280f      	cmp	r0, #15
    8870:	d304      	bcc.n	887c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x87c>
    8872:	f241 512e 	movw	r1, #5422	; 0x152e
    8876:	2032      	movs	r0, #50	; 0x32
    8878:	f7fb fc2a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    887c:	68e1      	ldr	r1, [r4, #12]
    887e:	6909      	ldr	r1, [r1, #16]
    8880:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8888:	4700      	bx	r0
    888a:	0000      	.short	0x0000
    888c:	20000150 	.word	0x20000150
    8890:	b510      	push	{r4, lr}
    8892:	b118      	cbz	r0, 889c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x89c>
    8894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8898:	f000 b942 	b.w	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
    889c:	2900      	cmp	r1, #0
    889e:	bf08      	it	eq
    88a0:	bd10      	popeq	{r4, pc}
    88a2:	4810      	ldr	r0, [pc, #64]	; (88e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e4>)
    88a4:	6841      	ldr	r1, [r0, #4]
    88a6:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    88aa:	2a0b      	cmp	r2, #11
    88ac:	d204      	bcs.n	88b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b8>
    88ae:	f241 51e3 	movw	r1, #5603	; 0x15e3
    88b2:	2032      	movs	r0, #50	; 0x32
    88b4:	f7fb fc0c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88b8:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    88bc:	2a0f      	cmp	r2, #15
    88be:	d304      	bcc.n	88ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ca>
    88c0:	f241 51e4 	movw	r1, #5604	; 0x15e4
    88c4:	2032      	movs	r0, #50	; 0x32
    88c6:	f7fb fc03 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ca:	68c0      	ldr	r0, [r0, #12]
    88cc:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    88d0:	6880      	ldr	r0, [r0, #8]
    88d2:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    88d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    88da:	5840      	ldr	r0, [r0, r1]
    88dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    88e0:	4700      	bx	r0
    88e2:	0000      	.short	0x0000
    88e4:	20000150 	.word	0x20000150
    88e8:	b510      	push	{r4, lr}
    88ea:	f7fc f937 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    88ee:	4604      	mov	r4, r0
    88f0:	f7fc f92e 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    88f4:	4601      	mov	r1, r0
    88f6:	4620      	mov	r0, r4
    88f8:	f005 fad2 	bl	dea0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    88fc:	b150      	cbz	r0, 8914 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x914>
    88fe:	f002 fe73 	bl	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8902:	2000      	movs	r0, #0
    8904:	f002 fcfe 	bl	b304 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    8908:	4905      	ldr	r1, [pc, #20]	; (8920 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x920>)
    890a:	2006      	movs	r0, #6
    890c:	6849      	ldr	r1, [r1, #4]
    890e:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    8912:	bd10      	pop	{r4, pc}
    8914:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    8918:	2032      	movs	r0, #50	; 0x32
    891a:	f7fb fbd9 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    891e:	0000      	.short	0x0000
    8920:	20000150 	.word	0x20000150
    8924:	4910      	ldr	r1, [pc, #64]	; (8968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x968>)
    8926:	b510      	push	{r4, lr}
    8928:	6848      	ldr	r0, [r1, #4]
    892a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    892e:	2a06      	cmp	r2, #6
    8930:	d204      	bcs.n	893c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x93c>
    8932:	f241 6111 	movw	r1, #5649	; 0x1611
    8936:	2032      	movs	r0, #50	; 0x32
    8938:	f7fb fbca 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    893c:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8940:	2a0b      	cmp	r2, #11
    8942:	d304      	bcc.n	894e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94e>
    8944:	f241 6112 	movw	r1, #5650	; 0x1612
    8948:	2032      	movs	r0, #50	; 0x32
    894a:	f7fb fbc1 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    894e:	68c9      	ldr	r1, [r1, #12]
    8950:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8954:	68c9      	ldr	r1, [r1, #12]
    8956:	f06f 0213 	mvn.w	r2, #19
    895a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    895e:	5808      	ldr	r0, [r1, r0]
    8960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8964:	4700      	bx	r0
    8966:	0000      	.short	0x0000
    8968:	20000150 	.word	0x20000150
    896c:	b510      	push	{r4, lr}
    896e:	4806      	ldr	r0, [pc, #24]	; (8988 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x988>)
    8970:	f003 f83e 	bl	b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    8974:	b910      	cbnz	r0, 897c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x97c>
    8976:	4904      	ldr	r1, [pc, #16]	; (8988 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x988>)
    8978:	207f      	movs	r0, #127	; 0x7f
    897a:	7008      	strb	r0, [r1, #0]
    897c:	f002 f9ec 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8984:	f000 b8f4 	b.w	8b70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb70>
    8988:	20000150 	.word	0x20000150
    898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    898e:	4d4b      	ldr	r5, [pc, #300]	; (8abc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xabc>)
    8990:	4604      	mov	r4, r0
    8992:	460e      	mov	r6, r1
    8994:	6868      	ldr	r0, [r5, #4]
    8996:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    899a:	2900      	cmp	r1, #0
    899c:	bf18      	it	ne
    899e:	2901      	cmpne	r1, #1
    89a0:	d003      	beq.n	89aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9aa>
    89a2:	2903      	cmp	r1, #3
    89a4:	bf1c      	itt	ne
    89a6:	200c      	movne	r0, #12
    89a8:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    89aa:	7b21      	ldrb	r1, [r4, #12]
    89ac:	f880 10a4 	strb.w	r1, [r0, #164]	; 0xa4
    89b0:	68a1      	ldr	r1, [r4, #8]
    89b2:	67c1      	str	r1, [r0, #124]	; 0x7c
    89b4:	7b22      	ldrb	r2, [r4, #12]
    89b6:	f100 01c6 	add.w	r1, r0, #198	; 0xc6
    89ba:	5c51      	ldrb	r1, [r2, r1]
    89bc:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    89c0:	6821      	ldr	r1, [r4, #0]
    89c2:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    89c6:	7920      	ldrb	r0, [r4, #4]
    89c8:	2802      	cmp	r0, #2
    89ca:	d01f      	beq.n	8a0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0c>
    89cc:	f002 fd64 	bl	b498 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    89d0:	f002 f99a 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    89d4:	f002 f88a 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    89d8:	f003 fb70 	bl	c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    89dc:	4838      	ldr	r0, [pc, #224]	; (8ac0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac0>)
    89de:	f002 fc7b 	bl	b2d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    89e2:	4838      	ldr	r0, [pc, #224]	; (8ac4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac4>)
    89e4:	f003 f818 	bl	ba18 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    89e8:	4837      	ldr	r0, [pc, #220]	; (8ac8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac8>)
    89ea:	f003 f80b 	bl	ba04 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    89ee:	6868      	ldr	r0, [r5, #4]
    89f0:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    89f4:	2800      	cmp	r0, #0
    89f6:	bf0c      	ite	eq
    89f8:	2001      	moveq	r0, #1
    89fa:	2002      	movne	r0, #2
    89fc:	f7fb f924 	bl	3c48 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    8a00:	7920      	ldrb	r0, [r4, #4]
    8a02:	2803      	cmp	r0, #3
    8a04:	bf1c      	itt	ne
    8a06:	4630      	movne	r0, r6
    8a08:	f002 fdee 	blne	b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8a0c:	7b60      	ldrb	r0, [r4, #13]
    8a0e:	b178      	cbz	r0, 8a30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa30>
    8a10:	6868      	ldr	r0, [r5, #4]
    8a12:	2201      	movs	r2, #1
    8a14:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    8a18:	f88d 1000 	strb.w	r1, [sp]
    8a1c:	f89d 1000 	ldrb.w	r1, [sp]
    8a20:	b931      	cbnz	r1, 8a30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa30>
    8a22:	6e81      	ldr	r1, [r0, #104]	; 0x68
    8a24:	2900      	cmp	r1, #0
    8a26:	bf1c      	itt	ne
    8a28:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    8a2c:	f7f9 fe84 	blne	2738 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    8a30:	7920      	ldrb	r0, [r4, #4]
    8a32:	2803      	cmp	r0, #3
    8a34:	d001      	beq.n	8a3a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3a>
    8a36:	b128      	cbz	r0, 8a44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa44>
    8a38:	e01e      	b.n	8a78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa78>
    8a3a:	f640 2111 	movw	r1, #2577	; 0xa11
    8a3e:	2032      	movs	r0, #50	; 0x32
    8a40:	f7fb fb46 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a44:	686a      	ldr	r2, [r5, #4]
    8a46:	f8df c084 	ldr.w	ip, [pc, #132]	; 8acc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xacc>
    8a4a:	2000      	movs	r0, #0
    8a4c:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
    8a50:	f892 3082 	ldrb.w	r3, [r2, #130]	; 0x82
    8a54:	1c5b      	adds	r3, r3, #1
    8a56:	fbac 7403 	umull	r7, r4, ip, r3
    8a5a:	0864      	lsrs	r4, r4, #1
    8a5c:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    8a60:	4423      	add	r3, r4
    8a62:	f882 3082 	strb.w	r3, [r2, #130]	; 0x82
    8a66:	fa21 f303 	lsr.w	r3, r1, r3
    8a6a:	f013 0f01 	tst.w	r3, #1
    8a6e:	d103      	bne.n	8a78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa78>
    8a70:	1c40      	adds	r0, r0, #1
    8a72:	b2c0      	uxtb	r0, r0
    8a74:	2803      	cmp	r0, #3
    8a76:	d3eb      	bcc.n	8a50 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa50>
    8a78:	6868      	ldr	r0, [r5, #4]
    8a7a:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    8a7e:	f002 fda7 	bl	b5d0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8a82:	4631      	mov	r1, r6
    8a84:	2001      	movs	r0, #1
    8a86:	f7ff fa15 	bl	7eb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    8a8a:	2800      	cmp	r0, #0
    8a8c:	bf08      	it	eq
    8a8e:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    8a90:	f000 f900 	bl	8c94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc94>
    8a94:	6868      	ldr	r0, [r5, #4]
    8a96:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    8a9a:	b160      	cbz	r0, 8ab6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xab6>
    8a9c:	f7fc fa28 	bl	4ef0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    8aa0:	480b      	ldr	r0, [pc, #44]	; (8ad0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad0>)
    8aa2:	6800      	ldr	r0, [r0, #0]
    8aa4:	2803      	cmp	r0, #3
    8aa6:	bf1c      	itt	ne
    8aa8:	2000      	movne	r0, #0
    8aaa:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    8aac:	f640 2123 	movw	r1, #2595	; 0xa23
    8ab0:	2032      	movs	r0, #50	; 0x32
    8ab2:	f7fb fb0d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ab6:	f7fc fc47 	bl	5348 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8aba:	e7f1      	b.n	8aa0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa0>
    8abc:	20000150 	.word	0x20000150
    8ac0:	00008dd0 	.word	0x00008dd0
    8ac4:	00010966 	.word	0x00010966
    8ac8:	8e89bed6 	.word	0x8e89bed6
    8acc:	aaaaaaab 	.word	0xaaaaaaab
    8ad0:	40001550 	.word	0x40001550
    8ad4:	b538      	push	{r3, r4, r5, lr}
    8ad6:	4c11      	ldr	r4, [pc, #68]	; (8b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb1c>)
    8ad8:	2200      	movs	r2, #0
    8ada:	6860      	ldr	r0, [r4, #4]
    8adc:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    8ae0:	f88d 1000 	strb.w	r1, [sp]
    8ae4:	f89d 1000 	ldrb.w	r1, [sp]
    8ae8:	b931      	cbnz	r1, 8af8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf8>
    8aea:	6e81      	ldr	r1, [r0, #104]	; 0x68
    8aec:	2900      	cmp	r1, #0
    8aee:	bf1c      	itt	ne
    8af0:	f890 006c 	ldrbne.w	r0, [r0, #108]	; 0x6c
    8af4:	f7f9 fe20 	blne	2738 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    8af8:	6860      	ldr	r0, [r4, #4]
    8afa:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8afe:	2800      	cmp	r0, #0
    8b00:	bf18      	it	ne
    8b02:	2801      	cmpne	r0, #1
    8b04:	d007      	beq.n	8b16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb16>
    8b06:	2802      	cmp	r0, #2
    8b08:	bf1c      	itt	ne
    8b0a:	200c      	movne	r0, #12
    8b0c:	bd38      	popne	{r3, r4, r5, pc}
    8b0e:	f000 f82f 	bl	8b70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb70>
    8b12:	2000      	movs	r0, #0
    8b14:	bd38      	pop	{r3, r4, r5, pc}
    8b16:	f000 f803 	bl	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
    8b1a:	e7fa      	b.n	8b12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb12>
    8b1c:	20000150 	.word	0x20000150
    8b20:	b570      	push	{r4, r5, r6, lr}
    8b22:	4c0c      	ldr	r4, [pc, #48]	; (8b54 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb54>)
    8b24:	2500      	movs	r5, #0
    8b26:	6860      	ldr	r0, [r4, #4]
    8b28:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    8b2c:	b130      	cbz	r0, 8b3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb3c>
    8b2e:	f002 f8eb 	bl	ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8b32:	f001 ffdb 	bl	aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8b36:	6860      	ldr	r0, [r4, #4]
    8b38:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    8b3c:	6860      	ldr	r0, [r4, #4]
    8b3e:	2101      	movs	r1, #1
    8b40:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    8b44:	f8a0 50c2 	strh.w	r5, [r0, #194]	; 0xc2
    8b48:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
    8b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8b50:	f000 bb5e 	b.w	9210 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY>
    8b54:	20000150 	.word	0x20000150
    8b58:	4804      	ldr	r0, [pc, #16]	; (8b6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6c>)
    8b5a:	6841      	ldr	r1, [r0, #4]
    8b5c:	2000      	movs	r0, #0
    8b5e:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    8b62:	f881 00c4 	strb.w	r0, [r1, #196]	; 0xc4
    8b66:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    8b6a:	4770      	bx	lr
    8b6c:	20000150 	.word	0x20000150
    8b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b74:	f7fb fff2 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8b78:	4604      	mov	r4, r0
    8b7a:	f7fb ffe9 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8b7e:	4601      	mov	r1, r0
    8b80:	4620      	mov	r0, r4
    8b82:	f005 f98d 	bl	dea0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    8b86:	0005      	movs	r5, r0
    8b88:	d037      	beq.n	8bfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbfa>
    8b8a:	f000 f9d5 	bl	8f38 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    8b8e:	4c33      	ldr	r4, [pc, #204]	; (8c5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc5c>)
    8b90:	6860      	ldr	r0, [r4, #4]
    8b92:	f100 02c6 	add.w	r2, r0, #198	; 0xc6
    8b96:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    8b9a:	5c8e      	ldrb	r6, [r1, r2]
    8b9c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    8ba0:	2000      	movs	r0, #0
    8ba2:	f000 fadb 	bl	915c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8ba6:	2800      	cmp	r0, #0
    8ba8:	d02d      	beq.n	8c06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc06>
    8baa:	6860      	ldr	r0, [r4, #4]
    8bac:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8bb0:	2802      	cmp	r0, #2
    8bb2:	d003      	beq.n	8bbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbbc>
    8bb4:	4629      	mov	r1, r5
    8bb6:	2000      	movs	r0, #0
    8bb8:	f7ff f97c 	bl	7eb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>
    8bbc:	2e01      	cmp	r6, #1
    8bbe:	bf07      	ittee	eq
    8bc0:	2701      	moveq	r7, #1
    8bc2:	2003      	moveq	r0, #3
    8bc4:	2700      	movne	r7, #0
    8bc6:	2005      	movne	r0, #5
    8bc8:	4428      	add	r0, r5
    8bca:	f7fc f979 	bl	4ec0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8bce:	6861      	ldr	r1, [r4, #4]
    8bd0:	2500      	movs	r5, #0
    8bd2:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    8bd6:	b140      	cbz	r0, 8bea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbea>
    8bd8:	2f00      	cmp	r7, #0
    8bda:	bf18      	it	ne
    8bdc:	2640      	movne	r6, #64	; 0x40
    8bde:	d016      	beq.n	8c0e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0e>
    8be0:	f001 ffc4 	bl	ab6c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    8be4:	4630      	mov	r0, r6
    8be6:	f002 f89d 	bl	ad24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    8bea:	6860      	ldr	r0, [r4, #4]
    8bec:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    8bf0:	2903      	cmp	r1, #3
    8bf2:	bf18      	it	ne
    8bf4:	2902      	cmpne	r1, #2
    8bf6:	d11c      	bne.n	8c32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc32>
    8bf8:	e00f      	b.n	8c1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc1a>
    8bfa:	f240 41ee 	movw	r1, #1262	; 0x4ee
    8bfe:	f04f 0032 	mov.w	r0, #50	; 0x32
    8c02:	f7fb fa65 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8c0a:	f7ff bf89 	b.w	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
    8c0e:	f016 0f0c 	tst.w	r6, #12
    8c12:	bf14      	ite	ne
    8c14:	2655      	movne	r6, #85	; 0x55
    8c16:	2650      	moveq	r6, #80	; 0x50
    8c18:	e7e2      	b.n	8be0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe0>
    8c1a:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
    8c1e:	f100 00c6 	add.w	r0, r0, #198	; 0xc6
    8c22:	5c08      	ldrb	r0, [r1, r0]
    8c24:	2801      	cmp	r0, #1
    8c26:	d104      	bne.n	8c32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc32>
    8c28:	2100      	movs	r1, #0
    8c2a:	2201      	movs	r2, #1
    8c2c:	4608      	mov	r0, r1
    8c2e:	f002 fe71 	bl	b914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8c32:	6860      	ldr	r0, [r4, #4]
    8c34:	21ff      	movs	r1, #255	; 0xff
    8c36:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    8c3a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    8c3e:	f880 5089 	strb.w	r5, [r0, #137]	; 0x89
    8c42:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    8c46:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    8c4a:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    8c4e:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    8c52:	2105      	movs	r1, #5
    8c54:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    8c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c5c:	20000150 	.word	0x20000150
    8c60:	b510      	push	{r4, lr}
    8c62:	2003      	movs	r0, #3
    8c64:	f000 fa7a 	bl	915c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8c68:	b168      	cbz	r0, 8c86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc86>
    8c6a:	2003      	movs	r0, #3
    8c6c:	f7ff fb08 	bl	8280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x280>
    8c70:	2201      	movs	r2, #1
    8c72:	4611      	mov	r1, r2
    8c74:	2000      	movs	r0, #0
    8c76:	f002 fe4d 	bl	b914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8c7a:	4905      	ldr	r1, [pc, #20]	; (8c90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc90>)
    8c7c:	200b      	movs	r0, #11
    8c7e:	6849      	ldr	r1, [r1, #4]
    8c80:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    8c84:	bd10      	pop	{r4, pc}
    8c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c8a:	f7ff bf49 	b.w	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
    8c8e:	0000      	.short	0x0000
    8c90:	20000150 	.word	0x20000150
    8c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c98:	4c2e      	ldr	r4, [pc, #184]	; (8d54 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd54>)
    8c9a:	2100      	movs	r1, #0
    8c9c:	6860      	ldr	r0, [r4, #4]
    8c9e:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    8ca2:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    8ca6:	2900      	cmp	r1, #0
    8ca8:	bf04      	itt	eq
    8caa:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    8cae:	2900      	cmpeq	r1, #0
    8cb0:	d042      	beq.n	8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8cb2:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
    8cb6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8cba:	e9d5 0100 	ldrd	r0, r1, [r5]
    8cbe:	ea81 0102 	eor.w	r1, r1, r2
    8cc2:	f04f 0701 	mov.w	r7, #1
    8cc6:	ea71 0000 	orns	r0, r1, r0
    8cca:	d035      	beq.n	8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8ccc:	f7f9 fd52 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8cd0:	e9d5 2300 	ldrd	r2, r3, [r5]
    8cd4:	1a80      	subs	r0, r0, r2
    8cd6:	eb71 0003 	sbcs.w	r0, r1, r3
    8cda:	d32d      	bcc.n	8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8cdc:	6860      	ldr	r0, [r4, #4]
    8cde:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
    8ce2:	f7fc fa37 	bl	5154 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8ce6:	491c      	ldr	r1, [pc, #112]	; (8d58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd58>)
    8ce8:	fba0 6501 	umull	r6, r5, r0, r1
    8cec:	f7f9 fd42 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8cf0:	1980      	adds	r0, r0, r6
    8cf2:	4169      	adcs	r1, r5
    8cf4:	e9c8 0100 	strd	r0, r1, [r8]
    8cf8:	6860      	ldr	r0, [r4, #4]
    8cfa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    8cfe:	2800      	cmp	r0, #0
    8d00:	bf1c      	itt	ne
    8d02:	2001      	movne	r0, #1
    8d04:	f7fc f946 	blne	4f94 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    8d08:	2101      	movs	r1, #1
    8d0a:	6860      	ldr	r0, [r4, #4]
    8d0c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
    8d10:	2a00      	cmp	r2, #0
    8d12:	bf1c      	itt	ne
    8d14:	f890 205c 	ldrbne.w	r2, [r0, #92]	; 0x5c
    8d18:	2a00      	cmpne	r2, #0
    8d1a:	d00d      	beq.n	8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8d1c:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    8d20:	f100 024a 	add.w	r2, r0, #74	; 0x4a
    8d24:	2b01      	cmp	r3, #1
    8d26:	d104      	bne.n	8d32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd32>
    8d28:	7952      	ldrb	r2, [r2, #5]
    8d2a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    8d2e:	2a40      	cmp	r2, #64	; 0x40
    8d30:	d008      	beq.n	8d44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd44>
    8d32:	304a      	adds	r0, #74	; 0x4a
    8d34:	f005 fb69 	bl	e40a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8d38:	6861      	ldr	r1, [r4, #4]
    8d3a:	2002      	movs	r0, #2
    8d3c:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    8d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d44:	f7fc f8d0 	bl	4ee8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8d48:	6861      	ldr	r1, [r4, #4]
    8d4a:	463a      	mov	r2, r7
    8d4c:	314a      	adds	r1, #74	; 0x4a
    8d4e:	f005 fb6d 	bl	e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8d52:	e7f1      	b.n	8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8d54:	20000150 	.word	0x20000150
    8d58:	000f4240 	.word	0x000f4240
    8d5c:	00008b59 	.word	0x00008b59
    8d60:	00008b21 	.word	0x00008b21
    8d64:	0000f47b 	.word	0x0000f47b
    8d68:	0000f47b 	.word	0x0000f47b
    8d6c:	0000f47b 	.word	0x0000f47b
    8d70:	00008b71 	.word	0x00008b71
    8d74:	0000f47b 	.word	0x0000f47b
    8d78:	0000f47b 	.word	0x0000f47b
    8d7c:	0000f47b 	.word	0x0000f47b
    8d80:	0000f47b 	.word	0x0000f47b
    8d84:	0000f47b 	.word	0x0000f47b
    8d88:	00008c61 	.word	0x00008c61
    8d8c:	0000f47b 	.word	0x0000f47b
    8d90:	0000f47b 	.word	0x0000f47b
    8d94:	0000f47b 	.word	0x0000f47b
    8d98:	000088e9 	.word	0x000088e9
    8d9c:	00000000 	.word	0x00000000
    8da0:	0000896d 	.word	0x0000896d
    8da4:	00008115 	.word	0x00008115
    8da8:	0000814d 	.word	0x0000814d
    8dac:	00008169 	.word	0x00008169
    8db0:	000081c5 	.word	0x000081c5
    8db4:	0000898d 	.word	0x0000898d
    8db8:	00008ad5 	.word	0x00008ad5
    8dbc:	00008d98 	.word	0x00008d98
    8dc0:	00008d9c 	.word	0x00008d9c
    8dc4:	00008d5c 	.word	0x00008d5c
    8dc8:	00008dac 	.word	0x00008dac
    8dcc:	00008da4 	.word	0x00008da4
    8dd0:	00008925 	.word	0x00008925
    8dd4:	000087a5 	.word	0x000087a5
    8dd8:	00008891 	.word	0x00008891
    8ddc:	0000f485 	.word	0x0000f485

00008de0 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY>:
    8de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8de4:	b08b      	sub	sp, #44	; 0x2c
    8de6:	4607      	mov	r7, r0
    8de8:	f7fb feb8 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8dec:	4682      	mov	sl, r0
    8dee:	f004 ffa7 	bl	dd40 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    8df2:	0005      	movs	r5, r0
    8df4:	d010      	beq.n	8e18 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x38>
    8df6:	4601      	mov	r1, r0
    8df8:	f04f 0801 	mov.w	r8, #1
    8dfc:	466a      	mov	r2, sp
    8dfe:	4650      	mov	r0, sl
    8e00:	f004 ffd1 	bl	dda6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    8e04:	4604      	mov	r4, r0
    8e06:	f7fb fea3 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8e0a:	42a0      	cmp	r0, r4
    8e0c:	d009      	beq.n	8e22 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x42>
    8e0e:	f240 1155 	movw	r1, #341	; 0x155
    8e12:	2033      	movs	r0, #51	; 0x33
    8e14:	f7fb f95c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e18:	f240 114b 	movw	r1, #331	; 0x14b
    8e1c:	2033      	movs	r0, #51	; 0x33
    8e1e:	f7fb f957 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e22:	a901      	add	r1, sp, #4
    8e24:	9800      	ldr	r0, [sp, #0]
    8e26:	f006 fcde 	bl	f7e6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    8e2a:	1d3c      	adds	r4, r7, #4
    8e2c:	4628      	mov	r0, r5
    8e2e:	f004 ff53 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8e32:	4683      	mov	fp, r0
    8e34:	f100 0112 	add.w	r1, r0, #18
    8e38:	221c      	movs	r2, #28
    8e3a:	4620      	mov	r0, r4
    8e3c:	f004 f926 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8e40:	f89b 001c 	ldrb.w	r0, [fp, #28]
    8e44:	4d3b      	ldr	r5, [pc, #236]	; (8f34 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x154>)
    8e46:	f010 0f10 	tst.w	r0, #16
    8e4a:	f04f 0600 	mov.w	r6, #0
    8e4e:	d00f      	beq.n	8e70 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x90>
    8e50:	f010 0f04 	tst.w	r0, #4
    8e54:	bf18      	it	ne
    8e56:	7226      	strbne	r6, [r4, #8]
    8e58:	d13c      	bne.n	8ed4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8e5a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    8e5e:	f104 001c 	add.w	r0, r4, #28
    8e62:	9904      	ldr	r1, [sp, #16]
    8e64:	f004 f912 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8e68:	f89d 0014 	ldrb.w	r0, [sp, #20]
    8e6c:	7220      	strb	r0, [r4, #8]
    8e6e:	e031      	b.n	8ed4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8e70:	7828      	ldrb	r0, [r5, #0]
    8e72:	f04f 0901 	mov.w	r9, #1
    8e76:	b928      	cbnz	r0, 8e84 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xa4>
    8e78:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    8e7c:	2825      	cmp	r0, #37	; 0x25
    8e7e:	bf38      	it	cc
    8e80:	f885 9000 	strbcc.w	r9, [r5]
    8e84:	7828      	ldrb	r0, [r5, #0]
    8e86:	2800      	cmp	r0, #0
    8e88:	bf1a      	itte	ne
    8e8a:	f89d 0004 	ldrbne.w	r0, [sp, #4]
    8e8e:	2802      	cmpne	r0, #2
    8e90:	7226      	strbeq	r6, [r4, #8]
    8e92:	d018      	beq.n	8ec6 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xe6>
    8e94:	78ab      	ldrb	r3, [r5, #2]
    8e96:	f04f 02e5 	mov.w	r2, #229	; 0xe5
    8e9a:	f104 011c 	add.w	r1, r4, #28
    8e9e:	9800      	ldr	r0, [sp, #0]
    8ea0:	f005 fcb2 	bl	e808 <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA>
    8ea4:	7220      	strb	r0, [r4, #8]
    8ea6:	78a9      	ldrb	r1, [r5, #2]
    8ea8:	4408      	add	r0, r1
    8eaa:	70a8      	strb	r0, [r5, #2]
    8eac:	9800      	ldr	r0, [sp, #0]
    8eae:	f005 fca3 	bl	e7f8 <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>
    8eb2:	78a9      	ldrb	r1, [r5, #2]
    8eb4:	4288      	cmp	r0, r1
    8eb6:	d006      	beq.n	8ec6 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xe6>
    8eb8:	7aa0      	ldrb	r0, [r4, #10]
    8eba:	f04f 0800 	mov.w	r8, #0
    8ebe:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    8ec2:	3020      	adds	r0, #32
    8ec4:	72a0      	strb	r0, [r4, #10]
    8ec6:	7aa0      	ldrb	r0, [r4, #10]
    8ec8:	f3c0 1141 	ubfx	r1, r0, #5, #2
    8ecc:	2901      	cmp	r1, #1
    8ece:	bf18      	it	ne
    8ed0:	702e      	strbne	r6, [r5, #0]
    8ed2:	d015      	beq.n	8f00 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x120>
    8ed4:	2005      	movs	r0, #5
    8ed6:	707e      	strb	r6, [r7, #1]
    8ed8:	7038      	strb	r0, [r7, #0]
    8eda:	f1b8 0f00 	cmp.w	r8, #0
    8ede:	bf04      	itt	eq
    8ee0:	b00b      	addeq	sp, #44	; 0x2c
    8ee2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ee6:	4650      	mov	r0, sl
    8ee8:	f004 ff11 	bl	dd0e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    8eec:	b1e0      	cbz	r0, 8f28 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x148>
    8eee:	2200      	movs	r2, #0
    8ef0:	4611      	mov	r1, r2
    8ef2:	4650      	mov	r0, sl
    8ef4:	f004 ff9a 	bl	de2c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    8ef8:	70ae      	strb	r6, [r5, #2]
    8efa:	b00b      	add	sp, #44	; 0x2c
    8efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f00:	782a      	ldrb	r2, [r5, #0]
    8f02:	2a00      	cmp	r2, #0
    8f04:	bf08      	it	eq
    8f06:	f885 9000 	strbeq.w	r9, [r5]
    8f0a:	d0e3      	beq.n	8ed4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8f0c:	2103      	movs	r1, #3
    8f0e:	2a01      	cmp	r2, #1
    8f10:	d002      	beq.n	8f18 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x138>
    8f12:	2a02      	cmp	r2, #2
    8f14:	d006      	beq.n	8f24 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x144>
    8f16:	e7dd      	b.n	8ed4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8f18:	f010 0f02 	tst.w	r0, #2
    8f1c:	bf1c      	itt	ne
    8f1e:	2002      	movne	r0, #2
    8f20:	7028      	strbne	r0, [r5, #0]
    8f22:	d1d7      	bne.n	8ed4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8f24:	7029      	strb	r1, [r5, #0]
    8f26:	e7d5      	b.n	8ed4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0xf4>
    8f28:	f240 1195 	movw	r1, #405	; 0x195
    8f2c:	2033      	movs	r0, #51	; 0x33
    8f2e:	f7fb f8cf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f32:	0000      	.short	0x0000
    8f34:	20000164 	.word	0x20000164

00008f38 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    8f38:	b510      	push	{r4, lr}
    8f3a:	b082      	sub	sp, #8
    8f3c:	f7fb fe0e 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8f40:	aa01      	add	r2, sp, #4
    8f42:	4669      	mov	r1, sp
    8f44:	f004 ff21 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8f48:	9800      	ldr	r0, [sp, #0]
    8f4a:	f004 fec5 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8f4e:	4604      	mov	r4, r0
    8f50:	221c      	movs	r2, #28
    8f52:	2100      	movs	r1, #0
    8f54:	3012      	adds	r0, #18
    8f56:	f004 f913 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8f5a:	207f      	movs	r0, #127	; 0x7f
    8f5c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    8f60:	21ff      	movs	r1, #255	; 0xff
    8f62:	f884 1020 	strb.w	r1, [r4, #32]
    8f66:	74e1      	strb	r1, [r4, #19]
    8f68:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    8f6c:	7f20      	ldrb	r0, [r4, #28]
    8f6e:	4905      	ldr	r1, [pc, #20]	; (8f84 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY+0x4c>)
    8f70:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    8f74:	3020      	adds	r0, #32
    8f76:	7720      	strb	r0, [r4, #28]
    8f78:	2000      	movs	r0, #0
    8f7a:	6088      	str	r0, [r1, #8]
    8f7c:	8088      	strh	r0, [r1, #4]
    8f7e:	b002      	add	sp, #8
    8f80:	bd10      	pop	{r4, pc}
    8f82:	0000      	.short	0x0000
    8f84:	20000164 	.word	0x20000164

00008f88 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    8f88:	b510      	push	{r4, lr}
    8f8a:	b082      	sub	sp, #8
    8f8c:	f7fb fde6 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8f90:	aa01      	add	r2, sp, #4
    8f92:	4669      	mov	r1, sp
    8f94:	f004 fef9 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8f98:	9800      	ldr	r0, [sp, #0]
    8f9a:	f004 fe9d 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8f9e:	4604      	mov	r4, r0
    8fa0:	221c      	movs	r2, #28
    8fa2:	2100      	movs	r1, #0
    8fa4:	3012      	adds	r0, #18
    8fa6:	f004 f8eb 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8faa:	207f      	movs	r0, #127	; 0x7f
    8fac:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    8fb0:	21ff      	movs	r1, #255	; 0xff
    8fb2:	f884 1020 	strb.w	r1, [r4, #32]
    8fb6:	74e1      	strb	r1, [r4, #19]
    8fb8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    8fbc:	7f20      	ldrb	r0, [r4, #28]
    8fbe:	4906      	ldr	r1, [pc, #24]	; (8fd8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x50>)
    8fc0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    8fc4:	3020      	adds	r0, #32
    8fc6:	7720      	strb	r0, [r4, #28]
    8fc8:	2000      	movs	r0, #0
    8fca:	6088      	str	r0, [r1, #8]
    8fcc:	7008      	strb	r0, [r1, #0]
    8fce:	8088      	strh	r0, [r1, #4]
    8fd0:	7048      	strb	r0, [r1, #1]
    8fd2:	b002      	add	sp, #8
    8fd4:	bd10      	pop	{r4, pc}
    8fd6:	0000      	.short	0x0000
    8fd8:	20000164 	.word	0x20000164

00008fdc <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>:
    8fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fe0:	b082      	sub	sp, #8
    8fe2:	f7fb fdbb 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8fe6:	aa01      	add	r2, sp, #4
    8fe8:	4669      	mov	r1, sp
    8fea:	f004 fece 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    8fee:	9800      	ldr	r0, [sp, #0]
    8ff0:	f004 fe72 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    8ff4:	7fc0      	ldrb	r0, [r0, #31]
    8ff6:	2500      	movs	r5, #0
    8ff8:	2800      	cmp	r0, #0
    8ffa:	bf04      	itt	eq
    8ffc:	b002      	addeq	sp, #8
    8ffe:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    9002:	4e2d      	ldr	r6, [pc, #180]	; (90b8 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xdc>)
    9004:	68b4      	ldr	r4, [r6, #8]
    9006:	b1bc      	cbz	r4, 9038 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x5c>
    9008:	7f20      	ldrb	r0, [r4, #28]
    900a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    900e:	3040      	adds	r0, #64	; 0x40
    9010:	7720      	strb	r0, [r4, #28]
    9012:	7877      	ldrb	r7, [r6, #1]
    9014:	7225      	strb	r5, [r4, #8]
    9016:	2202      	movs	r2, #2
    9018:	2100      	movs	r1, #0
    901a:	4620      	mov	r0, r4
    901c:	f7fc fc0c 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9020:	b137      	cbz	r7, 9030 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x54>
    9022:	7465      	strb	r5, [r4, #17]
    9024:	2202      	movs	r2, #2
    9026:	2100      	movs	r1, #0
    9028:	f104 0009 	add.w	r0, r4, #9
    902c:	f7fc fc04 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9030:	f7fc ff3a 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9034:	60b5      	str	r5, [r6, #8]
    9036:	7075      	strb	r5, [r6, #1]
    9038:	f7fb fd90 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    903c:	4607      	mov	r7, r0
    903e:	aa01      	add	r2, sp, #4
    9040:	4669      	mov	r1, sp
    9042:	f004 fea2 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    9046:	9800      	ldr	r0, [sp, #0]
    9048:	f004 fe46 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    904c:	4604      	mov	r4, r0
    904e:	7fc0      	ldrb	r0, [r0, #31]
    9050:	f04f 0800 	mov.w	r8, #0
    9054:	b190      	cbz	r0, 907c <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xa0>
    9056:	4638      	mov	r0, r7
    9058:	f004 fe40 	bl	dcdc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    905c:	b338      	cbz	r0, 90ae <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0xd2>
    905e:	f1b8 0f00 	cmp.w	r8, #0
    9062:	d007      	beq.n	9074 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x98>
    9064:	4620      	mov	r0, r4
    9066:	7205      	strb	r5, [r0, #8]
    9068:	2202      	movs	r2, #2
    906a:	2100      	movs	r1, #0
    906c:	f7fc fbe4 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9070:	f7fc ff1a 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9074:	80b5      	strh	r5, [r6, #4]
    9076:	b002      	add	sp, #8
    9078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    907c:	4638      	mov	r0, r7
    907e:	f004 fe2d 	bl	dcdc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9082:	2801      	cmp	r0, #1
    9084:	bf04      	itt	eq
    9086:	b002      	addeq	sp, #8
    9088:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    908c:	f7fb fd60 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9090:	4601      	mov	r1, r0
    9092:	2201      	movs	r2, #1
    9094:	4638      	mov	r0, r7
    9096:	f004 fdc7 	bl	dc28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    909a:	2800      	cmp	r0, #0
    909c:	bf18      	it	ne
    909e:	f04f 0801 	movne.w	r8, #1
    90a2:	d1d8      	bne.n	9056 <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y+0x7a>
    90a4:	f240 2156 	movw	r1, #598	; 0x256
    90a8:	2033      	movs	r0, #51	; 0x33
    90aa:	f7fb f811 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ae:	f240 215a 	movw	r1, #602	; 0x25a
    90b2:	2033      	movs	r0, #51	; 0x33
    90b4:	f7fb f80c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90b8:	20000164 	.word	0x20000164

000090bc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    90bc:	b570      	push	{r4, r5, r6, lr}
    90be:	4616      	mov	r6, r2
    90c0:	460c      	mov	r4, r1
    90c2:	4605      	mov	r5, r0
    90c4:	f005 fc1c 	bl	e900 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    90c8:	7460      	strb	r0, [r4, #17]
    90ca:	4628      	mov	r0, r5
    90cc:	f005 fc15 	bl	e8fa <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    90d0:	74a0      	strb	r0, [r4, #18]
    90d2:	1ceb      	adds	r3, r5, #3
    90d4:	f8df c080 	ldr.w	ip, [pc, #128]	; 9158 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x9c>
    90d8:	1d98      	adds	r0, r3, #6
    90da:	2100      	movs	r1, #0
    90dc:	2e07      	cmp	r6, #7
    90de:	d234      	bcs.n	914a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x8e>
    90e0:	e8df f006 	tbb	[pc, r6]
    90e4:	331b1304 	.word	0x331b1304
    90e8:	00043327 	.word	0x00043327
    90ec:	f89c 2000 	ldrb.w	r2, [ip]
    90f0:	7062      	strb	r2, [r4, #1]
    90f2:	e9c4 3101 	strd	r3, r1, [r4, #4]
    90f6:	786a      	ldrb	r2, [r5, #1]
    90f8:	1f92      	subs	r2, r2, #6
    90fa:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    90fe:	7422      	strb	r2, [r4, #16]
    9100:	d001      	beq.n	9106 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    9102:	60e0      	str	r0, [r4, #12]
    9104:	bd70      	pop	{r4, r5, r6, pc}
    9106:	60e1      	str	r1, [r4, #12]
    9108:	bd70      	pop	{r4, r5, r6, pc}
    910a:	f89c 2001 	ldrb.w	r2, [ip, #1]
    910e:	7062      	strb	r2, [r4, #1]
    9110:	e9c4 3001 	strd	r3, r0, [r4, #4]
    9114:	7421      	strb	r1, [r4, #16]
    9116:	60e1      	str	r1, [r4, #12]
    9118:	bd70      	pop	{r4, r5, r6, pc}
    911a:	f89c 2002 	ldrb.w	r2, [ip, #2]
    911e:	7062      	strb	r2, [r4, #1]
    9120:	e9c4 3101 	strd	r3, r1, [r4, #4]
    9124:	786a      	ldrb	r2, [r5, #1]
    9126:	1f92      	subs	r2, r2, #6
    9128:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    912c:	7422      	strb	r2, [r4, #16]
    912e:	d0ea      	beq.n	9106 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    9130:	e7e7      	b.n	9102 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    9132:	f89c 2003 	ldrb.w	r2, [ip, #3]
    9136:	7062      	strb	r2, [r4, #1]
    9138:	e9c4 3101 	strd	r3, r1, [r4, #4]
    913c:	786a      	ldrb	r2, [r5, #1]
    913e:	1f92      	subs	r2, r2, #6
    9140:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    9144:	7422      	strb	r2, [r4, #16]
    9146:	d0de      	beq.n	9106 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x4a>
    9148:	e7db      	b.n	9102 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    914a:	7061      	strb	r1, [r4, #1]
    914c:	6061      	str	r1, [r4, #4]
    914e:	60a1      	str	r1, [r4, #8]
    9150:	7421      	strb	r1, [r4, #16]
    9152:	60e1      	str	r1, [r4, #12]
    9154:	bd70      	pop	{r4, r5, r6, pc}
    9156:	0000      	.short	0x0000
    9158:	0001096c 	.word	0x0001096c

0000915c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    915c:	b570      	push	{r4, r5, r6, lr}
    915e:	4606      	mov	r6, r0
    9160:	f7f9 fb08 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9164:	4d29      	ldr	r5, [pc, #164]	; (920c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xb0>)
    9166:	69a9      	ldr	r1, [r5, #24]
    9168:	1a44      	subs	r4, r0, r1
    916a:	f7fe fc5d 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    916e:	7840      	ldrb	r0, [r0, #1]
    9170:	2200      	movs	r2, #0
    9172:	2e07      	cmp	r6, #7
    9174:	d245      	bcs.n	9202 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0xa6>
    9176:	e8df f006 	tbb	[pc, r6]
    917a:	4204      	.short	0x4204
    917c:	422e2742 	.word	0x422e2742
    9180:	0042      	.short	0x0042
    9182:	2808      	cmp	r0, #8
    9184:	d00d      	beq.n	91a2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x46>
    9186:	2804      	cmp	r0, #4
    9188:	d00f      	beq.n	91aa <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x4e>
    918a:	2802      	cmp	r0, #2
    918c:	d013      	beq.n	91b6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    918e:	2108      	movs	r1, #8
    9190:	2801      	cmp	r0, #1
    9192:	bf04      	itt	eq
    9194:	202a      	moveq	r0, #42	; 0x2a
    9196:	2328      	moveq	r3, #40	; 0x28
    9198:	d010      	beq.n	91bc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>
    919a:	21df      	movs	r1, #223	; 0xdf
    919c:	2005      	movs	r0, #5
    919e:	f7fa ff97 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91a2:	2140      	movs	r1, #64	; 0x40
    91a4:	2014      	movs	r0, #20
    91a6:	460a      	mov	r2, r1
    91a8:	e002      	b.n	91b0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    91aa:	2110      	movs	r1, #16
    91ac:	2014      	movs	r0, #20
    91ae:	222e      	movs	r2, #46	; 0x2e
    91b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
    91b4:	e002      	b.n	91bc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>
    91b6:	2104      	movs	r1, #4
    91b8:	2012      	movs	r0, #18
    91ba:	2318      	movs	r3, #24
    91bc:	441a      	add	r2, r3
    91be:	fb11 2000 	smlabb	r0, r1, r0, r2
    91c2:	b280      	uxth	r0, r0
    91c4:	3098      	adds	r0, #152	; 0x98
    91c6:	e008      	b.n	91da <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x7e>
    91c8:	f010 000c 	ands.w	r0, r0, #12
    91cc:	bf18      	it	ne
    91ce:	2028      	movne	r0, #40	; 0x28
    91d0:	f500 7057 	add.w	r0, r0, #860	; 0x35c
    91d4:	e001      	b.n	91da <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x7e>
    91d6:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    91da:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    91dc:	4404      	add	r4, r0
    91de:	39f4      	subs	r1, #244	; 0xf4
    91e0:	428c      	cmp	r4, r1
    91e2:	d309      	bcc.n	91f8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9c>
    91e4:	2600      	movs	r6, #0
    91e6:	f000 fbc3 	bl	9970 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    91ea:	b130      	cbz	r0, 91fa <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9e>
    91ec:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    91ee:	38f4      	subs	r0, #244	; 0xf4
    91f0:	4284      	cmp	r4, r0
    91f2:	bf28      	it	cs
    91f4:	2600      	movcs	r6, #0
    91f6:	d200      	bcs.n	91fa <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x9e>
    91f8:	2601      	movs	r6, #1
    91fa:	4630      	mov	r0, r6
    91fc:	bd70      	pop	{r4, r5, r6, pc}
    91fe:	2001      	movs	r0, #1
    9200:	bd70      	pop	{r4, r5, r6, pc}
    9202:	f240 5193 	movw	r1, #1427	; 0x593
    9206:	2035      	movs	r0, #53	; 0x35
    9208:	f7fa ff62 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    920c:	20000ef8 	.word	0x20000ef8

00009210 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY>:
    9210:	b510      	push	{r4, lr}
    9212:	b086      	sub	sp, #24
    9214:	f7fc fe48 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9218:	4c14      	ldr	r4, [pc, #80]	; (926c <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x5c>)
    921a:	7d20      	ldrb	r0, [r4, #20]
    921c:	b198      	cbz	r0, 9246 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x36>
    921e:	7860      	ldrb	r0, [r4, #1]
    9220:	b988      	cbnz	r0, 9246 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x36>
    9222:	2300      	movs	r3, #0
    9224:	461a      	mov	r2, r3
    9226:	4619      	mov	r1, r3
    9228:	4668      	mov	r0, sp
    922a:	f000 fc0b 	bl	9a44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    922e:	2800      	cmp	r0, #0
    9230:	bf04      	itt	eq
    9232:	2001      	moveq	r0, #1
    9234:	70a0      	strbeq	r0, [r4, #2]
    9236:	d006      	beq.n	9246 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x36>
    9238:	f7fe fbf6 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    923c:	7800      	ldrb	r0, [r0, #0]
    923e:	4669      	mov	r1, sp
    9240:	f7f8 fabe 	bl	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9244:	b168      	cbz	r0, 9262 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x52>
    9246:	7d20      	ldrb	r0, [r4, #20]
    9248:	2800      	cmp	r0, #0
    924a:	bf04      	itt	eq
    924c:	b006      	addeq	sp, #24
    924e:	bd10      	popeq	{r4, pc}
    9250:	f002 f8c6 	bl	b3e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9254:	f7f9 f8e6 	bl	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9258:	2000      	movs	r0, #0
    925a:	7520      	strb	r0, [r4, #20]
    925c:	7560      	strb	r0, [r4, #21]
    925e:	b006      	add	sp, #24
    9260:	bd10      	pop	{r4, pc}
    9262:	f640 2199 	movw	r1, #2713	; 0xa99
    9266:	2035      	movs	r0, #53	; 0x35
    9268:	f7fa ff32 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    926c:	20000ef8 	.word	0x20000ef8

00009270 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    9270:	b570      	push	{r4, r5, r6, lr}
    9272:	2268      	movs	r2, #104	; 0x68
    9274:	2100      	movs	r1, #0
    9276:	4813      	ldr	r0, [pc, #76]	; (92c4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x54>)
    9278:	f003 ff82 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    927c:	f7fe fbd4 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9280:	2120      	movs	r1, #32
    9282:	7001      	strb	r1, [r0, #0]
    9284:	4810      	ldr	r0, [pc, #64]	; (92c8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x58>)
    9286:	2100      	movs	r1, #0
    9288:	6001      	str	r1, [r0, #0]
    928a:	6041      	str	r1, [r0, #4]
    928c:	6081      	str	r1, [r0, #8]
    928e:	60c1      	str	r1, [r0, #12]
    9290:	480e      	ldr	r0, [pc, #56]	; (92cc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x5c>)
    9292:	6041      	str	r1, [r0, #4]
    9294:	6840      	ldr	r0, [r0, #4]
    9296:	f641 016a 	movw	r1, #6250	; 0x186a
    929a:	4288      	cmp	r0, r1
    929c:	d304      	bcc.n	92a8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>
    929e:	f640 412a 	movw	r1, #3114	; 0xc2a
    92a2:	2035      	movs	r0, #53	; 0x35
    92a4:	f7fa ff14 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92a8:	f000 f812 	bl	92d0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    92ac:	4d05      	ldr	r5, [pc, #20]	; (92c4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x54>)
    92ae:	f242 7410 	movw	r4, #10000	; 0x2710
    92b2:	10a0      	asrs	r0, r4, #2
    92b4:	6068      	str	r0, [r5, #4]
    92b6:	f006 fa9f 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    92ba:	306b      	adds	r0, #107	; 0x6b
    92bc:	b280      	uxth	r0, r0
    92be:	1a20      	subs	r0, r4, r0
    92c0:	60a8      	str	r0, [r5, #8]
    92c2:	bd70      	pop	{r4, r5, r6, pc}
    92c4:	20000ef8 	.word	0x20000ef8
    92c8:	20000ee8 	.word	0x20000ee8
    92cc:	20000170 	.word	0x20000170

000092d0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    92d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    92d4:	4f35      	ldr	r7, [pc, #212]	; (93ac <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xdc>)
    92d6:	b083      	sub	sp, #12
    92d8:	7838      	ldrb	r0, [r7, #0]
    92da:	2800      	cmp	r0, #0
    92dc:	bf18      	it	ne
    92de:	f000 f8e1 	blne	94a4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    92e2:	2001      	movs	r0, #1
    92e4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 93b0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xe0>
    92e8:	f888 0000 	strb.w	r0, [r8]
    92ec:	4669      	mov	r1, sp
    92ee:	2000      	movs	r0, #0
    92f0:	f004 fe9c 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    92f4:	2800      	cmp	r0, #0
    92f6:	bf04      	itt	eq
    92f8:	2500      	moveq	r5, #0
    92fa:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    92fe:	d02d      	beq.n	935c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x8c>
    9300:	e027      	b.n	9352 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x82>
    9302:	9802      	ldr	r0, [sp, #8]
    9304:	2800      	cmp	r0, #0
    9306:	bf1c      	itt	ne
    9308:	f890 1290 	ldrbne.w	r1, [r0, #656]	; 0x290
    930c:	2900      	cmpne	r1, #0
    930e:	d025      	beq.n	935c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x8c>
    9310:	8800      	ldrh	r0, [r0, #0]
    9312:	42b0      	cmp	r0, r6
    9314:	bf18      	it	ne
    9316:	f04f 0920 	movne.w	r9, #32
    931a:	d03f      	beq.n	939c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    931c:	2100      	movs	r1, #0
    931e:	f004 fe7b 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9322:	0004      	movs	r4, r0
    9324:	d020      	beq.n	9368 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x98>
    9326:	f894 0291 	ldrb.w	r0, [r4, #657]	; 0x291
    932a:	f7f8 ff3b 	bl	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    932e:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
    9332:	f894 0291 	ldrb.w	r0, [r4, #657]	; 0x291
    9336:	f7f8 ff13 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    933a:	b1d0      	cbz	r0, 9372 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xa2>
    933c:	f884 9291 	strb.w	r9, [r4, #657]	; 0x291
    9340:	f504 701c 	add.w	r0, r4, #624	; 0x270
    9344:	f000 ff1e 	bl	a184 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    9348:	4669      	mov	r1, sp
    934a:	2000      	movs	r0, #0
    934c:	f004 fe6e 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    9350:	b1f8      	cbz	r0, 9392 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc2>
    9352:	f240 2143 	movw	r1, #579	; 0x243
    9356:	2035      	movs	r0, #53	; 0x35
    9358:	f7fa feba 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    935c:	4668      	mov	r0, sp
    935e:	f7fb f8f5 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9362:	2800      	cmp	r0, #0
    9364:	d0cd      	beq.n	9302 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x32>
    9366:	e019      	b.n	939c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    9368:	f240 5144 	movw	r1, #1348	; 0x544
    936c:	2035      	movs	r0, #53	; 0x35
    936e:	f7fa feaf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9372:	f240 5133 	movw	r1, #1331	; 0x533
    9376:	2035      	movs	r0, #53	; 0x35
    9378:	f7fa feaa 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    937c:	9802      	ldr	r0, [sp, #8]
    937e:	2800      	cmp	r0, #0
    9380:	bf1c      	itt	ne
    9382:	f890 1290 	ldrbne.w	r1, [r0, #656]	; 0x290
    9386:	2900      	cmpne	r1, #0
    9388:	d003      	beq.n	9392 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc2>
    938a:	8800      	ldrh	r0, [r0, #0]
    938c:	42b0      	cmp	r0, r6
    938e:	d1c5      	bne.n	931c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x4c>
    9390:	e004      	b.n	939c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xcc>
    9392:	4668      	mov	r0, sp
    9394:	f7fb f8da 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9398:	2800      	cmp	r0, #0
    939a:	d0ef      	beq.n	937c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xac>
    939c:	f888 5000 	strb.w	r5, [r8]
    93a0:	f8a7 5064 	strh.w	r5, [r7, #100]	; 0x64
    93a4:	b003      	add	sp, #12
    93a6:	2000      	movs	r0, #0
    93a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    93ac:	20000ef8 	.word	0x20000ef8
    93b0:	20000ee8 	.word	0x20000ee8

000093b4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    93b4:	4901      	ldr	r1, [pc, #4]	; (93bc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    93b6:	7048      	strb	r0, [r1, #1]
    93b8:	4770      	bx	lr
    93ba:	0000      	.short	0x0000
    93bc:	20000ee8 	.word	0x20000ee8

000093c0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    93c0:	b570      	push	{r4, r5, r6, lr}
    93c2:	4605      	mov	r5, r0
    93c4:	480a      	ldr	r0, [pc, #40]	; (93f0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>)
    93c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    93ca:	fbb0 f4f1 	udiv	r4, r0, r1
    93ce:	f006 fa13 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    93d2:	306b      	adds	r0, #107	; 0x6b
    93d4:	b280      	uxth	r0, r0
    93d6:	4420      	add	r0, r4
    93d8:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    93dc:	4628      	mov	r0, r5
    93de:	f005 fba3 	bl	eb28 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    93e2:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
    93e6:	bf28      	it	cs
    93e8:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
    93ec:	b280      	uxth	r0, r0
    93ee:	bd70      	pop	{r4, r5, r6, pc}
    93f0:	000122f9 	.word	0x000122f9

000093f4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    93f4:	2900      	cmp	r1, #0
    93f6:	bf1c      	itt	ne
    93f8:	2011      	movne	r0, #17
    93fa:	4770      	bxne	lr
    93fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    93fe:	4c27      	ldr	r4, [pc, #156]	; (949c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa8>)
    9400:	4607      	mov	r7, r0
    9402:	b087      	sub	sp, #28
    9404:	7820      	ldrb	r0, [r4, #0]
    9406:	2800      	cmp	r0, #0
    9408:	bf1e      	ittt	ne
    940a:	200c      	movne	r0, #12
    940c:	b007      	addne	sp, #28
    940e:	bdf0      	popne	{r4, r5, r6, r7, pc}
    9410:	f7fe fb0a 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9414:	4606      	mov	r6, r0
    9416:	2000      	movs	r0, #0
    9418:	7060      	strb	r0, [r4, #1]
    941a:	2104      	movs	r1, #4
    941c:	7021      	strb	r1, [r4, #0]
    941e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    9422:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    9426:	4605      	mov	r5, r0
    9428:	f006 f9e6 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    942c:	306b      	adds	r0, #107	; 0x6b
    942e:	b281      	uxth	r1, r0
    9430:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    9434:	2000      	movs	r0, #0
    9436:	bf00      	nop
    9438:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    943c:	1c40      	adds	r0, r0, #1
    943e:	689b      	ldr	r3, [r3, #8]
    9440:	eb05 0c01 	add.w	ip, r5, r1
    9444:	b2c0      	uxtb	r0, r0
    9446:	eb03 050c 	add.w	r5, r3, ip
    944a:	4282      	cmp	r2, r0
    944c:	d2f4      	bcs.n	9438 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x44>
    944e:	2100      	movs	r1, #0
    9450:	4813      	ldr	r0, [pc, #76]	; (94a0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xac>)
    9452:	6525      	str	r5, [r4, #80]	; 0x50
    9454:	f7f8 ffbe 	bl	23d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    9458:	7030      	strb	r0, [r6, #0]
    945a:	2820      	cmp	r0, #32
    945c:	d014      	beq.n	9488 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x94>
    945e:	463b      	mov	r3, r7
    9460:	2200      	movs	r2, #0
    9462:	2101      	movs	r1, #1
    9464:	4668      	mov	r0, sp
    9466:	f000 faed 	bl	9a44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    946a:	b190      	cbz	r0, 9492 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x9e>
    946c:	7830      	ldrb	r0, [r6, #0]
    946e:	4669      	mov	r1, sp
    9470:	f7f8 f9a6 	bl	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9474:	2800      	cmp	r0, #0
    9476:	bf1e      	ittt	ne
    9478:	2000      	movne	r0, #0
    947a:	b007      	addne	sp, #28
    947c:	bdf0      	popne	{r4, r5, r6, r7, pc}
    947e:	f240 419a 	movw	r1, #1178	; 0x49a
    9482:	2035      	movs	r0, #53	; 0x35
    9484:	f7fa fe24 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9488:	f240 4197 	movw	r1, #1175	; 0x497
    948c:	2035      	movs	r0, #53	; 0x35
    948e:	f7fa fe1f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9492:	f240 4199 	movw	r1, #1177	; 0x499
    9496:	2035      	movs	r0, #53	; 0x35
    9498:	f7fa fe1a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    949c:	20000ef8 	.word	0x20000ef8
    94a0:	00009675 	.word	0x00009675

000094a4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    94a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94a8:	2600      	movs	r6, #0
    94aa:	f7fe fabd 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    94ae:	4c3f      	ldr	r4, [pc, #252]	; (95ac <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x108>)
    94b0:	4607      	mov	r7, r0
    94b2:	7820      	ldrb	r0, [r4, #0]
    94b4:	2804      	cmp	r0, #4
    94b6:	bf1f      	itttt	ne
    94b8:	7820      	ldrbne	r0, [r4, #0]
    94ba:	2805      	cmpne	r0, #5
    94bc:	200c      	movne	r0, #12
    94be:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    94c2:	f04f 0001 	mov.w	r0, #1
    94c6:	7060      	strb	r0, [r4, #1]
    94c8:	7d20      	ldrb	r0, [r4, #20]
    94ca:	f04f 0500 	mov.w	r5, #0
    94ce:	b1b0      	cbz	r0, 94fe <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x5a>
    94d0:	f3ef 8810 	mrs	r8, PRIMASK
    94d4:	b672      	cpsid	i
    94d6:	7d20      	ldrb	r0, [r4, #20]
    94d8:	2800      	cmp	r0, #0
    94da:	bf1c      	itt	ne
    94dc:	7d60      	ldrbne	r0, [r4, #21]
    94de:	2800      	cmpne	r0, #0
    94e0:	d009      	beq.n	94f6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    94e2:	f7fe fc83 	bl	7dec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    94e6:	7d20      	ldrb	r0, [r4, #20]
    94e8:	b128      	cbz	r0, 94f6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x52>
    94ea:	f001 ff79 	bl	b3e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    94ee:	f7f8 ff99 	bl	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    94f2:	7525      	strb	r5, [r4, #20]
    94f4:	7565      	strb	r5, [r4, #21]
    94f6:	f1b8 0f00 	cmp.w	r8, #0
    94fa:	d10e      	bne.n	951a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    94fc:	e00c      	b.n	9518 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x74>
    94fe:	7838      	ldrb	r0, [r7, #0]
    9500:	f7f8 fcf8 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    9504:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    9508:	04c0      	lsls	r0, r0, #19
    950a:	0cc0      	lsrs	r0, r0, #19
    950c:	d005      	beq.n	951a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    950e:	2100      	movs	r1, #0
    9510:	2003      	movs	r0, #3
    9512:	f7fe fa63 	bl	79dc <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    9516:	e000      	b.n	951a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x76>
    9518:	b662      	cpsie	i
    951a:	7838      	ldrb	r0, [r7, #0]
    951c:	f7f8 fe42 	bl	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9520:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    9524:	2800      	cmp	r0, #0
    9526:	7820      	ldrb	r0, [r4, #0]
    9528:	d02f      	beq.n	958a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xe6>
    952a:	2805      	cmp	r0, #5
    952c:	d004      	beq.n	9538 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x94>
    952e:	f240 3192 	movw	r1, #914	; 0x392
    9532:	2035      	movs	r0, #53	; 0x35
    9534:	f7fa fdcc 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9538:	6e20      	ldr	r0, [r4, #96]	; 0x60
    953a:	b120      	cbz	r0, 9546 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    953c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    9540:	f000 fdd6 	bl	a0f0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    9544:	e003      	b.n	954e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xaa>
    9546:	f104 0048 	add.w	r0, r4, #72	; 0x48
    954a:	f000 fe1b 	bl	a184 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    954e:	7065      	strb	r5, [r4, #1]
    9550:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    9554:	2800      	cmp	r0, #0
    9556:	bf18      	it	ne
    9558:	260c      	movne	r6, #12
    955a:	f7fe fb39 	bl	7bd0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    955e:	70a5      	strb	r5, [r4, #2]
    9560:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    9564:	62a5      	str	r5, [r4, #40]	; 0x28
    9566:	7820      	ldrb	r0, [r4, #0]
    9568:	2804      	cmp	r0, #4
    956a:	bf08      	it	eq
    956c:	f7ff fd36 	bleq	8fdc <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    9570:	7025      	strb	r5, [r4, #0]
    9572:	f7fe fa59 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9576:	4604      	mov	r4, r0
    9578:	7800      	ldrb	r0, [r0, #0]
    957a:	f7f8 fdf1 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    957e:	b178      	cbz	r0, 95a0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xfc>
    9580:	2020      	movs	r0, #32
    9582:	7020      	strb	r0, [r4, #0]
    9584:	4630      	mov	r0, r6
    9586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    958a:	2805      	cmp	r0, #5
    958c:	d1db      	bne.n	9546 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    958e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9590:	2800      	cmp	r0, #0
    9592:	d1d8      	bne.n	9546 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    9594:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9596:	f500 701c 	add.w	r0, r0, #624	; 0x270
    959a:	f000 fdf3 	bl	a184 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    959e:	e7d2      	b.n	9546 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0xa2>
    95a0:	f240 512b 	movw	r1, #1323	; 0x52b
    95a4:	2035      	movs	r0, #53	; 0x35
    95a6:	f7fa fd93 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95aa:	0000      	.short	0x0000
    95ac:	20000ef8 	.word	0x20000ef8

000095b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    95b0:	4801      	ldr	r0, [pc, #4]	; (95b8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    95b2:	7800      	ldrb	r0, [r0, #0]
    95b4:	4770      	bx	lr
    95b6:	0000      	.short	0x0000
    95b8:	20000ef8 	.word	0x20000ef8

000095bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    95bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    95be:	4c2c      	ldr	r4, [pc, #176]	; (9670 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb4>)
    95c0:	b083      	sub	sp, #12
    95c2:	7821      	ldrb	r1, [r4, #0]
    95c4:	b121      	cbz	r1, 95d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14>
    95c6:	f240 4151 	movw	r1, #1105	; 0x451
    95ca:	2035      	movs	r0, #53	; 0x35
    95cc:	f7fa fd80 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95d0:	2200      	movs	r2, #0
    95d2:	9200      	str	r2, [sp, #0]
    95d4:	9201      	str	r2, [sp, #4]
    95d6:	9202      	str	r2, [sp, #8]
    95d8:	7803      	ldrb	r3, [r0, #0]
    95da:	4615      	mov	r5, r2
    95dc:	f013 0f01 	tst.w	r3, #1
    95e0:	4611      	mov	r1, r2
    95e2:	466b      	mov	r3, sp
    95e4:	d004      	beq.n	95f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>
    95e6:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    95ea:	2501      	movs	r5, #1
    95ec:	9100      	str	r1, [sp, #0]
    95ee:	4629      	mov	r1, r5
    95f0:	f890 c000 	ldrb.w	ip, [r0]
    95f4:	f01c 0f02 	tst.w	ip, #2
    95f8:	d006      	beq.n	9608 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c>
    95fa:	e9d0 2c03 	ldrd	r2, ip, [r0, #12]
    95fe:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    9602:	f045 0502 	orr.w	r5, r5, #2
    9606:	1c49      	adds	r1, r1, #1
    9608:	f890 c000 	ldrb.w	ip, [r0]
    960c:	f01c 0f04 	tst.w	ip, #4
    9610:	d006      	beq.n	9620 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64>
    9612:	e9d0 2005 	ldrd	r2, r0, [r0, #20]
    9616:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    961a:	f045 0508 	orr.w	r5, r5, #8
    961e:	1c49      	adds	r1, r1, #1
    9620:	1e48      	subs	r0, r1, #1
    9622:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    9626:	461f      	mov	r7, r3
    9628:	2600      	movs	r6, #0
    962a:	6062      	str	r2, [r4, #4]
    962c:	f006 f8e4 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9630:	306b      	adds	r0, #107	; 0x6b
    9632:	b280      	uxth	r0, r0
    9634:	f015 0f01 	tst.w	r5, #1
    9638:	d003      	beq.n	9642 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x86>
    963a:	9900      	ldr	r1, [sp, #0]
    963c:	1a09      	subs	r1, r1, r0
    963e:	2601      	movs	r6, #1
    9640:	60a1      	str	r1, [r4, #8]
    9642:	f015 0f02 	tst.w	r5, #2
    9646:	d006      	beq.n	9656 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9a>
    9648:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
    964c:	eb04 0186 	add.w	r1, r4, r6, lsl #2
    9650:	1a12      	subs	r2, r2, r0
    9652:	1c76      	adds	r6, r6, #1
    9654:	608a      	str	r2, [r1, #8]
    9656:	f015 0f08 	tst.w	r5, #8
    965a:	d005      	beq.n	9668 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xac>
    965c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
    9660:	eb04 0286 	add.w	r2, r4, r6, lsl #2
    9664:	1a08      	subs	r0, r1, r0
    9666:	6090      	str	r0, [r2, #8]
    9668:	b003      	add	sp, #12
    966a:	2000      	movs	r0, #0
    966c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    966e:	0000      	.short	0x0000
    9670:	20000ef8 	.word	0x20000ef8
    9674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9678:	b087      	sub	sp, #28
    967a:	460d      	mov	r5, r1
    967c:	f7fe f9d4 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9680:	f8df 9240 	ldr.w	r9, [pc, #576]	; 98c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x308>
    9684:	2601      	movs	r6, #1
    9686:	4607      	mov	r7, r0
    9688:	f04f 0800 	mov.w	r8, #0
    968c:	f109 0410 	add.w	r4, r9, #16
    9690:	2d09      	cmp	r5, #9
    9692:	f080 8112 	bcs.w	98ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fe>
    9696:	e8df f005 	tbb	[pc, r5]
    969a:	8305      	.short	0x8305
    969c:	fca5aaaa 	.word	0xfca5aaaa
    96a0:	00fafbd3 	.word	0x00fafbd3
    96a4:	7526      	strb	r6, [r4, #20]
    96a6:	7860      	ldrb	r0, [r4, #1]
    96a8:	2800      	cmp	r0, #0
    96aa:	bf1c      	itt	ne
    96ac:	b007      	addne	sp, #28
    96ae:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96b2:	7838      	ldrb	r0, [r7, #0]
    96b4:	f7f7 ff90 	bl	15d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    96b8:	e9c4 0106 	strd	r0, r1, [r4, #24]
    96bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    96be:	4605      	mov	r5, r0
    96c0:	1a40      	subs	r0, r0, r1
    96c2:	6861      	ldr	r1, [r4, #4]
    96c4:	fbb0 f0f1 	udiv	r0, r0, r1
    96c8:	2800      	cmp	r0, #0
    96ca:	bf14      	ite	ne
    96cc:	f04f 0a01 	movne.w	sl, #1
    96d0:	f04f 0a00 	moveq.w	sl, #0
    96d4:	f8cd 8008 	str.w	r8, [sp, #8]
    96d8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    96dc:	2800      	cmp	r0, #0
    96de:	bf08      	it	eq
    96e0:	4641      	moveq	r1, r8
    96e2:	d026      	beq.n	9732 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x176>
    96e4:	f006 f888 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    96e8:	306b      	adds	r0, #107	; 0x6b
    96ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    96ec:	b283      	uxth	r3, r0
    96ee:	6862      	ldr	r2, [r4, #4]
    96f0:	1a68      	subs	r0, r5, r1
    96f2:	fbb0 f0f2 	udiv	r0, r0, r2
    96f6:	fb02 f000 	mul.w	r0, r2, r0
    96fa:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
    96fe:	1808      	adds	r0, r1, r0
    9700:	f10c 0c01 	add.w	ip, ip, #1
    9704:	1a28      	subs	r0, r5, r0
    9706:	f04f 0100 	mov.w	r1, #0
    970a:	f104 0208 	add.w	r2, r4, #8
    970e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    9712:	bf00      	nop
    9714:	f8d2 b000 	ldr.w	fp, [r2]
    9718:	449b      	add	fp, r3
    971a:	4583      	cmp	fp, r0
    971c:	d803      	bhi.n	9726 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    971e:	1c49      	adds	r1, r1, #1
    9720:	eba0 000b 	sub.w	r0, r0, fp
    9724:	b2c9      	uxtb	r1, r1
    9726:	1d12      	adds	r2, r2, #4
    9728:	f1ac 0c01 	sub.w	ip, ip, #1
    972c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
    9730:	d1f0      	bne.n	9714 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    9732:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    9736:	f88d 100c 	strb.w	r1, [sp, #12]
    973a:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    973e:	04c0      	lsls	r0, r0, #19
    9740:	0cc0      	lsrs	r0, r0, #19
    9742:	d00f      	beq.n	9764 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    9744:	6c60      	ldr	r0, [r4, #68]	; 0x44
    9746:	9000      	str	r0, [sp, #0]
    9748:	2003      	movs	r0, #3
    974a:	f88d 0004 	strb.w	r0, [sp, #4]
    974e:	f88d 800d 	strb.w	r8, [sp, #13]
    9752:	4668      	mov	r0, sp
    9754:	f7fe fa84 	bl	7c60 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    9758:	b1c8      	cbz	r0, 978e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d2>
    975a:	f44f 7141 	mov.w	r1, #772	; 0x304
    975e:	2035      	movs	r0, #53	; 0x35
    9760:	f7fa fcb6 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9764:	f1ba 0f00 	cmp.w	sl, #0
    9768:	bf14      	ite	ne
    976a:	f88d 8004 	strbne.w	r8, [sp, #4]
    976e:	f88d 6004 	strbeq.w	r6, [sp, #4]
    9772:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9774:	6861      	ldr	r1, [r4, #4]
    9776:	1a28      	subs	r0, r5, r0
    9778:	fbb0 f2f1 	udiv	r2, r0, r1
    977c:	fb01 0012 	mls	r0, r1, r2, r0
    9780:	2800      	cmp	r0, #0
    9782:	bf0c      	ite	eq
    9784:	2001      	moveq	r0, #1
    9786:	2000      	movne	r0, #0
    9788:	f88d 000d 	strb.w	r0, [sp, #13]
    978c:	e7e1      	b.n	9752 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    978e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    9790:	38e3      	subs	r0, #227	; 0xe3
    9792:	f8c9 000c 	str.w	r0, [r9, #12]
    9796:	f7f8 ff15 	bl	25c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    979a:	b007      	add	sp, #28
    979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97a0:	7860      	ldrb	r0, [r4, #1]
    97a2:	b190      	cbz	r0, 97ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20e>
    97a4:	f7fe fb22 	bl	7dec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    97a8:	7d20      	ldrb	r0, [r4, #20]
    97aa:	2800      	cmp	r0, #0
    97ac:	bf04      	itt	eq
    97ae:	b007      	addeq	sp, #28
    97b0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97b4:	f001 fe14 	bl	b3e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    97b8:	f7f8 fe34 	bl	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    97bc:	f884 8014 	strb.w	r8, [r4, #20]
    97c0:	f884 8015 	strb.w	r8, [r4, #21]
    97c4:	b007      	add	sp, #28
    97c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97ca:	7566      	strb	r6, [r4, #21]
    97cc:	f7fe fb08 	bl	7de0 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    97d0:	2800      	cmp	r0, #0
    97d2:	bf04      	itt	eq
    97d4:	b007      	addeq	sp, #28
    97d6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97da:	f240 3117 	movw	r1, #791	; 0x317
    97de:	2035      	movs	r0, #53	; 0x35
    97e0:	f7fa fc76 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97e4:	b007      	add	sp, #28
    97e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97ea:	f002 b959 	b.w	baa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    97ee:	783d      	ldrb	r5, [r7, #0]
    97f0:	f7fe f91a 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    97f4:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    97f8:	04c0      	lsls	r0, r0, #19
    97fa:	0cc0      	lsrs	r0, r0, #19
    97fc:	d005      	beq.n	980a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24e>
    97fe:	2101      	movs	r1, #1
    9800:	2003      	movs	r0, #3
    9802:	f7fe f8eb 	bl	79dc <sym_JH5ADKYUIEBFPMKUMAVM7RVFHSJKEQWWRBLQ2AQ>
    9806:	f7fc fb4f 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    980a:	2300      	movs	r3, #0
    980c:	2201      	movs	r2, #1
    980e:	4619      	mov	r1, r3
    9810:	4668      	mov	r0, sp
    9812:	f000 f917 	bl	9a44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x488>
    9816:	b168      	cbz	r0, 9834 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x278>
    9818:	4628      	mov	r0, r5
    981a:	4669      	mov	r1, sp
    981c:	f7f7 ffd0 	bl	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9820:	2800      	cmp	r0, #0
    9822:	bf1c      	itt	ne
    9824:	b007      	addne	sp, #28
    9826:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    982a:	f640 21b5 	movw	r1, #2741	; 0xab5
    982e:	2035      	movs	r0, #53	; 0x35
    9830:	f7fa fc4e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9834:	70a6      	strb	r6, [r4, #2]
    9836:	f000 f847 	bl	98c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x30c>
    983a:	b007      	add	sp, #28
    983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9840:	f8b7 0003 	ldrh.w	r0, [r7, #3]
    9844:	04c0      	lsls	r0, r0, #19
    9846:	0cc0      	lsrs	r0, r0, #19
    9848:	d01d      	beq.n	9886 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ca>
    984a:	7878      	ldrb	r0, [r7, #1]
    984c:	f010 0f0c 	tst.w	r0, #12
    9850:	d024      	beq.n	989c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    9852:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9856:	bb08      	cbnz	r0, 989c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    9858:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    985c:	2101      	movs	r1, #1
    985e:	f244 5036 	movw	r0, #17718	; 0x4536
    9862:	f7f7 fd8f 	bl	1384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9866:	b9c8      	cbnz	r0, 989c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e0>
    9868:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    986a:	f244 5036 	movw	r0, #17718	; 0x4536
    986e:	4401      	add	r1, r0
    9870:	63a1      	str	r1, [r4, #56]	; 0x38
    9872:	f8d9 100c 	ldr.w	r1, [r9, #12]
    9876:	4408      	add	r0, r1
    9878:	f8c9 000c 	str.w	r0, [r9, #12]
    987c:	b007      	add	sp, #28
    987e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9882:	f7f8 be9f 	b.w	25c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9886:	f000 f873 	bl	9970 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    988a:	2800      	cmp	r0, #0
    988c:	e002      	b.n	9894 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d8>
    988e:	e00f      	b.n	98b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    9890:	e009      	b.n	98a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ea>
    9892:	e012      	b.n	98ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fe>
    9894:	bf1c      	itt	ne
    9896:	b007      	addne	sp, #28
    9898:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    989c:	b007      	add	sp, #28
    989e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98a2:	f005 bde8 	b.w	f476 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    98a6:	b007      	add	sp, #28
    98a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98ac:	f000 b80c 	b.w	98c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x30c>
    98b0:	f240 3149 	movw	r1, #841	; 0x349
    98b4:	2035      	movs	r0, #53	; 0x35
    98b6:	f7fa fc0b 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ba:	f240 314d 	movw	r1, #845	; 0x34d
    98be:	2035      	movs	r0, #53	; 0x35
    98c0:	f7fa fc06 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98c4:	20000ee8 	.word	0x20000ee8
    98c8:	b570      	push	{r4, r5, r6, lr}
    98ca:	4c28      	ldr	r4, [pc, #160]	; (996c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b0>)
    98cc:	7820      	ldrb	r0, [r4, #0]
    98ce:	b170      	cbz	r0, 98ee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x332>
    98d0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    98d4:	4620      	mov	r0, r4
    98d6:	2500      	movs	r5, #0
    98d8:	2900      	cmp	r1, #0
    98da:	6e00      	ldr	r0, [r0, #96]	; 0x60
    98dc:	7821      	ldrb	r1, [r4, #0]
    98de:	d01b      	beq.n	9918 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x35c>
    98e0:	2905      	cmp	r1, #5
    98e2:	d009      	beq.n	98f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x33c>
    98e4:	f240 3192 	movw	r1, #914	; 0x392
    98e8:	2035      	movs	r0, #53	; 0x35
    98ea:	f7fa fbf1 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ee:	f240 21b7 	movw	r1, #695	; 0x2b7
    98f2:	2035      	movs	r0, #53	; 0x35
    98f4:	f7fa fbec 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98f8:	b120      	cbz	r0, 9904 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    98fa:	f104 0048 	add.w	r0, r4, #72	; 0x48
    98fe:	f000 fbf7 	bl	a0f0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    9902:	e003      	b.n	990c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    9904:	f104 0048 	add.w	r0, r4, #72	; 0x48
    9908:	f000 fc3c 	bl	a184 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    990c:	78a0      	ldrb	r0, [r4, #2]
    990e:	b188      	cbz	r0, 9934 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
    9910:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    9914:	b150      	cbz	r0, 992c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x370>
    9916:	e00d      	b.n	9934 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
    9918:	2905      	cmp	r1, #5
    991a:	bf08      	it	eq
    991c:	2800      	cmpeq	r0, #0
    991e:	d1f1      	bne.n	9904 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    9920:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9922:	f500 701c 	add.w	r0, r0, #624	; 0x270
    9926:	f000 fc2d 	bl	a184 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    992a:	e7eb      	b.n	9904 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x348>
    992c:	f7fe fa88 	bl	7e40 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    9930:	f7fc faba 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9934:	f7fe f94c 	bl	7bd0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    9938:	70a5      	strb	r5, [r4, #2]
    993a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    993e:	62a5      	str	r5, [r4, #40]	; 0x28
    9940:	7820      	ldrb	r0, [r4, #0]
    9942:	2804      	cmp	r0, #4
    9944:	bf08      	it	eq
    9946:	f7ff fb49 	bleq	8fdc <sym_VT32C45B7GWIM6JWNGEA5DKX5ROTAQOVT2QHK3Y>
    994a:	7025      	strb	r5, [r4, #0]
    994c:	f7fe f86c 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9950:	4604      	mov	r4, r0
    9952:	7800      	ldrb	r0, [r0, #0]
    9954:	f7f8 fc04 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9958:	2800      	cmp	r0, #0
    995a:	bf1e      	ittt	ne
    995c:	2020      	movne	r0, #32
    995e:	7020      	strbne	r0, [r4, #0]
    9960:	bd70      	popne	{r4, r5, r6, pc}
    9962:	f240 512b 	movw	r1, #1323	; 0x52b
    9966:	2035      	movs	r0, #53	; 0x35
    9968:	f7fa fbb2 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    996c:	20000ef8 	.word	0x20000ef8
    9970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9974:	f7f8 fefe 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9978:	4c30      	ldr	r4, [pc, #192]	; (9a3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x480>)
    997a:	4605      	mov	r5, r0
    997c:	460f      	mov	r7, r1
    997e:	7821      	ldrb	r1, [r4, #0]
    9980:	69a0      	ldr	r0, [r4, #24]
    9982:	2904      	cmp	r1, #4
    9984:	d109      	bne.n	999a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3de>
    9986:	6861      	ldr	r1, [r4, #4]
    9988:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    998a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    998e:	0049      	lsls	r1, r1, #1
    9990:	1a80      	subs	r0, r0, r2
    9992:	4288      	cmp	r0, r1
    9994:	bf38      	it	cc
    9996:	2602      	movcc	r6, #2
    9998:	d300      	bcc.n	999c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>
    999a:	2601      	movs	r6, #1
    999c:	4630      	mov	r0, r6
    999e:	f7f7 fdcf 	bl	1540 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    99a2:	2865      	cmp	r0, #101	; 0x65
    99a4:	d33a      	bcc.n	9a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    99a6:	f1b0 3fff 	cmp.w	r0, #4294967295
    99aa:	bf08      	it	eq
    99ac:	6be0      	ldreq	r0, [r4, #60]	; 0x3c
    99ae:	d021      	beq.n	99f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x438>
    99b0:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
    99b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    99b6:	eb0c 0100 	add.w	r1, ip, r0
    99ba:	428a      	cmp	r2, r1
    99bc:	bf98      	it	ls
    99be:	eba2 000c 	subls.w	r0, r2, ip
    99c2:	f1b5 013a 	subs.w	r1, r5, #58	; 0x3a
    99c6:	f147 33ff 	adc.w	r3, r7, #4294967295
    99ca:	4602      	mov	r2, r0
    99cc:	e9d4 070c 	ldrd	r0, r7, [r4, #48]	; 0x30
    99d0:	1a41      	subs	r1, r0, r1
    99d2:	eb67 0003 	sbc.w	r0, r7, r3
    99d6:	2700      	movs	r7, #0
    99d8:	46b8      	mov	r8, r7
    99da:	463b      	mov	r3, r7
    99dc:	1a7f      	subs	r7, r7, r1
    99de:	eb78 0700 	sbcs.w	r7, r8, r0
    99e2:	da05      	bge.n	99f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x434>
    99e4:	1a57      	subs	r7, r2, r1
    99e6:	eb73 0700 	sbcs.w	r7, r3, r0
    99ea:	bfa8      	it	ge
    99ec:	460a      	movge	r2, r1
    99ee:	4613      	mov	r3, r2
    99f0:	eb0c 0003 	add.w	r0, ip, r3
    99f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    99f6:	1a47      	subs	r7, r0, r1
    99f8:	f241 3088 	movw	r0, #5000	; 0x1388
    99fc:	4287      	cmp	r7, r0
    99fe:	bf88      	it	hi
    9a00:	f241 3788 	movwhi	r7, #5000	; 0x1388
    9a04:	f7f8 feb6 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9a08:	1b40      	subs	r0, r0, r5
    9a0a:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    9a0e:	4287      	cmp	r7, r0
    9a10:	d304      	bcc.n	9a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x460>
    9a12:	4631      	mov	r1, r6
    9a14:	4638      	mov	r0, r7
    9a16:	f7f7 fcb5 	bl	1384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9a1a:	b110      	cbz	r0, 9a22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x466>
    9a1c:	2000      	movs	r0, #0
    9a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    9a24:	4906      	ldr	r1, [pc, #24]	; (9a40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>)
    9a26:	4438      	add	r0, r7
    9a28:	63a0      	str	r0, [r4, #56]	; 0x38
    9a2a:	68c8      	ldr	r0, [r1, #12]
    9a2c:	4438      	add	r0, r7
    9a2e:	60c8      	str	r0, [r1, #12]
    9a30:	f7f8 fdc8 	bl	25c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9a34:	2001      	movs	r0, #1
    9a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a3a:	0000      	.short	0x0000
    9a3c:	20000ef8 	.word	0x20000ef8
    9a40:	20000ee8 	.word	0x20000ee8
    9a44:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a48:	b095      	sub	sp, #84	; 0x54
    9a4a:	4690      	mov	r8, r2
    9a4c:	4681      	mov	r9, r0
    9a4e:	f7fd ffeb 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9a52:	900b      	str	r0, [sp, #44]	; 0x2c
    9a54:	f7f8 fe8e 	bl	2774 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9a58:	f04f 0a00 	mov.w	sl, #0
    9a5c:	4efa      	ldr	r6, [pc, #1000]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9a5e:	9105      	str	r1, [sp, #20]
    9a60:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    9a64:	4607      	mov	r7, r0
    9a66:	4655      	mov	r5, sl
    9a68:	68b4      	ldr	r4, [r6, #8]
    9a6a:	f005 fec5 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9a6e:	306b      	adds	r0, #107	; 0x6b
    9a70:	b281      	uxth	r1, r0
    9a72:	f896 202f 	ldrb.w	r2, [r6, #47]	; 0x2f
    9a76:	2000      	movs	r0, #0
    9a78:	eb06 0380 	add.w	r3, r6, r0, lsl #2
    9a7c:	1c40      	adds	r0, r0, #1
    9a7e:	689b      	ldr	r3, [r3, #8]
    9a80:	eb05 0c01 	add.w	ip, r5, r1
    9a84:	b2c0      	uxtb	r0, r0
    9a86:	eb03 050c 	add.w	r5, r3, ip
    9a8a:	4282      	cmp	r2, r0
    9a8c:	d2f4      	bcs.n	9a78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    9a8e:	48ee      	ldr	r0, [pc, #952]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9a90:	6840      	ldr	r0, [r0, #4]
    9a92:	4285      	cmp	r5, r0
    9a94:	bf0c      	ite	eq
    9a96:	2101      	moveq	r1, #1
    9a98:	2100      	movne	r1, #0
    9a9a:	ea18 0f01 	tst.w	r8, r1
    9a9e:	9113      	str	r1, [sp, #76]	; 0x4c
    9aa0:	d008      	beq.n	9ab4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f8>
    9aa2:	49e9      	ldr	r1, [pc, #932]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9aa4:	780a      	ldrb	r2, [r1, #0]
    9aa6:	2a00      	cmp	r2, #0
    9aa8:	bf1a      	itte	ne
    9aaa:	f8b1 1064 	ldrhne.w	r1, [r1, #100]	; 0x64
    9aae:	2900      	cmpne	r1, #0
    9ab0:	2101      	moveq	r1, #1
    9ab2:	d001      	beq.n	9ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    9ab4:	f04f 0100 	mov.w	r1, #0
    9ab8:	9112      	str	r1, [sp, #72]	; 0x48
    9aba:	9916      	ldr	r1, [sp, #88]	; 0x58
    9abc:	2900      	cmp	r1, #0
    9abe:	d07d      	beq.n	9bbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x600>
    9ac0:	9905      	ldr	r1, [sp, #20]
    9ac2:	f517 60fa 	adds.w	r0, r7, #2000	; 0x7d0
    9ac6:	f141 0800 	adc.w	r8, r1, #0
    9aca:	9002      	str	r0, [sp, #8]
    9acc:	f000 fb04 	bl	a0d8 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>
    9ad0:	f000 fb8e 	bl	a1f0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    9ad4:	4606      	mov	r6, r0
    9ad6:	48dc      	ldr	r0, [pc, #880]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9ad8:	7800      	ldrb	r0, [r0, #0]
    9ada:	2805      	cmp	r0, #5
    9adc:	d140      	bne.n	9b60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    9ade:	4dda      	ldr	r5, [pc, #872]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9ae0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    9ae2:	f8d0 0278 	ldr.w	r0, [r0, #632]	; 0x278
    9ae6:	f000 fb69 	bl	a1bc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    9aea:	9000      	str	r0, [sp, #0]
    9aec:	42b0      	cmp	r0, r6
    9aee:	d01d      	beq.n	9b2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x570>
    9af0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    9af2:	9900      	ldr	r1, [sp, #0]
    9af4:	f500 701c 	add.w	r0, r0, #624	; 0x270
    9af8:	f000 fb1e 	bl	a138 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9afc:	2100      	movs	r1, #0
    9afe:	6629      	str	r1, [r5, #96]	; 0x60
    9b00:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
    9b04:	9d00      	ldr	r5, [sp, #0]
    9b06:	f1bb 0f00 	cmp.w	fp, #0
    9b0a:	d01c      	beq.n	9b46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    9b0c:	b32d      	cbz	r5, 9b5a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59e>
    9b0e:	f000 fadd 	bl	a0cc <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>
    9b12:	b1e8      	cbz	r0, 9b50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x594>
    9b14:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    9b18:	682a      	ldr	r2, [r5, #0]
    9b1a:	1812      	adds	r2, r2, r0
    9b1c:	eb41 000a 	adc.w	r0, r1, sl
    9b20:	e9cb 209c 	strd	r2, r0, [fp, #624]	; 0x270
    9b24:	8ba8      	ldrh	r0, [r5, #28]
    9b26:	f8ab 028c 	strh.w	r0, [fp, #652]	; 0x28c
    9b2a:	e019      	b.n	9b60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    9b2c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9b2e:	f501 711c 	add.w	r1, r1, #624	; 0x270
    9b32:	6629      	str	r1, [r5, #96]	; 0x60
    9b34:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9b36:	6d28      	ldr	r0, [r5, #80]	; 0x50
    9b38:	f8d1 1278 	ldr.w	r1, [r1, #632]	; 0x278
    9b3c:	4288      	cmp	r0, r1
    9b3e:	bf38      	it	cc
    9b40:	4608      	movcc	r0, r1
    9b42:	6528      	str	r0, [r5, #80]	; 0x50
    9b44:	e7dc      	b.n	9b00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x544>
    9b46:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    9b4a:	2035      	movs	r0, #53	; 0x35
    9b4c:	f7fa fac0 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b50:	f240 51ce 	movw	r1, #1486	; 0x5ce
    9b54:	2035      	movs	r0, #53	; 0x35
    9b56:	f7fa fabb 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b5a:	2000      	movs	r0, #0
    9b5c:	e9cb 009c 	strd	r0, r0, [fp, #624]	; 0x270
    9b60:	4db9      	ldr	r5, [pc, #740]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9b62:	4631      	mov	r1, r6
    9b64:	f105 0048 	add.w	r0, r5, #72	; 0x48
    9b68:	f000 fae6 	bl	a138 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9b6c:	2e00      	cmp	r6, #0
    9b6e:	bf1c      	itt	ne
    9b70:	8bb0      	ldrhne	r0, [r6, #28]
    9b72:	f8a5 0064 	strhne.w	r0, [r5, #100]	; 0x64
    9b76:	46ab      	mov	fp, r5
    9b78:	686d      	ldr	r5, [r5, #4]
    9b7a:	9a02      	ldr	r2, [sp, #8]
    9b7c:	bf08      	it	eq
    9b7e:	2000      	moveq	r0, #0
    9b80:	d011      	beq.n	9ba6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ea>
    9b82:	e9d6 1001 	ldrd	r1, r0, [r6, #4]
    9b86:	6833      	ldr	r3, [r6, #0]
    9b88:	e9cd 2800 	strd	r2, r8, [sp]
    9b8c:	1818      	adds	r0, r3, r0
    9b8e:	eb41 010a 	adc.w	r1, r1, sl
    9b92:	462a      	mov	r2, r5
    9b94:	f005 fe51 	bl	f83a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    9b98:	42a8      	cmp	r0, r5
    9b9a:	d904      	bls.n	9ba6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ea>
    9b9c:	f240 51e6 	movw	r1, #1510	; 0x5e6
    9ba0:	2035      	movs	r0, #53	; 0x35
    9ba2:	f7fa fa95 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ba6:	4605      	mov	r5, r0
    9ba8:	f000 fa9c 	bl	a0e4 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>
    9bac:	9902      	ldr	r1, [sp, #8]
    9bae:	4658      	mov	r0, fp
    9bb0:	194e      	adds	r6, r1, r5
    9bb2:	eb48 080a 	adc.w	r8, r8, sl
    9bb6:	f8db 1004 	ldr.w	r1, [fp, #4]
    9bba:	e000      	b.n	9bbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    9bbc:	e01d      	b.n	9bfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63e>
    9bbe:	1a72      	subs	r2, r6, r1
    9bc0:	eb68 010a 	sbc.w	r1, r8, sl
    9bc4:	e9c0 2112 	strd	r2, r1, [r0, #72]	; 0x48
    9bc8:	9918      	ldr	r1, [sp, #96]	; 0x60
    9bca:	b179      	cbz	r1, 9bec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x630>
    9bcc:	4608      	mov	r0, r1
    9bce:	f242 7110 	movw	r1, #10000	; 0x2710
    9bd2:	4348      	muls	r0, r1
    9bd4:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    9bd8:	1830      	adds	r0, r6, r0
    9bda:	eb48 010a 	adc.w	r1, r8, sl
    9bde:	e9c2 0100 	strd	r0, r1, [r2]
    9be2:	bf00      	nop
    9be4:	f04f 0b01 	mov.w	fp, #1
    9be8:	f000 b99a 	b.w	9f20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x964>
    9bec:	f04f 32ff 	mov.w	r2, #4294967295
    9bf0:	0851      	lsrs	r1, r2, #1
    9bf2:	6302      	str	r2, [r0, #48]	; 0x30
    9bf4:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
    9bf8:	e7f4      	b.n	9be4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    9bfa:	9912      	ldr	r1, [sp, #72]	; 0x48
    9bfc:	2900      	cmp	r1, #0
    9bfe:	d071      	beq.n	9ce4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    9c00:	f8df 8244 	ldr.w	r8, [pc, #580]	; 9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>
    9c04:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9c06:	9e05      	ldr	r6, [sp, #20]
    9c08:	f898 102e 	ldrb.w	r1, [r8, #46]	; 0x2e
    9c0c:	1d80      	adds	r0, r0, #6
    9c0e:	5c09      	ldrb	r1, [r1, r0]
    9c10:	2908      	cmp	r1, #8
    9c12:	d008      	beq.n	9c26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    9c14:	2904      	cmp	r1, #4
    9c16:	d00a      	beq.n	9c2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
    9c18:	2902      	cmp	r1, #2
    9c1a:	d00e      	beq.n	9c3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67e>
    9c1c:	2208      	movs	r2, #8
    9c1e:	2901      	cmp	r1, #1
    9c20:	d011      	beq.n	9c46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x68a>
    9c22:	f000 b98b 	b.w	9f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x980>
    9c26:	2240      	movs	r2, #64	; 0x40
    9c28:	2014      	movs	r0, #20
    9c2a:	4613      	mov	r3, r2
    9c2c:	e002      	b.n	9c34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x678>
    9c2e:	2210      	movs	r2, #16
    9c30:	2014      	movs	r0, #20
    9c32:	232e      	movs	r3, #46	; 0x2e
    9c34:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    9c38:	e009      	b.n	9c4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x692>
    9c3a:	2204      	movs	r2, #4
    9c3c:	2012      	movs	r0, #18
    9c3e:	4653      	mov	r3, sl
    9c40:	f04f 0c18 	mov.w	ip, #24
    9c44:	e003      	b.n	9c4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x692>
    9c46:	202a      	movs	r0, #42	; 0x2a
    9c48:	4653      	mov	r3, sl
    9c4a:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9c4e:	4463      	add	r3, ip
    9c50:	fb12 3000 	smlabb	r0, r2, r0, r3
    9c54:	b285      	uxth	r5, r0
    9c56:	4608      	mov	r0, r1
    9c58:	f001 fd0e 	bl	b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9c5c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9c60:	4401      	add	r1, r0
    9c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9c66:	fbb1 f0f0 	udiv	r0, r1, r0
    9c6a:	4428      	add	r0, r5
    9c6c:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    9c70:	f108 0030 	add.w	r0, r8, #48	; 0x30
    9c74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9c78:	e9d0 1000 	ldrd	r1, r0, [r0]
    9c7c:	4050      	eors	r0, r2
    9c7e:	ea70 0001 	orns	r0, r0, r1
    9c82:	d028      	beq.n	9cd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x71a>
    9c84:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    9c88:	950d      	str	r5, [sp, #52]	; 0x34
    9c8a:	f005 fdb5 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9c8e:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    9c92:	2001      	movs	r0, #1
    9c94:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9c98:	f005 fdae 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9c9c:	f500 7081 	add.w	r0, r0, #258	; 0x102
    9ca0:	b280      	uxth	r0, r0
    9ca2:	19c0      	adds	r0, r0, r7
    9ca4:	eb4a 0106 	adc.w	r1, sl, r6
    9ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9cac:	2002      	movs	r0, #2
    9cae:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9cb2:	a80c      	add	r0, sp, #48	; 0x30
    9cb4:	f7f7 ff78 	bl	1ba8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9cb8:	4602      	mov	r2, r0
    9cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9cbe:	e9d8 3c0c 	ldrd	r3, ip, [r8, #48]	; 0x30
    9cc2:	1940      	adds	r0, r0, r5
    9cc4:	eb41 010a 	adc.w	r1, r1, sl
    9cc8:	1a18      	subs	r0, r3, r0
    9cca:	eb6c 0001 	sbc.w	r0, ip, r1
    9cce:	b10a      	cbz	r2, 9cd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x718>
    9cd0:	2800      	cmp	r0, #0
    9cd2:	da00      	bge.n	9cd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x71a>
    9cd4:	2400      	movs	r4, #0
    9cd6:	463e      	mov	r6, r7
    9cd8:	46d3      	mov	fp, sl
    9cda:	f8dd 8014 	ldr.w	r8, [sp, #20]
    9cde:	f000 b91f 	b.w	9f20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x964>
    9ce2:	e7ff      	b.n	9ce4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    9ce4:	f1b8 0f00 	cmp.w	r8, #0
    9ce8:	d059      	beq.n	9d9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7e2>
    9cea:	4d57      	ldr	r5, [pc, #348]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9cec:	e9d5 1312 	ldrd	r1, r3, [r5, #72]	; 0x48
    9cf0:	1a7a      	subs	r2, r7, r1
    9cf2:	fbb2 f2f0 	udiv	r2, r2, r0
    9cf6:	fb00 f202 	mul.w	r2, r0, r2
    9cfa:	1889      	adds	r1, r1, r2
    9cfc:	eb43 020a 	adc.w	r2, r3, sl
    9d00:	180e      	adds	r6, r1, r0
    9d02:	eb42 000a 	adc.w	r0, r2, sl
    9d06:	9003      	str	r0, [sp, #12]
    9d08:	ebb6 0807 	subs.w	r8, r6, r7
    9d0c:	f005 fd74 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9d10:	f500 7081 	add.w	r0, r0, #258	; 0x102
    9d14:	b280      	uxth	r0, r0
    9d16:	4580      	cmp	r8, r0
    9d18:	da11      	bge.n	9d3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x782>
    9d1a:	6caa      	ldr	r2, [r5, #72]	; 0x48
    9d1c:	6a28      	ldr	r0, [r5, #32]
    9d1e:	6869      	ldr	r1, [r5, #4]
    9d20:	1a80      	subs	r0, r0, r2
    9d22:	fbb0 f0f1 	udiv	r0, r0, r1
    9d26:	fb01 f000 	mul.w	r0, r1, r0
    9d2a:	1810      	adds	r0, r2, r0
    9d2c:	1a30      	subs	r0, r6, r0
    9d2e:	fbb0 fbf1 	udiv	fp, r0, r1
    9d32:	4608      	mov	r0, r1
    9d34:	9903      	ldr	r1, [sp, #12]
    9d36:	1980      	adds	r0, r0, r6
    9d38:	eb4a 0101 	adc.w	r1, sl, r1
    9d3c:	e02c      	b.n	9d98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7dc>
    9d3e:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    9d42:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    9d44:	900d      	str	r0, [sp, #52]	; 0x34
    9d46:	f005 fd57 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9d4a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    9d4e:	2001      	movs	r0, #1
    9d50:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9d54:	e9d5 0212 	ldrd	r0, r2, [r5, #72]	; 0x48
    9d58:	6a29      	ldr	r1, [r5, #32]
    9d5a:	1a0b      	subs	r3, r1, r0
    9d5c:	6869      	ldr	r1, [r5, #4]
    9d5e:	fbb3 f3f1 	udiv	r3, r3, r1
    9d62:	fb01 f303 	mul.w	r3, r1, r3
    9d66:	18c3      	adds	r3, r0, r3
    9d68:	eb42 020a 	adc.w	r2, r2, sl
    9d6c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    9d70:	782a      	ldrb	r2, [r5, #0]
    9d72:	2a04      	cmp	r2, #4
    9d74:	d107      	bne.n	9d86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ca>
    9d76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    9d7a:	0052      	lsls	r2, r2, #1
    9d7c:	1a18      	subs	r0, r3, r0
    9d7e:	4290      	cmp	r0, r2
    9d80:	bf38      	it	cc
    9d82:	2002      	movcc	r0, #2
    9d84:	d300      	bcc.n	9d88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7cc>
    9d86:	2001      	movs	r0, #1
    9d88:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d8c:	a80c      	add	r0, sp, #48	; 0x30
    9d8e:	f004 fc32 	bl	e5f6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9d92:	4683      	mov	fp, r0
    9d94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9d98:	4606      	mov	r6, r0
    9d9a:	4688      	mov	r8, r1
    9d9c:	e0c0      	b.n	9f20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x964>
    9d9e:	4a2a      	ldr	r2, [pc, #168]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9da0:	a909      	add	r1, sp, #36	; 0x24
    9da2:	9103      	str	r1, [sp, #12]
    9da4:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
    9da8:	1a7b      	subs	r3, r7, r1
    9daa:	fbb3 f3f0 	udiv	r3, r3, r0
    9dae:	fb00 f003 	mul.w	r0, r0, r3
    9db2:	1808      	adds	r0, r1, r0
    9db4:	eb42 010a 	adc.w	r1, r2, sl
    9db8:	910c      	str	r1, [sp, #48]	; 0x30
    9dba:	9006      	str	r0, [sp, #24]
    9dbc:	1a3c      	subs	r4, r7, r0
    9dbe:	f7fd fe33 	bl	7a28 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9dc2:	4683      	mov	fp, r0
    9dc4:	f005 fd18 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9dc8:	f500 7081 	add.w	r0, r0, #258	; 0x102
    9dcc:	b280      	uxth	r0, r0
    9dce:	1825      	adds	r5, r4, r0
    9dd0:	2600      	movs	r6, #0
    9dd2:	462c      	mov	r4, r5
    9dd4:	f005 fd10 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    9dd8:	306b      	adds	r0, #107	; 0x6b
    9dda:	fa1f f880 	uxth.w	r8, r0
    9dde:	481a      	ldr	r0, [pc, #104]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9de0:	6840      	ldr	r0, [r0, #4]
    9de2:	42a0      	cmp	r0, r4
    9de4:	bf98      	it	ls
    9de6:	1a24      	subls	r4, r4, r0
    9de8:	4b17      	ldr	r3, [pc, #92]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9dea:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    9dee:	2800      	cmp	r0, #0
    9df0:	bf18      	it	ne
    9df2:	f103 0108 	addne.w	r1, r3, #8
    9df6:	d00a      	beq.n	9e0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x852>
    9df8:	680a      	ldr	r2, [r1, #0]
    9dfa:	4442      	add	r2, r8
    9dfc:	42a2      	cmp	r2, r4
    9dfe:	d802      	bhi.n	9e06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x84a>
    9e00:	1aa4      	subs	r4, r4, r2
    9e02:	1c72      	adds	r2, r6, #1
    9e04:	b2d6      	uxtb	r6, r2
    9e06:	1e40      	subs	r0, r0, #1
    9e08:	f101 0104 	add.w	r1, r1, #4
    9e0c:	d1f4      	bne.n	9df8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x83c>
    9e0e:	480e      	ldr	r0, [pc, #56]	; (9e48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x88c>)
    9e10:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    9e14:	900f      	str	r0, [sp, #60]	; 0x3c
    9e16:	6880      	ldr	r0, [r0, #8]
    9e18:	900d      	str	r0, [sp, #52]	; 0x34
    9e1a:	eb0b 0006 	add.w	r0, fp, r6
    9e1e:	7980      	ldrb	r0, [r0, #6]
    9e20:	2808      	cmp	r0, #8
    9e22:	d007      	beq.n	9e34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x878>
    9e24:	2804      	cmp	r0, #4
    9e26:	d009      	beq.n	9e3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x880>
    9e28:	2802      	cmp	r0, #2
    9e2a:	d00f      	beq.n	9e4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x890>
    9e2c:	2208      	movs	r2, #8
    9e2e:	2801      	cmp	r0, #1
    9e30:	d012      	beq.n	9e58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x89c>
    9e32:	e083      	b.n	9f3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x980>
    9e34:	2240      	movs	r2, #64	; 0x40
    9e36:	2114      	movs	r1, #20
    9e38:	4613      	mov	r3, r2
    9e3a:	e002      	b.n	9e42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x886>
    9e3c:	2210      	movs	r2, #16
    9e3e:	2114      	movs	r1, #20
    9e40:	232e      	movs	r3, #46	; 0x2e
    9e42:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    9e46:	e00b      	b.n	9e60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a4>
    9e48:	20000ef8 	.word	0x20000ef8
    9e4c:	2204      	movs	r2, #4
    9e4e:	2112      	movs	r1, #18
    9e50:	4653      	mov	r3, sl
    9e52:	f04f 0c18 	mov.w	ip, #24
    9e56:	e003      	b.n	9e60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a4>
    9e58:	212a      	movs	r1, #42	; 0x2a
    9e5a:	4653      	mov	r3, sl
    9e5c:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9e60:	4463      	add	r3, ip
    9e62:	fb12 3101 	smlabb	r1, r2, r1, r3
    9e66:	fa1f fb81 	uxth.w	fp, r1
    9e6a:	f001 fc05 	bl	b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9e6e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9e72:	4401      	add	r1, r0
    9e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9e78:	fbb1 f0f0 	udiv	r0, r1, r0
    9e7c:	eb0b 0100 	add.w	r1, fp, r0
    9e80:	1908      	adds	r0, r1, r4
    9e82:	990d      	ldr	r1, [sp, #52]	; 0x34
    9e84:	30f4      	adds	r0, #244	; 0xf4
    9e86:	4288      	cmp	r0, r1
    9e88:	d803      	bhi.n	9e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8d6>
    9e8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9e8c:	6880      	ldr	r0, [r0, #8]
    9e8e:	1b04      	subs	r4, r0, r4
    9e90:	e011      	b.n	9eb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8fa>
    9e92:	498c      	ldr	r1, [pc, #560]	; (a0c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb08>)
    9e94:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    9e98:	42b0      	cmp	r0, r6
    9e9a:	d918      	bls.n	9ece <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x912>
    9e9c:	1c70      	adds	r0, r6, #1
    9e9e:	b2c6      	uxtb	r6, r0
    9ea0:	6848      	ldr	r0, [r1, #4]
    9ea2:	42a8      	cmp	r0, r5
    9ea4:	d90e      	bls.n	9ec4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x908>
    9ea6:	eb01 0086 	add.w	r0, r1, r6, lsl #2
    9eaa:	6880      	ldr	r0, [r0, #8]
    9eac:	eb00 0508 	add.w	r5, r0, r8
    9eb0:	eb01 0086 	add.w	r0, r1, r6, lsl #2
    9eb4:	6884      	ldr	r4, [r0, #8]
    9eb6:	2c00      	cmp	r4, #0
    9eb8:	da19      	bge.n	9eee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x932>
    9eba:	f240 710c 	movw	r1, #1804	; 0x70c
    9ebe:	2035      	movs	r0, #53	; 0x35
    9ec0:	f7fa f906 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ec4:	f240 61e6 	movw	r1, #1766	; 0x6e6
    9ec8:	2035      	movs	r0, #53	; 0x35
    9eca:	f7fa f901 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ece:	6848      	ldr	r0, [r1, #4]
    9ed0:	462a      	mov	r2, r5
    9ed2:	4285      	cmp	r5, r0
    9ed4:	bf38      	it	cc
    9ed6:	4605      	movcc	r5, r0
    9ed8:	d3ea      	bcc.n	9eb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8f4>
    9eda:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    9ede:	bf38      	it	cc
    9ee0:	0045      	lslcc	r5, r0, #1
    9ee2:	d3e5      	bcc.n	9eb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8f4>
    9ee4:	f240 7103 	movw	r1, #1795	; 0x703
    9ee8:	2035      	movs	r0, #53	; 0x35
    9eea:	f7fa f8f1 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eee:	9803      	ldr	r0, [sp, #12]
    9ef0:	4b74      	ldr	r3, [pc, #464]	; (a0c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb08>)
    9ef2:	7006      	strb	r6, [r0, #0]
    9ef4:	9906      	ldr	r1, [sp, #24]
    9ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ef8:	194e      	adds	r6, r1, r5
    9efa:	eb40 080a 	adc.w	r8, r0, sl
    9efe:	e9d3 0c12 	ldrd	r0, ip, [r3, #72]	; 0x48
    9f02:	6999      	ldr	r1, [r3, #24]
    9f04:	685d      	ldr	r5, [r3, #4]
    9f06:	1a09      	subs	r1, r1, r0
    9f08:	fbb1 f1f5 	udiv	r1, r1, r5
    9f0c:	fb01 f105 	mul.w	r1, r1, r5
    9f10:	1840      	adds	r0, r0, r1
    9f12:	eb4c 010a 	adc.w	r1, ip, sl
    9f16:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    9f1a:	1a30      	subs	r0, r6, r0
    9f1c:	fbb0 fbf5 	udiv	fp, r0, r5
    9f20:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    9f24:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9f26:	4408      	add	r0, r1
    9f28:	7980      	ldrb	r0, [r0, #6]
    9f2a:	2808      	cmp	r0, #8
    9f2c:	d00a      	beq.n	9f44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x988>
    9f2e:	2804      	cmp	r0, #4
    9f30:	d00c      	beq.n	9f4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x990>
    9f32:	2802      	cmp	r0, #2
    9f34:	d010      	beq.n	9f58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x99c>
    9f36:	2308      	movs	r3, #8
    9f38:	2801      	cmp	r0, #1
    9f3a:	d013      	beq.n	9f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9a8>
    9f3c:	21df      	movs	r1, #223	; 0xdf
    9f3e:	2005      	movs	r0, #5
    9f40:	f7fa f8c6 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f44:	2340      	movs	r3, #64	; 0x40
    9f46:	2114      	movs	r1, #20
    9f48:	461a      	mov	r2, r3
    9f4a:	e002      	b.n	9f52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x996>
    9f4c:	2310      	movs	r3, #16
    9f4e:	2114      	movs	r1, #20
    9f50:	222e      	movs	r2, #46	; 0x2e
    9f52:	f44f 7ca8 	mov.w	ip, #336	; 0x150
    9f56:	e009      	b.n	9f6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    9f58:	2304      	movs	r3, #4
    9f5a:	2112      	movs	r1, #18
    9f5c:	4652      	mov	r2, sl
    9f5e:	f04f 0c18 	mov.w	ip, #24
    9f62:	e003      	b.n	9f6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    9f64:	212a      	movs	r1, #42	; 0x2a
    9f66:	4652      	mov	r2, sl
    9f68:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9f6c:	4462      	add	r2, ip
    9f6e:	fb13 2101 	smlabb	r1, r3, r1, r2
    9f72:	b28d      	uxth	r5, r1
    9f74:	f001 fb80 	bl	b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9f78:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9f7c:	4401      	add	r1, r0
    9f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9f82:	fbb1 f0f0 	udiv	r0, r1, r0
    9f86:	4428      	add	r0, r5
    9f88:	494e      	ldr	r1, [pc, #312]	; (a0c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb08>)
    9f8a:	30f4      	adds	r0, #244	; 0xf4
    9f8c:	9006      	str	r0, [sp, #24]
    9f8e:	e9d1 020c 	ldrd	r0, r2, [r1, #48]	; 0x30
    9f92:	1b80      	subs	r0, r0, r6
    9f94:	eb62 0508 	sbc.w	r5, r2, r8
    9f98:	2200      	movs	r2, #0
    9f9a:	4613      	mov	r3, r2
    9f9c:	1a12      	subs	r2, r2, r0
    9f9e:	eb73 0205 	sbcs.w	r2, r3, r5
    9fa2:	bfa8      	it	ge
    9fa4:	4650      	movge	r0, sl
    9fa6:	da05      	bge.n	9fb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9f8>
    9fa8:	1a22      	subs	r2, r4, r0
    9faa:	eb7a 0205 	sbcs.w	r2, sl, r5
    9fae:	bfa8      	it	ge
    9fb0:	4604      	movge	r4, r0
    9fb2:	4620      	mov	r0, r4
    9fb4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    9fb8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9fbc:	6892      	ldr	r2, [r2, #8]
    9fbe:	4282      	cmp	r2, r0
    9fc0:	bf98      	it	ls
    9fc2:	4610      	movls	r0, r2
    9fc4:	460c      	mov	r4, r1
    9fc6:	63c8      	str	r0, [r1, #60]	; 0x3c
    9fc8:	9812      	ldr	r0, [sp, #72]	; 0x48
    9fca:	bb30      	cbnz	r0, a01a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
    9fcc:	f1bb 0f00 	cmp.w	fp, #0
    9fd0:	d023      	beq.n	a01a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
    9fd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9fd6:	ea00 014b 	and.w	r1, r0, fp, lsl #1
    9fda:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
    9fde:	f004 fdae 	bl	eb3e <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY>
    9fe2:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    9fe6:	1a09      	subs	r1, r1, r0
    9fe8:	b20a      	sxth	r2, r1
    9fea:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    9fee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9ff0:	b141      	cbz	r1, a004 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa48>
    9ff2:	f8a1 228c 	strh.w	r2, [r1, #652]	; 0x28c
    9ff6:	e9d1 239c 	ldrd	r2, r3, [r1, #624]	; 0x270
    9ffa:	1812      	adds	r2, r2, r0
    9ffc:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    a000:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
    a004:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    a008:	ea4f 71e0 	mov.w	r1, r0, asr #31
    a00c:	1836      	adds	r6, r6, r0
    a00e:	eb48 0801 	adc.w	r8, r8, r1
    a012:	1810      	adds	r0, r2, r0
    a014:	4159      	adcs	r1, r3
    a016:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    a01a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a01c:	2800      	cmp	r0, #0
    a01e:	bf18      	it	ne
    a020:	e9c4 6806 	strdne	r6, r8, [r4, #24]
    a024:	e9c4 6808 	strd	r6, r8, [r4, #32]
    a028:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a02a:	2800      	cmp	r0, #0
    a02c:	bf14      	ite	ne
    a02e:	9806      	ldrne	r0, [sp, #24]
    a030:	6be0      	ldreq	r0, [r4, #60]	; 0x3c
    a032:	2501      	movs	r5, #1
    a034:	63a0      	str	r0, [r4, #56]	; 0x38
    a036:	f889 500b 	strb.w	r5, [r9, #11]
    a03a:	f005 fbdd 	bl	f7f8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    a03e:	f8a9 0008 	strh.w	r0, [r9, #8]
    a042:	7820      	ldrb	r0, [r4, #0]
    a044:	2804      	cmp	r0, #4
    a046:	d109      	bne.n	a05c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa0>
    a048:	6860      	ldr	r0, [r4, #4]
    a04a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a04c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    a050:	0041      	lsls	r1, r0, #1
    a052:	1ab0      	subs	r0, r6, r2
    a054:	4288      	cmp	r0, r1
    a056:	bf38      	it	cc
    a058:	2002      	movcc	r0, #2
    a05a:	d300      	bcc.n	a05e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa2>
    a05c:	2001      	movs	r0, #1
    a05e:	f889 000a 	strb.w	r0, [r9, #10]
    a062:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    a064:	f8c9 0004 	str.w	r0, [r9, #4]
    a068:	9812      	ldr	r0, [sp, #72]	; 0x48
    a06a:	2800      	cmp	r0, #0
    a06c:	bf04      	itt	eq
    a06e:	f889 a000 	strbeq.w	sl, [r9]
    a072:	e9c9 6804 	strdeq	r6, r8, [r9, #16]
    a076:	d01b      	beq.n	a0b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>
    a078:	f889 5000 	strb.w	r5, [r9]
    a07c:	e9d4 020c 	ldrd	r0, r2, [r4, #48]	; 0x30
    a080:	9905      	ldr	r1, [sp, #20]
    a082:	1bc0      	subs	r0, r0, r7
    a084:	eb62 0b01 	sbc.w	fp, r2, r1
    a088:	2100      	movs	r1, #0
    a08a:	460a      	mov	r2, r1
    a08c:	1a09      	subs	r1, r1, r0
    a08e:	eb72 010b 	sbcs.w	r1, r2, fp
    a092:	da08      	bge.n	a0a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaea>
    a094:	490c      	ldr	r1, [pc, #48]	; (a0c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb0c>)
    a096:	2200      	movs	r2, #0
    a098:	1a09      	subs	r1, r1, r0
    a09a:	eb72 010b 	sbcs.w	r1, r2, fp
    a09e:	bfac      	ite	ge
    a0a0:	4682      	movge	sl, r0
    a0a2:	f8df a024 	ldrlt.w	sl, [pc, #36]	; a0c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb0c>
    a0a6:	9806      	ldr	r0, [sp, #24]
    a0a8:	ebaa 0000 	sub.w	r0, sl, r0
    a0ac:	f8c9 0010 	str.w	r0, [r9, #16]
    a0b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    a0b2:	9806      	ldr	r0, [sp, #24]
    a0b4:	4281      	cmp	r1, r0
    a0b6:	bf2c      	ite	cs
    a0b8:	2001      	movcs	r0, #1
    a0ba:	2000      	movcc	r0, #0
    a0bc:	b019      	add	sp, #100	; 0x64
    a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0c2:	0000      	.short	0x0000
    a0c4:	20000ef8 	.word	0x20000ef8
    a0c8:	0f424000 	.word	0x0f424000

0000a0cc <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ>:
    a0cc:	4801      	ldr	r0, [pc, #4]	; (a0d4 <sym_IGTA6PI7IWAT3FITPB7BP2SXQCVYUZIL6KUR4HQ+0x8>)
    a0ce:	7900      	ldrb	r0, [r0, #4]
    a0d0:	4770      	bx	lr
    a0d2:	0000      	.short	0x0000
    a0d4:	20000178 	.word	0x20000178

0000a0d8 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY>:
    a0d8:	4901      	ldr	r1, [pc, #4]	; (a0e0 <sym_ZSU6ACTG4NRZY5LMD7252VV77IROBPEMBXGUMQY+0x8>)
    a0da:	2001      	movs	r0, #1
    a0dc:	7108      	strb	r0, [r1, #4]
    a0de:	4770      	bx	lr
    a0e0:	20000178 	.word	0x20000178

0000a0e4 <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI>:
    a0e4:	4901      	ldr	r1, [pc, #4]	; (a0ec <sym_FZ7B5CMVMTO6N57ATGF22R7LY5CJDD6SN6DKTMI+0x8>)
    a0e6:	2000      	movs	r0, #0
    a0e8:	7108      	strb	r0, [r1, #4]
    a0ea:	4770      	bx	lr
    a0ec:	20000178 	.word	0x20000178

0000a0f0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a0f0:	b510      	push	{r4, lr}
    a0f2:	6981      	ldr	r1, [r0, #24]
    a0f4:	b119      	cbz	r1, a0fe <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a0f6:	6882      	ldr	r2, [r0, #8]
    a0f8:	688b      	ldr	r3, [r1, #8]
    a0fa:	429a      	cmp	r2, r3
    a0fc:	d203      	bcs.n	a106 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a0fe:	21c7      	movs	r1, #199	; 0xc7
    a100:	2037      	movs	r0, #55	; 0x37
    a102:	f7f9 ffe5 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a106:	6942      	ldr	r2, [r0, #20]
    a108:	614a      	str	r2, [r1, #20]
    a10a:	6903      	ldr	r3, [r0, #16]
    a10c:	610b      	str	r3, [r1, #16]
    a10e:	2a00      	cmp	r2, #0
    a110:	bf12      	itee	ne
    a112:	6111      	strne	r1, [r2, #16]
    a114:	4a07      	ldreq	r2, [pc, #28]	; (a134 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x44>)
    a116:	6011      	streq	r1, [r2, #0]
    a118:	690a      	ldr	r2, [r1, #16]
    a11a:	2a00      	cmp	r2, #0
    a11c:	bf08      	it	eq
    a11e:	2000      	moveq	r0, #0
    a120:	d005      	beq.n	a12e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3e>
    a122:	6151      	str	r1, [r2, #20]
    a124:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    a128:	4410      	add	r0, r2
    a12a:	688a      	ldr	r2, [r1, #8]
    a12c:	1a80      	subs	r0, r0, r2
    a12e:	60c8      	str	r0, [r1, #12]
    a130:	bd10      	pop	{r4, pc}
    a132:	0000      	.short	0x0000
    a134:	20000178 	.word	0x20000178

0000a138 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a138:	b510      	push	{r4, lr}
    a13a:	2300      	movs	r3, #0
    a13c:	6141      	str	r1, [r0, #20]
    a13e:	b1c1      	cbz	r1, a172 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a140:	690a      	ldr	r2, [r1, #16]
    a142:	6108      	str	r0, [r1, #16]
    a144:	6102      	str	r2, [r0, #16]
    a146:	2a00      	cmp	r2, #0
    a148:	bf18      	it	ne
    a14a:	6150      	strne	r0, [r2, #20]
    a14c:	6941      	ldr	r1, [r0, #20]
    a14e:	60c3      	str	r3, [r0, #12]
    a150:	2900      	cmp	r1, #0
    a152:	bf08      	it	eq
    a154:	bd10      	popeq	{r4, pc}
    a156:	68ca      	ldr	r2, [r1, #12]
    a158:	b17a      	cbz	r2, a17a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    a15a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    a15e:	4562      	cmp	r2, ip
    a160:	bf24      	itt	cs
    a162:	eba2 020c 	subcs.w	r2, r2, ip
    a166:	60c2      	strcs	r2, [r0, #12]
    a168:	d207      	bcs.n	a17a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x42>
    a16a:	212a      	movs	r1, #42	; 0x2a
    a16c:	2037      	movs	r0, #55	; 0x37
    a16e:	f7f9 ffaf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a172:	4903      	ldr	r1, [pc, #12]	; (a180 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x48>)
    a174:	6103      	str	r3, [r0, #16]
    a176:	6008      	str	r0, [r1, #0]
    a178:	e7e8      	b.n	a14c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x14>
    a17a:	60cb      	str	r3, [r1, #12]
    a17c:	bd10      	pop	{r4, pc}
    a17e:	0000      	.short	0x0000
    a180:	20000178 	.word	0x20000178

0000a184 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a184:	6941      	ldr	r1, [r0, #20]
    a186:	b149      	cbz	r1, a19c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a188:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a18c:	441a      	add	r2, r3
    a18e:	68cb      	ldr	r3, [r1, #12]
    a190:	441a      	add	r2, r3
    a192:	60ca      	str	r2, [r1, #12]
    a194:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    a198:	6111      	str	r1, [r2, #16]
    a19a:	e002      	b.n	a1a2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a19c:	4a06      	ldr	r2, [pc, #24]	; (a1b8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a19e:	6901      	ldr	r1, [r0, #16]
    a1a0:	6011      	str	r1, [r2, #0]
    a1a2:	6901      	ldr	r1, [r0, #16]
    a1a4:	6940      	ldr	r0, [r0, #20]
    a1a6:	2900      	cmp	r1, #0
    a1a8:	bf1c      	itt	ne
    a1aa:	6148      	strne	r0, [r1, #20]
    a1ac:	4770      	bxne	lr
    a1ae:	2800      	cmp	r0, #0
    a1b0:	bf1c      	itt	ne
    a1b2:	2100      	movne	r1, #0
    a1b4:	60c1      	strne	r1, [r0, #12]
    a1b6:	4770      	bx	lr
    a1b8:	20000178 	.word	0x20000178

0000a1bc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a1bc:	490b      	ldr	r1, [pc, #44]	; (a1ec <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a1be:	4684      	mov	ip, r0
    a1c0:	2000      	movs	r0, #0
    a1c2:	6809      	ldr	r1, [r1, #0]
    a1c4:	4602      	mov	r2, r0
    a1c6:	1e43      	subs	r3, r0, #1
    a1c8:	b169      	cbz	r1, a1e6 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2a>
    a1ca:	68ca      	ldr	r2, [r1, #12]
    a1cc:	4562      	cmp	r2, ip
    a1ce:	bf28      	it	cs
    a1d0:	4293      	cmpcs	r3, r2
    a1d2:	bf84      	itt	hi
    a1d4:	4613      	movhi	r3, r2
    a1d6:	4608      	movhi	r0, r1
    a1d8:	460a      	mov	r2, r1
    a1da:	6909      	ldr	r1, [r1, #16]
    a1dc:	2900      	cmp	r1, #0
    a1de:	d1f4      	bne.n	a1ca <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0xe>
    a1e0:	2800      	cmp	r0, #0
    a1e2:	bf18      	it	ne
    a1e4:	4770      	bxne	lr
    a1e6:	4610      	mov	r0, r2
    a1e8:	4770      	bx	lr
    a1ea:	0000      	.short	0x0000
    a1ec:	20000178 	.word	0x20000178

0000a1f0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a1f0:	4805      	ldr	r0, [pc, #20]	; (a208 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x18>)
    a1f2:	6801      	ldr	r1, [r0, #0]
    a1f4:	2000      	movs	r0, #0
    a1f6:	2900      	cmp	r1, #0
    a1f8:	bf08      	it	eq
    a1fa:	4770      	bxeq	lr
    a1fc:	4608      	mov	r0, r1
    a1fe:	6909      	ldr	r1, [r1, #16]
    a200:	2900      	cmp	r1, #0
    a202:	d1fb      	bne.n	a1fc <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a204:	4770      	bx	lr
    a206:	0000      	.short	0x0000
    a208:	20000178 	.word	0x20000178

0000a20c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a20c:	4802      	ldr	r0, [pc, #8]	; (a218 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0xc>)
    a20e:	2100      	movs	r1, #0
    a210:	6001      	str	r1, [r0, #0]
    a212:	6041      	str	r1, [r0, #4]
    a214:	4770      	bx	lr
    a216:	0000      	.short	0x0000
    a218:	20000178 	.word	0x20000178

0000a21c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a21c:	4904      	ldr	r1, [pc, #16]	; (a230 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x14>)
    a21e:	2000      	movs	r0, #0
    a220:	680a      	ldr	r2, [r1, #0]
    a222:	2a00      	cmp	r2, #0
    a224:	bf12      	itee	ne
    a226:	200c      	movne	r0, #12
    a228:	2200      	moveq	r2, #0
    a22a:	604a      	streq	r2, [r1, #4]
    a22c:	4770      	bx	lr
    a22e:	0000      	.short	0x0000
    a230:	20000178 	.word	0x20000178

0000a234 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a234:	4903      	ldr	r1, [pc, #12]	; (a244 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a236:	884a      	ldrh	r2, [r1, #2]
    a238:	8002      	strh	r2, [r0, #0]
    a23a:	7809      	ldrb	r1, [r1, #0]
    a23c:	7081      	strb	r1, [r0, #2]
    a23e:	2000      	movs	r0, #0
    a240:	4770      	bx	lr
    a242:	0000      	.short	0x0000
    a244:	2000162c 	.word	0x2000162c

0000a248 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    a248:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a24c:	460e      	mov	r6, r1
    a24e:	4605      	mov	r5, r0
    a250:	7807      	ldrb	r7, [r0, #0]
    a252:	f006 f83f 	bl	102d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    a256:	2800      	cmp	r0, #0
    a258:	d10a      	bne.n	a270 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a25a:	4628      	mov	r0, r5
    a25c:	f006 f800 	bl	10260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a260:	2800      	cmp	r0, #0
    a262:	d105      	bne.n	a270 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a264:	2002      	movs	r0, #2
    a266:	f7fa f909 	bl	447c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    a26a:	4287      	cmp	r7, r0
    a26c:	d302      	bcc.n	a274 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    a26e:	2007      	movs	r0, #7
    a270:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a274:	2102      	movs	r1, #2
    a276:	4638      	mov	r0, r7
    a278:	f003 fece 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a27c:	0004      	movs	r4, r0
    a27e:	d003      	beq.n	a288 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x40>
    a280:	f004 ffe6 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a284:	bb70      	cbnz	r0, a2e4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9c>
    a286:	e00c      	b.n	a2a2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    a288:	2200      	movs	r2, #0
    a28a:	2102      	movs	r1, #2
    a28c:	4638      	mov	r0, r7
    a28e:	f003 feb9 	bl	e004 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a292:	0004      	movs	r4, r0
    a294:	d011      	beq.n	a2ba <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    a296:	4826      	ldr	r0, [pc, #152]	; (a330 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe8>)
    a298:	f990 1000 	ldrsb.w	r1, [r0]
    a29c:	4620      	mov	r0, r4
    a29e:	f004 fc91 	bl	ebc4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a2a2:	7828      	ldrb	r0, [r5, #0]
    a2a4:	2103      	movs	r1, #3
    a2a6:	f003 feb7 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a2aa:	b1e8      	cbz	r0, a2e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    a2ac:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    a2b0:	b1d0      	cbz	r0, a2e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    a2b2:	7868      	ldrb	r0, [r5, #1]
    a2b4:	07c1      	lsls	r1, r0, #31
    a2b6:	d10b      	bne.n	a2d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x88>
    a2b8:	e004      	b.n	a2c4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    a2ba:	f241 215a 	movw	r1, #4698	; 0x125a
    a2be:	2039      	movs	r0, #57	; 0x39
    a2c0:	f7f9 ff06 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2c4:	0781      	lsls	r1, r0, #30
    a2c6:	d403      	bmi.n	a2d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x88>
    a2c8:	06c1      	lsls	r1, r0, #27
    a2ca:	d401      	bmi.n	a2d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x88>
    a2cc:	0680      	lsls	r0, r0, #26
    a2ce:	d501      	bpl.n	a2d4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8c>
    a2d0:	2012      	movs	r0, #18
    a2d2:	e7cd      	b.n	a270 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a2d4:	4620      	mov	r0, r4
    a2d6:	f004 fdbf 	bl	ee58 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a2da:	f005 ff56 	bl	1018a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x52>
    a2de:	7da9      	ldrb	r1, [r5, #22]
    a2e0:	4288      	cmp	r0, r1
    a2e2:	d001      	beq.n	a2e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    a2e4:	200c      	movs	r0, #12
    a2e6:	e7c3      	b.n	a270 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a2e8:	4620      	mov	r0, r4
    a2ea:	f004 fda1 	bl	ee30 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a2ee:	7030      	strb	r0, [r6, #0]
    a2f0:	74e8      	strb	r0, [r5, #19]
    a2f2:	4629      	mov	r1, r5
    a2f4:	4620      	mov	r0, r4
    a2f6:	f7fb ff95 	bl	6224 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a2fa:	4606      	mov	r6, r0
    a2fc:	7e68      	ldrb	r0, [r5, #25]
    a2fe:	b1a0      	cbz	r0, a32a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe2>
    a300:	b99e      	cbnz	r6, a32a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe2>
    a302:	2200      	movs	r2, #0
    a304:	4668      	mov	r0, sp
    a306:	6c61      	ldr	r1, [r4, #68]	; 0x44
    a308:	f003 ff5a 	bl	e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a30c:	2200      	movs	r2, #0
    a30e:	2101      	movs	r1, #1
    a310:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a312:	f003 ffce 	bl	e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a316:	2204      	movs	r2, #4
    a318:	4668      	mov	r0, sp
    a31a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    a31c:	f003 ff50 	bl	e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a320:	2200      	movs	r2, #0
    a322:	4611      	mov	r1, r2
    a324:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a326:	f003 ffc4 	bl	e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a32a:	4630      	mov	r0, r6
    a32c:	e7a0      	b.n	a270 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a32e:	0000      	.short	0x0000
    a330:	20000180 	.word	0x20000180

0000a334 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a334:	7801      	ldrb	r1, [r0, #0]
    a336:	b171      	cbz	r1, a356 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a338:	7841      	ldrb	r1, [r0, #1]
    a33a:	b161      	cbz	r1, a356 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a33c:	8841      	ldrh	r1, [r0, #2]
    a33e:	291b      	cmp	r1, #27
    a340:	d309      	bcc.n	a356 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a342:	8881      	ldrh	r1, [r0, #4]
    a344:	291b      	cmp	r1, #27
    a346:	d306      	bcc.n	a356 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a348:	4904      	ldr	r1, [pc, #16]	; (a35c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a34a:	6802      	ldr	r2, [r0, #0]
    a34c:	600a      	str	r2, [r1, #0]
    a34e:	8880      	ldrh	r0, [r0, #4]
    a350:	8088      	strh	r0, [r1, #4]
    a352:	2000      	movs	r0, #0
    a354:	4770      	bx	lr
    a356:	2012      	movs	r0, #18
    a358:	4770      	bx	lr
    a35a:	0000      	.short	0x0000
    a35c:	2000162c 	.word	0x2000162c

0000a360 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a360:	6800      	ldr	r0, [r0, #0]
    a362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    a366:	d303      	bcc.n	a370 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
    a368:	4902      	ldr	r1, [pc, #8]	; (a374 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
    a36a:	6088      	str	r0, [r1, #8]
    a36c:	2000      	movs	r0, #0
    a36e:	4770      	bx	lr
    a370:	2012      	movs	r0, #18
    a372:	4770      	bx	lr
    a374:	2000162c 	.word	0x2000162c

0000a378 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    a378:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a37a:	4605      	mov	r5, r0
    a37c:	7800      	ldrb	r0, [r0, #0]
    a37e:	b198      	cbz	r0, a3a8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    a380:	4668      	mov	r0, sp
    a382:	f7f9 fd13 	bl	3dac <mpsl_fem_pa_is_configured>
    a386:	f89d 0000 	ldrb.w	r0, [sp]
    a38a:	b108      	cbz	r0, a390 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x18>
    a38c:	2401      	movs	r4, #1
    a38e:	e000      	b.n	a392 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
    a390:	2400      	movs	r4, #0
    a392:	a801      	add	r0, sp, #4
    a394:	f7f9 fcf2 	bl	3d7c <mpsl_fem_lna_is_configured>
    a398:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a39c:	b100      	cbz	r0, a3a0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>
    a39e:	2001      	movs	r0, #1
    a3a0:	4304      	orrs	r4, r0
    a3a2:	d001      	beq.n	a3a8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
    a3a4:	200c      	movs	r0, #12
    a3a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a3a8:	4902      	ldr	r1, [pc, #8]	; (a3b4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x3c>)
    a3aa:	7828      	ldrb	r0, [r5, #0]
    a3ac:	7208      	strb	r0, [r1, #8]
    a3ae:	2000      	movs	r0, #0
    a3b0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a3b2:	0000      	.short	0x0000
    a3b4:	200016fe 	.word	0x200016fe

0000a3b8 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>:
    a3b8:	4801      	ldr	r0, [pc, #4]	; (a3c0 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA+0x8>)
    a3ba:	f990 0000 	ldrsb.w	r0, [r0]
    a3be:	4770      	bx	lr
    a3c0:	20000180 	.word	0x20000180

0000a3c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a3c4:	4a03      	ldr	r2, [pc, #12]	; (a3d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a3c6:	e9d2 1200 	ldrd	r1, r2, [r2]
    a3ca:	6001      	str	r1, [r0, #0]
    a3cc:	6042      	str	r2, [r0, #4]
    a3ce:	2000      	movs	r0, #0
    a3d0:	4770      	bx	lr
    a3d2:	0000      	.short	0x0000
    a3d4:	0000a8d0 	.word	0x0000a8d0
    a3d8:	b570      	push	{r4, r5, r6, lr}
    a3da:	4604      	mov	r4, r0
    a3dc:	7800      	ldrb	r0, [r0, #0]
    a3de:	2500      	movs	r5, #0
    a3e0:	2801      	cmp	r0, #1
    a3e2:	d004      	beq.n	a3ee <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a>
    a3e4:	b118      	cbz	r0, a3ee <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a>
    a3e6:	2802      	cmp	r0, #2
    a3e8:	d001      	beq.n	a3ee <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2a>
    a3ea:	2803      	cmp	r0, #3
    a3ec:	d168      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a3ee:	7860      	ldrb	r0, [r4, #1]
    a3f0:	b128      	cbz	r0, a3fe <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3a>
    a3f2:	2801      	cmp	r0, #1
    a3f4:	d003      	beq.n	a3fe <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3a>
    a3f6:	2802      	cmp	r0, #2
    a3f8:	d001      	beq.n	a3fe <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3a>
    a3fa:	2803      	cmp	r0, #3
    a3fc:	d160      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a3fe:	7e60      	ldrb	r0, [r4, #25]
    a400:	b910      	cbnz	r0, a408 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x44>
    a402:	78a0      	ldrb	r0, [r4, #2]
    a404:	2801      	cmp	r0, #1
    a406:	d15b      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a408:	78a0      	ldrb	r0, [r4, #2]
    a40a:	08c1      	lsrs	r1, r0, #3
    a40c:	d158      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a40e:	0781      	lsls	r1, r0, #30
    a410:	d504      	bpl.n	a41c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x58>
    a412:	2802      	cmp	r0, #2
    a414:	d154      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a416:	492c      	ldr	r1, [pc, #176]	; (a4c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x104>)
    a418:	7a49      	ldrb	r1, [r1, #9]
    a41a:	b3e9      	cbz	r1, a498 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd4>
    a41c:	0740      	lsls	r0, r0, #29
    a41e:	d04f      	beq.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a420:	f000 fad4 	bl	a9cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a424:	4601      	mov	r1, r0
    a426:	78a0      	ldrb	r0, [r4, #2]
    a428:	ea30 0101 	bics.w	r1, r0, r1
    a42c:	d001      	beq.n	a432 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x6e>
    a42e:	2011      	movs	r0, #17
    a430:	bd70      	pop	{r4, r5, r6, pc}
    a432:	07c0      	lsls	r0, r0, #31
    a434:	d006      	beq.n	a444 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a436:	78e0      	ldrb	r0, [r4, #3]
    a438:	2301      	movs	r3, #1
    a43a:	6922      	ldr	r2, [r4, #16]
    a43c:	68a1      	ldr	r1, [r4, #8]
    a43e:	f006 f806 	bl	1044e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x316>
    a442:	4605      	mov	r5, r0
    a444:	78a0      	ldrb	r0, [r4, #2]
    a446:	0780      	lsls	r0, r0, #30
    a448:	d506      	bpl.n	a458 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x94>
    a44a:	78e0      	ldrb	r0, [r4, #3]
    a44c:	2302      	movs	r3, #2
    a44e:	6922      	ldr	r2, [r4, #16]
    a450:	68a1      	ldr	r1, [r4, #8]
    a452:	f005 fffc 	bl	1044e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x316>
    a456:	4305      	orrs	r5, r0
    a458:	78a0      	ldrb	r0, [r4, #2]
    a45a:	0740      	lsls	r0, r0, #29
    a45c:	d506      	bpl.n	a46c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    a45e:	78e0      	ldrb	r0, [r4, #3]
    a460:	2304      	movs	r3, #4
    a462:	6922      	ldr	r2, [r4, #16]
    a464:	68a1      	ldr	r1, [r4, #8]
    a466:	f005 fff2 	bl	1044e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x316>
    a46a:	4305      	orrs	r5, r0
    a46c:	b10d      	cbz	r5, a472 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xae>
    a46e:	4628      	mov	r0, r5
    a470:	bd70      	pop	{r4, r5, r6, pc}
    a472:	78a0      	ldrb	r0, [r4, #2]
    a474:	2805      	cmp	r0, #5
    a476:	d11f      	bne.n	a4b8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xf4>
    a478:	e9d4 1503 	ldrd	r1, r5, [r4, #12]
    a47c:	7920      	ldrb	r0, [r4, #4]
    a47e:	2304      	movs	r3, #4
    a480:	6962      	ldr	r2, [r4, #20]
    a482:	f005 ffe4 	bl	1044e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x316>
    a486:	2800      	cmp	r0, #0
    a488:	d1f2      	bne.n	a470 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xac>
    a48a:	2001      	movs	r0, #1
    a48c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    a490:	690a      	ldr	r2, [r1, #16]
    a492:	4415      	add	r5, r2
    a494:	1822      	adds	r2, r4, r0
    a496:	e000      	b.n	a49a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd6>
    a498:	e012      	b.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a49a:	78d3      	ldrb	r3, [r2, #3]
    a49c:	7892      	ldrb	r2, [r2, #2]
    a49e:	4293      	cmp	r3, r2
    a4a0:	d10e      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4a2:	688a      	ldr	r2, [r1, #8]
    a4a4:	6849      	ldr	r1, [r1, #4]
    a4a6:	428a      	cmp	r2, r1
    a4a8:	d10a      	bne.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4aa:	1c40      	adds	r0, r0, #1
    a4ac:	b2c0      	uxtb	r0, r0
    a4ae:	2802      	cmp	r0, #2
    a4b0:	d3ec      	bcc.n	a48c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc8>
    a4b2:	68a0      	ldr	r0, [r4, #8]
    a4b4:	42a8      	cmp	r0, r5
    a4b6:	d303      	bcc.n	a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4b8:	7e20      	ldrb	r0, [r4, #24]
    a4ba:	b108      	cbz	r0, a4c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xfc>
    a4bc:	2807      	cmp	r0, #7
    a4be:	d901      	bls.n	a4c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x100>
    a4c0:	2012      	movs	r0, #18
    a4c2:	bd70      	pop	{r4, r5, r6, pc}
    a4c4:	2000      	movs	r0, #0
    a4c6:	bd70      	pop	{r4, r5, r6, pc}
    a4c8:	200016fe 	.word	0x200016fe
    a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4d0:	461d      	mov	r5, r3
    a4d2:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    a4d6:	f1a1 0c06 	sub.w	ip, r1, #6
    a4da:	f640 437a 	movw	r3, #3194	; 0xc7a
    a4de:	9e08      	ldr	r6, [sp, #32]
    a4e0:	459c      	cmp	ip, r3
    a4e2:	d805      	bhi.n	a4f0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12c>
    a4e4:	f1a2 0c06 	sub.w	ip, r2, #6
    a4e8:	459c      	cmp	ip, r3
    a4ea:	d801      	bhi.n	a4f0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12c>
    a4ec:	2301      	movs	r3, #1
    a4ee:	e000      	b.n	a4f2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x12e>
    a4f0:	2300      	movs	r3, #0
    a4f2:	b120      	cbz	r0, a4fe <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x13a>
    a4f4:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    a4f8:	b168      	cbz	r0, a516 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x152>
    a4fa:	b96b      	cbnz	r3, a518 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x154>
    a4fc:	e002      	b.n	a504 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x140>
    a4fe:	4815      	ldr	r0, [pc, #84]	; (a554 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x190>)
    a500:	7a00      	ldrb	r0, [r0, #8]
    a502:	e7f9      	b.n	a4f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x134>
    a504:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    a508:	2806      	cmp	r0, #6
    a50a:	d821      	bhi.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a50c:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    a510:	2806      	cmp	r0, #6
    a512:	d901      	bls.n	a518 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x154>
    a514:	e01c      	b.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a516:	b1db      	cbz	r3, a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a518:	4291      	cmp	r1, r2
    a51a:	d819      	bhi.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a51c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    a520:	d216      	bcs.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a522:	f1a4 000a 	sub.w	r0, r4, #10
    a526:	f640 4176 	movw	r1, #3190	; 0xc76
    a52a:	4288      	cmp	r0, r1
    a52c:	d810      	bhi.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a52e:	4610      	mov	r0, r2
    a530:	f004 f814 	bl	e55c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a534:	1c6d      	adds	r5, r5, #1
    a536:	4368      	muls	r0, r5
    a538:	f240 2171 	movw	r1, #625	; 0x271
    a53c:	0040      	lsls	r0, r0, #1
    a53e:	434c      	muls	r4, r1
    a540:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    a544:	d204      	bcs.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a546:	42b7      	cmp	r7, r6
    a548:	d802      	bhi.n	a550 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x18c>
    a54a:	2001      	movs	r0, #1
    a54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a550:	2000      	movs	r0, #0
    a552:	e7fb      	b.n	a54c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x188>
    a554:	200016fe 	.word	0x200016fe
    a558:	b510      	push	{r4, lr}
    a55a:	4812      	ldr	r0, [pc, #72]	; (a5a4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1e0>)
    a55c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a560:	4a11      	ldr	r2, [pc, #68]	; (a5a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1e4>)
    a562:	8301      	strh	r1, [r0, #24]
    a564:	2100      	movs	r1, #0
    a566:	7681      	strb	r1, [r0, #26]
    a568:	8381      	strh	r1, [r0, #28]
    a56a:	231b      	movs	r3, #27
    a56c:	8013      	strh	r3, [r2, #0]
    a56e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a572:	8054      	strh	r4, [r2, #2]
    a574:	8093      	strh	r3, [r2, #4]
    a576:	80d4      	strh	r4, [r2, #6]
    a578:	7481      	strb	r1, [r0, #18]
    a57a:	74c1      	strb	r1, [r0, #19]
    a57c:	7251      	strb	r1, [r2, #9]
    a57e:	2403      	movs	r4, #3
    a580:	7004      	strb	r4, [r0, #0]
    a582:	2402      	movs	r4, #2
    a584:	7044      	strb	r4, [r0, #1]
    a586:	8043      	strh	r3, [r0, #2]
    a588:	8083      	strh	r3, [r0, #4]
    a58a:	f640 63a6 	movw	r3, #3750	; 0xea6
    a58e:	6083      	str	r3, [r0, #8]
    a590:	005b      	lsls	r3, r3, #1
    a592:	60c3      	str	r3, [r0, #12]
    a594:	7211      	strb	r1, [r2, #8]
    a596:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    a59a:	7581      	strb	r1, [r0, #22]
    a59c:	7401      	strb	r1, [r0, #16]
    a59e:	4803      	ldr	r0, [pc, #12]	; (a5ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1e8>)
    a5a0:	7001      	strb	r1, [r0, #0]
    a5a2:	bd10      	pop	{r4, pc}
    a5a4:	2000162c 	.word	0x2000162c
    a5a8:	200016fe 	.word	0x200016fe
    a5ac:	20000188 	.word	0x20000188
    a5b0:	b530      	push	{r4, r5, lr}
    a5b2:	b087      	sub	sp, #28
    a5b4:	4605      	mov	r5, r0
    a5b6:	8808      	ldrh	r0, [r1, #0]
    a5b8:	f8ad 0004 	strh.w	r0, [sp, #4]
    a5bc:	4813      	ldr	r0, [pc, #76]	; (a60c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x248>)
    a5be:	460c      	mov	r4, r1
    a5c0:	ab03      	add	r3, sp, #12
    a5c2:	7c81      	ldrb	r1, [r0, #18]
    a5c4:	f88d 1006 	strb.w	r1, [sp, #6]
    a5c8:	7cc1      	ldrb	r1, [r0, #19]
    a5ca:	f88d 1007 	strb.w	r1, [sp, #7]
    a5ce:	8a80      	ldrh	r0, [r0, #20]
    a5d0:	f8ad 0008 	strh.w	r0, [sp, #8]
    a5d4:	a804      	add	r0, sp, #16
    a5d6:	9000      	str	r0, [sp, #0]
    a5d8:	aa01      	add	r2, sp, #4
    a5da:	4621      	mov	r1, r4
    a5dc:	4628      	mov	r0, r5
    a5de:	f005 ff9a 	bl	10516 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3de>
    a5e2:	0005      	movs	r5, r0
    a5e4:	d110      	bne.n	a608 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x244>
    a5e6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    a5ea:	f88d 0014 	strb.w	r0, [sp, #20]
    a5ee:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a5f2:	f88d 0015 	strb.w	r0, [sp, #21]
    a5f6:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    a5fa:	f8ad 0016 	strh.w	r0, [sp, #22]
    a5fe:	a905      	add	r1, sp, #20
    a600:	4620      	mov	r0, r4
    a602:	f003 fff4 	bl	e5ee <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a606:	4628      	mov	r0, r5
    a608:	b007      	add	sp, #28
    a60a:	bd30      	pop	{r4, r5, pc}
    a60c:	2000162c 	.word	0x2000162c
    a610:	4904      	ldr	r1, [pc, #16]	; (a624 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x260>)
    a612:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a616:	4288      	cmp	r0, r1
    a618:	d301      	bcc.n	a61e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x25a>
    a61a:	2000      	movs	r0, #0
    a61c:	4770      	bx	lr
    a61e:	2001      	movs	r0, #1
    a620:	4770      	bx	lr
    a622:	0000      	.short	0x0000
    a624:	0270f3cc 	.word	0x0270f3cc
    a628:	4904      	ldr	r1, [pc, #16]	; (a63c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x278>)
    a62a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a62e:	4288      	cmp	r0, r1
    a630:	d301      	bcc.n	a636 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x272>
    a632:	2000      	movs	r0, #0
    a634:	4770      	bx	lr
    a636:	2001      	movs	r0, #1
    a638:	4770      	bx	lr
    a63a:	0000      	.short	0x0000
    a63c:	009c363d 	.word	0x009c363d
    a640:	4904      	ldr	r1, [pc, #16]	; (a654 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x290>)
    a642:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    a646:	4288      	cmp	r0, r1
    a648:	d301      	bcc.n	a64e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x28a>
    a64a:	2000      	movs	r0, #0
    a64c:	4770      	bx	lr
    a64e:	2001      	movs	r0, #1
    a650:	4770      	bx	lr
    a652:	0000      	.short	0x0000
    a654:	009c363d 	.word	0x009c363d
    a658:	b510      	push	{r4, lr}
    a65a:	2102      	movs	r1, #2
    a65c:	2000      	movs	r0, #0
    a65e:	f003 fcdb 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a662:	0004      	movs	r4, r0
    a664:	d10c      	bne.n	a680 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2bc>
    a666:	2200      	movs	r2, #0
    a668:	2102      	movs	r1, #2
    a66a:	4610      	mov	r0, r2
    a66c:	f003 fcca 	bl	e004 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a670:	0004      	movs	r4, r0
    a672:	d007      	beq.n	a684 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2c0>
    a674:	4806      	ldr	r0, [pc, #24]	; (a690 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2cc>)
    a676:	f990 1000 	ldrsb.w	r1, [r0]
    a67a:	4620      	mov	r0, r4
    a67c:	f004 faa2 	bl	ebc4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a680:	4620      	mov	r0, r4
    a682:	bd10      	pop	{r4, pc}
    a684:	f240 2135 	movw	r1, #565	; 0x235
    a688:	2039      	movs	r0, #57	; 0x39
    a68a:	f7f9 fd21 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a68e:	0000      	.short	0x0000
    a690:	20000180 	.word	0x20000180
    a694:	b530      	push	{r4, r5, lr}
    a696:	2200      	movs	r2, #0
    a698:	4d07      	ldr	r5, [pc, #28]	; (a6b8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2f4>)
    a69a:	e009      	b.n	a6b0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2ec>
    a69c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    a6a0:	462b      	mov	r3, r5
    a6a2:	429c      	cmp	r4, r3
    a6a4:	d800      	bhi.n	a6a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e4>
    a6a6:	4623      	mov	r3, r4
    a6a8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    a6ac:	1c52      	adds	r2, r2, #1
    a6ae:	b2d2      	uxtb	r2, r2
    a6b0:	428a      	cmp	r2, r1
    a6b2:	d3f3      	bcc.n	a69c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2d8>
    a6b4:	bd30      	pop	{r4, r5, pc}
    a6b6:	0000      	.short	0x0000
    a6b8:	00f42400 	.word	0x00f42400
    a6bc:	4904      	ldr	r1, [pc, #16]	; (a6d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x30c>)
    a6be:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    a6c2:	4288      	cmp	r0, r1
    a6c4:	d301      	bcc.n	a6ca <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x306>
    a6c6:	2000      	movs	r0, #0
    a6c8:	4770      	bx	lr
    a6ca:	2001      	movs	r0, #1
    a6cc:	4770      	bx	lr
    a6ce:	0000      	.short	0x0000
    a6d0:	0270f9a8 	.word	0x0270f9a8
    a6d4:	4904      	ldr	r1, [pc, #16]	; (a6e8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x324>)
    a6d6:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    a6da:	4288      	cmp	r0, r1
    a6dc:	d301      	bcc.n	a6e2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x31e>
    a6de:	2000      	movs	r0, #0
    a6e0:	4770      	bx	lr
    a6e2:	2001      	movs	r0, #1
    a6e4:	4770      	bx	lr
    a6e6:	0000      	.short	0x0000
    a6e8:	0270f9a8 	.word	0x0270f9a8
    a6ec:	4a09      	ldr	r2, [pc, #36]	; (a714 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x350>)
    a6ee:	4290      	cmp	r0, r2
    a6f0:	d80b      	bhi.n	a70a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x346>
    a6f2:	2901      	cmp	r1, #1
    a6f4:	d002      	beq.n	a6fc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x338>
    a6f6:	2904      	cmp	r1, #4
    a6f8:	d003      	beq.n	a702 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x33e>
    a6fa:	e008      	b.n	a70e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x34a>
    a6fc:	f240 7153 	movw	r1, #1875	; 0x753
    a700:	e001      	b.n	a706 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x342>
    a702:	f640 11c4 	movw	r1, #2500	; 0x9c4
    a706:	4288      	cmp	r0, r1
    a708:	d201      	bcs.n	a70e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x34a>
    a70a:	2000      	movs	r0, #0
    a70c:	4770      	bx	lr
    a70e:	2001      	movs	r0, #1
    a710:	4770      	bx	lr
    a712:	0000      	.short	0x0000
    a714:	0270fd8f 	.word	0x0270fd8f

0000a718 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a718:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a71c:	460c      	mov	r4, r1
    a71e:	4606      	mov	r6, r0
    a720:	f004 fb89 	bl	ee36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a724:	b198      	cbz	r0, a74e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x36>
    a726:	4630      	mov	r0, r6
    a728:	f004 fb76 	bl	ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a72c:	b130      	cbz	r0, a73c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    a72e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a732:	2012      	movs	r0, #18
    a734:	2900      	cmp	r1, #0
    a736:	d00b      	beq.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a738:	2980      	cmp	r1, #128	; 0x80
    a73a:	d809      	bhi.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a73c:	4630      	mov	r0, r6
    a73e:	f004 fb30 	bl	eda2 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a742:	b138      	cbz	r0, a754 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a744:	4630      	mov	r0, r6
    a746:	f004 fa05 	bl	eb54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a74a:	b128      	cbz	r0, a758 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a74c:	e009      	b.n	a762 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    a74e:	2042      	movs	r0, #66	; 0x42
    a750:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a754:	200c      	movs	r0, #12
    a756:	e7fb      	b.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a758:	4630      	mov	r0, r6
    a75a:	f004 fb4f 	bl	edfc <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a75e:	2800      	cmp	r0, #0
    a760:	d05b      	beq.n	a81a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x102>
    a762:	4630      	mov	r0, r6
    a764:	f004 fd74 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a768:	2800      	cmp	r0, #0
    a76a:	d1f3      	bne.n	a754 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a76c:	4630      	mov	r0, r6
    a76e:	f004 fa0e 	bl	eb8e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a772:	2800      	cmp	r0, #0
    a774:	d1ee      	bne.n	a754 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a776:	4630      	mov	r0, r6
    a778:	f7fb fc36 	bl	5fe8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a77c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a780:	f242 7110 	movw	r1, #10000	; 0x2710
    a784:	fb00 f801 	mul.w	r8, r0, r1
    a788:	78e1      	ldrb	r1, [r4, #3]
    a78a:	4630      	mov	r0, r6
    a78c:	f004 fb00 	bl	ed90 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a790:	7820      	ldrb	r0, [r4, #0]
    a792:	2103      	movs	r1, #3
    a794:	f003 fc40 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a798:	b138      	cbz	r0, a7aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    a79a:	4949      	ldr	r1, [pc, #292]	; (a8c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>)
    a79c:	6809      	ldr	r1, [r1, #0]
    a79e:	b121      	cbz	r1, a7aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    a7a0:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    a7a4:	b10a      	cbz	r2, a7aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x92>
    a7a6:	3038      	adds	r0, #56	; 0x38
    a7a8:	4788      	blx	r1
    a7aa:	4630      	mov	r0, r6
    a7ac:	f004 fb2a 	bl	ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a7b0:	b148      	cbz	r0, a7c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xae>
    a7b2:	4630      	mov	r0, r6
    a7b4:	f004 fb30 	bl	ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a7b8:	4f42      	ldr	r7, [pc, #264]	; (a8c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ac>)
    a7ba:	b180      	cbz	r0, a7de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    a7bc:	4630      	mov	r0, r6
    a7be:	f004 fb2f 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a7c2:	b150      	cbz	r0, a7da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    a7c4:	e00b      	b.n	a7de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    a7c6:	4642      	mov	r2, r8
    a7c8:	2100      	movs	r1, #0
    a7ca:	4630      	mov	r0, r6
    a7cc:	f7fc ff6e 	bl	76ac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a7d0:	2800      	cmp	r0, #0
    a7d2:	d0bd      	beq.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a7d4:	f241 417b 	movw	r1, #5243	; 0x147b
    a7d8:	e065      	b.n	a8a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18e>
    a7da:	7a38      	ldrb	r0, [r7, #8]
    a7dc:	b1e8      	cbz	r0, a81a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x102>
    a7de:	2200      	movs	r2, #0
    a7e0:	2101      	movs	r1, #1
    a7e2:	a801      	add	r0, sp, #4
    a7e4:	f7f9 fed8 	bl	4598 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a7e8:	0004      	movs	r4, r0
    a7ea:	d046      	beq.n	a87a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    a7ec:	2100      	movs	r1, #0
    a7ee:	f7fa fed3 	bl	5598 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a7f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a7f6:	8020      	strh	r0, [r4, #0]
    a7f8:	4621      	mov	r1, r4
    a7fa:	4630      	mov	r0, r6
    a7fc:	f004 fb2e 	bl	ee5c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a800:	f000 f8de 	bl	a9c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a804:	0940      	lsrs	r0, r0, #5
    a806:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    a80a:	07c0      	lsls	r0, r0, #31
    a80c:	4d2e      	ldr	r5, [pc, #184]	; (a8c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>)
    a80e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a812:	d004      	beq.n	a81e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x106>
    a814:	886a      	ldrh	r2, [r5, #2]
    a816:	88a9      	ldrh	r1, [r5, #4]
    a818:	e003      	b.n	a822 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x10a>
    a81a:	2012      	movs	r0, #18
    a81c:	e798      	b.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a81e:	221b      	movs	r2, #27
    a820:	4611      	mov	r1, r2
    a822:	84c2      	strh	r2, [r0, #38]	; 0x26
    a824:	8501      	strh	r1, [r0, #40]	; 0x28
    a826:	7a38      	ldrb	r0, [r7, #8]
    a828:	b100      	cbz	r0, a82c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x114>
    a82a:	2001      	movs	r0, #1
    a82c:	f105 0120 	add.w	r1, r5, #32
    a830:	f884 0077 	strb.w	r0, [r4, #119]	; 0x77
    a834:	c90e      	ldmia	r1, {r1, r2, r3}
    a836:	f104 0780 	add.w	r7, r4, #128	; 0x80
    a83a:	e887 000e 	stmia.w	r7, {r1, r2, r3}
    a83e:	68a9      	ldr	r1, [r5, #8]
    a840:	6361      	str	r1, [r4, #52]	; 0x34
    a842:	b110      	cbz	r0, a84a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x132>
    a844:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    a848:	e001      	b.n	a84e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x136>
    a84a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a84e:	4630      	mov	r0, r6
    a850:	f004 fae6 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a854:	b910      	cbnz	r0, a85c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    a856:	4630      	mov	r0, r6
    a858:	f004 fafe 	bl	ee58 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a85c:	4621      	mov	r1, r4
    a85e:	2001      	movs	r0, #1
    a860:	6167      	str	r7, [r4, #20]
    a862:	f7ff fea5 	bl	a5b0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x1ec>
    a866:	b150      	cbz	r0, a87e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a868:	2101      	movs	r1, #1
    a86a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a86e:	f7f9 fedf 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a872:	b110      	cbz	r0, a87a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    a874:	f241 41cb 	movw	r1, #5323	; 0x14cb
    a878:	e015      	b.n	a8a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18e>
    a87a:	2009      	movs	r0, #9
    a87c:	e768      	b.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a87e:	7868      	ldrb	r0, [r5, #1]
    a880:	9000      	str	r0, [sp, #0]
    a882:	782b      	ldrb	r3, [r5, #0]
    a884:	88aa      	ldrh	r2, [r5, #4]
    a886:	8869      	ldrh	r1, [r5, #2]
    a888:	8820      	ldrh	r0, [r4, #0]
    a88a:	f7f9 ffb7 	bl	47fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a88e:	b110      	cbz	r0, a896 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17e>
    a890:	f241 41d6 	movw	r1, #5334	; 0x14d6
    a894:	e007      	b.n	a8a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18e>
    a896:	4642      	mov	r2, r8
    a898:	4621      	mov	r1, r4
    a89a:	4630      	mov	r0, r6
    a89c:	f7fc ff06 	bl	76ac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a8a0:	b120      	cbz	r0, a8ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    a8a2:	f241 41d8 	movw	r1, #5336	; 0x14d8
    a8a6:	2039      	movs	r0, #57	; 0x39
    a8a8:	f7f9 fc12 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8ac:	4807      	ldr	r0, [pc, #28]	; (a8cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    a8ae:	6843      	ldr	r3, [r0, #4]
    a8b0:	b123      	cbz	r3, a8bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
    a8b2:	2200      	movs	r2, #0
    a8b4:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    a8b8:	4620      	mov	r0, r4
    a8ba:	4798      	blx	r3
    a8bc:	2000      	movs	r0, #0
    a8be:	e747      	b.n	a750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a8c0:	20000190 	.word	0x20000190
    a8c4:	200016fe 	.word	0x200016fe
    a8c8:	2000162c 	.word	0x2000162c
    a8cc:	20000180 	.word	0x20000180
    a8d0:	0c11d80c 	.word	0x0c11d80c
    a8d4:	11d80059 	.word	0x11d80059

0000a8d8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a8d8:	b510      	push	{r4, lr}
    a8da:	460c      	mov	r4, r1
    a8dc:	f7fb fab6 	bl	5e4c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a8e0:	4805      	ldr	r0, [pc, #20]	; (a8f8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    a8e2:	6044      	str	r4, [r0, #4]
    a8e4:	6880      	ldr	r0, [r0, #8]
    a8e6:	f005 ff8d 	bl	10804 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6cc>
    a8ea:	f005 fb8d 	bl	10008 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a8f2:	f7fb bb2b 	b.w	5f4c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    a8f6:	0000      	.short	0x0000
    a8f8:	20000194 	.word	0x20000194

0000a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
    a8fc:	4801      	ldr	r0, [pc, #4]	; (a904 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
    a8fe:	7800      	ldrb	r0, [r0, #0]
    a900:	4770      	bx	lr
    a902:	0000      	.short	0x0000
    a904:	20000194 	.word	0x20000194

0000a908 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
    a908:	4901      	ldr	r1, [pc, #4]	; (a910 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
    a90a:	7008      	strb	r0, [r1, #0]
    a90c:	4770      	bx	lr
    a90e:	0000      	.short	0x0000
    a910:	20000194 	.word	0x20000194

0000a914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a914:	b510      	push	{r4, lr}
    a916:	4c05      	ldr	r4, [pc, #20]	; (a92c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    a918:	68e0      	ldr	r0, [r4, #12]
    a91a:	f005 ff73 	bl	10804 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6cc>
    a91e:	6920      	ldr	r0, [r4, #16]
    a920:	f005 ff70 	bl	10804 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6cc>
    a924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a928:	f005 bc06 	b.w	10138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a92c:	20000194 	.word	0x20000194

0000a930 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a930:	b510      	push	{r4, lr}
    a932:	4905      	ldr	r1, [pc, #20]	; (a948 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a934:	4805      	ldr	r0, [pc, #20]	; (a94c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a936:	f005 ff58 	bl	107ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6b2>
    a93a:	4804      	ldr	r0, [pc, #16]	; (a94c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a940:	4903      	ldr	r1, [pc, #12]	; (a950 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a942:	1d00      	adds	r0, r0, #4
    a944:	f005 bf51 	b.w	107ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6b2>
    a948:	200001a8 	.word	0x200001a8
    a94c:	2000019c 	.word	0x2000019c
    a950:	200001b0 	.word	0x200001b0

0000a954 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    a954:	b510      	push	{r4, lr}
    a956:	4905      	ldr	r1, [pc, #20]	; (a96c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    a958:	4805      	ldr	r0, [pc, #20]	; (a970 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    a95a:	f005 ff46 	bl	107ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6b2>
    a95e:	4804      	ldr	r0, [pc, #16]	; (a970 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    a960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a964:	4903      	ldr	r1, [pc, #12]	; (a974 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    a966:	1d00      	adds	r0, r0, #4
    a968:	f005 bf3f 	b.w	107ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6b2>
    a96c:	200001b8 	.word	0x200001b8
    a970:	2000019c 	.word	0x2000019c
    a974:	200001c0 	.word	0x200001c0

0000a978 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a978:	4801      	ldr	r0, [pc, #4]	; (a980 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a97a:	7840      	ldrb	r0, [r0, #1]
    a97c:	4770      	bx	lr
    a97e:	0000      	.short	0x0000
    a980:	20000194 	.word	0x20000194
    a984:	b510      	push	{r4, lr}
    a986:	f7fc ff73 	bl	7870 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a98a:	4803      	ldr	r0, [pc, #12]	; (a998 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    a98c:	f7fb fd98 	bl	64c0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a994:	f7fb ba8e 	b.w	5eb4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a998:	20001943 	.word	0x20001943
    a99c:	b510      	push	{r4, lr}
    a99e:	f7ff fc35 	bl	a20c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    a9a2:	f7fe fc65 	bl	9270 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    a9a6:	f7ff fd07 	bl	a3b8 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>
    a9aa:	4601      	mov	r1, r0
    a9ac:	4803      	ldr	r0, [pc, #12]	; (a9bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>)
    a9ae:	f7fd f92b 	bl	7c08 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    a9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a9b6:	f7fb ba85 	b.w	5ec4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    a9ba:	0000      	.short	0x0000
    a9bc:	20001943 	.word	0x20001943

0000a9c0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a9c0:	4901      	ldr	r1, [pc, #4]	; (a9c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a9c2:	e9d1 0100 	ldrd	r0, r1, [r1]
    a9c6:	4770      	bx	lr
    a9c8:	20000020 	.word	0x20000020

0000a9cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a9cc:	4909      	ldr	r1, [pc, #36]	; (a9f4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x28>)
    a9ce:	8808      	ldrh	r0, [r1, #0]
    a9d0:	7909      	ldrb	r1, [r1, #4]
    a9d2:	0ac2      	lsrs	r2, r0, #11
    a9d4:	0a00      	lsrs	r0, r0, #8
    a9d6:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
    a9da:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    a9de:	07d2      	lsls	r2, r2, #31
    a9e0:	f000 0001 	and.w	r0, r0, #1
    a9e4:	1800      	adds	r0, r0, r0
    a9e6:	ea40 7252 	orr.w	r2, r0, r2, lsr #29
    a9ea:	b2d0      	uxtb	r0, r2
    a9ec:	f040 0001 	orr.w	r0, r0, #1
    a9f0:	4770      	bx	lr
    a9f2:	0000      	.short	0x0000
    a9f4:	20000020 	.word	0x20000020

0000a9f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a9f8:	b510      	push	{r4, lr}
    a9fa:	f7f8 fe93 	bl	3724 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a9fe:	2200      	movs	r2, #0
    aa00:	4b08      	ldr	r3, [pc, #32]	; (aa24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    aa02:	4611      	mov	r1, r2
    aa04:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    aa08:	4284      	cmp	r4, r0
    aa0a:	d303      	bcc.n	aa14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    aa0c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    aa10:	7882      	ldrb	r2, [r0, #2]
    aa12:	e003      	b.n	aa1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    aa14:	1c49      	adds	r1, r1, #1
    aa16:	b2c9      	uxtb	r1, r1
    aa18:	290c      	cmp	r1, #12
    aa1a:	d3f3      	bcc.n	aa04 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    aa1c:	4802      	ldr	r0, [pc, #8]	; (aa28 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    aa1e:	7002      	strb	r2, [r0, #0]
    aa20:	bd10      	pop	{r4, pc}
    aa22:	0000      	.short	0x0000
    aa24:	00010868 	.word	0x00010868
    aa28:	20000220 	.word	0x20000220

0000aa2c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    aa2c:	4801      	ldr	r0, [pc, #4]	; (aa34 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    aa2e:	7800      	ldrb	r0, [r0, #0]
    aa30:	4770      	bx	lr
    aa32:	0000      	.short	0x0000
    aa34:	20000220 	.word	0x20000220

0000aa38 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>:
    aa38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa3c:	460f      	mov	r7, r1
    aa3e:	4605      	mov	r5, r0
    aa40:	2115      	movs	r1, #21
    aa42:	4690      	mov	r8, r2
    aa44:	460e      	mov	r6, r1
    aa46:	20ff      	movs	r0, #255	; 0xff
    aa48:	f003 fa1c 	bl	de84 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    aa4c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    aa50:	1cc0      	adds	r0, r0, #3
    aa52:	ea00 0401 	and.w	r4, r0, r1
    aa56:	b30d      	cbz	r5, aa9c <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x64>
    aa58:	f8df 904c 	ldr.w	r9, [pc, #76]	; aaa8 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x70>
    aa5c:	fb04 5307 	mla	r3, r4, r7, r5
    aa60:	e9c9 5301 	strd	r5, r3, [r9, #4]
    aa64:	f8a9 4000 	strh.w	r4, [r9]
    aa68:	00fa      	lsls	r2, r7, #3
    aa6a:	2100      	movs	r1, #0
    aa6c:	4618      	mov	r0, r3
    aa6e:	f002 fb87 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aa72:	2500      	movs	r5, #0
    aa74:	46aa      	mov	sl, r5
    aa76:	e00f      	b.n	aa98 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x60>
    aa78:	4628      	mov	r0, r5
    aa7a:	f000 f817 	bl	aaac <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x74>
    aa7e:	4621      	mov	r1, r4
    aa80:	22ff      	movs	r2, #255	; 0xff
    aa82:	4633      	mov	r3, r6
    aa84:	f8cd 8000 	str.w	r8, [sp]
    aa88:	f003 f99a 	bl	ddc0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    aa8c:	f8d9 1008 	ldr.w	r1, [r9, #8]
    aa90:	f801 a035 	strb.w	sl, [r1, r5, lsl #3]
    aa94:	1c6d      	adds	r5, r5, #1
    aa96:	b2ad      	uxth	r5, r5
    aa98:	42bd      	cmp	r5, r7
    aa9a:	d3ed      	bcc.n	aa78 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x40>
    aa9c:	3408      	adds	r4, #8
    aa9e:	fb04 f007 	mul.w	r0, r4, r7
    aaa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaa6:	0000      	.short	0x0000
    aaa8:	200001c8 	.word	0x200001c8
    aaac:	4902      	ldr	r1, [pc, #8]	; (aab8 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x80>)
    aaae:	684a      	ldr	r2, [r1, #4]
    aab0:	8809      	ldrh	r1, [r1, #0]
    aab2:	fb00 2001 	mla	r0, r0, r1, r2
    aab6:	4770      	bx	lr
    aab8:	200001c8 	.word	0x200001c8

0000aabc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    aabc:	b570      	push	{r4, r5, r6, lr}
    aabe:	4605      	mov	r5, r0
    aac0:	4616      	mov	r6, r2
    aac2:	460c      	mov	r4, r1
    aac4:	2002      	movs	r0, #2
    aac6:	f000 f8f1 	bl	acac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    aaca:	4905      	ldr	r1, [pc, #20]	; (aae0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    aacc:	2001      	movs	r0, #1
    aace:	7008      	strb	r0, [r1, #0]
    aad0:	4904      	ldr	r1, [pc, #16]	; (aae4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    aad2:	1ef0      	subs	r0, r6, #3
    aad4:	6008      	str	r0, [r1, #0]
    aad6:	4804      	ldr	r0, [pc, #16]	; (aae8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    aad8:	6005      	str	r5, [r0, #0]
    aada:	1f00      	subs	r0, r0, #4
    aadc:	6004      	str	r4, [r0, #0]
    aade:	bd70      	pop	{r4, r5, r6, pc}
    aae0:	20000221 	.word	0x20000221
    aae4:	4000f510 	.word	0x4000f510
    aae8:	4000f508 	.word	0x4000f508

0000aaec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    aaec:	4810      	ldr	r0, [pc, #64]	; (ab30 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
    aaee:	7801      	ldrb	r1, [r0, #0]
    aaf0:	b1a9      	cbz	r1, ab1e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
    aaf2:	4a10      	ldr	r2, [pc, #64]	; (ab34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    aaf4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    aaf8:	6011      	str	r1, [r2, #0]
    aafa:	490f      	ldr	r1, [pc, #60]	; (ab38 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    aafc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ab00:	2200      	movs	r2, #0
    ab02:	2b00      	cmp	r3, #0
    ab04:	bf1c      	itt	ne
    ab06:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    ab0a:	2b00      	cmpne	r3, #0
    ab0c:	d002      	beq.n	ab14 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    ab0e:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    ab12:	b141      	cbz	r1, ab26 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    ab14:	7042      	strb	r2, [r0, #1]
    ab16:	f04f 0110 	mov.w	r1, #16
    ab1a:	7081      	strb	r1, [r0, #2]
    ab1c:	7002      	strb	r2, [r0, #0]
    ab1e:	f04f 0000 	mov.w	r0, #0
    ab22:	f000 b8c3 	b.w	acac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ab26:	2101      	movs	r1, #1
    ab28:	7041      	strb	r1, [r0, #1]
    ab2a:	4904      	ldr	r1, [pc, #16]	; (ab3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    ab2c:	6809      	ldr	r1, [r1, #0]
    ab2e:	e7f4      	b.n	ab1a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
    ab30:	20000221 	.word	0x20000221
    ab34:	4001f508 	.word	0x4001f508
    ab38:	4000f000 	.word	0x4000f000
    ab3c:	4000f400 	.word	0x4000f400

0000ab40 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI>:
    ab40:	b510      	push	{r4, lr}
    ab42:	2002      	movs	r0, #2
    ab44:	f000 f8b2 	bl	acac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ab48:	4806      	ldr	r0, [pc, #24]	; (ab64 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x24>)
    ab4a:	2201      	movs	r2, #1
    ab4c:	2100      	movs	r1, #0
    ab4e:	7002      	strb	r2, [r0, #0]
    ab50:	4805      	ldr	r0, [pc, #20]	; (ab68 <sym_MSITFZMEKFRIBNA2WU2C6VUZYGJRSJIVBH2SBPI+0x28>)
    ab52:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ab56:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ab5a:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    ab5e:	6002      	str	r2, [r0, #0]
    ab60:	bd10      	pop	{r4, pc}
    ab62:	0000      	.short	0x0000
    ab64:	20000221 	.word	0x20000221
    ab68:	4000f000 	.word	0x4000f000

0000ab6c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    ab6c:	b510      	push	{r4, lr}
    ab6e:	2002      	movs	r0, #2
    ab70:	f000 f89c 	bl	acac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ab74:	4907      	ldr	r1, [pc, #28]	; (ab94 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    ab76:	2001      	movs	r0, #1
    ab78:	7008      	strb	r0, [r1, #0]
    ab7a:	4907      	ldr	r1, [pc, #28]	; (ab98 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    ab7c:	2000      	movs	r0, #0
    ab7e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ab82:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ab86:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ab8a:	4904      	ldr	r1, [pc, #16]	; (ab9c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    ab8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ab90:	6008      	str	r0, [r1, #0]
    ab92:	bd10      	pop	{r4, pc}
    ab94:	20000221 	.word	0x20000221
    ab98:	4000f000 	.word	0x4000f000
    ab9c:	4001f504 	.word	0x4001f504

0000aba0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    aba0:	4803      	ldr	r0, [pc, #12]	; (abb0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    aba2:	2100      	movs	r1, #0
    aba4:	7001      	strb	r1, [r0, #0]
    aba6:	7041      	strb	r1, [r0, #1]
    aba8:	2110      	movs	r1, #16
    abaa:	7081      	strb	r1, [r0, #2]
    abac:	4770      	bx	lr
    abae:	0000      	.short	0x0000
    abb0:	20000221 	.word	0x20000221

0000abb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    abb4:	480c      	ldr	r0, [pc, #48]	; (abe8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    abb6:	7801      	ldrb	r1, [r0, #0]
    abb8:	2900      	cmp	r1, #0
    abba:	bf04      	itt	eq
    abbc:	7880      	ldrbeq	r0, [r0, #2]
    abbe:	4770      	bxeq	lr
    abc0:	480a      	ldr	r0, [pc, #40]	; (abec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    abc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    abc6:	2900      	cmp	r1, #0
    abc8:	bf1c      	itt	ne
    abca:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    abce:	2900      	cmpne	r1, #0
    abd0:	d002      	beq.n	abd8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    abd2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    abd6:	b110      	cbz	r0, abde <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    abd8:	f04f 0010 	mov.w	r0, #16
    abdc:	4770      	bx	lr
    abde:	4804      	ldr	r0, [pc, #16]	; (abf0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    abe0:	6800      	ldr	r0, [r0, #0]
    abe2:	b2c0      	uxtb	r0, r0
    abe4:	4770      	bx	lr
    abe6:	0000      	.short	0x0000
    abe8:	20000221 	.word	0x20000221
    abec:	4000f000 	.word	0x4000f000
    abf0:	4000f400 	.word	0x4000f400

0000abf4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    abf4:	4811      	ldr	r0, [pc, #68]	; (ac3c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
    abf6:	b510      	push	{r4, lr}
    abf8:	7802      	ldrb	r2, [r0, #0]
    abfa:	4b11      	ldr	r3, [pc, #68]	; (ac40 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
    abfc:	7840      	ldrb	r0, [r0, #1]
    abfe:	21c8      	movs	r1, #200	; 0xc8
    ac00:	1e49      	subs	r1, r1, #1
    ac02:	b2c9      	uxtb	r1, r1
    ac04:	b15a      	cbz	r2, ac1e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
    ac06:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    ac0a:	f1bc 0f00 	cmp.w	ip, #0
    ac0e:	d00c      	beq.n	ac2a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    ac10:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    ac14:	b138      	cbz	r0, ac26 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    ac16:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    ac1a:	b160      	cbz	r0, ac36 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    ac1c:	e003      	b.n	ac26 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
    ac1e:	2802      	cmp	r0, #2
    ac20:	d003      	beq.n	ac2a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
    ac22:	2801      	cmp	r0, #1
    ac24:	d007      	beq.n	ac36 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
    ac26:	2000      	movs	r0, #0
    ac28:	bd10      	pop	{r4, pc}
    ac2a:	2900      	cmp	r1, #0
    ac2c:	d1e8      	bne.n	ac00 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    ac2e:	219e      	movs	r1, #158	; 0x9e
    ac30:	203b      	movs	r0, #59	; 0x3b
    ac32:	f7f9 fa4d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac36:	2001      	movs	r0, #1
    ac38:	bd10      	pop	{r4, pc}
    ac3a:	0000      	.short	0x0000
    ac3c:	20000221 	.word	0x20000221
    ac40:	4000f000 	.word	0x4000f000

0000ac44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    ac44:	4905      	ldr	r1, [pc, #20]	; (ac5c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    ac46:	2000      	movs	r0, #0
    ac48:	780a      	ldrb	r2, [r1, #0]
    ac4a:	b11a      	cbz	r2, ac54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    ac4c:	4b05      	ldr	r3, [pc, #20]	; (ac64 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>)
    ac4e:	4a04      	ldr	r2, [pc, #16]	; (ac60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1c>)
    ac50:	601a      	str	r2, [r3, #0]
    ac52:	7008      	strb	r0, [r1, #0]
    ac54:	7048      	strb	r0, [r1, #1]
    ac56:	7088      	strb	r0, [r1, #2]
    ac58:	4770      	bx	lr
    ac5a:	0000      	.short	0x0000
    ac5c:	20000224 	.word	0x20000224
    ac60:	02020000 	.word	0x02020000
    ac64:	4001f508 	.word	0x4001f508

0000ac68 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    ac68:	4802      	ldr	r0, [pc, #8]	; (ac74 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    ac6a:	2100      	movs	r1, #0
    ac6c:	7001      	strb	r1, [r0, #0]
    ac6e:	7041      	strb	r1, [r0, #1]
    ac70:	7081      	strb	r1, [r0, #2]
    ac72:	4770      	bx	lr
    ac74:	20000224 	.word	0x20000224

0000ac78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    ac78:	b510      	push	{r4, lr}
    ac7a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ac7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ac82:	2000      	movs	r0, #0
    ac84:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    ac88:	f3bf 8f4f 	dsb	sy
    ac8c:	f3bf 8f6f 	isb	sy
    ac90:	4904      	ldr	r1, [pc, #16]	; (aca4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    ac92:	6008      	str	r0, [r1, #0]
    ac94:	6008      	str	r0, [r1, #0]
    ac96:	f7ff ffd5 	bl	ac44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    ac9a:	4903      	ldr	r1, [pc, #12]	; (aca8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>)
    ac9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aca0:	6008      	str	r0, [r1, #0]
    aca2:	bd10      	pop	{r4, pc}
    aca4:	4000f500 	.word	0x4000f500
    aca8:	4001f508 	.word	0x4001f508

0000acac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    acac:	b570      	push	{r4, r5, r6, lr}
    acae:	4c11      	ldr	r4, [pc, #68]	; (acf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    acb0:	4605      	mov	r5, r0
    acb2:	2000      	movs	r0, #0
    acb4:	6020      	str	r0, [r4, #0]
    acb6:	6020      	str	r0, [r4, #0]
    acb8:	f7ff ffc4 	bl	ac44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    acbc:	490e      	ldr	r1, [pc, #56]	; (acf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    acbe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    acc2:	6008      	str	r0, [r1, #0]
    acc4:	2d00      	cmp	r5, #0
    acc6:	bf08      	it	eq
    acc8:	bd70      	popeq	{r4, r5, r6, pc}
    acca:	480c      	ldr	r0, [pc, #48]	; (acfc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    accc:	490c      	ldr	r1, [pc, #48]	; (ad00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    acce:	2d01      	cmp	r5, #1
    acd0:	bf04      	itt	eq
    acd2:	2202      	moveq	r2, #2
    acd4:	6022      	streq	r2, [r4, #0]
    acd6:	d00b      	beq.n	acf0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    acd8:	2d02      	cmp	r5, #2
    acda:	d003      	beq.n	ace4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x38>
    acdc:	2181      	movs	r1, #129	; 0x81
    acde:	203d      	movs	r0, #61	; 0x3d
    ace0:	f7f9 f9f6 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ace4:	2203      	movs	r2, #3
    ace6:	6022      	str	r2, [r4, #0]
    ace8:	6008      	str	r0, [r1, #0]
    acea:	4906      	ldr	r1, [pc, #24]	; (ad04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    acec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    acf0:	6008      	str	r0, [r1, #0]
    acf2:	bd70      	pop	{r4, r5, r6, pc}
    acf4:	4000f500 	.word	0x4000f500
    acf8:	4001f508 	.word	0x4001f508
    acfc:	20001a45 	.word	0x20001a45
    ad00:	4000f514 	.word	0x4000f514
    ad04:	4001f504 	.word	0x4001f504

0000ad08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    ad08:	4805      	ldr	r0, [pc, #20]	; (ad20 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    ad0a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ad0e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    ad12:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ad16:	2100      	movs	r1, #0
    ad18:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    ad1c:	4770      	bx	lr
    ad1e:	0000      	.short	0x0000
    ad20:	40001000 	.word	0x40001000

0000ad24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    ad24:	4904      	ldr	r1, [pc, #16]	; (ad38 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    ad26:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    ad2a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    ad2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ad32:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    ad36:	4770      	bx	lr
    ad38:	40001000 	.word	0x40001000

0000ad3c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    ad3c:	4801      	ldr	r0, [pc, #4]	; (ad44 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    ad3e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    ad42:	4770      	bx	lr
    ad44:	20001688 	.word	0x20001688

0000ad48 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    ad48:	4902      	ldr	r1, [pc, #8]	; (ad54 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    ad4a:	5c08      	ldrb	r0, [r1, r0]
    ad4c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    ad50:	4770      	bx	lr
    ad52:	0000      	.short	0x0000
    ad54:	0000c33c 	.word	0x0000c33c

0000ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    ad58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad5c:	f7f8 ff58 	bl	3c10 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    ad60:	f7f8 ffcc 	bl	3cfc <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    ad64:	4c4a      	ldr	r4, [pc, #296]	; (ae90 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x138>)
    ad66:	4680      	mov	r8, r0
    ad68:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ad6c:	f010 0f10 	tst.w	r0, #16
    ad70:	bf14      	ite	ne
    ad72:	f04f 0901 	movne.w	r9, #1
    ad76:	f04f 0900 	moveq.w	r9, #0
    ad7a:	2010      	movs	r0, #16
    ad7c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    ad80:	2002      	movs	r0, #2
    ad82:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ad86:	4d43      	ldr	r5, [pc, #268]	; (ae94 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x13c>)
    ad88:	f8df a10c 	ldr.w	sl, [pc, #268]	; ae98 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x140>
    ad8c:	2600      	movs	r6, #0
    ad8e:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    ad92:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    ad96:	f8ca 0000 	str.w	r0, [sl]
    ad9a:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    ad9e:	f04f 0701 	mov.w	r7, #1
    ada2:	f010 0fff 	tst.w	r0, #255	; 0xff
    ada6:	d016      	beq.n	add6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7e>
    ada8:	20ff      	movs	r0, #255	; 0xff
    adaa:	f88d 0000 	strb.w	r0, [sp]
    adae:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    adb2:	6127      	str	r7, [r4, #16]
    adb4:	e005      	b.n	adc2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6a>
    adb6:	bf00      	nop
    adb8:	f89d 0000 	ldrb.w	r0, [sp]
    adbc:	1e40      	subs	r0, r0, #1
    adbe:	f88d 0000 	strb.w	r0, [sp]
    adc2:	f89d 1000 	ldrb.w	r1, [sp]
    adc6:	b119      	cbz	r1, add0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x78>
    adc8:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    adcc:	2800      	cmp	r0, #0
    adce:	d0f3      	beq.n	adb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x60>
    add0:	f89d 0000 	ldrb.w	r0, [sp]
    add4:	b140      	cbz	r0, ade8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>
    add6:	8ba8      	ldrh	r0, [r5, #28]
    add8:	2896      	cmp	r0, #150	; 0x96
    adda:	d324      	bcc.n	ae26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    addc:	7a68      	ldrb	r0, [r5, #9]
    adde:	2801      	cmp	r0, #1
    ade0:	d007      	beq.n	adf2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9a>
    ade2:	2802      	cmp	r0, #2
    ade4:	d012      	beq.n	ae0c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xb4>
    ade6:	e01e      	b.n	ae26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ade8:	f640 0183 	movw	r1, #2179	; 0x883
    adec:	203e      	movs	r0, #62	; 0x3e
    adee:	f7f9 f96f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adf2:	f7f8 ffc9 	bl	3d88 <mpsl_fem_pa_configuration_clear>
    adf6:	2800      	cmp	r0, #0
    adf8:	bf18      	it	ne
    adfa:	f1b0 3fff 	cmpne.w	r0, #4294967295
    adfe:	d012      	beq.n	ae26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ae00:	f640 0194 	movw	r1, #2196	; 0x894
    ae04:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ae08:	f7f9 f962 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae0c:	f7f8 ffaa 	bl	3d64 <mpsl_fem_lna_configuration_clear>
    ae10:	2800      	cmp	r0, #0
    ae12:	bf18      	it	ne
    ae14:	f1b0 3fff 	cmpne.w	r0, #4294967295
    ae18:	d005      	beq.n	ae26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
    ae1a:	f640 019a 	movw	r1, #2202	; 0x89a
    ae1e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ae22:	f7f9 f955 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae26:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    ae2a:	2000      	movs	r0, #0
    ae2c:	f001 f94c 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ae30:	71ee      	strb	r6, [r5, #7]
    ae32:	722e      	strb	r6, [r5, #8]
    ae34:	726e      	strb	r6, [r5, #9]
    ae36:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
    ae3a:	b1b0      	cbz	r0, ae6a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x112>
    ae3c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    ae40:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    ae44:	f040 0002 	orr.w	r0, r0, #2
    ae48:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ae4c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ae50:	f8ca 0000 	str.w	r0, [sl]
    ae54:	6968      	ldr	r0, [r5, #20]
    ae56:	4911      	ldr	r1, [pc, #68]	; (ae9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x144>)
    ae58:	f020 0003 	bic.w	r0, r0, #3
    ae5c:	6168      	str	r0, [r5, #20]
    ae5e:	6008      	str	r0, [r1, #0]
    ae60:	4910      	ldr	r1, [pc, #64]	; (aea4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14c>)
    ae62:	480f      	ldr	r0, [pc, #60]	; (aea0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x148>)
    ae64:	6008      	str	r0, [r1, #0]
    ae66:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    ae6a:	f1b9 0f00 	cmp.w	r9, #0
    ae6e:	bf1c      	itt	ne
    ae70:	2010      	movne	r0, #16
    ae72:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
    ae76:	f1b8 0f00 	cmp.w	r8, #0
    ae7a:	bf18      	it	ne
    ae7c:	6127      	strne	r7, [r4, #16]
    ae7e:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    ae82:	2800      	cmp	r0, #0
    ae84:	bf1c      	itt	ne
    ae86:	6127      	strne	r7, [r4, #16]
    ae88:	f885 6045 	strbne.w	r6, [r5, #69]	; 0x45
    ae8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae90:	40001000 	.word	0x40001000
    ae94:	20001688 	.word	0x20001688
    ae98:	4001f508 	.word	0x4001f508
    ae9c:	40001900 	.word	0x40001900
    aea0:	00023280 	.word	0x00023280
    aea4:	40001910 	.word	0x40001910

0000aea8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    aea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aeac:	4c5c      	ldr	r4, [pc, #368]	; (b020 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x178>)
    aeae:	4605      	mov	r5, r0
    aeb0:	b086      	sub	sp, #24
    aeb2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    aeb6:	468a      	mov	sl, r1
    aeb8:	f010 0f01 	tst.w	r0, #1
    aebc:	d016      	beq.n	aeec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    aebe:	f8df 8164 	ldr.w	r8, [pc, #356]	; b024 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x17c>
    aec2:	f04f 0902 	mov.w	r9, #2
    aec6:	2d00      	cmp	r5, #0
    aec8:	f8d8 0000 	ldr.w	r0, [r8]
    aecc:	9005      	str	r0, [sp, #20]
    aece:	bf04      	itt	eq
    aed0:	2004      	moveq	r0, #4
    aed2:	f88d 0014 	strbeq.w	r0, [sp, #20]
    aed6:	d00e      	beq.n	aef6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    aed8:	2d01      	cmp	r5, #1
    aeda:	bf08      	it	eq
    aedc:	f88d 9014 	strbeq.w	r9, [sp, #20]
    aee0:	d009      	beq.n	aef6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    aee2:	f640 21b9 	movw	r1, #2745	; 0xab9
    aee6:	203e      	movs	r0, #62	; 0x3e
    aee8:	f7f9 f8f2 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeec:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    aef0:	203e      	movs	r0, #62	; 0x3e
    aef2:	f7f9 f8ed 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aef6:	a805      	add	r0, sp, #20
    aef8:	f7f8 fe5a 	bl	3bb0 <mpsl_cx_request>
    aefc:	b120      	cbz	r0, af08 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    aefe:	f640 21bd 	movw	r1, #2749	; 0xabd
    af02:	203e      	movs	r0, #62	; 0x3e
    af04:	f7f9 f8e4 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af08:	4f47      	ldr	r7, [pc, #284]	; (b028 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x180>)
    af0a:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    af0e:	f040 0001 	orr.w	r0, r0, #1
    af12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    af16:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    af1a:	2601      	movs	r6, #1
    af1c:	f040 0002 	orr.w	r0, r0, #2
    af20:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    af24:	b115      	cbz	r5, af2c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>
    af26:	2d01      	cmp	r5, #1
    af28:	d006      	beq.n	af38 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>
    af2a:	e00b      	b.n	af44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x9c>
    af2c:	4650      	mov	r0, sl
    af2e:	f001 f98b 	bl	c248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    af32:	7266      	strb	r6, [r4, #9]
    af34:	603e      	str	r6, [r7, #0]
    af36:	e005      	b.n	af44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x9c>
    af38:	4650      	mov	r0, sl
    af3a:	f001 f901 	bl	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    af3e:	f884 9009 	strb.w	r9, [r4, #9]
    af42:	607e      	str	r6, [r7, #4]
    af44:	4839      	ldr	r0, [pc, #228]	; (b02c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x184>)
    af46:	64c6      	str	r6, [r0, #76]	; 0x4c
    af48:	4839      	ldr	r0, [pc, #228]	; (b030 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x188>)
    af4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    af4e:	8ba1      	ldrh	r1, [r4, #28]
    af50:	2996      	cmp	r1, #150	; 0x96
    af52:	d32e      	bcc.n	afb2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    af54:	4937      	ldr	r1, [pc, #220]	; (b034 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    af56:	b135      	cbz	r5, af66 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xbe>
    af58:	2d01      	cmp	r5, #1
    af5a:	d017      	beq.n	af8c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xe4>
    af5c:	f240 714c 	movw	r1, #1868	; 0x74c
    af60:	203e      	movs	r0, #62	; 0x3e
    af62:	f7f9 f8b5 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af66:	f100 0228 	add.w	r2, r0, #40	; 0x28
    af6a:	e9c1 0202 	strd	r0, r2, [r1, #8]
    af6e:	4932      	ldr	r1, [pc, #200]	; (b038 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x190>)
    af70:	4830      	ldr	r0, [pc, #192]	; (b034 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    af72:	f7f8 ff0f 	bl	3d94 <mpsl_fem_pa_configuration_set>
    af76:	2800      	cmp	r0, #0
    af78:	bf18      	it	ne
    af7a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    af7e:	d018      	beq.n	afb2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    af80:	f240 713b 	movw	r1, #1851	; 0x73b
    af84:	f04f 003e 	mov.w	r0, #62	; 0x3e
    af88:	f7f9 f8a2 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af8c:	f100 0229 	add.w	r2, r0, #41	; 0x29
    af90:	e9c1 0202 	strd	r0, r2, [r1, #8]
    af94:	4928      	ldr	r1, [pc, #160]	; (b038 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x190>)
    af96:	4827      	ldr	r0, [pc, #156]	; (b034 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x18c>)
    af98:	f7f8 feea 	bl	3d70 <mpsl_fem_lna_configuration_set>
    af9c:	2800      	cmp	r0, #0
    af9e:	bf18      	it	ne
    afa0:	f1b0 3fff 	cmpne.w	r0, #4294967295
    afa4:	d005      	beq.n	afb2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x10a>
    afa6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    afaa:	f04f 003e 	mov.w	r0, #62	; 0x3e
    afae:	f7f9 f88f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afb2:	f108 008c 	add.w	r0, r8, #140	; 0x8c
    afb6:	2d01      	cmp	r5, #1
    afb8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    afba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    afbe:	f8d8 009c 	ldr.w	r0, [r8, #156]	; 0x9c
    afc2:	9004      	str	r0, [sp, #16]
    afc4:	bf14      	ite	ne
    afc6:	2001      	movne	r0, #1
    afc8:	2000      	moveq	r0, #0
    afca:	f88d 0001 	strb.w	r0, [sp, #1]
    afce:	4668      	mov	r0, sp
    afd0:	f7f8 fe78 	bl	3cc4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    afd4:	a805      	add	r0, sp, #20
    afd6:	f7f8 fdd9 	bl	3b8c <mpsl_cx_granted_ops_get>
    afda:	b120      	cbz	r0, afe6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x13e>
    afdc:	f640 21cf 	movw	r1, #2767	; 0xacf
    afe0:	203e      	movs	r0, #62	; 0x3e
    afe2:	f7f9 f875 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afe6:	7a60      	ldrb	r0, [r4, #9]
    afe8:	2801      	cmp	r0, #1
    afea:	d007      	beq.n	affc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x154>
    afec:	2802      	cmp	r0, #2
    afee:	bf04      	itt	eq
    aff0:	f89d 0014 	ldrbeq.w	r0, [sp, #20]
    aff4:	f010 0f02 	tsteq.w	r0, #2
    aff8:	d010      	beq.n	b01c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x174>
    affa:	e004      	b.n	b006 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15e>
    affc:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b000:	f010 0f04 	tst.w	r0, #4
    b004:	d00a      	beq.n	b01c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x174>
    b006:	f04f 0000 	mov.w	r0, #0
    b00a:	bf00      	nop
    b00c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    b010:	2800      	cmp	r0, #0
    b012:	bf18      	it	ne
    b014:	613e      	strne	r6, [r7, #16]
    b016:	b006      	add	sp, #24
    b018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b01c:	2001      	movs	r0, #1
    b01e:	e7f5      	b.n	b00c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>
    b020:	20001688 	.word	0x20001688
    b024:	0000c314 	.word	0x0000c314
    b028:	40001000 	.word	0x40001000
    b02c:	40008000 	.word	0x40008000
    b030:	4000800c 	.word	0x4000800c
    b034:	200001dc 	.word	0x200001dc
    b038:	0000c364 	.word	0x0000c364

0000b03c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b040:	4c9b      	ldr	r4, [pc, #620]	; (b2b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x274>)
    b042:	0005      	movs	r5, r0
    b044:	f8df 926c 	ldr.w	r9, [pc, #620]	; b2b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x278>
    b048:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b04c:	b089      	sub	sp, #36	; 0x24
    b04e:	f040 0002 	orr.w	r0, r0, #2
    b052:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b056:	f8d9 0000 	ldr.w	r0, [r9]
    b05a:	460f      	mov	r7, r1
    b05c:	f04f 0a02 	mov.w	sl, #2
    b060:	9000      	str	r0, [sp, #0]
    b062:	bf04      	itt	eq
    b064:	2004      	moveq	r0, #4
    b066:	f88d 0000 	strbeq.w	r0, [sp]
    b06a:	d009      	beq.n	b080 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    b06c:	2d01      	cmp	r5, #1
    b06e:	bf08      	it	eq
    b070:	f88d a000 	strbeq.w	sl, [sp]
    b074:	d004      	beq.n	b080 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    b076:	f640 21b9 	movw	r1, #2745	; 0xab9
    b07a:	203e      	movs	r0, #62	; 0x3e
    b07c:	f7f9 f828 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b080:	4668      	mov	r0, sp
    b082:	f7f8 fd95 	bl	3bb0 <mpsl_cx_request>
    b086:	b120      	cbz	r0, b092 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    b088:	f640 21bd 	movw	r1, #2749	; 0xabd
    b08c:	203e      	movs	r0, #62	; 0x3e
    b08e:	f7f9 f81f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b092:	f8df b224 	ldr.w	fp, [pc, #548]	; b2b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    b096:	4e89      	ldr	r6, [pc, #548]	; (b2bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x280>)
    b098:	f04f 0800 	mov.w	r8, #0
    b09c:	b115      	cbz	r5, b0a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    b09e:	2d01      	cmp	r5, #1
    b0a0:	d020      	beq.n	b0e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa8>
    b0a2:	e037      	b.n	b114 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    b0a4:	4638      	mov	r0, r7
    b0a6:	f001 f8cf 	bl	c248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    b0aa:	2001      	movs	r0, #1
    b0ac:	7260      	strb	r0, [r4, #9]
    b0ae:	79e0      	ldrb	r0, [r4, #7]
    b0b0:	2801      	cmp	r0, #1
    b0b2:	d105      	bne.n	b0c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b0b4:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    b0b8:	f040 0008 	orr.w	r0, r0, #8
    b0bc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    b0c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b0c2:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b0c6:	6320      	str	r0, [r4, #48]	; 0x30
    b0c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b0cc:	f8cb 0000 	str.w	r0, [fp]
    b0d0:	487b      	ldr	r0, [pc, #492]	; (b2c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x284>)
    b0d2:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    b0d6:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
    b0da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b0de:	fbb1 f8f0 	udiv	r8, r1, r0
    b0e2:	e017      	b.n	b114 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    b0e4:	4638      	mov	r0, r7
    b0e6:	f001 f82b 	bl	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b0ea:	f884 a009 	strb.w	sl, [r4, #9]
    b0ee:	79e0      	ldrb	r0, [r4, #7]
    b0f0:	2801      	cmp	r0, #1
    b0f2:	d105      	bne.n	b100 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    b0f4:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    b0f8:	f040 0004 	orr.w	r0, r0, #4
    b0fc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    b100:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b102:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b106:	6320      	str	r0, [r4, #48]	; 0x30
    b108:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b10c:	f8cb 0000 	str.w	r0, [fp]
    b110:	f04f 0829 	mov.w	r8, #41	; 0x29
    b114:	79e0      	ldrb	r0, [r4, #7]
    b116:	2800      	cmp	r0, #0
    b118:	bf04      	itt	eq
    b11a:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    b11e:	f040 0002 	orreq.w	r0, r0, #2
    b122:	d006      	beq.n	b132 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xf6>
    b124:	2801      	cmp	r0, #1
    b126:	bf04      	itt	eq
    b128:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    b12c:	f040 0004 	orreq.w	r0, r0, #4
    b130:	d101      	bne.n	b136 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xfa>
    b132:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b136:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b13a:	f8df a188 	ldr.w	sl, [pc, #392]	; b2c4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x288>
    b13e:	f010 0f01 	tst.w	r0, #1
    b142:	d029      	beq.n	b198 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    b144:	f010 0f02 	tst.w	r0, #2
    b148:	d016      	beq.n	b178 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13c>
    b14a:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    b14e:	f040 0001 	orr.w	r0, r0, #1
    b152:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    b156:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
    b15a:	b2c0      	uxtb	r0, r0
    b15c:	280b      	cmp	r0, #11
    b15e:	bf18      	it	ne
    b160:	280a      	cmpne	r0, #10
    b162:	d003      	beq.n	b16c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x130>
    b164:	2803      	cmp	r0, #3
    b166:	bf18      	it	ne
    b168:	2802      	cmpne	r0, #2
    b16a:	d115      	bne.n	b198 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    b16c:	f240 6117 	movw	r1, #1559	; 0x617
    b170:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b174:	f7f8 ffac 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b178:	f010 0f04 	tst.w	r0, #4
    b17c:	d00c      	beq.n	b198 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    b17e:	4953      	ldr	r1, [pc, #332]	; (b2cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x290>)
    b180:	4851      	ldr	r0, [pc, #324]	; (b2c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28c>)
    b182:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b186:	f8da 0140 	ldr.w	r0, [sl, #320]	; 0x140
    b18a:	b128      	cbz	r0, b198 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    b18c:	f240 611f 	movw	r1, #1567	; 0x61f
    b190:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b194:	f7f8 ff9c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b198:	f001 fe08 	bl	cdac <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    b19c:	b128      	cbz	r0, b1aa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    b19e:	f7ff fddb 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b1a2:	b009      	add	sp, #36	; 0x24
    b1a4:	2000      	movs	r0, #0
    b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1aa:	2d01      	cmp	r5, #1
    b1ac:	bf08      	it	eq
    b1ae:	f649 71ba 	movweq	r1, #40890	; 0x9fba
    b1b2:	d004      	beq.n	b1be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x182>
    b1b4:	4842      	ldr	r0, [pc, #264]	; (b2c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x284>)
    b1b6:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
    b1ba:	f500 7116 	add.w	r1, r0, #600	; 0x258
    b1be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b1c2:	fbb1 f7f0 	udiv	r7, r1, r0
    b1c6:	f001 fe03 	bl	cdd0 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>
    b1ca:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
    b1ce:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b1d2:	f109 02a0 	add.w	r2, r9, #160	; 0xa0
    b1d6:	f10d 0b08 	add.w	fp, sp, #8
    b1da:	e892 140c 	ldmia.w	r2, {r2, r3, sl, ip}
    b1de:	e88b 140c 	stmia.w	fp, {r2, r3, sl, ip}
    b1e2:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
    b1e6:	9206      	str	r2, [sp, #24]
    b1e8:	2d01      	cmp	r5, #1
    b1ea:	bf14      	ite	ne
    b1ec:	2201      	movne	r2, #1
    b1ee:	2200      	moveq	r2, #0
    b1f0:	f88d 2009 	strb.w	r2, [sp, #9]
    b1f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b1f8:	9706      	str	r7, [sp, #24]
    b1fa:	a802      	add	r0, sp, #8
    b1fc:	f7f8 fd62 	bl	3cc4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    b200:	8ba0      	ldrh	r0, [r4, #28]
    b202:	2100      	movs	r1, #0
    b204:	2896      	cmp	r0, #150	; 0x96
    b206:	d32c      	bcc.n	b262 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    b208:	4831      	ldr	r0, [pc, #196]	; (b2d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    b20a:	b135      	cbz	r5, b21a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1de>
    b20c:	2d01      	cmp	r5, #1
    b20e:	d016      	beq.n	b23e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    b210:	f240 714c 	movw	r1, #1868	; 0x74c
    b214:	203e      	movs	r0, #62	; 0x3e
    b216:	f7f8 ff5b 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b21a:	2228      	movs	r2, #40	; 0x28
    b21c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b220:	492c      	ldr	r1, [pc, #176]	; (b2d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>)
    b222:	482b      	ldr	r0, [pc, #172]	; (b2d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    b224:	f7f8 fdb6 	bl	3d94 <mpsl_fem_pa_configuration_set>
    b228:	2800      	cmp	r0, #0
    b22a:	bf18      	it	ne
    b22c:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b230:	d017      	beq.n	b262 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    b232:	f240 713b 	movw	r1, #1851	; 0x73b
    b236:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b23a:	f7f8 ff49 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b23e:	2229      	movs	r2, #41	; 0x29
    b240:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b244:	4923      	ldr	r1, [pc, #140]	; (b2d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>)
    b246:	4822      	ldr	r0, [pc, #136]	; (b2d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    b248:	f7f8 fd92 	bl	3d70 <mpsl_fem_lna_configuration_set>
    b24c:	2800      	cmp	r0, #0
    b24e:	bf18      	it	ne
    b250:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b254:	d005      	beq.n	b262 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x226>
    b256:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    b25a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b25e:	f7f8 ff37 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b262:	a801      	add	r0, sp, #4
    b264:	f7f8 fc92 	bl	3b8c <mpsl_cx_granted_ops_get>
    b268:	b120      	cbz	r0, b274 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x238>
    b26a:	f640 21cf 	movw	r1, #2767	; 0xacf
    b26e:	203e      	movs	r0, #62	; 0x3e
    b270:	f7f8 ff2e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b274:	7a60      	ldrb	r0, [r4, #9]
    b276:	2801      	cmp	r0, #1
    b278:	d007      	beq.n	b28a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x24e>
    b27a:	2802      	cmp	r0, #2
    b27c:	bf04      	itt	eq
    b27e:	f89d 0004 	ldrbeq.w	r0, [sp, #4]
    b282:	f010 0f02 	tsteq.w	r0, #2
    b286:	d011      	beq.n	b2ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x270>
    b288:	e004      	b.n	b294 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x258>
    b28a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b28e:	f010 0f04 	tst.w	r0, #4
    b292:	d00b      	beq.n	b2ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x270>
    b294:	f04f 0000 	mov.w	r0, #0
    b298:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    b29c:	2800      	cmp	r0, #0
    b29e:	bf1c      	itt	ne
    b2a0:	2001      	movne	r0, #1
    b2a2:	6130      	strne	r0, [r6, #16]
    b2a4:	4640      	mov	r0, r8
    b2a6:	b009      	add	sp, #36	; 0x24
    b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2ac:	2001      	movs	r0, #1
    b2ae:	e7f3      	b.n	b298 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    b2b0:	20001688 	.word	0x20001688
    b2b4:	0000c314 	.word	0x0000c314
    b2b8:	4001f504 	.word	0x4001f504
    b2bc:	40001000 	.word	0x40001000
    b2c0:	0000c32a 	.word	0x0000c32a
    b2c4:	40008000 	.word	0x40008000
    b2c8:	40001008 	.word	0x40001008
    b2cc:	4001f098 	.word	0x4001f098
    b2d0:	200001dc 	.word	0x200001dc
    b2d4:	0000c364 	.word	0x0000c364

0000b2d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b2d8:	b510      	push	{r4, lr}
    b2da:	4604      	mov	r4, r0
    b2dc:	4807      	ldr	r0, [pc, #28]	; (b2fc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x24>)
    b2de:	f7f8 fc5b 	bl	3b98 <mpsl_cx_register_callback>
    b2e2:	b120      	cbz	r0, b2ee <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x16>
    b2e4:	f640 1107 	movw	r1, #2311	; 0x907
    b2e8:	203e      	movs	r0, #62	; 0x3e
    b2ea:	f7f8 fef1 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ee:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    b2f2:	4803      	ldr	r0, [pc, #12]	; (b300 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x28>)
    b2f4:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    b2f8:	bd10      	pop	{r4, pc}
    b2fa:	0000      	.short	0x0000
    b2fc:	0000c111 	.word	0x0000c111
    b300:	20001678 	.word	0x20001678

0000b304 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b304:	b510      	push	{r4, lr}
    b306:	4c0f      	ldr	r4, [pc, #60]	; (b344 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    b308:	4603      	mov	r3, r0
    b30a:	2002      	movs	r0, #2
    b30c:	7320      	strb	r0, [r4, #12]
    b30e:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    b312:	8ba0      	ldrh	r0, [r4, #28]
    b314:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b318:	7e22      	ldrb	r2, [r4, #24]
    b31a:	f1bc 0f01 	cmp.w	ip, #1
    b31e:	d00d      	beq.n	b33c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    b320:	f001 f8b6 	bl	c490 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b324:	6120      	str	r0, [r4, #16]
    b326:	4808      	ldr	r0, [pc, #32]	; (b348 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b328:	2100      	movs	r1, #0
    b32a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b32e:	6921      	ldr	r1, [r4, #16]
    b330:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b332:	4408      	add	r0, r1
    b334:	4905      	ldr	r1, [pc, #20]	; (b34c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b336:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b33a:	bd10      	pop	{r4, pc}
    b33c:	f001 f8c6 	bl	c4cc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b340:	e7f0      	b.n	b324 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x20>
    b342:	0000      	.short	0x0000
    b344:	20001688 	.word	0x20001688
    b348:	40008000 	.word	0x40008000
    b34c:	40008004 	.word	0x40008004

0000b350 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b354:	2248      	movs	r2, #72	; 0x48
    b356:	2100      	movs	r1, #0
    b358:	481d      	ldr	r0, [pc, #116]	; (b3d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    b35a:	f001 ff11 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b35e:	481c      	ldr	r0, [pc, #112]	; (b3d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
    b360:	2400      	movs	r4, #0
    b362:	21ff      	movs	r1, #255	; 0xff
    b364:	71c4      	strb	r4, [r0, #7]
    b366:	7204      	strb	r4, [r0, #8]
    b368:	7244      	strb	r4, [r0, #9]
    b36a:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
    b36e:	215f      	movs	r1, #95	; 0x5f
    b370:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    b374:	f001 fe1f 	bl	cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b378:	4f16      	ldr	r7, [pc, #88]	; (b3d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    b37a:	4d17      	ldr	r5, [pc, #92]	; (b3d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
    b37c:	4e17      	ldr	r6, [pc, #92]	; (b3dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
    b37e:	b928      	cbnz	r0, b38c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    b380:	f001 fe30 	bl	cfe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b384:	b910      	cbnz	r0, b38c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
    b386:	f001 fe37 	bl	cff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b38a:	b140      	cbz	r0, b39e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4e>
    b38c:	2224      	movs	r2, #36	; 0x24
    b38e:	21ff      	movs	r1, #255	; 0xff
    b390:	4638      	mov	r0, r7
    b392:	f001 fef5 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b396:	602c      	str	r4, [r5, #0]
    b398:	6034      	str	r4, [r6, #0]
    b39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b39e:	f001 fe6b 	bl	d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b3a2:	b910      	cbnz	r0, b3aa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5a>
    b3a4:	f001 fe5e 	bl	d064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b3a8:	b140      	cbz	r0, b3bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6c>
    b3aa:	2240      	movs	r2, #64	; 0x40
    b3ac:	21ff      	movs	r1, #255	; 0xff
    b3ae:	4638      	mov	r0, r7
    b3b0:	f001 fee6 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b3b4:	602c      	str	r4, [r5, #0]
    b3b6:	6034      	str	r4, [r6, #0]
    b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3bc:	2238      	movs	r2, #56	; 0x38
    b3be:	21ff      	movs	r1, #255	; 0xff
    b3c0:	4638      	mov	r0, r7
    b3c2:	f001 fedd 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b3c6:	602c      	str	r4, [r5, #0]
    b3c8:	6034      	str	r4, [r6, #0]
    b3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3ce:	0000      	.short	0x0000
    b3d0:	20001688 	.word	0x20001688
    b3d4:	40000e00 	.word	0x40000e00
    b3d8:	40000e08 	.word	0x40000e08
    b3dc:	40000e10 	.word	0x40000e10

0000b3e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3e4:	4e29      	ldr	r6, [pc, #164]	; (b48c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xac>)
    b3e6:	4c28      	ldr	r4, [pc, #160]	; (b488 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xa8>)
    b3e8:	2000      	movs	r0, #0
    b3ea:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b3ee:	1d27      	adds	r7, r4, #4
    b3f0:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    b3f4:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    b3f8:	f106 0804 	add.w	r8, r6, #4
    b3fc:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    b400:	f7ff fcaa 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b404:	4d22      	ldr	r5, [pc, #136]	; (b490 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb0>)
    b406:	8ba8      	ldrh	r0, [r5, #28]
    b408:	2896      	cmp	r0, #150	; 0x96
    b40a:	d30c      	bcc.n	b426 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    b40c:	f7f8 fca4 	bl	3d58 <mpsl_fem_disable>
    b410:	2800      	cmp	r0, #0
    b412:	bf18      	it	ne
    b414:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b418:	d005      	beq.n	b426 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
    b41a:	f240 5146 	movw	r1, #1350	; 0x546
    b41e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b422:	f7f8 fe55 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b426:	f7f8 fbbd 	bl	3ba4 <mpsl_cx_release>
    b42a:	b120      	cbz	r0, b436 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x56>
    b42c:	f240 515a 	movw	r1, #1370	; 0x55a
    b430:	203e      	movs	r0, #62	; 0x3e
    b432:	f7f8 fe4d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b436:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b438:	4916      	ldr	r1, [pc, #88]	; (b494 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb4>)
    b43a:	f040 6044 	orr.w	r0, r0, #205520896	; 0xc400000
    b43e:	6008      	str	r0, [r1, #0]
    b440:	2000      	movs	r0, #0
    b442:	6328      	str	r0, [r5, #48]	; 0x30
    b444:	7328      	strb	r0, [r5, #12]
    b446:	6268      	str	r0, [r5, #36]	; 0x24
    b448:	6228      	str	r0, [r5, #32]
    b44a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b44e:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    b452:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
    b456:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    b45a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    b45e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    b462:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    b466:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    b46a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b46e:	2002      	movs	r0, #2
    b470:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    b474:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    b478:	f3bf 8f4f 	dsb	sy
    b47c:	f3bf 8f6f 	isb	sy
    b480:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b488:	40008000 	.word	0x40008000
    b48c:	40008008 	.word	0x40008008
    b490:	20001688 	.word	0x20001688
    b494:	4001f508 	.word	0x4001f508

0000b498 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b49c:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    b4a0:	2701      	movs	r7, #1
    b4a2:	f04f 0902 	mov.w	r9, #2
    b4a6:	2500      	movs	r5, #0
    b4a8:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    b4ac:	f3bf 8f4f 	dsb	sy
    b4b0:	f3bf 8f6f 	isb	sy
    b4b4:	4c39      	ldr	r4, [pc, #228]	; (b59c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b4b6:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
    b4ba:	f8c4 7ffc 	str.w	r7, [r4, #4092]	; 0xffc
    b4be:	f001 fdb1 	bl	d024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b4c2:	4e37      	ldr	r6, [pc, #220]	; (b5a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b4c4:	b118      	cbz	r0, b4ce <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    b4c6:	6830      	ldr	r0, [r6, #0]
    b4c8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b4cc:	6030      	str	r0, [r6, #0]
    b4ce:	f001 fd9d 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b4d2:	b138      	cbz	r0, b4e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    b4d4:	6830      	ldr	r0, [r6, #0]
    b4d6:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b4da:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    b4de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    b4e2:	6030      	str	r0, [r6, #0]
    b4e4:	f001 fdae 	bl	d044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b4e8:	b130      	cbz	r0, b4f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
    b4ea:	482e      	ldr	r0, [pc, #184]	; (b5a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b4ec:	6801      	ldr	r1, [r0, #0]
    b4ee:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b4f2:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b4f6:	6001      	str	r1, [r0, #0]
    b4f8:	492c      	ldr	r1, [pc, #176]	; (b5ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    b4fa:	482b      	ldr	r0, [pc, #172]	; (b5a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    b4fc:	6008      	str	r0, [r1, #0]
    b4fe:	f7f8 fc61 	bl	3dc4 <mpsl_fem_device_config_254_apply_get>
    b502:	b140      	cbz	r0, b516 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b504:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b508:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b50c:	f1b0 3fff 	cmp.w	r0, #4294967295
    b510:	bf1c      	itt	ne
    b512:	4927      	ldrne	r1, [pc, #156]	; (b5b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    b514:	6008      	strne	r0, [r1, #0]
    b516:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b51a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b51c:	f1b0 3fff 	cmp.w	r0, #4294967295
    b520:	d004      	beq.n	b52c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
    b522:	4924      	ldr	r1, [pc, #144]	; (b5b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    b524:	680a      	ldr	r2, [r1, #0]
    b526:	f360 4217 	bfi	r2, r0, #16, #8
    b52a:	600a      	str	r2, [r1, #0]
    b52c:	f240 1103 	movw	r1, #259	; 0x103
    b530:	f240 605b 	movw	r0, #1627	; 0x65b
    b534:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b538:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b53c:	481e      	ldr	r0, [pc, #120]	; (b5b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    b53e:	6007      	str	r7, [r0, #0]
    b540:	481e      	ldr	r0, [pc, #120]	; (b5bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    b542:	4a1f      	ldr	r2, [pc, #124]	; (b5c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    b544:	2103      	movs	r1, #3
    b546:	7607      	strb	r7, [r0, #24]
    b548:	6011      	str	r1, [r2, #0]
    b54a:	f240 2101 	movw	r1, #513	; 0x201
    b54e:	f8c4 1650 	str.w	r1, [r4, #1616]	; 0x650
    b552:	2102      	movs	r1, #2
    b554:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b558:	4a1a      	ldr	r2, [pc, #104]	; (b5c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    b55a:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b55e:	6011      	str	r1, [r2, #0]
    b560:	f1a0 0110 	sub.w	r1, r0, #16
    b564:	2296      	movs	r2, #150	; 0x96
    b566:	870d      	strh	r5, [r1, #56]	; 0x38
    b568:	4917      	ldr	r1, [pc, #92]	; (b5c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x130>)
    b56a:	6245      	str	r5, [r0, #36]	; 0x24
    b56c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    b570:	700d      	strb	r5, [r1, #0]
    b572:	8382      	strh	r2, [r0, #28]
    b574:	4a15      	ldr	r2, [pc, #84]	; (b5cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x134>)
    b576:	6812      	ldr	r2, [r2, #0]
    b578:	6142      	str	r2, [r0, #20]
    b57a:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
    b57e:	f8c8 9280 	str.w	r9, [r8, #640]	; 0x280
    b582:	2010      	movs	r0, #16
    b584:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b588:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
    b58c:	6848      	ldr	r0, [r1, #4]
    b58e:	2800      	cmp	r0, #0
    b590:	bf08      	it	eq
    b592:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b596:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b59a:	4700      	bx	r0
    b59c:	40001000 	.word	0x40001000
    b5a0:	4000173c 	.word	0x4000173c
    b5a4:	40001740 	.word	0x40001740
    b5a8:	8900002c 	.word	0x8900002c
    b5ac:	40001778 	.word	0x40001778
    b5b0:	4000174c 	.word	0x4000174c
    b5b4:	4000158c 	.word	0x4000158c
    b5b8:	40001530 	.word	0x40001530
    b5bc:	20001688 	.word	0x20001688
    b5c0:	40001510 	.word	0x40001510
    b5c4:	4001f504 	.word	0x4001f504
    b5c8:	200001d4 	.word	0x200001d4
    b5cc:	40001900 	.word	0x40001900

0000b5d0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b5d0:	4901      	ldr	r1, [pc, #4]	; (b5d8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b5d2:	7648      	strb	r0, [r1, #25]
    b5d4:	4770      	bx	lr
    b5d6:	0000      	.short	0x0000
    b5d8:	20001688 	.word	0x20001688

0000b5dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    b5dc:	4901      	ldr	r1, [pc, #4]	; (b5e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    b5de:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b5e2:	4770      	bx	lr
    b5e4:	0000c3f0 	.word	0x0000c3f0

0000b5e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b5e8:	491e      	ldr	r1, [pc, #120]	; (b664 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    b5ea:	b510      	push	{r4, lr}
    b5ec:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b5f0:	4a1d      	ldr	r2, [pc, #116]	; (b668 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    b5f2:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b5f6:	f040 0001 	orr.w	r0, r0, #1
    b5fa:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
    b5fe:	f010 0f01 	tst.w	r0, #1
    b602:	bf08      	it	eq
    b604:	bd10      	popeq	{r4, pc}
    b606:	f010 0f02 	tst.w	r0, #2
    b60a:	d016      	beq.n	b63a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
    b60c:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b610:	f040 0001 	orr.w	r0, r0, #1
    b614:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b618:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
    b61c:	b2c0      	uxtb	r0, r0
    b61e:	280b      	cmp	r0, #11
    b620:	bf18      	it	ne
    b622:	280a      	cmpne	r0, #10
    b624:	d003      	beq.n	b62e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
    b626:	2803      	cmp	r0, #3
    b628:	bf1c      	itt	ne
    b62a:	2802      	cmpne	r0, #2
    b62c:	bd10      	popne	{r4, pc}
    b62e:	f240 6117 	movw	r1, #1559	; 0x617
    b632:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b636:	f7f8 fd4b 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b63a:	f010 0f04 	tst.w	r0, #4
    b63e:	bf08      	it	eq
    b640:	bd10      	popeq	{r4, pc}
    b642:	480a      	ldr	r0, [pc, #40]	; (b66c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    b644:	490a      	ldr	r1, [pc, #40]	; (b670 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    b646:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b64a:	480a      	ldr	r0, [pc, #40]	; (b674 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    b64c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b650:	2800      	cmp	r0, #0
    b652:	bf08      	it	eq
    b654:	bd10      	popeq	{r4, pc}
    b656:	f240 611f 	movw	r1, #1567	; 0x61f
    b65a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b65e:	f7f8 fd37 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b662:	0000      	.short	0x0000
    b664:	40001000 	.word	0x40001000
    b668:	20001688 	.word	0x20001688
    b66c:	40001008 	.word	0x40001008
    b670:	4001f098 	.word	0x4001f098
    b674:	40008000 	.word	0x40008000

0000b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    b678:	4901      	ldr	r1, [pc, #4]	; (b680 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    b67a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b67e:	4770      	bx	lr
    b680:	0000c414 	.word	0x0000c414

0000b684 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b688:	0006      	movs	r6, r0
    b68a:	4895      	ldr	r0, [pc, #596]	; (b8e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
    b68c:	b089      	sub	sp, #36	; 0x24
    b68e:	4690      	mov	r8, r2
    b690:	6800      	ldr	r0, [r0, #0]
    b692:	460d      	mov	r5, r1
    b694:	9000      	str	r0, [sp, #0]
    b696:	bf08      	it	eq
    b698:	2004      	moveq	r0, #4
    b69a:	d008      	beq.n	b6ae <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a>
    b69c:	2e01      	cmp	r6, #1
    b69e:	bf08      	it	eq
    b6a0:	2002      	moveq	r0, #2
    b6a2:	d004      	beq.n	b6ae <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a>
    b6a4:	f640 21b9 	movw	r1, #2745	; 0xab9
    b6a8:	203e      	movs	r0, #62	; 0x3e
    b6aa:	f7f8 fd11 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6ae:	f88d 0000 	strb.w	r0, [sp]
    b6b2:	4668      	mov	r0, sp
    b6b4:	f7f8 fa7c 	bl	3bb0 <mpsl_cx_request>
    b6b8:	b120      	cbz	r0, b6c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x40>
    b6ba:	f640 21bd 	movw	r1, #2749	; 0xabd
    b6be:	203e      	movs	r0, #62	; 0x3e
    b6c0:	f7f8 fd06 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6c4:	f8df 921c 	ldr.w	r9, [pc, #540]	; b8e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x260>
    b6c8:	4f87      	ldr	r7, [pc, #540]	; (b8e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
    b6ca:	4c88      	ldr	r4, [pc, #544]	; (b8ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
    b6cc:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    b6d0:	f04f 0a01 	mov.w	sl, #1
    b6d4:	b136      	cbz	r6, b6e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x60>
    b6d6:	2e01      	cmp	r6, #1
    b6d8:	d01a      	beq.n	b710 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b6da:	f640 0114 	movw	r1, #2068	; 0x814
    b6de:	203e      	movs	r0, #62	; 0x3e
    b6e0:	f7f8 fcf6 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6e4:	4640      	mov	r0, r8
    b6e6:	f000 fdaf 	bl	c248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>
    b6ea:	4881      	ldr	r0, [pc, #516]	; (b8f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
    b6ec:	f884 a009 	strb.w	sl, [r4, #9]
    b6f0:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
    b6f4:	79e0      	ldrb	r0, [r4, #7]
    b6f6:	2801      	cmp	r0, #1
    b6f8:	d004      	beq.n	b704 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x80>
    b6fa:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b6fe:	fbb1 f1fb 	udiv	r1, r1, fp
    b702:	1a6d      	subs	r5, r5, r1
    b704:	2800      	cmp	r0, #0
    b706:	bf04      	itt	eq
    b708:	4638      	moveq	r0, r7
    b70a:	f8c9 7514 	streq.w	r7, [r9, #1300]	; 0x514
    b70e:	e011      	b.n	b734 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>
    b710:	4640      	mov	r0, r8
    b712:	f000 fd15 	bl	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b716:	2002      	movs	r0, #2
    b718:	7260      	strb	r0, [r4, #9]
    b71a:	79e1      	ldrb	r1, [r4, #7]
    b71c:	2901      	cmp	r1, #1
    b71e:	d004      	beq.n	b72a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa6>
    b720:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    b724:	fbb0 f0fb 	udiv	r0, r0, fp
    b728:	1a2d      	subs	r5, r5, r0
    b72a:	4872      	ldr	r0, [pc, #456]	; (b8f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x270>)
    b72c:	2900      	cmp	r1, #0
    b72e:	bf08      	it	eq
    b730:	f8c9 0514 	streq.w	r0, [r9, #1300]	; 0x514
    b734:	4970      	ldr	r1, [pc, #448]	; (b8f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x274>)
    b736:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b73a:	4870      	ldr	r0, [pc, #448]	; (b8fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x278>)
    b73c:	f8c9 0510 	str.w	r0, [r9, #1296]	; 0x510
    b740:	2010      	movs	r0, #16
    b742:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    b746:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b748:	4a6d      	ldr	r2, [pc, #436]	; (b900 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27c>)
    b74a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b74e:	6320      	str	r0, [r4, #48]	; 0x30
    b750:	0108      	lsls	r0, r1, #4
    b752:	6010      	str	r0, [r2, #0]
    b754:	79e0      	ldrb	r0, [r4, #7]
    b756:	2800      	cmp	r0, #0
    b758:	bf04      	itt	eq
    b75a:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    b75e:	f040 0002 	orreq.w	r0, r0, #2
    b762:	d006      	beq.n	b772 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xee>
    b764:	2801      	cmp	r0, #1
    b766:	bf04      	itt	eq
    b768:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
    b76c:	f040 0004 	orreq.w	r0, r0, #4
    b770:	d101      	bne.n	b776 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf2>
    b772:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b776:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b77a:	f010 0f01 	tst.w	r0, #1
    b77e:	d028      	beq.n	b7d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b780:	f010 0f02 	tst.w	r0, #2
    b784:	d016      	beq.n	b7b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x130>
    b786:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    b78a:	f040 0001 	orr.w	r0, r0, #1
    b78e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    b792:	f8d7 0550 	ldr.w	r0, [r7, #1360]	; 0x550
    b796:	b2c0      	uxtb	r0, r0
    b798:	280b      	cmp	r0, #11
    b79a:	bf18      	it	ne
    b79c:	280a      	cmpne	r0, #10
    b79e:	d003      	beq.n	b7a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x124>
    b7a0:	2803      	cmp	r0, #3
    b7a2:	bf18      	it	ne
    b7a4:	2802      	cmpne	r0, #2
    b7a6:	d114      	bne.n	b7d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b7a8:	f240 6117 	movw	r1, #1559	; 0x617
    b7ac:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b7b0:	f7f8 fc8e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7b4:	f010 0f04 	tst.w	r0, #4
    b7b8:	d00b      	beq.n	b7d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b7ba:	4852      	ldr	r0, [pc, #328]	; (b904 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x280>)
    b7bc:	f8c9 0514 	str.w	r0, [r9, #1300]	; 0x514
    b7c0:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
    b7c4:	b128      	cbz	r0, b7d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x14e>
    b7c6:	f240 611f 	movw	r1, #1567	; 0x61f
    b7ca:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b7ce:	f7f8 fc7f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7d2:	f8c1 a04c 	str.w	sl, [r1, #76]	; 0x4c
    b7d6:	484c      	ldr	r0, [pc, #304]	; (b908 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x284>)
    b7d8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b7dc:	42a8      	cmp	r0, r5
    b7de:	d304      	bcc.n	b7ea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x166>
    b7e0:	f640 012a 	movw	r1, #2090	; 0x82a
    b7e4:	203e      	movs	r0, #62	; 0x3e
    b7e6:	f7f8 fc73 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7ea:	2e01      	cmp	r6, #1
    b7ec:	bf0f      	iteee	eq
    b7ee:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    b7f2:	483f      	ldrne	r0, [pc, #252]	; (b8f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
    b7f4:	f830 0018 	ldrhne.w	r0, [r0, r8, lsl #1]
    b7f8:	f500 7016 	addne.w	r0, r0, #600	; 0x258
    b7fc:	fbb0 f0fb 	udiv	r0, r0, fp
    b800:	4937      	ldr	r1, [pc, #220]	; (b8e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
    b802:	f10d 0904 	add.w	r9, sp, #4
    b806:	f101 02b4 	add.w	r2, r1, #180	; 0xb4
    b80a:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    b80e:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    b812:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
    b816:	9105      	str	r1, [sp, #20]
    b818:	bf14      	ite	ne
    b81a:	2101      	movne	r1, #1
    b81c:	2100      	moveq	r1, #0
    b81e:	f88d 1005 	strb.w	r1, [sp, #5]
    b822:	e9cd 5004 	strd	r5, r0, [sp, #16]
    b826:	a801      	add	r0, sp, #4
    b828:	f7f8 fa4c 	bl	3cc4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    b82c:	8ba0      	ldrh	r0, [r4, #28]
    b82e:	2896      	cmp	r0, #150	; 0x96
    b830:	d32e      	bcc.n	b890 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    b832:	4836      	ldr	r0, [pc, #216]	; (b90c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    b834:	b136      	cbz	r6, b844 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1c0>
    b836:	2e01      	cmp	r6, #1
    b838:	d017      	beq.n	b86a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1e6>
    b83a:	f240 714c 	movw	r1, #1868	; 0x74c
    b83e:	203e      	movs	r0, #62	; 0x3e
    b840:	f7f8 fc46 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b844:	f105 0128 	add.w	r1, r5, #40	; 0x28
    b848:	e9c0 5102 	strd	r5, r1, [r0, #8]
    b84c:	4930      	ldr	r1, [pc, #192]	; (b910 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
    b84e:	482f      	ldr	r0, [pc, #188]	; (b90c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    b850:	f7f8 faa0 	bl	3d94 <mpsl_fem_pa_configuration_set>
    b854:	2800      	cmp	r0, #0
    b856:	bf18      	it	ne
    b858:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b85c:	d018      	beq.n	b890 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    b85e:	f240 713b 	movw	r1, #1851	; 0x73b
    b862:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b866:	f7f8 fc33 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b86a:	f105 0129 	add.w	r1, r5, #41	; 0x29
    b86e:	e9c0 5102 	strd	r5, r1, [r0, #8]
    b872:	4927      	ldr	r1, [pc, #156]	; (b910 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
    b874:	4825      	ldr	r0, [pc, #148]	; (b90c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
    b876:	f7f8 fa7b 	bl	3d70 <mpsl_fem_lna_configuration_set>
    b87a:	2800      	cmp	r0, #0
    b87c:	bf18      	it	ne
    b87e:	f1b0 3fff 	cmpne.w	r0, #4294967295
    b882:	d005      	beq.n	b890 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20c>
    b884:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    b888:	f04f 003e 	mov.w	r0, #62	; 0x3e
    b88c:	f7f8 fc20 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b890:	4668      	mov	r0, sp
    b892:	f7f8 f97b 	bl	3b8c <mpsl_cx_granted_ops_get>
    b896:	b120      	cbz	r0, b8a2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x21e>
    b898:	f640 21cf 	movw	r1, #2767	; 0xacf
    b89c:	203e      	movs	r0, #62	; 0x3e
    b89e:	f7f8 fc17 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8a2:	7a60      	ldrb	r0, [r4, #9]
    b8a4:	2801      	cmp	r0, #1
    b8a6:	d007      	beq.n	b8b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x234>
    b8a8:	2802      	cmp	r0, #2
    b8aa:	bf04      	itt	eq
    b8ac:	f89d 0000 	ldrbeq.w	r0, [sp]
    b8b0:	f010 0f02 	tsteq.w	r0, #2
    b8b4:	d011      	beq.n	b8da <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    b8b6:	e004      	b.n	b8c2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    b8b8:	f89d 0000 	ldrb.w	r0, [sp]
    b8bc:	f010 0f04 	tst.w	r0, #4
    b8c0:	d00b      	beq.n	b8da <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x256>
    b8c2:	f04f 0000 	mov.w	r0, #0
    b8c6:	bf00      	nop
    b8c8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    b8cc:	2800      	cmp	r0, #0
    b8ce:	bf18      	it	ne
    b8d0:	f8c7 a010 	strne.w	sl, [r7, #16]
    b8d4:	b009      	add	sp, #36	; 0x24
    b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8da:	2001      	movs	r0, #1
    b8dc:	e7f4      	b.n	b8c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x244>
    b8de:	0000      	.short	0x0000
    b8e0:	0000c314 	.word	0x0000c314
    b8e4:	4001f098 	.word	0x4001f098
    b8e8:	40001000 	.word	0x40001000
    b8ec:	20001688 	.word	0x20001688
    b8f0:	0000c32a 	.word	0x0000c32a
    b8f4:	40001004 	.word	0x40001004
    b8f8:	40008000 	.word	0x40008000
    b8fc:	40008140 	.word	0x40008140
    b900:	4001f504 	.word	0x4001f504
    b904:	40001008 	.word	0x40001008
    b908:	4000800c 	.word	0x4000800c
    b90c:	200001dc 	.word	0x200001dc
    b910:	0000c364 	.word	0x0000c364

0000b914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b914:	b530      	push	{r4, r5, lr}
    b916:	4c31      	ldr	r4, [pc, #196]	; (b9dc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc8>)
    b918:	b087      	sub	sp, #28
    b91a:	000d      	movs	r5, r1
    b91c:	71e0      	strb	r0, [r4, #7]
    b91e:	72a2      	strb	r2, [r4, #10]
    b920:	bf0c      	ite	eq
    b922:	2001      	moveq	r0, #1
    b924:	2002      	movne	r0, #2
    b926:	7220      	strb	r0, [r4, #8]
    b928:	2801      	cmp	r0, #1
    b92a:	d006      	beq.n	b93a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
    b92c:	2802      	cmp	r0, #2
    b92e:	d026      	beq.n	b97e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    b930:	f640 213d 	movw	r1, #2621	; 0xa3d
    b934:	203e      	movs	r0, #62	; 0x3e
    b936:	f7f8 fbcb 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b93a:	7a60      	ldrb	r0, [r4, #9]
    b93c:	2802      	cmp	r0, #2
    b93e:	d11e      	bne.n	b97e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
    b940:	4610      	mov	r0, r2
    b942:	f994 2019 	ldrsb.w	r2, [r4, #25]
    b946:	7ea1      	ldrb	r1, [r4, #26]
    b948:	ab05      	add	r3, sp, #20
    b94a:	f000 fe1f 	bl	c58c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b94e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    b952:	f000 fddd 	bl	c510 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b956:	f10d 0015 	add.w	r0, sp, #21
    b95a:	f7f8 fa21 	bl	3da0 <mpsl_fem_pa_gain_set>
    b95e:	b120      	cbz	r0, b96a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
    b960:	f240 51ee 	movw	r1, #1518	; 0x5ee
    b964:	203e      	movs	r0, #62	; 0x3e
    b966:	f7f8 fbb3 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b96a:	20ff      	movs	r0, #255	; 0xff
    b96c:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    b970:	481b      	ldr	r0, [pc, #108]	; (b9e0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xcc>)
    b972:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b976:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b97a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b97e:	7a62      	ldrb	r2, [r4, #9]
    b980:	7e20      	ldrb	r0, [r4, #24]
    b982:	2a02      	cmp	r2, #2
    b984:	8ba2      	ldrh	r2, [r4, #28]
    b986:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b98a:	d01d      	beq.n	b9c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xb4>
    b98c:	4b15      	ldr	r3, [pc, #84]	; (b9e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd0>)
    b98e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    b992:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    b996:	fbb0 f0f1 	udiv	r0, r0, r1
    b99a:	4410      	add	r0, r2
    b99c:	4912      	ldr	r1, [pc, #72]	; (b9e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd4>)
    b99e:	2d01      	cmp	r5, #1
    b9a0:	f101 02c8 	add.w	r2, r1, #200	; 0xc8
    b9a4:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    b9a8:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    b9ac:	f8d1 10d8 	ldr.w	r1, [r1, #216]	; 0xd8
    b9b0:	9104      	str	r1, [sp, #16]
    b9b2:	bf14      	ite	ne
    b9b4:	2101      	movne	r1, #1
    b9b6:	2100      	moveq	r1, #0
    b9b8:	f88d 1001 	strb.w	r1, [sp, #1]
    b9bc:	9001      	str	r0, [sp, #4]
    b9be:	4668      	mov	r0, sp
    b9c0:	f7f8 f980 	bl	3cc4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    b9c4:	b007      	add	sp, #28
    b9c6:	bd30      	pop	{r4, r5, pc}
    b9c8:	4b08      	ldr	r3, [pc, #32]	; (b9ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd8>)
    b9ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b9ce:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    b9d2:	fbb0 f0f1 	udiv	r0, r0, r1
    b9d6:	1a10      	subs	r0, r2, r0
    b9d8:	e7e0      	b.n	b99c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x88>
    b9da:	0000      	.short	0x0000
    b9dc:	20001688 	.word	0x20001688
    b9e0:	40001000 	.word	0x40001000
    b9e4:	0000c318 	.word	0x0000c318
    b9e8:	0000c314 	.word	0x0000c314
    b9ec:	0000c414 	.word	0x0000c414

0000b9f0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b9f0:	4903      	ldr	r1, [pc, #12]	; (ba00 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>)
    b9f2:	6809      	ldr	r1, [r1, #0]
    b9f4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b9f8:	4249      	negs	r1, r1
    b9fa:	7001      	strb	r1, [r0, #0]
    b9fc:	2001      	movs	r0, #1
    b9fe:	4770      	bx	lr
    ba00:	40001548 	.word	0x40001548

0000ba04 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    ba04:	4903      	ldr	r1, [pc, #12]	; (ba14 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    ba06:	0e02      	lsrs	r2, r0, #24
    ba08:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    ba0c:	0200      	lsls	r0, r0, #8
    ba0e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    ba12:	4770      	bx	lr
    ba14:	40001000 	.word	0x40001000

0000ba18 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    ba18:	6800      	ldr	r0, [r0, #0]
    ba1a:	4903      	ldr	r1, [pc, #12]	; (ba28 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    ba1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba20:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    ba24:	4770      	bx	lr
    ba26:	0000      	.short	0x0000
    ba28:	40001000 	.word	0x40001000

0000ba2c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    ba2c:	b510      	push	{r4, lr}
    ba2e:	2200      	movs	r2, #0
    ba30:	2901      	cmp	r1, #1
    ba32:	d010      	beq.n	ba56 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    ba34:	2902      	cmp	r1, #2
    ba36:	bf08      	it	eq
    ba38:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    ba3c:	d00b      	beq.n	ba56 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    ba3e:	2904      	cmp	r1, #4
    ba40:	bf14      	ite	ne
    ba42:	2908      	cmpne	r1, #8
    ba44:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    ba48:	d005      	beq.n	ba56 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
    ba4a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    ba4e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ba52:	f7f8 fb3d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba56:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    ba5a:	4a0c      	ldr	r2, [pc, #48]	; (ba8c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x60>)
    ba5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ba60:	6011      	str	r1, [r2, #0]
    ba62:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    ba66:	1d11      	adds	r1, r2, #4
    ba68:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    ba6c:	6008      	str	r0, [r1, #0]
    ba6e:	4808      	ldr	r0, [pc, #32]	; (ba90 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x64>)
    ba70:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    ba74:	b2c0      	uxtb	r0, r0
    ba76:	2803      	cmp	r0, #3
    ba78:	bf1c      	itt	ne
    ba7a:	280b      	cmpne	r0, #11
    ba7c:	bd10      	popne	{r4, pc}
    ba7e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    ba82:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ba86:	f7f8 fb23 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba8a:	0000      	.short	0x0000
    ba8c:	40001514 	.word	0x40001514
    ba90:	40001000 	.word	0x40001000

0000ba94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    ba94:	4901      	ldr	r1, [pc, #4]	; (ba9c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    ba96:	7688      	strb	r0, [r1, #26]
    ba98:	4770      	bx	lr
    ba9a:	0000      	.short	0x0000
    ba9c:	20001688 	.word	0x20001688

0000baa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    baa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baa4:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; be9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    baa8:	2701      	movs	r7, #1
    baaa:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
    baae:	48fc      	ldr	r0, [pc, #1008]	; (bea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    bab0:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
    bab4:	f001 f978 	bl	cda8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    bab8:	4cfa      	ldr	r4, [pc, #1000]	; (bea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    baba:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    babe:	4dfb      	ldr	r5, [pc, #1004]	; (beac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    bac0:	e9c4 0b0f 	strd	r0, fp, [r4, #60]	; 0x3c
    bac4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    bac8:	2600      	movs	r6, #0
    baca:	b1d8      	cbz	r0, bb04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x64>
    bacc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    bad0:	f110 0900 	adds.w	r9, r0, #0
    bad4:	bf18      	it	ne
    bad6:	f04f 0901 	movne.w	r9, #1
    bada:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    bade:	2800      	cmp	r0, #0
    bae0:	bf18      	it	ne
    bae2:	2001      	movne	r0, #1
    bae4:	ea50 0109 	orrs.w	r1, r0, r9
    bae8:	d015      	beq.n	bb16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    baea:	2180      	movs	r1, #128	; 0x80
    baec:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    baf0:	0309      	lsls	r1, r1, #12
    baf2:	f8ca 1000 	str.w	r1, [sl]
    baf6:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    bafa:	f090 0f01 	teq	r0, #1
    bafe:	bf18      	it	ne
    bb00:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb04:	8ba0      	ldrh	r0, [r4, #28]
    bb06:	2896      	cmp	r0, #150	; 0x96
    bb08:	d37e      	bcc.n	bc08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    bb0a:	7a60      	ldrb	r0, [r4, #9]
    bb0c:	2801      	cmp	r0, #1
    bb0e:	d07c      	beq.n	bc0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
    bb10:	2802      	cmp	r0, #2
    bb12:	d07b      	beq.n	bc0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
    bb14:	e0ba      	b.n	bc8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bb16:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
    bb1a:	49e5      	ldr	r1, [pc, #916]	; (beb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    bb1c:	f8df b394 	ldr.w	fp, [pc, #916]	; beb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>
    bb20:	b338      	cbz	r0, bb72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd2>
    bb22:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    bb26:	616f      	str	r7, [r5, #20]
    bb28:	20ff      	movs	r0, #255	; 0xff
    bb2a:	9000      	str	r0, [sp, #0]
    bb2c:	e002      	b.n	bb34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x94>
    bb2e:	1e40      	subs	r0, r0, #1
    bb30:	9000      	str	r0, [sp, #0]
    bb32:	d019      	beq.n	bb68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    bb34:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    bb38:	2800      	cmp	r0, #0
    bb3a:	9800      	ldr	r0, [sp, #0]
    bb3c:	d0f7      	beq.n	bb2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    bb3e:	b198      	cbz	r0, bb68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
    bb40:	6808      	ldr	r0, [r1, #0]
    bb42:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
    bb46:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    bb4a:	4558      	cmp	r0, fp
    bb4c:	bf3c      	itt	cc
    bb4e:	2000      	movcc	r0, #0
    bb50:	f000 faba 	blcc	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bb54:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
    bb58:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    bb5c:	2001      	movs	r0, #1
    bb5e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bb62:	642f      	str	r7, [r5, #64]	; 0x40
    bb64:	63af      	str	r7, [r5, #56]	; 0x38
    bb66:	e007      	b.n	bb78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd8>
    bb68:	f640 3167 	movw	r1, #2919	; 0xb67
    bb6c:	203e      	movs	r0, #62	; 0x3e
    bb6e:	f7f8 faaf 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb72:	f1b9 0f00 	cmp.w	r9, #0
    bb76:	d003      	beq.n	bb80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    bb78:	f1b9 0f00 	cmp.w	r9, #0
    bb7c:	d02a      	beq.n	bbd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    bb7e:	e063      	b.n	bc48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    bb80:	6808      	ldr	r0, [r1, #0]
    bb82:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bb86:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    bb8a:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
    bb8e:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
    bb92:	b149      	cbz	r1, bba8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    bb94:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    bb98:	4281      	cmp	r1, r0
    bb9a:	d218      	bcs.n	bbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    bb9c:	2000      	movs	r0, #0
    bb9e:	f000 fa93 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bba2:	642f      	str	r7, [r5, #64]	; 0x40
    bba4:	63af      	str	r7, [r5, #56]	; 0x38
    bba6:	e012      	b.n	bbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    bba8:	49c3      	ldr	r1, [pc, #780]	; (beb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    bbaa:	680a      	ldr	r2, [r1, #0]
    bbac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    bbb0:	b291      	uxth	r1, r2
    bbb2:	0c12      	lsrs	r2, r2, #16
    bbb4:	4298      	cmp	r0, r3
    bbb6:	d303      	bcc.n	bbc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
    bbb8:	290f      	cmp	r1, #15
    bbba:	d906      	bls.n	bbca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    bbbc:	2a02      	cmp	r2, #2
    bbbe:	d204      	bcs.n	bbca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    bbc0:	2001      	movs	r0, #1
    bbc2:	f000 fa81 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bbc6:	642f      	str	r7, [r5, #64]	; 0x40
    bbc8:	e001      	b.n	bbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    bbca:	642f      	str	r7, [r5, #64]	; 0x40
    bbcc:	63af      	str	r7, [r5, #56]	; 0x38
    bbce:	f8db 0000 	ldr.w	r0, [fp]
    bbd2:	9000      	str	r0, [sp, #0]
    bbd4:	2080      	movs	r0, #128	; 0x80
    bbd6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bbda:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
    bbde:	f8d8 1540 	ldr.w	r1, [r8, #1344]	; 0x540
    bbe2:	48b6      	ldr	r0, [pc, #728]	; (bebc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    bbe4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbe8:	f643 2298 	movw	r2, #15000	; 0x3a98
    bbec:	440a      	add	r2, r1
    bbee:	49b4      	ldr	r1, [pc, #720]	; (bec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    bbf0:	4282      	cmp	r2, r0
    bbf2:	d21c      	bcs.n	bc2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18e>
    bbf4:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
    bbf8:	f242 7210 	movw	r2, #10000	; 0x2710
    bbfc:	4410      	add	r0, r2
    bbfe:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    bc02:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    bc06:	e002      	b.n	bc0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16e>
    bc08:	e040      	b.n	bc8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bc0a:	e025      	b.n	bc58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    bc0c:	e031      	b.n	bc72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d2>
    bc0e:	4aad      	ldr	r2, [pc, #692]	; (bec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    bc10:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    bc14:	48ac      	ldr	r0, [pc, #688]	; (bec8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    bc16:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    bc1a:	48ac      	ldr	r0, [pc, #688]	; (becc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    bc1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    bc20:	6001      	str	r1, [r0, #0]
    bc22:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bc24:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bc28:	6320      	str	r0, [r4, #48]	; 0x30
    bc2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc2e:	2000      	movs	r0, #0
    bc30:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
    bc34:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    bc38:	2080      	movs	r0, #128	; 0x80
    bc3a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bc3e:	0300      	lsls	r0, r0, #12
    bc40:	f8ca 0000 	str.w	r0, [sl]
    bc44:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
    bc48:	2080      	movs	r0, #128	; 0x80
    bc4a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bc4e:	0300      	lsls	r0, r0, #12
    bc50:	f8ca 0000 	str.w	r0, [sl]
    bc54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc58:	f7f8 f896 	bl	3d88 <mpsl_fem_pa_configuration_clear>
    bc5c:	2800      	cmp	r0, #0
    bc5e:	bf18      	it	ne
    bc60:	f1b0 3fff 	cmpne.w	r0, #4294967295
    bc64:	d012      	beq.n	bc8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bc66:	f640 0194 	movw	r1, #2196	; 0x894
    bc6a:	f04f 003e 	mov.w	r0, #62	; 0x3e
    bc6e:	f7f8 fa2f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc72:	f7f8 f877 	bl	3d64 <mpsl_fem_lna_configuration_clear>
    bc76:	2800      	cmp	r0, #0
    bc78:	bf18      	it	ne
    bc7a:	f1b0 3fff 	cmpne.w	r0, #4294967295
    bc7e:	d005      	beq.n	bc8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    bc80:	f640 019a 	movw	r1, #2202	; 0x89a
    bc84:	f04f 003e 	mov.w	r0, #62	; 0x3e
    bc88:	f7f8 fa22 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc8c:	4886      	ldr	r0, [pc, #536]	; (bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    bc8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    bc90:	6001      	str	r1, [r0, #0]
    bc92:	6326      	str	r6, [r4, #48]	; 0x30
    bc94:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bc98:	f020 001d 	bic.w	r0, r0, #29
    bc9c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
    bca0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bca4:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    bca8:	7b20      	ldrb	r0, [r4, #12]
    bcaa:	f04f 0900 	mov.w	r9, #0
    bcae:	2800      	cmp	r0, #0
    bcb0:	bf1b      	ittet	ne
    bcb2:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
    bcb6:	2800      	cmpne	r0, #0
    bcb8:	2100      	moveq	r1, #0
    bcba:	2101      	movne	r1, #1
    bcbc:	7a60      	ldrb	r0, [r4, #9]
    bcbe:	2801      	cmp	r0, #1
    bcc0:	d002      	beq.n	bcc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x228>
    bcc2:	2802      	cmp	r0, #2
    bcc4:	d00a      	beq.n	bcdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x23c>
    bcc6:	e005      	b.n	bcd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    bcc8:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    bccc:	2800      	cmp	r0, #0
    bcce:	bf18      	it	ne
    bcd0:	f04f 0908 	movne.w	r9, #8
    bcd4:	f019 0f0b 	tst.w	r9, #11
    bcd8:	d118      	bne.n	bd0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x26c>
    bcda:	e011      	b.n	bd00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x260>
    bcdc:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    bce0:	2800      	cmp	r0, #0
    bce2:	bf18      	it	ne
    bce4:	f04f 0902 	movne.w	r9, #2
    bce8:	4879      	ldr	r0, [pc, #484]	; (bed0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    bcea:	6800      	ldr	r0, [r0, #0]
    bcec:	f010 0f01 	tst.w	r0, #1
    bcf0:	bf08      	it	eq
    bcf2:	f049 0904 	orreq.w	r9, r9, #4
    bcf6:	2900      	cmp	r1, #0
    bcf8:	bf18      	it	ne
    bcfa:	f049 0901 	orrne.w	r9, r9, #1
    bcfe:	e7e9      	b.n	bcd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
    bd00:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    bd04:	2800      	cmp	r0, #0
    bd06:	bf18      	it	ne
    bd08:	f049 0910 	orrne.w	r9, r9, #16
    bd0c:	4871      	ldr	r0, [pc, #452]	; (bed4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    bd0e:	7800      	ldrb	r0, [r0, #0]
    bd10:	b1c0      	cbz	r0, bd44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a4>
    bd12:	4871      	ldr	r0, [pc, #452]	; (bed8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    bd14:	6800      	ldr	r0, [r0, #0]
    bd16:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    bd1a:	bf1b      	ittet	ne
    bd1c:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
    bd20:	2900      	cmpne	r1, #0
    bd22:	2100      	moveq	r1, #0
    bd24:	2101      	movne	r1, #1
    bd26:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    bd2a:	2800      	cmp	r0, #0
    bd2c:	bf1b      	ittet	ne
    bd2e:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
    bd32:	2800      	cmpne	r0, #0
    bd34:	2000      	moveq	r0, #0
    bd36:	2001      	movne	r0, #1
    bd38:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    bd3c:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
    bd40:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bd44:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    bd48:	2800      	cmp	r0, #0
    bd4a:	bf18      	it	ne
    bd4c:	2001      	movne	r0, #1
    bd4e:	f88d 0000 	strb.w	r0, [sp]
    bd52:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
    bd56:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bd5a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bd5e:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bd62:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
    bd66:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
    bd6a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
    bd6e:	f8c5 616c 	str.w	r6, [r5, #364]	; 0x16c
    bd72:	4668      	mov	r0, sp
    bd74:	f7f7 ff98 	bl	3ca8 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    bd78:	2800      	cmp	r0, #0
    bd7a:	bf18      	it	ne
    bd7c:	f049 0910 	orrne.w	r9, r9, #16
    bd80:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
    bd84:	f019 0f10 	tst.w	r9, #16
    bd88:	d006      	beq.n	bd98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
    bd8a:	f019 0f08 	tst.w	r9, #8
    bd8e:	bf02      	ittt	eq
    bd90:	7a60      	ldrbeq	r0, [r4, #9]
    bd92:	2801      	cmpeq	r0, #1
    bd94:	f049 0920 	orreq.w	r9, r9, #32
    bd98:	4850      	ldr	r0, [pc, #320]	; (bedc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    bd9a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bd9e:	6260      	str	r0, [r4, #36]	; 0x24
    bda0:	4846      	ldr	r0, [pc, #280]	; (bebc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    bda2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bda6:	6220      	str	r0, [r4, #32]
    bda8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    bdac:	2802      	cmp	r0, #2
    bdae:	bf1c      	itt	ne
    bdb0:	7a60      	ldrbne	r0, [r4, #9]
    bdb2:	2802      	cmpne	r0, #2
    bdb4:	7e21      	ldrb	r1, [r4, #24]
    bdb6:	d00e      	beq.n	bdd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x336>
    bdb8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    bdbc:	7a62      	ldrb	r2, [r4, #9]
    bdbe:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    bdc2:	7a20      	ldrb	r0, [r4, #8]
    bdc4:	f04f 0a00 	mov.w	sl, #0
    bdc8:	b188      	cbz	r0, bdee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
    bdca:	f019 0f11 	tst.w	r9, #17
    bdce:	d013      	beq.n	bdf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    bdd0:	f7fe ffc2 	bl	ad58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bdd4:	e03d      	b.n	be52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
    bdd6:	2904      	cmp	r1, #4
    bdd8:	bf18      	it	ne
    bdda:	2908      	cmpne	r1, #8
    bddc:	d1ec      	bne.n	bdb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    bdde:	4840      	ldr	r0, [pc, #256]	; (bee0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    bde0:	6800      	ldr	r0, [r0, #0]
    bde2:	f010 0f06 	tst.w	r0, #6
    bde6:	bf0c      	ite	eq
    bde8:	2108      	moveq	r1, #8
    bdea:	2104      	movne	r1, #4
    bdec:	e7e4      	b.n	bdb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    bdee:	71e6      	strb	r6, [r4, #7]
    bdf0:	7226      	strb	r6, [r4, #8]
    bdf2:	7266      	strb	r6, [r4, #9]
    bdf4:	7326      	strb	r6, [r4, #12]
    bdf6:	e02c      	b.n	be52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
    bdf8:	2801      	cmp	r0, #1
    bdfa:	bf14      	ite	ne
    bdfc:	f04f 0801 	movne.w	r8, #1
    be00:	f04f 0800 	moveq.w	r8, #0
    be04:	79e0      	ldrb	r0, [r4, #7]
    be06:	2801      	cmp	r0, #1
    be08:	bf18      	it	ne
    be0a:	2000      	movne	r0, #0
    be0c:	9000      	str	r0, [sp, #0]
    be0e:	71e6      	strb	r6, [r4, #7]
    be10:	7226      	strb	r6, [r4, #8]
    be12:	7266      	strb	r6, [r4, #9]
    be14:	8ba0      	ldrh	r0, [r4, #28]
    be16:	2300      	movs	r3, #0
    be18:	b3f2      	cbz	r2, be98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    be1a:	f1b8 0f00 	cmp.w	r8, #0
    be1e:	d06e      	beq.n	befe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45e>
    be20:	f1b8 0f00 	cmp.w	r8, #0
    be24:	d005      	beq.n	be32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    be26:	2a01      	cmp	r2, #1
    be28:	d076      	beq.n	bf18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x478>
    be2a:	f004 fd4b 	bl	108c4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    be2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    be30:	1843      	adds	r3, r0, r1
    be32:	9800      	ldr	r0, [sp, #0]
    be34:	4619      	mov	r1, r3
    be36:	b140      	cbz	r0, be4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    be38:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
    be3c:	4288      	cmp	r0, r1
    be3e:	bf92      	itee	ls
    be40:	71e7      	strbls	r7, [r4, #7]
    be42:	612f      	strhi	r7, [r5, #16]
    be44:	f04f 0a01 	movhi.w	sl, #1
    be48:	d803      	bhi.n	be52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
    be4a:	7aa2      	ldrb	r2, [r4, #10]
    be4c:	4640      	mov	r0, r8
    be4e:	f7ff fc19 	bl	b684 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    be52:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    be56:	b1b0      	cbz	r0, be86 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    be58:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    be5c:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
    be60:	f040 0002 	orr.w	r0, r0, #2
    be64:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    be68:	480f      	ldr	r0, [pc, #60]	; (bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    be6a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    be6e:	6001      	str	r1, [r0, #0]
    be70:	6960      	ldr	r0, [r4, #20]
    be72:	491c      	ldr	r1, [pc, #112]	; (bee4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    be74:	f020 0003 	bic.w	r0, r0, #3
    be78:	6160      	str	r0, [r4, #20]
    be7a:	6008      	str	r0, [r1, #0]
    be7c:	491b      	ldr	r1, [pc, #108]	; (beec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
    be7e:	481a      	ldr	r0, [pc, #104]	; (bee8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
    be80:	6008      	str	r0, [r1, #0]
    be82:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    be86:	f8df 8068 	ldr.w	r8, [pc, #104]	; bef0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>
    be8a:	f019 0f01 	tst.w	r9, #1
    be8e:	d048      	beq.n	bf22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x482>
    be90:	f8d8 0000 	ldr.w	r0, [r8]
    be94:	4780      	blx	r0
    be96:	e07a      	b.n	bf8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    be98:	e02c      	b.n	bef4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>
    be9a:	e030      	b.n	befe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45e>
    be9c:	40008000 	.word	0x40008000
    bea0:	4000800c 	.word	0x4000800c
    bea4:	20001688 	.word	0x20001688
    bea8:	4001f508 	.word	0x4001f508
    beac:	40001000 	.word	0x40001000
    beb0:	40001548 	.word	0x40001548
    beb4:	4000111c 	.word	0x4000111c
    beb8:	40001574 	.word	0x40001574
    bebc:	40008004 	.word	0x40008004
    bec0:	40008140 	.word	0x40008140
    bec4:	4001f098 	.word	0x4001f098
    bec8:	40001014 	.word	0x40001014
    becc:	4001f504 	.word	0x4001f504
    bed0:	40001400 	.word	0x40001400
    bed4:	200001d4 	.word	0x200001d4
    bed8:	40001640 	.word	0x40001640
    bedc:	40008008 	.word	0x40008008
    bee0:	40001414 	.word	0x40001414
    bee4:	40001900 	.word	0x40001900
    bee8:	00023280 	.word	0x00023280
    beec:	40001910 	.word	0x40001910
    bef0:	20001678 	.word	0x20001678
    bef4:	f640 0147 	movw	r1, #2119	; 0x847
    bef8:	203e      	movs	r0, #62	; 0x3e
    befa:	f7f8 f8e9 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    befe:	2a01      	cmp	r2, #1
    bf00:	d005      	beq.n	bf0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46e>
    bf02:	f004 fced 	bl	108e0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    bf06:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bf08:	1843      	adds	r3, r0, r1
    bf0a:	e792      	b.n	be32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    bf0c:	e004      	b.n	bf18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x478>
    bf0e:	f000 fb13 	bl	c538 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    bf12:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bf14:	1843      	adds	r3, r0, r1
    bf16:	e78c      	b.n	be32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    bf18:	f000 fb00 	bl	c51c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    bf1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bf1e:	1843      	adds	r3, r0, r1
    bf20:	e787      	b.n	be32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
    bf22:	f019 0f02 	tst.w	r9, #2
    bf26:	d029      	beq.n	bf7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
    bf28:	f019 0f04 	tst.w	r9, #4
    bf2c:	d120      	bne.n	bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    bf2e:	f001 f889 	bl	d044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bf32:	b9e8      	cbnz	r0, bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    bf34:	f001 f876 	bl	d024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bf38:	b9d0      	cbnz	r0, bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    bf3a:	4840      	ldr	r0, [pc, #256]	; (c03c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>)
    bf3c:	6800      	ldr	r0, [r0, #0]
    bf3e:	f3c0 5342 	ubfx	r3, r0, #21, #3
    bf42:	f3c0 6200 	ubfx	r2, r0, #24, #1
    bf46:	f000 010f 	and.w	r1, r0, #15
    bf4a:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    bf4e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bf52:	b16a      	cbz	r2, bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    bf54:	2900      	cmp	r1, #0
    bf56:	bf1c      	itt	ne
    bf58:	f1bc 0f00 	cmpne.w	ip, #0
    bf5c:	2800      	cmpne	r0, #0
    bf5e:	d107      	bne.n	bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    bf60:	4837      	ldr	r0, [pc, #220]	; (c040 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a0>)
    bf62:	6800      	ldr	r0, [r0, #0]
    bf64:	2800      	cmp	r0, #0
    bf66:	bf18      	it	ne
    bf68:	2b03      	cmpne	r3, #3
    bf6a:	bf38      	it	cc
    bf6c:	f049 0904 	orrcc.w	r9, r9, #4
    bf70:	ea27 0099 	bic.w	r0, r7, r9, lsr #2
    bf74:	4651      	mov	r1, sl
    bf76:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bf7a:	e007      	b.n	bf8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ec>
    bf7c:	f019 0f28 	tst.w	r9, #40	; 0x28
    bf80:	d005      	beq.n	bf8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
    bf82:	f8d8 2008 	ldr.w	r2, [r8, #8]
    bf86:	ea27 1159 	bic.w	r1, r7, r9, lsr #5
    bf8a:	4650      	mov	r0, sl
    bf8c:	4790      	blx	r2
    bf8e:	f019 0f10 	tst.w	r9, #16
    bf92:	bf1c      	itt	ne
    bf94:	f8d8 000c 	ldrne.w	r0, [r8, #12]
    bf98:	4780      	blxne	r0
    bf9a:	7a60      	ldrb	r0, [r4, #9]
    bf9c:	2802      	cmp	r0, #2
    bf9e:	d118      	bne.n	bfd2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
    bfa0:	7b20      	ldrb	r0, [r4, #12]
    bfa2:	b1b0      	cbz	r0, bfd2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
    bfa4:	2802      	cmp	r0, #2
    bfa6:	d006      	beq.n	bfb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x516>
    bfa8:	2801      	cmp	r0, #1
    bfaa:	d035      	beq.n	c018 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x578>
    bfac:	f640 4134 	movw	r1, #3124	; 0xc34
    bfb0:	203e      	movs	r0, #62	; 0x3e
    bfb2:	f7f8 f88d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfb6:	6921      	ldr	r1, [r4, #16]
    bfb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bfba:	4408      	add	r0, r1
    bfbc:	4921      	ldr	r1, [pc, #132]	; (c044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a4>)
    bfbe:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bfc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bfc4:	4920      	ldr	r1, [pc, #128]	; (c048 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>)
    bfc6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    bfca:	6320      	str	r0, [r4, #48]	; 0x30
    bfcc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    bfd0:	6008      	str	r0, [r1, #0]
    bfd2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    bfd6:	2800      	cmp	r0, #0
    bfd8:	bf18      	it	ne
    bfda:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfde:	f019 0f10 	tst.w	r9, #16
    bfe2:	bf14      	ite	ne
    bfe4:	9600      	strne	r6, [sp, #0]
    bfe6:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfea:	9800      	ldr	r0, [sp, #0]
    bfec:	1c40      	adds	r0, r0, #1
    bfee:	9000      	str	r0, [sp, #0]
    bff0:	f1b0 3fff 	cmp.w	r0, #4294967295
    bff4:	d01d      	beq.n	c032 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x592>
    bff6:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
    bffa:	b2c0      	uxtb	r0, r0
    bffc:	2804      	cmp	r0, #4
    bffe:	bf18      	it	ne
    c000:	280c      	cmpne	r0, #12
    c002:	d0f2      	beq.n	bfea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x54a>
    c004:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c008:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c00c:	f04f 0002 	mov.w	r0, #2
    c010:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    c014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c018:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c01a:	6920      	ldr	r0, [r4, #16]
    c01c:	4288      	cmp	r0, r1
    c01e:	bf84      	itt	hi
    c020:	4908      	ldrhi	r1, [pc, #32]	; (c044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a4>)
    c022:	f8c1 0540 	strhi.w	r0, [r1, #1344]	; 0x540
    c026:	d8cc      	bhi.n	bfc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x522>
    c028:	f640 4135 	movw	r1, #3125	; 0xc35
    c02c:	203e      	movs	r0, #62	; 0x3e
    c02e:	f7f8 f84f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c032:	f640 415d 	movw	r1, #3165	; 0xc5d
    c036:	203e      	movs	r0, #62	; 0x3e
    c038:	f7f8 f84a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c03c:	40001450 	.word	0x40001450
    c040:	40001454 	.word	0x40001454
    c044:	40008004 	.word	0x40008004
    c048:	4001f504 	.word	0x4001f504

0000c04c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c04c:	b510      	push	{r4, lr}
    c04e:	4b19      	ldr	r3, [pc, #100]	; (c0b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
    c050:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    c054:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    c058:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
    c05c:	f891 c000 	ldrb.w	ip, [r1]
    c060:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c064:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    c068:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
    c06c:	4912      	ldr	r1, [pc, #72]	; (c0b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x6c>)
    c06e:	f8d1 c000 	ldr.w	ip, [r1]
    c072:	2101      	movs	r1, #1
    c074:	fa01 f000 	lsl.w	r0, r1, r0
    c078:	ea4c 0100 	orr.w	r1, ip, r0
    c07c:	b2c9      	uxtb	r1, r1
    c07e:	b132      	cbz	r2, c08e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
    c080:	2a01      	cmp	r2, #1
    c082:	d00b      	beq.n	c09c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    c084:	f240 51ad 	movw	r1, #1453	; 0x5ad
    c088:	203e      	movs	r0, #62	; 0x3e
    c08a:	f7f8 f821 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c08e:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    c092:	f3c2 2207 	ubfx	r2, r2, #8, #8
    c096:	ea22 0000 	bic.w	r0, r2, r0
    c09a:	e005      	b.n	c0a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>
    c09c:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
    c0a0:	b2c0      	uxtb	r0, r0
    c0a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    c0a6:	4310      	orrs	r0, r2
    c0a8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c0ac:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c0b0:	bd10      	pop	{r4, pc}
    c0b2:	0000      	.short	0x0000
    c0b4:	40001000 	.word	0x40001000
    c0b8:	40001640 	.word	0x40001640

0000c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c0bc:	4901      	ldr	r1, [pc, #4]	; (c0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c0be:	2001      	movs	r0, #1
    c0c0:	7008      	strb	r0, [r1, #0]
    c0c2:	4770      	bx	lr
    c0c4:	200001d4 	.word	0x200001d4
    c0c8:	4a0e      	ldr	r2, [pc, #56]	; (c104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
    c0ca:	490f      	ldr	r1, [pc, #60]	; (c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
    c0cc:	6813      	ldr	r3, [r2, #0]
    c0ce:	b170      	cbz	r0, c0ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
    c0d0:	f023 0382 	bic.w	r3, r3, #130	; 0x82
    c0d4:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
    c0d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c0dc:	6013      	str	r3, [r2, #0]
    c0de:	680a      	ldr	r2, [r1, #0]
    c0e0:	f022 0210 	bic.w	r2, r2, #16
    c0e4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    c0e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    c0ec:	e005      	b.n	c0fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
    c0ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    c0f2:	6013      	str	r3, [r2, #0]
    c0f4:	680a      	ldr	r2, [r1, #0]
    c0f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    c0fa:	600a      	str	r2, [r1, #0]
    c0fc:	4903      	ldr	r1, [pc, #12]	; (c10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
    c0fe:	f881 0036 	strb.w	r0, [r1, #54]	; 0x36
    c102:	4770      	bx	lr
    c104:	4000173c 	.word	0x4000173c
    c108:	4000177c 	.word	0x4000177c
    c10c:	20001688 	.word	0x20001688
    c110:	4909      	ldr	r1, [pc, #36]	; (c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    c112:	7a49      	ldrb	r1, [r1, #9]
    c114:	2901      	cmp	r1, #1
    c116:	d00a      	beq.n	c12e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x72>
    c118:	2902      	cmp	r1, #2
    c11a:	bf0c      	ite	eq
    c11c:	f010 0f02 	tsteq.w	r0, #2
    c120:	4770      	bxne	lr
    c122:	bf00      	nop
    c124:	4905      	ldr	r1, [pc, #20]	; (c13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    c126:	f04f 0001 	mov.w	r0, #1
    c12a:	6108      	str	r0, [r1, #16]
    c12c:	4770      	bx	lr
    c12e:	f010 0f04 	tst.w	r0, #4
    c132:	d0f7      	beq.n	c124 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c134:	4770      	bx	lr
    c136:	0000      	.short	0x0000
    c138:	20001688 	.word	0x20001688
    c13c:	40001000 	.word	0x40001000
    c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c142:	4c3b      	ldr	r4, [pc, #236]	; (c230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x174>)
    c144:	4605      	mov	r5, r0
    c146:	2d01      	cmp	r5, #1
    c148:	7620      	strb	r0, [r4, #24]
    c14a:	483a      	ldr	r0, [pc, #232]	; (c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x178>)
    c14c:	bf08      	it	eq
    c14e:	2103      	moveq	r1, #3
    c150:	d010      	beq.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c152:	2d02      	cmp	r5, #2
    c154:	bf08      	it	eq
    c156:	2104      	moveq	r1, #4
    c158:	d00c      	beq.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c15a:	2d04      	cmp	r5, #4
    c15c:	bf08      	it	eq
    c15e:	2106      	moveq	r1, #6
    c160:	d008      	beq.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c162:	2d08      	cmp	r5, #8
    c164:	bf08      	it	eq
    c166:	2105      	moveq	r1, #5
    c168:	d004      	beq.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb8>
    c16a:	f640 5155 	movw	r1, #3413	; 0xd55
    c16e:	203e      	movs	r0, #62	; 0x3e
    c170:	f7f7 ffae 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c174:	6001      	str	r1, [r0, #0]
    c176:	7ea1      	ldrb	r1, [r4, #26]
    c178:	482f      	ldr	r0, [pc, #188]	; (c238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>)
    c17a:	5c40      	ldrb	r0, [r0, r1]
    c17c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c180:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c184:	bf3a      	itte	cc
    c186:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    c18a:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    c18e:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    c192:	4e2a      	ldr	r6, [pc, #168]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>)
    c194:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
    c198:	4a29      	ldr	r2, [pc, #164]	; (c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>)
    c19a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c19e:	6010      	str	r0, [r2, #0]
    c1a0:	7a20      	ldrb	r0, [r4, #8]
    c1a2:	2801      	cmp	r0, #1
    c1a4:	d113      	bne.n	c1ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x112>
    c1a6:	7aa0      	ldrb	r0, [r4, #10]
    c1a8:	f994 2019 	ldrsb.w	r2, [r4, #25]
    c1ac:	466b      	mov	r3, sp
    c1ae:	f000 f9ed 	bl	c58c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c1b2:	f99d 0000 	ldrsb.w	r0, [sp]
    c1b6:	f000 f9ab 	bl	c510 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c1ba:	f10d 0001 	add.w	r0, sp, #1
    c1be:	f7f7 fdef 	bl	3da0 <mpsl_fem_pa_gain_set>
    c1c2:	b120      	cbz	r0, c1ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x112>
    c1c4:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c1c8:	203e      	movs	r0, #62	; 0x3e
    c1ca:	f7f7 ff81 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ce:	20ff      	movs	r0, #255	; 0xff
    c1d0:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    c1d4:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    c1d8:	f440 7088 	orr.w	r0, r0, #272	; 0x110
    c1dc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    c1e0:	f000 ff4a 	bl	d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c1e4:	b180      	cbz	r0, c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14c>
    c1e6:	f015 0f0c 	tst.w	r5, #12
    c1ea:	d00a      	beq.n	c202 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x146>
    c1ec:	2001      	movs	r0, #1
    c1ee:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    c1f2:	f7ff ff69 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c1f6:	2001      	movs	r0, #1
    c1f8:	63f0      	str	r0, [r6, #60]	; 0x3c
    c1fa:	6430      	str	r0, [r6, #64]	; 0x40
    c1fc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    c200:	e002      	b.n	c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14c>
    c202:	2000      	movs	r0, #0
    c204:	f7ff ff60 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c208:	4628      	mov	r0, r5
    c20a:	f000 f927 	bl	c45c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    c20e:	f000 ff19 	bl	d044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c212:	2800      	cmp	r0, #0
    c214:	bf18      	it	ne
    c216:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    c218:	f000 ff04 	bl	d024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c21c:	2800      	cmp	r0, #0
    c21e:	bf18      	it	ne
    c220:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    c222:	4808      	ldr	r0, [pc, #32]	; (c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>)
    c224:	6801      	ldr	r1, [r0, #0]
    c226:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c22a:	6001      	str	r1, [r0, #0]
    c22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c22e:	0000      	.short	0x0000
    c230:	20001688 	.word	0x20001688
    c234:	40001510 	.word	0x40001510
    c238:	0000c33c 	.word	0x0000c33c
    c23c:	40001000 	.word	0x40001000
    c240:	40001554 	.word	0x40001554
    c244:	40001568 	.word	0x40001568
    c248:	b538      	push	{r3, r4, r5, lr}
    c24a:	4a2c      	ldr	r2, [pc, #176]	; (c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x240>)
    c24c:	4604      	mov	r4, r0
    c24e:	2c01      	cmp	r4, #1
    c250:	7610      	strb	r0, [r2, #24]
    c252:	482b      	ldr	r0, [pc, #172]	; (c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>)
    c254:	bf08      	it	eq
    c256:	2103      	moveq	r1, #3
    c258:	d010      	beq.n	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c25a:	2c02      	cmp	r4, #2
    c25c:	bf08      	it	eq
    c25e:	2104      	moveq	r1, #4
    c260:	d00c      	beq.n	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c262:	2c04      	cmp	r4, #4
    c264:	bf08      	it	eq
    c266:	2106      	moveq	r1, #6
    c268:	d008      	beq.n	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c26a:	2c08      	cmp	r4, #8
    c26c:	bf08      	it	eq
    c26e:	2105      	moveq	r1, #5
    c270:	d004      	beq.n	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c272:	f640 5155 	movw	r1, #3413	; 0xd55
    c276:	203e      	movs	r0, #62	; 0x3e
    c278:	f7f7 ff2a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c27c:	6001      	str	r1, [r0, #0]
    c27e:	7e91      	ldrb	r1, [r2, #26]
    c280:	4820      	ldr	r0, [pc, #128]	; (c304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>)
    c282:	5c40      	ldrb	r0, [r0, r1]
    c284:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c288:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c28c:	bf3a      	itte	cc
    c28e:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    c292:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
    c296:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    c29a:	4b1b      	ldr	r3, [pc, #108]	; (c308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24c>)
    c29c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    c2a0:	4b1a      	ldr	r3, [pc, #104]	; (c30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x250>)
    c2a2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c2a6:	6018      	str	r0, [r3, #0]
    c2a8:	4620      	mov	r0, r4
    c2aa:	f992 2019 	ldrsb.w	r2, [r2, #25]
    c2ae:	466b      	mov	r3, sp
    c2b0:	f000 f96c 	bl	c58c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c2b4:	f99d 0000 	ldrsb.w	r0, [sp]
    c2b8:	f000 f92a 	bl	c510 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c2bc:	f10d 0001 	add.w	r0, sp, #1
    c2c0:	f7f7 fd6e 	bl	3da0 <mpsl_fem_pa_gain_set>
    c2c4:	b120      	cbz	r0, c2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    c2c6:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c2ca:	203e      	movs	r0, #62	; 0x3e
    c2cc:	f7f7 ff00 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2d0:	f000 feb8 	bl	d044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c2d4:	2800      	cmp	r0, #0
    c2d6:	bf08      	it	eq
    c2d8:	bd38      	popeq	{r3, r4, r5, pc}
    c2da:	4a0d      	ldr	r2, [pc, #52]	; (c310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x254>)
    c2dc:	6811      	ldr	r1, [r2, #0]
    c2de:	0650      	lsls	r0, r2, #25
    c2e0:	2c02      	cmp	r4, #2
    c2e2:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c2e6:	bf0c      	ite	eq
    c2e8:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    c2ec:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    c2f0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c2f4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c2f8:	6010      	str	r0, [r2, #0]
    c2fa:	bd38      	pop	{r3, r4, r5, pc}
    c2fc:	20001688 	.word	0x20001688
    c300:	40001510 	.word	0x40001510
    c304:	0000c33c 	.word	0x0000c33c
    c308:	40001000 	.word	0x40001000
    c30c:	40001554 	.word	0x40001554
    c310:	40001588 	.word	0x40001588
    c314:	00000004 	.word	0x00000004
    c318:	05dc0000 	.word	0x05dc0000
    c31c:	000003e8 	.word	0x000003e8
	...
    c328:	000017d4 	.word	0x000017d4
    c32c:	a1e0a62c 	.word	0xa1e0a62c
    c330:	a8200000 	.word	0xa8200000
    c334:	00000000 	.word	0x00000000
    c338:	a8200000 	.word	0xa8200000
    c33c:	0a080604 	.word	0x0a080604
    c340:	12100e0c 	.word	0x12100e0c
    c344:	1c181614 	.word	0x1c181614
    c348:	2422201e 	.word	0x2422201e
    c34c:	2c2a2826 	.word	0x2c2a2826
    c350:	3432302e 	.word	0x3432302e
    c354:	3c3a3836 	.word	0x3c3a3836
    c358:	4442403e 	.word	0x4442403e
    c35c:	4c4a4846 	.word	0x4c4a4846
    c360:	501a024e 	.word	0x501a024e
    c364:	00000001 	.word	0x00000001
    c368:	40001110 	.word	0x40001110
	...
    c380:	00001e14 	.word	0x00001e14
    c384:	00001130 	.word	0x00001130
    c388:	00000000 	.word	0x00000000
    c38c:	0000ea60 	.word	0x0000ea60
	...
    c39c:	0000ea60 	.word	0x0000ea60
    c3a0:	00000002 	.word	0x00000002
	...
    c3b8:	40008000 	.word	0x40008000
	...
    c3cc:	40008000 	.word	0x40008000
	...
    c3dc:	00000001 	.word	0x00000001
	...
    c3f4:	00000028 	.word	0x00000028
    c3f8:	00000018 	.word	0x00000018
    c3fc:	00000000 	.word	0x00000000
    c400:	00000150 	.word	0x00000150
	...
    c410:	00000150 	.word	0x00000150
    c414:	00000000 	.word	0x00000000
    c418:	00001e14 	.word	0x00001e14
    c41c:	00001130 	.word	0x00001130
    c420:	00000000 	.word	0x00000000
    c424:	00005fb4 	.word	0x00005fb4
	...
    c434:	0000733c 	.word	0x0000733c
    c438:	00000000 	.word	0x00000000
    c43c:	00001770 	.word	0x00001770
    c440:	00000fa0 	.word	0x00000fa0
    c444:	00000000 	.word	0x00000000
    c448:	0000283c 	.word	0x0000283c
	...
    c458:	0000283c 	.word	0x0000283c

0000c45c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
    c45c:	b510      	push	{r4, lr}
    c45e:	4604      	mov	r4, r0
    c460:	f000 fe0a 	bl	d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c464:	2800      	cmp	r0, #0
    c466:	bf08      	it	eq
    c468:	bd10      	popeq	{r4, pc}
    c46a:	4908      	ldr	r1, [pc, #32]	; (c48c <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
    c46c:	2c08      	cmp	r4, #8
    c46e:	bf18      	it	ne
    c470:	2c04      	cmpne	r4, #4
    c472:	6808      	ldr	r0, [r1, #0]
    c474:	bf03      	ittte	eq
    c476:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
    c47a:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
    c47e:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    c482:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
    c486:	6008      	str	r0, [r1, #0]
    c488:	bd10      	pop	{r4, pc}
    c48a:	0000      	.short	0x0000
    c48c:	40001740 	.word	0x40001740

0000c490 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c490:	b570      	push	{r4, r5, r6, lr}
    c492:	4605      	mov	r5, r0
    c494:	4614      	mov	r4, r2
    c496:	4608      	mov	r0, r1
    c498:	f7ff f8ee 	bl	b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c49c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c4a0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c4a4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c4a8:	4807      	ldr	r0, [pc, #28]	; (c4c8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c4aa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c4ae:	4408      	add	r0, r1
    c4b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c4b4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c4b8:	fbb0 f5f1 	udiv	r5, r0, r1
    c4bc:	4620      	mov	r0, r4
    c4be:	f7ff f88d 	bl	b5dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c4c2:	4428      	add	r0, r5
    c4c4:	1d40      	adds	r0, r0, #5
    c4c6:	bd70      	pop	{r4, r5, r6, pc}
    c4c8:	0000c568 	.word	0x0000c568

0000c4cc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c4cc:	b570      	push	{r4, r5, r6, lr}
    c4ce:	f8df c03c 	ldr.w	ip, [pc, #60]	; c50c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x40>
    c4d2:	461c      	mov	r4, r3
    c4d4:	4b0c      	ldr	r3, [pc, #48]	; (c508 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c4d6:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
    c4da:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    c4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c4e2:	ebcc 10c0 	rsb	r0, ip, r0, lsl #7
    c4e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c4ea:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c4ee:	4418      	add	r0, r3
    c4f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c4f4:	fbb0 f5f1 	udiv	r5, r0, r1
    c4f8:	4610      	mov	r0, r2
    c4fa:	f7ff f86f 	bl	b5dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c4fe:	4428      	add	r0, r5
    c500:	4420      	add	r0, r4
    c502:	1d40      	adds	r0, r0, #5
    c504:	bd70      	pop	{r4, r5, r6, pc}
    c506:	0000      	.short	0x0000
    c508:	0000c568 	.word	0x0000c568
    c50c:	0000c554 	.word	0x0000c554

0000c510 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c510:	4901      	ldr	r1, [pc, #4]	; (c518 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c512:	b2c0      	uxtb	r0, r0
    c514:	6008      	str	r0, [r1, #0]
    c516:	4770      	bx	lr
    c518:	4000150c 	.word	0x4000150c

0000c51c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c51c:	4a05      	ldr	r2, [pc, #20]	; (c534 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c51e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c526:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c52a:	fbb1 f1f2 	udiv	r1, r1, r2
    c52e:	4408      	add	r0, r1
    c530:	1e80      	subs	r0, r0, #2
    c532:	4770      	bx	lr
    c534:	0000c554 	.word	0x0000c554

0000c538 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c538:	4a05      	ldr	r2, [pc, #20]	; (c550 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c53a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c53e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c542:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c546:	fbb1 f1f2 	udiv	r1, r1, r2
    c54a:	4408      	add	r0, r1
    c54c:	4770      	bx	lr
    c54e:	0000      	.short	0x0000
    c550:	0000c554 	.word	0x0000c554
    c554:	05dc0000 	.word	0x05dc0000
    c558:	000003e8 	.word	0x000003e8
	...
    c564:	000017d4 	.word	0x000017d4
    c568:	00000000 	.word	0x00000000
    c56c:	00001e14 	.word	0x00001e14
    c570:	00001130 	.word	0x00001130
    c574:	00000000 	.word	0x00000000
    c578:	0000ea60 	.word	0x0000ea60
	...
    c588:	0000ea60 	.word	0x0000ea60

0000c58c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    c58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c590:	461e      	mov	r6, r3
    c592:	4690      	mov	r8, r2
    c594:	460f      	mov	r7, r1
    c596:	4605      	mov	r5, r0
    c598:	f7f3 fdcc 	bl	134 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    c59c:	4c25      	ldr	r4, [pc, #148]	; (c634 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa8>)
    c59e:	4681      	mov	r9, r0
    c5a0:	7820      	ldrb	r0, [r4, #0]
    c5a2:	42a8      	cmp	r0, r5
    c5a4:	bf04      	itt	eq
    c5a6:	7860      	ldrbeq	r0, [r4, #1]
    c5a8:	42b8      	cmpeq	r0, r7
    c5aa:	d10b      	bne.n	c5c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
    c5ac:	f994 0002 	ldrsb.w	r0, [r4, #2]
    c5b0:	4540      	cmp	r0, r8
    c5b2:	bf04      	itt	eq
    c5b4:	78e0      	ldrbeq	r0, [r4, #3]
    c5b6:	4548      	cmpeq	r0, r9
    c5b8:	d104      	bne.n	c5c4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
    c5ba:	88a0      	ldrh	r0, [r4, #4]
    c5bc:	8030      	strh	r0, [r6, #0]
    c5be:	79a0      	ldrb	r0, [r4, #6]
    c5c0:	70b0      	strb	r0, [r6, #2]
    c5c2:	e032      	b.n	c62a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x9e>
    c5c4:	4642      	mov	r2, r8
    c5c6:	2d01      	cmp	r5, #1
    c5c8:	bf08      	it	eq
    c5ca:	2000      	moveq	r0, #0
    c5cc:	d010      	beq.n	c5f0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c5ce:	2d02      	cmp	r5, #2
    c5d0:	bf08      	it	eq
    c5d2:	2001      	moveq	r0, #1
    c5d4:	d00c      	beq.n	c5f0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c5d6:	2d04      	cmp	r5, #4
    c5d8:	bf08      	it	eq
    c5da:	2003      	moveq	r0, #3
    c5dc:	d008      	beq.n	c5f0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c5de:	2d08      	cmp	r5, #8
    c5e0:	bf08      	it	eq
    c5e2:	2002      	moveq	r0, #2
    c5e4:	d004      	beq.n	c5f0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c5e6:	f240 4133 	movw	r1, #1075	; 0x433
    c5ea:	2006      	movs	r0, #6
    c5ec:	f7f7 fd70 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5f0:	466b      	mov	r3, sp
    c5f2:	4639      	mov	r1, r7
    c5f4:	f7f3 fde4 	bl	1c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    c5f8:	b118      	cbz	r0, c602 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    c5fa:	213d      	movs	r1, #61	; 0x3d
    c5fc:	2075      	movs	r0, #117	; 0x75
    c5fe:	f7f7 fd67 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c602:	4638      	mov	r0, r7
    c604:	f7fe fba0 	bl	ad48 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    c608:	4602      	mov	r2, r0
    c60a:	4631      	mov	r1, r6
    c60c:	f99d 0000 	ldrsb.w	r0, [sp]
    c610:	f7f7 fbd2 	bl	3db8 <mpsl_fem_tx_power_split>
    c614:	71e0      	strb	r0, [r4, #7]
    c616:	8830      	ldrh	r0, [r6, #0]
    c618:	80a0      	strh	r0, [r4, #4]
    c61a:	78b0      	ldrb	r0, [r6, #2]
    c61c:	71a0      	strb	r0, [r4, #6]
    c61e:	7025      	strb	r5, [r4, #0]
    c620:	7067      	strb	r7, [r4, #1]
    c622:	f884 8002 	strb.w	r8, [r4, #2]
    c626:	f884 9003 	strb.w	r9, [r4, #3]
    c62a:	f994 0007 	ldrsb.w	r0, [r4, #7]
    c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c632:	0000      	.short	0x0000
    c634:	20000229 	.word	0x20000229

0000c638 <__udivmoddi4>:
    c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c63c:	4607      	mov	r7, r0
    c63e:	468c      	mov	ip, r1
    c640:	4608      	mov	r0, r1
    c642:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c644:	4615      	mov	r5, r2
    c646:	463c      	mov	r4, r7
    c648:	4619      	mov	r1, r3
    c64a:	2b00      	cmp	r3, #0
    c64c:	f040 80c6 	bne.w	c7dc <__udivmoddi4+0x1a4>
    c650:	4282      	cmp	r2, r0
    c652:	fab2 f782 	clz	r7, r2
    c656:	d946      	bls.n	c6e6 <__udivmoddi4+0xae>
    c658:	b14f      	cbz	r7, c66e <__udivmoddi4+0x36>
    c65a:	f1c7 0e20 	rsb	lr, r7, #32
    c65e:	fa24 fe0e 	lsr.w	lr, r4, lr
    c662:	fa00 f307 	lsl.w	r3, r0, r7
    c666:	40bd      	lsls	r5, r7
    c668:	ea4e 0c03 	orr.w	ip, lr, r3
    c66c:	40bc      	lsls	r4, r7
    c66e:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c672:	fa1f fe85 	uxth.w	lr, r5
    c676:	fbbc f9f8 	udiv	r9, ip, r8
    c67a:	0c22      	lsrs	r2, r4, #16
    c67c:	fb08 c319 	mls	r3, r8, r9, ip
    c680:	fb09 fa0e 	mul.w	sl, r9, lr
    c684:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c688:	459a      	cmp	sl, r3
    c68a:	d928      	bls.n	c6de <__udivmoddi4+0xa6>
    c68c:	18eb      	adds	r3, r5, r3
    c68e:	f109 30ff 	add.w	r0, r9, #4294967295
    c692:	d204      	bcs.n	c69e <__udivmoddi4+0x66>
    c694:	459a      	cmp	sl, r3
    c696:	d902      	bls.n	c69e <__udivmoddi4+0x66>
    c698:	f1a9 0002 	sub.w	r0, r9, #2
    c69c:	442b      	add	r3, r5
    c69e:	eba3 030a 	sub.w	r3, r3, sl
    c6a2:	b2a4      	uxth	r4, r4
    c6a4:	fbb3 f2f8 	udiv	r2, r3, r8
    c6a8:	fb08 3312 	mls	r3, r8, r2, r3
    c6ac:	fb02 fe0e 	mul.w	lr, r2, lr
    c6b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c6b4:	45a6      	cmp	lr, r4
    c6b6:	d914      	bls.n	c6e2 <__udivmoddi4+0xaa>
    c6b8:	192c      	adds	r4, r5, r4
    c6ba:	f102 33ff 	add.w	r3, r2, #4294967295
    c6be:	d203      	bcs.n	c6c8 <__udivmoddi4+0x90>
    c6c0:	45a6      	cmp	lr, r4
    c6c2:	d901      	bls.n	c6c8 <__udivmoddi4+0x90>
    c6c4:	1e93      	subs	r3, r2, #2
    c6c6:	442c      	add	r4, r5
    c6c8:	eba4 040e 	sub.w	r4, r4, lr
    c6cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c6d0:	b11e      	cbz	r6, c6da <__udivmoddi4+0xa2>
    c6d2:	40fc      	lsrs	r4, r7
    c6d4:	2300      	movs	r3, #0
    c6d6:	6034      	str	r4, [r6, #0]
    c6d8:	6073      	str	r3, [r6, #4]
    c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6de:	4648      	mov	r0, r9
    c6e0:	e7dd      	b.n	c69e <__udivmoddi4+0x66>
    c6e2:	4613      	mov	r3, r2
    c6e4:	e7f0      	b.n	c6c8 <__udivmoddi4+0x90>
    c6e6:	b902      	cbnz	r2, c6ea <__udivmoddi4+0xb2>
    c6e8:	deff      	udf	#255	; 0xff
    c6ea:	bb87      	cbnz	r7, c74e <__udivmoddi4+0x116>
    c6ec:	1a83      	subs	r3, r0, r2
    c6ee:	2101      	movs	r1, #1
    c6f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c6f4:	b2aa      	uxth	r2, r5
    c6f6:	fbb3 fcfe 	udiv	ip, r3, lr
    c6fa:	0c20      	lsrs	r0, r4, #16
    c6fc:	fb0e 331c 	mls	r3, lr, ip, r3
    c700:	fb0c f802 	mul.w	r8, ip, r2
    c704:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c708:	4598      	cmp	r8, r3
    c70a:	d963      	bls.n	c7d4 <__udivmoddi4+0x19c>
    c70c:	18eb      	adds	r3, r5, r3
    c70e:	f10c 30ff 	add.w	r0, ip, #4294967295
    c712:	d204      	bcs.n	c71e <__udivmoddi4+0xe6>
    c714:	4598      	cmp	r8, r3
    c716:	d902      	bls.n	c71e <__udivmoddi4+0xe6>
    c718:	f1ac 0002 	sub.w	r0, ip, #2
    c71c:	442b      	add	r3, r5
    c71e:	eba3 0308 	sub.w	r3, r3, r8
    c722:	b2a4      	uxth	r4, r4
    c724:	fbb3 fcfe 	udiv	ip, r3, lr
    c728:	fb0e 331c 	mls	r3, lr, ip, r3
    c72c:	fb0c f202 	mul.w	r2, ip, r2
    c730:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c734:	42a2      	cmp	r2, r4
    c736:	d94f      	bls.n	c7d8 <__udivmoddi4+0x1a0>
    c738:	192c      	adds	r4, r5, r4
    c73a:	f10c 33ff 	add.w	r3, ip, #4294967295
    c73e:	d204      	bcs.n	c74a <__udivmoddi4+0x112>
    c740:	42a2      	cmp	r2, r4
    c742:	d902      	bls.n	c74a <__udivmoddi4+0x112>
    c744:	f1ac 0302 	sub.w	r3, ip, #2
    c748:	442c      	add	r4, r5
    c74a:	1aa4      	subs	r4, r4, r2
    c74c:	e7be      	b.n	c6cc <__udivmoddi4+0x94>
    c74e:	f1c7 0c20 	rsb	ip, r7, #32
    c752:	fa20 f80c 	lsr.w	r8, r0, ip
    c756:	fa00 f307 	lsl.w	r3, r0, r7
    c75a:	fa24 fc0c 	lsr.w	ip, r4, ip
    c75e:	40bd      	lsls	r5, r7
    c760:	ea4c 0203 	orr.w	r2, ip, r3
    c764:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c768:	b2ab      	uxth	r3, r5
    c76a:	fbb8 fcfe 	udiv	ip, r8, lr
    c76e:	0c11      	lsrs	r1, r2, #16
    c770:	fb0e 801c 	mls	r0, lr, ip, r8
    c774:	fb0c f903 	mul.w	r9, ip, r3
    c778:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c77c:	4581      	cmp	r9, r0
    c77e:	fa04 f407 	lsl.w	r4, r4, r7
    c782:	d923      	bls.n	c7cc <__udivmoddi4+0x194>
    c784:	1828      	adds	r0, r5, r0
    c786:	f10c 31ff 	add.w	r1, ip, #4294967295
    c78a:	d204      	bcs.n	c796 <__udivmoddi4+0x15e>
    c78c:	4581      	cmp	r9, r0
    c78e:	d902      	bls.n	c796 <__udivmoddi4+0x15e>
    c790:	f1ac 0102 	sub.w	r1, ip, #2
    c794:	4428      	add	r0, r5
    c796:	eba0 0009 	sub.w	r0, r0, r9
    c79a:	b292      	uxth	r2, r2
    c79c:	fbb0 fcfe 	udiv	ip, r0, lr
    c7a0:	fb0e 001c 	mls	r0, lr, ip, r0
    c7a4:	fb0c f803 	mul.w	r8, ip, r3
    c7a8:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c7ac:	4598      	cmp	r8, r3
    c7ae:	d90f      	bls.n	c7d0 <__udivmoddi4+0x198>
    c7b0:	18eb      	adds	r3, r5, r3
    c7b2:	f10c 32ff 	add.w	r2, ip, #4294967295
    c7b6:	d204      	bcs.n	c7c2 <__udivmoddi4+0x18a>
    c7b8:	4598      	cmp	r8, r3
    c7ba:	d902      	bls.n	c7c2 <__udivmoddi4+0x18a>
    c7bc:	f1ac 0202 	sub.w	r2, ip, #2
    c7c0:	442b      	add	r3, r5
    c7c2:	eba3 0308 	sub.w	r3, r3, r8
    c7c6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c7ca:	e791      	b.n	c6f0 <__udivmoddi4+0xb8>
    c7cc:	4661      	mov	r1, ip
    c7ce:	e7e2      	b.n	c796 <__udivmoddi4+0x15e>
    c7d0:	4662      	mov	r2, ip
    c7d2:	e7f6      	b.n	c7c2 <__udivmoddi4+0x18a>
    c7d4:	4660      	mov	r0, ip
    c7d6:	e7a2      	b.n	c71e <__udivmoddi4+0xe6>
    c7d8:	4663      	mov	r3, ip
    c7da:	e7b6      	b.n	c74a <__udivmoddi4+0x112>
    c7dc:	4283      	cmp	r3, r0
    c7de:	d905      	bls.n	c7ec <__udivmoddi4+0x1b4>
    c7e0:	b10e      	cbz	r6, c7e6 <__udivmoddi4+0x1ae>
    c7e2:	e9c6 7000 	strd	r7, r0, [r6]
    c7e6:	2100      	movs	r1, #0
    c7e8:	4608      	mov	r0, r1
    c7ea:	e776      	b.n	c6da <__udivmoddi4+0xa2>
    c7ec:	fab3 f183 	clz	r1, r3
    c7f0:	b981      	cbnz	r1, c814 <__udivmoddi4+0x1dc>
    c7f2:	4283      	cmp	r3, r0
    c7f4:	d301      	bcc.n	c7fa <__udivmoddi4+0x1c2>
    c7f6:	42ba      	cmp	r2, r7
    c7f8:	d80a      	bhi.n	c810 <__udivmoddi4+0x1d8>
    c7fa:	1abc      	subs	r4, r7, r2
    c7fc:	eb60 0303 	sbc.w	r3, r0, r3
    c800:	2001      	movs	r0, #1
    c802:	469c      	mov	ip, r3
    c804:	2e00      	cmp	r6, #0
    c806:	d068      	beq.n	c8da <__udivmoddi4+0x2a2>
    c808:	e9c6 4c00 	strd	r4, ip, [r6]
    c80c:	2100      	movs	r1, #0
    c80e:	e764      	b.n	c6da <__udivmoddi4+0xa2>
    c810:	4608      	mov	r0, r1
    c812:	e7f7      	b.n	c804 <__udivmoddi4+0x1cc>
    c814:	f1c1 0c20 	rsb	ip, r1, #32
    c818:	408b      	lsls	r3, r1
    c81a:	fa22 f40c 	lsr.w	r4, r2, ip
    c81e:	431c      	orrs	r4, r3
    c820:	fa02 f501 	lsl.w	r5, r2, r1
    c824:	fa00 f301 	lsl.w	r3, r0, r1
    c828:	fa27 f20c 	lsr.w	r2, r7, ip
    c82c:	fa20 fb0c 	lsr.w	fp, r0, ip
    c830:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c834:	4313      	orrs	r3, r2
    c836:	fbbb f8f9 	udiv	r8, fp, r9
    c83a:	fa1f fe84 	uxth.w	lr, r4
    c83e:	fb09 bb18 	mls	fp, r9, r8, fp
    c842:	0c1a      	lsrs	r2, r3, #16
    c844:	fb08 fa0e 	mul.w	sl, r8, lr
    c848:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c84c:	4592      	cmp	sl, r2
    c84e:	fa07 f701 	lsl.w	r7, r7, r1
    c852:	d93e      	bls.n	c8d2 <__udivmoddi4+0x29a>
    c854:	18a2      	adds	r2, r4, r2
    c856:	f108 30ff 	add.w	r0, r8, #4294967295
    c85a:	d204      	bcs.n	c866 <__udivmoddi4+0x22e>
    c85c:	4592      	cmp	sl, r2
    c85e:	d902      	bls.n	c866 <__udivmoddi4+0x22e>
    c860:	f1a8 0002 	sub.w	r0, r8, #2
    c864:	4422      	add	r2, r4
    c866:	eba2 020a 	sub.w	r2, r2, sl
    c86a:	b29b      	uxth	r3, r3
    c86c:	fbb2 f8f9 	udiv	r8, r2, r9
    c870:	fb09 2218 	mls	r2, r9, r8, r2
    c874:	fb08 fe0e 	mul.w	lr, r8, lr
    c878:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c87c:	4596      	cmp	lr, r2
    c87e:	d92a      	bls.n	c8d6 <__udivmoddi4+0x29e>
    c880:	18a2      	adds	r2, r4, r2
    c882:	f108 33ff 	add.w	r3, r8, #4294967295
    c886:	d204      	bcs.n	c892 <__udivmoddi4+0x25a>
    c888:	4596      	cmp	lr, r2
    c88a:	d902      	bls.n	c892 <__udivmoddi4+0x25a>
    c88c:	f1a8 0302 	sub.w	r3, r8, #2
    c890:	4422      	add	r2, r4
    c892:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c896:	fba0 9305 	umull	r9, r3, r0, r5
    c89a:	eba2 020e 	sub.w	r2, r2, lr
    c89e:	429a      	cmp	r2, r3
    c8a0:	46ce      	mov	lr, r9
    c8a2:	4698      	mov	r8, r3
    c8a4:	d302      	bcc.n	c8ac <__udivmoddi4+0x274>
    c8a6:	d106      	bne.n	c8b6 <__udivmoddi4+0x27e>
    c8a8:	454f      	cmp	r7, r9
    c8aa:	d204      	bcs.n	c8b6 <__udivmoddi4+0x27e>
    c8ac:	ebb9 0e05 	subs.w	lr, r9, r5
    c8b0:	eb63 0804 	sbc.w	r8, r3, r4
    c8b4:	3801      	subs	r0, #1
    c8b6:	b186      	cbz	r6, c8da <__udivmoddi4+0x2a2>
    c8b8:	ebb7 030e 	subs.w	r3, r7, lr
    c8bc:	eb62 0708 	sbc.w	r7, r2, r8
    c8c0:	fa07 fc0c 	lsl.w	ip, r7, ip
    c8c4:	40cb      	lsrs	r3, r1
    c8c6:	ea4c 0303 	orr.w	r3, ip, r3
    c8ca:	40cf      	lsrs	r7, r1
    c8cc:	e9c6 3700 	strd	r3, r7, [r6]
    c8d0:	e79c      	b.n	c80c <__udivmoddi4+0x1d4>
    c8d2:	4640      	mov	r0, r8
    c8d4:	e7c7      	b.n	c866 <__udivmoddi4+0x22e>
    c8d6:	4643      	mov	r3, r8
    c8d8:	e7db      	b.n	c892 <__udivmoddi4+0x25a>
    c8da:	4631      	mov	r1, r6
    c8dc:	e6fd      	b.n	c6da <__udivmoddi4+0xa2>
    c8de:	2804      	cmp	r0, #4
    c8e0:	d202      	bcs.n	c8e8 <__udivmoddi4+0x2b0>
    c8e2:	f04f 0028 	mov.w	r0, #40	; 0x28
    c8e6:	4770      	bx	lr
    c8e8:	d102      	bne.n	c8f0 <__udivmoddi4+0x2b8>
    c8ea:	f04f 0010 	mov.w	r0, #16
    c8ee:	4770      	bx	lr
    c8f0:	f04f 0000 	mov.w	r0, #0
    c8f4:	4770      	bx	lr
    c8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8fa:	000d      	movs	r5, r1
    c8fc:	4604      	mov	r4, r0
    c8fe:	f04f 0602 	mov.w	r6, #2
    c902:	f04f 0701 	mov.w	r7, #1
    c906:	d008      	beq.n	c91a <__udivmoddi4+0x2e2>
    c908:	7828      	ldrb	r0, [r5, #0]
    c90a:	b1d0      	cbz	r0, c942 <__udivmoddi4+0x30a>
    c90c:	2801      	cmp	r0, #1
    c90e:	d007      	beq.n	c920 <__udivmoddi4+0x2e8>
    c910:	2802      	cmp	r0, #2
    c912:	d014      	beq.n	c93e <__udivmoddi4+0x306>
    c914:	2803      	cmp	r0, #3
    c916:	d13e      	bne.n	c996 <__udivmoddi4+0x35e>
    c918:	e016      	b.n	c948 <__udivmoddi4+0x310>
    c91a:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    c91e:	e00e      	b.n	c93e <__udivmoddi4+0x306>
    c920:	6868      	ldr	r0, [r5, #4]
    c922:	28c8      	cmp	r0, #200	; 0xc8
    c924:	d303      	bcc.n	c92e <__udivmoddi4+0x2f6>
    c926:	2103      	movs	r1, #3
    c928:	f7f4 fd2c 	bl	1384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c92c:	b108      	cbz	r0, c932 <__udivmoddi4+0x2fa>
    c92e:	2600      	movs	r6, #0
    c930:	e007      	b.n	c942 <__udivmoddi4+0x30a>
    c932:	4620      	mov	r0, r4
    c934:	6869      	ldr	r1, [r5, #4]
    c936:	f000 f943 	bl	cbc0 <__udivmoddi4+0x588>
    c93a:	2601      	movs	r6, #1
    c93c:	e001      	b.n	c942 <__udivmoddi4+0x30a>
    c93e:	f7f3 fc8d 	bl	25c <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x4>
    c942:	4630      	mov	r0, r6
    c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c948:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c94c:	2800      	cmp	r0, #0
    c94e:	d1f6      	bne.n	c93e <__udivmoddi4+0x306>
    c950:	6868      	ldr	r0, [r5, #4]
    c952:	f7f3 fc55 	bl	200 <CONFIG_FLASH_SIZE>
    c956:	b1f0      	cbz	r0, c996 <__udivmoddi4+0x35e>
    c958:	6869      	ldr	r1, [r5, #4]
    c95a:	7808      	ldrb	r0, [r1, #0]
    c95c:	b130      	cbz	r0, c96c <__udivmoddi4+0x334>
    c95e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c962:	2805      	cmp	r0, #5
    c964:	d008      	beq.n	c978 <__udivmoddi4+0x340>
    c966:	f44f 71be 	mov.w	r1, #380	; 0x17c
    c96a:	e011      	b.n	c990 <__udivmoddi4+0x358>
    c96c:	4620      	mov	r0, r4
    c96e:	f000 f92f 	bl	cbd0 <__udivmoddi4+0x598>
    c972:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    c976:	e7e2      	b.n	c93e <__udivmoddi4+0x306>
    c978:	4620      	mov	r0, r4
    c97a:	f000 f942 	bl	cc02 <__udivmoddi4+0x5ca>
    c97e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c982:	4621      	mov	r1, r4
    c984:	f000 f80a 	bl	c99c <__udivmoddi4+0x364>
    c988:	2800      	cmp	r0, #0
    c98a:	d1d8      	bne.n	c93e <__udivmoddi4+0x306>
    c98c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    c990:	206a      	movs	r0, #106	; 0x6a
    c992:	f7f6 ffa1 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c996:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c99a:	e7d0      	b.n	c93e <__udivmoddi4+0x306>
    c99c:	f7f4 bf10 	b.w	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    c9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a4:	460d      	mov	r5, r1
    c9a6:	0004      	movs	r4, r0
    c9a8:	d00c      	beq.n	c9c4 <__udivmoddi4+0x38c>
    c9aa:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    c9ae:	2700      	movs	r7, #0
    c9b0:	2002      	movs	r0, #2
    c9b2:	2d09      	cmp	r5, #9
    c9b4:	d270      	bcs.n	ca98 <__udivmoddi4+0x460>
    c9b6:	e8df f005 	tbb	[pc, r5]
    c9ba:	1108      	.short	0x1108
    c9bc:	70653535 	.word	0x70653535
    c9c0:	0093a588 	.word	0x0093a588
    c9c4:	f44f 71cb 	mov.w	r1, #406	; 0x196
    c9c8:	e0f7      	b.n	cbba <__udivmoddi4+0x582>
    c9ca:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c9ce:	2804      	cmp	r0, #4
    c9d0:	d07a      	beq.n	cac8 <__udivmoddi4+0x490>
    c9d2:	2803      	cmp	r0, #3
    c9d4:	d0fc      	beq.n	c9d0 <__udivmoddi4+0x398>
    c9d6:	f240 11a1 	movw	r1, #417	; 0x1a1
    c9da:	e0ee      	b.n	cbba <__udivmoddi4+0x582>
    c9dc:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c9e0:	2804      	cmp	r0, #4
    c9e2:	d004      	beq.n	c9ee <__udivmoddi4+0x3b6>
    c9e4:	2803      	cmp	r0, #3
    c9e6:	d002      	beq.n	c9ee <__udivmoddi4+0x3b6>
    c9e8:	f240 11a5 	movw	r1, #421	; 0x1a5
    c9ec:	e0e5      	b.n	cbba <__udivmoddi4+0x582>
    c9ee:	2005      	movs	r0, #5
    c9f0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c9f4:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c9f8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c9fc:	bbb0      	cbnz	r0, ca6c <__udivmoddi4+0x434>
    c9fe:	2100      	movs	r1, #0
    ca00:	4620      	mov	r0, r4
    ca02:	f000 f8dd 	bl	cbc0 <__udivmoddi4+0x588>
    ca06:	7820      	ldrb	r0, [r4, #0]
    ca08:	2801      	cmp	r0, #1
    ca0a:	d006      	beq.n	ca1a <__udivmoddi4+0x3e2>
    ca0c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    ca10:	e9c4 0106 	strd	r0, r1, [r4, #24]
    ca14:	2100      	movs	r1, #0
    ca16:	6a22      	ldr	r2, [r4, #32]
    ca18:	e048      	b.n	caac <__udivmoddi4+0x474>
    ca1a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    ca1e:	f7f4 fddb 	bl	15d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    ca22:	e7f5      	b.n	ca10 <__udivmoddi4+0x3d8>
    ca24:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    ca28:	2904      	cmp	r1, #4
    ca2a:	d004      	beq.n	ca36 <__udivmoddi4+0x3fe>
    ca2c:	2903      	cmp	r1, #3
    ca2e:	d002      	beq.n	ca36 <__udivmoddi4+0x3fe>
    ca30:	f240 11c3 	movw	r1, #451	; 0x1c3
    ca34:	e0c1      	b.n	cbba <__udivmoddi4+0x582>
    ca36:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    ca3a:	b122      	cbz	r2, ca46 <__udivmoddi4+0x40e>
    ca3c:	4621      	mov	r1, r4
    ca3e:	4630      	mov	r0, r6
    ca40:	f000 f8fe 	bl	cc40 <__udivmoddi4+0x608>
    ca44:	e0b1      	b.n	cbaa <__udivmoddi4+0x572>
    ca46:	2904      	cmp	r1, #4
    ca48:	d000      	beq.n	ca4c <__udivmoddi4+0x414>
    ca4a:	2001      	movs	r0, #1
    ca4c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ca50:	6a22      	ldr	r2, [r4, #32]
    ca52:	2d02      	cmp	r5, #2
    ca54:	d00b      	beq.n	ca6e <__udivmoddi4+0x436>
    ca56:	2106      	movs	r1, #6
    ca58:	4630      	mov	r0, r6
    ca5a:	4790      	blx	r2
    ca5c:	2800      	cmp	r0, #0
    ca5e:	d06d      	beq.n	cb3c <__udivmoddi4+0x504>
    ca60:	7800      	ldrb	r0, [r0, #0]
    ca62:	2800      	cmp	r0, #0
    ca64:	d06a      	beq.n	cb3c <__udivmoddi4+0x504>
    ca66:	f240 11dd 	movw	r1, #477	; 0x1dd
    ca6a:	e0a6      	b.n	cbba <__udivmoddi4+0x582>
    ca6c:	e034      	b.n	cad8 <__udivmoddi4+0x4a0>
    ca6e:	2105      	movs	r1, #5
    ca70:	4630      	mov	r0, r6
    ca72:	4790      	blx	r2
    ca74:	2800      	cmp	r0, #0
    ca76:	d07c      	beq.n	cb72 <__udivmoddi4+0x53a>
    ca78:	7800      	ldrb	r0, [r0, #0]
    ca7a:	2800      	cmp	r0, #0
    ca7c:	d079      	beq.n	cb72 <__udivmoddi4+0x53a>
    ca7e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    ca82:	e09a      	b.n	cbba <__udivmoddi4+0x582>
    ca84:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca88:	2805      	cmp	r0, #5
    ca8a:	d002      	beq.n	ca92 <__udivmoddi4+0x45a>
    ca8c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    ca90:	e093      	b.n	cbba <__udivmoddi4+0x582>
    ca92:	2102      	movs	r1, #2
    ca94:	6a22      	ldr	r2, [r4, #32]
    ca96:	e009      	b.n	caac <__udivmoddi4+0x474>
    ca98:	e07e      	b.n	cb98 <__udivmoddi4+0x560>
    ca9a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca9e:	2805      	cmp	r0, #5
    caa0:	d002      	beq.n	caa8 <__udivmoddi4+0x470>
    caa2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    caa6:	e088      	b.n	cbba <__udivmoddi4+0x582>
    caa8:	6a22      	ldr	r2, [r4, #32]
    caaa:	2101      	movs	r1, #1
    caac:	4630      	mov	r0, r6
    caae:	4790      	blx	r2
    cab0:	4601      	mov	r1, r0
    cab2:	4620      	mov	r0, r4
    cab4:	f7ff ff1f 	bl	c8f6 <__udivmoddi4+0x2be>
    cab8:	2802      	cmp	r0, #2
    caba:	d076      	beq.n	cbaa <__udivmoddi4+0x572>
    cabc:	b3e8      	cbz	r0, cb3a <__udivmoddi4+0x502>
    cabe:	2801      	cmp	r0, #1
    cac0:	d06d      	beq.n	cb9e <__udivmoddi4+0x566>
    cac2:	f240 212a 	movw	r1, #554	; 0x22a
    cac6:	e078      	b.n	cbba <__udivmoddi4+0x582>
    cac8:	e071      	b.n	cbae <__udivmoddi4+0x576>
    caca:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cace:	2805      	cmp	r0, #5
    cad0:	d002      	beq.n	cad8 <__udivmoddi4+0x4a0>
    cad2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    cad6:	e070      	b.n	cbba <__udivmoddi4+0x582>
    cad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cadc:	f7f3 bbbe 	b.w	25c <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x4>
    cae0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cae4:	2805      	cmp	r0, #5
    cae6:	d002      	beq.n	caee <__udivmoddi4+0x4b6>
    cae8:	f240 11f5 	movw	r1, #501	; 0x1f5
    caec:	e065      	b.n	cbba <__udivmoddi4+0x582>
    caee:	6a22      	ldr	r2, [r4, #32]
    caf0:	210a      	movs	r1, #10
    caf2:	4630      	mov	r0, r6
    caf4:	4790      	blx	r2
    caf6:	4601      	mov	r1, r0
    caf8:	4620      	mov	r0, r4
    cafa:	f7ff fefc 	bl	c8f6 <__udivmoddi4+0x2be>
    cafe:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    cb02:	e05a      	b.n	cbba <__udivmoddi4+0x582>
    cb04:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    cb08:	2905      	cmp	r1, #5
    cb0a:	d007      	beq.n	cb1c <__udivmoddi4+0x4e4>
    cb0c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    cb10:	b10a      	cbz	r2, cb16 <__udivmoddi4+0x4de>
    cb12:	2903      	cmp	r1, #3
    cb14:	d002      	beq.n	cb1c <__udivmoddi4+0x4e4>
    cb16:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    cb1a:	e04e      	b.n	cbba <__udivmoddi4+0x582>
    cb1c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    cb20:	b129      	cbz	r1, cb2e <__udivmoddi4+0x4f6>
    cb22:	4621      	mov	r1, r4
    cb24:	4630      	mov	r0, r6
    cb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb2a:	f000 b889 	b.w	cc40 <__udivmoddi4+0x608>
    cb2e:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    cb32:	b199      	cbz	r1, cb5c <__udivmoddi4+0x524>
    cb34:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    cb38:	e001      	b.n	cb3e <__udivmoddi4+0x506>
    cb3a:	e033      	b.n	cba4 <__udivmoddi4+0x56c>
    cb3c:	e035      	b.n	cbaa <__udivmoddi4+0x572>
    cb3e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cb42:	6a22      	ldr	r2, [r4, #32]
    cb44:	2108      	movs	r1, #8
    cb46:	4630      	mov	r0, r6
    cb48:	4790      	blx	r2
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d011      	beq.n	cb72 <__udivmoddi4+0x53a>
    cb4e:	7800      	ldrb	r0, [r0, #0]
    cb50:	2800      	cmp	r0, #0
    cb52:	d00e      	beq.n	cb72 <__udivmoddi4+0x53a>
    cb54:	f44f 7102 	mov.w	r1, #520	; 0x208
    cb58:	e02f      	b.n	cbba <__udivmoddi4+0x582>
    cb5a:	e00a      	b.n	cb72 <__udivmoddi4+0x53a>
    cb5c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    cb60:	b161      	cbz	r1, cb7c <__udivmoddi4+0x544>
    cb62:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cb66:	4621      	mov	r1, r4
    cb68:	f7ff ff18 	bl	c99c <__udivmoddi4+0x364>
    cb6c:	b118      	cbz	r0, cb76 <__udivmoddi4+0x53e>
    cb6e:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    cb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb76:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cb7a:	e01e      	b.n	cbba <__udivmoddi4+0x582>
    cb7c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cb80:	6a22      	ldr	r2, [r4, #32]
    cb82:	2107      	movs	r1, #7
    cb84:	4630      	mov	r0, r6
    cb86:	4790      	blx	r2
    cb88:	2800      	cmp	r0, #0
    cb8a:	d0f2      	beq.n	cb72 <__udivmoddi4+0x53a>
    cb8c:	7800      	ldrb	r0, [r0, #0]
    cb8e:	2800      	cmp	r0, #0
    cb90:	d0ef      	beq.n	cb72 <__udivmoddi4+0x53a>
    cb92:	f44f 7105 	mov.w	r1, #532	; 0x214
    cb96:	e010      	b.n	cbba <__udivmoddi4+0x582>
    cb98:	f240 2119 	movw	r1, #537	; 0x219
    cb9c:	e00d      	b.n	cbba <__udivmoddi4+0x582>
    cb9e:	2104      	movs	r1, #4
    cba0:	6a22      	ldr	r2, [r4, #32]
    cba2:	e783      	b.n	caac <__udivmoddi4+0x474>
    cba4:	2103      	movs	r1, #3
    cba6:	6a22      	ldr	r2, [r4, #32]
    cba8:	e780      	b.n	caac <__udivmoddi4+0x474>
    cbaa:	2d00      	cmp	r5, #0
    cbac:	d1e1      	bne.n	cb72 <__udivmoddi4+0x53a>
    cbae:	f000 f8fd 	bl	cdac <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    cbb2:	2800      	cmp	r0, #0
    cbb4:	d0dd      	beq.n	cb72 <__udivmoddi4+0x53a>
    cbb6:	f240 2133 	movw	r1, #563	; 0x233
    cbba:	206a      	movs	r0, #106	; 0x6a
    cbbc:	f7f6 fe8c 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cbc0:	4602      	mov	r2, r0
    cbc2:	7803      	ldrb	r3, [r0, #0]
    cbc4:	6840      	ldr	r0, [r0, #4]
    cbc6:	4408      	add	r0, r1
    cbc8:	6050      	str	r0, [r2, #4]
    cbca:	3859      	subs	r0, #89	; 0x59
    cbcc:	f7f5 bcfa 	b.w	25c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    cbd0:	2201      	movs	r2, #1
    cbd2:	7002      	strb	r2, [r0, #0]
    cbd4:	2200      	movs	r2, #0
    cbd6:	72c2      	strb	r2, [r0, #11]
    cbd8:	790a      	ldrb	r2, [r1, #4]
    cbda:	b172      	cbz	r2, cbfa <__udivmoddi4+0x5c2>
    cbdc:	2200      	movs	r2, #0
    cbde:	8102      	strh	r2, [r0, #8]
    cbe0:	794a      	ldrb	r2, [r1, #5]
    cbe2:	b162      	cbz	r2, cbfe <__udivmoddi4+0x5c6>
    cbe4:	2203      	movs	r2, #3
    cbe6:	7282      	strb	r2, [r0, #10]
    cbe8:	688a      	ldr	r2, [r1, #8]
    cbea:	326a      	adds	r2, #106	; 0x6a
    cbec:	6042      	str	r2, [r0, #4]
    cbee:	68c9      	ldr	r1, [r1, #12]
    cbf0:	6101      	str	r1, [r0, #16]
    cbf2:	2103      	movs	r1, #3
    cbf4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cbf8:	4770      	bx	lr
    cbfa:	222b      	movs	r2, #43	; 0x2b
    cbfc:	e7ef      	b.n	cbde <__udivmoddi4+0x5a6>
    cbfe:	2202      	movs	r2, #2
    cc00:	e7f1      	b.n	cbe6 <__udivmoddi4+0x5ae>
    cc02:	b510      	push	{r4, lr}
    cc04:	2200      	movs	r2, #0
    cc06:	7002      	strb	r2, [r0, #0]
    cc08:	72c2      	strb	r2, [r0, #11]
    cc0a:	790a      	ldrb	r2, [r1, #4]
    cc0c:	b1a2      	cbz	r2, cc38 <__udivmoddi4+0x600>
    cc0e:	2200      	movs	r2, #0
    cc10:	8102      	strh	r2, [r0, #8]
    cc12:	794a      	ldrb	r2, [r1, #5]
    cc14:	b192      	cbz	r2, cc3c <__udivmoddi4+0x604>
    cc16:	2203      	movs	r2, #3
    cc18:	7282      	strb	r2, [r0, #10]
    cc1a:	68ca      	ldr	r2, [r1, #12]
    cc1c:	326a      	adds	r2, #106	; 0x6a
    cc1e:	6042      	str	r2, [r0, #4]
    cc20:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    cc24:	6889      	ldr	r1, [r1, #8]
    cc26:	17cb      	asrs	r3, r1, #31
    cc28:	1861      	adds	r1, r4, r1
    cc2a:	415a      	adcs	r2, r3
    cc2c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    cc30:	2104      	movs	r1, #4
    cc32:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cc36:	bd10      	pop	{r4, pc}
    cc38:	222b      	movs	r2, #43	; 0x2b
    cc3a:	e7e9      	b.n	cc10 <__udivmoddi4+0x5d8>
    cc3c:	2202      	movs	r2, #2
    cc3e:	e7eb      	b.n	cc18 <__udivmoddi4+0x5e0>
    cc40:	b570      	push	{r4, r5, r6, lr}
    cc42:	4605      	mov	r5, r0
    cc44:	460c      	mov	r4, r1
    cc46:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    cc4a:	f7f5 fa89 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    cc4e:	b178      	cbz	r0, cc70 <__udivmoddi4+0x638>
    cc50:	4620      	mov	r0, r4
    cc52:	f000 f810 	bl	cc76 <__udivmoddi4+0x63e>
    cc56:	6a22      	ldr	r2, [r4, #32]
    cc58:	2109      	movs	r1, #9
    cc5a:	4628      	mov	r0, r5
    cc5c:	4790      	blx	r2
    cc5e:	2800      	cmp	r0, #0
    cc60:	d008      	beq.n	cc74 <__udivmoddi4+0x63c>
    cc62:	7800      	ldrb	r0, [r0, #0]
    cc64:	2800      	cmp	r0, #0
    cc66:	d005      	beq.n	cc74 <__udivmoddi4+0x63c>
    cc68:	21dc      	movs	r1, #220	; 0xdc
    cc6a:	206a      	movs	r0, #106	; 0x6a
    cc6c:	f7f6 fe34 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cc70:	21d8      	movs	r1, #216	; 0xd8
    cc72:	e7fa      	b.n	cc6a <__udivmoddi4+0x632>
    cc74:	bd70      	pop	{r4, r5, r6, pc}
    cc76:	2100      	movs	r1, #0
    cc78:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cc7c:	f800 1f24 	strb.w	r1, [r0, #36]!
    cc80:	7041      	strb	r1, [r0, #1]
    cc82:	4770      	bx	lr

0000cc84 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    cc84:	b570      	push	{r4, r5, r6, lr}
    cc86:	f7f3 fb45 	bl	314 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cc8a:	4605      	mov	r5, r0
    cc8c:	2400      	movs	r4, #0
    cc8e:	e006      	b.n	cc9e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    cc90:	4620      	mov	r0, r4
    cc92:	f7f3 fb45 	bl	320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cc96:	f7ff ffee 	bl	cc76 <__udivmoddi4+0x63e>
    cc9a:	1c64      	adds	r4, r4, #1
    cc9c:	b2e4      	uxtb	r4, r4
    cc9e:	42ac      	cmp	r4, r5
    cca0:	d3f6      	bcc.n	cc90 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    cca2:	bd70      	pop	{r4, r5, r6, pc}

0000cca4 <mpsl_timeslot_request>:
    cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cca8:	460d      	mov	r5, r1
    ccaa:	f7f3 fb39 	bl	320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ccae:	0004      	movs	r4, r0
    ccb0:	d008      	beq.n	ccc4 <mpsl_timeslot_request+0x20>
    ccb2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ccb6:	f06f 0622 	mvn.w	r6, #34	; 0x22
    ccba:	2801      	cmp	r0, #1
    ccbc:	d006      	beq.n	cccc <mpsl_timeslot_request+0x28>
    ccbe:	2802      	cmp	r0, #2
    ccc0:	d111      	bne.n	cce6 <mpsl_timeslot_request+0x42>
    ccc2:	e003      	b.n	cccc <mpsl_timeslot_request+0x28>
    ccc4:	f06f 0001 	mvn.w	r0, #1
    ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cccc:	f06f 0715 	mvn.w	r7, #21
    ccd0:	b15d      	cbz	r5, ccea <mpsl_timeslot_request+0x46>
    ccd2:	4628      	mov	r0, r5
    ccd4:	f7f3 fa94 	bl	200 <CONFIG_FLASH_SIZE>
    ccd8:	b138      	cbz	r0, ccea <mpsl_timeslot_request+0x46>
    ccda:	7828      	ldrb	r0, [r5, #0]
    ccdc:	b138      	cbz	r0, ccee <mpsl_timeslot_request+0x4a>
    ccde:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cce2:	2802      	cmp	r0, #2
    cce4:	d008      	beq.n	ccf8 <mpsl_timeslot_request+0x54>
    cce6:	4630      	mov	r0, r6
    cce8:	e7ee      	b.n	ccc8 <mpsl_timeslot_request+0x24>
    ccea:	4638      	mov	r0, r7
    ccec:	e7ec      	b.n	ccc8 <mpsl_timeslot_request+0x24>
    ccee:	4629      	mov	r1, r5
    ccf0:	4620      	mov	r0, r4
    ccf2:	f7ff ff6d 	bl	cbd0 <__udivmoddi4+0x598>
    ccf6:	e003      	b.n	cd00 <mpsl_timeslot_request+0x5c>
    ccf8:	4629      	mov	r1, r5
    ccfa:	4620      	mov	r0, r4
    ccfc:	f7ff ff81 	bl	cc02 <__udivmoddi4+0x5ca>
    cd00:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cd04:	4621      	mov	r1, r4
    cd06:	f7ff fe49 	bl	c99c <__udivmoddi4+0x364>
    cd0a:	b108      	cbz	r0, cd10 <mpsl_timeslot_request+0x6c>
    cd0c:	2000      	movs	r0, #0
    cd0e:	e7db      	b.n	ccc8 <mpsl_timeslot_request+0x24>
    cd10:	f240 21b1 	movw	r1, #689	; 0x2b1
    cd14:	206a      	movs	r0, #106	; 0x6a
    cd16:	f7f6 fddf 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000cd1a <mpsl_timeslot_session_close>:
    cd1a:	b510      	push	{r4, lr}
    cd1c:	4604      	mov	r4, r0
    cd1e:	f7f3 faff 	bl	320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cd22:	0001      	movs	r1, r0
    cd24:	d005      	beq.n	cd32 <mpsl_timeslot_session_close+0x18>
    cd26:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    cd2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
    cd2e:	b978      	cbnz	r0, cd50 <mpsl_timeslot_session_close+0x36>
    cd30:	e002      	b.n	cd38 <mpsl_timeslot_session_close+0x1e>
    cd32:	f06f 0001 	mvn.w	r0, #1
    cd36:	bd10      	pop	{r4, pc}
    cd38:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    cd3c:	b140      	cbz	r0, cd50 <mpsl_timeslot_session_close+0x36>
    cd3e:	2802      	cmp	r0, #2
    cd40:	d008      	beq.n	cd54 <mpsl_timeslot_session_close+0x3a>
    cd42:	2801      	cmp	r0, #1
    cd44:	d006      	beq.n	cd54 <mpsl_timeslot_session_close+0x3a>
    cd46:	2001      	movs	r0, #1
    cd48:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    cd4c:	2000      	movs	r0, #0
    cd4e:	bd10      	pop	{r4, pc}
    cd50:	4610      	mov	r0, r2
    cd52:	bd10      	pop	{r4, pc}
    cd54:	4620      	mov	r0, r4
    cd56:	f7ff ff73 	bl	cc40 <__udivmoddi4+0x608>
    cd5a:	e7f7      	b.n	cd4c <mpsl_timeslot_session_close+0x32>

0000cd5c <mpsl_timeslot_session_count_set>:
    cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd60:	460e      	mov	r6, r1
    cd62:	4607      	mov	r7, r0
    cd64:	f7f3 fad6 	bl	314 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cd68:	4605      	mov	r5, r0
    cd6a:	2400      	movs	r4, #0
    cd6c:	e00b      	b.n	cd86 <mpsl_timeslot_session_count_set+0x2a>
    cd6e:	4620      	mov	r0, r4
    cd70:	f7f3 fad6 	bl	320 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cd74:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    cd78:	b118      	cbz	r0, cd82 <mpsl_timeslot_session_count_set+0x26>
    cd7a:	f04f 30ff 	mov.w	r0, #4294967295
    cd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd82:	1c64      	adds	r4, r4, #1
    cd84:	b2e4      	uxtb	r4, r4
    cd86:	42ac      	cmp	r4, r5
    cd88:	d3f1      	bcc.n	cd6e <mpsl_timeslot_session_count_set+0x12>
    cd8a:	2e08      	cmp	r6, #8
    cd8c:	d902      	bls.n	cd94 <mpsl_timeslot_session_count_set+0x38>
    cd8e:	f06f 0015 	mvn.w	r0, #21
    cd92:	e7f4      	b.n	cd7e <mpsl_timeslot_session_count_set+0x22>
    cd94:	b117      	cbz	r7, cd9c <mpsl_timeslot_session_count_set+0x40>
    cd96:	4631      	mov	r1, r6
    cd98:	4638      	mov	r0, r7
    cd9a:	e001      	b.n	cda0 <mpsl_timeslot_session_count_set+0x44>
    cd9c:	2100      	movs	r1, #0
    cd9e:	4608      	mov	r0, r1
    cda0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cda4:	f7f3 baa2 	b.w	2ec <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000cda8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    cda8:	f7f5 be7c 	b.w	2aa4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000cdac <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    cdac:	b510      	push	{r4, lr}
    cdae:	2000      	movs	r0, #0
    cdb0:	f7f6 f99e 	bl	30f0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    cdb4:	6800      	ldr	r0, [r0, #0]
    cdb6:	2800      	cmp	r0, #0
    cdb8:	bf18      	it	ne
    cdba:	2001      	movne	r0, #1
    cdbc:	bd10      	pop	{r4, pc}

0000cdbe <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    cdbe:	b510      	push	{r4, lr}
    cdc0:	f7f6 fa30 	bl	3224 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    cdc4:	f7f5 fce8 	bl	2798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    cdc8:	f000 f804 	bl	cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    cdcc:	b280      	uxth	r0, r0
    cdce:	bd10      	pop	{r4, pc}

0000cdd0 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>:
    cdd0:	f000 b80d 	b.w	cdee <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>

0000cdd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    cdd4:	0a41      	lsrs	r1, r0, #9
    cdd6:	f643 5209 	movw	r2, #15625	; 0x3d09
    cdda:	4351      	muls	r1, r2
    cddc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    cde0:	fb10 f002 	smulbb	r0, r0, r2
    cde4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    cde8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    cdec:	4770      	bx	lr

0000cdee <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>:
    cdee:	2000      	movs	r0, #0
    cdf0:	4770      	bx	lr
    cdf2:	2800      	cmp	r0, #0
    cdf4:	db09      	blt.n	ce0a <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1c>
    cdf6:	f000 021f 	and.w	r2, r0, #31
    cdfa:	2101      	movs	r1, #1
    cdfc:	4091      	lsls	r1, r2
    cdfe:	0940      	lsrs	r0, r0, #5
    ce00:	0080      	lsls	r0, r0, #2
    ce02:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce06:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ce0a:	4770      	bx	lr
    ce0c:	2800      	cmp	r0, #0
    ce0e:	db0d      	blt.n	ce2c <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x3e>
    ce10:	f000 021f 	and.w	r2, r0, #31
    ce14:	2101      	movs	r1, #1
    ce16:	4091      	lsls	r1, r2
    ce18:	0940      	lsrs	r0, r0, #5
    ce1a:	0080      	lsls	r0, r0, #2
    ce1c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce20:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ce24:	f3bf 8f4f 	dsb	sy
    ce28:	f3bf 8f6f 	isb	sy
    ce2c:	4770      	bx	lr

0000ce2e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    ce2e:	b570      	push	{r4, r5, r6, lr}
    ce30:	4602      	mov	r2, r0
    ce32:	2000      	movs	r0, #0
    ce34:	2900      	cmp	r1, #0
    ce36:	d01d      	beq.n	ce74 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    ce38:	fba2 0101 	umull	r0, r1, r2, r1
    ce3c:	0a40      	lsrs	r0, r0, #9
    ce3e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    ce42:	0a49      	lsrs	r1, r1, #9
    ce44:	1c40      	adds	r0, r0, #1
    ce46:	f141 0100 	adc.w	r1, r1, #0
    ce4a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    ce4e:	1883      	adds	r3, r0, r2
    ce50:	f141 0100 	adc.w	r1, r1, #0
    ce54:	1c5b      	adds	r3, r3, #1
    ce56:	f141 0400 	adc.w	r4, r1, #0
    ce5a:	2100      	movs	r1, #0
    ce5c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    ce60:	41a1      	sbcs	r1, r4
    ce62:	d203      	bcs.n	ce6c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    ce64:	2172      	movs	r1, #114	; 0x72
    ce66:	206d      	movs	r0, #109	; 0x6d
    ce68:	f7f6 fd36 	bl	38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ce6c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    ce70:	fbb0 f0f2 	udiv	r0, r0, r2
    ce74:	bd70      	pop	{r4, r5, r6, pc}
    ce76:	5840      	ldr	r0, [r0, r1]
    ce78:	2800      	cmp	r0, #0
    ce7a:	d000      	beq.n	ce7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    ce7c:	2001      	movs	r0, #1
    ce7e:	4770      	bx	lr
    ce80:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    ce84:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    ce88:	f002 0201 	and.w	r2, r2, #1
    ce8c:	03c0      	lsls	r0, r0, #15
    ce8e:	d503      	bpl.n	ce98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ce90:	428a      	cmp	r2, r1
    ce92:	d101      	bne.n	ce98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ce94:	2001      	movs	r0, #1
    ce96:	4770      	bx	lr
    ce98:	2000      	movs	r0, #0
    ce9a:	4770      	bx	lr

0000ce9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    ce9c:	b510      	push	{r4, lr}
    ce9e:	2101      	movs	r1, #1
    cea0:	0788      	lsls	r0, r1, #30
    cea2:	f7f6 fcc3 	bl	382c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cea6:	2800      	cmp	r0, #0
    cea8:	d000      	beq.n	ceac <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ceaa:	2001      	movs	r0, #1
    ceac:	bd10      	pop	{r4, pc}

0000ceae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ceae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ceb2:	2101      	movs	r1, #1
    ceb4:	6001      	str	r1, [r0, #0]
    ceb6:	4770      	bx	lr

0000ceb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    ceb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cebc:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cec0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cec4:	f002 0203 	and.w	r2, r2, #3
    cec8:	03c9      	lsls	r1, r1, #15
    ceca:	d503      	bpl.n	ced4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cecc:	4282      	cmp	r2, r0
    cece:	d101      	bne.n	ced4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ced0:	2001      	movs	r0, #1
    ced2:	4770      	bx	lr
    ced4:	2000      	movs	r0, #0
    ced6:	4770      	bx	lr

0000ced8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    ced8:	b510      	push	{r4, lr}
    ceda:	2100      	movs	r1, #0
    cedc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cee0:	f7f6 fca4 	bl	382c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cee4:	2800      	cmp	r0, #0
    cee6:	d000      	beq.n	ceea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cee8:	2001      	movs	r0, #1
    ceea:	bd10      	pop	{r4, pc}
    ceec:	2800      	cmp	r0, #0
    ceee:	db09      	blt.n	cf04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cef0:	f000 021f 	and.w	r2, r0, #31
    cef4:	2101      	movs	r1, #1
    cef6:	4091      	lsls	r1, r2
    cef8:	0940      	lsrs	r0, r0, #5
    cefa:	0080      	lsls	r0, r0, #2
    cefc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cf00:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cf04:	4770      	bx	lr
    cf06:	2800      	cmp	r0, #0
    cf08:	db0d      	blt.n	cf26 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cf0a:	f000 021f 	and.w	r2, r0, #31
    cf0e:	2101      	movs	r1, #1
    cf10:	4091      	lsls	r1, r2
    cf12:	0940      	lsrs	r0, r0, #5
    cf14:	0080      	lsls	r0, r0, #2
    cf16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cf1a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cf1e:	f3bf 8f4f 	dsb	sy
    cf22:	f3bf 8f6f 	isb	sy
    cf26:	4770      	bx	lr
    cf28:	00021000 	.word	0x00021000
    cf2c:	000000fa 	.word	0x000000fa
    cf30:	63a70f14 	.word	0x63a70f14
    cf34:	c477f9cf 	.word	0xc477f9cf
    cf38:	e931f9ef 	.word	0xe931f9ef
    cf3c:	03bcf561 	.word	0x03bcf561
    cf40:	2b06749a 	.word	0x2b06749a
    cf44:	2800      	cmp	r0, #0
    cf46:	db09      	blt.n	cf5c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cf48:	f000 021f 	and.w	r2, r0, #31
    cf4c:	2101      	movs	r1, #1
    cf4e:	4091      	lsls	r1, r2
    cf50:	0940      	lsrs	r0, r0, #5
    cf52:	0080      	lsls	r0, r0, #2
    cf54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cf58:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cf5c:	4770      	bx	lr

0000cf5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    cf5e:	f3ef 8110 	mrs	r1, PRIMASK
    cf62:	b672      	cpsid	i
    cf64:	7802      	ldrb	r2, [r0, #0]
    cf66:	2a01      	cmp	r2, #1
    cf68:	d001      	beq.n	cf6e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cf6a:	2201      	movs	r2, #1
    cf6c:	e000      	b.n	cf70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    cf6e:	2200      	movs	r2, #0
    cf70:	2301      	movs	r3, #1
    cf72:	7003      	strb	r3, [r0, #0]
    cf74:	b901      	cbnz	r1, cf78 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cf76:	b662      	cpsie	i
    cf78:	b10a      	cbz	r2, cf7e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cf7a:	2000      	movs	r0, #0
    cf7c:	4770      	bx	lr
    cf7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cf82:	4770      	bx	lr

0000cf84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cf84:	2100      	movs	r1, #0
    cf86:	7001      	strb	r1, [r0, #0]
    cf88:	4608      	mov	r0, r1
    cf8a:	4770      	bx	lr

0000cf8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cf8c:	f3ef 8110 	mrs	r1, PRIMASK
    cf90:	b672      	cpsid	i
    cf92:	2200      	movs	r2, #0
    cf94:	7002      	strb	r2, [r0, #0]
    cf96:	b901      	cbnz	r1, cf9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cf98:	b662      	cpsie	i
    cf9a:	2000      	movs	r0, #0
    cf9c:	4770      	bx	lr

0000cf9e <mpsl_low_priority_process>:
    cf9e:	f7f6 bd8b 	b.w	3ab8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cfa2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cfa2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfa6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cfaa:	280f      	cmp	r0, #15
    cfac:	d001      	beq.n	cfb2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cfae:	2000      	movs	r0, #0
    cfb0:	4770      	bx	lr
    cfb2:	2001      	movs	r0, #1
    cfb4:	4770      	bx	lr

0000cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    cfb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfba:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cfbe:	280a      	cmp	r0, #10
    cfc0:	d001      	beq.n	cfc6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    cfc2:	2000      	movs	r0, #0
    cfc4:	4770      	bx	lr
    cfc6:	2001      	movs	r0, #1
    cfc8:	4770      	bx	lr

0000cfca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    cfca:	b500      	push	{lr}
    cfcc:	f7ff fff3 	bl	cfb6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    cfd0:	b120      	cbz	r0, cfdc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    cfd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfd6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cfda:	b108      	cbz	r0, cfe0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    cfdc:	2000      	movs	r0, #0
    cfde:	bd00      	pop	{pc}
    cfe0:	2001      	movs	r0, #1
    cfe2:	bd00      	pop	{pc}

0000cfe4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    cfe4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfe8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cfec:	280e      	cmp	r0, #14
    cfee:	d001      	beq.n	cff4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    cff0:	2000      	movs	r0, #0
    cff2:	4770      	bx	lr
    cff4:	2001      	movs	r0, #1
    cff6:	4770      	bx	lr

0000cff8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    cff8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cffc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d000:	2810      	cmp	r0, #16
    d002:	d001      	beq.n	d008 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d004:	2000      	movs	r0, #0
    d006:	4770      	bx	lr
    d008:	2001      	movs	r0, #1
    d00a:	4770      	bx	lr

0000d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d00c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d010:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d014:	2806      	cmp	r0, #6
    d016:	d003      	beq.n	d020 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d018:	1c40      	adds	r0, r0, #1
    d01a:	d001      	beq.n	d020 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d01c:	2000      	movs	r0, #0
    d01e:	4770      	bx	lr
    d020:	2001      	movs	r0, #1
    d022:	4770      	bx	lr

0000d024 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d024:	b500      	push	{lr}
    d026:	f7ff fff1 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d02a:	b148      	cbz	r0, d040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d02c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d030:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d034:	2806      	cmp	r0, #6
    d036:	d303      	bcc.n	d040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d038:	1c40      	adds	r0, r0, #1
    d03a:	d001      	beq.n	d040 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d03c:	2001      	movs	r0, #1
    d03e:	bd00      	pop	{pc}
    d040:	2000      	movs	r0, #0
    d042:	bd00      	pop	{pc}

0000d044 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d044:	b500      	push	{lr}
    d046:	f7ff ffe1 	bl	d00c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d04a:	b138      	cbz	r0, d05c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d04c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d050:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d054:	2806      	cmp	r0, #6
    d056:	d303      	bcc.n	d060 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d058:	1c40      	adds	r0, r0, #1
    d05a:	d001      	beq.n	d060 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d05c:	2000      	movs	r0, #0
    d05e:	bd00      	pop	{pc}
    d060:	2001      	movs	r0, #1
    d062:	bd00      	pop	{pc}

0000d064 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d064:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d068:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d06c:	280d      	cmp	r0, #13
    d06e:	d001      	beq.n	d074 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d070:	2000      	movs	r0, #0
    d072:	4770      	bx	lr
    d074:	2001      	movs	r0, #1
    d076:	4770      	bx	lr

0000d078 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d078:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d07c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d080:	2808      	cmp	r0, #8
    d082:	d001      	beq.n	d088 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d084:	2000      	movs	r0, #0
    d086:	4770      	bx	lr
    d088:	2001      	movs	r0, #1
    d08a:	4770      	bx	lr

0000d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d08c:	b4f0      	push	{r4, r5, r6, r7}
    d08e:	ea80 0c01 	eor.w	ip, r0, r1
    d092:	4603      	mov	r3, r0
    d094:	f01c 0f03 	tst.w	ip, #3
    d098:	d13c      	bne.n	d114 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d09a:	f013 0f03 	tst.w	r3, #3
    d09e:	d00b      	beq.n	d0b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d0a0:	2a00      	cmp	r2, #0
    d0a2:	bf04      	itt	eq
    d0a4:	bcf0      	popeq	{r4, r5, r6, r7}
    d0a6:	4770      	bxeq	lr
    d0a8:	f811 cb01 	ldrb.w	ip, [r1], #1
    d0ac:	f803 cb01 	strb.w	ip, [r3], #1
    d0b0:	1e52      	subs	r2, r2, #1
    d0b2:	f013 0f03 	tst.w	r3, #3
    d0b6:	d1f3      	bne.n	d0a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d0b8:	2a03      	cmp	r2, #3
    d0ba:	d94f      	bls.n	d15c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d0bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d0c0:	d24c      	bcs.n	d15c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d0c2:	f1c2 0c00 	rsb	ip, r2, #0
    d0c6:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d0ca:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d0ce:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d0d2:	f1cc 0c00 	rsb	ip, ip, #0
    d0d6:	f1bc 0f00 	cmp.w	ip, #0
    d0da:	dd1b      	ble.n	d114 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d0dc:	1f0d      	subs	r5, r1, #4
    d0de:	1f1c      	subs	r4, r3, #4
    d0e0:	f01c 0f01 	tst.w	ip, #1
    d0e4:	d003      	beq.n	d0ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d0e6:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d0ea:	f844 6f04 	str.w	r6, [r4, #4]!
    d0ee:	ea5f 066c 	movs.w	r6, ip, asr #1
    d0f2:	d007      	beq.n	d104 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d0f4:	686f      	ldr	r7, [r5, #4]
    d0f6:	6067      	str	r7, [r4, #4]
    d0f8:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d0fc:	f844 7f08 	str.w	r7, [r4, #8]!
    d100:	1e76      	subs	r6, r6, #1
    d102:	d1f7      	bne.n	d0f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d104:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d108:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d10c:	f1cc 0c00 	rsb	ip, ip, #0
    d110:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d114:	2a00      	cmp	r2, #0
    d116:	bf04      	itt	eq
    d118:	bcf0      	popeq	{r4, r5, r6, r7}
    d11a:	4770      	bxeq	lr
    d11c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d120:	d226      	bcs.n	d170 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d122:	2a00      	cmp	r2, #0
    d124:	bfdc      	itt	le
    d126:	bcf0      	pople	{r4, r5, r6, r7}
    d128:	4770      	bxle	lr
    d12a:	1e49      	subs	r1, r1, #1
    d12c:	1e5b      	subs	r3, r3, #1
    d12e:	f012 0f01 	tst.w	r2, #1
    d132:	d003      	beq.n	d13c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d134:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d138:	f803 cf01 	strb.w	ip, [r3, #1]!
    d13c:	1052      	asrs	r2, r2, #1
    d13e:	bf04      	itt	eq
    d140:	bcf0      	popeq	{r4, r5, r6, r7}
    d142:	4770      	bxeq	lr
    d144:	f891 c001 	ldrb.w	ip, [r1, #1]
    d148:	f883 c001 	strb.w	ip, [r3, #1]
    d14c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d150:	f803 cf02 	strb.w	ip, [r3, #2]!
    d154:	1e52      	subs	r2, r2, #1
    d156:	d1f5      	bne.n	d144 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d158:	bcf0      	pop	{r4, r5, r6, r7}
    d15a:	4770      	bx	lr
    d15c:	2a04      	cmp	r2, #4
    d15e:	d3d9      	bcc.n	d114 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d160:	f851 cb04 	ldr.w	ip, [r1], #4
    d164:	1f12      	subs	r2, r2, #4
    d166:	f843 cb04 	str.w	ip, [r3], #4
    d16a:	2a04      	cmp	r2, #4
    d16c:	d2f8      	bcs.n	d160 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d16e:	e7d1      	b.n	d114 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d170:	f811 cb01 	ldrb.w	ip, [r1], #1
    d174:	f803 cb01 	strb.w	ip, [r3], #1
    d178:	1e52      	subs	r2, r2, #1
    d17a:	d1f9      	bne.n	d170 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d17c:	bcf0      	pop	{r4, r5, r6, r7}
    d17e:	4770      	bx	lr

0000d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d180:	b470      	push	{r4, r5, r6}
    d182:	4603      	mov	r3, r0
    d184:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d188:	f010 0f03 	tst.w	r0, #3
    d18c:	d009      	beq.n	d1a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d18e:	2a00      	cmp	r2, #0
    d190:	bf04      	itt	eq
    d192:	bc70      	popeq	{r4, r5, r6}
    d194:	4770      	bxeq	lr
    d196:	f803 cb01 	strb.w	ip, [r3], #1
    d19a:	1e52      	subs	r2, r2, #1
    d19c:	f013 0f03 	tst.w	r3, #3
    d1a0:	d1f5      	bne.n	d18e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d1a2:	b2c9      	uxtb	r1, r1
    d1a4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d1a8:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d1ac:	2a03      	cmp	r2, #3
    d1ae:	d939      	bls.n	d224 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d1b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d1b4:	d236      	bcs.n	d224 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d1b6:	4251      	negs	r1, r2
    d1b8:	17cc      	asrs	r4, r1, #31
    d1ba:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d1be:	1089      	asrs	r1, r1, #2
    d1c0:	424e      	negs	r6, r1
    d1c2:	2e00      	cmp	r6, #0
    d1c4:	dd11      	ble.n	d1ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d1c6:	1f19      	subs	r1, r3, #4
    d1c8:	f016 0f01 	tst.w	r6, #1
    d1cc:	bf18      	it	ne
    d1ce:	f841 5f04 	strne.w	r5, [r1, #4]!
    d1d2:	1074      	asrs	r4, r6, #1
    d1d4:	d004      	beq.n	d1e0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d1d6:	604d      	str	r5, [r1, #4]
    d1d8:	f841 5f08 	str.w	r5, [r1, #8]!
    d1dc:	1e64      	subs	r4, r4, #1
    d1de:	d1fa      	bne.n	d1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d1e0:	4271      	negs	r1, r6
    d1e2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d1e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d1ea:	2a00      	cmp	r2, #0
    d1ec:	bf04      	itt	eq
    d1ee:	bc70      	popeq	{r4, r5, r6}
    d1f0:	4770      	bxeq	lr
    d1f2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d1f6:	d21d      	bcs.n	d234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d1f8:	2a00      	cmp	r2, #0
    d1fa:	bfdc      	itt	le
    d1fc:	bc70      	pople	{r4, r5, r6}
    d1fe:	4770      	bxle	lr
    d200:	1e59      	subs	r1, r3, #1
    d202:	f012 0f01 	tst.w	r2, #1
    d206:	bf18      	it	ne
    d208:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d20c:	1052      	asrs	r2, r2, #1
    d20e:	bf04      	itt	eq
    d210:	bc70      	popeq	{r4, r5, r6}
    d212:	4770      	bxeq	lr
    d214:	f881 c001 	strb.w	ip, [r1, #1]
    d218:	f801 cf02 	strb.w	ip, [r1, #2]!
    d21c:	1e52      	subs	r2, r2, #1
    d21e:	d1f9      	bne.n	d214 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d220:	bc70      	pop	{r4, r5, r6}
    d222:	4770      	bx	lr
    d224:	2a04      	cmp	r2, #4
    d226:	d3e0      	bcc.n	d1ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d228:	1f12      	subs	r2, r2, #4
    d22a:	f843 5b04 	str.w	r5, [r3], #4
    d22e:	2a04      	cmp	r2, #4
    d230:	d2fa      	bcs.n	d228 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d232:	e7da      	b.n	d1ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d234:	f803 cb01 	strb.w	ip, [r3], #1
    d238:	1e52      	subs	r2, r2, #1
    d23a:	d1fb      	bne.n	d234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d23c:	bc70      	pop	{r4, r5, r6}
    d23e:	4770      	bx	lr
    d240:	2107      	movs	r1, #7
    d242:	7001      	strb	r1, [r0, #0]
    d244:	2000      	movs	r0, #0
    d246:	4770      	bx	lr
    d248:	2000      	movs	r0, #0
    d24a:	4770      	bx	lr
    d24c:	2000      	movs	r0, #0
    d24e:	4770      	bx	lr
    d250:	2000      	movs	r0, #0
    d252:	4770      	bx	lr
    d254:	b108      	cbz	r0, d25a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
    d256:	2000      	movs	r0, #0
    d258:	4770      	bx	lr
    d25a:	f06f 0015 	mvn.w	r0, #21
    d25e:	4770      	bx	lr
    d260:	f04f 30ff 	mov.w	r0, #4294967295
    d264:	4770      	bx	lr
    d266:	2000      	movs	r0, #0
    d268:	4770      	bx	lr
    d26a:	2000      	movs	r0, #0
    d26c:	4770      	bx	lr
    d26e:	f04f 30ff 	mov.w	r0, #4294967295
    d272:	4770      	bx	lr
    d274:	4770      	bx	lr
    d276:	4770      	bx	lr
    d278:	2000      	movs	r0, #0
    d27a:	4770      	bx	lr
    d27c:	2100      	movs	r1, #0
    d27e:	7001      	strb	r1, [r0, #0]
    d280:	4770      	bx	lr
    d282:	f04f 30ff 	mov.w	r0, #4294967295
    d286:	4770      	bx	lr
    d288:	f04f 30ff 	mov.w	r0, #4294967295
    d28c:	4770      	bx	lr
    d28e:	2100      	movs	r1, #0
    d290:	7001      	strb	r1, [r0, #0]
    d292:	4770      	bx	lr
    d294:	f04f 30ff 	mov.w	r0, #4294967295
    d298:	4770      	bx	lr
    d29a:	f04f 30ff 	mov.w	r0, #4294967295
    d29e:	4770      	bx	lr
    d2a0:	7800      	ldrb	r0, [r0, #0]
    d2a2:	2800      	cmp	r0, #0
    d2a4:	d001      	beq.n	d2aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12a>
    d2a6:	f06f 0015 	mvn.w	r0, #21
    d2aa:	4770      	bx	lr
    d2ac:	2000      	movs	r0, #0
    d2ae:	4770      	bx	lr
    d2b0:	2200      	movs	r2, #0
    d2b2:	f000 b800 	b.w	d2b6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d2b6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d2b6:	b570      	push	{r4, r5, r6, lr}
    d2b8:	4614      	mov	r4, r2
    d2ba:	460d      	mov	r5, r1
    d2bc:	1b00      	subs	r0, r0, r4
    d2be:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    d2c2:	4288      	cmp	r0, r1
    d2c4:	da01      	bge.n	d2ca <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    d2c6:	4608      	mov	r0, r1
    d2c8:	e002      	b.n	d2d0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d2ca:	287f      	cmp	r0, #127	; 0x7f
    d2cc:	dd00      	ble.n	d2d0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d2ce:	207f      	movs	r0, #127	; 0x7f
    d2d0:	b240      	sxtb	r0, r0
    d2d2:	f7f2 ff63 	bl	19c <mpsl_tx_power_radio_supported_power_adjust>
    d2d6:	7028      	strb	r0, [r5, #0]
    d2d8:	706c      	strb	r4, [r5, #1]
    d2da:	2100      	movs	r1, #0
    d2dc:	4420      	add	r0, r4
    d2de:	70a9      	strb	r1, [r5, #2]
    d2e0:	b240      	sxtb	r0, r0
    d2e2:	bd70      	pop	{r4, r5, r6, pc}
    d2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2e8:	4681      	mov	r9, r0
    d2ea:	9000      	str	r0, [sp, #0]
    d2ec:	4615      	mov	r5, r2
    d2ee:	460c      	mov	r4, r1
    d2f0:	4668      	mov	r0, sp
    d2f2:	f7f6 fd9b 	bl	3e2c <mpsl_fem_device_config_254_apply_get+0x68>
    d2f6:	7820      	ldrb	r0, [r4, #0]
    d2f8:	7861      	ldrb	r1, [r4, #1]
    d2fa:	46a8      	mov	r8, r5
    d2fc:	2600      	movs	r6, #0
    d2fe:	4408      	add	r0, r1
    d300:	b2c7      	uxtb	r7, r0
    d302:	4635      	mov	r5, r6
    d304:	e008      	b.n	d318 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x62>
    d306:	7a23      	ldrb	r3, [r4, #8]
    d308:	79e2      	ldrb	r2, [r4, #7]
    d30a:	79a1      	ldrb	r1, [r4, #6]
    d30c:	7960      	ldrb	r0, [r4, #5]
    d30e:	f000 fea9 	bl	e064 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d312:	1c6d      	adds	r5, r5, #1
    d314:	4406      	add	r6, r0
    d316:	b2ed      	uxtb	r5, r5
    d318:	42bd      	cmp	r5, r7
    d31a:	d3f4      	bcc.n	d306 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x50>
    d31c:	9800      	ldr	r0, [sp, #0]
    d31e:	1cc0      	adds	r0, r0, #3
    d320:	f020 0003 	bic.w	r0, r0, #3
    d324:	9000      	str	r0, [sp, #0]
    d326:	f1b8 0f00 	cmp.w	r8, #0
    d32a:	d000      	beq.n	d32e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x78>
    d32c:	2000      	movs	r0, #0
    d32e:	4632      	mov	r2, r6
    d330:	4639      	mov	r1, r7
    d332:	f7f7 fae3 	bl	48fc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d336:	9900      	ldr	r1, [sp, #0]
    d338:	4408      	add	r0, r1
    d33a:	1dc0      	adds	r0, r0, #7
    d33c:	f020 0007 	bic.w	r0, r0, #7
    d340:	9000      	str	r0, [sp, #0]
    d342:	eba0 0009 	sub.w	r0, r0, r9
    d346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d34a <sdc_soc_ecb_block_encrypt>:
    d34a:	b530      	push	{r4, r5, lr}
    d34c:	460d      	mov	r5, r1
    d34e:	b08d      	sub	sp, #52	; 0x34
    d350:	4614      	mov	r4, r2
    d352:	4601      	mov	r1, r0
    d354:	2210      	movs	r2, #16
    d356:	4668      	mov	r0, sp
    d358:	f7ff fe98 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d35c:	2210      	movs	r2, #16
    d35e:	4629      	mov	r1, r5
    d360:	a804      	add	r0, sp, #16
    d362:	f7ff fe93 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d366:	4668      	mov	r0, sp
    d368:	f001 f811 	bl	e38e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d36c:	b118      	cbz	r0, d376 <sdc_soc_ecb_block_encrypt+0x2c>
    d36e:	f06f 0015 	mvn.w	r0, #21
    d372:	b00d      	add	sp, #52	; 0x34
    d374:	bd30      	pop	{r4, r5, pc}
    d376:	2210      	movs	r2, #16
    d378:	4620      	mov	r0, r4
    d37a:	a908      	add	r1, sp, #32
    d37c:	f7ff fe86 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d380:	2000      	movs	r0, #0
    d382:	e7f6      	b.n	d372 <sdc_soc_ecb_block_encrypt+0x28>

0000d384 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d384:	b510      	push	{r4, lr}
    d386:	4604      	mov	r4, r0
    d388:	4620      	mov	r0, r4
    d38a:	f7f6 ff77 	bl	427c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d38e:	2800      	cmp	r0, #0
    d390:	d006      	beq.n	d3a0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d392:	78a1      	ldrb	r1, [r4, #2]
    d394:	7820      	ldrb	r0, [r4, #0]
    d396:	f7f6 ffb5 	bl	4304 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d39a:	2800      	cmp	r0, #0
    d39c:	d0f4      	beq.n	d388 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d39e:	2001      	movs	r0, #1
    d3a0:	bd10      	pop	{r4, pc}

0000d3a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d3a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3a6:	4604      	mov	r4, r0
    d3a8:	f891 c000 	ldrb.w	ip, [r1]
    d3ac:	460d      	mov	r5, r1
    d3ae:	2000      	movs	r0, #0
    d3b0:	2313      	movs	r3, #19
    d3b2:	2710      	movs	r7, #16
    d3b4:	223e      	movs	r2, #62	; 0x3e
    d3b6:	2612      	movs	r6, #18
    d3b8:	f04f 0a0c 	mov.w	sl, #12
    d3bc:	f04f 0e05 	mov.w	lr, #5
    d3c0:	f04f 0901 	mov.w	r9, #1
    d3c4:	f104 010d 	add.w	r1, r4, #13
    d3c8:	f04f 0b11 	mov.w	fp, #17
    d3cc:	f1bc 0f26 	cmp.w	ip, #38	; 0x26
    d3d0:	d273      	bcs.n	d4ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    d3d2:	e8df f00c 	tbb	[pc, ip]
    d3d6:	1372      	.short	0x1372
    d3d8:	fd332d2b 	.word	0xfd332d2b
    d3dc:	fcd5cb73 	.word	0xfcd5cb73
    d3e0:	f8f9fafb 	.word	0xf8f9fafb
    d3e4:	72f5f6f7 	.word	0x72f5f6f7
    d3e8:	f4995572 	.word	0xf4995572
    d3ec:	f0f1f2f3 	.word	0xf0f1f2f3
    d3f0:	ed72eeef 	.word	0xed72eeef
    d3f4:	e9eaebec 	.word	0xe9eaebec
    d3f8:	e672e7e8 	.word	0xe672e7e8
    d3fc:	f884 a000 	strb.w	sl, [r4]
    d400:	7928      	ldrb	r0, [r5, #4]
    d402:	70a0      	strb	r0, [r4, #2]
    d404:	7968      	ldrb	r0, [r5, #5]
    d406:	70e0      	strb	r0, [r4, #3]
    d408:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d40c:	0a00      	lsrs	r0, r0, #8
    d40e:	7120      	strb	r0, [r4, #4]
    d410:	79e8      	ldrb	r0, [r5, #7]
    d412:	7160      	strb	r0, [r4, #5]
    d414:	7a28      	ldrb	r0, [r5, #8]
    d416:	71a0      	strb	r0, [r4, #6]
    d418:	8928      	ldrh	r0, [r5, #8]
    d41a:	0a00      	lsrs	r0, r0, #8
    d41c:	71e0      	strb	r0, [r4, #7]
    d41e:	7aa8      	ldrb	r0, [r5, #10]
    d420:	7220      	strb	r0, [r4, #8]
    d422:	8968      	ldrh	r0, [r5, #10]
    d424:	0a00      	lsrs	r0, r0, #8
    d426:	7260      	strb	r0, [r4, #9]
    d428:	2008      	movs	r0, #8
    d42a:	e1a7      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d42c:	7027      	strb	r7, [r4, #0]
    d42e:	e001      	b.n	d434 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x92>
    d430:	201a      	movs	r0, #26
    d432:	7020      	strb	r0, [r4, #0]
    d434:	7928      	ldrb	r0, [r5, #4]
    d436:	70a0      	strb	r0, [r4, #2]
    d438:	2001      	movs	r0, #1
    d43a:	e19f      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d43c:	7022      	strb	r2, [r4, #0]
    d43e:	2002      	movs	r0, #2
    d440:	70a0      	strb	r0, [r4, #2]
    d442:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    d446:	70e0      	strb	r0, [r4, #3]
    d448:	7aa8      	ldrb	r0, [r5, #10]
    d44a:	7120      	strb	r0, [r4, #4]
    d44c:	7868      	ldrb	r0, [r5, #1]
    d44e:	7160      	strb	r0, [r4, #5]
    d450:	f8d5 0002 	ldr.w	r0, [r5, #2]
    d454:	f8c4 0006 	str.w	r0, [r4, #6]
    d458:	88e8      	ldrh	r0, [r5, #6]
    d45a:	8160      	strh	r0, [r4, #10]
    d45c:	7a28      	ldrb	r0, [r5, #8]
    d45e:	7320      	strb	r0, [r4, #12]
    d460:	7a2e      	ldrb	r6, [r5, #8]
    d462:	2e1f      	cmp	r6, #31
    d464:	d300      	bcc.n	d468 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc6>
    d466:	261f      	movs	r6, #31
    d468:	4608      	mov	r0, r1
    d46a:	4632      	mov	r2, r6
    d46c:	f105 010b 	add.w	r1, r5, #11
    d470:	f7ff fe0c 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d474:	360d      	adds	r6, #13
    d476:	7a69      	ldrb	r1, [r5, #9]
    d478:	55a1      	strb	r1, [r4, r6]
    d47a:	1e76      	subs	r6, r6, #1
    d47c:	b2f0      	uxtb	r0, r6
    d47e:	e17b      	b.n	d778 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
    d480:	7022      	strb	r2, [r4, #0]
    d482:	200b      	movs	r0, #11
    d484:	70a0      	strb	r0, [r4, #2]
    d486:	7928      	ldrb	r0, [r5, #4]
    d488:	70e0      	strb	r0, [r4, #3]
    d48a:	7968      	ldrb	r0, [r5, #5]
    d48c:	7120      	strb	r0, [r4, #4]
    d48e:	79a8      	ldrb	r0, [r5, #6]
    d490:	7160      	strb	r0, [r4, #5]
    d492:	f8d5 0007 	ldr.w	r0, [r5, #7]
    d496:	f8c4 0006 	str.w	r0, [r4, #6]
    d49a:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    d49e:	8160      	strh	r0, [r4, #10]
    d4a0:	7b68      	ldrb	r0, [r5, #13]
    d4a2:	7320      	strb	r0, [r4, #12]
    d4a4:	f8d5 000e 	ldr.w	r0, [r5, #14]
    d4a8:	f8c4 000d 	str.w	r0, [r4, #13]
    d4ac:	8a68      	ldrh	r0, [r5, #18]
    d4ae:	f8a4 0011 	strh.w	r0, [r4, #17]
    d4b2:	7d28      	ldrb	r0, [r5, #20]
    d4b4:	74e0      	strb	r0, [r4, #19]
    d4b6:	4630      	mov	r0, r6
    d4b8:	e160      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d4ba:	e161      	b.n	d780 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3de>
    d4bc:	7022      	strb	r2, [r4, #0]
    d4be:	f884 9002 	strb.w	r9, [r4, #2]
    d4c2:	7928      	ldrb	r0, [r5, #4]
    d4c4:	70e0      	strb	r0, [r4, #3]
    d4c6:	79a8      	ldrb	r0, [r5, #6]
    d4c8:	7120      	strb	r0, [r4, #4]
    d4ca:	88e8      	ldrh	r0, [r5, #6]
    d4cc:	0a00      	lsrs	r0, r0, #8
    d4ce:	7160      	strb	r0, [r4, #5]
    d4d0:	7a28      	ldrb	r0, [r5, #8]
    d4d2:	71a0      	strb	r0, [r4, #6]
    d4d4:	7a68      	ldrb	r0, [r5, #9]
    d4d6:	71e0      	strb	r0, [r4, #7]
    d4d8:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d4dc:	60a0      	str	r0, [r4, #8]
    d4de:	89e8      	ldrh	r0, [r5, #14]
    d4e0:	81a0      	strh	r0, [r4, #12]
    d4e2:	7c28      	ldrb	r0, [r5, #16]
    d4e4:	73a0      	strb	r0, [r4, #14]
    d4e6:	8a28      	ldrh	r0, [r5, #16]
    d4e8:	0a00      	lsrs	r0, r0, #8
    d4ea:	73e0      	strb	r0, [r4, #15]
    d4ec:	7ca8      	ldrb	r0, [r5, #18]
    d4ee:	7420      	strb	r0, [r4, #16]
    d4f0:	8a68      	ldrh	r0, [r5, #18]
    d4f2:	0a00      	lsrs	r0, r0, #8
    d4f4:	7460      	strb	r0, [r4, #17]
    d4f6:	7d28      	ldrb	r0, [r5, #20]
    d4f8:	74a0      	strb	r0, [r4, #18]
    d4fa:	8aa8      	ldrh	r0, [r5, #20]
    d4fc:	0a00      	lsrs	r0, r0, #8
    d4fe:	74e0      	strb	r0, [r4, #19]
    d500:	7da8      	ldrb	r0, [r5, #22]
    d502:	7520      	strb	r0, [r4, #20]
    d504:	4618      	mov	r0, r3
    d506:	e139      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d508:	7022      	strb	r2, [r4, #0]
    d50a:	200a      	movs	r0, #10
    d50c:	70a0      	strb	r0, [r4, #2]
    d50e:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    d512:	70e0      	strb	r0, [r4, #3]
    d514:	78a8      	ldrb	r0, [r5, #2]
    d516:	7120      	strb	r0, [r4, #4]
    d518:	8868      	ldrh	r0, [r5, #2]
    d51a:	0a00      	lsrs	r0, r0, #8
    d51c:	7160      	strb	r0, [r4, #5]
    d51e:	7928      	ldrb	r0, [r5, #4]
    d520:	71a0      	strb	r0, [r4, #6]
    d522:	7968      	ldrb	r0, [r5, #5]
    d524:	71e0      	strb	r0, [r4, #7]
    d526:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d52a:	60a0      	str	r0, [r4, #8]
    d52c:	8968      	ldrh	r0, [r5, #10]
    d52e:	81a0      	strh	r0, [r4, #12]
    d530:	68e8      	ldr	r0, [r5, #12]
    d532:	f8c4 000e 	str.w	r0, [r4, #14]
    d536:	8a28      	ldrh	r0, [r5, #16]
    d538:	8260      	strh	r0, [r4, #18]
    d53a:	f8d5 0012 	ldr.w	r0, [r5, #18]
    d53e:	6160      	str	r0, [r4, #20]
    d540:	8ae8      	ldrh	r0, [r5, #22]
    d542:	8320      	strh	r0, [r4, #24]
    d544:	7e28      	ldrb	r0, [r5, #24]
    d546:	76a0      	strb	r0, [r4, #26]
    d548:	8b28      	ldrh	r0, [r5, #24]
    d54a:	0a00      	lsrs	r0, r0, #8
    d54c:	76e0      	strb	r0, [r4, #27]
    d54e:	7ea8      	ldrb	r0, [r5, #26]
    d550:	7720      	strb	r0, [r4, #28]
    d552:	8b68      	ldrh	r0, [r5, #26]
    d554:	0a00      	lsrs	r0, r0, #8
    d556:	7760      	strb	r0, [r4, #29]
    d558:	7f28      	ldrb	r0, [r5, #28]
    d55a:	77a0      	strb	r0, [r4, #30]
    d55c:	8ba8      	ldrh	r0, [r5, #28]
    d55e:	0a00      	lsrs	r0, r0, #8
    d560:	77e0      	strb	r0, [r4, #31]
    d562:	7fa8      	ldrb	r0, [r5, #30]
    d564:	f884 0020 	strb.w	r0, [r4, #32]
    d568:	201f      	movs	r0, #31
    d56a:	e107      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d56c:	7022      	strb	r2, [r4, #0]
    d56e:	2014      	movs	r0, #20
    d570:	70a0      	strb	r0, [r4, #2]
    d572:	7928      	ldrb	r0, [r5, #4]
    d574:	70e0      	strb	r0, [r4, #3]
    d576:	88a8      	ldrh	r0, [r5, #4]
    d578:	0a00      	lsrs	r0, r0, #8
    d57a:	7120      	strb	r0, [r4, #4]
    d57c:	79a8      	ldrb	r0, [r5, #6]
    d57e:	e151      	b.n	d824 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
    d580:	7022      	strb	r2, [r4, #0]
    d582:	2004      	movs	r0, #4
    d584:	70a0      	strb	r0, [r4, #2]
    d586:	7928      	ldrb	r0, [r5, #4]
    d588:	70e0      	strb	r0, [r4, #3]
    d58a:	79a8      	ldrb	r0, [r5, #6]
    d58c:	7120      	strb	r0, [r4, #4]
    d58e:	88e8      	ldrh	r0, [r5, #6]
    d590:	0a00      	lsrs	r0, r0, #8
    d592:	7160      	strb	r0, [r4, #5]
    d594:	68a8      	ldr	r0, [r5, #8]
    d596:	f8c4 0006 	str.w	r0, [r4, #6]
    d59a:	68e8      	ldr	r0, [r5, #12]
    d59c:	f8c4 000a 	str.w	r0, [r4, #10]
    d5a0:	e017      	b.n	d5d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    d5a2:	e18e      	b.n	d8c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x520>
    d5a4:	e160      	b.n	d868 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4c6>
    d5a6:	e140      	b.n	d82a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x488>
    d5a8:	e16d      	b.n	d886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4e4>
    d5aa:	e17b      	b.n	d8a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x502>
    d5ac:	e131      	b.n	d812 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x470>
    d5ae:	e107      	b.n	d7c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    d5b0:	e0ef      	b.n	d792 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f0>
    d5b2:	e0e7      	b.n	d784 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e2>
    d5b4:	e0d5      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c0>
    d5b6:	e0ca      	b.n	d74e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    d5b8:	e0b5      	b.n	d726 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x384>
    d5ba:	e0b9      	b.n	d730 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    d5bc:	e060      	b.n	d680 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    d5be:	e05c      	b.n	d67a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d8>
    d5c0:	e071      	b.n	d6a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    d5c2:	e06b      	b.n	d69c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    d5c4:	e04f      	b.n	d666 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    d5c6:	e043      	b.n	d650 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ae>
    d5c8:	e036      	b.n	d638 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    d5ca:	e032      	b.n	d632 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d5cc:	e01d      	b.n	d60a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    d5ce:	e002      	b.n	d5d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d5d0:	e072      	b.n	d6b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    d5d2:	200c      	movs	r0, #12
    d5d4:	e0d2      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d5d6:	7022      	strb	r2, [r4, #0]
    d5d8:	2003      	movs	r0, #3
    d5da:	70a0      	strb	r0, [r4, #2]
    d5dc:	7928      	ldrb	r0, [r5, #4]
    d5de:	70e0      	strb	r0, [r4, #3]
    d5e0:	79a8      	ldrb	r0, [r5, #6]
    d5e2:	7120      	strb	r0, [r4, #4]
    d5e4:	88e8      	ldrh	r0, [r5, #6]
    d5e6:	0a00      	lsrs	r0, r0, #8
    d5e8:	7160      	strb	r0, [r4, #5]
    d5ea:	7a28      	ldrb	r0, [r5, #8]
    d5ec:	71a0      	strb	r0, [r4, #6]
    d5ee:	8928      	ldrh	r0, [r5, #8]
    d5f0:	0a00      	lsrs	r0, r0, #8
    d5f2:	71e0      	strb	r0, [r4, #7]
    d5f4:	7aa8      	ldrb	r0, [r5, #10]
    d5f6:	7220      	strb	r0, [r4, #8]
    d5f8:	8968      	ldrh	r0, [r5, #10]
    d5fa:	0a00      	lsrs	r0, r0, #8
    d5fc:	7260      	strb	r0, [r4, #9]
    d5fe:	7b28      	ldrb	r0, [r5, #12]
    d600:	72a0      	strb	r0, [r4, #10]
    d602:	89a8      	ldrh	r0, [r5, #12]
    d604:	0a00      	lsrs	r0, r0, #8
    d606:	72e0      	strb	r0, [r4, #11]
    d608:	e14a      	b.n	d8a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4fe>
    d60a:	7022      	strb	r2, [r4, #0]
    d60c:	f884 e002 	strb.w	lr, [r4, #2]
    d610:	7928      	ldrb	r0, [r5, #4]
    d612:	70e0      	strb	r0, [r4, #3]
    d614:	88a8      	ldrh	r0, [r5, #4]
    d616:	0a00      	lsrs	r0, r0, #8
    d618:	7120      	strb	r0, [r4, #4]
    d61a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d61e:	f8c4 0005 	str.w	r0, [r4, #5]
    d622:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d626:	f8c4 0009 	str.w	r0, [r4, #9]
    d62a:	89e8      	ldrh	r0, [r5, #14]
    d62c:	f8a4 000d 	strh.w	r0, [r4, #13]
    d630:	e15d      	b.n	d8ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x54c>
    d632:	f884 b000 	strb.w	fp, [r4]
    d636:	e038      	b.n	d6aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d638:	f884 e000 	strb.w	lr, [r4]
    d63c:	7928      	ldrb	r0, [r5, #4]
    d63e:	70a0      	strb	r0, [r4, #2]
    d640:	7968      	ldrb	r0, [r5, #5]
    d642:	70e0      	strb	r0, [r4, #3]
    d644:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d648:	0a00      	lsrs	r0, r0, #8
    d64a:	7120      	strb	r0, [r4, #4]
    d64c:	79e8      	ldrb	r0, [r5, #7]
    d64e:	e0e9      	b.n	d824 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
    d650:	2008      	movs	r0, #8
    d652:	7020      	strb	r0, [r4, #0]
    d654:	7928      	ldrb	r0, [r5, #4]
    d656:	70a0      	strb	r0, [r4, #2]
    d658:	79a8      	ldrb	r0, [r5, #6]
    d65a:	70e0      	strb	r0, [r4, #3]
    d65c:	88e8      	ldrh	r0, [r5, #6]
    d65e:	0a00      	lsrs	r0, r0, #8
    d660:	7120      	strb	r0, [r4, #4]
    d662:	7a28      	ldrb	r0, [r5, #8]
    d664:	e0de      	b.n	d824 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x482>
    d666:	2030      	movs	r0, #48	; 0x30
    d668:	7020      	strb	r0, [r4, #0]
    d66a:	7928      	ldrb	r0, [r5, #4]
    d66c:	70a0      	strb	r0, [r4, #2]
    d66e:	79a8      	ldrb	r0, [r5, #6]
    d670:	70e0      	strb	r0, [r4, #3]
    d672:	88e8      	ldrh	r0, [r5, #6]
    d674:	0a00      	lsrs	r0, r0, #8
    d676:	7120      	strb	r0, [r4, #4]
    d678:	e089      	b.n	d78e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ec>
    d67a:	7022      	strb	r2, [r4, #0]
    d67c:	2007      	movs	r0, #7
    d67e:	e0d7      	b.n	d830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x48e>
    d680:	7022      	strb	r2, [r4, #0]
    d682:	f884 a002 	strb.w	sl, [r4, #2]
    d686:	7928      	ldrb	r0, [r5, #4]
    d688:	70e0      	strb	r0, [r4, #3]
    d68a:	79a8      	ldrb	r0, [r5, #6]
    d68c:	7120      	strb	r0, [r4, #4]
    d68e:	88e8      	ldrh	r0, [r5, #6]
    d690:	0a00      	lsrs	r0, r0, #8
    d692:	7160      	strb	r0, [r4, #5]
    d694:	7a28      	ldrb	r0, [r5, #8]
    d696:	71a0      	strb	r0, [r4, #6]
    d698:	7a68      	ldrb	r0, [r5, #9]
    d69a:	e055      	b.n	d748 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a6>
    d69c:	1d29      	adds	r1, r5, #4
    d69e:	4620      	mov	r0, r4
    d6a0:	f7f6 fe52 	bl	4348 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    d6a4:	e068      	b.n	d778 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
    d6a6:	2057      	movs	r0, #87	; 0x57
    d6a8:	7020      	strb	r0, [r4, #0]
    d6aa:	7928      	ldrb	r0, [r5, #4]
    d6ac:	70a0      	strb	r0, [r4, #2]
    d6ae:	88a8      	ldrh	r0, [r5, #4]
    d6b0:	0a00      	lsrs	r0, r0, #8
    d6b2:	70e0      	strb	r0, [r4, #3]
    d6b4:	2002      	movs	r0, #2
    d6b6:	e061      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d6b8:	7022      	strb	r2, [r4, #0]
    d6ba:	220d      	movs	r2, #13
    d6bc:	70a2      	strb	r2, [r4, #2]
    d6be:	792a      	ldrb	r2, [r5, #4]
    d6c0:	70e2      	strb	r2, [r4, #3]
    d6c2:	89ea      	ldrh	r2, [r5, #14]
    d6c4:	80a2      	strh	r2, [r4, #4]
    d6c6:	796a      	ldrb	r2, [r5, #5]
    d6c8:	71a2      	strb	r2, [r4, #6]
    d6ca:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d6ce:	f8c4 2007 	str.w	r2, [r4, #7]
    d6d2:	896a      	ldrh	r2, [r5, #10]
    d6d4:	f8a4 200b 	strh.w	r2, [r4, #11]
    d6d8:	7c2a      	ldrb	r2, [r5, #16]
    d6da:	4620      	mov	r0, r4
    d6dc:	7362      	strb	r2, [r4, #13]
    d6de:	1d29      	adds	r1, r5, #4
    d6e0:	7c6a      	ldrb	r2, [r5, #17]
    d6e2:	7382      	strb	r2, [r0, #14]
    d6e4:	7b8a      	ldrb	r2, [r1, #14]
    d6e6:	73c2      	strb	r2, [r0, #15]
    d6e8:	7e8a      	ldrb	r2, [r1, #26]
    d6ea:	7402      	strb	r2, [r0, #16]
    d6ec:	7a4a      	ldrb	r2, [r1, #9]
    d6ee:	7442      	strb	r2, [r0, #17]
    d6f0:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d6f4:	f8ad 2000 	strh.w	r2, [sp]
    d6f8:	8242      	strh	r2, [r0, #18]
    d6fa:	7cca      	ldrb	r2, [r1, #19]
    d6fc:	7502      	strb	r2, [r0, #20]
    d6fe:	694a      	ldr	r2, [r1, #20]
    d700:	f8c0 2015 	str.w	r2, [r0, #21]
    d704:	8b0a      	ldrh	r2, [r1, #24]
    d706:	f8a0 2019 	strh.w	r2, [r0, #25]
    d70a:	7a0a      	ldrb	r2, [r1, #8]
    d70c:	76c2      	strb	r2, [r0, #27]
    d70e:	7a0d      	ldrb	r5, [r1, #8]
    d710:	2de5      	cmp	r5, #229	; 0xe5
    d712:	d300      	bcc.n	d716 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    d714:	25e5      	movs	r5, #229	; 0xe5
    d716:	462a      	mov	r2, r5
    d718:	301c      	adds	r0, #28
    d71a:	311c      	adds	r1, #28
    d71c:	f7ff fcb6 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d720:	351a      	adds	r5, #26
    d722:	b2e8      	uxtb	r0, r5
    d724:	e028      	b.n	d778 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d6>
    d726:	7022      	strb	r2, [r4, #0]
    d728:	f884 b002 	strb.w	fp, [r4, #2]
    d72c:	4648      	mov	r0, r9
    d72e:	e025      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d730:	7022      	strb	r2, [r4, #0]
    d732:	70a6      	strb	r6, [r4, #2]
    d734:	7928      	ldrb	r0, [r5, #4]
    d736:	70e0      	strb	r0, [r4, #3]
    d738:	7968      	ldrb	r0, [r5, #5]
    d73a:	7120      	strb	r0, [r4, #4]
    d73c:	79a8      	ldrb	r0, [r5, #6]
    d73e:	7160      	strb	r0, [r4, #5]
    d740:	88e8      	ldrh	r0, [r5, #6]
    d742:	0a00      	lsrs	r0, r0, #8
    d744:	71a0      	strb	r0, [r4, #6]
    d746:	7a28      	ldrb	r0, [r5, #8]
    d748:	71e0      	strb	r0, [r4, #7]
    d74a:	2006      	movs	r0, #6
    d74c:	e016      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d74e:	7022      	strb	r2, [r4, #0]
    d750:	200e      	movs	r0, #14
    d752:	70a0      	strb	r0, [r4, #2]
    d754:	220f      	movs	r2, #15
    d756:	1d29      	adds	r1, r5, #4
    d758:	1ce0      	adds	r0, r4, #3
    d75a:	f7ff fc97 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d75e:	2010      	movs	r0, #16
    d760:	e00c      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d762:	7022      	strb	r2, [r4, #0]
    d764:	200f      	movs	r0, #15
    d766:	70a0      	strb	r0, [r4, #2]
    d768:	7aaa      	ldrb	r2, [r5, #10]
    d76a:	1d29      	adds	r1, r5, #4
    d76c:	1ce0      	adds	r0, r4, #3
    d76e:	1dd2      	adds	r2, r2, #7
    d770:	f7ff fc8c 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d774:	7aa8      	ldrb	r0, [r5, #10]
    d776:	3008      	adds	r0, #8
    d778:	2800      	cmp	r0, #0
    d77a:	d001      	beq.n	d780 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3de>
    d77c:	7060      	strb	r0, [r4, #1]
    d77e:	1c80      	adds	r0, r0, #2
    d780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d784:	7022      	strb	r2, [r4, #0]
    d786:	70a7      	strb	r7, [r4, #2]
    d788:	88a8      	ldrh	r0, [r5, #4]
    d78a:	f8a4 0003 	strh.w	r0, [r4, #3]
    d78e:	2003      	movs	r0, #3
    d790:	e7f4      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d792:	7022      	strb	r2, [r4, #0]
    d794:	2021      	movs	r0, #33	; 0x21
    d796:	70a0      	strb	r0, [r4, #2]
    d798:	7928      	ldrb	r0, [r5, #4]
    d79a:	70e0      	strb	r0, [r4, #3]
    d79c:	7968      	ldrb	r0, [r5, #5]
    d79e:	7120      	strb	r0, [r4, #4]
    d7a0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d7a4:	0a00      	lsrs	r0, r0, #8
    d7a6:	7160      	strb	r0, [r4, #5]
    d7a8:	79e8      	ldrb	r0, [r5, #7]
    d7aa:	71a0      	strb	r0, [r4, #6]
    d7ac:	7a28      	ldrb	r0, [r5, #8]
    d7ae:	71e0      	strb	r0, [r4, #7]
    d7b0:	7a68      	ldrb	r0, [r5, #9]
    d7b2:	7220      	strb	r0, [r4, #8]
    d7b4:	7aa8      	ldrb	r0, [r5, #10]
    d7b6:	7260      	strb	r0, [r4, #9]
    d7b8:	7ae8      	ldrb	r0, [r5, #11]
    d7ba:	72a0      	strb	r0, [r4, #10]
    d7bc:	2009      	movs	r0, #9
    d7be:	e7dd      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d7c0:	7022      	strb	r2, [r4, #0]
    d7c2:	2018      	movs	r0, #24
    d7c4:	70a0      	strb	r0, [r4, #2]
    d7c6:	7928      	ldrb	r0, [r5, #4]
    d7c8:	70e0      	strb	r0, [r4, #3]
    d7ca:	f815 0f05 	ldrb.w	r0, [r5, #5]!
    d7ce:	7120      	strb	r0, [r4, #4]
    d7d0:	8828      	ldrh	r0, [r5, #0]
    d7d2:	0a00      	lsrs	r0, r0, #8
    d7d4:	7160      	strb	r0, [r4, #5]
    d7d6:	78a8      	ldrb	r0, [r5, #2]
    d7d8:	71a0      	strb	r0, [r4, #6]
    d7da:	8868      	ldrh	r0, [r5, #2]
    d7dc:	0a00      	lsrs	r0, r0, #8
    d7de:	71e0      	strb	r0, [r4, #7]
    d7e0:	7928      	ldrb	r0, [r5, #4]
    d7e2:	7220      	strb	r0, [r4, #8]
    d7e4:	88a8      	ldrh	r0, [r5, #4]
    d7e6:	0a00      	lsrs	r0, r0, #8
    d7e8:	7260      	strb	r0, [r4, #9]
    d7ea:	79a8      	ldrb	r0, [r5, #6]
    d7ec:	72a0      	strb	r0, [r4, #10]
    d7ee:	79e8      	ldrb	r0, [r5, #7]
    d7f0:	72e0      	strb	r0, [r4, #11]
    d7f2:	68a8      	ldr	r0, [r5, #8]
    d7f4:	60e0      	str	r0, [r4, #12]
    d7f6:	89a8      	ldrh	r0, [r5, #12]
    d7f8:	8220      	strh	r0, [r4, #16]
    d7fa:	7ba8      	ldrb	r0, [r5, #14]
    d7fc:	74a0      	strb	r0, [r4, #18]
    d7fe:	7be8      	ldrb	r0, [r5, #15]
    d800:	74e0      	strb	r0, [r4, #19]
    d802:	f8b5 000f 	ldrh.w	r0, [r5, #15]
    d806:	0a00      	lsrs	r0, r0, #8
    d808:	7520      	strb	r0, [r4, #20]
    d80a:	7c68      	ldrb	r0, [r5, #17]
    d80c:	7560      	strb	r0, [r4, #21]
    d80e:	2014      	movs	r0, #20
    d810:	e7b4      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d812:	20ff      	movs	r0, #255	; 0xff
    d814:	7020      	strb	r0, [r4, #0]
    d816:	20a1      	movs	r0, #161	; 0xa1
    d818:	70a0      	strb	r0, [r4, #2]
    d81a:	7928      	ldrb	r0, [r5, #4]
    d81c:	70e0      	strb	r0, [r4, #3]
    d81e:	7968      	ldrb	r0, [r5, #5]
    d820:	7120      	strb	r0, [r4, #4]
    d822:	2000      	movs	r0, #0
    d824:	7160      	strb	r0, [r4, #5]
    d826:	2004      	movs	r0, #4
    d828:	e7a8      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d82a:	20ff      	movs	r0, #255	; 0xff
    d82c:	7020      	strb	r0, [r4, #0]
    d82e:	20a2      	movs	r0, #162	; 0xa2
    d830:	70a0      	strb	r0, [r4, #2]
    d832:	7928      	ldrb	r0, [r5, #4]
    d834:	70e0      	strb	r0, [r4, #3]
    d836:	88a8      	ldrh	r0, [r5, #4]
    d838:	0a00      	lsrs	r0, r0, #8
    d83a:	7120      	strb	r0, [r4, #4]
    d83c:	79a8      	ldrb	r0, [r5, #6]
    d83e:	7160      	strb	r0, [r4, #5]
    d840:	88e8      	ldrh	r0, [r5, #6]
    d842:	0a00      	lsrs	r0, r0, #8
    d844:	71a0      	strb	r0, [r4, #6]
    d846:	7a28      	ldrb	r0, [r5, #8]
    d848:	71e0      	strb	r0, [r4, #7]
    d84a:	8928      	ldrh	r0, [r5, #8]
    d84c:	0a00      	lsrs	r0, r0, #8
    d84e:	7220      	strb	r0, [r4, #8]
    d850:	7aa8      	ldrb	r0, [r5, #10]
    d852:	7260      	strb	r0, [r4, #9]
    d854:	8968      	ldrh	r0, [r5, #10]
    d856:	0a00      	lsrs	r0, r0, #8
    d858:	72a0      	strb	r0, [r4, #10]
    d85a:	7b28      	ldrb	r0, [r5, #12]
    d85c:	72e0      	strb	r0, [r4, #11]
    d85e:	89a8      	ldrh	r0, [r5, #12]
    d860:	0a00      	lsrs	r0, r0, #8
    d862:	7320      	strb	r0, [r4, #12]
    d864:	200b      	movs	r0, #11
    d866:	e789      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d868:	20ff      	movs	r0, #255	; 0xff
    d86a:	7020      	strb	r0, [r4, #0]
    d86c:	20a3      	movs	r0, #163	; 0xa3
    d86e:	70a0      	strb	r0, [r4, #2]
    d870:	7928      	ldrb	r0, [r5, #4]
    d872:	70e0      	strb	r0, [r4, #3]
    d874:	88a8      	ldrh	r0, [r5, #4]
    d876:	0a00      	lsrs	r0, r0, #8
    d878:	7120      	strb	r0, [r4, #4]
    d87a:	79a8      	ldrb	r0, [r5, #6]
    d87c:	7160      	strb	r0, [r4, #5]
    d87e:	79e8      	ldrb	r0, [r5, #7]
    d880:	71a0      	strb	r0, [r4, #6]
    d882:	2005      	movs	r0, #5
    d884:	e77a      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d886:	7022      	strb	r2, [r4, #0]
    d888:	70a3      	strb	r3, [r4, #2]
    d88a:	7928      	ldrb	r0, [r5, #4]
    d88c:	70e0      	strb	r0, [r4, #3]
    d88e:	7968      	ldrb	r0, [r5, #5]
    d890:	7120      	strb	r0, [r4, #4]
    d892:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d896:	f8c4 0005 	str.w	r0, [r4, #5]
    d89a:	8968      	ldrh	r0, [r5, #10]
    d89c:	f8a4 0009 	strh.w	r0, [r4, #9]
    d8a0:	200a      	movs	r0, #10
    d8a2:	e76b      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d8a4:	20ff      	movs	r0, #255	; 0xff
    d8a6:	7020      	strb	r0, [r4, #0]
    d8a8:	20a4      	movs	r0, #164	; 0xa4
    d8aa:	70a0      	strb	r0, [r4, #2]
    d8ac:	7928      	ldrb	r0, [r5, #4]
    d8ae:	70e0      	strb	r0, [r4, #3]
    d8b0:	88a8      	ldrh	r0, [r5, #4]
    d8b2:	0a00      	lsrs	r0, r0, #8
    d8b4:	7120      	strb	r0, [r4, #4]
    d8b6:	79a8      	ldrb	r0, [r5, #6]
    d8b8:	7160      	strb	r0, [r4, #5]
    d8ba:	79e8      	ldrb	r0, [r5, #7]
    d8bc:	71a0      	strb	r0, [r4, #6]
    d8be:	2007      	movs	r0, #7
    d8c0:	e75c      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>
    d8c2:	20ff      	movs	r0, #255	; 0xff
    d8c4:	7020      	strb	r0, [r4, #0]
    d8c6:	2080      	movs	r0, #128	; 0x80
    d8c8:	70a0      	strb	r0, [r4, #2]
    d8ca:	88a9      	ldrh	r1, [r5, #4]
    d8cc:	f8a4 1003 	strh.w	r1, [r4, #3]
    d8d0:	88e9      	ldrh	r1, [r5, #6]
    d8d2:	f8a4 1005 	strh.w	r1, [r4, #5]
    d8d6:	7a29      	ldrb	r1, [r5, #8]
    d8d8:	71e1      	strb	r1, [r4, #7]
    d8da:	8969      	ldrh	r1, [r5, #10]
    d8dc:	8121      	strh	r1, [r4, #8]
    d8de:	89a9      	ldrh	r1, [r5, #12]
    d8e0:	8161      	strh	r1, [r4, #10]
    d8e2:	89e9      	ldrh	r1, [r5, #14]
    d8e4:	81a1      	strh	r1, [r4, #12]
    d8e6:	7c29      	ldrb	r1, [r5, #16]
    d8e8:	f001 0101 	and.w	r1, r1, #1
    d8ec:	73a1      	strb	r1, [r4, #14]
    d8ee:	200d      	movs	r0, #13
    d8f0:	e744      	b.n	d77c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3da>

0000d8f2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d8f2:	223e      	movs	r2, #62	; 0x3e
    d8f4:	7002      	strb	r2, [r0, #0]
    d8f6:	2201      	movs	r2, #1
    d8f8:	7082      	strb	r2, [r0, #2]
    d8fa:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d8fe:	70c2      	strb	r2, [r0, #3]
    d900:	788a      	ldrb	r2, [r1, #2]
    d902:	7102      	strb	r2, [r0, #4]
    d904:	884a      	ldrh	r2, [r1, #2]
    d906:	0a12      	lsrs	r2, r2, #8
    d908:	7142      	strb	r2, [r0, #5]
    d90a:	790a      	ldrb	r2, [r1, #4]
    d90c:	7182      	strb	r2, [r0, #6]
    d90e:	794a      	ldrb	r2, [r1, #5]
    d910:	71c2      	strb	r2, [r0, #7]
    d912:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d916:	6082      	str	r2, [r0, #8]
    d918:	894a      	ldrh	r2, [r1, #10]
    d91a:	8182      	strh	r2, [r0, #12]
    d91c:	7e0a      	ldrb	r2, [r1, #24]
    d91e:	7382      	strb	r2, [r0, #14]
    d920:	8b0a      	ldrh	r2, [r1, #24]
    d922:	0a12      	lsrs	r2, r2, #8
    d924:	73c2      	strb	r2, [r0, #15]
    d926:	7e8a      	ldrb	r2, [r1, #26]
    d928:	7402      	strb	r2, [r0, #16]
    d92a:	8b4a      	ldrh	r2, [r1, #26]
    d92c:	0a12      	lsrs	r2, r2, #8
    d92e:	7442      	strb	r2, [r0, #17]
    d930:	7f0a      	ldrb	r2, [r1, #28]
    d932:	7482      	strb	r2, [r0, #18]
    d934:	8b8a      	ldrh	r2, [r1, #28]
    d936:	0a12      	lsrs	r2, r2, #8
    d938:	74c2      	strb	r2, [r0, #19]
    d93a:	7f89      	ldrb	r1, [r1, #30]
    d93c:	7501      	strb	r1, [r0, #20]
    d93e:	2113      	movs	r1, #19
    d940:	7041      	strb	r1, [r0, #1]
    d942:	4608      	mov	r0, r1
    d944:	4770      	bx	lr
    d946:	094a      	lsrs	r2, r1, #5
    d948:	f001 011f 	and.w	r1, r1, #31
    d94c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d950:	40c8      	lsrs	r0, r1
    d952:	f000 0001 	and.w	r0, r0, #1
    d956:	4770      	bx	lr

0000d958 <sdc_hci_evt_get>:
    d958:	b510      	push	{r4, lr}
    d95a:	b120      	cbz	r0, d966 <sdc_hci_evt_get+0xe>
    d95c:	f7ff fd12 	bl	d384 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d960:	b120      	cbz	r0, d96c <sdc_hci_evt_get+0x14>
    d962:	2000      	movs	r0, #0
    d964:	bd10      	pop	{r4, pc}
    d966:	f06f 0015 	mvn.w	r0, #21
    d96a:	bd10      	pop	{r4, pc}
    d96c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d970:	bd10      	pop	{r4, pc}

0000d972 <sdc_hci_get>:
    d972:	b118      	cbz	r0, d97c <sdc_hci_get+0xa>
    d974:	b111      	cbz	r1, d97c <sdc_hci_get+0xa>
    d976:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d97a:	4770      	bx	lr
    d97c:	f06f 0015 	mvn.w	r0, #21
    d980:	4770      	bx	lr

0000d982 <sdc_hci_cmd_cb_set_event_mask>:
    d982:	b510      	push	{r4, lr}
    d984:	f7f6 fd30 	bl	43e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d988:	2000      	movs	r0, #0
    d98a:	bd10      	pop	{r4, pc}

0000d98c <sdc_hci_cmd_vs_conn_event_extend>:
    d98c:	b508      	push	{r3, lr}
    d98e:	7800      	ldrb	r0, [r0, #0]
    d990:	f88d 0000 	strb.w	r0, [sp]
    d994:	4668      	mov	r0, sp
    d996:	f002 f9c8 	bl	fd2a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d99a:	bd08      	pop	{r3, pc}

0000d99c <sdc_hci_cmd_vs_conn_update>:
    d99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d99e:	2100      	movs	r1, #0
    d9a0:	9100      	str	r1, [sp, #0]
    d9a2:	9101      	str	r1, [sp, #4]
    d9a4:	9102      	str	r1, [sp, #8]
    d9a6:	9103      	str	r1, [sp, #12]
    d9a8:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d9ac:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d9b0:	4291      	cmp	r1, r2
    d9b2:	d304      	bcc.n	d9be <sdc_hci_cmd_vs_conn_update+0x22>
    d9b4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d9b8:	fbb1 f1f2 	udiv	r1, r1, r2
    d9bc:	e005      	b.n	d9ca <sdc_hci_cmd_vs_conn_update+0x2e>
    d9be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d9c2:	fbb1 f1f2 	udiv	r1, r1, r2
    d9c6:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d9ca:	8802      	ldrh	r2, [r0, #0]
    d9cc:	b289      	uxth	r1, r1
    d9ce:	f8ad 2000 	strh.w	r2, [sp]
    d9d2:	f8ad 1002 	strh.w	r1, [sp, #2]
    d9d6:	f8ad 1004 	strh.w	r1, [sp, #4]
    d9da:	88c1      	ldrh	r1, [r0, #6]
    d9dc:	f8ad 1006 	strh.w	r1, [sp, #6]
    d9e0:	8900      	ldrh	r0, [r0, #8]
    d9e2:	f8ad 0008 	strh.w	r0, [sp, #8]
    d9e6:	4668      	mov	r0, sp
    d9e8:	f001 ff8b 	bl	f902 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d9ec:	b004      	add	sp, #16
    d9ee:	bd10      	pop	{r4, pc}

0000d9f0 <sdc_hci_cmd_vs_event_length_set>:
    d9f0:	f7fc bcb6 	b.w	a360 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d9f4 <sdc_hci_cmd_vs_llpm_mode_set>:
    d9f4:	b508      	push	{r3, lr}
    d9f6:	7800      	ldrb	r0, [r0, #0]
    d9f8:	f88d 0000 	strb.w	r0, [sp]
    d9fc:	4668      	mov	r0, sp
    d9fe:	f7fc fcbb 	bl	a378 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    da02:	bd08      	pop	{r3, pc}

0000da04 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    da04:	7800      	ldrb	r0, [r0, #0]
    da06:	b100      	cbz	r0, da0a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    da08:	2001      	movs	r0, #1
    da0a:	f002 b968 	b.w	fcde <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000da0e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    da0e:	b570      	push	{r4, r5, r6, lr}
    da10:	4605      	mov	r5, r0
    da12:	2210      	movs	r2, #16
    da14:	2100      	movs	r1, #0
    da16:	f7ff fbb3 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da1a:	2210      	movs	r2, #16
    da1c:	2100      	movs	r1, #0
    da1e:	f105 0010 	add.w	r0, r5, #16
    da22:	f7ff fbad 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da26:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    da2a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    da2e:	1c40      	adds	r0, r0, #1
    da30:	d10b      	bne.n	da4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    da32:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    da36:	1c40      	adds	r0, r0, #1
    da38:	d107      	bne.n	da4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    da3a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    da3e:	1c40      	adds	r0, r0, #1
    da40:	d103      	bne.n	da4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    da42:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    da46:	1c40      	adds	r0, r0, #1
    da48:	d00b      	beq.n	da62 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    da4a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    da4e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    da52:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    da56:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    da5a:	612a      	str	r2, [r5, #16]
    da5c:	6168      	str	r0, [r5, #20]
    da5e:	61a9      	str	r1, [r5, #24]
    da60:	61eb      	str	r3, [r5, #28]
    da62:	2000      	movs	r0, #0
    da64:	f7f7 fa16 	bl	4e94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    da68:	b918      	cbnz	r0, da72 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    da6a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    da6e:	07c0      	lsls	r0, r0, #31
    da70:	d118      	bne.n	daa4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    da72:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    da76:	1c40      	adds	r0, r0, #1
    da78:	d10b      	bne.n	da92 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    da7a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    da7e:	1c40      	adds	r0, r0, #1
    da80:	d107      	bne.n	da92 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    da82:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    da86:	1c40      	adds	r0, r0, #1
    da88:	d103      	bne.n	da92 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    da8a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    da8e:	1c40      	adds	r0, r0, #1
    da90:	d008      	beq.n	daa4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    da92:	f854 0f90 	ldr.w	r0, [r4, #144]!
    da96:	6861      	ldr	r1, [r4, #4]
    da98:	68a2      	ldr	r2, [r4, #8]
    da9a:	68e3      	ldr	r3, [r4, #12]
    da9c:	6028      	str	r0, [r5, #0]
    da9e:	6069      	str	r1, [r5, #4]
    daa0:	60aa      	str	r2, [r5, #8]
    daa2:	60eb      	str	r3, [r5, #12]
    daa4:	2000      	movs	r0, #0
    daa6:	bd70      	pop	{r4, r5, r6, pc}

0000daa8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    daa8:	b538      	push	{r3, r4, r5, lr}
    daaa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    daae:	4604      	mov	r4, r0
    dab0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    dab4:	1c40      	adds	r0, r0, #1
    dab6:	d105      	bne.n	dac4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    dab8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    dabc:	43c0      	mvns	r0, r0
    dabe:	0400      	lsls	r0, r0, #16
    dac0:	0c00      	lsrs	r0, r0, #16
    dac2:	d03e      	beq.n	db42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    dac4:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    dac8:	07c0      	lsls	r0, r0, #31
    daca:	d03a      	beq.n	db42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    dacc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    dad0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    dad4:	f8ad 1000 	strh.w	r1, [sp]
    dad8:	f8c4 0001 	str.w	r0, [r4, #1]
    dadc:	f8bd 0000 	ldrh.w	r0, [sp]
    dae0:	f8a4 0005 	strh.w	r0, [r4, #5]
    dae4:	79a0      	ldrb	r0, [r4, #6]
    dae6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    daea:	71a0      	strb	r0, [r4, #6]
    daec:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    daf0:	1c40      	adds	r0, r0, #1
    daf2:	d00f      	beq.n	db14 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    daf4:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    daf8:	1c40      	adds	r0, r0, #1
    dafa:	d00b      	beq.n	db14 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    dafc:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    db00:	1c40      	adds	r0, r0, #1
    db02:	d007      	beq.n	db14 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    db04:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    db08:	1c40      	adds	r0, r0, #1
    db0a:	d003      	beq.n	db14 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    db0c:	2000      	movs	r0, #0
    db0e:	f7f7 f9c1 	bl	4e94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    db12:	b140      	cbz	r0, db26 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    db14:	2210      	movs	r2, #16
    db16:	2100      	movs	r1, #0
    db18:	1de0      	adds	r0, r4, #7
    db1a:	f7ff fb31 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db1e:	2001      	movs	r0, #1
    db20:	7020      	strb	r0, [r4, #0]
    db22:	2000      	movs	r0, #0
    db24:	bd38      	pop	{r3, r4, r5, pc}
    db26:	f855 2f90 	ldr.w	r2, [r5, #144]!
    db2a:	6869      	ldr	r1, [r5, #4]
    db2c:	68a8      	ldr	r0, [r5, #8]
    db2e:	68eb      	ldr	r3, [r5, #12]
    db30:	f8c4 2007 	str.w	r2, [r4, #7]
    db34:	f8c4 100b 	str.w	r1, [r4, #11]
    db38:	f8c4 000f 	str.w	r0, [r4, #15]
    db3c:	f8c4 3013 	str.w	r3, [r4, #19]
    db40:	e7ed      	b.n	db1e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    db42:	2000      	movs	r0, #0
    db44:	e7ec      	b.n	db20 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000db46 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    db46:	f002 b8e2 	b.w	fd0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000db4a <sdc_hci_cmd_ip_read_bd_addr>:
    db4a:	f002 ba4c 	b.w	ffe6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000db4e <sdc_hci_cmd_ip_read_local_version_information>:
    db4e:	f7fc bc39 	b.w	a3c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000db52 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    db52:	f001 beaf 	b.w	f8b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000db56 <sdc_hci_cmd_le_clear_filter_accept_list>:
    db56:	f001 beca 	b.w	f8ee <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000db5a <sdc_hci_cmd_le_encrypt>:
    db5a:	f001 bf23 	b.w	f9a4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000db5e <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    db5e:	8802      	ldrh	r2, [r0, #0]
    db60:	800a      	strh	r2, [r1, #0]
    db62:	f001 bf28 	b.w	f9b6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000db66 <sdc_hci_cmd_le_rand>:
    db66:	f001 bf3f 	b.w	f9e8 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000db6a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    db6a:	f001 bf43 	b.w	f9f4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000db6e <sdc_hci_cmd_le_read_buffer_size>:
    db6e:	f7fc bb61 	b.w	a234 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000db72 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    db72:	f001 bf51 	b.w	fa18 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000db76 <sdc_hci_cmd_le_read_transmit_power>:
    db76:	f001 bf46 	b.w	fa06 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000db7a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    db7a:	f001 bf51 	b.w	fa20 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000db7e <sdc_hci_cmd_le_set_adv_data>:
    db7e:	f001 bf6b 	b.w	fa58 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000db82 <sdc_hci_cmd_le_set_adv_enable>:
    db82:	f001 bf7e 	b.w	fa82 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000db86 <sdc_hci_cmd_le_set_adv_params>:
    db86:	f001 bfaf 	b.w	fae8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000db8a <sdc_hci_cmd_le_set_event_mask>:
    db8a:	b510      	push	{r4, lr}
    db8c:	f7f6 fc24 	bl	43d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    db90:	2000      	movs	r0, #0
    db92:	bd10      	pop	{r4, pc}

0000db94 <sdc_hci_cmd_le_set_random_address>:
    db94:	f002 b83d 	b.w	fc12 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000db98 <sdc_hci_cmd_le_set_scan_enable>:
    db98:	f002 b849 	b.w	fc2e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000db9c <sdc_hci_cmd_le_set_scan_params>:
    db9c:	f002 b85d 	b.w	fc5a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000dba0 <sdc_hci_cmd_le_set_scan_response_data>:
    dba0:	f002 b888 	b.w	fcb4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    dba4:	1d89      	adds	r1, r1, #6
    dba6:	4408      	add	r0, r1
    dba8:	4350      	muls	r0, r2
    dbaa:	b280      	uxth	r0, r0
    dbac:	4770      	bx	lr
    dbae:	b570      	push	{r4, r5, r6, lr}
    dbb0:	880b      	ldrh	r3, [r1, #0]
    dbb2:	7f04      	ldrb	r4, [r0, #28]
    dbb4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    dbb8:	f3c3 050e 	ubfx	r5, r3, #0, #15
    dbbc:	8802      	ldrh	r2, [r0, #0]
    dbbe:	442e      	add	r6, r5
    dbc0:	1da4      	adds	r4, r4, #6
    dbc2:	8836      	ldrh	r6, [r6, #0]
    dbc4:	4422      	add	r2, r4
    dbc6:	b292      	uxth	r2, r2
    dbc8:	4426      	add	r6, r4
    dbca:	1e54      	subs	r4, r2, #1
    dbcc:	4434      	add	r4, r6
    dbce:	fb94 f4f2 	sdiv	r4, r4, r2
    dbd2:	fb02 5204 	mla	r2, r2, r4, r5
    dbd6:	8840      	ldrh	r0, [r0, #2]
    dbd8:	b292      	uxth	r2, r2
    dbda:	4290      	cmp	r0, r2
    dbdc:	d903      	bls.n	dbe6 <sdc_hci_cmd_le_set_scan_response_data+0x46>
    dbde:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    dbe2:	4310      	orrs	r0, r2
    dbe4:	e002      	b.n	dbec <sdc_hci_cmd_le_set_scan_response_data+0x4c>
    dbe6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    dbea:	4398      	bics	r0, r3
    dbec:	8008      	strh	r0, [r1, #0]
    dbee:	bd70      	pop	{r4, r5, r6, pc}
    dbf0:	4288      	cmp	r0, r1
    dbf2:	d101      	bne.n	dbf8 <sdc_hci_cmd_le_set_scan_response_data+0x58>
    dbf4:	2001      	movs	r0, #1
    dbf6:	4770      	bx	lr
    dbf8:	2000      	movs	r0, #0
    dbfa:	4770      	bx	lr
    dbfc:	0442      	lsls	r2, r0, #17
    dbfe:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    dc02:	d107      	bne.n	dc14 <sdc_hci_cmd_le_set_scan_response_data+0x74>
    dc04:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    dc08:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    dc0c:	4288      	cmp	r0, r1
    dc0e:	d001      	beq.n	dc14 <sdc_hci_cmd_le_set_scan_response_data+0x74>
    dc10:	2001      	movs	r0, #1
    dc12:	4770      	bx	lr
    dc14:	2000      	movs	r0, #0
    dc16:	4770      	bx	lr

0000dc18 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    dc18:	88c1      	ldrh	r1, [r0, #6]
    dc1a:	8880      	ldrh	r0, [r0, #4]
    dc1c:	f7ff bfe8 	b.w	dbf0 <sdc_hci_cmd_le_set_scan_response_data+0x50>

0000dc20 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    dc20:	8881      	ldrh	r1, [r0, #4]
    dc22:	8900      	ldrh	r0, [r0, #8]
    dc24:	f7ff bfe4 	b.w	dbf0 <sdc_hci_cmd_le_set_scan_response_data+0x50>

0000dc28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc2a:	4604      	mov	r4, r0
    dc2c:	f100 0324 	add.w	r3, r0, #36	; 0x24
    dc30:	88c0      	ldrh	r0, [r0, #6]
    dc32:	460f      	mov	r7, r1
    dc34:	f3c0 060e 	ubfx	r6, r0, #0, #15
    dc38:	8a60      	ldrh	r0, [r4, #18]
    dc3a:	1999      	adds	r1, r3, r6
    dc3c:	b108      	cbz	r0, dc42 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    dc3e:	42b8      	cmp	r0, r7
    dc40:	d201      	bcs.n	dc46 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    dc42:	2000      	movs	r0, #0
    dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc46:	89e0      	ldrh	r0, [r4, #14]
    dc48:	2500      	movs	r5, #0
    dc4a:	b140      	cbz	r0, dc5e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    dc4c:	f8b1 c000 	ldrh.w	ip, [r1]
    dc50:	4560      	cmp	r0, ip
    dc52:	d008      	beq.n	dc66 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    dc54:	f240 2151 	movw	r1, #593	; 0x251
    dc58:	2014      	movs	r0, #20
    dc5a:	f7f6 fa39 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc5e:	7f60      	ldrb	r0, [r4, #29]
    dc60:	7088      	strb	r0, [r1, #2]
    dc62:	800d      	strh	r5, [r1, #0]
    dc64:	e00e      	b.n	dc84 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    dc66:	f894 c01c 	ldrb.w	ip, [r4, #28]
    dc6a:	4418      	add	r0, r3
    dc6c:	f10c 0c06 	add.w	ip, ip, #6
    dc70:	44b4      	add	ip, r6
    dc72:	4460      	add	r0, ip
    dc74:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    dc78:	f820 cc03 	strh.w	ip, [r0, #-3]
    dc7c:	f894 c020 	ldrb.w	ip, [r4, #32]
    dc80:	f800 cc01 	strb.w	ip, [r0, #-1]
    dc84:	89e0      	ldrh	r0, [r4, #14]
    dc86:	4438      	add	r0, r7
    dc88:	81e0      	strh	r0, [r4, #14]
    dc8a:	8808      	ldrh	r0, [r1, #0]
    dc8c:	4438      	add	r0, r7
    dc8e:	8008      	strh	r0, [r1, #0]
    dc90:	b19a      	cbz	r2, dcba <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    dc92:	1da1      	adds	r1, r4, #6
    dc94:	4620      	mov	r0, r4
    dc96:	f7ff ff8a 	bl	dbae <sdc_hci_cmd_le_set_scan_response_data+0xe>
    dc9a:	81e5      	strh	r5, [r4, #14]
    dc9c:	7f60      	ldrb	r0, [r4, #29]
    dc9e:	1c40      	adds	r0, r0, #1
    dca0:	7760      	strb	r0, [r4, #29]
    dca2:	7da0      	ldrb	r0, [r4, #22]
    dca4:	f88d 0000 	strb.w	r0, [sp]
    dca8:	9800      	ldr	r0, [sp, #0]
    dcaa:	9000      	str	r0, [sp, #0]
    dcac:	f89d 0000 	ldrb.w	r0, [sp]
    dcb0:	b178      	cbz	r0, dcd2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dcb2:	88e0      	ldrh	r0, [r4, #6]
    dcb4:	82a0      	strh	r0, [r4, #20]
    dcb6:	75a5      	strb	r5, [r4, #22]
    dcb8:	e00b      	b.n	dcd2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dcba:	7f20      	ldrb	r0, [r4, #28]
    dcbc:	89e1      	ldrh	r1, [r4, #14]
    dcbe:	1d80      	adds	r0, r0, #6
    dcc0:	4430      	add	r0, r6
    dcc2:	4419      	add	r1, r3
    dcc4:	4408      	add	r0, r1
    dcc6:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    dcca:	83e1      	strh	r1, [r4, #30]
    dccc:	7880      	ldrb	r0, [r0, #2]
    dcce:	f884 0020 	strb.w	r0, [r4, #32]
    dcd2:	8265      	strh	r5, [r4, #18]
    dcd4:	2001      	movs	r0, #1
    dcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    dcd8:	1cc0      	adds	r0, r0, #3
    dcda:	4770      	bx	lr

0000dcdc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    dcdc:	b510      	push	{r4, lr}
    dcde:	88c2      	ldrh	r2, [r0, #6]
    dce0:	8943      	ldrh	r3, [r0, #10]
    dce2:	f3c2 040e 	ubfx	r4, r2, #0, #15
    dce6:	f3c3 010e 	ubfx	r1, r3, #0, #15
    dcea:	1b09      	subs	r1, r1, r4
    dcec:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    dcf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    dcf4:	429a      	cmp	r2, r3
    dcf6:	d101      	bne.n	dcfc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    dcf8:	8842      	ldrh	r2, [r0, #2]
    dcfa:	4411      	add	r1, r2
    dcfc:	8802      	ldrh	r2, [r0, #0]
    dcfe:	7f00      	ldrb	r0, [r0, #28]
    dd00:	1d80      	adds	r0, r0, #6
    dd02:	4410      	add	r0, r2
    dd04:	b280      	uxth	r0, r0
    dd06:	fb91 f0f0 	sdiv	r0, r1, r0
    dd0a:	b280      	uxth	r0, r0
    dd0c:	bd10      	pop	{r4, pc}

0000dd0e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    dd0e:	b510      	push	{r4, lr}
    dd10:	4604      	mov	r4, r0
    dd12:	88c1      	ldrh	r1, [r0, #6]
    dd14:	8880      	ldrh	r0, [r0, #4]
    dd16:	f7ff ff6b 	bl	dbf0 <sdc_hci_cmd_le_set_scan_response_data+0x50>
    dd1a:	b938      	cbnz	r0, dd2c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
    dd1c:	89a0      	ldrh	r0, [r4, #12]
    dd1e:	b928      	cbnz	r0, dd2c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
    dd20:	8a20      	ldrh	r0, [r4, #16]
    dd22:	b918      	cbnz	r0, dd2c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1e>
    dd24:	88a0      	ldrh	r0, [r4, #4]
    dd26:	8aa1      	ldrh	r1, [r4, #20]
    dd28:	4288      	cmp	r0, r1
    dd2a:	d101      	bne.n	dd30 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x22>
    dd2c:	2000      	movs	r0, #0
    dd2e:	bd10      	pop	{r4, pc}
    dd30:	1d21      	adds	r1, r4, #4
    dd32:	4620      	mov	r0, r4
    dd34:	f7ff ff3b 	bl	dbae <sdc_hci_cmd_le_set_scan_response_data+0xe>
    dd38:	2000      	movs	r0, #0
    dd3a:	8220      	strh	r0, [r4, #16]
    dd3c:	2001      	movs	r0, #1
    dd3e:	bd10      	pop	{r4, pc}

0000dd40 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    dd40:	b570      	push	{r4, r5, r6, lr}
    dd42:	4604      	mov	r4, r0
    dd44:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dd48:	88c1      	ldrh	r1, [r0, #6]
    dd4a:	8880      	ldrh	r0, [r0, #4]
    dd4c:	f3c0 030e 	ubfx	r3, r0, #0, #15
    dd50:	18d5      	adds	r5, r2, r3
    dd52:	88a2      	ldrh	r2, [r4, #4]
    dd54:	8aa3      	ldrh	r3, [r4, #20]
    dd56:	429a      	cmp	r2, r3
    dd58:	d013      	beq.n	dd82 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dd5a:	f7ff ff49 	bl	dbf0 <sdc_hci_cmd_le_set_scan_response_data+0x50>
    dd5e:	b980      	cbnz	r0, dd82 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dd60:	89a0      	ldrh	r0, [r4, #12]
    dd62:	b970      	cbnz	r0, dd82 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dd64:	69a4      	ldr	r4, [r4, #24]
    dd66:	b174      	cbz	r4, dd86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    dd68:	4620      	mov	r0, r4
    dd6a:	f7ff ff59 	bl	dc20 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    dd6e:	b950      	cbnz	r0, dd86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    dd70:	8920      	ldrh	r0, [r4, #8]
    dd72:	3424      	adds	r4, #36	; 0x24
    dd74:	f3c0 000e 	ubfx	r0, r0, #0, #15
    dd78:	4420      	add	r0, r4
    dd7a:	78a9      	ldrb	r1, [r5, #2]
    dd7c:	7880      	ldrb	r0, [r0, #2]
    dd7e:	4288      	cmp	r0, r1
    dd80:	d101      	bne.n	dd86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    dd82:	2000      	movs	r0, #0
    dd84:	bd70      	pop	{r4, r5, r6, pc}
    dd86:	4628      	mov	r0, r5
    dd88:	bd70      	pop	{r4, r5, r6, pc}

0000dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    dd8a:	8803      	ldrh	r3, [r0, #0]
    dd8c:	2b45      	cmp	r3, #69	; 0x45
    dd8e:	d200      	bcs.n	dd92 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    dd90:	2345      	movs	r3, #69	; 0x45
    dd92:	8013      	strh	r3, [r2, #0]
    dd94:	88c2      	ldrh	r2, [r0, #6]
    dd96:	f3c2 030e 	ubfx	r3, r2, #0, #15
    dd9a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dd9e:	441a      	add	r2, r3
    dda0:	600a      	str	r2, [r1, #0]
    dda2:	89c0      	ldrh	r0, [r0, #14]
    dda4:	4770      	bx	lr

0000dda6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    dda6:	7f00      	ldrb	r0, [r0, #28]
    dda8:	1d80      	adds	r0, r0, #6
    ddaa:	4408      	add	r0, r1
    ddac:	1ec0      	subs	r0, r0, #3
    ddae:	6010      	str	r0, [r2, #0]
    ddb0:	8808      	ldrh	r0, [r1, #0]
    ddb2:	4770      	bx	lr

0000ddb4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    ddb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddb8:	8281      	strh	r1, [r0, #20]
    ddba:	2100      	movs	r1, #0
    ddbc:	7581      	strb	r1, [r0, #22]
    ddbe:	4770      	bx	lr

0000ddc0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    ddc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddc4:	4616      	mov	r6, r2
    ddc6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ddca:	460f      	mov	r7, r1
    ddcc:	4604      	mov	r4, r0
    ddce:	461d      	mov	r5, r3
    ddd0:	4642      	mov	r2, r8
    ddd2:	4619      	mov	r1, r3
    ddd4:	4630      	mov	r0, r6
    ddd6:	f000 f855 	bl	de84 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ddda:	4287      	cmp	r7, r0
    dddc:	d201      	bcs.n	dde2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
    ddde:	21a8      	movs	r1, #168	; 0xa8
    dde0:	e019      	b.n	de16 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
    dde2:	1ce0      	adds	r0, r4, #3
    dde4:	f020 0103 	bic.w	r1, r0, #3
    dde8:	4620      	mov	r0, r4
    ddea:	42a1      	cmp	r1, r4
    ddec:	d001      	beq.n	ddf2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x32>
    ddee:	21a9      	movs	r1, #169	; 0xa9
    ddf0:	e011      	b.n	de16 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x56>
    ddf2:	2224      	movs	r2, #36	; 0x24
    ddf4:	2100      	movs	r1, #0
    ddf6:	f7ff f9c3 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ddfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ddfe:	82a0      	strh	r0, [r4, #20]
    de00:	7725      	strb	r5, [r4, #28]
    de02:	4642      	mov	r2, r8
    de04:	4629      	mov	r1, r5
    de06:	4630      	mov	r0, r6
    de08:	f7ff fecc 	bl	dba4 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    de0c:	8060      	strh	r0, [r4, #2]
    de0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    de12:	d903      	bls.n	de1c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x5c>
    de14:	21af      	movs	r1, #175	; 0xaf
    de16:	2014      	movs	r0, #20
    de18:	f7f6 f95a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de1c:	8026      	strh	r6, [r4, #0]
    de1e:	2000      	movs	r0, #0
    de20:	7760      	strb	r0, [r4, #29]
    de22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000de26 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    de26:	6181      	str	r1, [r0, #24]
    de28:	6188      	str	r0, [r1, #24]
    de2a:	4770      	bx	lr

0000de2c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    de2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de30:	4689      	mov	r9, r1
    de32:	4604      	mov	r4, r0
    de34:	f100 0124 	add.w	r1, r0, #36	; 0x24
    de38:	8906      	ldrh	r6, [r0, #8]
    de3a:	f8b0 800a 	ldrh.w	r8, [r0, #10]
    de3e:	8880      	ldrh	r0, [r0, #4]
    de40:	4617      	mov	r7, r2
    de42:	f3c6 020e 	ubfx	r2, r6, #0, #15
    de46:	188d      	adds	r5, r1, r2
    de48:	4601      	mov	r1, r0
    de4a:	4630      	mov	r0, r6
    de4c:	f7ff fed0 	bl	dbf0 <sdc_hci_cmd_le_set_scan_response_data+0x50>
    de50:	b110      	cbz	r0, de58 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
    de52:	2000      	movs	r0, #0
    de54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de58:	b10f      	cbz	r7, de5e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x32>
    de5a:	1ce8      	adds	r0, r5, #3
    de5c:	6038      	str	r0, [r7, #0]
    de5e:	f1b9 0000 	subs.w	r0, r9, #0
    de62:	d003      	beq.n	de6c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x40>
    de64:	7f22      	ldrb	r2, [r4, #28]
    de66:	1ce9      	adds	r1, r5, #3
    de68:	f7ff f910 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de6c:	882d      	ldrh	r5, [r5, #0]
    de6e:	f104 0108 	add.w	r1, r4, #8
    de72:	4620      	mov	r0, r4
    de74:	f7ff fe9b 	bl	dbae <sdc_hci_cmd_le_set_scan_response_data+0xe>
    de78:	4546      	cmp	r6, r8
    de7a:	d101      	bne.n	de80 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x54>
    de7c:	8920      	ldrh	r0, [r4, #8]
    de7e:	8160      	strh	r0, [r4, #10]
    de80:	4628      	mov	r0, r5
    de82:	e7e7      	b.n	de54 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>

0000de84 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    de84:	b510      	push	{r4, lr}
    de86:	4604      	mov	r4, r0
    de88:	f7ff fe8c 	bl	dba4 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    de8c:	2100      	movs	r1, #0
    de8e:	2c45      	cmp	r4, #69	; 0x45
    de90:	d202      	bcs.n	de98 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    de92:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
    de96:	b289      	uxth	r1, r1
    de98:	3024      	adds	r0, #36	; 0x24
    de9a:	4408      	add	r0, r1
    de9c:	b280      	uxth	r0, r0
    de9e:	bd10      	pop	{r4, pc}

0000dea0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    dea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dea4:	4688      	mov	r8, r1
    dea6:	88c1      	ldrh	r1, [r0, #6]
    dea8:	4604      	mov	r4, r0
    deaa:	8900      	ldrh	r0, [r0, #8]
    deac:	f3c1 050e 	ubfx	r5, r1, #0, #15
    deb0:	f104 0624 	add.w	r6, r4, #36	; 0x24
    deb4:	f3c0 070e 	ubfx	r7, r0, #0, #15
    deb8:	eb06 0905 	add.w	r9, r6, r5
    debc:	f7ff fe9e 	bl	dbfc <sdc_hci_cmd_le_set_scan_response_data+0x5c>
    dec0:	2200      	movs	r2, #0
    dec2:	b998      	cbnz	r0, deec <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    dec4:	8820      	ldrh	r0, [r4, #0]
    dec6:	2845      	cmp	r0, #69	; 0x45
    dec8:	d200      	bcs.n	decc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    deca:	2045      	movs	r0, #69	; 0x45
    decc:	42af      	cmp	r7, r5
    dece:	d906      	bls.n	dede <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ded0:	7f21      	ldrb	r1, [r4, #28]
    ded2:	1b7b      	subs	r3, r7, r5
    ded4:	1d89      	adds	r1, r1, #6
    ded6:	1a59      	subs	r1, r3, r1
    ded8:	4281      	cmp	r1, r0
    deda:	da00      	bge.n	dede <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dedc:	4608      	mov	r0, r1
    dede:	89e1      	ldrh	r1, [r4, #14]
    dee0:	b111      	cbz	r1, dee8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    dee2:	f8b9 3000 	ldrh.w	r3, [r9]
    dee6:	1ac0      	subs	r0, r0, r3
    dee8:	4540      	cmp	r0, r8
    deea:	da03      	bge.n	def4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    deec:	8262      	strh	r2, [r4, #18]
    deee:	2000      	movs	r0, #0
    def0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    def4:	7f20      	ldrb	r0, [r4, #28]
    def6:	4431      	add	r1, r6
    def8:	1d80      	adds	r0, r0, #6
    defa:	4428      	add	r0, r5
    defc:	4408      	add	r0, r1
    defe:	f8a4 8012 	strh.w	r8, [r4, #18]
    df02:	1ec0      	subs	r0, r0, #3
    df04:	e7f4      	b.n	def0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000df06 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    df06:	b570      	push	{r4, r5, r6, lr}
    df08:	2300      	movs	r3, #0
    df0a:	f1a1 0208 	sub.w	r2, r1, #8
    df0e:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    df12:	42a2      	cmp	r2, r4
    df14:	d304      	bcc.n	df20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    df16:	f240 11cd 	movw	r1, #461	; 0x1cd
    df1a:	2015      	movs	r0, #21
    df1c:	f7f6 f8d8 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df20:	6802      	ldr	r2, [r0, #0]
    df22:	b90a      	cbnz	r2, df28 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    df24:	e01e      	b.n	df64 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    df26:	4610      	mov	r0, r2
    df28:	6802      	ldr	r2, [r0, #0]
    df2a:	8893      	ldrh	r3, [r2, #4]
    df2c:	428b      	cmp	r3, r1
    df2e:	d002      	beq.n	df36 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    df30:	6813      	ldr	r3, [r2, #0]
    df32:	2b00      	cmp	r3, #0
    df34:	d1f7      	bne.n	df26 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    df36:	8894      	ldrh	r4, [r2, #4]
    df38:	4613      	mov	r3, r2
    df3a:	428c      	cmp	r4, r1
    df3c:	d101      	bne.n	df42 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    df3e:	6811      	ldr	r1, [r2, #0]
    df40:	e00d      	b.n	df5e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    df42:	f101 0508 	add.w	r5, r1, #8
    df46:	b2ad      	uxth	r5, r5
    df48:	42ac      	cmp	r4, r5
    df4a:	d30a      	bcc.n	df62 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    df4c:	1a64      	subs	r4, r4, r1
    df4e:	4411      	add	r1, r2
    df50:	2200      	movs	r2, #0
    df52:	600a      	str	r2, [r1, #0]
    df54:	808c      	strh	r4, [r1, #4]
    df56:	6802      	ldr	r2, [r0, #0]
    df58:	6812      	ldr	r2, [r2, #0]
    df5a:	6002      	str	r2, [r0, #0]
    df5c:	600a      	str	r2, [r1, #0]
    df5e:	6001      	str	r1, [r0, #0]
    df60:	e000      	b.n	df64 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    df62:	2300      	movs	r3, #0
    df64:	4618      	mov	r0, r3
    df66:	bd70      	pop	{r4, r5, r6, pc}

0000df68 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    df68:	b510      	push	{r4, lr}
    df6a:	000c      	movs	r4, r1
    df6c:	d004      	beq.n	df78 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    df6e:	2c08      	cmp	r4, #8
    df70:	d207      	bcs.n	df82 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    df72:	f240 1195 	movw	r1, #405	; 0x195
    df76:	e00a      	b.n	df8e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    df78:	b108      	cbz	r0, df7e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    df7a:	2100      	movs	r1, #0
    df7c:	6001      	str	r1, [r0, #0]
    df7e:	2000      	movs	r0, #0
    df80:	bd10      	pop	{r4, pc}
    df82:	b158      	cbz	r0, df9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    df84:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    df88:	d304      	bcc.n	df94 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    df8a:	f240 11a7 	movw	r1, #423	; 0x1a7
    df8e:	2015      	movs	r0, #21
    df90:	f7f6 f89e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df94:	b2a1      	uxth	r1, r4
    df96:	6800      	ldr	r0, [r0, #0]
    df98:	f000 f814 	bl	dfc4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    df9c:	1d20      	adds	r0, r4, #4
    df9e:	bd10      	pop	{r4, pc}

0000dfa0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dfa0:	2100      	movs	r1, #0
    dfa2:	6802      	ldr	r2, [r0, #0]
    dfa4:	e003      	b.n	dfae <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dfa6:	8893      	ldrh	r3, [r2, #4]
    dfa8:	6812      	ldr	r2, [r2, #0]
    dfaa:	4419      	add	r1, r3
    dfac:	b289      	uxth	r1, r1
    dfae:	2a00      	cmp	r2, #0
    dfb0:	d1f9      	bne.n	dfa6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dfb2:	f000 b807 	b.w	dfc4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dfb6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dfb6:	2300      	movs	r3, #0
    dfb8:	600b      	str	r3, [r1, #0]
    dfba:	808a      	strh	r2, [r1, #4]
    dfbc:	6802      	ldr	r2, [r0, #0]
    dfbe:	600a      	str	r2, [r1, #0]
    dfc0:	6001      	str	r1, [r0, #0]
    dfc2:	4770      	bx	lr
    dfc4:	2300      	movs	r3, #0
    dfc6:	6043      	str	r3, [r0, #4]
    dfc8:	1d02      	adds	r2, r0, #4
    dfca:	8101      	strh	r1, [r0, #8]
    dfcc:	6002      	str	r2, [r0, #0]
    dfce:	4770      	bx	lr

0000dfd0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    dfd0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    dfd2:	4604      	mov	r4, r0
    dfd4:	4669      	mov	r1, sp
    dfd6:	f000 f829 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    dfda:	b168      	cbz	r0, dff8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x28>
    dfdc:	f240 215a 	movw	r1, #602	; 0x25a
    dfe0:	e007      	b.n	dff2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x22>
    dfe2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dfe6:	4621      	mov	r1, r4
    dfe8:	f7f6 fb22 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    dfec:	b120      	cbz	r0, dff8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x28>
    dfee:	f240 215f 	movw	r1, #607	; 0x25f
    dff2:	2017      	movs	r0, #23
    dff4:	f7f6 f86c 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dff8:	4668      	mov	r0, sp
    dffa:	f7f6 faa7 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    dffe:	2800      	cmp	r0, #0
    e000:	d0ef      	beq.n	dfe2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x12>
    e002:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e004 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e004:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e008:	3bff      	subs	r3, #255	; 0xff
    e00a:	d001      	beq.n	e010 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e00c:	2905      	cmp	r1, #5
    e00e:	d301      	bcc.n	e014 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e010:	2000      	movs	r0, #0
    e012:	4770      	bx	lr
    e014:	f7f6 bb3e 	b.w	4694 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e018:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e01c:	3aff      	subs	r2, #255	; 0xff
    e01e:	d001      	beq.n	e024 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e020:	2905      	cmp	r1, #5
    e022:	d301      	bcc.n	e028 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e024:	2000      	movs	r0, #0
    e026:	4770      	bx	lr
    e028:	f7f6 bb6e 	b.w	4708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e02c:	b570      	push	{r4, r5, r6, lr}
    e02e:	4605      	mov	r5, r0
    e030:	460c      	mov	r4, r1
    e032:	4608      	mov	r0, r1
    e034:	f000 f9bd 	bl	e3b2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e038:	b108      	cbz	r0, e03e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e03a:	2010      	movs	r0, #16
    e03c:	bd70      	pop	{r4, r5, r6, pc}
    e03e:	2d05      	cmp	r5, #5
    e040:	d301      	bcc.n	e046 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e042:	2007      	movs	r0, #7
    e044:	bd70      	pop	{r4, r5, r6, pc}
    e046:	7025      	strb	r5, [r4, #0]
    e048:	2000      	movs	r0, #0
    e04a:	8060      	strh	r0, [r4, #2]
    e04c:	bd70      	pop	{r4, r5, r6, pc}
    e04e:	b510      	push	{r4, lr}
    e050:	4604      	mov	r4, r0
    e052:	f7f6 fba5 	bl	47a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e056:	42a0      	cmp	r0, r4
    e058:	d901      	bls.n	e05e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e05a:	2001      	movs	r0, #1
    e05c:	bd10      	pop	{r4, pc}
    e05e:	2000      	movs	r0, #0
    e060:	bd10      	pop	{r4, pc}
    e062:	4770      	bx	lr

0000e064 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e064:	b570      	push	{r4, r5, r6, lr}
    e066:	460e      	mov	r6, r1
    e068:	461d      	mov	r5, r3
    e06a:	4611      	mov	r1, r2
    e06c:	f000 f813 	bl	e096 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e070:	4604      	mov	r4, r0
    e072:	4629      	mov	r1, r5
    e074:	4630      	mov	r0, r6
    e076:	f000 f804 	bl	e082 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e07a:	4420      	add	r0, r4
    e07c:	1d00      	adds	r0, r0, #4
    e07e:	b280      	uxth	r0, r0
    e080:	bd70      	pop	{r4, r5, r6, pc}
    e082:	b510      	push	{r4, lr}
    e084:	460a      	mov	r2, r1
    e086:	2101      	movs	r1, #1
    e088:	f7ff fefc 	bl	de84 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e08c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e090:	1cc0      	adds	r0, r0, #3
    e092:	4008      	ands	r0, r1
    e094:	bd10      	pop	{r4, pc}
    e096:	b510      	push	{r4, lr}
    e098:	460a      	mov	r2, r1
    e09a:	210a      	movs	r1, #10
    e09c:	f7ff fef2 	bl	de84 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e0a0:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e0a4:	1cc0      	adds	r0, r0, #3
    e0a6:	4008      	ands	r0, r1
    e0a8:	bd10      	pop	{r4, pc}
    e0aa:	b510      	push	{r4, lr}
    e0ac:	4604      	mov	r4, r0
    e0ae:	4608      	mov	r0, r1
    e0b0:	f000 f815 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e0b4:	1821      	adds	r1, r4, r0
    e0b6:	7d0a      	ldrb	r2, [r1, #20]
    e0b8:	2a02      	cmp	r2, #2
    e0ba:	d008      	beq.n	e0ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e0bc:	7d49      	ldrb	r1, [r1, #21]
    e0be:	2902      	cmp	r1, #2
    e0c0:	d009      	beq.n	e0d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    e0c2:	2a03      	cmp	r2, #3
    e0c4:	d003      	beq.n	e0ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e0c6:	2903      	cmp	r1, #3
    e0c8:	d005      	beq.n	e0d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    e0ca:	2000      	movs	r0, #0
    e0cc:	bd10      	pop	{r4, pc}
    e0ce:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e0d2:	8b00      	ldrh	r0, [r0, #24]
    e0d4:	bd10      	pop	{r4, pc}
    e0d6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e0da:	8b40      	ldrh	r0, [r0, #26]
    e0dc:	bd10      	pop	{r4, pc}
    e0de:	b108      	cbz	r0, e0e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e0e0:	2000      	movs	r0, #0
    e0e2:	4770      	bx	lr
    e0e4:	2002      	movs	r0, #2
    e0e6:	4770      	bx	lr
    e0e8:	b510      	push	{r4, lr}
    e0ea:	4604      	mov	r4, r0
    e0ec:	4608      	mov	r0, r1
    e0ee:	f7ff fff6 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e0f2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e0f6:	8b01      	ldrh	r1, [r0, #24]
    e0f8:	b911      	cbnz	r1, e100 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9c>
    e0fa:	8b40      	ldrh	r0, [r0, #26]
    e0fc:	2800      	cmp	r0, #0
    e0fe:	d000      	beq.n	e102 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9e>
    e100:	2001      	movs	r0, #1
    e102:	bd10      	pop	{r4, pc}
    e104:	b538      	push	{r3, r4, r5, lr}
    e106:	4604      	mov	r4, r0
    e108:	7880      	ldrb	r0, [r0, #2]
    e10a:	460d      	mov	r5, r1
    e10c:	f88d 0000 	strb.w	r0, [sp]
    e110:	9800      	ldr	r0, [sp, #0]
    e112:	9000      	str	r0, [sp, #0]
    e114:	f89d 0000 	ldrb.w	r0, [sp]
    e118:	b948      	cbnz	r0, e12e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xca>
    e11a:	4610      	mov	r0, r2
    e11c:	f7ff ffdf 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e120:	1821      	adds	r1, r4, r0
    e122:	7d0a      	ldrb	r2, [r1, #20]
    e124:	2a02      	cmp	r2, #2
    e126:	d004      	beq.n	e132 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xce>
    e128:	7d49      	ldrb	r1, [r1, #21]
    e12a:	2902      	cmp	r1, #2
    e12c:	d005      	beq.n	e13a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xd6>
    e12e:	2000      	movs	r0, #0
    e130:	bd38      	pop	{r3, r4, r5, pc}
    e132:	4602      	mov	r2, r0
    e134:	1c40      	adds	r0, r0, #1
    e136:	b2c0      	uxtb	r0, r0
    e138:	e001      	b.n	e13e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xda>
    e13a:	1c41      	adds	r1, r0, #1
    e13c:	b2ca      	uxtb	r2, r1
    e13e:	b185      	cbz	r5, e162 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xfe>
    e140:	1823      	adds	r3, r4, r0
    e142:	2100      	movs	r1, #0
    e144:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e148:	7519      	strb	r1, [r3, #20]
    e14a:	8301      	strh	r1, [r0, #24]
    e14c:	2003      	movs	r0, #3
    e14e:	18a1      	adds	r1, r4, r2
    e150:	7508      	strb	r0, [r1, #20]
    e152:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    e156:	6840      	ldr	r0, [r0, #4]
    e158:	6028      	str	r0, [r5, #0]
    e15a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
    e15e:	8b00      	ldrh	r0, [r0, #24]
    e160:	80a8      	strh	r0, [r5, #4]
    e162:	2001      	movs	r0, #1
    e164:	bd38      	pop	{r3, r4, r5, pc}
    e166:	b570      	push	{r4, r5, r6, lr}
    e168:	4604      	mov	r4, r0
    e16a:	4615      	mov	r5, r2
    e16c:	4608      	mov	r0, r1
    e16e:	f7ff ffb6 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e172:	1821      	adds	r1, r4, r0
    e174:	7d0a      	ldrb	r2, [r1, #20]
    e176:	42aa      	cmp	r2, r5
    e178:	d103      	bne.n	e182 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    e17a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e17e:	8b00      	ldrh	r0, [r0, #24]
    e180:	bd70      	pop	{r4, r5, r6, pc}
    e182:	7d49      	ldrb	r1, [r1, #21]
    e184:	42a9      	cmp	r1, r5
    e186:	d103      	bne.n	e190 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    e188:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e18c:	8b40      	ldrh	r0, [r0, #26]
    e18e:	bd70      	pop	{r4, r5, r6, pc}
    e190:	2000      	movs	r0, #0
    e192:	bd70      	pop	{r4, r5, r6, pc}
    e194:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e198:	d201      	bcs.n	e19e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13a>
    e19a:	0840      	lsrs	r0, r0, #1
    e19c:	4770      	bx	lr
    e19e:	20ff      	movs	r0, #255	; 0xff
    e1a0:	4770      	bx	lr
    e1a2:	b510      	push	{r4, lr}
    e1a4:	4604      	mov	r4, r0
    e1a6:	f7ff fff5 	bl	e194 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x130>
    e1aa:	1a20      	subs	r0, r4, r0
    e1ac:	f240 6172 	movw	r1, #1650	; 0x672
    e1b0:	4288      	cmp	r0, r1
    e1b2:	db00      	blt.n	e1b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x152>
    e1b4:	4608      	mov	r0, r1
    e1b6:	b280      	uxth	r0, r0
    e1b8:	bd10      	pop	{r4, pc}

0000e1ba <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e1ba:	2101      	movs	r1, #1
    e1bc:	f7ff bf75 	b.w	e0aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1c4:	4606      	mov	r6, r0
    e1c6:	f342 0780 	sbfx	r7, r2, #2, #1
    e1ca:	7848      	ldrb	r0, [r1, #1]
    e1cc:	460c      	mov	r4, r1
    e1ce:	f022 0504 	bic.w	r5, r2, #4
    e1d2:	1c7f      	adds	r7, r7, #1
    e1d4:	b100      	cbz	r0, e1d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e1d6:	b995      	cbnz	r5, e1fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
    e1d8:	4328      	orrs	r0, r5
    e1da:	d010      	beq.n	e1fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
    e1dc:	2000      	movs	r0, #0
    e1de:	b120      	cbz	r0, e1ea <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
    e1e0:	b17d      	cbz	r5, e202 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
    e1e2:	2100      	movs	r1, #0
    e1e4:	4620      	mov	r0, r4
    e1e6:	f7f6 fbeb 	bl	49c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e1ea:	20ff      	movs	r0, #255	; 0xff
    e1ec:	70a0      	strb	r0, [r4, #2]
    e1ee:	4638      	mov	r0, r7
    e1f0:	f7ff ff75 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e1f4:	1821      	adds	r1, r4, r0
    e1f6:	7d09      	ldrb	r1, [r1, #20]
    e1f8:	2903      	cmp	r1, #3
    e1fa:	d004      	beq.n	e206 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
    e1fc:	e007      	b.n	e20e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
    e1fe:	2001      	movs	r0, #1
    e200:	e7ed      	b.n	e1de <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
    e202:	2101      	movs	r1, #1
    e204:	e7ee      	b.n	e1e4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
    e206:	2d02      	cmp	r5, #2
    e208:	d001      	beq.n	e20e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
    e20a:	1c40      	adds	r0, r0, #1
    e20c:	b2c0      	uxtb	r0, r0
    e20e:	1822      	adds	r2, r4, r0
    e210:	2101      	movs	r1, #1
    e212:	7511      	strb	r1, [r2, #20]
    e214:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    e218:	2100      	movs	r1, #0
    e21a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e21e:	8311      	strh	r1, [r2, #24]
    e220:	6842      	ldr	r2, [r0, #4]
    e222:	70a1      	strb	r1, [r4, #2]
    e224:	4633      	mov	r3, r6
    e226:	f361 030f 	bfi	r3, r1, #0, #16
    e22a:	c60c      	stmia	r6!, {r2, r3}
    e22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e230 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e234:	4604      	mov	r4, r0
    e236:	461e      	mov	r6, r3
    e238:	4690      	mov	r8, r2
    e23a:	4608      	mov	r0, r1
    e23c:	f7ff ff4f 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e240:	21ff      	movs	r1, #255	; 0xff
    e242:	70a1      	strb	r1, [r4, #2]
    e244:	1821      	adds	r1, r4, r0
    e246:	7d0a      	ldrb	r2, [r1, #20]
    e248:	2a01      	cmp	r2, #1
    e24a:	d004      	beq.n	e256 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e24c:	7d49      	ldrb	r1, [r1, #21]
    e24e:	2901      	cmp	r1, #1
    e250:	d10c      	bne.n	e26c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3c>
    e252:	1c40      	adds	r0, r0, #1
    e254:	b2c0      	uxtb	r0, r0
    e256:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e25a:	2700      	movs	r7, #0
    e25c:	8b29      	ldrh	r1, [r5, #24]
    e25e:	8c2b      	ldrh	r3, [r5, #32]
    e260:	198a      	adds	r2, r1, r6
    e262:	429a      	cmp	r2, r3
    e264:	d905      	bls.n	e272 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x42>
    e266:	4420      	add	r0, r4
    e268:	832f      	strh	r7, [r5, #24]
    e26a:	7507      	strb	r7, [r0, #20]
    e26c:	2000      	movs	r0, #0
    e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e272:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e276:	4632      	mov	r2, r6
    e278:	6840      	ldr	r0, [r0, #4]
    e27a:	4408      	add	r0, r1
    e27c:	4641      	mov	r1, r8
    e27e:	f7fe ff05 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e282:	8b28      	ldrh	r0, [r5, #24]
    e284:	4430      	add	r0, r6
    e286:	8328      	strh	r0, [r5, #24]
    e288:	70a7      	strb	r7, [r4, #2]
    e28a:	2001      	movs	r0, #1
    e28c:	e7ef      	b.n	e26e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>

0000e28e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e28e:	2202      	movs	r2, #2
    e290:	2100      	movs	r1, #0
    e292:	f7ff bf68 	b.w	e166 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0000e296 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e296:	b510      	push	{r4, lr}
    e298:	2101      	movs	r1, #1
    e29a:	f7ff ff25 	bl	e0e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x84>
    e29e:	2800      	cmp	r0, #0
    e2a0:	d000      	beq.n	e2a4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e2a2:	2001      	movs	r0, #1
    e2a4:	bd10      	pop	{r4, pc}

0000e2a6 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e2a6:	2201      	movs	r2, #1
    e2a8:	f7ff bf2c 	b.w	e104 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>

0000e2ac <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e2ac:	2200      	movs	r2, #0
    e2ae:	f7ff bf29 	b.w	e104 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>

0000e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e2b2:	b570      	push	{r4, r5, r6, lr}
    e2b4:	4604      	mov	r4, r0
    e2b6:	4615      	mov	r5, r2
    e2b8:	4608      	mov	r0, r1
    e2ba:	f7ff ff10 	bl	e0de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e2be:	21ff      	movs	r1, #255	; 0xff
    e2c0:	70a1      	strb	r1, [r4, #2]
    e2c2:	1821      	adds	r1, r4, r0
    e2c4:	2202      	movs	r2, #2
    e2c6:	7d0b      	ldrb	r3, [r1, #20]
    e2c8:	2b01      	cmp	r3, #1
    e2ca:	d007      	beq.n	e2dc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
    e2cc:	7d4b      	ldrb	r3, [r1, #21]
    e2ce:	2b01      	cmp	r3, #1
    e2d0:	d009      	beq.n	e2e6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
    e2d2:	f44f 718b 	mov.w	r1, #278	; 0x116
    e2d6:	2009      	movs	r0, #9
    e2d8:	f7f5 fefa 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2dc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e2e0:	8305      	strh	r5, [r0, #24]
    e2e2:	750a      	strb	r2, [r1, #20]
    e2e4:	e003      	b.n	e2ee <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
    e2e6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    e2ea:	8345      	strh	r5, [r0, #26]
    e2ec:	754a      	strb	r2, [r1, #21]
    e2ee:	2000      	movs	r0, #0
    e2f0:	70a0      	strb	r0, [r4, #2]
    e2f2:	bd70      	pop	{r4, r5, r6, pc}

0000e2f4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e2f4:	2101      	movs	r1, #1
    e2f6:	7001      	strb	r1, [r0, #0]
    e2f8:	4770      	bx	lr

0000e2fa <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e2fa:	2201      	movs	r2, #1
    e2fc:	4611      	mov	r1, r2
    e2fe:	f7ff bf32 	b.w	e166 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0000e302 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e302:	2201      	movs	r2, #1
    e304:	2100      	movs	r1, #0
    e306:	f7ff bf2e 	b.w	e166 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0000e30a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e30a:	2100      	movs	r1, #0
    e30c:	f7ff becd 	b.w	e0aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e310:	2800      	cmp	r0, #0
    e312:	db09      	blt.n	e328 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e314:	f000 021f 	and.w	r2, r0, #31
    e318:	2101      	movs	r1, #1
    e31a:	4091      	lsls	r1, r2
    e31c:	0940      	lsrs	r0, r0, #5
    e31e:	0080      	lsls	r0, r0, #2
    e320:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e324:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e328:	4770      	bx	lr
    e32a:	2800      	cmp	r0, #0
    e32c:	db0d      	blt.n	e34a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e32e:	f000 021f 	and.w	r2, r0, #31
    e332:	2101      	movs	r1, #1
    e334:	4091      	lsls	r1, r2
    e336:	0940      	lsrs	r0, r0, #5
    e338:	0080      	lsls	r0, r0, #2
    e33a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e33e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e342:	f3bf 8f4f 	dsb	sy
    e346:	f3bf 8f6f 	isb	sy
    e34a:	4770      	bx	lr
    e34c:	b510      	push	{r4, lr}
    e34e:	200e      	movs	r0, #14
    e350:	f7ff ffeb 	bl	e32a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e354:	200e      	movs	r0, #14
    e356:	f7ff ffdb 	bl	e310 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e35a:	200f      	movs	r0, #15
    e35c:	f7ff ffe5 	bl	e32a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e364:	200f      	movs	r0, #15
    e366:	f7ff bfd3 	b.w	e310 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e36a:	2800      	cmp	r0, #0
    e36c:	db09      	blt.n	e382 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e36e:	f000 021f 	and.w	r2, r0, #31
    e372:	2101      	movs	r1, #1
    e374:	4091      	lsls	r1, r2
    e376:	0940      	lsrs	r0, r0, #5
    e378:	0080      	lsls	r0, r0, #2
    e37a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e37e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e382:	4770      	bx	lr
    e384:	5840      	ldr	r0, [r0, r1]
    e386:	2800      	cmp	r0, #0
    e388:	d000      	beq.n	e38c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e38a:	2001      	movs	r0, #1
    e38c:	4770      	bx	lr

0000e38e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e38e:	b510      	push	{r4, lr}
    e390:	4604      	mov	r4, r0
    e392:	4620      	mov	r0, r4
    e394:	f7f6 fc70 	bl	4c78 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e398:	2811      	cmp	r0, #17
    e39a:	d0fa      	beq.n	e392 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e39c:	bd10      	pop	{r4, pc}

0000e39e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e39e:	b510      	push	{r4, lr}
    e3a0:	f7ff fff5 	bl	e38e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e3a4:	2800      	cmp	r0, #0
    e3a6:	d003      	beq.n	e3b0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e3a8:	21a0      	movs	r1, #160	; 0xa0
    e3aa:	201d      	movs	r0, #29
    e3ac:	f7f5 fe90 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b0:	bd10      	pop	{r4, pc}

0000e3b2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e3b2:	b108      	cbz	r0, e3b8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e3b4:	2000      	movs	r0, #0
    e3b6:	4770      	bx	lr
    e3b8:	2001      	movs	r0, #1
    e3ba:	4770      	bx	lr

0000e3bc <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e3bc:	4050      	eors	r0, r2
    e3be:	780a      	ldrb	r2, [r1, #0]
    e3c0:	f893 c000 	ldrb.w	ip, [r3]
    e3c4:	ea82 020c 	eor.w	r2, r2, ip
    e3c8:	4410      	add	r0, r2
    e3ca:	784a      	ldrb	r2, [r1, #1]
    e3cc:	f893 c001 	ldrb.w	ip, [r3, #1]
    e3d0:	ea82 020c 	eor.w	r2, r2, ip
    e3d4:	4410      	add	r0, r2
    e3d6:	788a      	ldrb	r2, [r1, #2]
    e3d8:	f893 c002 	ldrb.w	ip, [r3, #2]
    e3dc:	ea82 020c 	eor.w	r2, r2, ip
    e3e0:	4410      	add	r0, r2
    e3e2:	78ca      	ldrb	r2, [r1, #3]
    e3e4:	f893 c003 	ldrb.w	ip, [r3, #3]
    e3e8:	ea82 020c 	eor.w	r2, r2, ip
    e3ec:	4410      	add	r0, r2
    e3ee:	790a      	ldrb	r2, [r1, #4]
    e3f0:	f893 c004 	ldrb.w	ip, [r3, #4]
    e3f4:	7949      	ldrb	r1, [r1, #5]
    e3f6:	ea82 020c 	eor.w	r2, r2, ip
    e3fa:	4410      	add	r0, r2
    e3fc:	795a      	ldrb	r2, [r3, #5]
    e3fe:	4051      	eors	r1, r2
    e400:	42c1      	cmn	r1, r0
    e402:	bf0c      	ite	eq
    e404:	2001      	moveq	r0, #1
    e406:	2000      	movne	r0, #0
    e408:	4770      	bx	lr

0000e40a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e40a:	b510      	push	{r4, lr}
    e40c:	2900      	cmp	r1, #0
    e40e:	4604      	mov	r4, r0
    e410:	f04f 0106 	mov.w	r1, #6
    e414:	d002      	beq.n	e41c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e416:	f7f5 fec9 	bl	41ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e41a:	e001      	b.n	e420 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e41c:	f7f5 fee2 	bl	41e4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e420:	7960      	ldrb	r0, [r4, #5]
    e422:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e426:	7160      	strb	r0, [r4, #5]
    e428:	bd10      	pop	{r4, pc}

0000e42a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e42a:	4770      	bx	lr

0000e42c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e42c:	b530      	push	{r4, r5, lr}
    e42e:	460c      	mov	r4, r1
    e430:	4605      	mov	r5, r0
    e432:	b08d      	sub	sp, #52	; 0x34
    e434:	f04f 0103 	mov.w	r1, #3
    e438:	f104 0003 	add.w	r0, r4, #3
    e43c:	b112      	cbz	r2, e444 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e43e:	f7f5 feb5 	bl	41ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e442:	e001      	b.n	e448 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e444:	f7f5 fece 	bl	41e4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e448:	7960      	ldrb	r0, [r4, #5]
    e44a:	220d      	movs	r2, #13
    e44c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e450:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e454:	7160      	strb	r0, [r4, #5]
    e456:	2100      	movs	r1, #0
    e458:	a804      	add	r0, sp, #16
    e45a:	f7fe fe91 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e45e:	78e0      	ldrb	r0, [r4, #3]
    e460:	f88d 001f 	strb.w	r0, [sp, #31]
    e464:	7920      	ldrb	r0, [r4, #4]
    e466:	f88d 001e 	strb.w	r0, [sp, #30]
    e46a:	7960      	ldrb	r0, [r4, #5]
    e46c:	f88d 001d 	strb.w	r0, [sp, #29]
    e470:	6828      	ldr	r0, [r5, #0]
    e472:	9000      	str	r0, [sp, #0]
    e474:	6868      	ldr	r0, [r5, #4]
    e476:	9001      	str	r0, [sp, #4]
    e478:	68a8      	ldr	r0, [r5, #8]
    e47a:	9002      	str	r0, [sp, #8]
    e47c:	68e8      	ldr	r0, [r5, #12]
    e47e:	9003      	str	r0, [sp, #12]
    e480:	4668      	mov	r0, sp
    e482:	f7ff ff8c 	bl	e39e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e486:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e48a:	7020      	strb	r0, [r4, #0]
    e48c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e490:	7060      	strb	r0, [r4, #1]
    e492:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e496:	70a0      	strb	r0, [r4, #2]
    e498:	b00d      	add	sp, #52	; 0x34
    e49a:	bd30      	pop	{r4, r5, pc}

0000e49c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e49c:	b530      	push	{r4, r5, lr}
    e49e:	b08d      	sub	sp, #52	; 0x34
    e4a0:	460c      	mov	r4, r1
    e4a2:	4605      	mov	r5, r0
    e4a4:	220d      	movs	r2, #13
    e4a6:	2100      	movs	r1, #0
    e4a8:	a804      	add	r0, sp, #16
    e4aa:	f7fe fe69 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e4ae:	78e0      	ldrb	r0, [r4, #3]
    e4b0:	f88d 001f 	strb.w	r0, [sp, #31]
    e4b4:	7920      	ldrb	r0, [r4, #4]
    e4b6:	f88d 001e 	strb.w	r0, [sp, #30]
    e4ba:	7960      	ldrb	r0, [r4, #5]
    e4bc:	f88d 001d 	strb.w	r0, [sp, #29]
    e4c0:	6828      	ldr	r0, [r5, #0]
    e4c2:	9000      	str	r0, [sp, #0]
    e4c4:	6868      	ldr	r0, [r5, #4]
    e4c6:	9001      	str	r0, [sp, #4]
    e4c8:	68a8      	ldr	r0, [r5, #8]
    e4ca:	9002      	str	r0, [sp, #8]
    e4cc:	68e8      	ldr	r0, [r5, #12]
    e4ce:	9003      	str	r0, [sp, #12]
    e4d0:	4668      	mov	r0, sp
    e4d2:	f7ff ff64 	bl	e39e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e4d6:	7820      	ldrb	r0, [r4, #0]
    e4d8:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e4dc:	4288      	cmp	r0, r1
    e4de:	d10c      	bne.n	e4fa <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
    e4e0:	7860      	ldrb	r0, [r4, #1]
    e4e2:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e4e6:	4288      	cmp	r0, r1
    e4e8:	d107      	bne.n	e4fa <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x5e>
    e4ea:	78a0      	ldrb	r0, [r4, #2]
    e4ec:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e4f0:	4288      	cmp	r0, r1
    e4f2:	bf02      	ittt	eq
    e4f4:	2001      	moveq	r0, #1
    e4f6:	b00d      	addeq	sp, #52	; 0x34
    e4f8:	bd30      	popeq	{r4, r5, pc}
    e4fa:	2000      	movs	r0, #0
    e4fc:	b00d      	add	sp, #52	; 0x34
    e4fe:	bd30      	pop	{r4, r5, pc}

0000e500 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e500:	b510      	push	{r4, lr}
    e502:	f7fc fb77 	bl	abf4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e506:	2800      	cmp	r0, #0
    e508:	bf04      	itt	eq
    e50a:	20ff      	moveq	r0, #255	; 0xff
    e50c:	bd10      	popeq	{r4, pc}
    e50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e512:	f7fc bb4f 	b.w	abb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0000e516 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e516:	b510      	push	{r4, lr}
    e518:	f7f6 ff68 	bl	53ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e51c:	2810      	cmp	r0, #16
    e51e:	bf04      	itt	eq
    e520:	2000      	moveq	r0, #0
    e522:	bd10      	popeq	{r4, pc}
    e524:	f7f6 ffa8 	bl	5478 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    e528:	2001      	movs	r0, #1
    e52a:	bd10      	pop	{r4, pc}

0000e52c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e52c:	b570      	push	{r4, r5, r6, lr}
    e52e:	460c      	mov	r4, r1
    e530:	4605      	mov	r5, r0
    e532:	2100      	movs	r1, #0
    e534:	f7ff fd70 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e538:	6060      	str	r0, [r4, #4]
    e53a:	b110      	cbz	r0, e542 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e53c:	2000      	movs	r0, #0
    e53e:	7020      	strb	r0, [r4, #0]
    e540:	bd70      	pop	{r4, r5, r6, pc}
    e542:	2101      	movs	r1, #1
    e544:	4628      	mov	r0, r5
    e546:	f7ff fd67 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e54a:	6060      	str	r0, [r4, #4]
    e54c:	2800      	cmp	r0, #0
    e54e:	bf04      	itt	eq
    e550:	2002      	moveq	r0, #2
    e552:	bd70      	popeq	{r4, r5, r6, pc}
    e554:	2001      	movs	r0, #1
    e556:	7020      	strb	r0, [r4, #0]
    e558:	2000      	movs	r0, #0
    e55a:	bd70      	pop	{r4, r5, r6, pc}

0000e55c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e55c:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
    e560:	2906      	cmp	r1, #6
    e562:	bf9a      	itte	ls
    e564:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    e568:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
    e56c:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    e570:	4348      	muls	r0, r1
    e572:	4770      	bx	lr

0000e574 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e574:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
    e578:	f241 7270 	movw	r2, #6000	; 0x1770
    e57c:	4291      	cmp	r1, r2
    e57e:	bf94      	ite	ls
    e580:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
    e584:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
    e588:	fbb0 f0f1 	udiv	r0, r0, r1
    e58c:	bf98      	it	ls
    e58e:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
    e592:	b280      	uxth	r0, r0
    e594:	4770      	bx	lr

0000e596 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e596:	f011 0f0c 	tst.w	r1, #12
    e59a:	d014      	beq.n	e5c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e59c:	f001 0104 	and.w	r1, r1, #4
    e5a0:	2900      	cmp	r1, #0
    e5a2:	bf0d      	iteet	eq
    e5a4:	2240      	moveq	r2, #64	; 0x40
    e5a6:	2210      	movne	r2, #16
    e5a8:	2196      	movne	r1, #150	; 0x96
    e5aa:	f44f 7116 	moveq.w	r1, #600	; 0x258
    e5ae:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e5b2:	eba0 0301 	sub.w	r3, r0, r1
    e5b6:	4288      	cmp	r0, r1
    e5b8:	bf82      	ittt	hi
    e5ba:	fb93 f0f2 	sdivhi	r0, r3, r2
    e5be:	b280      	uxthhi	r0, r0
    e5c0:	4770      	bxhi	lr
    e5c2:	2000      	movs	r0, #0
    e5c4:	4770      	bx	lr
    e5c6:	2902      	cmp	r1, #2
    e5c8:	d008      	beq.n	e5dc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x46>
    e5ca:	2870      	cmp	r0, #112	; 0x70
    e5cc:	d9f9      	bls.n	e5c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
    e5ce:	3870      	subs	r0, #112	; 0x70
    e5d0:	17c1      	asrs	r1, r0, #31
    e5d2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e5d6:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e5da:	4770      	bx	lr
    e5dc:	283c      	cmp	r0, #60	; 0x3c
    e5de:	d9f0      	bls.n	e5c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
    e5e0:	383c      	subs	r0, #60	; 0x3c
    e5e2:	17c1      	asrs	r1, r0, #31
    e5e4:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e5e8:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e5ec:	4770      	bx	lr

0000e5ee <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e5ee:	6809      	ldr	r1, [r1, #0]
    e5f0:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    e5f4:	4770      	bx	lr

0000e5f6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5fa:	4607      	mov	r7, r0
    e5fc:	460e      	mov	r6, r1
    e5fe:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
    e602:	f7f3 fad1 	bl	1ba8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e606:	b1a0      	cbz	r0, e632 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3c>
    e608:	b336      	cbz	r6, e658 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
    e60a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e60e:	1b02      	subs	r2, r0, r4
    e610:	eb61 0305 	sbc.w	r3, r1, r5
    e614:	2000      	movs	r0, #0
    e616:	4601      	mov	r1, r0
    e618:	1a80      	subs	r0, r0, r2
    e61a:	eb71 0003 	sbcs.w	r0, r1, r3
    e61e:	da1b      	bge.n	e658 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
    e620:	1c50      	adds	r0, r2, #1
    e622:	f173 0000 	sbcs.w	r0, r3, #0
    e626:	db09      	blt.n	e63c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x46>
    e628:	f240 2136 	movw	r1, #566	; 0x236
    e62c:	2029      	movs	r0, #41	; 0x29
    e62e:	f7f5 fd4f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e632:	f44f 710b 	mov.w	r1, #556	; 0x22c
    e636:	2029      	movs	r0, #41	; 0x29
    e638:	f7f5 fd4a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e63c:	1990      	adds	r0, r2, r6
    e63e:	1e40      	subs	r0, r0, #1
    e640:	fbb0 f1f6 	udiv	r1, r0, r6
    e644:	fb01 f006 	mul.w	r0, r1, r6
    e648:	1820      	adds	r0, r4, r0
    e64a:	f145 0200 	adc.w	r2, r5, #0
    e64e:	e9c7 0204 	strd	r0, r2, [r7, #16]
    e652:	4608      	mov	r0, r1
    e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e658:	2000      	movs	r0, #0
    e65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e65e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e65e:	f641 524c 	movw	r2, #7500	; 0x1d4c
    e662:	4291      	cmp	r1, r2
    e664:	bf3e      	ittt	cc
    e666:	2164      	movcc	r1, #100	; 0x64
    e668:	fb10 f001 	smulbbcc	r0, r0, r1
    e66c:	4770      	bxcc	lr
    e66e:	f240 2171 	movw	r1, #625	; 0x271
    e672:	fb10 f001 	smulbb	r0, r0, r1
    e676:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e67a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e67e:	4770      	bx	lr
    e680:	78c3      	ldrb	r3, [r0, #3]
    e682:	4602      	mov	r2, r0
    e684:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    e688:	bf08      	it	eq
    e68a:	4770      	bxeq	lr
    e68c:	2005      	movs	r0, #5
    e68e:	7912      	ldrb	r2, [r2, #4]
    e690:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
    e694:	f012 0301 	ands.w	r3, r2, #1
    e698:	bf18      	it	ne
    e69a:	2301      	movne	r3, #1
    e69c:	b123      	cbz	r3, e6a8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x4a>
    e69e:	2900      	cmp	r1, #0
    e6a0:	bf14      	ite	ne
    e6a2:	200b      	movne	r0, #11
    e6a4:	4770      	bxeq	lr
    e6a6:	e001      	b.n	e6ac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x4e>
    e6a8:	2900      	cmp	r1, #0
    e6aa:	d04f      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e6ac:	f012 0302 	ands.w	r3, r2, #2
    e6b0:	bf18      	it	ne
    e6b2:	2301      	movne	r3, #1
    e6b4:	b123      	cbz	r3, e6c0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x62>
    e6b6:	2901      	cmp	r1, #1
    e6b8:	bf14      	ite	ne
    e6ba:	1d80      	addne	r0, r0, #6
    e6bc:	4770      	bxeq	lr
    e6be:	e001      	b.n	e6c4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x66>
    e6c0:	2901      	cmp	r1, #1
    e6c2:	d043      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e6c4:	f012 0304 	ands.w	r3, r2, #4
    e6c8:	bf18      	it	ne
    e6ca:	2301      	movne	r3, #1
    e6cc:	b123      	cbz	r3, e6d8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x7a>
    e6ce:	2902      	cmp	r1, #2
    e6d0:	bf14      	ite	ne
    e6d2:	1c40      	addne	r0, r0, #1
    e6d4:	4770      	bxeq	lr
    e6d6:	e001      	b.n	e6dc <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x7e>
    e6d8:	2902      	cmp	r1, #2
    e6da:	d037      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e6dc:	f012 0308 	ands.w	r3, r2, #8
    e6e0:	bf18      	it	ne
    e6e2:	2301      	movne	r3, #1
    e6e4:	b123      	cbz	r3, e6f0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x92>
    e6e6:	2903      	cmp	r1, #3
    e6e8:	bf14      	ite	ne
    e6ea:	1c80      	addne	r0, r0, #2
    e6ec:	4770      	bxeq	lr
    e6ee:	e001      	b.n	e6f4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x96>
    e6f0:	2903      	cmp	r1, #3
    e6f2:	d02b      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e6f4:	f012 0310 	ands.w	r3, r2, #16
    e6f8:	bf18      	it	ne
    e6fa:	2301      	movne	r3, #1
    e6fc:	b123      	cbz	r3, e708 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xaa>
    e6fe:	2904      	cmp	r1, #4
    e700:	bf14      	ite	ne
    e702:	1cc0      	addne	r0, r0, #3
    e704:	4770      	bxeq	lr
    e706:	e001      	b.n	e70c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xae>
    e708:	2904      	cmp	r1, #4
    e70a:	d01f      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e70c:	f012 0320 	ands.w	r3, r2, #32
    e710:	bf18      	it	ne
    e712:	2301      	movne	r3, #1
    e714:	b12b      	cbz	r3, e722 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xc4>
    e716:	2905      	cmp	r1, #5
    e718:	bf1a      	itte	ne
    e71a:	3012      	addne	r0, #18
    e71c:	b2c0      	uxtbne	r0, r0
    e71e:	4770      	bxeq	lr
    e720:	e001      	b.n	e726 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xc8>
    e722:	2905      	cmp	r1, #5
    e724:	d012      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e726:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e72a:	bf18      	it	ne
    e72c:	2201      	movne	r2, #1
    e72e:	b12a      	cbz	r2, e73c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xde>
    e730:	2906      	cmp	r1, #6
    e732:	bf1a      	itte	ne
    e734:	1c40      	addne	r0, r0, #1
    e736:	b2c0      	uxtbne	r0, r0
    e738:	4770      	bxeq	lr
    e73a:	e001      	b.n	e740 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xe2>
    e73c:	2906      	cmp	r1, #6
    e73e:	d005      	beq.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e740:	2907      	cmp	r1, #7
    e742:	d103      	bne.n	e74c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0xee>
    e744:	1f41      	subs	r1, r0, #5
    e746:	458c      	cmp	ip, r1
    e748:	bfc8      	it	gt
    e74a:	4770      	bxgt	lr
    e74c:	2000      	movs	r0, #0
    e74e:	4770      	bx	lr

0000e750 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    e750:	b570      	push	{r4, r5, r6, lr}
    e752:	7802      	ldrb	r2, [r0, #0]
    e754:	7841      	ldrb	r1, [r0, #1]
    e756:	f002 020f 	and.w	r2, r2, #15
    e75a:	2a08      	cmp	r2, #8
    e75c:	d24a      	bcs.n	e7f4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e75e:	e8df f002 	tbb	[pc, r2]
    e762:	0804      	.short	0x0804
    e764:	4949490b 	.word	0x4949490b
    e768:	140f      	.short	0x140f
    e76a:	1f88      	subs	r0, r1, #6
    e76c:	281f      	cmp	r0, #31
    e76e:	d90a      	bls.n	e786 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
    e770:	e040      	b.n	e7f4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e772:	290c      	cmp	r1, #12
    e774:	d007      	beq.n	e786 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
    e776:	e03d      	b.n	e7f4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e778:	1f88      	subs	r0, r1, #6
    e77a:	281f      	cmp	r0, #31
    e77c:	d903      	bls.n	e786 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x36>
    e77e:	e039      	b.n	e7f4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e780:	1f88      	subs	r0, r1, #6
    e782:	281f      	cmp	r0, #31
    e784:	d836      	bhi.n	e7f4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e786:	2001      	movs	r0, #1
    e788:	bd70      	pop	{r4, r5, r6, pc}
    e78a:	000a      	movs	r2, r1
    e78c:	d032      	beq.n	e7f4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa4>
    e78e:	4604      	mov	r4, r0
    e790:	78c0      	ldrb	r0, [r0, #3]
    e792:	2600      	movs	r6, #0
    e794:	0982      	lsrs	r2, r0, #6
    e796:	2a03      	cmp	r2, #3
    e798:	d009      	beq.n	e7ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e79a:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    e79e:	1c68      	adds	r0, r5, #1
    e7a0:	4288      	cmp	r0, r1
    e7a2:	d804      	bhi.n	e7ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e7a4:	4620      	mov	r0, r4
    e7a6:	f000 f84e 	bl	e846 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    e7aa:	42a8      	cmp	r0, r5
    e7ac:	d901      	bls.n	e7b2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x62>
    e7ae:	4630      	mov	r0, r6
    e7b0:	bd70      	pop	{r4, r5, r6, pc}
    e7b2:	78e0      	ldrb	r0, [r4, #3]
    e7b4:	f04f 0501 	mov.w	r5, #1
    e7b8:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    e7bc:	bf1e      	ittt	ne
    e7be:	f114 0004 	addsne.w	r0, r4, #4
    e7c2:	7800      	ldrbne	r0, [r0, #0]
    e7c4:	f010 0f10 	tstne.w	r0, #16
    e7c8:	d012      	beq.n	e7f0 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0xa0>
    e7ca:	2104      	movs	r1, #4
    e7cc:	4620      	mov	r0, r4
    e7ce:	f7ff ff57 	bl	e680 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
    e7d2:	2800      	cmp	r0, #0
    e7d4:	bf18      	it	ne
    e7d6:	eb14 0000 	addsne.w	r0, r4, r0
    e7da:	d0e8      	beq.n	e7ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e7dc:	7801      	ldrb	r1, [r0, #0]
    e7de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e7e2:	2925      	cmp	r1, #37	; 0x25
    e7e4:	d2e3      	bcs.n	e7ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e7e6:	7880      	ldrb	r0, [r0, #2]
    e7e8:	2102      	movs	r1, #2
    e7ea:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    e7ee:	d3de      	bcc.n	e7ae <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x5e>
    e7f0:	4628      	mov	r0, r5
    e7f2:	bd70      	pop	{r4, r5, r6, pc}
    e7f4:	2000      	movs	r0, #0
    e7f6:	bd70      	pop	{r4, r5, r6, pc}

0000e7f8 <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>:
    e7f8:	78c1      	ldrb	r1, [r0, #3]
    e7fa:	7840      	ldrb	r0, [r0, #1]
    e7fc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e800:	1a40      	subs	r0, r0, r1
    e802:	1e40      	subs	r0, r0, #1
    e804:	b2c0      	uxtb	r0, r0
    e806:	4770      	bx	lr

0000e808 <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA>:
    e808:	b570      	push	{r4, r5, r6, lr}
    e80a:	78c4      	ldrb	r4, [r0, #3]
    e80c:	468c      	mov	ip, r1
    e80e:	f004 013f 	and.w	r1, r4, #63	; 0x3f
    e812:	7845      	ldrb	r5, [r0, #1]
    e814:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    e818:	1b2c      	subs	r4, r5, r4
    e81a:	1e64      	subs	r4, r4, #1
    e81c:	1ae4      	subs	r4, r4, r3
    e81e:	b2e4      	uxtb	r4, r4
    e820:	4294      	cmp	r4, r2
    e822:	bf88      	it	hi
    e824:	4614      	movhi	r4, r2
    e826:	f1bc 0f00 	cmp.w	ip, #0
    e82a:	d006      	beq.n	e83a <sym_K5O4S5LXJO2IVEZ2S6XKTRJFPWYBJ3GPNSTV4VA+0x32>
    e82c:	4419      	add	r1, r3
    e82e:	4408      	add	r0, r1
    e830:	1d01      	adds	r1, r0, #4
    e832:	4622      	mov	r2, r4
    e834:	4660      	mov	r0, ip
    e836:	f7fe fc29 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e83a:	4620      	mov	r0, r4
    e83c:	bd70      	pop	{r4, r5, r6, pc}

0000e83e <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>:
    e83e:	78c0      	ldrb	r0, [r0, #3]
    e840:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e844:	4770      	bx	lr

0000e846 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>:
    e846:	78c1      	ldrb	r1, [r0, #3]
    e848:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e84c:	bf18      	it	ne
    e84e:	2201      	movne	r2, #1
    e850:	7900      	ldrb	r0, [r0, #4]
    e852:	f010 0301 	ands.w	r3, r0, #1
    e856:	bf18      	it	ne
    e858:	2301      	movne	r3, #1
    e85a:	ea03 0c02 	and.w	ip, r3, r2
    e85e:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    e862:	bf14      	ite	ne
    e864:	2301      	movne	r3, #1
    e866:	2300      	moveq	r3, #0
    e868:	f010 0202 	ands.w	r2, r0, #2
    e86c:	bf18      	it	ne
    e86e:	2201      	movne	r2, #1
    e870:	401a      	ands	r2, r3
    e872:	4462      	add	r2, ip
    e874:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e878:	ea4f 0c42 	mov.w	ip, r2, lsl #1
    e87c:	f011 0f3f 	tst.w	r1, #63	; 0x3f
    e880:	bf14      	ite	ne
    e882:	2301      	movne	r3, #1
    e884:	2300      	moveq	r3, #0
    e886:	f010 0208 	ands.w	r2, r0, #8
    e88a:	bf18      	it	ne
    e88c:	2201      	movne	r2, #1
    e88e:	401a      	ands	r2, r3
    e890:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    e894:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e898:	bf18      	it	ne
    e89a:	2201      	movne	r2, #1
    e89c:	f010 0304 	ands.w	r3, r0, #4
    e8a0:	bf18      	it	ne
    e8a2:	2301      	movne	r3, #1
    e8a4:	401a      	ands	r2, r3
    e8a6:	4494      	add	ip, r2
    e8a8:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e8ac:	bf18      	it	ne
    e8ae:	2201      	movne	r2, #1
    e8b0:	f010 0320 	ands.w	r3, r0, #32
    e8b4:	bf18      	it	ne
    e8b6:	2301      	movne	r3, #1
    e8b8:	401a      	ands	r2, r3
    e8ba:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    e8be:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    e8c2:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
    e8c6:	bf18      	it	ne
    e8c8:	2201      	movne	r2, #1
    e8ca:	f010 0310 	ands.w	r3, r0, #16
    e8ce:	bf18      	it	ne
    e8d0:	2301      	movne	r3, #1
    e8d2:	401a      	ands	r2, r3
    e8d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e8d8:	4462      	add	r2, ip
    e8da:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
    e8de:	bf18      	it	ne
    e8e0:	2101      	movne	r1, #1
    e8e2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    e8e6:	bf18      	it	ne
    e8e8:	2001      	movne	r0, #1
    e8ea:	4008      	ands	r0, r1
    e8ec:	4410      	add	r0, r2
    e8ee:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    e8f2:	bf1c      	itt	ne
    e8f4:	1c40      	addne	r0, r0, #1
    e8f6:	b2c0      	uxtbne	r0, r0
    e8f8:	4770      	bx	lr

0000e8fa <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    e8fa:	7800      	ldrb	r0, [r0, #0]
    e8fc:	09c0      	lsrs	r0, r0, #7
    e8fe:	4770      	bx	lr

0000e900 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    e900:	7800      	ldrb	r0, [r0, #0]
    e902:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e906:	4770      	bx	lr

0000e908 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e908:	b530      	push	{r4, r5, lr}
    e90a:	7802      	ldrb	r2, [r0, #0]
    e90c:	b083      	sub	sp, #12
    e90e:	f002 020f 	and.w	r2, r2, #15
    e912:	2a03      	cmp	r2, #3
    e914:	d057      	beq.n	e9c6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xbe>
    e916:	2a05      	cmp	r2, #5
    e918:	d152      	bne.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e91a:	460d      	mov	r5, r1
    e91c:	4604      	mov	r4, r0
    e91e:	f100 011f 	add.w	r1, r0, #31
    e922:	4668      	mov	r0, sp
    e924:	f001 ffe7 	bl	108f6 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    e928:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e92c:	f89d 1000 	ldrb.w	r1, [sp]
    e930:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    e934:	f88d 0004 	strb.w	r0, [sp, #4]
    e938:	2900      	cmp	r1, #0
    e93a:	bf04      	itt	eq
    e93c:	f89d 1001 	ldrbeq.w	r1, [sp, #1]
    e940:	2900      	cmpeq	r1, #0
    e942:	d10a      	bne.n	e95a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x52>
    e944:	f89d 1002 	ldrb.w	r1, [sp, #2]
    e948:	2900      	cmp	r1, #0
    e94a:	bf01      	itttt	eq
    e94c:	f89d 1003 	ldrbeq.w	r1, [sp, #3]
    e950:	2900      	cmpeq	r1, #0
    e952:	2800      	cmpeq	r0, #0
    e954:	b003      	addeq	sp, #12
    e956:	bf08      	it	eq
    e958:	bd30      	popeq	{r4, r5, pc}
    e95a:	f8b4 0019 	ldrh.w	r0, [r4, #25]
    e95e:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    e962:	f8b4 1017 	ldrh.w	r1, [r4, #23]
    e966:	7da2      	ldrb	r2, [r4, #22]
    e968:	2d00      	cmp	r5, #0
    e96a:	bf18      	it	ne
    e96c:	f5b0 6f50 	cmpne.w	r0, #3328	; 0xd00
    e970:	d909      	bls.n	e986 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x7e>
    e972:	f640 5c07 	movw	ip, #3335	; 0xd07
    e976:	4560      	cmp	r0, ip
    e978:	d805      	bhi.n	e986 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x7e>
    e97a:	f894 c001 	ldrb.w	ip, [r4, #1]
    e97e:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
    e982:	d11d      	bne.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e984:	e011      	b.n	e9aa <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xa2>
    e986:	f894 c001 	ldrb.w	ip, [r4, #1]
    e98a:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
    e98e:	d117      	bne.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e990:	f1a0 0c06 	sub.w	ip, r0, #6
    e994:	f640 457a 	movw	r5, #3194	; 0xc7a
    e998:	45ac      	cmp	ip, r5
    e99a:	d811      	bhi.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e99c:	b182      	cbz	r2, e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e99e:	2a08      	cmp	r2, #8
    e9a0:	bf98      	it	ls
    e9a2:	4282      	cmpls	r2, r0
    e9a4:	d20c      	bcs.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e9a6:	4288      	cmp	r0, r1
    e9a8:	d30a      	bcc.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e9aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    e9ae:	d207      	bcs.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e9b0:	f8b4 001d 	ldrh.w	r0, [r4, #29]
    e9b4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e9b8:	d802      	bhi.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e9ba:	b003      	add	sp, #12
    e9bc:	2001      	movs	r0, #1
    e9be:	bd30      	pop	{r4, r5, pc}
    e9c0:	b003      	add	sp, #12
    e9c2:	2000      	movs	r0, #0
    e9c4:	bd30      	pop	{r4, r5, pc}
    e9c6:	7840      	ldrb	r0, [r0, #1]
    e9c8:	280c      	cmp	r0, #12
    e9ca:	d1f9      	bne.n	e9c0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb8>
    e9cc:	e7f5      	b.n	e9ba <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0xb2>

0000e9ce <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    e9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9d2:	7801      	ldrb	r1, [r0, #0]
    e9d4:	2601      	movs	r6, #1
    e9d6:	f001 010f 	and.w	r1, r1, #15
    e9da:	2500      	movs	r5, #0
    e9dc:	2904      	cmp	r1, #4
    e9de:	d00c      	beq.n	e9fa <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x2c>
    e9e0:	2907      	cmp	r1, #7
    e9e2:	d00f      	beq.n	ea04 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x36>
    e9e4:	2908      	cmp	r1, #8
    e9e6:	bf1c      	itt	ne
    e9e8:	2000      	movne	r0, #0
    e9ea:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9ee:	7840      	ldrb	r0, [r0, #1]
    e9f0:	280e      	cmp	r0, #14
    e9f2:	d034      	beq.n	ea5e <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
    e9f4:	4628      	mov	r0, r5
    e9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9fa:	7840      	ldrb	r0, [r0, #1]
    e9fc:	1f80      	subs	r0, r0, #6
    e9fe:	281f      	cmp	r0, #31
    ea00:	d92d      	bls.n	ea5e <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
    ea02:	e7f7      	b.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea04:	4604      	mov	r4, r0
    ea06:	7840      	ldrb	r0, [r0, #1]
    ea08:	78e1      	ldrb	r1, [r4, #3]
    ea0a:	098a      	lsrs	r2, r1, #6
    ea0c:	2a03      	cmp	r2, #3
    ea0e:	d0f1      	beq.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea10:	f001 073f 	and.w	r7, r1, #63	; 0x3f
    ea14:	1c79      	adds	r1, r7, #1
    ea16:	4281      	cmp	r1, r0
    ea18:	d8ec      	bhi.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea1a:	4620      	mov	r0, r4
    ea1c:	f7ff ff13 	bl	e846 <sym_7T3YS7ZM6TRSXMQ2XWBEJASYAZJXOUEFW4XRVAA>
    ea20:	42b8      	cmp	r0, r7
    ea22:	d8e7      	bhi.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea24:	78e0      	ldrb	r0, [r4, #3]
    ea26:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    ea2a:	bf1e      	ittt	ne
    ea2c:	f114 0004 	addsne.w	r0, r4, #4
    ea30:	7800      	ldrbne	r0, [r0, #0]
    ea32:	f010 0f10 	tstne.w	r0, #16
    ea36:	d012      	beq.n	ea5e <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x90>
    ea38:	2104      	movs	r1, #4
    ea3a:	4620      	mov	r0, r4
    ea3c:	f7ff fe20 	bl	e680 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
    ea40:	2800      	cmp	r0, #0
    ea42:	bf18      	it	ne
    ea44:	eb14 0000 	addsne.w	r0, r4, r0
    ea48:	d0d4      	beq.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea4a:	7801      	ldrb	r1, [r0, #0]
    ea4c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ea50:	2925      	cmp	r1, #37	; 0x25
    ea52:	d2cf      	bcs.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea54:	7880      	ldrb	r0, [r0, #2]
    ea56:	2102      	movs	r1, #2
    ea58:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
    ea5c:	d3ca      	bcc.n	e9f4 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x26>
    ea5e:	4630      	mov	r0, r6
    ea60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea64 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    ea64:	b570      	push	{r4, r5, r6, lr}
    ea66:	4614      	mov	r4, r2
    ea68:	4605      	mov	r5, r0
    ea6a:	2a1f      	cmp	r2, #31
    ea6c:	d903      	bls.n	ea76 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    ea6e:	21b5      	movs	r1, #181	; 0xb5
    ea70:	202a      	movs	r0, #42	; 0x2a
    ea72:	f7f5 fb2d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea76:	f105 0009 	add.w	r0, r5, #9
    ea7a:	f7fe fb07 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea7e:	1da0      	adds	r0, r4, #6
    ea80:	7068      	strb	r0, [r5, #1]
    ea82:	bd70      	pop	{r4, r5, r6, pc}

0000ea84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    ea84:	b510      	push	{r4, lr}
    ea86:	7802      	ldrb	r2, [r0, #0]
    ea88:	f001 030f 	and.w	r3, r1, #15
    ea8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ea90:	431a      	orrs	r2, r3
    ea92:	7002      	strb	r2, [r0, #0]
    ea94:	2909      	cmp	r1, #9
    ea96:	d213      	bcs.n	eac0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
    ea98:	e8df f001 	tbb	[pc, r1]
    ea9c:	07050705 	.word	0x07050705
    eaa0:	0b050905 	.word	0x0b050905
    eaa4:	000f      	.short	0x000f
    eaa6:	2106      	movs	r1, #6
    eaa8:	e008      	b.n	eabc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    eaaa:	210c      	movs	r1, #12
    eaac:	e006      	b.n	eabc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    eaae:	2122      	movs	r1, #34	; 0x22
    eab0:	e004      	b.n	eabc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    eab2:	2101      	movs	r1, #1
    eab4:	2200      	movs	r2, #0
    eab6:	70c2      	strb	r2, [r0, #3]
    eab8:	e000      	b.n	eabc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
    eaba:	210e      	movs	r1, #14
    eabc:	7041      	strb	r1, [r0, #1]
    eabe:	bd10      	pop	{r4, pc}
    eac0:	216f      	movs	r1, #111	; 0x6f
    eac2:	202a      	movs	r0, #42	; 0x2a
    eac4:	f7f5 fb04 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eac8 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    eac8:	680a      	ldr	r2, [r1, #0]
    eaca:	f8c0 2009 	str.w	r2, [r0, #9]
    eace:	8889      	ldrh	r1, [r1, #4]
    ead0:	f8a0 100d 	strh.w	r1, [r0, #13]
    ead4:	4770      	bx	lr

0000ead6 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    ead6:	7802      	ldrb	r2, [r0, #0]
    ead8:	2380      	movs	r3, #128	; 0x80
    eada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    eade:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
    eae2:	4311      	orrs	r1, r2
    eae4:	7001      	strb	r1, [r0, #0]
    eae6:	4770      	bx	lr

0000eae8 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    eae8:	680a      	ldr	r2, [r1, #0]
    eaea:	f8c0 2003 	str.w	r2, [r0, #3]
    eaee:	8889      	ldrh	r1, [r1, #4]
    eaf0:	f8a0 1007 	strh.w	r1, [r0, #7]
    eaf4:	4770      	bx	lr

0000eaf6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    eaf6:	7802      	ldrb	r2, [r0, #0]
    eaf8:	2340      	movs	r3, #64	; 0x40
    eafa:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    eafe:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    eb02:	4311      	orrs	r1, r2
    eb04:	7001      	strb	r1, [r0, #0]
    eb06:	4770      	bx	lr

0000eb08 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    eb08:	b570      	push	{r4, r5, r6, lr}
    eb0a:	4614      	mov	r4, r2
    eb0c:	4605      	mov	r5, r0
    eb0e:	2a1f      	cmp	r2, #31
    eb10:	d903      	bls.n	eb1a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    eb12:	21d7      	movs	r1, #215	; 0xd7
    eb14:	202a      	movs	r0, #42	; 0x2a
    eb16:	f7f5 fadb 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1a:	f105 0009 	add.w	r0, r5, #9
    eb1e:	f7fe fab5 	bl	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb22:	1da0      	adds	r0, r4, #6
    eb24:	7068      	strb	r0, [r5, #1]
    eb26:	bd70      	pop	{r4, r5, r6, pc}

0000eb28 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    eb28:	6800      	ldr	r0, [r0, #0]
    eb2a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    eb2e:	4290      	cmp	r0, r2
    eb30:	bf9c      	itt	ls
    eb32:	2000      	movls	r0, #0
    eb34:	4770      	bxls	lr
    eb36:	1a40      	subs	r0, r0, r1
    eb38:	389c      	subs	r0, #156	; 0x9c
    eb3a:	0840      	lsrs	r0, r0, #1
    eb3c:	4770      	bx	lr

0000eb3e <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY>:
    eb3e:	2800      	cmp	r0, #0
    eb40:	db03      	blt.n	eb4a <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0xc>
    eb42:	4288      	cmp	r0, r1
    eb44:	db04      	blt.n	eb50 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x12>
    eb46:	4608      	mov	r0, r1
    eb48:	e002      	b.n	eb50 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x12>
    eb4a:	4249      	negs	r1, r1
    eb4c:	4288      	cmp	r0, r1
    eb4e:	dbfa      	blt.n	eb46 <sym_EHM3VFGPUCQ2UP6KSIQUGPUL5OIF5MURMO7PKAY+0x8>
    eb50:	b200      	sxth	r0, r0
    eb52:	4770      	bx	lr

0000eb54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    eb54:	b510      	push	{r4, lr}
    eb56:	4604      	mov	r4, r0
    eb58:	7c80      	ldrb	r0, [r0, #18]
    eb5a:	2802      	cmp	r0, #2
    eb5c:	bf18      	it	ne
    eb5e:	2803      	cmpne	r0, #3
    eb60:	d109      	bne.n	eb76 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x22>
    eb62:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    eb66:	f104 0168 	add.w	r1, r4, #104	; 0x68
    eb6a:	f7f6 fac5 	bl	50f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    eb6e:	2808      	cmp	r0, #8
    eb70:	bf1c      	itt	ne
    eb72:	2001      	movne	r0, #1
    eb74:	bd10      	popne	{r4, pc}
    eb76:	7ca0      	ldrb	r0, [r4, #18]
    eb78:	2800      	cmp	r0, #0
    eb7a:	bf1e      	ittt	ne
    eb7c:	2802      	cmpne	r0, #2
    eb7e:	7e60      	ldrbne	r0, [r4, #25]
    eb80:	bd10      	popne	{r4, pc}
    eb82:	f04f 0000 	mov.w	r0, #0
    eb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb8a:	f7f6 b983 	b.w	4e94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000eb8e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    eb8e:	b508      	push	{r3, lr}
    eb90:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    eb94:	f88d 1000 	strb.w	r1, [sp]
    eb98:	f89d 1000 	ldrb.w	r1, [sp]
    eb9c:	b959      	cbnz	r1, ebb6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
    eb9e:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    eba2:	f88d 0000 	strb.w	r0, [sp]
    eba6:	f89d 0000 	ldrb.w	r0, [sp]
    ebaa:	b110      	cbz	r0, ebb2 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x24>
    ebac:	f7fb fea6 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ebb0:	b108      	cbz	r0, ebb6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
    ebb2:	2000      	movs	r0, #0
    ebb4:	bd08      	pop	{r3, pc}
    ebb6:	2001      	movs	r0, #1
    ebb8:	bd08      	pop	{r3, pc}

0000ebba <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    ebba:	20ff      	movs	r0, #255	; 0xff
    ebbc:	7008      	strb	r0, [r1, #0]
    ebbe:	6c48      	ldr	r0, [r1, #68]	; 0x44
    ebc0:	f7ff bb98 	b.w	e2f4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000ebc4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    ebc4:	b530      	push	{r4, r5, lr}
    ebc6:	460d      	mov	r5, r1
    ebc8:	b085      	sub	sp, #20
    ebca:	4604      	mov	r4, r0
    ebcc:	f44f 72ac 	mov.w	r2, #344	; 0x158
    ebd0:	2100      	movs	r1, #0
    ebd2:	f7fe fad5 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ebd6:	20ff      	movs	r0, #255	; 0xff
    ebd8:	7020      	strb	r0, [r4, #0]
    ebda:	207f      	movs	r0, #127	; 0x7f
    ebdc:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
    ebe0:	2013      	movs	r0, #19
    ebe2:	8060      	strh	r0, [r4, #2]
    ebe4:	f7f5 ff82 	bl	4aec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ebe8:	4601      	mov	r1, r0
    ebea:	6460      	str	r0, [r4, #68]	; 0x44
    ebec:	2200      	movs	r2, #0
    ebee:	a802      	add	r0, sp, #8
    ebf0:	f7ff fae6 	bl	e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ebf4:	2200      	movs	r2, #0
    ebf6:	2101      	movs	r1, #1
    ebf8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ebfa:	f7ff fb5a 	bl	e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ebfe:	2204      	movs	r2, #4
    ec00:	a802      	add	r0, sp, #8
    ec02:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ec04:	f7ff fadc 	bl	e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ec08:	2200      	movs	r2, #0
    ec0a:	4611      	mov	r1, r2
    ec0c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ec0e:	f7ff fb50 	bl	e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ec12:	7425      	strb	r5, [r4, #16]
    ec14:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ec18:	f000 fa19 	bl	f04e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    ec1c:	4668      	mov	r0, sp
    ec1e:	f7f6 fd9f 	bl	5760 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    ec22:	b130      	cbz	r0, ec32 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x6e>
    ec24:	4669      	mov	r1, sp
    ec26:	f104 002e 	add.w	r0, r4, #46	; 0x2e
    ec2a:	f7f6 fdad 	bl	5788 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    ec2e:	b005      	add	sp, #20
    ec30:	bd30      	pop	{r4, r5, pc}
    ec32:	f240 3126 	movw	r1, #806	; 0x326
    ec36:	202d      	movs	r0, #45	; 0x2d
    ec38:	f7f5 fa4a 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec3c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ec3c:	8840      	ldrh	r0, [r0, #2]
    ec3e:	f3c0 1100 	ubfx	r1, r0, #4, #1
    ec42:	b131      	cbz	r1, ec52 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x16>
    ec44:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ec48:	2800      	cmp	r0, #0
    ec4a:	bf04      	itt	eq
    ec4c:	201f      	moveq	r0, #31
    ec4e:	4770      	bxeq	lr
    ec50:	e002      	b.n	ec58 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1c>
    ec52:	f3c0 0140 	ubfx	r1, r0, #1, #1
    ec56:	b109      	cbz	r1, ec5c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x20>
    ec58:	2000      	movs	r0, #0
    ec5a:	4770      	bx	lr
    ec5c:	f010 0f01 	tst.w	r0, #1
    ec60:	bf1c      	itt	ne
    ec62:	20ee      	movne	r0, #238	; 0xee
    ec64:	4770      	bxne	lr
    ec66:	f7f5 bf67 	b.w	4b38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>

0000ec6a <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>:
    ec6a:	21ff      	movs	r1, #255	; 0xff
    ec6c:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    ec70:	4770      	bx	lr

0000ec72 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ec72:	f7f8 bb3b 	b.w	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>

0000ec76 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    ec76:	b510      	push	{r4, lr}
    ec78:	4604      	mov	r4, r0
    ec7a:	2000      	movs	r0, #0
    ec7c:	2a12      	cmp	r2, #18
    ec7e:	d03c      	beq.n	ecfa <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x84>
    ec80:	dc04      	bgt.n	ec8c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x16>
    ec82:	2a03      	cmp	r2, #3
    ec84:	d018      	beq.n	ecb8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    ec86:	2a0e      	cmp	r2, #14
    ec88:	d01d      	beq.n	ecc6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x50>
    ec8a:	e003      	b.n	ec94 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    ec8c:	2a19      	cmp	r2, #25
    ec8e:	d006      	beq.n	ec9e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x28>
    ec90:	2a1e      	cmp	r2, #30
    ec92:	d04c      	beq.n	ed2e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xb8>
    ec94:	f240 21d2 	movw	r1, #722	; 0x2d2
    ec98:	202d      	movs	r0, #45	; 0x2d
    ec9a:	f7f5 fa19 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec9e:	7048      	strb	r0, [r1, #1]
    eca0:	2021      	movs	r0, #33	; 0x21
    eca2:	7008      	strb	r0, [r1, #0]
    eca4:	f8d4 00cf 	ldr.w	r0, [r4, #207]	; 0xcf
    eca8:	6048      	str	r0, [r1, #4]
    ecaa:	f8d4 00d3 	ldr.w	r0, [r4, #211]	; 0xd3
    ecae:	6088      	str	r0, [r1, #8]
    ecb0:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
    ecb4:	7308      	strb	r0, [r1, #12]
    ecb6:	bd10      	pop	{r4, pc}
    ecb8:	7048      	strb	r0, [r1, #1]
    ecba:	2007      	movs	r0, #7
    ecbc:	7008      	strb	r0, [r1, #0]
    ecbe:	f8d4 00c2 	ldr.w	r0, [r4, #194]	; 0xc2
    ecc2:	6048      	str	r0, [r1, #4]
    ecc4:	bd10      	pop	{r4, pc}
    ecc6:	7048      	strb	r0, [r1, #1]
    ecc8:	2014      	movs	r0, #20
    ecca:	3488      	adds	r4, #136	; 0x88
    eccc:	f801 0b04 	strb.w	r0, [r1], #4
    ecd0:	e8b4 100d 	ldmia.w	r4!, {r0, r2, r3, ip}
    ecd4:	e8a1 100d 	stmia.w	r1!, {r0, r2, r3, ip}
    ecd8:	e894 100d 	ldmia.w	r4, {r0, r2, r3, ip}
    ecdc:	e8a1 100d 	stmia.w	r1!, {r0, r2, r3, ip}
    ece0:	2001      	movs	r0, #1
    ece2:	f801 0c1c 	strb.w	r0, [r1, #-28]
    ece6:	f811 0c20 	ldrb.w	r0, [r1, #-32]
    ecea:	3c98      	subs	r4, #152	; 0x98
    ecec:	2800      	cmp	r0, #0
    ecee:	bf18      	it	ne
    ecf0:	bd10      	popne	{r4, pc}
    ecf2:	f7fb fe03 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ecf6:	b990      	cbnz	r0, ed1e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xa8>
    ecf8:	bd10      	pop	{r4, pc}
    ecfa:	7048      	strb	r0, [r1, #1]
    ecfc:	2017      	movs	r0, #23
    ecfe:	7008      	strb	r0, [r1, #0]
    ed00:	f8d4 00b2 	ldr.w	r0, [r4, #178]	; 0xb2
    ed04:	6048      	str	r0, [r1, #4]
    ed06:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    ed0a:	8108      	strh	r0, [r1, #8]
    ed0c:	7908      	ldrb	r0, [r1, #4]
    ed0e:	2800      	cmp	r0, #0
    ed10:	bf18      	it	ne
    ed12:	bd10      	popne	{r4, pc}
    ed14:	f7fb fdf2 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ed18:	2800      	cmp	r0, #0
    ed1a:	bf18      	it	ne
    ed1c:	bd10      	popne	{r4, pc}
    ed1e:	6a20      	ldr	r0, [r4, #32]
    ed20:	8800      	ldrh	r0, [r0, #0]
    ed22:	f7f5 fe1f 	bl	4964 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed2a:	f7ff b843 	b.w	ddb4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    ed2e:	7048      	strb	r0, [r1, #1]
    ed30:	2026      	movs	r0, #38	; 0x26
    ed32:	460b      	mov	r3, r1
    ed34:	7008      	strb	r0, [r1, #0]
    ed36:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    ed3a:	2222      	movs	r2, #34	; 0x22
    ed3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed40:	1d18      	adds	r0, r3, #4
    ed42:	f7fe b9a3 	b.w	d08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000ed46 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ed46:	6880      	ldr	r0, [r0, #8]
    ed48:	4770      	bx	lr

0000ed4a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ed4a:	b500      	push	{lr}
    ed4c:	8842      	ldrh	r2, [r0, #2]
    ed4e:	b085      	sub	sp, #20
    ed50:	f3c2 1300 	ubfx	r3, r2, #4, #1
    ed54:	468c      	mov	ip, r1
    ed56:	2b00      	cmp	r3, #0
    ed58:	bf07      	ittee	eq
    ed5a:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
    ed5e:	2a00      	cmpeq	r2, #0
    ed60:	2001      	movne	r0, #1
    ed62:	b005      	addne	sp, #20
    ed64:	bf18      	it	ne
    ed66:	bd00      	popne	{pc}
    ed68:	f100 0128 	add.w	r1, r0, #40	; 0x28
    ed6c:	9100      	str	r1, [sp, #0]
    ed6e:	8841      	ldrh	r1, [r0, #2]
    ed70:	f8ad 1004 	strh.w	r1, [sp, #4]
    ed74:	6881      	ldr	r1, [r0, #8]
    ed76:	9102      	str	r1, [sp, #8]
    ed78:	7901      	ldrb	r1, [r0, #4]
    ed7a:	f88d 100c 	strb.w	r1, [sp, #12]
    ed7e:	7940      	ldrb	r0, [r0, #5]
    ed80:	f88d 000d 	strb.w	r0, [sp, #13]
    ed84:	4669      	mov	r1, sp
    ed86:	4660      	mov	r0, ip
    ed88:	f7f8 fb1c 	bl	73c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c4>
    ed8c:	b005      	add	sp, #20
    ed8e:	bd00      	pop	{pc}

0000ed90 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ed90:	2200      	movs	r2, #0
    ed92:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    ed96:	8843      	ldrh	r3, [r0, #2]
    ed98:	2b1d      	cmp	r3, #29
    ed9a:	bf0c      	ite	eq
    ed9c:	7342      	strbeq	r2, [r0, #13]
    ed9e:	7341      	strbne	r1, [r0, #13]
    eda0:	4770      	bx	lr

0000eda2 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    eda2:	b510      	push	{r4, lr}
    eda4:	8841      	ldrh	r1, [r0, #2]
    eda6:	f3c1 1200 	ubfx	r2, r1, #4, #1
    edaa:	b92a      	cbnz	r2, edb8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    edac:	f3c1 0140 	ubfx	r1, r1, #1, #1
    edb0:	2900      	cmp	r1, #0
    edb2:	bf18      	it	ne
    edb4:	2401      	movne	r4, #1
    edb6:	d100      	bne.n	edba <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x18>
    edb8:	2400      	movs	r4, #0
    edba:	6c40      	ldr	r0, [r0, #68]	; 0x44
    edbc:	f7ff fa67 	bl	e28e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    edc0:	2800      	cmp	r0, #0
    edc2:	bf18      	it	ne
    edc4:	2001      	movne	r0, #1
    edc6:	ea24 0000 	bic.w	r0, r4, r0
    edca:	f080 0001 	eor.w	r0, r0, #1
    edce:	bd10      	pop	{r4, pc}

0000edd0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    edd0:	b510      	push	{r4, lr}
    edd2:	8840      	ldrh	r0, [r0, #2]
    edd4:	f3c0 1100 	ubfx	r1, r0, #4, #1
    edd8:	b119      	cbz	r1, ede2 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    edda:	f3c0 0080 	ubfx	r0, r0, #2, #1
    edde:	b148      	cbz	r0, edf4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
    ede0:	e00a      	b.n	edf8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
    ede2:	f3c0 0140 	ubfx	r1, r0, #1, #1
    ede6:	b939      	cbnz	r1, edf8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
    ede8:	f010 0f01 	tst.w	r0, #1
    edec:	d102      	bne.n	edf4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
    edee:	f7f5 fea3 	bl	4b38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    edf2:	b108      	cbz	r0, edf8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
    edf4:	2001      	movs	r0, #1
    edf6:	bd10      	pop	{r4, pc}
    edf8:	2000      	movs	r0, #0
    edfa:	bd10      	pop	{r4, pc}

0000edfc <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    edfc:	7880      	ldrb	r0, [r0, #2]
    edfe:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ee02:	4770      	bx	lr

0000ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ee04:	7880      	ldrb	r0, [r0, #2]
    ee06:	f000 0001 	and.w	r0, r0, #1
    ee0a:	4770      	bx	lr

0000ee0c <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    ee0c:	8840      	ldrh	r0, [r0, #2]
    ee0e:	2809      	cmp	r0, #9
    ee10:	bf0c      	ite	eq
    ee12:	2001      	moveq	r0, #1
    ee14:	2000      	movne	r0, #0
    ee16:	4770      	bx	lr

0000ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ee18:	7880      	ldrb	r0, [r0, #2]
    ee1a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ee1e:	4770      	bx	lr

0000ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ee20:	7880      	ldrb	r0, [r0, #2]
    ee22:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ee26:	4770      	bx	lr

0000ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ee28:	7880      	ldrb	r0, [r0, #2]
    ee2a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ee2e:	4770      	bx	lr

0000ee30 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ee30:	f990 0010 	ldrsb.w	r0, [r0, #16]
    ee34:	4770      	bx	lr

0000ee36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ee36:	7800      	ldrb	r0, [r0, #0]
    ee38:	28ff      	cmp	r0, #255	; 0xff
    ee3a:	bf14      	ite	ne
    ee3c:	2001      	movne	r0, #1
    ee3e:	2000      	moveq	r0, #0
    ee40:	4770      	bx	lr

0000ee42 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ee42:	680a      	ldr	r2, [r1, #0]
    ee44:	f8c0 2013 	str.w	r2, [r0, #19]
    ee48:	8889      	ldrh	r1, [r1, #4]
    ee4a:	f8a0 1017 	strh.w	r1, [r0, #23]
    ee4e:	2101      	movs	r1, #1
    ee50:	7641      	strb	r1, [r0, #25]
    ee52:	4770      	bx	lr

0000ee54 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ee54:	7b00      	ldrb	r0, [r0, #12]
    ee56:	4770      	bx	lr

0000ee58 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ee58:	7940      	ldrb	r0, [r0, #5]
    ee5a:	4770      	bx	lr

0000ee5c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ee5c:	6201      	str	r1, [r0, #32]
    ee5e:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
    ee62:	724a      	strb	r2, [r1, #9]
    ee64:	f8d0 2061 	ldr.w	r2, [r0, #97]	; 0x61
    ee68:	f8c1 200a 	str.w	r2, [r1, #10]
    ee6c:	f8b0 0065 	ldrh.w	r0, [r0, #101]	; 0x65
    ee70:	81c8      	strh	r0, [r1, #14]
    ee72:	4770      	bx	lr

0000ee74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ee74:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    ee78:	4770      	bx	lr

0000ee7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    ee7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee7e:	4604      	mov	r4, r0
    ee80:	7880      	ldrb	r0, [r0, #2]
    ee82:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ee86:	b158      	cbz	r0, eea0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x26>
    ee88:	233c      	movs	r3, #60	; 0x3c
    ee8a:	22ff      	movs	r2, #255	; 0xff
    ee8c:	4620      	mov	r0, r4
    ee8e:	6a21      	ldr	r1, [r4, #32]
    ee90:	f7f8 fb02 	bl	7498 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x498>
    ee94:	220e      	movs	r2, #14
    ee96:	4621      	mov	r1, r4
    ee98:	f104 007e 	add.w	r0, r4, #126	; 0x7e
    ee9c:	f7f6 fccc 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    eea0:	78a0      	ldrb	r0, [r4, #2]
    eea2:	f04f 0500 	mov.w	r5, #0
    eea6:	f010 0f01 	tst.w	r0, #1
    eeaa:	d022      	beq.n	eef2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x78>
    eeac:	6a20      	ldr	r0, [r4, #32]
    eeae:	263c      	movs	r6, #60	; 0x3c
    eeb0:	8807      	ldrh	r7, [r0, #0]
    eeb2:	f7f6 fff9 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eeb6:	f7fb fd21 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    eeba:	b9a8      	cbnz	r0, eee8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6e>
    eebc:	7821      	ldrb	r1, [r4, #0]
    eebe:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
    eec2:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
    eec6:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    eeca:	7b60      	ldrb	r0, [r4, #13]
    eecc:	b910      	cbnz	r0, eed4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5a>
    eece:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
    eed2:	e003      	b.n	eedc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x62>
    eed4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    eed8:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    eedc:	2212      	movs	r2, #18
    eede:	4621      	mov	r1, r4
    eee0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    eee4:	f7f6 fca8 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    eee8:	2001      	movs	r0, #1
    eeea:	f884 0079 	strb.w	r0, [r4, #121]	; 0x79
    eeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eef2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    eef6:	263c      	movs	r6, #60	; 0x3c
    eef8:	f7f6 ffd6 	bl	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eefc:	f7fb fcfe 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ef00:	2800      	cmp	r0, #0
    ef02:	d1f1      	bne.n	eee8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6e>
    ef04:	7821      	ldrb	r1, [r4, #0]
    ef06:	f884 10b3 	strb.w	r1, [r4, #179]	; 0xb3
    ef0a:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
    ef0e:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    ef12:	7b60      	ldrb	r0, [r4, #13]
    ef14:	2800      	cmp	r0, #0
    ef16:	d1dd      	bne.n	eed4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5a>
    ef18:	e7d9      	b.n	eece <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x54>

0000ef1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ef1a:	7c40      	ldrb	r0, [r0, #17]
    ef1c:	2800      	cmp	r0, #0
    ef1e:	bf18      	it	ne
    ef20:	2001      	movne	r0, #1
    ef22:	4770      	bx	lr
    ef24:	2101      	movs	r1, #1
    ef26:	f7f7 bb29 	b.w	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>
    ef2a:	2101      	movs	r1, #1
    ef2c:	f7f7 bb26 	b.w	657c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c>

0000ef30 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ef30:	b510      	push	{r4, lr}
    ef32:	7001      	strb	r1, [r0, #0]
    ef34:	7042      	strb	r2, [r0, #1]
    ef36:	7880      	ldrb	r0, [r0, #2]
    ef38:	f3c0 0380 	ubfx	r3, r0, #2, #1
    ef3c:	f3c0 0c40 	ubfx	ip, r0, #1, #1
    ef40:	4463      	add	r3, ip
    ef42:	f000 0001 	and.w	r0, r0, #1
    ef46:	4418      	add	r0, r3
    ef48:	fb10 f001 	smulbb	r0, r0, r1
    ef4c:	fb10 f002 	smulbb	r0, r0, r2
    ef50:	28ff      	cmp	r0, #255	; 0xff
    ef52:	bf38      	it	cc
    ef54:	bd10      	popcc	{r4, pc}
    ef56:	215c      	movs	r1, #92	; 0x5c
    ef58:	202e      	movs	r0, #46	; 0x2e
    ef5a:	f7f5 f8b9 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef5e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ef5e:	7881      	ldrb	r1, [r0, #2]
    ef60:	f3c1 0280 	ubfx	r2, r1, #2, #1
    ef64:	f3c1 0340 	ubfx	r3, r1, #1, #1
    ef68:	441a      	add	r2, r3
    ef6a:	f001 0101 	and.w	r1, r1, #1
    ef6e:	4411      	add	r1, r2
    ef70:	7842      	ldrb	r2, [r0, #1]
    ef72:	7800      	ldrb	r0, [r0, #0]
    ef74:	fb12 f000 	smulbb	r0, r2, r0
    ef78:	4348      	muls	r0, r1
    ef7a:	b2c0      	uxtb	r0, r0
    ef7c:	4770      	bx	lr

0000ef7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ef7e:	7882      	ldrb	r2, [r0, #2]
    ef80:	2100      	movs	r1, #0
    ef82:	f012 0f01 	tst.w	r2, #1
    ef86:	d005      	beq.n	ef94 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
    ef88:	78c3      	ldrb	r3, [r0, #3]
    ef8a:	f013 0f01 	tst.w	r3, #1
    ef8e:	bf08      	it	eq
    ef90:	2101      	moveq	r1, #1
    ef92:	d010      	beq.n	efb6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
    ef94:	f012 0f02 	tst.w	r2, #2
    ef98:	d005      	beq.n	efa6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
    ef9a:	78c3      	ldrb	r3, [r0, #3]
    ef9c:	f013 0f02 	tst.w	r3, #2
    efa0:	bf08      	it	eq
    efa2:	2102      	moveq	r1, #2
    efa4:	d007      	beq.n	efb6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
    efa6:	f012 0f04 	tst.w	r2, #4
    efaa:	d004      	beq.n	efb6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
    efac:	78c3      	ldrb	r3, [r0, #3]
    efae:	f013 0f04 	tst.w	r3, #4
    efb2:	bf08      	it	eq
    efb4:	2104      	moveq	r1, #4
    efb6:	7943      	ldrb	r3, [r0, #5]
    efb8:	1c5b      	adds	r3, r3, #1
    efba:	b2db      	uxtb	r3, r3
    efbc:	7143      	strb	r3, [r0, #5]
    efbe:	f890 c001 	ldrb.w	ip, [r0, #1]
    efc2:	4563      	cmp	r3, ip
    efc4:	d10d      	bne.n	efe2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
    efc6:	2300      	movs	r3, #0
    efc8:	7143      	strb	r3, [r0, #5]
    efca:	f890 c003 	ldrb.w	ip, [r0, #3]
    efce:	ea4c 0c01 	orr.w	ip, ip, r1
    efd2:	f880 c003 	strb.w	ip, [r0, #3]
    efd6:	4594      	cmp	ip, r2
    efd8:	d103      	bne.n	efe2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
    efda:	70c3      	strb	r3, [r0, #3]
    efdc:	7902      	ldrb	r2, [r0, #4]
    efde:	1c52      	adds	r2, r2, #1
    efe0:	7102      	strb	r2, [r0, #4]
    efe2:	2901      	cmp	r1, #1
    efe4:	bf04      	itt	eq
    efe6:	2025      	moveq	r0, #37	; 0x25
    efe8:	4770      	bxeq	lr
    efea:	2902      	cmp	r1, #2
    efec:	bf04      	itt	eq
    efee:	2026      	moveq	r0, #38	; 0x26
    eff0:	4770      	bxeq	lr
    eff2:	2904      	cmp	r1, #4
    eff4:	bf04      	itt	eq
    eff6:	2027      	moveq	r0, #39	; 0x27
    eff8:	4770      	bxeq	lr
    effa:	b510      	push	{r4, lr}
    effc:	2139      	movs	r1, #57	; 0x39
    effe:	202e      	movs	r0, #46	; 0x2e
    f000:	f7f5 f866 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f004 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f004:	7081      	strb	r1, [r0, #2]
    f006:	4770      	bx	lr

0000f008 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f008:	b410      	push	{r4}
    f00a:	7881      	ldrb	r1, [r0, #2]
    f00c:	f3c1 0280 	ubfx	r2, r1, #2, #1
    f010:	f3c1 0340 	ubfx	r3, r1, #1, #1
    f014:	441a      	add	r2, r3
    f016:	f001 0101 	and.w	r1, r1, #1
    f01a:	7843      	ldrb	r3, [r0, #1]
    f01c:	4411      	add	r1, r2
    f01e:	fb13 f201 	smulbb	r2, r3, r1
    f022:	78c1      	ldrb	r1, [r0, #3]
    f024:	f3c1 0c80 	ubfx	ip, r1, #2, #1
    f028:	f3c1 0440 	ubfx	r4, r1, #1, #1
    f02c:	44a4      	add	ip, r4
    f02e:	f001 0101 	and.w	r1, r1, #1
    f032:	4461      	add	r1, ip
    f034:	f890 c005 	ldrb.w	ip, [r0, #5]
    f038:	fb11 c103 	smlabb	r1, r1, r3, ip
    f03c:	7803      	ldrb	r3, [r0, #0]
    f03e:	7900      	ldrb	r0, [r0, #4]
    f040:	1a18      	subs	r0, r3, r0
    f042:	fb10 f002 	smulbb	r0, r0, r2
    f046:	1a40      	subs	r0, r0, r1
    f048:	bc10      	pop	{r4}
    f04a:	b2c0      	uxtb	r0, r0
    f04c:	4770      	bx	lr

0000f04e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f04e:	b510      	push	{r4, lr}
    f050:	4604      	mov	r4, r0
    f052:	f001 fc55 	bl	10900 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    f056:	2001      	movs	r0, #1
    f058:	7060      	strb	r0, [r4, #1]
    f05a:	7020      	strb	r0, [r4, #0]
    f05c:	bd10      	pop	{r4, pc}

0000f05e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f05e:	2100      	movs	r1, #0
    f060:	70c1      	strb	r1, [r0, #3]
    f062:	7141      	strb	r1, [r0, #5]
    f064:	7101      	strb	r1, [r0, #4]
    f066:	4770      	bx	lr

0000f068 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f068:	f240 315a 	movw	r1, #858	; 0x35a
    f06c:	4348      	muls	r0, r1
    f06e:	4770      	bx	lr

0000f070 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f070:	f240 20ef 	movw	r0, #751	; 0x2ef
    f074:	4770      	bx	lr
    f076:	020e      	.short	0x020e
    f078:	0630041c 	.word	0x0630041c
    f07c:	035a0c60 	.word	0x035a0c60
    f080:	05c506b4 	.word	0x05c506b4
    f084:	12250bf5 	.word	0x12250bf5
    f088:	03b101a3 	.word	0x03b101a3
    f08c:	02ef05bf 	.word	0x02ef05bf
    f090:	09a30649 	.word	0x09a30649

0000f094 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f094:	b510      	push	{r4, lr}
    f096:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
    f09a:	2900      	cmp	r1, #0
    f09c:	bf1c      	itt	ne
    f09e:	2000      	movne	r0, #0
    f0a0:	bd10      	popne	{r4, pc}
    f0a2:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    f0a6:	2900      	cmp	r1, #0
    f0a8:	bf1c      	itt	ne
    f0aa:	e9d0 1245 	ldrdne	r1, r2, [r0, #276]	; 0x114
    f0ae:	428a      	cmpne	r2, r1
    f0b0:	bf9c      	itt	ls
    f0b2:	2001      	movls	r0, #1
    f0b4:	bd10      	popls	{r4, pc}
    f0b6:	f7ff fee0 	bl	ee7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f0ba:	2000      	movs	r0, #0
    f0bc:	bd10      	pop	{r4, pc}

0000f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f0be:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0c0:	b083      	sub	sp, #12
    f0c2:	2500      	movs	r5, #0
    f0c4:	b131      	cbz	r1, f0d4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x16>
    f0c6:	2901      	cmp	r1, #1
    f0c8:	d076      	beq.n	f1b8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfa>
    f0ca:	f240 7195 	movw	r1, #1941	; 0x795
    f0ce:	2030      	movs	r0, #48	; 0x30
    f0d0:	f7f4 fffe 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0d4:	4604      	mov	r4, r0
    f0d6:	f890 0109 	ldrb.w	r0, [r0, #265]	; 0x109
    f0da:	2600      	movs	r6, #0
    f0dc:	b138      	cbz	r0, f0ee <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>
    f0de:	f7f6 ff53 	bl	5f88 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f0e2:	f242 7110 	movw	r1, #10000	; 0x2710
    f0e6:	fbb0 f2f1 	udiv	r2, r0, r1
    f0ea:	fb01 0612 	mls	r6, r1, r2, r0
    f0ee:	4620      	mov	r0, r4
    f0f0:	f7ff fe29 	bl	ed46 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f0f4:	e9d4 124e 	ldrd	r1, r2, [r4, #312]	; 0x138
    f0f8:	4430      	add	r0, r6
    f0fa:	1840      	adds	r0, r0, r1
    f0fc:	eb45 0102 	adc.w	r1, r5, r2
    f100:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
    f104:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
    f108:	2001      	movs	r0, #1
    f10a:	f884 0133 	strb.w	r0, [r4, #307]	; 0x133
    f10e:	2002      	movs	r0, #2
    f110:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
    f114:	4620      	mov	r0, r4
    f116:	f7ff fe83 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f11a:	2800      	cmp	r0, #0
    f11c:	bf08      	it	eq
    f11e:	266b      	moveq	r6, #107	; 0x6b
    f120:	d024      	beq.n	f16c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xae>
    f122:	4620      	mov	r0, r4
    f124:	f7ff fe6e 	bl	ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f128:	b930      	cbnz	r0, f138 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x7a>
    f12a:	4620      	mov	r0, r4
    f12c:	f7ff fe7c 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f130:	2800      	cmp	r0, #0
    f132:	bf08      	it	eq
    f134:	2642      	moveq	r6, #66	; 0x42
    f136:	d000      	beq.n	f13a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x7c>
    f138:	2649      	movs	r6, #73	; 0x49
    f13a:	4668      	mov	r0, sp
    f13c:	f7f4 fe36 	bl	3dac <mpsl_fem_pa_is_configured>
    f140:	f89d 0000 	ldrb.w	r0, [sp]
    f144:	2800      	cmp	r0, #0
    f146:	bf14      	ite	ne
    f148:	2701      	movne	r7, #1
    f14a:	2700      	moveq	r7, #0
    f14c:	a801      	add	r0, sp, #4
    f14e:	f7f4 fe15 	bl	3d7c <mpsl_fem_lna_is_configured>
    f152:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f156:	2800      	cmp	r0, #0
    f158:	bf18      	it	ne
    f15a:	2001      	movne	r0, #1
    f15c:	4338      	orrs	r0, r7
    f15e:	bf18      	it	ne
    f160:	3609      	addne	r6, #9
    f162:	f7f4 fd69 	bl	3c38 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    f166:	2800      	cmp	r0, #0
    f168:	bf18      	it	ne
    f16a:	3618      	addne	r6, #24
    f16c:	f8a4 6130 	strh.w	r6, [r4, #304]	; 0x130
    f170:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
    f174:	b9f8      	cbnz	r0, f1b6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
    f176:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    f17a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f17e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    f182:	4050      	eors	r0, r2
    f184:	ea70 0001 	orns	r0, r0, r1
    f188:	d017      	beq.n	f1ba <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfc>
    f18a:	4620      	mov	r0, r4
    f18c:	f7f6 fff4 	bl	6178 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f190:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    f194:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    f198:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    f19c:	1880      	adds	r0, r0, r2
    f19e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f1a2:	4169      	adcs	r1, r5
    f1a4:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    f1a8:	1a18      	subs	r0, r3, r0
    f1aa:	eb72 0001 	sbcs.w	r0, r2, r1
    f1ae:	d504      	bpl.n	f1ba <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xfc>
    f1b0:	4620      	mov	r0, r4
    f1b2:	f7ff fe62 	bl	ee7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f1b6:	e007      	b.n	f1c8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x10a>
    f1b8:	e014      	b.n	f1e4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x126>
    f1ba:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    f1be:	f504 7194 	add.w	r1, r4, #296	; 0x128
    f1c2:	f7f2 fafd 	bl	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f1c6:	b140      	cbz	r0, f1da <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x11c>
    f1c8:	f8a4 5140 	strh.w	r5, [r4, #320]	; 0x140
    f1cc:	f7fc f908 	bl	b3e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f1d0:	b003      	add	sp, #12
    f1d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f1d6:	f7f3 b925 	b.w	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f1da:	f240 61ef 	movw	r1, #1775	; 0x6ef
    f1de:	2030      	movs	r0, #48	; 0x30
    f1e0:	f7f4 ff76 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1e4:	f880 5110 	strb.w	r5, [r0, #272]	; 0x110
    f1e8:	f7fc f8fa 	bl	b3e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f1ec:	b003      	add	sp, #12
    f1ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f1f2:	f7f3 b917 	b.w	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>

0000f1f6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f1f6:	b510      	push	{r4, lr}
    f1f8:	4604      	mov	r4, r0
    f1fa:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
    f1fe:	2800      	cmp	r0, #0
    f200:	bf08      	it	eq
    f202:	bd10      	popeq	{r4, pc}
    f204:	2001      	movs	r0, #1
    f206:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
    f20a:	4601      	mov	r1, r0
    f20c:	4620      	mov	r0, r4
    f20e:	f7ff fe31 	bl	ee74 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f212:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    f216:	b188      	cbz	r0, f23c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x46>
    f218:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    f21c:	f7f2 fe6a 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f220:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    f224:	f7f2 ffbe 	bl	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f228:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    f22c:	f7f2 ff98 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f230:	2800      	cmp	r0, #0
    f232:	bf1c      	itt	ne
    f234:	2000      	movne	r0, #0
    f236:	f884 0120 	strbne.w	r0, [r4, #288]	; 0x120
    f23a:	d001      	beq.n	f240 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x4a>
    f23c:	2000      	movs	r0, #0
    f23e:	bd10      	pop	{r4, pc}
    f240:	f240 2109 	movw	r1, #521	; 0x209
    f244:	2030      	movs	r0, #48	; 0x30
    f246:	f7f4 ff43 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f24a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f24a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    f24e:	4770      	bx	lr

0000f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f250:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
    f254:	4770      	bx	lr
    f256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f25a:	b082      	sub	sp, #8
    f25c:	0004      	movs	r4, r0
    f25e:	d00a      	beq.n	f276 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26>
    f260:	2500      	movs	r5, #0
    f262:	2909      	cmp	r1, #9
    f264:	f080 8101 	bcs.w	f46a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x21a>
    f268:	e8df f001 	tbb	[pc, r1]
    f26c:	49491b09 	.word	0x49491b09
    f270:	daf3ff44 	.word	0xdaf3ff44
    f274:	00f9      	.short	0x00f9
    f276:	21ca      	movs	r1, #202	; 0xca
    f278:	2030      	movs	r0, #48	; 0x30
    f27a:	f7f4 ff29 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f27e:	4620      	mov	r0, r4
    f280:	f7f7 f94c 	bl	651c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f284:	b120      	cbz	r0, f290 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x40>
    f286:	f240 2179 	movw	r1, #633	; 0x279
    f28a:	2030      	movs	r0, #48	; 0x30
    f28c:	f7f4 ff20 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f290:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    f294:	b002      	add	sp, #8
    f296:	f2a0 101b 	subw	r0, r0, #283	; 0x11b
    f29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f29e:	f7f3 b991 	b.w	25c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f2a2:	4620      	mov	r0, r4
    f2a4:	f7ff fdb8 	bl	ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f2a8:	b9b8      	cbnz	r0, f2da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x8a>
    f2aa:	4620      	mov	r0, r4
    f2ac:	f7f6 ff64 	bl	6178 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f2b0:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    f2b4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    f2b8:	42a8      	cmp	r0, r5
    f2ba:	d20c      	bcs.n	f2d6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x86>
    f2bc:	1a28      	subs	r0, r5, r0
    f2be:	2103      	movs	r1, #3
    f2c0:	f7f2 f860 	bl	1384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f2c4:	b138      	cbz	r0, f2d6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x86>
    f2c6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
    f2ca:	b002      	add	sp, #8
    f2cc:	4620      	mov	r0, r4
    f2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2d2:	f7ff bcce 	b.w	ec72 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f2d6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
    f2da:	4620      	mov	r0, r4
    f2dc:	f7f7 f940 	bl	6560 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f2e0:	2800      	cmp	r0, #0
    f2e2:	bf04      	itt	eq
    f2e4:	b002      	addeq	sp, #8
    f2e6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2ea:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    f2ee:	2030      	movs	r0, #48	; 0x30
    f2f0:	f7f4 feee 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2f4:	b002      	add	sp, #8
    f2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2fa:	f7fc bbd1 	b.w	baa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f2fe:	2701      	movs	r7, #1
    f300:	4620      	mov	r0, r4
    f302:	f7ff fd8d 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f306:	2800      	cmp	r0, #0
    f308:	bf08      	it	eq
    f30a:	266b      	moveq	r6, #107	; 0x6b
    f30c:	d027      	beq.n	f35e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10e>
    f30e:	4620      	mov	r0, r4
    f310:	f7ff fd78 	bl	ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f314:	b930      	cbnz	r0, f324 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd4>
    f316:	4620      	mov	r0, r4
    f318:	f7ff fd86 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f31c:	2800      	cmp	r0, #0
    f31e:	bf08      	it	eq
    f320:	2642      	moveq	r6, #66	; 0x42
    f322:	d000      	beq.n	f326 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd6>
    f324:	2649      	movs	r6, #73	; 0x49
    f326:	4668      	mov	r0, sp
    f328:	f7f4 fd40 	bl	3dac <mpsl_fem_pa_is_configured>
    f32c:	f89d 0000 	ldrb.w	r0, [sp]
    f330:	2800      	cmp	r0, #0
    f332:	bf14      	ite	ne
    f334:	f04f 0801 	movne.w	r8, #1
    f338:	f04f 0800 	moveq.w	r8, #0
    f33c:	a801      	add	r0, sp, #4
    f33e:	f7f4 fd1d 	bl	3d7c <mpsl_fem_lna_is_configured>
    f342:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f346:	2800      	cmp	r0, #0
    f348:	bf18      	it	ne
    f34a:	2001      	movne	r0, #1
    f34c:	ea58 0000 	orrs.w	r0, r8, r0
    f350:	bf18      	it	ne
    f352:	3609      	addne	r6, #9
    f354:	f7f4 fc70 	bl	3c38 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    f358:	2800      	cmp	r0, #0
    f35a:	bf18      	it	ne
    f35c:	3618      	addne	r6, #24
    f35e:	f8a4 6130 	strh.w	r6, [r4, #304]	; 0x130
    f362:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
    f366:	2601      	movs	r6, #1
    f368:	f884 6133 	strb.w	r6, [r4, #307]	; 0x133
    f36c:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    f370:	b168      	cbz	r0, f38e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x13e>
    f372:	e9d4 024e 	ldrd	r0, r2, [r4, #312]	; 0x138
    f376:	f510 717a 	adds.w	r1, r0, #1000	; 0x3e8
    f37a:	f142 0000 	adc.w	r0, r2, #0
    f37e:	e9c4 104e 	strd	r1, r0, [r4, #312]	; 0x138
    f382:	2100      	movs	r1, #0
    f384:	f504 7094 	add.w	r0, r4, #296	; 0x128
    f388:	f7ff f935 	bl	e5f6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f38c:	e00e      	b.n	f3ac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15c>
    f38e:	4620      	mov	r0, r4
    f390:	f7ff fcd9 	bl	ed46 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f394:	e9d4 124e 	ldrd	r1, r2, [r4, #312]	; 0x138
    f398:	1809      	adds	r1, r1, r0
    f39a:	416a      	adcs	r2, r5
    f39c:	e9c4 124e 	strd	r1, r2, [r4, #312]	; 0x138
    f3a0:	4601      	mov	r1, r0
    f3a2:	f504 7094 	add.w	r0, r4, #296	; 0x128
    f3a6:	f7ff f926 	bl	e5f6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f3aa:	1c47      	adds	r7, r0, #1
    f3ac:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
    f3b0:	1c41      	adds	r1, r0, #1
    f3b2:	290a      	cmp	r1, #10
    f3b4:	bf3c      	itt	cc
    f3b6:	4438      	addcc	r0, r7
    f3b8:	f8a4 0140 	strhcc.w	r0, [r4, #320]	; 0x140
    f3bc:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    f3c0:	b138      	cbz	r0, f3d2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x182>
    f3c2:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
    f3c6:	1c40      	adds	r0, r0, #1
    f3c8:	280a      	cmp	r0, #10
    f3ca:	bf28      	it	cs
    f3cc:	f884 6132 	strbcs.w	r6, [r4, #306]	; 0x132
    f3d0:	d202      	bcs.n	f3d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x188>
    f3d2:	2002      	movs	r0, #2
    f3d4:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
    f3d8:	f894 0150 	ldrb.w	r0, [r4, #336]	; 0x150
    f3dc:	bb00      	cbnz	r0, f420 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1d0>
    f3de:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    f3e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f3e6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    f3ea:	4050      	eors	r0, r2
    f3ec:	ea70 0001 	orns	r0, r0, r1
    f3f0:	d01f      	beq.n	f432 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1e2>
    f3f2:	4620      	mov	r0, r4
    f3f4:	f7f6 fec0 	bl	6178 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f3f8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    f3fc:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    f400:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    f404:	1840      	adds	r0, r0, r1
    f406:	eb45 0102 	adc.w	r1, r5, r2
    f40a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f40e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    f412:	1a18      	subs	r0, r3, r0
    f414:	eb72 0001 	sbcs.w	r0, r2, r1
    f418:	d50b      	bpl.n	f432 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1e2>
    f41a:	4620      	mov	r0, r4
    f41c:	f7ff fd2d 	bl	ee7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f420:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    f424:	f7f2 fe9c 	bl	2160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f428:	f884 5120 	strb.w	r5, [r4, #288]	; 0x120
    f42c:	b002      	add	sp, #8
    f42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f432:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    f436:	f504 7194 	add.w	r1, r4, #296	; 0x128
    f43a:	f7f2 f9c1 	bl	17c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f43e:	2800      	cmp	r0, #0
    f440:	bf1c      	itt	ne
    f442:	b002      	addne	sp, #8
    f444:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    f448:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
    f44c:	2030      	movs	r0, #48	; 0x30
    f44e:	f7f4 fe3f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f452:	b002      	add	sp, #8
    f454:	4620      	mov	r0, r4
    f456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f45a:	f7ff bc0a 	b.w	ec72 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f45e:	21ea      	movs	r1, #234	; 0xea
    f460:	2030      	movs	r0, #48	; 0x30
    f462:	e000      	b.n	f466 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x216>
    f464:	e001      	b.n	f46a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x21a>
    f466:	f7f4 fe33 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f46a:	21ee      	movs	r1, #238	; 0xee
    f46c:	2030      	movs	r0, #48	; 0x30
    f46e:	f7f4 fe2f 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f472 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f472:	f7f5 ba17 	b.w	48a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f476 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    f476:	f7f9 bb53 	b.w	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
    f47a:	f240 3191 	movw	r1, #913	; 0x391
    f47e:	2032      	movs	r0, #50	; 0x32
    f480:	f7f4 fe26 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f484:	f7f9 bb4c 	b.w	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>

0000f488 <sym_5ATVDULIG6DGCAQSRDHXRO37ITSFNT7QVD7OMTQ>:
    f488:	b500      	push	{lr}
    f48a:	b083      	sub	sp, #12
    f48c:	f7f5 fb66 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f490:	aa01      	add	r2, sp, #4
    f492:	4669      	mov	r1, sp
    f494:	f7fe fc79 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f498:	9800      	ldr	r0, [sp, #0]
    f49a:	f7fe fc1d 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f49e:	7cc0      	ldrb	r0, [r0, #19]
    f4a0:	28ff      	cmp	r0, #255	; 0xff
    f4a2:	bf14      	ite	ne
    f4a4:	2001      	movne	r0, #1
    f4a6:	2000      	moveq	r0, #0
    f4a8:	b003      	add	sp, #12
    f4aa:	bd00      	pop	{pc}

0000f4ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    f4ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4b0:	b083      	sub	sp, #12
    f4b2:	461d      	mov	r5, r3
    f4b4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    f4b8:	460e      	mov	r6, r1
    f4ba:	4607      	mov	r7, r0
    f4bc:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    f4c0:	f7f5 fb4c 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f4c4:	4604      	mov	r4, r0
    f4c6:	f7fe fc09 	bl	dcdc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f4ca:	2801      	cmp	r0, #1
    f4cc:	bf04      	itt	eq
    f4ce:	b007      	addeq	sp, #28
    f4d0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4d4:	4620      	mov	r0, r4
    f4d6:	aa01      	add	r2, sp, #4
    f4d8:	4669      	mov	r1, sp
    f4da:	f7fe fc56 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f4de:	9800      	ldr	r0, [sp, #0]
    f4e0:	f7fe fbfa 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f4e4:	4604      	mov	r4, r0
    f4e6:	221c      	movs	r2, #28
    f4e8:	2100      	movs	r1, #0
    f4ea:	3012      	adds	r0, #18
    f4ec:	f7fd fe48 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f4f0:	f04f 0a01 	mov.w	sl, #1
    f4f4:	f884 a012 	strb.w	sl, [r4, #18]
    f4f8:	b156      	cbz	r6, f510 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x64>
    f4fa:	2e01      	cmp	r6, #1
    f4fc:	d00d      	beq.n	f51a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x6e>
    f4fe:	2e02      	cmp	r6, #2
    f500:	d010      	beq.n	f524 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x78>
    f502:	2e06      	cmp	r6, #6
    f504:	d013      	beq.n	f52e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x82>
    f506:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    f50a:	2033      	movs	r0, #51	; 0x33
    f50c:	f7f4 fde0 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f510:	7f20      	ldrb	r0, [r4, #28]
    f512:	f040 0013 	orr.w	r0, r0, #19
    f516:	7720      	strb	r0, [r4, #28]
    f518:	e00d      	b.n	f536 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    f51a:	7f20      	ldrb	r0, [r4, #28]
    f51c:	f040 0015 	orr.w	r0, r0, #21
    f520:	7720      	strb	r0, [r4, #28]
    f522:	e008      	b.n	f536 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    f524:	7f20      	ldrb	r0, [r4, #28]
    f526:	f040 0010 	orr.w	r0, r0, #16
    f52a:	7720      	strb	r0, [r4, #28]
    f52c:	e003      	b.n	f536 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x8a>
    f52e:	7f20      	ldrb	r0, [r4, #28]
    f530:	f040 0012 	orr.w	r0, r0, #18
    f534:	7720      	strb	r0, [r4, #28]
    f536:	f104 0214 	add.w	r2, r4, #20
    f53a:	1e56      	subs	r6, r2, #1
    f53c:	4640      	mov	r0, r8
    f53e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f542:	d00c      	beq.n	f55e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb2>
    f544:	4631      	mov	r1, r6
    f546:	f7f5 fdab 	bl	50a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f54a:	b120      	cbz	r0, f556 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    f54c:	7830      	ldrb	r0, [r6, #0]
    f54e:	f040 0002 	orr.w	r0, r0, #2
    f552:	7030      	strb	r0, [r6, #0]
    f554:	e00a      	b.n	f56c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xc0>
    f556:	2189      	movs	r1, #137	; 0x89
    f558:	2033      	movs	r0, #51	; 0x33
    f55a:	f7f4 fdb9 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55e:	7c78      	ldrb	r0, [r7, #17]
    f560:	7030      	strb	r0, [r6, #0]
    f562:	6878      	ldr	r0, [r7, #4]
    f564:	6801      	ldr	r1, [r0, #0]
    f566:	6011      	str	r1, [r2, #0]
    f568:	8880      	ldrh	r0, [r0, #4]
    f56a:	8090      	strh	r0, [r2, #4]
    f56c:	f884 b01b 	strb.w	fp, [r4, #27]
    f570:	f884 a01e 	strb.w	sl, [r4, #30]
    f574:	2600      	movs	r6, #0
    f576:	77e6      	strb	r6, [r4, #31]
    f578:	20ff      	movs	r0, #255	; 0xff
    f57a:	f884 0020 	strb.w	r0, [r4, #32]
    f57e:	7f21      	ldrb	r1, [r4, #28]
    f580:	f011 0f04 	tst.w	r1, #4
    f584:	bf08      	it	eq
    f586:	f884 0025 	strbeq.w	r0, [r4, #37]	; 0x25
    f58a:	d012      	beq.n	f5b2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x106>
    f58c:	f104 0026 	add.w	r0, r4, #38	; 0x26
    f590:	1e41      	subs	r1, r0, #1
    f592:	2d02      	cmp	r5, #2
    f594:	bf18      	it	ne
    f596:	2d03      	cmpne	r5, #3
    f598:	d005      	beq.n	f5a6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xfa>
    f59a:	68ba      	ldr	r2, [r7, #8]
    f59c:	6813      	ldr	r3, [r2, #0]
    f59e:	6003      	str	r3, [r0, #0]
    f5a0:	8892      	ldrh	r2, [r2, #4]
    f5a2:	8082      	strh	r2, [r0, #4]
    f5a4:	e004      	b.n	f5b0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x104>
    f5a6:	9a05      	ldr	r2, [sp, #20]
    f5a8:	6813      	ldr	r3, [r2, #0]
    f5aa:	6003      	str	r3, [r0, #0]
    f5ac:	8892      	ldrh	r2, [r2, #4]
    f5ae:	8082      	strh	r2, [r0, #4]
    f5b0:	700d      	strb	r5, [r1, #0]
    f5b2:	f04f 007f 	mov.w	r0, #127	; 0x7f
    f5b6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    f5ba:	f884 902d 	strb.w	r9, [r4, #45]	; 0x2d
    f5be:	f7f5 facd 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f5c2:	4605      	mov	r5, r0
    f5c4:	f7f5 fac4 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f5c8:	4601      	mov	r1, r0
    f5ca:	2201      	movs	r2, #1
    f5cc:	4628      	mov	r0, r5
    f5ce:	f7fe fb2b 	bl	dc28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    f5d2:	b150      	cbz	r0, f5ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x13e>
    f5d4:	4620      	mov	r0, r4
    f5d6:	7206      	strb	r6, [r0, #8]
    f5d8:	2202      	movs	r2, #2
    f5da:	2100      	movs	r1, #0
    f5dc:	f7f6 f92c 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f5e0:	b007      	add	sp, #28
    f5e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5e6:	f7f6 bc5f 	b.w	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f5ea:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    f5ee:	2033      	movs	r0, #51	; 0x33
    f5f0:	f7f4 fd6e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f5f4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5f8:	b083      	sub	sp, #12
    f5fa:	461f      	mov	r7, r3
    f5fc:	4690      	mov	r8, r2
    f5fe:	460d      	mov	r5, r1
    f600:	4606      	mov	r6, r0
    f602:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    f606:	f7f5 faa9 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f60a:	4604      	mov	r4, r0
    f60c:	f7fe fb66 	bl	dcdc <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f610:	2801      	cmp	r0, #1
    f612:	bf04      	itt	eq
    f614:	b003      	addeq	sp, #12
    f616:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f61a:	4620      	mov	r0, r4
    f61c:	aa01      	add	r2, sp, #4
    f61e:	4669      	mov	r1, sp
    f620:	f7fe fbb3 	bl	dd8a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f624:	9800      	ldr	r0, [sp, #0]
    f626:	f7fe fb57 	bl	dcd8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f62a:	4604      	mov	r4, r0
    f62c:	221c      	movs	r2, #28
    f62e:	2100      	movs	r1, #0
    f630:	3012      	adds	r0, #18
    f632:	f7fd fda5 	bl	d180 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f636:	f04f 0901 	mov.w	r9, #1
    f63a:	f884 9012 	strb.w	r9, [r4, #18]
    f63e:	f104 0214 	add.w	r2, r4, #20
    f642:	f104 0b13 	add.w	fp, r4, #19
    f646:	2dff      	cmp	r5, #255	; 0xff
    f648:	d00f      	beq.n	f66a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x76>
    f64a:	4659      	mov	r1, fp
    f64c:	4628      	mov	r0, r5
    f64e:	f7f5 fd27 	bl	50a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f652:	b130      	cbz	r0, f662 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x6e>
    f654:	f89b 0000 	ldrb.w	r0, [fp]
    f658:	f040 0002 	orr.w	r0, r0, #2
    f65c:	f88b 0000 	strb.w	r0, [fp]
    f660:	e00b      	b.n	f67a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x86>
    f662:	2189      	movs	r1, #137	; 0x89
    f664:	2033      	movs	r0, #51	; 0x33
    f666:	f7f4 fd33 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f66a:	7c70      	ldrb	r0, [r6, #17]
    f66c:	f88b 0000 	strb.w	r0, [fp]
    f670:	6870      	ldr	r0, [r6, #4]
    f672:	6801      	ldr	r1, [r0, #0]
    f674:	6011      	str	r1, [r2, #0]
    f676:	8880      	ldrh	r0, [r0, #4]
    f678:	8090      	strh	r0, [r2, #4]
    f67a:	f884 a01b 	strb.w	sl, [r4, #27]
    f67e:	7f20      	ldrb	r0, [r4, #28]
    f680:	2500      	movs	r5, #0
    f682:	f368 0000 	bfi	r0, r8, #0, #1
    f686:	f040 001a 	orr.w	r0, r0, #26
    f68a:	7720      	strb	r0, [r4, #28]
    f68c:	f884 901e 	strb.w	r9, [r4, #30]
    f690:	77e5      	strb	r5, [r4, #31]
    f692:	20ff      	movs	r0, #255	; 0xff
    f694:	f884 0020 	strb.w	r0, [r4, #32]
    f698:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    f69c:	207f      	movs	r0, #127	; 0x7f
    f69e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    f6a2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    f6a6:	f7f5 fa59 	bl	4b5c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f6aa:	4606      	mov	r6, r0
    f6ac:	f7f5 fa50 	bl	4b50 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f6b0:	4601      	mov	r1, r0
    f6b2:	2201      	movs	r2, #1
    f6b4:	4630      	mov	r0, r6
    f6b6:	f7fe fab7 	bl	dc28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    f6ba:	b150      	cbz	r0, f6d2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xde>
    f6bc:	4620      	mov	r0, r4
    f6be:	7205      	strb	r5, [r0, #8]
    f6c0:	2202      	movs	r2, #2
    f6c2:	2100      	movs	r1, #0
    f6c4:	f7f6 f8b8 	bl	5838 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f6c8:	b003      	add	sp, #12
    f6ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6ce:	f7f6 bbeb 	b.w	5ea8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f6d2:	f240 21fd 	movw	r1, #765	; 0x2fd
    f6d6:	2033      	movs	r0, #51	; 0x33
    f6d8:	f7f4 fcfa 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f6dc <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>:
    f6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6e0:	4606      	mov	r6, r0
    f6e2:	78c0      	ldrb	r0, [r0, #3]
    f6e4:	2405      	movs	r4, #5
    f6e6:	460d      	mov	r5, r1
    f6e8:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    f6ec:	f04f 0800 	mov.w	r8, #0
    f6f0:	bf1c      	itt	ne
    f6f2:	4630      	movne	r0, r6
    f6f4:	f116 0704 	addsne.w	r7, r6, #4
    f6f8:	d061      	beq.n	f7be <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xe2>
    f6fa:	f7ff f901 	bl	e900 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    f6fe:	7468      	strb	r0, [r5, #17]
    f700:	4630      	mov	r0, r6
    f702:	f7ff f8fa 	bl	e8fa <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    f706:	74a8      	strb	r0, [r5, #18]
    f708:	7838      	ldrb	r0, [r7, #0]
    f70a:	7068      	strb	r0, [r5, #1]
    f70c:	78f0      	ldrb	r0, [r6, #3]
    f70e:	0980      	lsrs	r0, r0, #6
    f710:	7028      	strb	r0, [r5, #0]
    f712:	7838      	ldrb	r0, [r7, #0]
    f714:	f010 0f01 	tst.w	r0, #1
    f718:	bf08      	it	eq
    f71a:	f8c5 8004 	streq.w	r8, [r5, #4]
    f71e:	d002      	beq.n	f726 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x4a>
    f720:	1d70      	adds	r0, r6, #5
    f722:	240b      	movs	r4, #11
    f724:	6068      	str	r0, [r5, #4]
    f726:	7838      	ldrb	r0, [r7, #0]
    f728:	f010 0f02 	tst.w	r0, #2
    f72c:	bf08      	it	eq
    f72e:	f8c5 8008 	streq.w	r8, [r5, #8]
    f732:	d002      	beq.n	f73a <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x5e>
    f734:	1930      	adds	r0, r6, r4
    f736:	1da4      	adds	r4, r4, #6
    f738:	60a8      	str	r0, [r5, #8]
    f73a:	7838      	ldrb	r0, [r7, #0]
    f73c:	f010 0f04 	tst.w	r0, #4
    f740:	bf18      	it	ne
    f742:	1c64      	addne	r4, r4, #1
    f744:	f010 0f08 	tst.w	r0, #8
    f748:	bf08      	it	eq
    f74a:	f8c5 8014 	streq.w	r8, [r5, #20]
    f74e:	d002      	beq.n	f756 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x7a>
    f750:	1930      	adds	r0, r6, r4
    f752:	1ca4      	adds	r4, r4, #2
    f754:	6168      	str	r0, [r5, #20]
    f756:	7838      	ldrb	r0, [r7, #0]
    f758:	f010 0f10 	tst.w	r0, #16
    f75c:	bf08      	it	eq
    f75e:	f8c5 8018 	streq.w	r8, [r5, #24]
    f762:	d002      	beq.n	f76a <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0x8e>
    f764:	1930      	adds	r0, r6, r4
    f766:	1ce4      	adds	r4, r4, #3
    f768:	61a8      	str	r0, [r5, #24]
    f76a:	7838      	ldrb	r0, [r7, #0]
    f76c:	f010 0f20 	tst.w	r0, #32
    f770:	bf08      	it	eq
    f772:	f8c5 801c 	streq.w	r8, [r5, #28]
    f776:	d004      	beq.n	f782 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xa6>
    f778:	1930      	adds	r0, r6, r4
    f77a:	61e8      	str	r0, [r5, #28]
    f77c:	f104 0012 	add.w	r0, r4, #18
    f780:	b2c4      	uxtb	r4, r0
    f782:	7838      	ldrb	r0, [r7, #0]
    f784:	f010 0f40 	tst.w	r0, #64	; 0x40
    f788:	bf08      	it	eq
    f78a:	f8c5 8020 	streq.w	r8, [r5, #32]
    f78e:	d003      	beq.n	f798 <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY+0xbc>
    f790:	1930      	adds	r0, r6, r4
    f792:	6228      	str	r0, [r5, #32]
    f794:	1c60      	adds	r0, r4, #1
    f796:	b2c4      	uxtb	r4, r0
    f798:	4630      	mov	r0, r6
    f79a:	f7ff f850 	bl	e83e <sym_D66UNDVZ3GOIW7NLNL4N37KLOXWCRBXVM75X56A>
    f79e:	1b00      	subs	r0, r0, r4
    f7a0:	1d00      	adds	r0, r0, #4
    f7a2:	4420      	add	r0, r4
    f7a4:	b2c4      	uxtb	r4, r0
    f7a6:	4630      	mov	r0, r6
    f7a8:	f7ff f826 	bl	e7f8 <sym_FITQAUCWEWZALLHJ4Y4UNQWIKT43CPDMCVGNNFY>
    f7ac:	7428      	strb	r0, [r5, #16]
    f7ae:	2800      	cmp	r0, #0
    f7b0:	bf1a      	itte	ne
    f7b2:	1930      	addne	r0, r6, r4
    f7b4:	60e8      	strne	r0, [r5, #12]
    f7b6:	f8c5 800c 	streq.w	r8, [r5, #12]
    f7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7be:	f8c5 8000 	str.w	r8, [r5]
    f7c2:	f8c5 8004 	str.w	r8, [r5, #4]
    f7c6:	f8c5 8008 	str.w	r8, [r5, #8]
    f7ca:	f8c5 800c 	str.w	r8, [r5, #12]
    f7ce:	f8c5 8010 	str.w	r8, [r5, #16]
    f7d2:	f8c5 8014 	str.w	r8, [r5, #20]
    f7d6:	f8c5 8018 	str.w	r8, [r5, #24]
    f7da:	f8c5 801c 	str.w	r8, [r5, #28]
    f7de:	f8c1 8020 	str.w	r8, [r1, #32]
    f7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f7e6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f7e6:	7802      	ldrb	r2, [r0, #0]
    f7e8:	f002 020f 	and.w	r2, r2, #15
    f7ec:	2a07      	cmp	r2, #7
    f7ee:	d001      	beq.n	f7f4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xe>
    f7f0:	f7f9 bc64 	b.w	90bc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f7f4:	f7ff bf72 	b.w	f6dc <sym_JDOK3ILHJSLIOCXZDFBFGS5GHZ7GEUIL56O2LBY>
    f7f8:	b530      	push	{r4, r5, lr}
    f7fa:	b083      	sub	sp, #12
    f7fc:	245b      	movs	r4, #91	; 0x5b
    f7fe:	f7f4 fa1b 	bl	3c38 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
    f802:	2800      	cmp	r0, #0
    f804:	bf18      	it	ne
    f806:	2473      	movne	r4, #115	; 0x73
    f808:	4668      	mov	r0, sp
    f80a:	f7f4 facf 	bl	3dac <mpsl_fem_pa_is_configured>
    f80e:	f89d 0000 	ldrb.w	r0, [sp]
    f812:	2800      	cmp	r0, #0
    f814:	bf14      	ite	ne
    f816:	2501      	movne	r5, #1
    f818:	2500      	moveq	r5, #0
    f81a:	a801      	add	r0, sp, #4
    f81c:	f7f4 faae 	bl	3d7c <mpsl_fem_lna_is_configured>
    f820:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f824:	2800      	cmp	r0, #0
    f826:	bf18      	it	ne
    f828:	2001      	movne	r0, #1
    f82a:	4328      	orrs	r0, r5
    f82c:	bf18      	it	ne
    f82e:	3409      	addne	r4, #9
    f830:	4620      	mov	r0, r4
    f832:	b003      	add	sp, #12
    f834:	bd30      	pop	{r4, r5, pc}

0000f836 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f836:	f7f5 b835 	b.w	48a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f83a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f83a:	b510      	push	{r4, lr}
    f83c:	e9dd 3c02 	ldrd	r3, ip, [sp, #8]
    f840:	1ac0      	subs	r0, r0, r3
    f842:	eb71 010c 	sbcs.w	r1, r1, ip
    f846:	d516      	bpl.n	f876 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f848:	f04f 3cff 	mov.w	ip, #4294967295
    f84c:	f1d0 4300 	rsbs	r3, r0, #2147483648	; 0x80000000
    f850:	eb7c 0101 	sbcs.w	r1, ip, r1
    f854:	db03      	blt.n	f85e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f856:	21b2      	movs	r1, #178	; 0xb2
    f858:	2037      	movs	r0, #55	; 0x37
    f85a:	f7f4 fc39 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f85e:	4240      	negs	r0, r0
    f860:	eb00 0102 	add.w	r1, r0, r2
    f864:	f1a1 0101 	sub.w	r1, r1, #1
    f868:	fbb1 f1f2 	udiv	r1, r1, r2
    f86c:	fb01 f102 	mul.w	r1, r1, r2
    f870:	eba1 0000 	sub.w	r0, r1, r0
    f874:	bd10      	pop	{r4, pc}
    f876:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    f87a:	1ac3      	subs	r3, r0, r3
    f87c:	f171 0100 	sbcs.w	r1, r1, #0
    f880:	bfbe      	ittt	lt
    f882:	fb90 f1f2 	sdivlt	r1, r0, r2
    f886:	fb01 0012 	mlslt	r0, r1, r2, r0
    f88a:	bd10      	poplt	{r4, pc}
    f88c:	21bb      	movs	r1, #187	; 0xbb
    f88e:	2037      	movs	r0, #55	; 0x37
    f890:	f7f4 fc1e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f894:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f898:	f001 0107 	and.w	r1, r1, #7
    f89c:	7800      	ldrb	r0, [r0, #0]
    f89e:	40c8      	lsrs	r0, r1
    f8a0:	f000 0001 	and.w	r0, r0, #1
    f8a4:	4770      	bx	lr
    f8a6:	b118      	cbz	r0, f8b0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x76>
    f8a8:	2802      	cmp	r0, #2
    f8aa:	d001      	beq.n	f8b0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x76>
    f8ac:	2001      	movs	r0, #1
    f8ae:	4770      	bx	lr
    f8b0:	2000      	movs	r0, #0
    f8b2:	4770      	bx	lr

0000f8b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f8b4:	b510      	push	{r4, lr}
    f8b6:	4604      	mov	r4, r0
    f8b8:	f000 ff5b 	bl	10772 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x63a>
    f8bc:	b108      	cbz	r0, f8c2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f8be:	200c      	movs	r0, #12
    f8c0:	bd10      	pop	{r4, pc}
    f8c2:	7820      	ldrb	r0, [r4, #0]
    f8c4:	b128      	cbz	r0, f8d2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
    f8c6:	2801      	cmp	r0, #1
    f8c8:	d003      	beq.n	f8d2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
    f8ca:	28ff      	cmp	r0, #255	; 0xff
    f8cc:	d00b      	beq.n	f8e6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
    f8ce:	2012      	movs	r0, #18
    f8d0:	bd10      	pop	{r4, pc}
    f8d2:	f7ff ffe8 	bl	f8a6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x6c>
    f8d6:	1c61      	adds	r1, r4, #1
    f8d8:	f7f5 fc92 	bl	5200 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f8dc:	b108      	cbz	r0, f8e2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
    f8de:	2000      	movs	r0, #0
    f8e0:	bd10      	pop	{r4, pc}
    f8e2:	2007      	movs	r0, #7
    f8e4:	bd10      	pop	{r4, pc}
    f8e6:	2001      	movs	r0, #1
    f8e8:	f7f5 fccc 	bl	5284 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f8ec:	e7f7      	b.n	f8de <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

0000f8ee <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f8ee:	b510      	push	{r4, lr}
    f8f0:	f000 ff3f 	bl	10772 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x63a>
    f8f4:	b108      	cbz	r0, f8fa <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f8f6:	200c      	movs	r0, #12
    f8f8:	bd10      	pop	{r4, pc}
    f8fa:	f7f5 fcc9 	bl	5290 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f8fe:	2000      	movs	r0, #0
    f900:	bd10      	pop	{r4, pc}

0000f902 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f902:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f906:	4606      	mov	r6, r0
    f908:	f000 fbf5 	bl	100f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f90c:	2800      	cmp	r0, #0
    f90e:	d112      	bne.n	f936 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f910:	8830      	ldrh	r0, [r6, #0]
    f912:	2100      	movs	r1, #0
    f914:	f7fe fb80 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f918:	0004      	movs	r4, r0
    f91a:	d00e      	beq.n	f93a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f91c:	f000 fe1e 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    f920:	b158      	cbz	r0, f93a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f922:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f926:	f88d 0000 	strb.w	r0, [sp]
    f92a:	9800      	ldr	r0, [sp, #0]
    f92c:	9000      	str	r0, [sp, #0]
    f92e:	f89d 0000 	ldrb.w	r0, [sp]
    f932:	b120      	cbz	r0, f93e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f934:	203a      	movs	r0, #58	; 0x3a
    f936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f93a:	2002      	movs	r0, #2
    f93c:	e7fb      	b.n	f936 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f93e:	f04f 0800 	mov.w	r8, #0
    f942:	88b0      	ldrh	r0, [r6, #4]
    f944:	f7fe fe0a 	bl	e55c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f948:	4605      	mov	r5, r0
    f94a:	4601      	mov	r1, r0
    f94c:	2005      	movs	r0, #5
    f94e:	f7fe fe86 	bl	e65e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f952:	4607      	mov	r7, r0
    f954:	4629      	mov	r1, r5
    f956:	2008      	movs	r0, #8
    f958:	f7fe fe81 	bl	e65e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f95c:	42b8      	cmp	r0, r7
    f95e:	d301      	bcc.n	f964 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f960:	42af      	cmp	r7, r5
    f962:	d301      	bcc.n	f968 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f964:	2012      	movs	r0, #18
    f966:	e7e6      	b.n	f936 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f968:	f641 504c 	movw	r0, #7500	; 0x1d4c
    f96c:	4285      	cmp	r5, r0
    f96e:	d209      	bcs.n	f984 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
    f970:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    f974:	2802      	cmp	r0, #2
    f976:	d103      	bne.n	f980 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x7e>
    f978:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    f97c:	2802      	cmp	r0, #2
    f97e:	d001      	beq.n	f984 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
    f980:	200c      	movs	r0, #12
    f982:	e7d8      	b.n	f936 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f984:	f8a4 72a8 	strh.w	r7, [r4, #680]	; 0x2a8
    f988:	e9c4 85ab 	strd	r8, r5, [r4, #684]	; 0x2ac
    f98c:	88f0      	ldrh	r0, [r6, #6]
    f98e:	f8a4 02b4 	strh.w	r0, [r4, #692]	; 0x2b4
    f992:	8930      	ldrh	r0, [r6, #8]
    f994:	f8a4 02b6 	strh.w	r0, [r4, #694]	; 0x2b6
    f998:	f504 7429 	add.w	r4, r4, #676	; 0x2a4
    f99c:	20ff      	movs	r0, #255	; 0xff
    f99e:	7020      	strb	r0, [r4, #0]
    f9a0:	2000      	movs	r0, #0
    f9a2:	e7c8      	b.n	f936 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f9a4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f9a4:	b510      	push	{r4, lr}
    f9a6:	460b      	mov	r3, r1
    f9a8:	2201      	movs	r2, #1
    f9aa:	f100 0110 	add.w	r1, r0, #16
    f9ae:	f7f5 fdb1 	bl	5514 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f9b2:	2000      	movs	r0, #0
    f9b4:	bd10      	pop	{r4, pc}

0000f9b6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f9b6:	b510      	push	{r4, lr}
    f9b8:	8800      	ldrh	r0, [r0, #0]
    f9ba:	2101      	movs	r1, #1
    f9bc:	f7fe fb2c 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9c0:	b118      	cbz	r0, f9ca <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f9c2:	f890 1300 	ldrb.w	r1, [r0, #768]	; 0x300
    f9c6:	b111      	cbz	r1, f9ce <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f9c8:	e007      	b.n	f9da <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f9ca:	2002      	movs	r0, #2
    f9cc:	bd10      	pop	{r4, pc}
    f9ce:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f9d2:	2915      	cmp	r1, #21
    f9d4:	d003      	beq.n	f9de <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9d6:	2916      	cmp	r1, #22
    f9d8:	d001      	beq.n	f9de <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9da:	200c      	movs	r0, #12
    f9dc:	bd10      	pop	{r4, pc}
    f9de:	2102      	movs	r1, #2
    f9e0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    f9e4:	2000      	movs	r0, #0
    f9e6:	bd10      	pop	{r4, pc}

0000f9e8 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f9e8:	b510      	push	{r4, lr}
    f9ea:	2108      	movs	r1, #8
    f9ec:	f7f4 fbfa 	bl	41e4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f9f0:	2000      	movs	r0, #0
    f9f2:	bd10      	pop	{r4, pc}

0000f9f4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f9f4:	b510      	push	{r4, lr}
    f9f6:	4604      	mov	r4, r0
    f9f8:	f7fa fe2e 	bl	a658 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x294>
    f9fc:	f7ff fa18 	bl	ee30 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fa00:	7020      	strb	r0, [r4, #0]
    fa02:	2000      	movs	r0, #0
    fa04:	bd10      	pop	{r4, pc}

0000fa06 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fa06:	b510      	push	{r4, lr}
    fa08:	4604      	mov	r4, r0
    fa0a:	20d8      	movs	r0, #216	; 0xd8
    fa0c:	7020      	strb	r0, [r4, #0]
    fa0e:	f000 fda2 	bl	10556 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41e>
    fa12:	7060      	strb	r0, [r4, #1]
    fa14:	2000      	movs	r0, #0
    fa16:	bd10      	pop	{r4, pc}

0000fa18 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fa18:	2108      	movs	r1, #8
    fa1a:	7001      	strb	r1, [r0, #0]
    fa1c:	2000      	movs	r0, #0
    fa1e:	4770      	bx	lr

0000fa20 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fa20:	b510      	push	{r4, lr}
    fa22:	4604      	mov	r4, r0
    fa24:	f000 fea5 	bl	10772 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x63a>
    fa28:	b108      	cbz	r0, fa2e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fa2a:	200c      	movs	r0, #12
    fa2c:	bd10      	pop	{r4, pc}
    fa2e:	7820      	ldrb	r0, [r4, #0]
    fa30:	b120      	cbz	r0, fa3c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
    fa32:	2801      	cmp	r0, #1
    fa34:	d002      	beq.n	fa3c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
    fa36:	28ff      	cmp	r0, #255	; 0xff
    fa38:	d108      	bne.n	fa4c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
    fa3a:	e009      	b.n	fa50 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
    fa3c:	f7ff ff33 	bl	f8a6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x6c>
    fa40:	1c61      	adds	r1, r4, #1
    fa42:	f7fe fd68 	bl	e516 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fa46:	b108      	cbz	r0, fa4c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
    fa48:	2000      	movs	r0, #0
    fa4a:	bd10      	pop	{r4, pc}
    fa4c:	2012      	movs	r0, #18
    fa4e:	bd10      	pop	{r4, pc}
    fa50:	2000      	movs	r0, #0
    fa52:	f7f5 fc17 	bl	5284 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fa56:	e7f7      	b.n	fa48 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

0000fa58 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fa58:	b51c      	push	{r2, r3, r4, lr}
    fa5a:	4604      	mov	r4, r0
    fa5c:	f7fa fdfc 	bl	a658 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x294>
    fa60:	2000      	movs	r0, #0
    fa62:	f88d 0002 	strb.w	r0, [sp, #2]
    fa66:	2103      	movs	r1, #3
    fa68:	f88d 1001 	strb.w	r1, [sp, #1]
    fa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
    fa70:	f88d 1003 	strb.w	r1, [sp, #3]
    fa74:	f88d 0000 	strb.w	r0, [sp]
    fa78:	4668      	mov	r0, sp
    fa7a:	9401      	str	r4, [sp, #4]
    fa7c:	f000 f965 	bl	fd4a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fa80:	bd1c      	pop	{r2, r3, r4, pc}

0000fa82 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fa82:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fa84:	4605      	mov	r5, r0
    fa86:	f7fa fde7 	bl	a658 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x294>
    fa8a:	4606      	mov	r6, r0
    fa8c:	7828      	ldrb	r0, [r5, #0]
    fa8e:	2400      	movs	r4, #0
    fa90:	b160      	cbz	r0, faac <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fa92:	f88d 4000 	strb.w	r4, [sp]
    fa96:	2001      	movs	r0, #1
    fa98:	f10d 0101 	add.w	r1, sp, #1
    fa9c:	f7f5 f9cc 	bl	4e38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    faa0:	b120      	cbz	r0, faac <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    faa2:	4668      	mov	r0, sp
    faa4:	f000 f897 	bl	fbd6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    faa8:	2800      	cmp	r0, #0
    faaa:	d112      	bne.n	fad2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    faac:	f88d 400c 	strb.w	r4, [sp, #12]
    fab0:	4630      	mov	r0, r6
    fab2:	f7ff f9b1 	bl	ee18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fab6:	b118      	cbz	r0, fac0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fab8:	2080      	movs	r0, #128	; 0x80
    faba:	f8ad 000d 	strh.w	r0, [sp, #13]
    fabe:	e001      	b.n	fac4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fac0:	f8ad 400d 	strh.w	r4, [sp, #13]
    fac4:	f88d 400f 	strb.w	r4, [sp, #15]
    fac8:	7828      	ldrb	r0, [r5, #0]
    faca:	2801      	cmp	r0, #1
    facc:	d003      	beq.n	fad6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    face:	b138      	cbz	r0, fae0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fad0:	2012      	movs	r0, #18
    fad2:	b004      	add	sp, #16
    fad4:	bd70      	pop	{r4, r5, r6, pc}
    fad6:	a903      	add	r1, sp, #12
    fad8:	4630      	mov	r0, r6
    fada:	f7fa fe1d 	bl	a718 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fade:	e7f8      	b.n	fad2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fae0:	4630      	mov	r0, r6
    fae2:	f000 fd5c 	bl	1059e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x466>
    fae6:	e7f4      	b.n	fad2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fae8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fae8:	b530      	push	{r4, r5, lr}
    faea:	b08b      	sub	sp, #44	; 0x2c
    faec:	4604      	mov	r4, r0
    faee:	f7fa fdb3 	bl	a658 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x294>
    faf2:	4602      	mov	r2, r0
    faf4:	7920      	ldrb	r0, [r4, #4]
    faf6:	2804      	cmp	r0, #4
    faf8:	d803      	bhi.n	fb02 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fafa:	8860      	ldrh	r0, [r4, #2]
    fafc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fb00:	d902      	bls.n	fb08 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fb02:	2012      	movs	r0, #18
    fb04:	b00b      	add	sp, #44	; 0x2c
    fb06:	bd30      	pop	{r4, r5, pc}
    fb08:	2500      	movs	r5, #0
    fb0a:	f88d 5004 	strb.w	r5, [sp, #4]
    fb0e:	7921      	ldrb	r1, [r4, #4]
    fb10:	9500      	str	r5, [sp, #0]
    fb12:	f89d 0000 	ldrb.w	r0, [sp]
    fb16:	2905      	cmp	r1, #5
    fb18:	f040 0010 	orr.w	r0, r0, #16
    fb1c:	f88d 0000 	strb.w	r0, [sp]
    fb20:	d254      	bcs.n	fbcc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fb22:	e8df f001 	tbb	[pc, r1]
    fb26:	0803      	.short	0x0803
    fb28:	000b1105 	.word	0x000b1105
    fb2c:	f040 0001 	orr.w	r0, r0, #1
    fb30:	f040 0002 	orr.w	r0, r0, #2
    fb34:	e006      	b.n	fb44 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fb36:	f040 0009 	orr.w	r0, r0, #9
    fb3a:	e001      	b.n	fb40 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fb3c:	f040 0001 	orr.w	r0, r0, #1
    fb40:	f040 0004 	orr.w	r0, r0, #4
    fb44:	f88d 0000 	strb.w	r0, [sp]
    fb48:	f8bd 0000 	ldrh.w	r0, [sp]
    fb4c:	9000      	str	r0, [sp, #0]
    fb4e:	f8bd 0000 	ldrh.w	r0, [sp]
    fb52:	f8ad 0005 	strh.w	r0, [sp, #5]
    fb56:	8821      	ldrh	r1, [r4, #0]
    fb58:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fb5c:	f361 201f 	bfi	r0, r1, #8, #24
    fb60:	f8cd 0006 	str.w	r0, [sp, #6]
    fb64:	8861      	ldrh	r1, [r4, #2]
    fb66:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fb6a:	f361 201f 	bfi	r0, r1, #8, #24
    fb6e:	f8cd 0009 	str.w	r0, [sp, #9]
    fb72:	7b60      	ldrb	r0, [r4, #13]
    fb74:	f88d 000d 	strb.w	r0, [sp, #13]
    fb78:	7960      	ldrb	r0, [r4, #5]
    fb7a:	f88d 000e 	strb.w	r0, [sp, #14]
    fb7e:	79a0      	ldrb	r0, [r4, #6]
    fb80:	f88d 000f 	strb.w	r0, [sp, #15]
    fb84:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fb88:	9004      	str	r0, [sp, #16]
    fb8a:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fb8e:	f8ad 0014 	strh.w	r0, [sp, #20]
    fb92:	7ba0      	ldrb	r0, [r4, #14]
    fb94:	f88d 0016 	strb.w	r0, [sp, #22]
    fb98:	207f      	movs	r0, #127	; 0x7f
    fb9a:	f88d 0017 	strb.w	r0, [sp, #23]
    fb9e:	2001      	movs	r0, #1
    fba0:	f88d 0018 	strb.w	r0, [sp, #24]
    fba4:	f88d 5019 	strb.w	r5, [sp, #25]
    fba8:	f88d 001a 	strb.w	r0, [sp, #26]
    fbac:	f88d 501b 	strb.w	r5, [sp, #27]
    fbb0:	4610      	mov	r0, r2
    fbb2:	f7ff f94f 	bl	ee54 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fbb6:	f88d 001c 	strb.w	r0, [sp, #28]
    fbba:	f88d 501d 	strb.w	r5, [sp, #29]
    fbbe:	f88d 501e 	strb.w	r5, [sp, #30]
    fbc2:	a909      	add	r1, sp, #36	; 0x24
    fbc4:	a801      	add	r0, sp, #4
    fbc6:	f7fa fb3f 	bl	a248 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fbca:	e79b      	b.n	fb04 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fbcc:	f241 01cf 	movw	r1, #4303	; 0x10cf
    fbd0:	2039      	movs	r0, #57	; 0x39
    fbd2:	f7f4 fa7d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fbd6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fbd6:	b570      	push	{r4, r5, r6, lr}
    fbd8:	4604      	mov	r4, r0
    fbda:	7800      	ldrb	r0, [r0, #0]
    fbdc:	2102      	movs	r1, #2
    fbde:	f7fe fa1b 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fbe2:	0005      	movs	r5, r0
    fbe4:	d007      	beq.n	fbf6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fbe6:	f7ff fb33 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fbea:	b160      	cbz	r0, fc06 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fbec:	4628      	mov	r0, r5
    fbee:	f7ff f91b 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fbf2:	b110      	cbz	r0, fbfa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fbf4:	e005      	b.n	fc02 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fbf6:	2042      	movs	r0, #66	; 0x42
    fbf8:	bd70      	pop	{r4, r5, r6, pc}
    fbfa:	4628      	mov	r0, r5
    fbfc:	f7ff f902 	bl	ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc00:	b108      	cbz	r0, fc06 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc02:	200c      	movs	r0, #12
    fc04:	bd70      	pop	{r4, r5, r6, pc}
    fc06:	1c61      	adds	r1, r4, #1
    fc08:	4628      	mov	r0, r5
    fc0a:	f7ff f91a 	bl	ee42 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fc0e:	2000      	movs	r0, #0
    fc10:	bd70      	pop	{r4, r5, r6, pc}

0000fc12 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fc12:	b510      	push	{r4, lr}
    fc14:	4604      	mov	r4, r0
    fc16:	2001      	movs	r0, #1
    fc18:	f000 fadf 	bl	101da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa2>
    fc1c:	b128      	cbz	r0, fc2a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fc1e:	4621      	mov	r1, r4
    fc20:	2001      	movs	r0, #1
    fc22:	f7f5 f921 	bl	4e68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fc26:	2000      	movs	r0, #0
    fc28:	bd10      	pop	{r4, pc}
    fc2a:	200c      	movs	r0, #12
    fc2c:	bd10      	pop	{r4, pc}

0000fc2e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fc2e:	b51c      	push	{r2, r3, r4, lr}
    fc30:	7801      	ldrb	r1, [r0, #0]
    fc32:	f88d 1000 	strb.w	r1, [sp]
    fc36:	7840      	ldrb	r0, [r0, #1]
    fc38:	f88d 0001 	strb.w	r0, [sp, #1]
    fc3c:	2000      	movs	r0, #0
    fc3e:	f8ad 0002 	strh.w	r0, [sp, #2]
    fc42:	f8ad 0004 	strh.w	r0, [sp, #4]
    fc46:	4601      	mov	r1, r0
    fc48:	4668      	mov	r0, sp
    fc4a:	f000 fbe0 	bl	1040e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d6>
    fc4e:	2800      	cmp	r0, #0
    fc50:	d102      	bne.n	fc58 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fc52:	4668      	mov	r0, sp
    fc54:	f000 fbbb 	bl	103ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x296>
    fc58:	bd1c      	pop	{r2, r3, r4, pc}

0000fc5a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fc5a:	b500      	push	{lr}
    fc5c:	b087      	sub	sp, #28
    fc5e:	7941      	ldrb	r1, [r0, #5]
    fc60:	f88d 1000 	strb.w	r1, [sp]
    fc64:	7981      	ldrb	r1, [r0, #6]
    fc66:	f88d 1001 	strb.w	r1, [sp, #1]
    fc6a:	2101      	movs	r1, #1
    fc6c:	f88d 1002 	strb.w	r1, [sp, #2]
    fc70:	7801      	ldrb	r1, [r0, #0]
    fc72:	f88d 1003 	strb.w	r1, [sp, #3]
    fc76:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fc7a:	f240 2271 	movw	r2, #625	; 0x271
    fc7e:	4351      	muls	r1, r2
    fc80:	9102      	str	r1, [sp, #8]
    fc82:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fc86:	4350      	muls	r0, r2
    fc88:	9004      	str	r0, [sp, #16]
    fc8a:	2007      	movs	r0, #7
    fc8c:	f88d 0018 	strb.w	r0, [sp, #24]
    fc90:	2000      	movs	r0, #0
    fc92:	f88d 0019 	strb.w	r0, [sp, #25]
    fc96:	9804      	ldr	r0, [sp, #16]
    fc98:	f7fa fcd2 	bl	a640 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x27c>
    fc9c:	b140      	cbz	r0, fcb0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fc9e:	9802      	ldr	r0, [sp, #8]
    fca0:	f7fa fcc2 	bl	a628 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x264>
    fca4:	b120      	cbz	r0, fcb0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fca6:	4668      	mov	r0, sp
    fca8:	f000 f8dd 	bl	fe66 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fcac:	b007      	add	sp, #28
    fcae:	bd00      	pop	{pc}
    fcb0:	2030      	movs	r0, #48	; 0x30
    fcb2:	e7fb      	b.n	fcac <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fcb4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fcb4:	b51c      	push	{r2, r3, r4, lr}
    fcb6:	4604      	mov	r4, r0
    fcb8:	f7fa fcce 	bl	a658 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x294>
    fcbc:	2000      	movs	r0, #0
    fcbe:	f88d 0000 	strb.w	r0, [sp]
    fcc2:	f88d 0002 	strb.w	r0, [sp, #2]
    fcc6:	2003      	movs	r0, #3
    fcc8:	f88d 0001 	strb.w	r0, [sp, #1]
    fccc:	f814 0b01 	ldrb.w	r0, [r4], #1
    fcd0:	f88d 0003 	strb.w	r0, [sp, #3]
    fcd4:	4668      	mov	r0, sp
    fcd6:	9401      	str	r4, [sp, #4]
    fcd8:	f000 f923 	bl	ff22 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fcdc:	bd1c      	pop	{r2, r3, r4, pc}

0000fcde <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fcde:	b510      	push	{r4, lr}
    fce0:	f7f5 f8e8 	bl	4eb4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fce4:	2000      	movs	r0, #0
    fce6:	bd10      	pop	{r4, pc}

0000fce8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fce8:	b51c      	push	{r2, r3, r4, lr}
    fcea:	460c      	mov	r4, r1
    fcec:	4669      	mov	r1, sp
    fcee:	f7fe fc1d 	bl	e52c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fcf2:	2800      	cmp	r0, #0
    fcf4:	d108      	bne.n	fd08 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>
    fcf6:	f89d 0000 	ldrb.w	r0, [sp]
    fcfa:	b130      	cbz	r0, fd0a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x22>
    fcfc:	2100      	movs	r1, #0
    fcfe:	4622      	mov	r2, r4
    fd00:	9801      	ldr	r0, [sp, #4]
    fd02:	f000 fbce 	bl	104a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
    fd06:	2000      	movs	r0, #0
    fd08:	bd1c      	pop	{r2, r3, r4, pc}
    fd0a:	2101      	movs	r1, #1
    fd0c:	e7f7      	b.n	fcfe <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x16>

0000fd0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fd0e:	b510      	push	{r4, lr}
    fd10:	4604      	mov	r4, r0
    fd12:	2000      	movs	r0, #0
    fd14:	f000 fa61 	bl	101da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa2>
    fd18:	b128      	cbz	r0, fd26 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fd1a:	4621      	mov	r1, r4
    fd1c:	2000      	movs	r0, #0
    fd1e:	f7f5 f8a3 	bl	4e68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd22:	2000      	movs	r0, #0
    fd24:	bd10      	pop	{r4, pc}
    fd26:	200c      	movs	r0, #12
    fd28:	bd10      	pop	{r4, pc}

0000fd2a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fd2a:	b510      	push	{r4, lr}
    fd2c:	4604      	mov	r4, r0
    fd2e:	7800      	ldrb	r0, [r0, #0]
    fd30:	b100      	cbz	r0, fd34 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0xa>
    fd32:	2001      	movs	r0, #1
    fd34:	f7f9 fb3e 	bl	93b4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fd38:	7820      	ldrb	r0, [r4, #0]
    fd3a:	b100      	cbz	r0, fd3e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x14>
    fd3c:	2001      	movs	r0, #1
    fd3e:	f7f7 fe33 	bl	79a8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fd42:	2000      	movs	r0, #0
    fd44:	bd10      	pop	{r4, pc}

0000fd46 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fd46:	f000 bc50 	b.w	105ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b2>

0000fd4a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fd4a:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    fd4e:	4606      	mov	r6, r0
    fd50:	7847      	ldrb	r7, [r0, #1]
    fd52:	7800      	ldrb	r0, [r0, #0]
    fd54:	2102      	movs	r1, #2
    fd56:	f7fe f95f 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd5a:	0005      	movs	r5, r0
    fd5c:	d00b      	beq.n	fd76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    fd5e:	f7fa fdcd 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    fd62:	b158      	cbz	r0, fd7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x32>
    fd64:	4628      	mov	r0, r5
    fd66:	f7fe ff69 	bl	ec3c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fd6a:	4604      	mov	r4, r0
    fd6c:	78f0      	ldrb	r0, [r6, #3]
    fd6e:	42a0      	cmp	r0, r4
    fd70:	d805      	bhi.n	fd7e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
    fd72:	4604      	mov	r4, r0
    fd74:	e003      	b.n	fd7e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
    fd76:	2042      	movs	r0, #66	; 0x42
    fd78:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    fd7c:	78f4      	ldrb	r4, [r6, #3]
    fd7e:	2f04      	cmp	r7, #4
    fd80:	d031      	beq.n	fde6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x9c>
    fd82:	6c68      	ldr	r0, [r5, #68]	; 0x44
    fd84:	f7fe fab9 	bl	e2fa <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fd88:	4420      	add	r0, r4
    fd8a:	fa1f f880 	uxth.w	r8, r0
    fd8e:	f7fa fdb5 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    fd92:	b9a0      	cbnz	r0, fdbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
    fd94:	78f0      	ldrb	r0, [r6, #3]
    fd96:	f04f 0912 	mov.w	r9, #18
    fd9a:	b118      	cbz	r0, fda4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5a>
    fd9c:	4628      	mov	r0, r5
    fd9e:	f7ff f817 	bl	edd0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    fda2:	b140      	cbz	r0, fdb6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x6c>
    fda4:	4628      	mov	r0, r5
    fda6:	f7fe ff49 	bl	ec3c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fdaa:	4540      	cmp	r0, r8
    fdac:	d207      	bcs.n	fdbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
    fdae:	4628      	mov	r0, r5
    fdb0:	f7ff f836 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fdb4:	b108      	cbz	r0, fdba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fdb6:	4648      	mov	r0, r9
    fdb8:	e7de      	b.n	fd78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    fdba:	2007      	movs	r0, #7
    fdbc:	e7dc      	b.n	fd78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    fdbe:	f7fa fd9d 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    fdc2:	4602      	mov	r2, r0
    fdc4:	4641      	mov	r1, r8
    fdc6:	4628      	mov	r0, r5
    fdc8:	f000 fa26 	bl	10218 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    fdcc:	2800      	cmp	r0, #0
    fdce:	d1d3      	bne.n	fd78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    fdd0:	2f03      	cmp	r7, #3
    fdd2:	d000      	beq.n	fdd6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
    fdd4:	b1c4      	cbz	r4, fe08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fdd6:	4628      	mov	r0, r5
    fdd8:	f7ff f822 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fddc:	7871      	ldrb	r1, [r6, #1]
    fdde:	2903      	cmp	r1, #3
    fde0:	d00d      	beq.n	fdfe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
    fde2:	b988      	cbnz	r0, fe08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fde4:	e001      	b.n	fdea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xa0>
    fde6:	b97c      	cbnz	r4, fe08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fde8:	e7f5      	b.n	fdd6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
    fdea:	2904      	cmp	r1, #4
    fdec:	d107      	bne.n	fdfe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
    fdee:	4628      	mov	r0, r5
    fdf0:	f7ff fa2e 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fdf4:	b140      	cbz	r0, fe08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fdf6:	6c68      	ldr	r0, [r5, #68]	; 0x44
    fdf8:	f7fe fa4d 	bl	e296 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fdfc:	b120      	cbz	r0, fe08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fdfe:	2f01      	cmp	r7, #1
    fe00:	d004      	beq.n	fe0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
    fe02:	2f03      	cmp	r7, #3
    fe04:	d002      	beq.n	fe0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
    fe06:	e00e      	b.n	fe26 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xdc>
    fe08:	2012      	movs	r0, #18
    fe0a:	e7b5      	b.n	fd78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
    fe0c:	4628      	mov	r0, r5
    fe0e:	f7ff f807 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fe12:	b108      	cbz	r0, fe18 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fe14:	2200      	movs	r2, #0
    fe16:	e002      	b.n	fe1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
    fe18:	2f01      	cmp	r7, #1
    fe1a:	d014      	beq.n	fe46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xfc>
    fe1c:	2201      	movs	r2, #1
    fe1e:	4668      	mov	r0, sp
    fe20:	6c69      	ldr	r1, [r5, #68]	; 0x44
    fe22:	f7fe f9cd 	bl	e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fe26:	2f04      	cmp	r7, #4
    fe28:	d018      	beq.n	fe5c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x112>
    fe2a:	6872      	ldr	r2, [r6, #4]
    fe2c:	4623      	mov	r3, r4
    fe2e:	2101      	movs	r1, #1
    fe30:	6c68      	ldr	r0, [r5, #68]	; 0x44
    fe32:	f7fe f9fd 	bl	e230 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fe36:	2800      	cmp	r0, #0
    fe38:	d0bf      	beq.n	fdba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fe3a:	7870      	ldrb	r0, [r6, #1]
    fe3c:	2802      	cmp	r0, #2
    fe3e:	d004      	beq.n	fe4a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
    fe40:	2803      	cmp	r0, #3
    fe42:	d002      	beq.n	fe4a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
    fe44:	e00d      	b.n	fe62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
    fe46:	2202      	movs	r2, #2
    fe48:	e7e9      	b.n	fe1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
    fe4a:	6c68      	ldr	r0, [r5, #68]	; 0x44
    fe4c:	f7fe fa55 	bl	e2fa <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fe50:	4602      	mov	r2, r0
    fe52:	2101      	movs	r1, #1
    fe54:	6c68      	ldr	r0, [r5, #68]	; 0x44
    fe56:	f7fe fa2c 	bl	e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fe5a:	e002      	b.n	fe62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
    fe5c:	4628      	mov	r0, r5
    fe5e:	f7fe ff04 	bl	ec6a <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>
    fe62:	2000      	movs	r0, #0
    fe64:	e788      	b.n	fd78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>

0000fe66 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    fe66:	b510      	push	{r4, lr}
    fe68:	b08a      	sub	sp, #40	; 0x28
    fe6a:	4604      	mov	r4, r0
    fe6c:	f7fa fab4 	bl	a3d8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    fe70:	2800      	cmp	r0, #0
    fe72:	d103      	bne.n	fe7c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    fe74:	f000 fb88 	bl	10588 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
    fe78:	b110      	cbz	r0, fe80 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    fe7a:	200c      	movs	r0, #12
    fe7c:	b00a      	add	sp, #40	; 0x28
    fe7e:	bd10      	pop	{r4, pc}
    fe80:	2102      	movs	r1, #2
    fe82:	f104 0010 	add.w	r0, r4, #16
    fe86:	f7fa fc05 	bl	a694 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2d0>
    fe8a:	78a0      	ldrb	r0, [r4, #2]
    fe8c:	f88d 0000 	strb.w	r0, [sp]
    fe90:	78a0      	ldrb	r0, [r4, #2]
    fe92:	f88d 001c 	strb.w	r0, [sp, #28]
    fe96:	7860      	ldrb	r0, [r4, #1]
    fe98:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    fe9c:	7820      	ldrb	r0, [r4, #0]
    fe9e:	f88d 0020 	strb.w	r0, [sp, #32]
    fea2:	7e20      	ldrb	r0, [r4, #24]
    fea4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    fea8:	7e60      	ldrb	r0, [r4, #25]
    feaa:	b100      	cbz	r0, feae <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x48>
    feac:	2001      	movs	r0, #1
    feae:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    feb2:	78a0      	ldrb	r0, [r4, #2]
    feb4:	07c1      	lsls	r1, r0, #31
    feb6:	d014      	beq.n	fee2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x7c>
    feb8:	78e0      	ldrb	r0, [r4, #3]
    feba:	f000 fae9 	bl	10490 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x358>
    febe:	f88d 001d 	strb.w	r0, [sp, #29]
    fec2:	68a0      	ldr	r0, [r4, #8]
    fec4:	9001      	str	r0, [sp, #4]
    fec6:	6920      	ldr	r0, [r4, #16]
    fec8:	9002      	str	r0, [sp, #8]
    feca:	78a0      	ldrb	r0, [r4, #2]
    fecc:	0740      	lsls	r0, r0, #29
    fece:	d515      	bpl.n	fefc <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
    fed0:	7920      	ldrb	r0, [r4, #4]
    fed2:	f000 fadd 	bl	10490 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x358>
    fed6:	f88d 001f 	strb.w	r0, [sp, #31]
    feda:	68e0      	ldr	r0, [r4, #12]
    fedc:	9005      	str	r0, [sp, #20]
    fede:	6960      	ldr	r0, [r4, #20]
    fee0:	e00b      	b.n	fefa <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x94>
    fee2:	2802      	cmp	r0, #2
    fee4:	d013      	beq.n	ff0e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0xa8>
    fee6:	0740      	lsls	r0, r0, #29
    fee8:	d508      	bpl.n	fefc <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>
    feea:	78e0      	ldrb	r0, [r4, #3]
    feec:	f000 fad0 	bl	10490 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x358>
    fef0:	f88d 001f 	strb.w	r0, [sp, #31]
    fef4:	68a0      	ldr	r0, [r4, #8]
    fef6:	9005      	str	r0, [sp, #20]
    fef8:	6920      	ldr	r0, [r4, #16]
    fefa:	9006      	str	r0, [sp, #24]
    fefc:	4668      	mov	r0, sp
    fefe:	f7f9 fb5d 	bl	95bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    ff02:	2800      	cmp	r0, #0
    ff04:	d1ba      	bne.n	fe7c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ff06:	a807      	add	r0, sp, #28
    ff08:	f7f7 ff1c 	bl	7d44 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    ff0c:	e7b6      	b.n	fe7c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ff0e:	78e0      	ldrb	r0, [r4, #3]
    ff10:	f000 fabe 	bl	10490 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x358>
    ff14:	f88d 001e 	strb.w	r0, [sp, #30]
    ff18:	68a0      	ldr	r0, [r4, #8]
    ff1a:	9003      	str	r0, [sp, #12]
    ff1c:	6920      	ldr	r0, [r4, #16]
    ff1e:	9004      	str	r0, [sp, #16]
    ff20:	e7ec      	b.n	fefc <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x96>

0000ff22 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ff22:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff26:	4606      	mov	r6, r0
    ff28:	7845      	ldrb	r5, [r0, #1]
    ff2a:	78c7      	ldrb	r7, [r0, #3]
    ff2c:	7800      	ldrb	r0, [r0, #0]
    ff2e:	2102      	movs	r1, #2
    ff30:	f7fe f872 	bl	e018 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff34:	0004      	movs	r4, r0
    ff36:	d007      	beq.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ff38:	f7fa fce0 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ff3c:	b140      	cbz	r0, ff50 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    ff3e:	4620      	mov	r0, r4
    ff40:	f7fe ff72 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff44:	b118      	cbz	r0, ff4e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    ff46:	e003      	b.n	ff50 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    ff48:	2042      	movs	r0, #66	; 0x42
    ff4a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ff4e:	2700      	movs	r7, #0
    ff50:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ff52:	f7fe f9d6 	bl	e302 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ff56:	4438      	add	r0, r7
    ff58:	fa1f f880 	uxth.w	r8, r0
    ff5c:	f7fa fcce 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ff60:	b928      	cbnz	r0, ff6e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
    ff62:	78f0      	ldrb	r0, [r6, #3]
    ff64:	b118      	cbz	r0, ff6e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
    ff66:	4620      	mov	r0, r4
    ff68:	f7fe ff5e 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff6c:	b198      	cbz	r0, ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
    ff6e:	f7fa fcc5 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
    ff72:	4602      	mov	r2, r0
    ff74:	4641      	mov	r1, r8
    ff76:	4620      	mov	r0, r4
    ff78:	f000 f94e 	bl	10218 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    ff7c:	2800      	cmp	r0, #0
    ff7e:	d1e4      	bne.n	ff4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    ff80:	2d04      	cmp	r5, #4
    ff82:	d008      	beq.n	ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
    ff84:	2d03      	cmp	r5, #3
    ff86:	d00a      	beq.n	ff9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x7c>
    ff88:	b12f      	cbz	r7, ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
    ff8a:	4620      	mov	r0, r4
    ff8c:	f7ff f960 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff90:	b118      	cbz	r0, ff9a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x78>
    ff92:	200c      	movs	r0, #12
    ff94:	e7d9      	b.n	ff4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    ff96:	2012      	movs	r0, #18
    ff98:	e7d7      	b.n	ff4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    ff9a:	2d01      	cmp	r5, #1
    ff9c:	d10c      	bne.n	ffb8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ff9e:	4620      	mov	r0, r4
    ffa0:	f7fe ff3e 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ffa4:	b108      	cbz	r0, ffaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x88>
    ffa6:	2204      	movs	r2, #4
    ffa8:	e002      	b.n	ffb0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ffaa:	2d01      	cmp	r5, #1
    ffac:	d010      	beq.n	ffd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xae>
    ffae:	2205      	movs	r2, #5
    ffb0:	4668      	mov	r0, sp
    ffb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ffb4:	f7fe f904 	bl	e1c0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ffb8:	6872      	ldr	r2, [r6, #4]
    ffba:	463b      	mov	r3, r7
    ffbc:	2100      	movs	r1, #0
    ffbe:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ffc0:	f7fe f936 	bl	e230 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ffc4:	b130      	cbz	r0, ffd4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb2>
    ffc6:	2d02      	cmp	r5, #2
    ffc8:	d006      	beq.n	ffd8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
    ffca:	2d03      	cmp	r5, #3
    ffcc:	d004      	beq.n	ffd8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
    ffce:	e008      	b.n	ffe2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xc0>
    ffd0:	2206      	movs	r2, #6
    ffd2:	e7ed      	b.n	ffb0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ffd4:	2007      	movs	r0, #7
    ffd6:	e7b8      	b.n	ff4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    ffd8:	4642      	mov	r2, r8
    ffda:	2100      	movs	r1, #0
    ffdc:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ffde:	f7fe f968 	bl	e2b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ffe2:	2000      	movs	r0, #0
    ffe4:	e7b1      	b.n	ff4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>

0000ffe6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ffe6:	b510      	push	{r4, lr}
    ffe8:	4604      	mov	r4, r0
    ffea:	4601      	mov	r1, r0
    ffec:	2000      	movs	r0, #0
    ffee:	f7f4 ff23 	bl	4e38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fff2:	b910      	cbnz	r0, fffa <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fff4:	2000      	movs	r0, #0
    fff6:	6020      	str	r0, [r4, #0]
    fff8:	80a0      	strh	r0, [r4, #4]
    fffa:	2000      	movs	r0, #0
    fffc:	bd10      	pop	{r4, pc}

0000fffe <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fffe:	b510      	push	{r4, lr}
   10000:	f7fa fc88 	bl	a914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10004:	2000      	movs	r0, #0
   10006:	bd10      	pop	{r4, pc}

00010008 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10008:	f000 b896 	b.w	10138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001000c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1000c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10010:	b08a      	sub	sp, #40	; 0x28
   10012:	4689      	mov	r9, r1
   10014:	4605      	mov	r5, r0
   10016:	8800      	ldrh	r0, [r0, #0]
   10018:	a904      	add	r1, sp, #16
   1001a:	f7fe fa87 	bl	e52c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1001e:	2800      	cmp	r0, #0
   10020:	d147      	bne.n	100b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   10022:	9805      	ldr	r0, [sp, #20]
   10024:	4601      	mov	r1, r0
   10026:	4688      	mov	r8, r1
   10028:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
   1002c:	f500 749c 	add.w	r4, r0, #312	; 0x138
   10030:	f88d 1018 	strb.w	r1, [sp, #24]
   10034:	9906      	ldr	r1, [sp, #24]
   10036:	9106      	str	r1, [sp, #24]
   10038:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1003c:	3090      	adds	r0, #144	; 0x90
   1003e:	b109      	cbz	r1, 10044 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10040:	2701      	movs	r7, #1
   10042:	e000      	b.n	10046 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10044:	2700      	movs	r7, #0
   10046:	7b81      	ldrb	r1, [r0, #14]
   10048:	2922      	cmp	r1, #34	; 0x22
   1004a:	d100      	bne.n	1004e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   1004c:	b13f      	cbz	r7, 1005e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   1004e:	2600      	movs	r6, #0
   10050:	3062      	adds	r0, #98	; 0x62
   10052:	2108      	movs	r1, #8
   10054:	4682      	mov	sl, r0
   10056:	f7ff fc1d 	bl	f894 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x5a>
   1005a:	b110      	cbz	r0, 10062 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   1005c:	e007      	b.n	1006e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1005e:	2601      	movs	r6, #1
   10060:	e7f6      	b.n	10050 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10062:	210b      	movs	r1, #11
   10064:	4650      	mov	r0, sl
   10066:	f7ff fc15 	bl	f894 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x5a>
   1006a:	b900      	cbnz	r0, 1006e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1006c:	b306      	cbz	r6, 100b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa4>
   1006e:	a802      	add	r0, sp, #8
   10070:	9000      	str	r0, [sp, #0]
   10072:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10076:	ab01      	add	r3, sp, #4
   10078:	462a      	mov	r2, r5
   1007a:	4641      	mov	r1, r8
   1007c:	f000 fa4b 	bl	10516 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3de>
   10080:	0006      	movs	r6, r0
   10082:	d116      	bne.n	100b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   10084:	f898 0077 	ldrb.w	r0, [r8, #119]	; 0x77
   10088:	340c      	adds	r4, #12
   1008a:	b168      	cbz	r0, 100a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   1008c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10090:	f010 0102 	ands.w	r1, r0, #2
   10094:	f89d 0008 	ldrb.w	r0, [sp, #8]
   10098:	f88d 1004 	strb.w	r1, [sp, #4]
   1009c:	f000 0002 	and.w	r0, r0, #2
   100a0:	f88d 0008 	strb.w	r0, [sp, #8]
   100a4:	d008      	beq.n	100b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   100a6:	b138      	cbz	r0, 100b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   100a8:	20ff      	movs	r0, #255	; 0xff
   100aa:	7060      	strb	r0, [r4, #1]
   100ac:	b947      	cbnz	r7, 100c0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb4>
   100ae:	e005      	b.n	100bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb0>
   100b0:	201a      	movs	r0, #26
   100b2:	b00a      	add	sp, #40	; 0x28
   100b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   100b8:	2009      	movs	r0, #9
   100ba:	e7fa      	b.n	100b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   100bc:	7820      	ldrb	r0, [r4, #0]
   100be:	b108      	cbz	r0, 100c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   100c0:	263a      	movs	r6, #58	; 0x3a
   100c2:	e014      	b.n	100ee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe2>
   100c4:	f884 9000 	strb.w	r9, [r4]
   100c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   100cc:	70a1      	strb	r1, [r4, #2]
   100ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
   100d2:	70e0      	strb	r0, [r4, #3]
   100d4:	88aa      	ldrh	r2, [r5, #4]
   100d6:	80a2      	strh	r2, [r4, #4]
   100d8:	f88d 1018 	strb.w	r1, [sp, #24]
   100dc:	f88d 0019 	strb.w	r0, [sp, #25]
   100e0:	88a8      	ldrh	r0, [r5, #4]
   100e2:	f8ad 001a 	strh.w	r0, [sp, #26]
   100e6:	a906      	add	r1, sp, #24
   100e8:	4640      	mov	r0, r8
   100ea:	f7fe fa80 	bl	e5ee <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   100ee:	2000      	movs	r0, #0
   100f0:	7060      	strb	r0, [r4, #1]
   100f2:	4630      	mov	r0, r6
   100f4:	e7dd      	b.n	100b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>

000100f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   100f6:	b510      	push	{r4, lr}
   100f8:	4604      	mov	r4, r0
   100fa:	2000      	movs	r0, #0
   100fc:	8822      	ldrh	r2, [r4, #0]
   100fe:	b086      	sub	sp, #24
   10100:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   10104:	39ff      	subs	r1, #255	; 0xff
   10106:	d008      	beq.n	1011a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   10108:	a903      	add	r1, sp, #12
   1010a:	4610      	mov	r0, r2
   1010c:	f7fe fa0e 	bl	e52c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10110:	b110      	cbz	r0, 10118 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   10112:	2002      	movs	r0, #2
   10114:	b006      	add	sp, #24
   10116:	bd10      	pop	{r4, pc}
   10118:	9804      	ldr	r0, [sp, #16]
   1011a:	8921      	ldrh	r1, [r4, #8]
   1011c:	89a3      	ldrh	r3, [r4, #12]
   1011e:	8962      	ldrh	r2, [r4, #10]
   10120:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10124:	88e3      	ldrh	r3, [r4, #6]
   10126:	88a2      	ldrh	r2, [r4, #4]
   10128:	8861      	ldrh	r1, [r4, #2]
   1012a:	f7fa f9cf 	bl	a4cc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x108>
   1012e:	b108      	cbz	r0, 10134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   10130:	2000      	movs	r0, #0
   10132:	e7ef      	b.n	10114 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10134:	2030      	movs	r0, #48	; 0x30
   10136:	e7ed      	b.n	10114 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00010138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10138:	b510      	push	{r4, lr}
   1013a:	f7fe f976 	bl	e42a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   1013e:	f7f4 ff75 	bl	502c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10142:	f7fa fc59 	bl	a9f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10146:	f7f5 fe99 	bl	5e7c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   1014a:	2001      	movs	r0, #1
   1014c:	f7fa fbdc 	bl	a908 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   10150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10154:	f7fa ba00 	b.w	a558 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x194>
   10158:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1015c:	4288      	cmp	r0, r1
   1015e:	d303      	bcc.n	10168 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10160:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   10164:	4288      	cmp	r0, r1
   10166:	d300      	bcc.n	1016a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
   10168:	4608      	mov	r0, r1
   1016a:	b280      	uxth	r0, r0
   1016c:	4770      	bx	lr
   1016e:	0741      	lsls	r1, r0, #29
   10170:	d501      	bpl.n	10176 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e>
   10172:	2008      	movs	r0, #8
   10174:	4770      	bx	lr
   10176:	07c1      	lsls	r1, r0, #31
   10178:	d001      	beq.n	1017e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46>
   1017a:	2001      	movs	r0, #1
   1017c:	4770      	bx	lr
   1017e:	0780      	lsls	r0, r0, #30
   10180:	d501      	bpl.n	10186 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4e>
   10182:	2002      	movs	r0, #2
   10184:	4770      	bx	lr
   10186:	2000      	movs	r0, #0
   10188:	4770      	bx	lr
   1018a:	b510      	push	{r4, lr}
   1018c:	2801      	cmp	r0, #1
   1018e:	d00b      	beq.n	101a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x70>
   10190:	2802      	cmp	r0, #2
   10192:	d009      	beq.n	101a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x70>
   10194:	2804      	cmp	r0, #4
   10196:	d006      	beq.n	101a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   10198:	2808      	cmp	r0, #8
   1019a:	d004      	beq.n	101a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   1019c:	f240 21a9 	movw	r1, #681	; 0x2a9
   101a0:	2006      	movs	r0, #6
   101a2:	f7f3 ff95 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101a6:	2003      	movs	r0, #3
   101a8:	bd10      	pop	{r4, pc}
   101aa:	b50e      	push	{r1, r2, r3, lr}
   101ac:	4669      	mov	r1, sp
   101ae:	2002      	movs	r0, #2
   101b0:	f7fd ff3c 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   101b4:	b150      	cbz	r0, 101cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
   101b6:	f44f 71a3 	mov.w	r1, #326	; 0x146
   101ba:	2039      	movs	r0, #57	; 0x39
   101bc:	f7f3 ff88 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101c0:	9802      	ldr	r0, [sp, #8]
   101c2:	f7ff f845 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   101c6:	b108      	cbz	r0, 101cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
   101c8:	2001      	movs	r0, #1
   101ca:	bd0e      	pop	{r1, r2, r3, pc}
   101cc:	4668      	mov	r0, sp
   101ce:	f7f4 f9bd 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   101d2:	2800      	cmp	r0, #0
   101d4:	d0f4      	beq.n	101c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
   101d6:	2000      	movs	r0, #0
   101d8:	bd0e      	pop	{r1, r2, r3, pc}
   101da:	b510      	push	{r4, lr}
   101dc:	4604      	mov	r4, r0
   101de:	f7ff ffe4 	bl	101aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   101e2:	b170      	cbz	r0, 10202 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xca>
   101e4:	f7fa fb8a 	bl	a8fc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   101e8:	b150      	cbz	r0, 10200 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
   101ea:	f7fa fa35 	bl	a658 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x294>
   101ee:	4604      	mov	r4, r0
   101f0:	f7fe fe1a 	bl	ee28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   101f4:	b960      	cbnz	r0, 10210 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd8>
   101f6:	4620      	mov	r0, r4
   101f8:	f7fe fe04 	bl	ee04 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   101fc:	b108      	cbz	r0, 10202 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xca>
   101fe:	e007      	b.n	10210 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd8>
   10200:	b134      	cbz	r4, 10210 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd8>
   10202:	f000 f9c1 	bl	10588 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
   10206:	b128      	cbz	r0, 10214 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
   10208:	f7f7 fe30 	bl	7e6c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   1020c:	2801      	cmp	r0, #1
   1020e:	d001      	beq.n	10214 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
   10210:	2000      	movs	r0, #0
   10212:	bd10      	pop	{r4, pc}
   10214:	2001      	movs	r0, #1
   10216:	bd10      	pop	{r4, pc}
   10218:	b570      	push	{r4, r5, r6, lr}
   1021a:	460c      	mov	r4, r1
   1021c:	4605      	mov	r5, r0
   1021e:	b112      	cbz	r2, 10226 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
   10220:	291f      	cmp	r1, #31
   10222:	d80c      	bhi.n	1023e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
   10224:	e016      	b.n	10254 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
   10226:	f7f4 fc87 	bl	4b38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1022a:	42a0      	cmp	r0, r4
   1022c:	d201      	bcs.n	10232 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
   1022e:	2007      	movs	r0, #7
   10230:	bd70      	pop	{r4, r5, r6, pc}
   10232:	4628      	mov	r0, r5
   10234:	f7fe fdf4 	bl	ee20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10238:	b118      	cbz	r0, 10242 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
   1023a:	2c1f      	cmp	r4, #31
   1023c:	d901      	bls.n	10242 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
   1023e:	2012      	movs	r0, #18
   10240:	bd70      	pop	{r4, r5, r6, pc}
   10242:	4628      	mov	r0, r5
   10244:	f7fe fdf7 	bl	ee36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10248:	b130      	cbz	r0, 10258 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
   1024a:	4621      	mov	r1, r4
   1024c:	4628      	mov	r0, r5
   1024e:	f7fe fd7c 	bl	ed4a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10252:	b118      	cbz	r0, 1025c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
   10254:	2000      	movs	r0, #0
   10256:	bd70      	pop	{r4, r5, r6, pc}
   10258:	2042      	movs	r0, #66	; 0x42
   1025a:	bd70      	pop	{r4, r5, r6, pc}
   1025c:	2045      	movs	r0, #69	; 0x45
   1025e:	bd70      	pop	{r4, r5, r6, pc}
   10260:	b510      	push	{r4, lr}
   10262:	4604      	mov	r4, r0
   10264:	7840      	ldrb	r0, [r0, #1]
   10266:	06c0      	lsls	r0, r0, #27
   10268:	d413      	bmi.n	10292 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15a>
   1026a:	f7fa fbaf 	bl	a9cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1026e:	0780      	lsls	r0, r0, #30
   10270:	d405      	bmi.n	1027e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
   10272:	7d20      	ldrb	r0, [r4, #20]
   10274:	2802      	cmp	r0, #2
   10276:	d029      	beq.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   10278:	7da0      	ldrb	r0, [r4, #22]
   1027a:	2802      	cmp	r0, #2
   1027c:	d026      	beq.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   1027e:	f7fa fba5 	bl	a9cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10282:	0740      	lsls	r0, r0, #29
   10284:	d405      	bmi.n	10292 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15a>
   10286:	7d20      	ldrb	r0, [r4, #20]
   10288:	2803      	cmp	r0, #3
   1028a:	d01f      	beq.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   1028c:	7da0      	ldrb	r0, [r4, #22]
   1028e:	2803      	cmp	r0, #3
   10290:	d01c      	beq.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   10292:	7860      	ldrb	r0, [r4, #1]
   10294:	07c0      	lsls	r0, r0, #31
   10296:	d002      	beq.n	1029e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
   10298:	f7fa fb6e 	bl	a978 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1029c:	b1b0      	cbz	r0, 102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   1029e:	7860      	ldrb	r0, [r4, #1]
   102a0:	06c1      	lsls	r1, r0, #27
   102a2:	d405      	bmi.n	102b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
   102a4:	0701      	lsls	r1, r0, #28
   102a6:	d503      	bpl.n	102b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
   102a8:	7d20      	ldrb	r0, [r4, #20]
   102aa:	2802      	cmp	r0, #2
   102ac:	d10e      	bne.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   102ae:	e00f      	b.n	102d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x198>
   102b0:	7d21      	ldrb	r1, [r4, #20]
   102b2:	2902      	cmp	r1, #2
   102b4:	d001      	beq.n	102ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x182>
   102b6:	7ea1      	ldrb	r1, [r4, #26]
   102b8:	b941      	cbnz	r1, 102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x194>
   102ba:	0700      	lsls	r0, r0, #28
   102bc:	d408      	bmi.n	102d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x198>
   102be:	f8d4 0005 	ldr.w	r0, [r4, #5]
   102c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   102c6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   102ca:	d201      	bcs.n	102d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x198>
   102cc:	2011      	movs	r0, #17
   102ce:	bd10      	pop	{r4, pc}
   102d0:	2000      	movs	r0, #0
   102d2:	bd10      	pop	{r4, pc}
   102d4:	b538      	push	{r3, r4, r5, lr}
   102d6:	4604      	mov	r4, r0
   102d8:	7800      	ldrb	r0, [r0, #0]
   102da:	28ef      	cmp	r0, #239	; 0xef
   102dc:	d85c      	bhi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   102de:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   102e2:	f8ad 0000 	strh.w	r0, [sp]
   102e6:	9800      	ldr	r0, [sp, #0]
   102e8:	f000 fa14 	bl	10714 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5dc>
   102ec:	b3a0      	cbz	r0, 10358 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   102ee:	7860      	ldrb	r0, [r4, #1]
   102f0:	0701      	lsls	r1, r0, #28
   102f2:	d40b      	bmi.n	1030c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d4>
   102f4:	f8d4 1002 	ldr.w	r1, [r4, #2]
   102f8:	f8d4 3005 	ldr.w	r3, [r4, #5]
   102fc:	0a0a      	lsrs	r2, r1, #8
   102fe:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10302:	d849      	bhi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10304:	2220      	movs	r2, #32
   10306:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   1030a:	d845      	bhi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   1030c:	7a61      	ldrb	r1, [r4, #9]
   1030e:	b319      	cbz	r1, 10358 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10310:	2907      	cmp	r1, #7
   10312:	d841      	bhi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10314:	7aa1      	ldrb	r1, [r4, #10]
   10316:	b129      	cbz	r1, 10324 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ec>
   10318:	2901      	cmp	r1, #1
   1031a:	d003      	beq.n	10324 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ec>
   1031c:	2902      	cmp	r1, #2
   1031e:	d001      	beq.n	10324 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ec>
   10320:	2903      	cmp	r1, #3
   10322:	d139      	bne.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10324:	0742      	lsls	r2, r0, #29
   10326:	d403      	bmi.n	10330 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f8>
   10328:	2902      	cmp	r1, #2
   1032a:	d001      	beq.n	10330 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f8>
   1032c:	2903      	cmp	r1, #3
   1032e:	d105      	bne.n	1033c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
   10330:	7ae1      	ldrb	r1, [r4, #11]
   10332:	b109      	cbz	r1, 10338 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
   10334:	2901      	cmp	r1, #1
   10336:	d12f      	bne.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10338:	0741      	lsls	r1, r0, #29
   1033a:	d407      	bmi.n	1034c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
   1033c:	7ca1      	ldrb	r1, [r4, #18]
   1033e:	b129      	cbz	r1, 1034c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
   10340:	2901      	cmp	r1, #1
   10342:	d003      	beq.n	1034c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
   10344:	2902      	cmp	r1, #2
   10346:	d001      	beq.n	1034c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
   10348:	2903      	cmp	r1, #3
   1034a:	d125      	bne.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   1034c:	06c1      	lsls	r1, r0, #27
   1034e:	d504      	bpl.n	1035a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x222>
   10350:	7d20      	ldrb	r0, [r4, #20]
   10352:	2801      	cmp	r0, #1
   10354:	d120      	bne.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10356:	e01b      	b.n	10390 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x258>
   10358:	e01e      	b.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   1035a:	7d21      	ldrb	r1, [r4, #20]
   1035c:	2902      	cmp	r1, #2
   1035e:	d10b      	bne.n	10378 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
   10360:	07c1      	lsls	r1, r0, #31
   10362:	d019      	beq.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10364:	0741      	lsls	r1, r0, #29
   10366:	d417      	bmi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10368:	0701      	lsls	r1, r0, #28
   1036a:	d515      	bpl.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   1036c:	0641      	lsls	r1, r0, #25
   1036e:	d413      	bmi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10370:	0681      	lsls	r1, r0, #26
   10372:	d411      	bmi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10374:	0781      	lsls	r1, r0, #30
   10376:	d40f      	bmi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10378:	06c0      	lsls	r0, r0, #27
   1037a:	d409      	bmi.n	10390 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x258>
   1037c:	7da0      	ldrb	r0, [r4, #22]
   1037e:	2801      	cmp	r0, #1
   10380:	d003      	beq.n	1038a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x252>
   10382:	2802      	cmp	r0, #2
   10384:	d001      	beq.n	1038a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x252>
   10386:	2803      	cmp	r0, #3
   10388:	d106      	bne.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   1038a:	7de0      	ldrb	r0, [r4, #23]
   1038c:	280f      	cmp	r0, #15
   1038e:	d803      	bhi.n	10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   10390:	7e20      	ldrb	r0, [r4, #24]
   10392:	b118      	cbz	r0, 1039c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
   10394:	2801      	cmp	r0, #1
   10396:	d001      	beq.n	1039c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
   10398:	2012      	movs	r0, #18
   1039a:	bd38      	pop	{r3, r4, r5, pc}
   1039c:	2000      	movs	r0, #0
   1039e:	bd38      	pop	{r3, r4, r5, pc}
   103a0:	28fb      	cmp	r0, #251	; 0xfb
   103a2:	d802      	bhi.n	103aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
   103a4:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   103a8:	d901      	bls.n	103ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x276>
   103aa:	2011      	movs	r0, #17
   103ac:	4770      	bx	lr
   103ae:	2000      	movs	r0, #0
   103b0:	4770      	bx	lr
   103b2:	381b      	subs	r0, #27
   103b4:	28e1      	cmp	r0, #225	; 0xe1
   103b6:	d206      	bcs.n	103c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28e>
   103b8:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   103bc:	d303      	bcc.n	103c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28e>
   103be:	f244 2090 	movw	r0, #17040	; 0x4290
   103c2:	4281      	cmp	r1, r0
   103c4:	d901      	bls.n	103ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
   103c6:	2012      	movs	r0, #18
   103c8:	4770      	bx	lr
   103ca:	2000      	movs	r0, #0
   103cc:	4770      	bx	lr
   103ce:	b510      	push	{r4, lr}
   103d0:	4604      	mov	r4, r0
   103d2:	7800      	ldrb	r0, [r0, #0]
   103d4:	2801      	cmp	r0, #1
   103d6:	d009      	beq.n	103ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b4>
   103d8:	f7f9 f8ea 	bl	95b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   103dc:	2805      	cmp	r0, #5
   103de:	d003      	beq.n	103e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b0>
   103e0:	f7f9 f860 	bl	94a4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   103e4:	2800      	cmp	r0, #0
   103e6:	d000      	beq.n	103ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   103e8:	200c      	movs	r0, #12
   103ea:	bd10      	pop	{r4, pc}
   103ec:	f7f7 fc9c 	bl	7d28 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   103f0:	b158      	cbz	r0, 1040a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d2>
   103f2:	f7f7 fb1f 	bl	7a34 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   103f6:	f7f7 fb95 	bl	7b24 <sym_E357R5GSET4BZKCOLPRJE7KKKMWMTNVTPX35LJQ>
   103fa:	2800      	cmp	r0, #0
   103fc:	d1f5      	bne.n	103ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   103fe:	88a1      	ldrh	r1, [r4, #4]
   10400:	8860      	ldrh	r0, [r4, #2]
   10402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10406:	f7f8 bff5 	b.w	93f4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   1040a:	2012      	movs	r0, #18
   1040c:	bd10      	pop	{r4, pc}
   1040e:	7802      	ldrb	r2, [r0, #0]
   10410:	2a01      	cmp	r2, #1
   10412:	d001      	beq.n	10418 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
   10414:	b1ba      	cbz	r2, 10446 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30e>
   10416:	e018      	b.n	1044a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x312>
   10418:	7842      	ldrb	r2, [r0, #1]
   1041a:	b13a      	cbz	r2, 1042c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f4>
   1041c:	2a01      	cmp	r2, #1
   1041e:	d005      	beq.n	1042c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f4>
   10420:	2a02      	cmp	r2, #2
   10422:	d112      	bne.n	1044a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x312>
   10424:	b189      	cbz	r1, 1044a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x312>
   10426:	8881      	ldrh	r1, [r0, #4]
   10428:	b179      	cbz	r1, 1044a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x312>
   1042a:	e000      	b.n	1042e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f6>
   1042c:	b159      	cbz	r1, 10446 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30e>
   1042e:	8841      	ldrh	r1, [r0, #2]
   10430:	b149      	cbz	r1, 10446 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30e>
   10432:	8880      	ldrh	r0, [r0, #4]
   10434:	b138      	cbz	r0, 10446 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30e>
   10436:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1043a:	0049      	lsls	r1, r1, #1
   1043c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10440:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   10444:	d201      	bcs.n	1044a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x312>
   10446:	2000      	movs	r0, #0
   10448:	4770      	bx	lr
   1044a:	2012      	movs	r0, #18
   1044c:	4770      	bx	lr
   1044e:	b570      	push	{r4, r5, r6, lr}
   10450:	4614      	mov	r4, r2
   10452:	460d      	mov	r5, r1
   10454:	b108      	cbz	r0, 1045a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x322>
   10456:	2801      	cmp	r0, #1
   10458:	d10c      	bne.n	10474 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33c>
   1045a:	2b02      	cmp	r3, #2
   1045c:	d00c      	beq.n	10478 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x340>
   1045e:	4619      	mov	r1, r3
   10460:	4610      	mov	r0, r2
   10462:	f7fa f943 	bl	a6ec <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x328>
   10466:	b178      	cbz	r0, 10488 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x350>
   10468:	4628      	mov	r0, r5
   1046a:	f7fa f8d1 	bl	a610 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x24c>
   1046e:	b158      	cbz	r0, 10488 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x350>
   10470:	42ac      	cmp	r4, r5
   10472:	d90b      	bls.n	1048c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x354>
   10474:	2012      	movs	r0, #18
   10476:	bd70      	pop	{r4, r5, r6, pc}
   10478:	4610      	mov	r0, r2
   1047a:	f7fa f92b 	bl	a6d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x310>
   1047e:	b118      	cbz	r0, 10488 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x350>
   10480:	4628      	mov	r0, r5
   10482:	f7fa f91b 	bl	a6bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2f8>
   10486:	e7f2      	b.n	1046e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
   10488:	2030      	movs	r0, #48	; 0x30
   1048a:	bd70      	pop	{r4, r5, r6, pc}
   1048c:	2000      	movs	r0, #0
   1048e:	bd70      	pop	{r4, r5, r6, pc}
   10490:	2801      	cmp	r0, #1
   10492:	d002      	beq.n	1049a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
   10494:	b118      	cbz	r0, 1049e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x366>
   10496:	2000      	movs	r0, #0
   10498:	4770      	bx	lr
   1049a:	2002      	movs	r0, #2
   1049c:	4770      	bx	lr
   1049e:	2001      	movs	r0, #1
   104a0:	4770      	bx	lr
   104a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104a6:	4605      	mov	r5, r0
   104a8:	f8b0 705a 	ldrh.w	r7, [r0, #90]	; 0x5a
   104ac:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
   104b0:	4616      	mov	r6, r2
   104b2:	3034      	adds	r0, #52	; 0x34
   104b4:	b111      	cbz	r1, 104bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x384>
   104b6:	f7f8 ff83 	bl	93c0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   104ba:	e001      	b.n	104c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x388>
   104bc:	f7f7 fa7a 	bl	79b4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   104c0:	4680      	mov	r8, r0
   104c2:	2102      	movs	r1, #2
   104c4:	f7fe f867 	bl	e596 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104c8:	4287      	cmp	r7, r0
   104ca:	d200      	bcs.n	104ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x396>
   104cc:	4638      	mov	r0, r7
   104ce:	4607      	mov	r7, r0
   104d0:	2102      	movs	r1, #2
   104d2:	4640      	mov	r0, r8
   104d4:	f7fe f85f 	bl	e596 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104d8:	4284      	cmp	r4, r0
   104da:	d200      	bcs.n	104de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
   104dc:	4620      	mov	r0, r4
   104de:	8829      	ldrh	r1, [r5, #0]
   104e0:	8031      	strh	r1, [r6, #0]
   104e2:	2f1b      	cmp	r7, #27
   104e4:	d913      	bls.n	1050e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3d6>
   104e6:	2ffb      	cmp	r7, #251	; 0xfb
   104e8:	d300      	bcc.n	104ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b4>
   104ea:	27fb      	movs	r7, #251	; 0xfb
   104ec:	8077      	strh	r7, [r6, #2]
   104ee:	281b      	cmp	r0, #27
   104f0:	d90f      	bls.n	10512 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3da>
   104f2:	28fb      	cmp	r0, #251	; 0xfb
   104f4:	d300      	bcc.n	104f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c0>
   104f6:	20fb      	movs	r0, #251	; 0xfb
   104f8:	80f0      	strh	r0, [r6, #6]
   104fa:	4640      	mov	r0, r8
   104fc:	f7ff fe2c 	bl	10158 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20>
   10500:	80b0      	strh	r0, [r6, #4]
   10502:	4640      	mov	r0, r8
   10504:	f7ff fe28 	bl	10158 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20>
   10508:	8130      	strh	r0, [r6, #8]
   1050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1050e:	271b      	movs	r7, #27
   10510:	e7ec      	b.n	104ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b4>
   10512:	201b      	movs	r0, #27
   10514:	e7f0      	b.n	104f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c0>
   10516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1051a:	7890      	ldrb	r0, [r2, #2]
   1051c:	9e06      	ldr	r6, [sp, #24]
   1051e:	461d      	mov	r5, r3
   10520:	4614      	mov	r4, r2
   10522:	b908      	cbnz	r0, 10528 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
   10524:	f7fa fa52 	bl	a9cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10528:	78e4      	ldrb	r4, [r4, #3]
   1052a:	4607      	mov	r7, r0
   1052c:	b914      	cbnz	r4, 10534 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3fc>
   1052e:	f7fa fa4d 	bl	a9cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10532:	4604      	mov	r4, r0
   10534:	b16f      	cbz	r7, 10552 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41a>
   10536:	b164      	cbz	r4, 10552 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41a>
   10538:	4638      	mov	r0, r7
   1053a:	f7ff fe18 	bl	1016e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
   1053e:	4620      	mov	r0, r4
   10540:	f7ff fe15 	bl	1016e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
   10544:	b12f      	cbz	r7, 10552 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41a>
   10546:	b124      	cbz	r4, 10552 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41a>
   10548:	702f      	strb	r7, [r5, #0]
   1054a:	7034      	strb	r4, [r6, #0]
   1054c:	2000      	movs	r0, #0
   1054e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10552:	2009      	movs	r0, #9
   10554:	e7fb      	b.n	1054e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x416>
   10556:	207f      	movs	r0, #127	; 0x7f
   10558:	f000 b8d5 	b.w	10706 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5ce>
   1055c:	b508      	push	{r3, lr}
   1055e:	f890 1290 	ldrb.w	r1, [r0, #656]	; 0x290
   10562:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   10566:	f88d 0000 	strb.w	r0, [sp]
   1056a:	9800      	ldr	r0, [sp, #0]
   1056c:	9000      	str	r0, [sp, #0]
   1056e:	f89d 0000 	ldrb.w	r0, [sp]
   10572:	b100      	cbz	r0, 10576 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x43e>
   10574:	2001      	movs	r0, #1
   10576:	1e40      	subs	r0, r0, #1
   10578:	4208      	tst	r0, r1
   1057a:	d003      	beq.n	10584 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44c>
   1057c:	2904      	cmp	r1, #4
   1057e:	d001      	beq.n	10584 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44c>
   10580:	2001      	movs	r0, #1
   10582:	bd08      	pop	{r3, pc}
   10584:	2000      	movs	r0, #0
   10586:	bd08      	pop	{r3, pc}
   10588:	b510      	push	{r4, lr}
   1058a:	f7f9 f811 	bl	95b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1058e:	2804      	cmp	r0, #4
   10590:	d003      	beq.n	1059a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   10592:	2805      	cmp	r0, #5
   10594:	d001      	beq.n	1059a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   10596:	2000      	movs	r0, #0
   10598:	bd10      	pop	{r4, pc}
   1059a:	2001      	movs	r0, #1
   1059c:	bd10      	pop	{r4, pc}
   1059e:	b570      	push	{r4, r5, r6, lr}
   105a0:	4605      	mov	r5, r0
   105a2:	f7fe fc48 	bl	ee36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   105a6:	b170      	cbz	r0, 105c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   105a8:	4628      	mov	r0, r5
   105aa:	f7fe fe51 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   105ae:	2800      	cmp	r0, #0
   105b0:	d008      	beq.n	105c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48c>
   105b2:	4628      	mov	r0, r5
   105b4:	f7fe fe49 	bl	f24a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   105b8:	4604      	mov	r4, r0
   105ba:	4628      	mov	r0, r5
   105bc:	f7fe fe1b 	bl	f1f6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   105c0:	b118      	cbz	r0, 105ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x492>
   105c2:	200c      	movs	r0, #12
   105c4:	bd70      	pop	{r4, r5, r6, pc}
   105c6:	2042      	movs	r0, #66	; 0x42
   105c8:	bd70      	pop	{r4, r5, r6, pc}
   105ca:	b164      	cbz	r4, 105e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
   105cc:	8820      	ldrh	r0, [r4, #0]
   105ce:	f7f4 fc25 	bl	4e1c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   105d2:	8820      	ldrh	r0, [r4, #0]
   105d4:	2101      	movs	r1, #1
   105d6:	f7f4 f82b 	bl	4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   105da:	b120      	cbz	r0, 105e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
   105dc:	f241 41fd 	movw	r1, #5373	; 0x14fd
   105e0:	2039      	movs	r0, #57	; 0x39
   105e2:	f7f3 fd75 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105e6:	2000      	movs	r0, #0
   105e8:	bd70      	pop	{r4, r5, r6, pc}
   105ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ec:	b085      	sub	sp, #20
   105ee:	4604      	mov	r4, r0
   105f0:	8800      	ldrh	r0, [r0, #0]
   105f2:	4669      	mov	r1, sp
   105f4:	f7fd ff9a 	bl	e52c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   105f8:	2800      	cmp	r0, #0
   105fa:	d14e      	bne.n	1069a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x562>
   105fc:	9801      	ldr	r0, [sp, #4]
   105fe:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
   10602:	f88d 1010 	strb.w	r1, [sp, #16]
   10606:	9904      	ldr	r1, [sp, #16]
   10608:	9104      	str	r1, [sp, #16]
   1060a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1060e:	3090      	adds	r0, #144	; 0x90
   10610:	b101      	cbz	r1, 10614 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4dc>
   10612:	2101      	movs	r1, #1
   10614:	f88d 1008 	strb.w	r1, [sp, #8]
   10618:	f89d 1000 	ldrb.w	r1, [sp]
   1061c:	b119      	cbz	r1, 10626 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   1061e:	7bc1      	ldrb	r1, [r0, #15]
   10620:	0689      	lsls	r1, r1, #26
   10622:	d40f      	bmi.n	10644 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   10624:	e005      	b.n	10632 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fa>
   10626:	7b81      	ldrb	r1, [r0, #14]
   10628:	291e      	cmp	r1, #30
   1062a:	d00b      	beq.n	10644 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   1062c:	e001      	b.n	10632 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fa>
   1062e:	2101      	movs	r1, #1
   10630:	e000      	b.n	10634 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   10632:	2100      	movs	r1, #0
   10634:	f88d 100c 	strb.w	r1, [sp, #12]
   10638:	2105      	movs	r1, #5
   1063a:	3062      	adds	r0, #98	; 0x62
   1063c:	f7ff f92a 	bl	f894 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x5a>
   10640:	b128      	cbz	r0, 1064e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x516>
   10642:	e007      	b.n	10654 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x51c>
   10644:	f89d 1008 	ldrb.w	r1, [sp, #8]
   10648:	2900      	cmp	r1, #0
   1064a:	d1f2      	bne.n	10632 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fa>
   1064c:	e7ef      	b.n	1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4f6>
   1064e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10652:	b308      	cbz	r0, 10698 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x560>
   10654:	8921      	ldrh	r1, [r4, #8]
   10656:	88e0      	ldrh	r0, [r4, #6]
   10658:	f7ff feab 	bl	103b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27a>
   1065c:	2800      	cmp	r0, #0
   1065e:	d11c      	bne.n	1069a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x562>
   10660:	88a1      	ldrh	r1, [r4, #4]
   10662:	8860      	ldrh	r0, [r4, #2]
   10664:	f7ff fea5 	bl	103b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27a>
   10668:	2800      	cmp	r0, #0
   1066a:	d116      	bne.n	1069a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x562>
   1066c:	8921      	ldrh	r1, [r4, #8]
   1066e:	88e0      	ldrh	r0, [r4, #6]
   10670:	f7ff fe96 	bl	103a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x268>
   10674:	2800      	cmp	r0, #0
   10676:	d110      	bne.n	1069a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x562>
   10678:	88a1      	ldrh	r1, [r4, #4]
   1067a:	8860      	ldrh	r0, [r4, #2]
   1067c:	f7ff fe90 	bl	103a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x268>
   10680:	0006      	movs	r6, r0
   10682:	d10a      	bne.n	1069a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x562>
   10684:	9801      	ldr	r0, [sp, #4]
   10686:	f500 759d 	add.w	r5, r0, #314	; 0x13a
   1068a:	27ff      	movs	r7, #255	; 0xff
   1068c:	706f      	strb	r7, [r5, #1]
   1068e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   10692:	b121      	cbz	r1, 1069e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x566>
   10694:	263a      	movs	r6, #58	; 0x3a
   10696:	e030      	b.n	106fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5c2>
   10698:	201a      	movs	r0, #26
   1069a:	b005      	add	sp, #20
   1069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1069e:	f89d 1000 	ldrb.w	r1, [sp]
   106a2:	b371      	cbz	r1, 10702 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5ca>
   106a4:	2100      	movs	r1, #0
   106a6:	aa02      	add	r2, sp, #8
   106a8:	f7ff fefb 	bl	104a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
   106ac:	8861      	ldrh	r1, [r4, #2]
   106ae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   106b2:	4281      	cmp	r1, r0
   106b4:	d200      	bcs.n	106b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x580>
   106b6:	4608      	mov	r0, r1
   106b8:	80e8      	strh	r0, [r5, #6]
   106ba:	88a1      	ldrh	r1, [r4, #4]
   106bc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   106c0:	4281      	cmp	r1, r0
   106c2:	d200      	bcs.n	106c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58e>
   106c4:	4608      	mov	r0, r1
   106c6:	8128      	strh	r0, [r5, #8]
   106c8:	88e2      	ldrh	r2, [r4, #6]
   106ca:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   106ce:	428a      	cmp	r2, r1
   106d0:	d200      	bcs.n	106d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x59c>
   106d2:	4611      	mov	r1, r2
   106d4:	8069      	strh	r1, [r5, #2]
   106d6:	8922      	ldrh	r2, [r4, #8]
   106d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   106dc:	428a      	cmp	r2, r1
   106de:	d200      	bcs.n	106e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5aa>
   106e0:	4611      	mov	r1, r2
   106e2:	f640 0248 	movw	r2, #2120	; 0x848
   106e6:	80a9      	strh	r1, [r5, #4]
   106e8:	4291      	cmp	r1, r2
   106ea:	d300      	bcc.n	106ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5b6>
   106ec:	4611      	mov	r1, r2
   106ee:	80a9      	strh	r1, [r5, #4]
   106f0:	4290      	cmp	r0, r2
   106f2:	d200      	bcs.n	106f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5be>
   106f4:	4602      	mov	r2, r0
   106f6:	812a      	strh	r2, [r5, #8]
   106f8:	702f      	strb	r7, [r5, #0]
   106fa:	2000      	movs	r0, #0
   106fc:	7068      	strb	r0, [r5, #1]
   106fe:	4630      	mov	r0, r6
   10700:	e7cb      	b.n	1069a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x562>
   10702:	2101      	movs	r1, #1
   10704:	e7cf      	b.n	106a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56e>
   10706:	b508      	push	{r3, lr}
   10708:	f640 1288 	movw	r2, #2440	; 0x988
   1070c:	4669      	mov	r1, sp
   1070e:	f7f3 fb53 	bl	3db8 <mpsl_fem_tx_power_split>
   10712:	bd08      	pop	{r3, pc}
   10714:	b2c0      	uxtb	r0, r0
   10716:	06c1      	lsls	r1, r0, #27
   10718:	d415      	bmi.n	10746 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60e>
   1071a:	0681      	lsls	r1, r0, #26
   1071c:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10720:	d503      	bpl.n	1072a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5f2>
   10722:	bb21      	cbnz	r1, 1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   10724:	0781      	lsls	r1, r0, #30
   10726:	d422      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   10728:	e001      	b.n	1072e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5f6>
   1072a:	2900      	cmp	r1, #0
   1072c:	d1fa      	bne.n	10724 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5ec>
   1072e:	0701      	lsls	r1, r0, #28
   10730:	d51b      	bpl.n	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x632>
   10732:	07c1      	lsls	r1, r0, #31
   10734:	d01b      	beq.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   10736:	0781      	lsls	r1, r0, #30
   10738:	d419      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   1073a:	0641      	lsls	r1, r0, #25
   1073c:	d417      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   1073e:	0741      	lsls	r1, r0, #29
   10740:	d415      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   10742:	0680      	lsls	r0, r0, #26
   10744:	e00f      	b.n	10766 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62e>
   10746:	0641      	lsls	r1, r0, #25
   10748:	d411      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   1074a:	0681      	lsls	r1, r0, #26
   1074c:	d40f      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   1074e:	07c1      	lsls	r1, r0, #31
   10750:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10754:	d004      	beq.n	10760 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x628>
   10756:	2900      	cmp	r1, #0
   10758:	db02      	blt.n	10760 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x628>
   1075a:	0740      	lsls	r0, r0, #29
   1075c:	d405      	bmi.n	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x632>
   1075e:	e006      	b.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   10760:	0701      	lsls	r1, r0, #28
   10762:	d404      	bmi.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   10764:	0740      	lsls	r0, r0, #29
   10766:	2800      	cmp	r0, #0
   10768:	db01      	blt.n	1076e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x636>
   1076a:	2001      	movs	r0, #1
   1076c:	4770      	bx	lr
   1076e:	2000      	movs	r0, #0
   10770:	4770      	bx	lr
   10772:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10774:	f7ff ff08 	bl	10588 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
   10778:	b110      	cbz	r0, 10780 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x648>
   1077a:	f7f7 fb7f 	bl	7e7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1077e:	b990      	cbnz	r0, 107a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x66e>
   10780:	4669      	mov	r1, sp
   10782:	2002      	movs	r0, #2
   10784:	f7fd fc52 	bl	e02c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10788:	b178      	cbz	r0, 107aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x672>
   1078a:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1078e:	2039      	movs	r0, #57	; 0x39
   10790:	f7f3 fc9e 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10794:	9c02      	ldr	r4, [sp, #8]
   10796:	4620      	mov	r0, r4
   10798:	f7fe fd5a 	bl	f250 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1079c:	b128      	cbz	r0, 107aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x672>
   1079e:	4620      	mov	r0, r4
   107a0:	f7fe fbbb 	bl	ef1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   107a4:	b108      	cbz	r0, 107aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x672>
   107a6:	2001      	movs	r0, #1
   107a8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   107aa:	4668      	mov	r0, sp
   107ac:	f7f3 fece 	bl	454c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   107b0:	2800      	cmp	r0, #0
   107b2:	d0ef      	beq.n	10794 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x65c>
   107b4:	2000      	movs	r0, #0
   107b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   107b8:	b510      	push	{r4, lr}
   107ba:	f7f5 fea7 	bl	650c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   107be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107c2:	f7fa b8df 	b.w	a984 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   107c6:	b510      	push	{r4, lr}
   107c8:	f7f7 f85c 	bl	7884 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   107cc:	b108      	cbz	r0, 107d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x69a>
   107ce:	21e7      	movs	r1, #231	; 0xe7
   107d0:	e003      	b.n	107da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6a2>
   107d2:	f7f5 feab 	bl	652c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   107d6:	b118      	cbz	r0, 107e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6a8>
   107d8:	21ec      	movs	r1, #236	; 0xec
   107da:	2001      	movs	r0, #1
   107dc:	f7f3 fc78 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107e4:	2002      	movs	r0, #2
   107e6:	f7fd bbf3 	b.w	dfd0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   107ea:	6802      	ldr	r2, [r0, #0]
   107ec:	b912      	cbnz	r2, 107f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6bc>
   107ee:	6001      	str	r1, [r0, #0]
   107f0:	4770      	bx	lr
   107f2:	4602      	mov	r2, r0
   107f4:	6850      	ldr	r0, [r2, #4]
   107f6:	b108      	cbz	r0, 107fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6c4>
   107f8:	428a      	cmp	r2, r1
   107fa:	d1fa      	bne.n	107f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6ba>
   107fc:	428a      	cmp	r2, r1
   107fe:	d0f7      	beq.n	107f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6b8>
   10800:	6051      	str	r1, [r2, #4]
   10802:	4770      	bx	lr
   10804:	b510      	push	{r4, lr}
   10806:	4604      	mov	r4, r0
   10808:	e002      	b.n	10810 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6d8>
   1080a:	6820      	ldr	r0, [r4, #0]
   1080c:	4780      	blx	r0
   1080e:	6864      	ldr	r4, [r4, #4]
   10810:	2c00      	cmp	r4, #0
   10812:	d1fa      	bne.n	1080a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6d2>
   10814:	bd10      	pop	{r4, pc}
   10816:	b510      	push	{r4, lr}
   10818:	f7f7 fa1a 	bl	7c50 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
   1081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10820:	f7fa b8bc 	b.w	a99c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>
   10824:	b510      	push	{r4, lr}
   10826:	f7f8 fd53 	bl	92d0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1082a:	b120      	cbz	r0, 10836 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6fe>
   1082c:	f240 112d 	movw	r1, #301	; 0x12d
   10830:	2001      	movs	r0, #1
   10832:	f7f3 fc4d 	bl	40d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10836:	f7f9 fdbf 	bl	a3b8 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>
   1083a:	f7f7 fa2d 	bl	7c98 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   1083e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10842:	f7f9 bceb 	b.w	a21c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>

00010846 <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA>:
   10846:	b510      	push	{r4, lr}
   10848:	2101      	movs	r1, #1
   1084a:	71c1      	strb	r1, [r0, #7]
   1084c:	7181      	strb	r1, [r0, #6]
   1084e:	8081      	strh	r1, [r0, #4]
   10850:	4604      	mov	r4, r0
   10852:	2104      	movs	r1, #4
   10854:	f7f3 fcb8 	bl	41c8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
   10858:	2800      	cmp	r0, #0
   1085a:	d102      	bne.n	10862 <sym_YF4J4DGFDTHAWVS7CGH7Q6ZE54T3BMAUQX7A5ZA+0x1c>
   1085c:	6820      	ldr	r0, [r4, #0]
   1085e:	1c40      	adds	r0, r0, #1
   10860:	6020      	str	r0, [r4, #0]
   10862:	bd10      	pop	{r4, pc}

00010864 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10864:	f7f2 bf5e 	b.w	3724 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10868:	000b0001 	.word	0x000b0001
   1086c:	000a0002 	.word	0x000a0002
   10870:	00090005 	.word	0x00090005
   10874:	0008000a 	.word	0x0008000a
   10878:	00070014 	.word	0x00070014
   1087c:	0006001e 	.word	0x0006001e
   10880:	00050032 	.word	0x00050032
   10884:	0004004b 	.word	0x0004004b
   10888:	00030064 	.word	0x00030064
   1088c:	00020096 	.word	0x00020096
   10890:	000100fa 	.word	0x000100fa
   10894:	000001f4 	.word	0x000001f4

00010898 <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
   10898:	68c8      	ldr	r0, [r1, #12]
   1089a:	f7fd bd2b 	b.w	e2f4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0001089e <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
   1089e:	4770      	bx	lr

000108a0 <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI>:
   108a0:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
   108a4:	b108      	cbz	r0, 108aa <sym_CHKVBDUTUU4O3LETUIMPAGLWTVUWNF36L7OTJNI+0xa>
   108a6:	2000      	movs	r0, #0
   108a8:	4770      	bx	lr
   108aa:	2001      	movs	r0, #1
   108ac:	4770      	bx	lr

000108ae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   108ae:	b510      	push	{r4, lr}
   108b0:	f7fa fd4e 	bl	b350 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   108b4:	f7fa f9e0 	bl	ac78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   108b8:	f7fa f972 	bl	aba0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   108bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   108c0:	f7fa b9d2 	b.w	ac68 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000108c4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   108c4:	b510      	push	{r4, lr}
   108c6:	4604      	mov	r4, r0
   108c8:	4608      	mov	r0, r1
   108ca:	f7fa fed5 	bl	b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108d2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   108d6:	fbb0 f0f1 	udiv	r0, r0, r1
   108da:	1a20      	subs	r0, r4, r0
   108dc:	1e80      	subs	r0, r0, #2
   108de:	bd10      	pop	{r4, pc}

000108e0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   108e0:	b510      	push	{r4, lr}
   108e2:	4604      	mov	r4, r0
   108e4:	4608      	mov	r0, r1
   108e6:	f7fa fec7 	bl	b678 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108ee:	fbb0 f0f1 	udiv	r0, r0, r1
   108f2:	1a20      	subs	r0, r4, r0
   108f4:	bd10      	pop	{r4, pc}

000108f6 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   108f6:	680a      	ldr	r2, [r1, #0]
   108f8:	6002      	str	r2, [r0, #0]
   108fa:	790b      	ldrb	r3, [r1, #4]
   108fc:	7103      	strb	r3, [r0, #4]
   108fe:	4770      	bx	lr

00010900 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   10900:	2100      	movs	r1, #0
   10902:	6001      	str	r1, [r0, #0]
   10904:	8081      	strh	r1, [r0, #4]
   10906:	4770      	bx	lr
   10908:	d8d8d8d8 	.word	0xd8d8d8d8
   1090c:	d8d8d8d8 	.word	0xd8d8d8d8
   10910:	d8d8d8d8 	.word	0xd8d8d8d8
   10914:	d8d8d8d8 	.word	0xd8d8d8d8
   10918:	d8d8d8d8 	.word	0xd8d8d8d8
   1091c:	ecececec 	.word	0xecececec
   10920:	f0f0f0f0 	.word	0xf0f0f0f0
   10924:	f4f4f4f4 	.word	0xf4f4f4f4
   10928:	f8f8f8f8 	.word	0xf8f8f8f8
   1092c:	fcfcfcfc 	.word	0xfcfcfcfc
   10930:	03020000 	.word	0x03020000
   10934:	07060504 	.word	0x07060504
   10938:	d8d8d808 	.word	0xd8d8d808
   1093c:	d8d8d8d8 	.word	0xd8d8d8d8
   10940:	d8d8d8d8 	.word	0xd8d8d8d8
   10944:	d8d8d8d8 	.word	0xd8d8d8d8
   10948:	d8d8d8d8 	.word	0xd8d8d8d8
   1094c:	ecececd8 	.word	0xecececd8
   10950:	f0f0f0ec 	.word	0xf0f0f0ec
   10954:	f4f4f4f0 	.word	0xf4f4f4f0
   10958:	f8f8f8f4 	.word	0xf8f8f8f4
   1095c:	fcfcfcf8 	.word	0xfcfcfcf8
   10960:	000000fc 	.word	0x000000fc
   10964:	0403      	.short	0x0403
   10966:	5555      	.short	0x5555
   10968:	27262555 	.word	0x27262555
   1096c:	01010301 	.word	0x01010301

00010970 <unprovisioned_beacon>:
}

static void unprovisioned_beacon(uint8_t uuid[16],
				 bt_mesh_prov_oob_info_t oob_info,
				 uint32_t *uri_hash)
{
   10970:	b538      	push	{r3, r4, r5, lr}
	
	memcpy(node_uuid, uuid, 16);
   10972:	2210      	movs	r2, #16
{
   10974:	4604      	mov	r4, r0
   10976:	460d      	mov	r5, r1
	memcpy(node_uuid, uuid, 16);
   10978:	4601      	mov	r1, r0
   1097a:	4806      	ldr	r0, [pc, #24]	; (10994 <unprovisioned_beacon+0x24>)
   1097c:	f011 f83c 	bl	219f8 <memcpy>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10980:	4805      	ldr	r0, [pc, #20]	; (10998 <unprovisioned_beacon+0x28>)
   10982:	f00d ff5b 	bl	1e83c <z_impl_k_sem_give>
	k_sem_give(&sem_unprov_beacon);
	printk(" device uuid %i, oob_info: %i \n", *uuid, oob_info);
   10986:	7821      	ldrb	r1, [r4, #0]
   10988:	4804      	ldr	r0, [pc, #16]	; (1099c <unprovisioned_beacon+0x2c>)
   1098a:	462a      	mov	r2, r5
}
   1098c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk(" device uuid %i, oob_info: %i \n", *uuid, oob_info);
   10990:	f00e bf73 	b.w	1f87a <printk>
   10994:	20002bba 	.word	0x20002bba
   10998:	20000b8c 	.word	0x20000b8c
   1099c:	00026ec0 	.word	0x00026ec0

000109a0 <health_current_status>:
{
   109a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109a2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
	printk("Health Current Status from 0x%04x\n", addr);
   109a6:	480e      	ldr	r0, [pc, #56]	; (109e0 <health_current_status+0x40>)
{
   109a8:	4616      	mov	r6, r2
   109aa:	461f      	mov	r7, r3
	printk("Health Current Status from 0x%04x\n", addr);
   109ac:	f00e ff65 	bl	1f87a <printk>
	if (!fault_count) {
   109b0:	b935      	cbnz	r5, 109c0 <health_current_status+0x20>
		printk("Health Test ID 0x%02x Company ID 0x%04x: no faults\n",
   109b2:	463a      	mov	r2, r7
   109b4:	4631      	mov	r1, r6
   109b6:	480b      	ldr	r0, [pc, #44]	; (109e4 <health_current_status+0x44>)
}
   109b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("Health Test ID 0x%02x Company ID 0x%04x: no faults\n",
   109bc:	f00e bf5d 	b.w	1f87a <printk>
	printk("Health Test ID 0x%02x Company ID 0x%04x Fault Count %zu:\n",
   109c0:	462b      	mov	r3, r5
   109c2:	4631      	mov	r1, r6
   109c4:	4808      	ldr	r0, [pc, #32]	; (109e8 <health_current_status+0x48>)
		printk("\t0x%02x\n", faults[i]);
   109c6:	4e09      	ldr	r6, [pc, #36]	; (109ec <health_current_status+0x4c>)
	printk("Health Test ID 0x%02x Company ID 0x%04x Fault Count %zu:\n",
   109c8:	463a      	mov	r2, r7
   109ca:	f00e ff56 	bl	1f87a <printk>
	for (i = 0; i < fault_count; i++) {
   109ce:	4425      	add	r5, r4
		printk("\t0x%02x\n", faults[i]);
   109d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   109d4:	4630      	mov	r0, r6
   109d6:	f00e ff50 	bl	1f87a <printk>
	for (i = 0; i < fault_count; i++) {
   109da:	42a5      	cmp	r5, r4
   109dc:	d1f8      	bne.n	109d0 <health_current_status+0x30>
}
   109de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109e0:	00026ee0 	.word	0x00026ee0
   109e4:	00026f03 	.word	0x00026f03
   109e8:	00026f37 	.word	0x00026f37
   109ec:	00026f71 	.word	0x00026f71

000109f0 <configure_node>:

	printk("Configuration complete\n");
}

static void configure_node(struct bt_mesh_cdb_node *node)
{
   109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109f4:	b0f1      	sub	sp, #452	; 0x1c4
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_RX_SDU_MAX);
   109f6:	ab10      	add	r3, sp, #64	; 0x40
   109f8:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
   109fc:	ae05      	add	r6, sp, #20
	struct bt_mesh_cdb_app_key *key;
	struct bt_mesh_comp_p0 comp;
	uint8_t status;
	int err, elem_addr;

	printk("Configuring node 0x%04x...\n", node->addr);
   109fe:	8a01      	ldrh	r1, [r0, #16]
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_RX_SDU_MAX);
   10a00:	6033      	str	r3, [r6, #0]
   10a02:	e9c6 2301 	strd	r2, r3, [r6, #4]
{
   10a06:	4604      	mov	r4, r0
	printk("Configuring node 0x%04x...\n", node->addr);
   10a08:	4841      	ldr	r0, [pc, #260]	; (10b10 <configure_node+0x120>)
   10a0a:	f00e ff36 	bl	1f87a <printk>

	key = bt_mesh_cdb_app_key_get(app_idx);
   10a0e:	2000      	movs	r0, #0
   10a10:	f00a fe48 	bl	1b6a4 <bt_mesh_cdb_app_key_get>
	if (key == NULL) {
   10a14:	4601      	mov	r1, r0
   10a16:	b918      	cbnz	r0, 10a20 <configure_node+0x30>
		printk("No app-key 0x%04x\n", app_idx);
   10a18:	483e      	ldr	r0, [pc, #248]	; (10b14 <configure_node+0x124>)
		return;
	}

	err = bt_mesh_comp_p0_get(&comp, &buf);
	if (err) {
		printk("Unable to parse composition data (err: %d)\n", err);
   10a1a:	f00e ff2e 	bl	1f87a <printk>
		return;
   10a1e:	e012      	b.n	10a46 <configure_node+0x56>
	err = bt_mesh_cfg_app_key_add(net_idx, node->addr, net_idx, app_idx,
   10a20:	2300      	movs	r3, #0
				      key->keys[0].app_key, &status);
   10a22:	3104      	adds	r1, #4
	err = bt_mesh_cfg_app_key_add(net_idx, node->addr, net_idx, app_idx,
   10a24:	f10d 0513 	add.w	r5, sp, #19
   10a28:	9100      	str	r1, [sp, #0]
   10a2a:	9501      	str	r5, [sp, #4]
   10a2c:	8a21      	ldrh	r1, [r4, #16]
   10a2e:	461a      	mov	r2, r3
   10a30:	4618      	mov	r0, r3
   10a32:	f00a fadf 	bl	1aff4 <bt_mesh_cfg_app_key_add>
   10a36:	4601      	mov	r1, r0
	if (err || status) {
   10a38:	b908      	cbnz	r0, 10a3e <configure_node+0x4e>
   10a3a:	782a      	ldrb	r2, [r5, #0]
   10a3c:	b132      	cbz	r2, 10a4c <configure_node+0x5c>
		printk("Failed to add app-key (err %d status %d)\n", err, status);
   10a3e:	782a      	ldrb	r2, [r5, #0]
   10a40:	4835      	ldr	r0, [pc, #212]	; (10b18 <configure_node+0x128>)
		printk("Failed to get Composition data (err %d, status: %d)\n",
   10a42:	f00e ff1a 	bl	1f87a <printk>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_cdb_node_store(node);
	}

	printk("Configuration complete\n");
}
   10a46:	b071      	add	sp, #452	; 0x1c4
   10a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = bt_mesh_cfg_comp_data_get(net_idx, node->addr, 0, &status, &buf);
   10a4c:	8a21      	ldrh	r1, [r4, #16]
   10a4e:	9600      	str	r6, [sp, #0]
   10a50:	462b      	mov	r3, r5
   10a52:	f00a fa6f 	bl	1af34 <bt_mesh_cfg_comp_data_get>
	if (err || status) {
   10a56:	4601      	mov	r1, r0
   10a58:	b908      	cbnz	r0, 10a5e <configure_node+0x6e>
   10a5a:	782b      	ldrb	r3, [r5, #0]
   10a5c:	b113      	cbz	r3, 10a64 <configure_node+0x74>
		printk("Failed to get Composition data (err %d, status: %d)\n",
   10a5e:	782a      	ldrb	r2, [r5, #0]
   10a60:	482e      	ldr	r0, [pc, #184]	; (10b1c <configure_node+0x12c>)
   10a62:	e7ee      	b.n	10a42 <configure_node+0x52>
	err = bt_mesh_comp_p0_get(&comp, &buf);
   10a64:	4631      	mov	r1, r6
   10a66:	a80c      	add	r0, sp, #48	; 0x30
   10a68:	f014 f80a 	bl	24a80 <bt_mesh_comp_p0_get>
	if (err) {
   10a6c:	4601      	mov	r1, r0
   10a6e:	b108      	cbz	r0, 10a74 <configure_node+0x84>
		printk("Unable to parse composition data (err: %d)\n", err);
   10a70:	482b      	ldr	r0, [pc, #172]	; (10b20 <configure_node+0x130>)
   10a72:	e7d2      	b.n	10a1a <configure_node+0x2a>
	elem_addr = node->addr;
   10a74:	8a26      	ldrh	r6, [r4, #16]
		printk("Element @ 0x%04x: %u + %u models\n", elem_addr,
   10a76:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 10b24 <configure_node+0x134>
			printk("Binding AppKey to model 0x%03x:%04x\n",
   10a7a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 10b28 <configure_node+0x138>
				printk("Failed (err: %d, status: %d)\n", err,
   10a7e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 10b2c <configure_node+0x13c>
	while (bt_mesh_comp_p0_elem_pull(&comp, &elem)) {
   10a82:	a908      	add	r1, sp, #32
   10a84:	a80c      	add	r0, sp, #48	; 0x30
   10a86:	f014 f81b 	bl	24ac0 <bt_mesh_comp_p0_elem_pull>
   10a8a:	b9a0      	cbnz	r0, 10ab6 <configure_node+0xc6>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10a8c:	f3bf 8f5b 	dmb	ish
   10a90:	f104 0328 	add.w	r3, r4, #40	; 0x28
   10a94:	e853 2f00 	ldrex	r2, [r3]
   10a98:	f042 0201 	orr.w	r2, r2, #1
   10a9c:	e843 2100 	strex	r1, r2, [r3]
   10aa0:	2900      	cmp	r1, #0
   10aa2:	d1f7      	bne.n	10a94 <configure_node+0xa4>
   10aa4:	f3bf 8f5b 	dmb	ish
		bt_mesh_cdb_node_store(node);
   10aa8:	4620      	mov	r0, r4
   10aaa:	f014 f915 	bl	24cd8 <bt_mesh_cdb_node_store>
	printk("Configuration complete\n");
   10aae:	4820      	ldr	r0, [pc, #128]	; (10b30 <configure_node+0x140>)
   10ab0:	f00e fee3 	bl	1f87a <printk>
   10ab4:	e7c7      	b.n	10a46 <configure_node+0x56>
		printk("Element @ 0x%04x: %u + %u models\n", elem_addr,
   10ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10aba:	4631      	mov	r1, r6
   10abc:	4640      	mov	r0, r8
   10abe:	f00e fedc 	bl	1f87a <printk>
		for (int i = 0; i < elem.nsig; i++) {
   10ac2:	2700      	movs	r7, #0
			err = bt_mesh_cfg_mod_app_bind(net_idx, node->addr,
   10ac4:	fa1f fb86 	uxth.w	fp, r6
		for (int i = 0; i < elem.nsig; i++) {
   10ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aca:	42bb      	cmp	r3, r7
   10acc:	d801      	bhi.n	10ad2 <configure_node+0xe2>
		elem_addr++;
   10ace:	3601      	adds	r6, #1
   10ad0:	e7d7      	b.n	10a82 <configure_node+0x92>
			uint16_t id = bt_mesh_comp_p0_elem_mod(&elem, i);
   10ad2:	4639      	mov	r1, r7
   10ad4:	a808      	add	r0, sp, #32
   10ad6:	f014 f817 	bl	24b08 <bt_mesh_comp_p0_elem_mod>
			if (id == BT_MESH_MODEL_ID_CFG_CLI ||
   10ada:	2801      	cmp	r0, #1
			uint16_t id = bt_mesh_comp_p0_elem_mod(&elem, i);
   10adc:	4602      	mov	r2, r0
			if (id == BT_MESH_MODEL_ID_CFG_CLI ||
   10ade:	d915      	bls.n	10b0c <configure_node+0x11c>
			printk("Binding AppKey to model 0x%03x:%04x\n",
   10ae0:	9003      	str	r0, [sp, #12]
   10ae2:	4631      	mov	r1, r6
   10ae4:	4648      	mov	r0, r9
   10ae6:	f00e fec8 	bl	1f87a <printk>
			err = bt_mesh_cfg_mod_app_bind(net_idx, node->addr,
   10aea:	9a03      	ldr	r2, [sp, #12]
   10aec:	8a21      	ldrh	r1, [r4, #16]
   10aee:	9200      	str	r2, [sp, #0]
   10af0:	2300      	movs	r3, #0
   10af2:	9501      	str	r5, [sp, #4]
   10af4:	465a      	mov	r2, fp
   10af6:	4618      	mov	r0, r3
   10af8:	f013 ffb5 	bl	24a66 <bt_mesh_cfg_mod_app_bind>
			if (err || status) {
   10afc:	4601      	mov	r1, r0
   10afe:	b908      	cbnz	r0, 10b04 <configure_node+0x114>
   10b00:	782b      	ldrb	r3, [r5, #0]
   10b02:	b11b      	cbz	r3, 10b0c <configure_node+0x11c>
				printk("Failed (err: %d, status: %d)\n", err,
   10b04:	782a      	ldrb	r2, [r5, #0]
   10b06:	4650      	mov	r0, sl
   10b08:	f00e feb7 	bl	1f87a <printk>
		for (int i = 0; i < elem.nsig; i++) {
   10b0c:	3701      	adds	r7, #1
   10b0e:	e7db      	b.n	10ac8 <configure_node+0xd8>
   10b10:	00026f7a 	.word	0x00026f7a
   10b14:	00026f96 	.word	0x00026f96
   10b18:	00026fa9 	.word	0x00026fa9
   10b1c:	00026fd3 	.word	0x00026fd3
   10b20:	00027008 	.word	0x00027008
   10b24:	00027034 	.word	0x00027034
   10b28:	00027056 	.word	0x00027056
   10b2c:	0002707b 	.word	0x0002707b
   10b30:	00027099 	.word	0x00027099

00010b34 <node_added>:
{
   10b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10b36:	461f      	mov	r7, r3
	node_addr = addr;
   10b38:	4b08      	ldr	r3, [pc, #32]	; (10b5c <node_added+0x28>)
{
   10b3a:	4605      	mov	r5, r0
   10b3c:	460e      	mov	r6, r1
   10b3e:	4614      	mov	r4, r2
	node_addr = addr;
   10b40:	801a      	strh	r2, [r3, #0]
   10b42:	4807      	ldr	r0, [pc, #28]	; (10b60 <node_added+0x2c>)
   10b44:	f00d fe7a 	bl	1e83c <z_impl_k_sem_give>
	printk("net_idx: %u, uuid: %s, addr: %i, num_elem: %d\n",net_idx,uuid,addr,num_elem);
   10b48:	4806      	ldr	r0, [pc, #24]	; (10b64 <node_added+0x30>)
   10b4a:	9700      	str	r7, [sp, #0]
   10b4c:	4623      	mov	r3, r4
   10b4e:	4632      	mov	r2, r6
   10b50:	4629      	mov	r1, r5
   10b52:	f00e fe92 	bl	1f87a <printk>
}
   10b56:	b003      	add	sp, #12
   10b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b5a:	bf00      	nop
   10b5c:	20002b64 	.word	0x20002b64
   10b60:	20000b74 	.word	0x20000b74
   10b64:	000270b1 	.word	0x000270b1

00010b68 <check_unconfigured>:
	}
	return 0;
}

static uint8_t check_unconfigured(struct bt_mesh_cdb_node *node, void *data)
{
   10b68:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10b6a:	f3bf 8f5b 	dmb	ish
   10b6e:	6a86      	ldr	r6, [r0, #40]	; 0x28
   10b70:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(node->flags, BT_MESH_CDB_NODE_CONFIGURED)) {
   10b74:	f016 0601 	ands.w	r6, r6, #1
{
   10b78:	b085      	sub	sp, #20
   10b7a:	4604      	mov	r4, r0
	if (!atomic_test_bit(node->flags, BT_MESH_CDB_NODE_CONFIGURED)) {
   10b7c:	f100 0728 	add.w	r7, r0, #40	; 0x28
   10b80:	d10f      	bne.n	10ba2 <check_unconfigured+0x3a>
		if (node->addr == self_addr) {
   10b82:	8a03      	ldrh	r3, [r0, #16]
   10b84:	2b01      	cmp	r3, #1
   10b86:	d146      	bne.n	10c16 <check_unconfigured+0xae>
	printk("Configuring self...\n");
   10b88:	4826      	ldr	r0, [pc, #152]	; (10c24 <check_unconfigured+0xbc>)
	uint8_t status = 0;
   10b8a:	f88d 600f 	strb.w	r6, [sp, #15]
	printk("Configuring self...\n");
   10b8e:	f00e fe74 	bl	1f87a <printk>
	key = bt_mesh_cdb_app_key_get(app_idx);
   10b92:	4630      	mov	r0, r6
   10b94:	f00a fd86 	bl	1b6a4 <bt_mesh_cdb_app_key_get>
	if (key == NULL) {
   10b98:	4601      	mov	r1, r0
   10b9a:	b928      	cbnz	r0, 10ba8 <check_unconfigured+0x40>
		printk("No app-key 0x%04x\n", app_idx);
   10b9c:	4822      	ldr	r0, [pc, #136]	; (10c28 <check_unconfigured+0xc0>)
   10b9e:	f00e fe6c 	bl	1f87a <printk>
			configure_node(node);
		}
	}

	return BT_MESH_CDB_ITER_CONTINUE;
}
   10ba2:	2001      	movs	r0, #1
   10ba4:	b005      	add	sp, #20
   10ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_mesh_cfg_app_key_add(self->net_idx, self->addr, self->net_idx,
   10ba8:	8a62      	ldrh	r2, [r4, #18]
				      app_idx, key->keys[0].app_key, &status);
   10baa:	3104      	adds	r1, #4
	err = bt_mesh_cfg_app_key_add(self->net_idx, self->addr, self->net_idx,
   10bac:	f10d 050f 	add.w	r5, sp, #15
   10bb0:	9100      	str	r1, [sp, #0]
   10bb2:	4633      	mov	r3, r6
   10bb4:	8a21      	ldrh	r1, [r4, #16]
   10bb6:	9501      	str	r5, [sp, #4]
   10bb8:	4610      	mov	r0, r2
   10bba:	f00a fa1b 	bl	1aff4 <bt_mesh_cfg_app_key_add>
	if (err || status) {
   10bbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10bc2:	4601      	mov	r1, r0
   10bc4:	b900      	cbnz	r0, 10bc8 <check_unconfigured+0x60>
   10bc6:	b123      	cbz	r3, 10bd2 <check_unconfigured+0x6a>
		printk("Failed to add app-key (err %d, status %d)\n", err,
   10bc8:	4818      	ldr	r0, [pc, #96]	; (10c2c <check_unconfigured+0xc4>)
   10bca:	461a      	mov	r2, r3
		printk("Failed to bind app-key (err %d, status %d)\n", err,
   10bcc:	f00e fe55 	bl	1f87a <printk>
		return;
   10bd0:	e7e7      	b.n	10ba2 <check_unconfigured+0x3a>
	err = bt_mesh_cfg_mod_app_bind(self->net_idx, self->addr, self->addr,
   10bd2:	8a22      	ldrh	r2, [r4, #16]
   10bd4:	8a60      	ldrh	r0, [r4, #18]
   10bd6:	9501      	str	r5, [sp, #4]
   10bd8:	2103      	movs	r1, #3
   10bda:	9100      	str	r1, [sp, #0]
   10bdc:	4611      	mov	r1, r2
   10bde:	f013 ff42 	bl	24a66 <bt_mesh_cfg_mod_app_bind>
	if (err || status) {
   10be2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10be6:	4601      	mov	r1, r0
   10be8:	b900      	cbnz	r0, 10bec <check_unconfigured+0x84>
   10bea:	b10a      	cbz	r2, 10bf0 <check_unconfigured+0x88>
		printk("Failed to bind app-key (err %d, status %d)\n", err,
   10bec:	4810      	ldr	r0, [pc, #64]	; (10c30 <check_unconfigured+0xc8>)
   10bee:	e7ed      	b.n	10bcc <check_unconfigured+0x64>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10bf0:	f3bf 8f5b 	dmb	ish
   10bf4:	e857 3f00 	ldrex	r3, [r7]
   10bf8:	f043 0301 	orr.w	r3, r3, #1
   10bfc:	e847 3200 	strex	r2, r3, [r7]
   10c00:	2a00      	cmp	r2, #0
   10c02:	d1f7      	bne.n	10bf4 <check_unconfigured+0x8c>
   10c04:	f3bf 8f5b 	dmb	ish
		bt_mesh_cdb_node_store(self);
   10c08:	4620      	mov	r0, r4
   10c0a:	f014 f865 	bl	24cd8 <bt_mesh_cdb_node_store>
	printk("Configuration complete\n");
   10c0e:	4809      	ldr	r0, [pc, #36]	; (10c34 <check_unconfigured+0xcc>)
   10c10:	f00e fe33 	bl	1f87a <printk>
   10c14:	e7c5      	b.n	10ba2 <check_unconfigured+0x3a>
			printk("configure node\n");
   10c16:	4808      	ldr	r0, [pc, #32]	; (10c38 <check_unconfigured+0xd0>)
   10c18:	f00e fe2f 	bl	1f87a <printk>
			configure_node(node);
   10c1c:	4620      	mov	r0, r4
   10c1e:	f7ff fee7 	bl	109f0 <configure_node>
   10c22:	e7be      	b.n	10ba2 <check_unconfigured+0x3a>
   10c24:	000270e0 	.word	0x000270e0
   10c28:	00026f96 	.word	0x00026f96
   10c2c:	000270f5 	.word	0x000270f5
   10c30:	00027120 	.word	0x00027120
   10c34:	00027099 	.word	0x00027099
   10c38:	0002714c 	.word	0x0002714c

00010c3c <main>:
	}
}


void main(void)
{
   10c3c:	b570      	push	{r4, r5, r6, lr}
	char uuid_hex_str[32 + 1];
	int err;

	printk("Initializing...\n");
   10c3e:	4853      	ldr	r0, [pc, #332]	; (10d8c <main+0x150>)
{
   10c40:	b090      	sub	sp, #64	; 0x40
	printk("Initializing...\n");
   10c42:	f00e fe1a 	bl	1f87a <printk>

	// dk_leds_init();
	// dk_buttons_init(NULL);
	
	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
   10c46:	2000      	movs	r0, #0
   10c48:	f002 ff48 	bl	13adc <bt_enable>
	if (err) {
   10c4c:	4601      	mov	r1, r0
   10c4e:	b128      	cbz	r0, 10c5c <main+0x20>
		printk("Bluetooth init failed (err %d)\n", err);
   10c50:	484f      	ldr	r0, [pc, #316]	; (10d90 <main+0x154>)
			}
		}


	}
}
   10c52:	b010      	add	sp, #64	; 0x40
   10c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Bluetooth init failed (err %d)\n", err);
   10c58:	f00e be0f 	b.w	1f87a <printk>
	printk("Bluetooth initialized\n");
   10c5c:	484d      	ldr	r0, [pc, #308]	; (10d94 <main+0x158>)
   10c5e:	f00e fe0c 	bl	1f87a <printk>
	err = bt_mesh_init(&prov, &comp);
   10c62:	494d      	ldr	r1, [pc, #308]	; (10d98 <main+0x15c>)
   10c64:	484d      	ldr	r0, [pc, #308]	; (10d9c <main+0x160>)
   10c66:	f011 fadc 	bl	22222 <bt_mesh_init>
	if (err) {
   10c6a:	4601      	mov	r1, r0
   10c6c:	b378      	cbz	r0, 10cce <main+0x92>
		printk("Initializing mesh failed (err %d)\n", err);
   10c6e:	484c      	ldr	r0, [pc, #304]	; (10da0 <main+0x164>)
		printk("Failed to create CDB (err %d)\n", err);
   10c70:	f00e fe03 	bl	1f87a <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   10c74:	4c4b      	ldr	r4, [pc, #300]	; (10da4 <main+0x168>)
   10c76:	4d4c      	ldr	r5, [pc, #304]	; (10da8 <main+0x16c>)
 		bt_mesh_cdb_node_foreach(check_unconfigured, NULL);
   10c78:	4e4c      	ldr	r6, [pc, #304]	; (10dac <main+0x170>)
   10c7a:	4620      	mov	r0, r4
   10c7c:	f00d fe2c 	bl	1e8d8 <z_impl_k_sem_reset>
   10c80:	4628      	mov	r0, r5
   10c82:	f00d fe29 	bl	1e8d8 <z_impl_k_sem_reset>
   10c86:	2100      	movs	r1, #0
   10c88:	4630      	mov	r0, r6
   10c8a:	f00a fccd 	bl	1b628 <bt_mesh_cdb_node_foreach>
		printk("Waiting for unprovisioned beacon...\n");
   10c8e:	4848      	ldr	r0, [pc, #288]	; (10db0 <main+0x174>)
   10c90:	f00e fdf3 	bl	1f87a <printk>
	return z_impl_k_sem_take(sem, timeout);
   10c94:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   10c98:	2300      	movs	r3, #0
   10c9a:	4620      	mov	r0, r4
   10c9c:	f00d fdf4 	bl	1e888 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   10ca0:	300b      	adds	r0, #11
   10ca2:	d0ea      	beq.n	10c7a <main+0x3e>
			printk("Provisioning\n");
   10ca4:	4843      	ldr	r0, [pc, #268]	; (10db4 <main+0x178>)
   10ca6:	f00e fde8 	bl	1f87a <printk>
			bin2hex(node_uuid, 16, uuid_hex_str, sizeof(uuid_hex_str));
   10caa:	2321      	movs	r3, #33	; 0x21
   10cac:	aa07      	add	r2, sp, #28
   10cae:	2110      	movs	r1, #16
   10cb0:	4841      	ldr	r0, [pc, #260]	; (10db8 <main+0x17c>)
   10cb2:	f00e fd76 	bl	1f7a2 <bin2hex>
			err = bt_mesh_provision_adv(node_uuid,net_idx,0,0);
   10cb6:	2300      	movs	r3, #0
   10cb8:	4619      	mov	r1, r3
   10cba:	483f      	ldr	r0, [pc, #252]	; (10db8 <main+0x17c>)
   10cbc:	461a      	mov	r2, r3
   10cbe:	f003 fe3f 	bl	14940 <bt_mesh_provision_adv>
			if(err < 0)
   10cc2:	1e01      	subs	r1, r0, #0
   10cc4:	da4e      	bge.n	10d64 <main+0x128>
				printk("prov failed %d\n", err);
   10cc6:	483d      	ldr	r0, [pc, #244]	; (10dbc <main+0x180>)
					printk("added node 0x%04x\n",node_addr);
   10cc8:	f00e fdd7 	bl	1f87a <printk>
   10ccc:	e7d5      	b.n	10c7a <main+0x3e>
	printk("Mesh initialized\n");
   10cce:	483c      	ldr	r0, [pc, #240]	; (10dc0 <main+0x184>)
   10cd0:	f00e fdd3 	bl	1f87a <printk>
		printk("Loading stored settings\n");
   10cd4:	483b      	ldr	r0, [pc, #236]	; (10dc4 <main+0x188>)
   10cd6:	f00e fdd0 	bl	1f87a <printk>
		settings_load();
   10cda:	f00f fb8d 	bl	203f8 <settings_load>
	bt_rand(net_key, 16);
   10cde:	2110      	movs	r1, #16
   10ce0:	a803      	add	r0, sp, #12
   10ce2:	f00c fc63 	bl	1d5ac <bt_rand>
	err = bt_mesh_cdb_create(net_key);
   10ce6:	a803      	add	r0, sp, #12
   10ce8:	f00a fbfc 	bl	1b4e4 <bt_mesh_cdb_create>
	if (err == -EALREADY) {
   10cec:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_mesh_cdb_create(net_key);
   10cf0:	4604      	mov	r4, r0
	if (err == -EALREADY) {
   10cf2:	d118      	bne.n	10d26 <main+0xea>
		printk("Using stored CDB\n");
   10cf4:	4834      	ldr	r0, [pc, #208]	; (10dc8 <main+0x18c>)
   10cf6:	f00e fdc0 	bl	1f87a <printk>
	bt_rand(dev_key, 16);
   10cfa:	ac07      	add	r4, sp, #28
   10cfc:	2110      	movs	r1, #16
   10cfe:	4620      	mov	r0, r4
   10d00:	f00c fc54 	bl	1d5ac <bt_rand>
	err = bt_mesh_provision(net_key, BT_MESH_NET_PRIMARY, 0, 0, self_addr,
   10d04:	2301      	movs	r3, #1
   10d06:	9300      	str	r3, [sp, #0]
   10d08:	2300      	movs	r3, #0
   10d0a:	4619      	mov	r1, r3
   10d0c:	9401      	str	r4, [sp, #4]
   10d0e:	461a      	mov	r2, r3
   10d10:	a803      	add	r0, sp, #12
   10d12:	f003 fea5 	bl	14a60 <bt_mesh_provision>
	if (err == -EALREADY) {
   10d16:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_mesh_provision(net_key, BT_MESH_NET_PRIMARY, 0, 0, self_addr,
   10d1a:	4601      	mov	r1, r0
	if (err == -EALREADY) {
   10d1c:	d11d      	bne.n	10d5a <main+0x11e>
		printk("Using stored settings\n");
   10d1e:	482b      	ldr	r0, [pc, #172]	; (10dcc <main+0x190>)
		printk("Provisioning completed\n");
   10d20:	f00e fdab 	bl	1f87a <printk>
   10d24:	e7a6      	b.n	10c74 <main+0x38>
	} else if (err) {
   10d26:	b110      	cbz	r0, 10d2e <main+0xf2>
		printk("Failed to create CDB (err %d)\n", err);
   10d28:	4601      	mov	r1, r0
   10d2a:	4829      	ldr	r0, [pc, #164]	; (10dd0 <main+0x194>)
   10d2c:	e7a0      	b.n	10c70 <main+0x34>
		printk("Created CDB\n");
   10d2e:	4829      	ldr	r0, [pc, #164]	; (10dd4 <main+0x198>)
   10d30:	f00e fda3 	bl	1f87a <printk>
	key = bt_mesh_cdb_app_key_alloc(net_idx, app_idx);
   10d34:	4621      	mov	r1, r4
   10d36:	4620      	mov	r0, r4
   10d38:	f00a fc8c 	bl	1b654 <bt_mesh_cdb_app_key_alloc>
	if (key == NULL) {
   10d3c:	4604      	mov	r4, r0
   10d3e:	b920      	cbnz	r0, 10d4a <main+0x10e>
		printk("Failed to allocate app-key 0x%04x\n", app_idx);
   10d40:	4601      	mov	r1, r0
   10d42:	4825      	ldr	r0, [pc, #148]	; (10dd8 <main+0x19c>)
   10d44:	f00e fd99 	bl	1f87a <printk>
		return;
   10d48:	e7d7      	b.n	10cfa <main+0xbe>
	bt_rand(key->keys[0].app_key, 16);
   10d4a:	2110      	movs	r1, #16
   10d4c:	3004      	adds	r0, #4
   10d4e:	f00c fc2d 	bl	1d5ac <bt_rand>
		bt_mesh_cdb_app_key_store(key);
   10d52:	4620      	mov	r0, r4
   10d54:	f013 ffd4 	bl	24d00 <bt_mesh_cdb_app_key_store>
   10d58:	e7cf      	b.n	10cfa <main+0xbe>
	} else if (err) {
   10d5a:	b108      	cbz	r0, 10d60 <main+0x124>
		printk("Provisioning failed (err %d)\n", err);
   10d5c:	481f      	ldr	r0, [pc, #124]	; (10ddc <main+0x1a0>)
   10d5e:	e787      	b.n	10c70 <main+0x34>
		printk("Provisioning completed\n");
   10d60:	481f      	ldr	r0, [pc, #124]	; (10de0 <main+0x1a4>)
   10d62:	e7dd      	b.n	10d20 <main+0xe4>
				printk("waiting node to be added...\n");
   10d64:	481f      	ldr	r0, [pc, #124]	; (10de4 <main+0x1a8>)
   10d66:	f00e fd88 	bl	1f87a <printk>
   10d6a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   10d6e:	2300      	movs	r3, #0
   10d70:	4628      	mov	r0, r5
   10d72:	f00d fd89 	bl	1e888 <z_impl_k_sem_take>
				if(err == -EAGAIN){
   10d76:	300b      	adds	r0, #11
   10d78:	d103      	bne.n	10d82 <main+0x146>
					printk("node added falied\n");
   10d7a:	481b      	ldr	r0, [pc, #108]	; (10de8 <main+0x1ac>)
   10d7c:	f00e fd7d 	bl	1f87a <printk>
					continue;
   10d80:	e77b      	b.n	10c7a <main+0x3e>
					printk("added node 0x%04x\n",node_addr);
   10d82:	4b1a      	ldr	r3, [pc, #104]	; (10dec <main+0x1b0>)
   10d84:	481a      	ldr	r0, [pc, #104]	; (10df0 <main+0x1b4>)
   10d86:	8819      	ldrh	r1, [r3, #0]
   10d88:	e79e      	b.n	10cc8 <main+0x8c>
   10d8a:	bf00      	nop
   10d8c:	0002715c 	.word	0x0002715c
   10d90:	0002716d 	.word	0x0002716d
   10d94:	0002718d 	.word	0x0002718d
   10d98:	00026608 	.word	0x00026608
   10d9c:	00026618 	.word	0x00026618
   10da0:	000271a4 	.word	0x000271a4
   10da4:	20000b8c 	.word	0x20000b8c
   10da8:	20000b74 	.word	0x20000b74
   10dac:	00010b69 	.word	0x00010b69
   10db0:	000272a0 	.word	0x000272a0
   10db4:	000272c5 	.word	0x000272c5
   10db8:	20002bba 	.word	0x20002bba
   10dbc:	000272d3 	.word	0x000272d3
   10dc0:	000271c7 	.word	0x000271c7
   10dc4:	000271d9 	.word	0x000271d9
   10dc8:	000271f2 	.word	0x000271f2
   10dcc:	00027253 	.word	0x00027253
   10dd0:	00027204 	.word	0x00027204
   10dd4:	00027223 	.word	0x00027223
   10dd8:	00027230 	.word	0x00027230
   10ddc:	0002726a 	.word	0x0002726a
   10de0:	00027288 	.word	0x00027288
   10de4:	000272e3 	.word	0x000272e3
   10de8:	00027300 	.word	0x00027300
   10dec:	20002b64 	.word	0x20002b64
   10df0:	00027313 	.word	0x00027313

00010df4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   10df4:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10df6:	4c0a      	ldr	r4, [pc, #40]	; (10e20 <crc8_ccitt+0x2c>)
   10df8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   10dfa:	4291      	cmp	r1, r2
   10dfc:	d100      	bne.n	10e00 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   10dfe:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   10e00:	f811 3b01 	ldrb.w	r3, [r1], #1
   10e04:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10e06:	0903      	lsrs	r3, r0, #4
   10e08:	5ce3      	ldrb	r3, [r4, r3]
   10e0a:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   10e0e:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10e10:	f3c3 1303 	ubfx	r3, r3, #4, #4
   10e14:	5ce0      	ldrb	r0, [r4, r3]
   10e16:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   10e1a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   10e1c:	e7ed      	b.n	10dfa <crc8_ccitt+0x6>
   10e1e:	bf00      	nop
   10e20:	00027336 	.word	0x00027336

00010e24 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   10e24:	4b01      	ldr	r3, [pc, #4]	; (10e2c <char_out+0x8>)
   10e26:	681b      	ldr	r3, [r3, #0]
   10e28:	4718      	bx	r3
   10e2a:	bf00      	nop
   10e2c:	20000500 	.word	0x20000500

00010e30 <__printk_hook_install>:
	_char_out = fn;
   10e30:	4b01      	ldr	r3, [pc, #4]	; (10e38 <__printk_hook_install+0x8>)
   10e32:	6018      	str	r0, [r3, #0]
}
   10e34:	4770      	bx	lr
   10e36:	bf00      	nop
   10e38:	20000500 	.word	0x20000500

00010e3c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10e3c:	b507      	push	{r0, r1, r2, lr}
   10e3e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10e40:	2100      	movs	r1, #0
   10e42:	4602      	mov	r2, r0
   10e44:	9100      	str	r1, [sp, #0]
   10e46:	4803      	ldr	r0, [pc, #12]	; (10e54 <vprintk+0x18>)
   10e48:	f000 f8fc 	bl	11044 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10e4c:	b003      	add	sp, #12
   10e4e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e52:	bf00      	nop
   10e54:	00010e25 	.word	0x00010e25

00010e58 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10e58:	b530      	push	{r4, r5, lr}
   10e5a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   10e5c:	2500      	movs	r5, #0
   10e5e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   10e62:	4604      	mov	r4, r0
   10e64:	9500      	str	r5, [sp, #0]
   10e66:	a903      	add	r1, sp, #12
   10e68:	4805      	ldr	r0, [pc, #20]	; (10e80 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   10e6a:	9505      	str	r5, [sp, #20]
   10e6c:	f000 f8ea 	bl	11044 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10e70:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   10e74:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10e76:	bfb8      	it	lt
   10e78:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10e7a:	b007      	add	sp, #28
   10e7c:	bd30      	pop	{r4, r5, pc}
   10e7e:	bf00      	nop
   10e80:	0001f855 	.word	0x0001f855

00010e84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10e88:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10e8c:	f019 0808 	ands.w	r8, r9, #8
{
   10e90:	4604      	mov	r4, r0
   10e92:	4693      	mov	fp, r2
	if (processing) {
   10e94:	d00d      	beq.n	10eb2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   10e96:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10e98:	bf0c      	ite	eq
   10e9a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10e9e:	f049 0920 	orrne.w	r9, r9, #32
   10ea2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10ea6:	f38b 8811 	msr	BASEPRI, fp
   10eaa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10eb2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10eb6:	2902      	cmp	r1, #2
   10eb8:	d107      	bne.n	10eca <process_event+0x46>
			evt = process_recheck(mgr);
   10eba:	4620      	mov	r0, r4
   10ebc:	f00e fcf7 	bl	1f8ae <process_recheck>
		if (evt == EVT_NOP) {
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d0f0      	beq.n	10ea6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   10ec4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10ec6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   10ec8:	d14e      	bne.n	10f68 <process_event+0xe4>
			res = mgr->last_res;
   10eca:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10ecc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10ece:	2f00      	cmp	r7, #0
   10ed0:	da15      	bge.n	10efe <process_event+0x7a>
		*clients = mgr->clients;
   10ed2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10ed4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10ed8:	e9c4 8800 	strd	r8, r8, [r4]
   10edc:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10ee0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   10ee2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10ee4:	8b21      	ldrh	r1, [r4, #24]
   10ee6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10eea:	45ca      	cmp	sl, r9
   10eec:	d002      	beq.n	10ef4 <process_event+0x70>
		if (do_monitors
   10eee:	68a3      	ldr	r3, [r4, #8]
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d15a      	bne.n	10faa <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   10ef4:	b90d      	cbnz	r5, 10efa <process_event+0x76>
		    || (transit != NULL)) {
   10ef6:	2e00      	cmp	r6, #0
   10ef8:	d071      	beq.n	10fde <process_event+0x15a>
   10efa:	2300      	movs	r3, #0
   10efc:	e056      	b.n	10fac <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10efe:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10f02:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10f04:	2a01      	cmp	r2, #1
   10f06:	d81e      	bhi.n	10f46 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f08:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10f0c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10f0e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f10:	b289      	uxth	r1, r1
   10f12:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10f16:	d10a      	bne.n	10f2e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10f18:	b13d      	cbz	r5, 10f2a <process_event+0xa6>
   10f1a:	8b63      	ldrh	r3, [r4, #26]
   10f1c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   10f1e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   10f20:	3301      	adds	r3, #1
   10f22:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10f24:	2a00      	cmp	r2, #0
   10f26:	d1fa      	bne.n	10f1e <process_event+0x9a>
   10f28:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f2a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10f2e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10f30:	4620      	mov	r0, r4
   10f32:	f00e fcbc 	bl	1f8ae <process_recheck>
   10f36:	4606      	mov	r6, r0
   10f38:	2800      	cmp	r0, #0
   10f3a:	d0d3      	beq.n	10ee4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10f3c:	8b23      	ldrh	r3, [r4, #24]
   10f3e:	f043 0320 	orr.w	r3, r3, #32
   10f42:	8323      	strh	r3, [r4, #24]
   10f44:	e7cd      	b.n	10ee2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10f46:	2b04      	cmp	r3, #4
   10f48:	d10c      	bne.n	10f64 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f4a:	f021 0107 	bic.w	r1, r1, #7
   10f4e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10f50:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10f52:	4620      	mov	r0, r4
   10f54:	f00e fcab 	bl	1f8ae <process_recheck>
   10f58:	4605      	mov	r5, r0
   10f5a:	2800      	cmp	r0, #0
   10f5c:	d0c1      	beq.n	10ee2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10f5e:	f041 0120 	orr.w	r1, r1, #32
   10f62:	8321      	strh	r1, [r4, #24]
   10f64:	2500      	movs	r5, #0
   10f66:	e7bc      	b.n	10ee2 <process_event+0x5e>
		} else if (evt == EVT_START) {
   10f68:	2803      	cmp	r0, #3
   10f6a:	d109      	bne.n	10f80 <process_event+0xfc>
			transit = mgr->transitions->start;
   10f6c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f6e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10f72:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f74:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10f78:	8323      	strh	r3, [r4, #24]
}
   10f7a:	2500      	movs	r5, #0
		res = 0;
   10f7c:	462f      	mov	r7, r5
   10f7e:	e7b1      	b.n	10ee4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   10f80:	2804      	cmp	r0, #4
   10f82:	d106      	bne.n	10f92 <process_event+0x10e>
			transit = mgr->transitions->stop;
   10f84:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f86:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   10f8a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f8c:	f043 0304 	orr.w	r3, r3, #4
   10f90:	e7f2      	b.n	10f78 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   10f92:	2805      	cmp	r0, #5
   10f94:	d106      	bne.n	10fa4 <process_event+0x120>
			transit = mgr->transitions->reset;
   10f96:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f98:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   10f9c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10f9e:	f043 0305 	orr.w	r3, r3, #5
   10fa2:	e7e9      	b.n	10f78 <process_event+0xf4>
   10fa4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10fa6:	462e      	mov	r6, r5
   10fa8:	e7e8      	b.n	10f7c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   10faa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10fac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10fb0:	8321      	strh	r1, [r4, #24]
   10fb2:	f38b 8811 	msr	BASEPRI, fp
   10fb6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10fba:	b9fb      	cbnz	r3, 10ffc <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   10fbc:	bb85      	cbnz	r5, 11020 <process_event+0x19c>
			if (transit != NULL) {
   10fbe:	b116      	cbz	r6, 10fc6 <process_event+0x142>
				transit(mgr, transition_complete);
   10fc0:	491f      	ldr	r1, [pc, #124]	; (11040 <process_event+0x1bc>)
   10fc2:	4620      	mov	r0, r4
   10fc4:	47b0      	blx	r6
	__asm__ volatile(
   10fc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   10fca:	f3ef 8b11 	mrs	fp, BASEPRI
   10fce:	f383 8812 	msr	BASEPRI_MAX, r3
   10fd2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10fd6:	8b23      	ldrh	r3, [r4, #24]
   10fd8:	f023 0308 	bic.w	r3, r3, #8
   10fdc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10fde:	8b23      	ldrh	r3, [r4, #24]
   10fe0:	06da      	lsls	r2, r3, #27
   10fe2:	d525      	bpl.n	11030 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10fe4:	f023 0310 	bic.w	r3, r3, #16
   10fe8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10fea:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10fec:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10ff0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10ff4:	2900      	cmp	r1, #0
   10ff6:	f47f af5e 	bne.w	10eb6 <process_event+0x32>
out:
   10ffa:	e754      	b.n	10ea6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10ffc:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10ffe:	2900      	cmp	r1, #0
   11000:	d0dc      	beq.n	10fbc <process_event+0x138>
	return node->next;
   11002:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   11006:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1100a:	463b      	mov	r3, r7
   1100c:	4652      	mov	r2, sl
   1100e:	4620      	mov	r0, r4
   11010:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11012:	f1b9 0f00 	cmp.w	r9, #0
   11016:	d0d1      	beq.n	10fbc <process_event+0x138>
   11018:	4649      	mov	r1, r9
   1101a:	f8d9 9000 	ldr.w	r9, [r9]
   1101e:	e7f2      	b.n	11006 <process_event+0x182>
   11020:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   11022:	463b      	mov	r3, r7
   11024:	4652      	mov	r2, sl
   11026:	4620      	mov	r0, r4
   11028:	682d      	ldr	r5, [r5, #0]
   1102a:	f00e fc5c 	bl	1f8e6 <notify_one>
   1102e:	e7c5      	b.n	10fbc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11030:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11034:	bf1e      	ittt	ne
   11036:	f023 0320 	bicne.w	r3, r3, #32
   1103a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1103c:	2102      	movne	r1, #2
   1103e:	e7d5      	b.n	10fec <process_event+0x168>
   11040:	0001f913 	.word	0x0001f913

00011044 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11048:	b091      	sub	sp, #68	; 0x44
   1104a:	468b      	mov	fp, r1
   1104c:	9002      	str	r0, [sp, #8]
   1104e:	4692      	mov	sl, r2
   11050:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11052:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11054:	f89a 0000 	ldrb.w	r0, [sl]
   11058:	b908      	cbnz	r0, 1105e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1105a:	4628      	mov	r0, r5
   1105c:	e363      	b.n	11726 <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
   1105e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11060:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   11064:	d007      	beq.n	11076 <z_cbvprintf_impl+0x32>
			OUTC('%');
   11066:	9b02      	ldr	r3, [sp, #8]
   11068:	4659      	mov	r1, fp
   1106a:	4798      	blx	r3
   1106c:	2800      	cmp	r0, #0
   1106e:	f2c0 835a 	blt.w	11726 <z_cbvprintf_impl+0x6e2>
   11072:	3501      	adds	r5, #1
			break;
   11074:	e212      	b.n	1149c <z_cbvprintf_impl+0x458>
		} state = {
   11076:	2218      	movs	r2, #24
   11078:	2100      	movs	r1, #0
   1107a:	a80a      	add	r0, sp, #40	; 0x28
   1107c:	f010 fcc7 	bl	21a0e <memset>
	if (*sp == '%') {
   11080:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11084:	2b25      	cmp	r3, #37	; 0x25
   11086:	d078      	beq.n	1117a <z_cbvprintf_impl+0x136>
   11088:	2200      	movs	r2, #0
   1108a:	4610      	mov	r0, r2
   1108c:	4696      	mov	lr, r2
   1108e:	4694      	mov	ip, r2
   11090:	4616      	mov	r6, r2
   11092:	4639      	mov	r1, r7
		switch (*sp) {
   11094:	f817 3b01 	ldrb.w	r3, [r7], #1
   11098:	2b2b      	cmp	r3, #43	; 0x2b
   1109a:	f000 809d 	beq.w	111d8 <z_cbvprintf_impl+0x194>
   1109e:	f200 8094 	bhi.w	111ca <z_cbvprintf_impl+0x186>
   110a2:	2b20      	cmp	r3, #32
   110a4:	f000 809b 	beq.w	111de <z_cbvprintf_impl+0x19a>
   110a8:	2b23      	cmp	r3, #35	; 0x23
   110aa:	f000 809b 	beq.w	111e4 <z_cbvprintf_impl+0x1a0>
   110ae:	b12e      	cbz	r6, 110bc <z_cbvprintf_impl+0x78>
   110b0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   110b4:	f046 0604 	orr.w	r6, r6, #4
   110b8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   110bc:	f1bc 0f00 	cmp.w	ip, #0
   110c0:	d005      	beq.n	110ce <z_cbvprintf_impl+0x8a>
   110c2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   110c6:	f046 0608 	orr.w	r6, r6, #8
   110ca:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   110ce:	f1be 0f00 	cmp.w	lr, #0
   110d2:	d005      	beq.n	110e0 <z_cbvprintf_impl+0x9c>
   110d4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   110d8:	f046 0610 	orr.w	r6, r6, #16
   110dc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   110e0:	b128      	cbz	r0, 110ee <z_cbvprintf_impl+0xaa>
   110e2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   110e6:	f040 0020 	orr.w	r0, r0, #32
   110ea:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   110ee:	b12a      	cbz	r2, 110fc <z_cbvprintf_impl+0xb8>
   110f0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   110f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   110fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11100:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11104:	2844      	cmp	r0, #68	; 0x44
   11106:	d103      	bne.n	11110 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   11108:	f36f 1286 	bfc	r2, #6, #1
   1110c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11110:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11114:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11116:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1111a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1111e:	d17b      	bne.n	11218 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
   11120:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11124:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   11128:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1112a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1112e:	781a      	ldrb	r2, [r3, #0]
   11130:	2a2e      	cmp	r2, #46	; 0x2e
   11132:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11136:	bf0c      	ite	eq
   11138:	2101      	moveq	r1, #1
   1113a:	2100      	movne	r1, #0
   1113c:	f361 0241 	bfi	r2, r1, #1, #1
   11140:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11144:	d174      	bne.n	11230 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
   11146:	785a      	ldrb	r2, [r3, #1]
   11148:	2a2a      	cmp	r2, #42	; 0x2a
   1114a:	d06a      	beq.n	11222 <z_cbvprintf_impl+0x1de>
	++sp;
   1114c:	3301      	adds	r3, #1
	size_t val = 0;
   1114e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11150:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11152:	4618      	mov	r0, r3
   11154:	f810 2b01 	ldrb.w	r2, [r0], #1
   11158:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1115c:	2f09      	cmp	r7, #9
   1115e:	f240 808e 	bls.w	1127e <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11162:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   11166:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11168:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1116c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   11170:	f361 0241 	bfi	r2, r1, #1, #1
   11174:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11178:	e05a      	b.n	11230 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
   1117a:	f10a 0702 	add.w	r7, sl, #2
   1117e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   11182:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11186:	07d9      	lsls	r1, r3, #31
   11188:	f140 8149 	bpl.w	1141e <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
   1118c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   11190:	f1b9 0f00 	cmp.w	r9, #0
   11194:	da07      	bge.n	111a6 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
   11196:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1119a:	f042 0204 	orr.w	r2, r2, #4
   1119e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   111a2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   111a6:	075a      	lsls	r2, r3, #29
   111a8:	f140 8142 	bpl.w	11430 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
   111ac:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   111b0:	f1b8 0f00 	cmp.w	r8, #0
   111b4:	f280 8141 	bge.w	1143a <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
   111b8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   111bc:	f36f 0341 	bfc	r3, #1, #1
   111c0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   111c4:	f04f 38ff 	mov.w	r8, #4294967295
   111c8:	e137      	b.n	1143a <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
   111ca:	2b2d      	cmp	r3, #45	; 0x2d
   111cc:	d00c      	beq.n	111e8 <z_cbvprintf_impl+0x1a4>
   111ce:	2b30      	cmp	r3, #48	; 0x30
   111d0:	f47f af6d 	bne.w	110ae <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
   111d4:	2201      	movs	r2, #1
	} while (loop);
   111d6:	e75c      	b.n	11092 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
   111d8:	f04f 0c01 	mov.w	ip, #1
   111dc:	e759      	b.n	11092 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
   111de:	f04f 0e01 	mov.w	lr, #1
   111e2:	e756      	b.n	11092 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
   111e4:	2001      	movs	r0, #1
   111e6:	e754      	b.n	11092 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   111e8:	2601      	movs	r6, #1
   111ea:	e752      	b.n	11092 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
   111ec:	fb0c 0202 	mla	r2, ip, r2, r0
   111f0:	3a30      	subs	r2, #48	; 0x30
   111f2:	4633      	mov	r3, r6
   111f4:	461e      	mov	r6, r3
   111f6:	f816 0b01 	ldrb.w	r0, [r6], #1
   111fa:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   111fe:	2f09      	cmp	r7, #9
   11200:	d9f4      	bls.n	111ec <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
   11202:	4299      	cmp	r1, r3
   11204:	d093      	beq.n	1112e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11206:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1120a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   1120c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1120e:	f362 0141 	bfi	r1, r2, #1, #1
   11212:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   11216:	e78a      	b.n	1112e <z_cbvprintf_impl+0xea>
   11218:	460b      	mov	r3, r1
	size_t val = 0;
   1121a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1121c:	f04f 0c0a 	mov.w	ip, #10
   11220:	e7e8      	b.n	111f4 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
   11222:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11226:	f042 0204 	orr.w	r2, r2, #4
   1122a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1122e:	3302      	adds	r3, #2
	switch (*sp) {
   11230:	461f      	mov	r7, r3
   11232:	f817 2b01 	ldrb.w	r2, [r7], #1
   11236:	2a6c      	cmp	r2, #108	; 0x6c
   11238:	d041      	beq.n	112be <z_cbvprintf_impl+0x27a>
   1123a:	d825      	bhi.n	11288 <z_cbvprintf_impl+0x244>
   1123c:	2a68      	cmp	r2, #104	; 0x68
   1123e:	d02b      	beq.n	11298 <z_cbvprintf_impl+0x254>
   11240:	2a6a      	cmp	r2, #106	; 0x6a
   11242:	d046      	beq.n	112d2 <z_cbvprintf_impl+0x28e>
   11244:	2a4c      	cmp	r2, #76	; 0x4c
   11246:	d04c      	beq.n	112e2 <z_cbvprintf_impl+0x29e>
   11248:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1124a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1124e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   11252:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   11256:	2a78      	cmp	r2, #120	; 0x78
   11258:	f200 80d9 	bhi.w	1140e <z_cbvprintf_impl+0x3ca>
   1125c:	2a57      	cmp	r2, #87	; 0x57
   1125e:	d84d      	bhi.n	112fc <z_cbvprintf_impl+0x2b8>
   11260:	2a41      	cmp	r2, #65	; 0x41
   11262:	d003      	beq.n	1126c <z_cbvprintf_impl+0x228>
   11264:	3a45      	subs	r2, #69	; 0x45
   11266:	2a02      	cmp	r2, #2
   11268:	f200 80d1 	bhi.w	1140e <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   1126c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11270:	2204      	movs	r2, #4
   11272:	f362 0302 	bfi	r3, r2, #0, #3
   11276:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   1127a:	2301      	movs	r3, #1
			break;
   1127c:	e09e      	b.n	113bc <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
   1127e:	fb06 2101 	mla	r1, r6, r1, r2
   11282:	3930      	subs	r1, #48	; 0x30
   11284:	4603      	mov	r3, r0
   11286:	e764      	b.n	11152 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
   11288:	2a74      	cmp	r2, #116	; 0x74
   1128a:	d026      	beq.n	112da <z_cbvprintf_impl+0x296>
   1128c:	2a7a      	cmp	r2, #122	; 0x7a
   1128e:	d1db      	bne.n	11248 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
   11290:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11294:	2206      	movs	r2, #6
   11296:	e00d      	b.n	112b4 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
   11298:	785a      	ldrb	r2, [r3, #1]
   1129a:	2a68      	cmp	r2, #104	; 0x68
   1129c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   112a0:	d106      	bne.n	112b0 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
   112a2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   112a4:	f361 02c6 	bfi	r2, r1, #3, #4
   112a8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   112ac:	1c9f      	adds	r7, r3, #2
   112ae:	e7cc      	b.n	1124a <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
   112b0:	4613      	mov	r3, r2
   112b2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   112b4:	f362 03c6 	bfi	r3, r2, #3, #4
   112b8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   112bc:	e7c5      	b.n	1124a <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
   112be:	785a      	ldrb	r2, [r3, #1]
   112c0:	2a6c      	cmp	r2, #108	; 0x6c
   112c2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   112c6:	d101      	bne.n	112cc <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
   112c8:	2104      	movs	r1, #4
   112ca:	e7eb      	b.n	112a4 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
   112cc:	4613      	mov	r3, r2
   112ce:	2203      	movs	r2, #3
   112d0:	e7f0      	b.n	112b4 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
   112d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   112d6:	2205      	movs	r2, #5
   112d8:	e7ec      	b.n	112b4 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
   112da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   112de:	2207      	movs	r2, #7
   112e0:	e7e8      	b.n	112b4 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
   112e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   112e6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   112ea:	f023 0302 	bic.w	r3, r3, #2
   112ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   112f2:	f043 0302 	orr.w	r3, r3, #2
   112f6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   112fa:	e7a6      	b.n	1124a <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
   112fc:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11300:	2920      	cmp	r1, #32
   11302:	f200 8084 	bhi.w	1140e <z_cbvprintf_impl+0x3ca>
   11306:	a001      	add	r0, pc, #4	; (adr r0, 1130c <z_cbvprintf_impl+0x2c8>)
   11308:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1130c:	000113d1 	.word	0x000113d1
   11310:	0001140f 	.word	0x0001140f
   11314:	0001140f 	.word	0x0001140f
   11318:	0001140f 	.word	0x0001140f
   1131c:	0001140f 	.word	0x0001140f
   11320:	0001140f 	.word	0x0001140f
   11324:	0001140f 	.word	0x0001140f
   11328:	0001140f 	.word	0x0001140f
   1132c:	0001140f 	.word	0x0001140f
   11330:	0001126d 	.word	0x0001126d
   11334:	0001140f 	.word	0x0001140f
   11338:	000113d1 	.word	0x000113d1
   1133c:	00011391 	.word	0x00011391
   11340:	0001126d 	.word	0x0001126d
   11344:	0001126d 	.word	0x0001126d
   11348:	0001126d 	.word	0x0001126d
   1134c:	0001140f 	.word	0x0001140f
   11350:	00011391 	.word	0x00011391
   11354:	0001140f 	.word	0x0001140f
   11358:	0001140f 	.word	0x0001140f
   1135c:	0001140f 	.word	0x0001140f
   11360:	0001140f 	.word	0x0001140f
   11364:	000113d9 	.word	0x000113d9
   11368:	000113d1 	.word	0x000113d1
   1136c:	000113f5 	.word	0x000113f5
   11370:	0001140f 	.word	0x0001140f
   11374:	0001140f 	.word	0x0001140f
   11378:	000113f5 	.word	0x000113f5
   1137c:	0001140f 	.word	0x0001140f
   11380:	000113d1 	.word	0x000113d1
   11384:	0001140f 	.word	0x0001140f
   11388:	0001140f 	.word	0x0001140f
   1138c:	000113d1 	.word	0x000113d1
		conv->specifier_cat = SPECIFIER_SINT;
   11390:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11394:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   11396:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1139a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1139e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   113a0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   113a4:	bf02      	ittt	eq
   113a6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   113aa:	f041 0101 	orreq.w	r1, r1, #1
   113ae:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   113b2:	2a63      	cmp	r2, #99	; 0x63
   113b4:	d131      	bne.n	1141a <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   113b6:	3b00      	subs	r3, #0
   113b8:	bf18      	it	ne
   113ba:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   113bc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   113c0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   113c4:	430b      	orrs	r3, r1
   113c6:	f363 0241 	bfi	r2, r3, #1, #1
   113ca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   113ce:	e6d8      	b.n	11182 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   113d0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   113d4:	2002      	movs	r0, #2
   113d6:	e7de      	b.n	11396 <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   113d8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   113dc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   113e0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   113e4:	2103      	movs	r1, #3
   113e6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   113ea:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   113ec:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   113f0:	4143      	adcs	r3, r0
   113f2:	e7e3      	b.n	113bc <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   113f4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   113f8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   113fa:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   113fe:	f361 0202 	bfi	r2, r1, #0, #3
   11402:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   11406:	bf14      	ite	ne
   11408:	2301      	movne	r3, #1
   1140a:	2300      	moveq	r3, #0
   1140c:	e7d6      	b.n	113bc <z_cbvprintf_impl+0x378>
		conv->invalid = true;
   1140e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11412:	f043 0301 	orr.w	r3, r3, #1
   11416:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1141a:	2300      	movs	r3, #0
   1141c:	e7ce      	b.n	113bc <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
   1141e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   11422:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11424:	bfb4      	ite	lt
   11426:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1142a:	f04f 39ff 	movge.w	r9, #4294967295
   1142e:	e6ba      	b.n	111a6 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
   11430:	079b      	lsls	r3, r3, #30
   11432:	f57f aec7 	bpl.w	111c4 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
   11436:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   1143a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   1143e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11440:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   11444:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   11448:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1144c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1144e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11452:	d135      	bne.n	114c0 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
   11454:	1ecb      	subs	r3, r1, #3
   11456:	2b04      	cmp	r3, #4
   11458:	d822      	bhi.n	114a0 <z_cbvprintf_impl+0x45c>
   1145a:	e8df f003 	tbb	[pc, r3]
   1145e:	0903      	.short	0x0903
   11460:	2109      	.short	0x2109
   11462:	21          	.byte	0x21
   11463:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11464:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   11468:	17da      	asrs	r2, r3, #31
   1146a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   1146e:	e006      	b.n	1147e <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   11470:	3407      	adds	r4, #7
   11472:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   11476:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1147a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   1147e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11482:	f013 0603 	ands.w	r6, r3, #3
   11486:	d059      	beq.n	1153c <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
   11488:	9802      	ldr	r0, [sp, #8]
   1148a:	463b      	mov	r3, r7
   1148c:	4652      	mov	r2, sl
   1148e:	4659      	mov	r1, fp
   11490:	f00e fcce 	bl	1fe30 <outs>
   11494:	2800      	cmp	r0, #0
   11496:	f2c0 8146 	blt.w	11726 <z_cbvprintf_impl+0x6e2>
   1149a:	4405      	add	r5, r0
			continue;
   1149c:	46ba      	mov	sl, r7
   1149e:	e5d9      	b.n	11054 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   114a0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   114a4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   114a6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   114aa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   114ae:	d102      	bne.n	114b6 <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
   114b0:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   114b4:	e7d8      	b.n	11468 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
   114b6:	2902      	cmp	r1, #2
   114b8:	d1e1      	bne.n	1147e <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
   114ba:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   114be:	e7d3      	b.n	11468 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   114c0:	2b02      	cmp	r3, #2
   114c2:	d129      	bne.n	11518 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
   114c4:	1ecb      	subs	r3, r1, #3
   114c6:	2b04      	cmp	r3, #4
   114c8:	d813      	bhi.n	114f2 <z_cbvprintf_impl+0x4ae>
   114ca:	e8df f003 	tbb	[pc, r3]
   114ce:	0a03      	.short	0x0a03
   114d0:	120a      	.short	0x120a
   114d2:	12          	.byte	0x12
   114d3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   114d4:	6822      	ldr	r2, [r4, #0]
   114d6:	920a      	str	r2, [sp, #40]	; 0x28
   114d8:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   114da:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   114dc:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   114de:	4604      	mov	r4, r0
   114e0:	e7cd      	b.n	1147e <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
   114e2:	1de0      	adds	r0, r4, #7
   114e4:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   114e8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   114ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   114f0:	e7f5      	b.n	114de <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
   114f2:	f854 3b04 	ldr.w	r3, [r4], #4
   114f6:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   114f8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   114fa:	f04f 0300 	mov.w	r3, #0
   114fe:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   11500:	d105      	bne.n	1150e <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
   11502:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   11506:	930a      	str	r3, [sp, #40]	; 0x28
   11508:	2300      	movs	r3, #0
   1150a:	930b      	str	r3, [sp, #44]	; 0x2c
   1150c:	e7b7      	b.n	1147e <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
   1150e:	2902      	cmp	r1, #2
   11510:	d1b5      	bne.n	1147e <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
   11512:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11516:	e7f6      	b.n	11506 <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
   11518:	2b04      	cmp	r3, #4
   1151a:	d109      	bne.n	11530 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   1151c:	1de3      	adds	r3, r4, #7
   1151e:	f023 0307 	bic.w	r3, r3, #7
   11522:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   11526:	e9d3 2300 	ldrd	r2, r3, [r3]
   1152a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1152e:	e7a6      	b.n	1147e <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11530:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11532:	bf04      	itt	eq
   11534:	f854 3b04 	ldreq.w	r3, [r4], #4
   11538:	930a      	streq	r3, [sp, #40]	; 0x28
   1153a:	e7a0      	b.n	1147e <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
   1153c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11540:	2878      	cmp	r0, #120	; 0x78
   11542:	d8ab      	bhi.n	1149c <z_cbvprintf_impl+0x458>
   11544:	2862      	cmp	r0, #98	; 0x62
   11546:	d822      	bhi.n	1158e <z_cbvprintf_impl+0x54a>
   11548:	2825      	cmp	r0, #37	; 0x25
   1154a:	f43f ad8c 	beq.w	11066 <z_cbvprintf_impl+0x22>
   1154e:	2858      	cmp	r0, #88	; 0x58
   11550:	d1a4      	bne.n	1149c <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11552:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11556:	9300      	str	r3, [sp, #0]
   11558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1155c:	ab04      	add	r3, sp, #16
   1155e:	aa0c      	add	r2, sp, #48	; 0x30
   11560:	f00e fc20 	bl	1fda4 <encode_uint>
   11564:	4682      	mov	sl, r0
			if (precision >= 0) {
   11566:	f1b8 0f00 	cmp.w	r8, #0
   1156a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1156e:	db0c      	blt.n	1158a <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
   11570:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   11574:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   11578:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1157c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1157e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   11582:	d902      	bls.n	1158a <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
   11584:	eba8 0303 	sub.w	r3, r8, r3
   11588:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1158a:	4680      	mov	r8, r0
   1158c:	e03e      	b.n	1160c <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
   1158e:	3863      	subs	r0, #99	; 0x63
   11590:	2815      	cmp	r0, #21
   11592:	d883      	bhi.n	1149c <z_cbvprintf_impl+0x458>
   11594:	a201      	add	r2, pc, #4	; (adr r2, 1159c <z_cbvprintf_impl+0x558>)
   11596:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1159a:	bf00      	nop
   1159c:	0001161d 	.word	0x0001161d
   115a0:	00011681 	.word	0x00011681
   115a4:	0001149d 	.word	0x0001149d
   115a8:	0001149d 	.word	0x0001149d
   115ac:	0001149d 	.word	0x0001149d
   115b0:	0001149d 	.word	0x0001149d
   115b4:	00011681 	.word	0x00011681
   115b8:	0001149d 	.word	0x0001149d
   115bc:	0001149d 	.word	0x0001149d
   115c0:	0001149d 	.word	0x0001149d
   115c4:	0001149d 	.word	0x0001149d
   115c8:	000116db 	.word	0x000116db
   115cc:	000116a9 	.word	0x000116a9
   115d0:	000116ad 	.word	0x000116ad
   115d4:	0001149d 	.word	0x0001149d
   115d8:	0001149d 	.word	0x0001149d
   115dc:	000115f5 	.word	0x000115f5
   115e0:	0001149d 	.word	0x0001149d
   115e4:	000116a9 	.word	0x000116a9
   115e8:	0001149d 	.word	0x0001149d
   115ec:	0001149d 	.word	0x0001149d
   115f0:	000116a9 	.word	0x000116a9
			if (precision >= 0) {
   115f4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   115f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   115fc:	db0a      	blt.n	11614 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
   115fe:	4641      	mov	r1, r8
   11600:	4650      	mov	r0, sl
   11602:	f010 f9c2 	bl	2198a <strnlen>
			bpe = bps + len;
   11606:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1160a:	2600      	movs	r6, #0
		if (bps == NULL) {
   1160c:	f1ba 0f00 	cmp.w	sl, #0
   11610:	d10c      	bne.n	1162c <z_cbvprintf_impl+0x5e8>
   11612:	e743      	b.n	1149c <z_cbvprintf_impl+0x458>
				len = strlen(bps);
   11614:	4650      	mov	r0, sl
   11616:	f010 f9b1 	bl	2197c <strlen>
   1161a:	e7f4      	b.n	11606 <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1161c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1161e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   11622:	2600      	movs	r6, #0
			bps = buf;
   11624:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   11628:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   1162c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   11630:	b106      	cbz	r6, 11634 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
   11632:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   11634:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11638:	06d0      	lsls	r0, r2, #27
   1163a:	d568      	bpl.n	1170e <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
   1163c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1163e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11640:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   11642:	bf48      	it	mi
   11644:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   11646:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   11648:	bf48      	it	mi
   1164a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1164c:	f1b9 0f00 	cmp.w	r9, #0
   11650:	dd76      	ble.n	11740 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
   11652:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   11656:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1165a:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1165e:	9303      	str	r3, [sp, #12]
   11660:	0753      	lsls	r3, r2, #29
   11662:	d46d      	bmi.n	11740 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
   11664:	0650      	lsls	r0, r2, #25
   11666:	d561      	bpl.n	1172c <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
   11668:	b146      	cbz	r6, 1167c <z_cbvprintf_impl+0x638>
						OUTC(sign);
   1166a:	9b02      	ldr	r3, [sp, #8]
   1166c:	4659      	mov	r1, fp
   1166e:	4630      	mov	r0, r6
   11670:	4798      	blx	r3
   11672:	2800      	cmp	r0, #0
   11674:	db57      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
						sign = 0;
   11676:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11678:	3501      	adds	r5, #1
						sign = 0;
   1167a:	461e      	mov	r6, r3
					pad = '0';
   1167c:	2330      	movs	r3, #48	; 0x30
   1167e:	e056      	b.n	1172e <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
   11680:	071e      	lsls	r6, r3, #28
   11682:	d40f      	bmi.n	116a4 <z_cbvprintf_impl+0x660>
				sign = ' ';
   11684:	f013 0610 	ands.w	r6, r3, #16
   11688:	bf18      	it	ne
   1168a:	2620      	movne	r6, #32
			sint = value->sint;
   1168c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   11690:	2b00      	cmp	r3, #0
   11692:	f6bf af5e 	bge.w	11552 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
   11696:	4252      	negs	r2, r2
   11698:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1169c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   116a0:	262d      	movs	r6, #45	; 0x2d
   116a2:	e756      	b.n	11552 <z_cbvprintf_impl+0x50e>
				sign = '+';
   116a4:	262b      	movs	r6, #43	; 0x2b
   116a6:	e7f1      	b.n	1168c <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
   116a8:	2600      	movs	r6, #0
   116aa:	e752      	b.n	11552 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
   116ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   116ae:	b340      	cbz	r0, 11702 <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   116b0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   116b4:	9300      	str	r3, [sp, #0]
   116b6:	aa0c      	add	r2, sp, #48	; 0x30
   116b8:	ab04      	add	r3, sp, #16
   116ba:	2100      	movs	r1, #0
   116bc:	f00e fb72 	bl	1fda4 <encode_uint>
				conv->altform_0c = true;
   116c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   116c4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   116c8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   116cc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   116d0:	4682      	mov	sl, r0
				conv->altform_0c = true;
   116d2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   116d6:	2600      	movs	r6, #0
				goto prec_int_pad0;
   116d8:	e745      	b.n	11566 <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
   116da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   116dc:	2907      	cmp	r1, #7
   116de:	f63f aedd 	bhi.w	1149c <z_cbvprintf_impl+0x458>
   116e2:	e8df f001 	tbb	[pc, r1]
   116e6:	040c      	.short	0x040c
   116e8:	08080c06 	.word	0x08080c06
   116ec:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   116ee:	701d      	strb	r5, [r3, #0]
		break;
   116f0:	e6d4      	b.n	1149c <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
   116f2:	801d      	strh	r5, [r3, #0]
		break;
   116f4:	e6d2      	b.n	1149c <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   116f6:	17ea      	asrs	r2, r5, #31
   116f8:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   116fc:	e6ce      	b.n	1149c <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   116fe:	601d      	str	r5, [r3, #0]
		break;
   11700:	e6cc      	b.n	1149c <z_cbvprintf_impl+0x458>
			bps = "(nil)";
   11702:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 117cc <z_cbvprintf_impl+0x788>
   11706:	4606      	mov	r6, r0
			bpe = bps + 5;
   11708:	f10a 0805 	add.w	r8, sl, #5
   1170c:	e78e      	b.n	1162c <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
   1170e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   11710:	bf48      	it	mi
   11712:	3301      	addmi	r3, #1
   11714:	e793      	b.n	1163e <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
   11716:	4618      	mov	r0, r3
   11718:	9303      	str	r3, [sp, #12]
   1171a:	4659      	mov	r1, fp
   1171c:	9b02      	ldr	r3, [sp, #8]
   1171e:	4798      	blx	r3
   11720:	2800      	cmp	r0, #0
   11722:	9b03      	ldr	r3, [sp, #12]
   11724:	da04      	bge.n	11730 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
   11726:	b011      	add	sp, #68	; 0x44
   11728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1172c:	2320      	movs	r3, #32
   1172e:	444d      	add	r5, r9
   11730:	464a      	mov	r2, r9
				while (width-- > 0) {
   11732:	2a00      	cmp	r2, #0
   11734:	eba5 0109 	sub.w	r1, r5, r9
   11738:	f109 39ff 	add.w	r9, r9, #4294967295
   1173c:	dceb      	bgt.n	11716 <z_cbvprintf_impl+0x6d2>
   1173e:	460d      	mov	r5, r1
		if (sign != 0) {
   11740:	b136      	cbz	r6, 11750 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
   11742:	9b02      	ldr	r3, [sp, #8]
   11744:	4659      	mov	r1, fp
   11746:	4630      	mov	r0, r6
   11748:	4798      	blx	r3
   1174a:	2800      	cmp	r0, #0
   1174c:	dbeb      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
   1174e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11750:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11754:	06d9      	lsls	r1, r3, #27
   11756:	d401      	bmi.n	1175c <z_cbvprintf_impl+0x718>
   11758:	071a      	lsls	r2, r3, #28
   1175a:	d506      	bpl.n	1176a <z_cbvprintf_impl+0x726>
				OUTC('0');
   1175c:	9b02      	ldr	r3, [sp, #8]
   1175e:	4659      	mov	r1, fp
   11760:	2030      	movs	r0, #48	; 0x30
   11762:	4798      	blx	r3
   11764:	2800      	cmp	r0, #0
   11766:	dbde      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
   11768:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1176a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1176e:	06db      	lsls	r3, r3, #27
   11770:	d507      	bpl.n	11782 <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
   11772:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11776:	9b02      	ldr	r3, [sp, #8]
   11778:	4659      	mov	r1, fp
   1177a:	4798      	blx	r3
   1177c:	2800      	cmp	r0, #0
   1177e:	dbd2      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
   11780:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11782:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11784:	442e      	add	r6, r5
   11786:	1b73      	subs	r3, r6, r5
   11788:	2b00      	cmp	r3, #0
   1178a:	dc16      	bgt.n	117ba <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
   1178c:	9802      	ldr	r0, [sp, #8]
   1178e:	4643      	mov	r3, r8
   11790:	4652      	mov	r2, sl
   11792:	4659      	mov	r1, fp
   11794:	f00e fb4c 	bl	1fe30 <outs>
   11798:	2800      	cmp	r0, #0
   1179a:	dbc4      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
   1179c:	4405      	add	r5, r0
		while (width > 0) {
   1179e:	44a9      	add	r9, r5
   117a0:	eba9 0305 	sub.w	r3, r9, r5
   117a4:	2b00      	cmp	r3, #0
   117a6:	f77f ae79 	ble.w	1149c <z_cbvprintf_impl+0x458>
			OUTC(' ');
   117aa:	9b02      	ldr	r3, [sp, #8]
   117ac:	4659      	mov	r1, fp
   117ae:	2020      	movs	r0, #32
   117b0:	4798      	blx	r3
   117b2:	2800      	cmp	r0, #0
   117b4:	dbb7      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
   117b6:	3501      	adds	r5, #1
			--width;
   117b8:	e7f2      	b.n	117a0 <z_cbvprintf_impl+0x75c>
				OUTC('0');
   117ba:	9b02      	ldr	r3, [sp, #8]
   117bc:	4659      	mov	r1, fp
   117be:	2030      	movs	r0, #48	; 0x30
   117c0:	4798      	blx	r3
   117c2:	2800      	cmp	r0, #0
   117c4:	dbaf      	blt.n	11726 <z_cbvprintf_impl+0x6e2>
   117c6:	3501      	adds	r5, #1
   117c8:	e7dd      	b.n	11786 <z_cbvprintf_impl+0x742>
   117ca:	bf00      	nop
   117cc:	00027346 	.word	0x00027346

000117d0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   117d0:	f00c b856 	b.w	1d880 <SystemInit>

000117d4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   117d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   117d8:	460f      	mov	r7, r1
   117da:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   117dc:	2108      	movs	r1, #8
   117de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   117e0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 11834 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   117e4:	f00e fbd3 	bl	1ff8e <nvs_al_size.isra.0>
	*addr -= ate_size;
   117e8:	683c      	ldr	r4, [r7, #0]
   117ea:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   117ec:	4680      	mov	r8, r0
	*addr -= ate_size;
   117ee:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   117f0:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   117f4:	42ac      	cmp	r4, r5
   117f6:	d803      	bhi.n	11800 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   117f8:	2000      	movs	r0, #0
}
   117fa:	b003      	add	sp, #12
   117fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11800:	2308      	movs	r3, #8
   11802:	466a      	mov	r2, sp
   11804:	4621      	mov	r1, r4
   11806:	4630      	mov	r0, r6
   11808:	f00e fb36 	bl	1fe78 <nvs_flash_rd>
		if (rc) {
   1180c:	2800      	cmp	r0, #0
   1180e:	d1f4      	bne.n	117fa <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   11810:	4669      	mov	r1, sp
   11812:	4630      	mov	r0, r6
   11814:	f00e fbc5 	bl	1ffa2 <nvs_ate_valid>
   11818:	b140      	cbz	r0, 1182c <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   1181a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1181e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   11822:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   11824:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   11828:	4413      	add	r3, r2
   1182a:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   1182c:	eba4 0408 	sub.w	r4, r4, r8
   11830:	e7e0      	b.n	117f4 <nvs_recover_last_ate+0x20>
   11832:	bf00      	nop
   11834:	ffff0000 	.word	0xffff0000

00011838 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   11838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1183c:	4604      	mov	r4, r0
   1183e:	b089      	sub	sp, #36	; 0x24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   11840:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   11844:	4638      	mov	r0, r7
   11846:	f014 f82a 	bl	2589e <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1184a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1184c:	6883      	ldr	r3, [r0, #8]
   1184e:	68db      	ldr	r3, [r3, #12]
   11850:	4798      	blx	r3
   11852:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   11854:	b928      	cbnz	r0, 11862 <nvs_mount+0x2a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   11856:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1185a:	4628      	mov	r0, r5
   1185c:	b009      	add	sp, #36	; 0x24
   1185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   11862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   11864:	6883      	ldr	r3, [r0, #8]
   11866:	68db      	ldr	r3, [r3, #12]
   11868:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1186a:	6803      	ldr	r3, [r0, #0]
   1186c:	3b01      	subs	r3, #1
   1186e:	2b1f      	cmp	r3, #31
   11870:	d8f1      	bhi.n	11856 <nvs_mount+0x1e>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11872:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11874:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11876:	aa05      	add	r2, sp, #20
   11878:	f013 fcf2 	bl	25260 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1187c:	2800      	cmp	r0, #0
   1187e:	d1ea      	bne.n	11856 <nvs_mount+0x1e>
	if (!fs->sector_size || fs->sector_size % info.size) {
   11880:	89a5      	ldrh	r5, [r4, #12]
   11882:	2d00      	cmp	r5, #0
   11884:	d0e7      	beq.n	11856 <nvs_mount+0x1e>
   11886:	9b06      	ldr	r3, [sp, #24]
   11888:	fbb5 f2f3 	udiv	r2, r5, r3
   1188c:	fb03 5512 	mls	r5, r3, r2, r5
   11890:	2d00      	cmp	r5, #0
   11892:	d1e0      	bne.n	11856 <nvs_mount+0x1e>
	if (fs->sector_count < 2) {
   11894:	89e3      	ldrh	r3, [r4, #14]
   11896:	2b01      	cmp	r3, #1
   11898:	d9dd      	bls.n	11856 <nvs_mount+0x1e>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1189a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   1189c:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1189e:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   118a2:	f04f 33ff 	mov.w	r3, #4294967295
   118a6:	f04f 32ff 	mov.w	r2, #4294967295
   118aa:	4638      	mov	r0, r7
   118ac:	f00c fede 	bl	1e66c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   118b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   118b2:	2108      	movs	r1, #8
   118b4:	f00e fb6b 	bl	1ff8e <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   118b8:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   118ba:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   118bc:	89e3      	ldrh	r3, [r4, #14]
   118be:	fa1f fa85 	uxth.w	sl, r5
   118c2:	4553      	cmp	r3, sl
   118c4:	d845      	bhi.n	11952 <nvs_mount+0x11a>
	if (closed_sectors == fs->sector_count) {
   118c6:	89e3      	ldrh	r3, [r4, #14]
   118c8:	454b      	cmp	r3, r9
   118ca:	f000 80d3 	beq.w	11a74 <nvs_mount+0x23c>
	if (i == fs->sector_count) {
   118ce:	4553      	cmp	r3, sl
   118d0:	d10b      	bne.n	118ea <nvs_mount+0xb2>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   118d2:	9900      	ldr	r1, [sp, #0]
   118d4:	2308      	movs	r3, #8
   118d6:	4642      	mov	r2, r8
   118d8:	1b89      	subs	r1, r1, r6
   118da:	4620      	mov	r0, r4
   118dc:	f00e fb04 	bl	1fee8 <nvs_flash_cmp_const>
		if (!rc) {
   118e0:	b918      	cbnz	r0, 118ea <nvs_mount+0xb2>
			nvs_sector_advance(fs, &addr);
   118e2:	89e0      	ldrh	r0, [r4, #14]
   118e4:	4669      	mov	r1, sp
   118e6:	f00e fb47 	bl	1ff78 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   118ea:	4669      	mov	r1, sp
   118ec:	4620      	mov	r0, r4
   118ee:	f7ff ff71 	bl	117d4 <nvs_recover_last_ate>
	if (rc) {
   118f2:	4605      	mov	r5, r0
   118f4:	2800      	cmp	r0, #0
   118f6:	f040 80bf 	bne.w	11a78 <nvs_mount+0x240>
	fs->ate_wra = addr;
   118fa:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   118fc:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 11adc <nvs_mount+0x2a4>
	fs->ate_wra = addr;
   11900:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   11902:	ea03 0309 	and.w	r3, r3, r9
   11906:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   11908:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1190c:	4299      	cmp	r1, r3
   1190e:	d30e      	bcc.n	1192e <nvs_mount+0xf6>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11910:	2308      	movs	r3, #8
   11912:	aa01      	add	r2, sp, #4
   11914:	4620      	mov	r0, r4
   11916:	f00e faaf 	bl	1fe78 <nvs_flash_rd>
		if (rc) {
   1191a:	b9c0      	cbnz	r0, 1194e <nvs_mount+0x116>
   1191c:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1191e:	f813 2b01 	ldrb.w	r2, [r3], #1
   11922:	4590      	cmp	r8, r2
   11924:	f040 80be 	bne.w	11aa4 <nvs_mount+0x26c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   11928:	3001      	adds	r0, #1
   1192a:	2808      	cmp	r0, #8
   1192c:	d1f7      	bne.n	1191e <nvs_mount+0xe6>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1192e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   11930:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   11932:	0c1b      	lsrs	r3, r3, #16
   11934:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   11936:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   11938:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   1193a:	f00e fb1d 	bl	1ff78 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1193e:	89a3      	ldrh	r3, [r4, #12]
   11940:	9900      	ldr	r1, [sp, #0]
   11942:	4642      	mov	r2, r8
   11944:	4620      	mov	r0, r4
   11946:	f00e facf 	bl	1fee8 <nvs_flash_cmp_const>
	if (rc < 0) {
   1194a:	2800      	cmp	r0, #0
   1194c:	da26      	bge.n	1199c <nvs_mount+0x164>
   1194e:	4605      	mov	r5, r0
   11950:	e092      	b.n	11a78 <nvs_mount+0x240>
		       (uint16_t)(fs->sector_size - ate_size);
   11952:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   11954:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   11956:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   11958:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1195c:	4642      	mov	r2, r8
   1195e:	2308      	movs	r3, #8
   11960:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   11962:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11964:	f00e fac0 	bl	1fee8 <nvs_flash_cmp_const>
		if (rc) {
   11968:	b178      	cbz	r0, 1198a <nvs_mount+0x152>
			nvs_sector_advance(fs, &addr);
   1196a:	89e0      	ldrh	r0, [r4, #14]
   1196c:	4669      	mov	r1, sp
   1196e:	f00e fb03 	bl	1ff78 <nvs_sector_advance.isra.0>
			closed_sectors++;
   11972:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11976:	9900      	ldr	r1, [sp, #0]
   11978:	2308      	movs	r3, #8
   1197a:	4642      	mov	r2, r8
   1197c:	4620      	mov	r0, r4
			closed_sectors++;
   1197e:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11982:	f00e fab1 	bl	1fee8 <nvs_flash_cmp_const>
			if (!rc) {
   11986:	2800      	cmp	r0, #0
   11988:	d09d      	beq.n	118c6 <nvs_mount+0x8e>
	for (i = 0; i < fs->sector_count; i++) {
   1198a:	3501      	adds	r5, #1
   1198c:	e796      	b.n	118bc <nvs_mount+0x84>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1198e:	f1ba 0f00 	cmp.w	sl, #0
   11992:	f000 809f 	beq.w	11ad4 <nvs_mount+0x29c>
				rc = -ESPIPE;
   11996:	f06f 051c 	mvn.w	r5, #28
   1199a:	e06d      	b.n	11a78 <nvs_mount+0x240>
	if (rc) {
   1199c:	d045      	beq.n	11a2a <nvs_mount+0x1f2>
		addr = fs->ate_wra + ate_size;
   1199e:	6863      	ldr	r3, [r4, #4]
   119a0:	4433      	add	r3, r6
   119a2:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   119a4:	f64f 78ff 	movw	r8, #65535	; 0xffff
   119a8:	9900      	ldr	r1, [sp, #0]
   119aa:	89a3      	ldrh	r3, [r4, #12]
   119ac:	b28a      	uxth	r2, r1
   119ae:	1b9b      	subs	r3, r3, r6
   119b0:	429a      	cmp	r2, r3
   119b2:	d315      	bcc.n	119e0 <nvs_mount+0x1a8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   119b4:	6861      	ldr	r1, [r4, #4]
   119b6:	4620      	mov	r0, r4
   119b8:	f00e fabb 	bl	1ff32 <nvs_flash_erase_sector>
		if (rc) {
   119bc:	2800      	cmp	r0, #0
   119be:	d1c6      	bne.n	1194e <nvs_mount+0x116>
		fs->ate_wra &= ADDR_SECT_MASK;
   119c0:	6863      	ldr	r3, [r4, #4]
   119c2:	4a46      	ldr	r2, [pc, #280]	; (11adc <nvs_mount+0x2a4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   119c4:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   119c6:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   119c8:	440b      	add	r3, r1
   119ca:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   119ce:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   119d0:	4013      	ands	r3, r2
   119d2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   119d4:	4620      	mov	r0, r4
   119d6:	f00e fbd9 	bl	2018c <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   119da:	2800      	cmp	r0, #0
   119dc:	d040      	beq.n	11a60 <nvs_mount+0x228>
   119de:	e7b6      	b.n	1194e <nvs_mount+0x116>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   119e0:	2308      	movs	r3, #8
   119e2:	aa03      	add	r2, sp, #12
   119e4:	4620      	mov	r0, r4
   119e6:	f00e fa47 	bl	1fe78 <nvs_flash_rd>
			if (rc) {
   119ea:	2800      	cmp	r0, #0
   119ec:	d1af      	bne.n	1194e <nvs_mount+0x116>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   119ee:	a903      	add	r1, sp, #12
   119f0:	4620      	mov	r0, r4
   119f2:	f00e fad6 	bl	1ffa2 <nvs_ate_valid>
   119f6:	b138      	cbz	r0, 11a08 <nvs_mount+0x1d0>
   119f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   119fc:	4543      	cmp	r3, r8
   119fe:	d103      	bne.n	11a08 <nvs_mount+0x1d0>
			    (gc_done_ate.id == 0xffff) &&
   11a00:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11a04:	2b00      	cmp	r3, #0
   11a06:	d040      	beq.n	11a8a <nvs_mount+0x252>
			addr += ate_size;
   11a08:	9b00      	ldr	r3, [sp, #0]
   11a0a:	4433      	add	r3, r6
   11a0c:	9300      	str	r3, [sp, #0]
   11a0e:	e7cb      	b.n	119a8 <nvs_mount+0x170>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   11a10:	1a5b      	subs	r3, r3, r1
   11a12:	4642      	mov	r2, r8
   11a14:	4620      	mov	r0, r4
   11a16:	f00e fa67 	bl	1fee8 <nvs_flash_cmp_const>
		if (rc < 0) {
   11a1a:	2800      	cmp	r0, #0
   11a1c:	db97      	blt.n	1194e <nvs_mount+0x116>
		if (!rc) {
   11a1e:	d008      	beq.n	11a32 <nvs_mount+0x1fa>
		fs->data_wra += fs->flash_parameters->write_block_size;
   11a20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   11a22:	68a3      	ldr	r3, [r4, #8]
   11a24:	6812      	ldr	r2, [r2, #0]
   11a26:	4413      	add	r3, r2
   11a28:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   11a2a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   11a2e:	428b      	cmp	r3, r1
   11a30:	d8ee      	bhi.n	11a10 <nvs_mount+0x1d8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11a32:	6861      	ldr	r1, [r4, #4]
   11a34:	89a3      	ldrh	r3, [r4, #12]
   11a36:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   11a3a:	429a      	cmp	r2, r3
   11a3c:	d1cd      	bne.n	119da <nvs_mount+0x1a2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   11a3e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11adc <nvs_mount+0x2a4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11a42:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   11a44:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11a48:	4293      	cmp	r3, r2
   11a4a:	d0c6      	beq.n	119da <nvs_mount+0x1a2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   11a4c:	4620      	mov	r0, r4
   11a4e:	f00e fa70 	bl	1ff32 <nvs_flash_erase_sector>
		if (rc) {
   11a52:	2800      	cmp	r0, #0
   11a54:	f47f af7b 	bne.w	1194e <nvs_mount+0x116>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   11a58:	6863      	ldr	r3, [r4, #4]
   11a5a:	ea03 0308 	and.w	r3, r3, r8
   11a5e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   11a60:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   11a62:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   11a64:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   11a68:	42b3      	cmp	r3, r6
   11a6a:	d105      	bne.n	11a78 <nvs_mount+0x240>
		rc = nvs_add_gc_done_ate(fs);
   11a6c:	4620      	mov	r0, r4
   11a6e:	f00e fb78 	bl	20162 <nvs_add_gc_done_ate>
   11a72:	e76c      	b.n	1194e <nvs_mount+0x116>
		rc = -EDEADLK;
   11a74:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   11a78:	4638      	mov	r0, r7
   11a7a:	f00c fe6f 	bl	1e75c <z_impl_k_mutex_unlock>
	if (rc) {
   11a7e:	2d00      	cmp	r5, #0
   11a80:	f47f aeeb 	bne.w	1185a <nvs_mount+0x22>
	fs->ready = true;
   11a84:	2301      	movs	r3, #1
   11a86:	7423      	strb	r3, [r4, #16]
	return 0;
   11a88:	e6e7      	b.n	1185a <nvs_mount+0x22>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   11a8a:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   11a8c:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   11a8e:	0c1b      	lsrs	r3, r3, #16
   11a90:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   11a92:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   11a94:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   11a96:	f00e fa6f 	bl	1ff78 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   11a9a:	9900      	ldr	r1, [sp, #0]
   11a9c:	4620      	mov	r0, r4
   11a9e:	f00e fa48 	bl	1ff32 <nvs_flash_erase_sector>
			goto end;
   11aa2:	e79a      	b.n	119da <nvs_mount+0x1a2>
		if (nvs_ate_valid(fs, &last_ate)) {
   11aa4:	a901      	add	r1, sp, #4
   11aa6:	4620      	mov	r0, r4
   11aa8:	f00e fa7b 	bl	1ffa2 <nvs_ate_valid>
   11aac:	f8d4 b004 	ldr.w	fp, [r4, #4]
   11ab0:	b180      	cbz	r0, 11ad4 <nvs_mount+0x29c>
			fs->data_wra = addr & ADDR_SECT_MASK;
   11ab2:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11ab4:	f8bd a008 	ldrh.w	sl, [sp, #8]
   11ab8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11abc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   11abe:	ea02 0209 	and.w	r2, r2, r9
   11ac2:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11ac4:	4451      	add	r1, sl
   11ac6:	f00e fa62 	bl	1ff8e <nvs_al_size.isra.0>
   11aca:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   11acc:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11ace:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   11ad0:	f43f af5d 	beq.w	1198e <nvs_mount+0x156>
		fs->ate_wra -= ate_size;
   11ad4:	ebab 0306 	sub.w	r3, fp, r6
   11ad8:	6063      	str	r3, [r4, #4]
   11ada:	e715      	b.n	11908 <nvs_mount+0xd0>
   11adc:	ffff0000 	.word	0xffff0000

00011ae0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   11ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ae4:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   11ae6:	7c03      	ldrb	r3, [r0, #16]
{
   11ae8:	b089      	sub	sp, #36	; 0x24
   11aea:	4604      	mov	r4, r0
   11aec:	4689      	mov	r9, r1
   11aee:	4690      	mov	r8, r2
	if (!fs->ready) {
   11af0:	2b00      	cmp	r3, #0
   11af2:	f000 80b2 	beq.w	11c5a <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11af6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   11af8:	2108      	movs	r1, #8
   11afa:	4610      	mov	r0, r2
   11afc:	f00e fa47 	bl	1ff8e <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   11b00:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11b02:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   11b04:	4610      	mov	r0, r2
   11b06:	f00e fa42 	bl	1ff8e <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   11b0a:	89a3      	ldrh	r3, [r4, #12]
   11b0c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   11b10:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   11b12:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   11b14:	f200 80a4 	bhi.w	11c60 <nvs_write+0x180>
   11b18:	b11e      	cbz	r6, 11b22 <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   11b1a:	f1b8 0f00 	cmp.w	r8, #0
   11b1e:	f000 809f 	beq.w	11c60 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   11b22:	6863      	ldr	r3, [r4, #4]
   11b24:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11b26:	aa04      	add	r2, sp, #16
   11b28:	a903      	add	r1, sp, #12
   11b2a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   11b2c:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11b30:	f00e fa6f 	bl	20012 <nvs_prev_ate>
		if (rc) {
   11b34:	4605      	mov	r5, r0
   11b36:	2800      	cmp	r0, #0
   11b38:	d15a      	bne.n	11bf0 <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   11b3a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11b3e:	454b      	cmp	r3, r9
   11b40:	d005      	beq.n	11b4e <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   11b42:	6862      	ldr	r2, [r4, #4]
   11b44:	9b03      	ldr	r3, [sp, #12]
   11b46:	429a      	cmp	r2, r3
   11b48:	d1ed      	bne.n	11b26 <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   11b4a:	b9de      	cbnz	r6, 11b84 <nvs_write+0xa4>
   11b4c:	e050      	b.n	11bf0 <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   11b4e:	a904      	add	r1, sp, #16
   11b50:	4620      	mov	r0, r4
   11b52:	f00e fa26 	bl	1ffa2 <nvs_ate_valid>
   11b56:	2800      	cmp	r0, #0
   11b58:	d0f3      	beq.n	11b42 <nvs_write+0x62>
			if (wlk_ate.len == 0U) {
   11b5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   11b5e:	b186      	cbz	r6, 11b82 <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   11b60:	429e      	cmp	r6, r3
   11b62:	d10f      	bne.n	11b84 <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
   11b64:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   11b68:	ea4f 411b 	mov.w	r1, fp, lsr #16
   11b6c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   11b6e:	4401      	add	r1, r0
   11b70:	4633      	mov	r3, r6
   11b72:	4642      	mov	r2, r8
   11b74:	4620      	mov	r0, r4
   11b76:	f00e f98d 	bl	1fe94 <nvs_flash_block_cmp>
			if (rc <= 0) {
   11b7a:	2800      	cmp	r0, #0
   11b7c:	dc02      	bgt.n	11b84 <nvs_write+0xa4>
   11b7e:	4605      	mov	r5, r0
   11b80:	e036      	b.n	11bf0 <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
   11b82:	b3ab      	cbz	r3, 11bf0 <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   11b84:	2f00      	cmp	r7, #0
   11b86:	d137      	bne.n	11bf8 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   11b88:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   11b8c:	f04f 32ff 	mov.w	r2, #4294967295
   11b90:	f04f 33ff 	mov.w	r3, #4294967295
   11b94:	4650      	mov	r0, sl
   11b96:	f00c fd69 	bl	1e66c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   11b9a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 11c68 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   11b9e:	89e3      	ldrh	r3, [r4, #14]
   11ba0:	429d      	cmp	r5, r3
   11ba2:	d057      	beq.n	11c54 <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   11ba4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   11ba8:	18f9      	adds	r1, r7, r3
   11baa:	428a      	cmp	r2, r1
   11bac:	d327      	bcc.n	11bfe <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   11bae:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   11bb2:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   11bb4:	23ff      	movs	r3, #255	; 0xff
   11bb6:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   11bba:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   11bbe:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   11bc2:	f00e f9d0 	bl	1ff66 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   11bc6:	4632      	mov	r2, r6
   11bc8:	4641      	mov	r1, r8
   11bca:	4620      	mov	r0, r4
   11bcc:	f00e faa5 	bl	2011a <nvs_flash_data_wrt>
	if (rc) {
   11bd0:	4603      	mov	r3, r0
   11bd2:	b938      	cbnz	r0, 11be4 <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
   11bd4:	a906      	add	r1, sp, #24
   11bd6:	4620      	mov	r0, r4
   11bd8:	f00e fab2 	bl	20140 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   11bdc:	2800      	cmp	r0, #0
   11bde:	bf14      	ite	ne
   11be0:	4603      	movne	r3, r0
   11be2:	4633      	moveq	r3, r6
   11be4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   11be6:	4650      	mov	r0, sl
   11be8:	f00c fdb8 	bl	1e75c <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   11bec:	9b01      	ldr	r3, [sp, #4]
   11bee:	461d      	mov	r5, r3
}
   11bf0:	4628      	mov	r0, r5
   11bf2:	b009      	add	sp, #36	; 0x24
   11bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   11bf8:	4457      	add	r7, sl
   11bfa:	b2bf      	uxth	r7, r7
   11bfc:	e7c4      	b.n	11b88 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11bfe:	2108      	movs	r1, #8
   11c00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11c02:	f00e f9c4 	bl	1ff8e <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   11c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11c0a:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   11c0e:	2300      	movs	r3, #0
   11c10:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   11c14:	1813      	adds	r3, r2, r0
   11c16:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   11c1a:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   11c1c:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   11c20:	441a      	add	r2, r3
   11c22:	1a12      	subs	r2, r2, r0
   11c24:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   11c26:	a806      	add	r0, sp, #24
   11c28:	f00e f99d 	bl	1ff66 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   11c2c:	a906      	add	r1, sp, #24
   11c2e:	4620      	mov	r0, r4
   11c30:	f00e fa86 	bl	20140 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   11c34:	89e0      	ldrh	r0, [r4, #14]
   11c36:	1d21      	adds	r1, r4, #4
   11c38:	f00e f99e 	bl	1ff78 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   11c3c:	6863      	ldr	r3, [r4, #4]
   11c3e:	ea03 030b 	and.w	r3, r3, fp
   11c42:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   11c44:	4620      	mov	r0, r4
   11c46:	f00e faa1 	bl	2018c <nvs_gc>
		if (rc) {
   11c4a:	4603      	mov	r3, r0
   11c4c:	2800      	cmp	r0, #0
   11c4e:	d1c9      	bne.n	11be4 <nvs_write+0x104>
		gc_count++;
   11c50:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   11c52:	e7a4      	b.n	11b9e <nvs_write+0xbe>
			rc = -ENOSPC;
   11c54:	f06f 031b 	mvn.w	r3, #27
   11c58:	e7c4      	b.n	11be4 <nvs_write+0x104>
		return -EACCES;
   11c5a:	f06f 050c 	mvn.w	r5, #12
   11c5e:	e7c7      	b.n	11bf0 <nvs_write+0x110>
		return -EINVAL;
   11c60:	f06f 0515 	mvn.w	r5, #21
   11c64:	e7c4      	b.n	11bf0 <nvs_write+0x110>
   11c66:	bf00      	nop
   11c68:	ffff0000 	.word	0xffff0000

00011c6c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   11c6c:	4b11      	ldr	r3, [pc, #68]	; (11cb4 <flash_area_open+0x48>)
   11c6e:	681b      	ldr	r3, [r3, #0]
{
   11c70:	b570      	push	{r4, r5, r6, lr}
   11c72:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   11c74:	b18b      	cbz	r3, 11c9a <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   11c76:	4a10      	ldr	r2, [pc, #64]	; (11cb8 <flash_area_open+0x4c>)
   11c78:	6811      	ldr	r1, [r2, #0]
   11c7a:	2200      	movs	r2, #0
   11c7c:	428a      	cmp	r2, r1
   11c7e:	db02      	blt.n	11c86 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   11c80:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   11c84:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   11c86:	461d      	mov	r5, r3
   11c88:	f813 6b10 	ldrb.w	r6, [r3], #16
   11c8c:	4286      	cmp	r6, r0
   11c8e:	d007      	beq.n	11ca0 <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
   11c90:	3201      	adds	r2, #1
   11c92:	e7f3      	b.n	11c7c <flash_area_open+0x10>
	*fap = area;
   11c94:	6025      	str	r5, [r4, #0]
	return 0;
   11c96:	2000      	movs	r0, #0
   11c98:	e7f4      	b.n	11c84 <flash_area_open+0x18>
		return -EACCES;
   11c9a:	f06f 000c 	mvn.w	r0, #12
   11c9e:	e7f1      	b.n	11c84 <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   11ca0:	68e8      	ldr	r0, [r5, #12]
   11ca2:	b118      	cbz	r0, 11cac <flash_area_open+0x40>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11ca4:	f013 fd29 	bl	256fa <z_device_is_ready>
   11ca8:	2800      	cmp	r0, #0
   11caa:	d1f3      	bne.n	11c94 <flash_area_open+0x28>
		return -ENODEV;
   11cac:	f06f 0012 	mvn.w	r0, #18
   11cb0:	e7e8      	b.n	11c84 <flash_area_open+0x18>
   11cb2:	bf00      	nop
   11cb4:	20000504 	.word	0x20000504
   11cb8:	000266b8 	.word	0x000266b8

00011cbc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   11cbc:	b570      	push	{r4, r5, r6, lr}
   11cbe:	b088      	sub	sp, #32
   11cc0:	4605      	mov	r5, r0
   11cc2:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   11cc4:	b2c0      	uxtb	r0, r0
   11cc6:	4669      	mov	r1, sp
{
   11cc8:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   11cca:	f7ff ffcf 	bl	11c6c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   11cce:	2800      	cmp	r0, #0
   11cd0:	db1b      	blt.n	11d0a <flash_area_get_sectors+0x4e>
   11cd2:	9800      	ldr	r0, [sp, #0]
   11cd4:	b1c8      	cbz	r0, 11d0a <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   11cd6:	6843      	ldr	r3, [r0, #4]
   11cd8:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   11cda:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   11cdc:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   11cde:	9501      	str	r5, [sp, #4]
	flash_dev = fa->fa_dev;
   11ce0:	68c5      	ldr	r5, [r0, #12]
	cb_data->ret = ret;
   11ce2:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   11ce6:	2300      	movs	r3, #0
	cb_data->status = 0;
   11ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   11cec:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
   11cee:	f00e fb64 	bl	203ba <flash_area_close>
	if (flash_dev == NULL) {
   11cf2:	b16d      	cbz	r5, 11d10 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   11cf4:	4628      	mov	r0, r5
   11cf6:	4908      	ldr	r1, [pc, #32]	; (11d18 <flash_area_get_sectors+0x5c>)
   11cf8:	aa01      	add	r2, sp, #4
   11cfa:	f013 fab5 	bl	25268 <flash_page_foreach>
	if (cb_data->status == 0) {
   11cfe:	9807      	ldr	r0, [sp, #28]
   11d00:	b908      	cbnz	r0, 11d06 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   11d02:	9b05      	ldr	r3, [sp, #20]
   11d04:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   11d06:	b008      	add	sp, #32
   11d08:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11d0a:	f06f 0015 	mvn.w	r0, #21
   11d0e:	e7fa      	b.n	11d06 <flash_area_get_sectors+0x4a>
		return -ENODEV;
   11d10:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   11d14:	e7f7      	b.n	11d06 <flash_area_get_sectors+0x4a>
   11d16:	bf00      	nop
   11d18:	000203bd 	.word	0x000203bd

00011d1c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   11d1c:	4b10      	ldr	r3, [pc, #64]	; (11d60 <settings_save_one+0x44>)
{
   11d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   11d22:	681c      	ldr	r4, [r3, #0]
{
   11d24:	4605      	mov	r5, r0
   11d26:	460e      	mov	r6, r1
   11d28:	4617      	mov	r7, r2
	if (!cs) {
   11d2a:	b1ac      	cbz	r4, 11d58 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   11d2c:	f04f 32ff 	mov.w	r2, #4294967295
   11d30:	f04f 33ff 	mov.w	r3, #4294967295
   11d34:	480b      	ldr	r0, [pc, #44]	; (11d64 <settings_save_one+0x48>)
   11d36:	f00c fc99 	bl	1e66c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   11d3a:	6863      	ldr	r3, [r4, #4]
   11d3c:	4632      	mov	r2, r6
   11d3e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   11d42:	4629      	mov	r1, r5
   11d44:	463b      	mov	r3, r7
   11d46:	4620      	mov	r0, r4
   11d48:	47c0      	blx	r8
   11d4a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11d4c:	4805      	ldr	r0, [pc, #20]	; (11d64 <settings_save_one+0x48>)
   11d4e:	f00c fd05 	bl	1e75c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   11d52:	4620      	mov	r0, r4
   11d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   11d58:	f06f 0401 	mvn.w	r4, #1
   11d5c:	e7f9      	b.n	11d52 <settings_save_one+0x36>
   11d5e:	bf00      	nop
   11d60:	2000239c 	.word	0x2000239c
   11d64:	20000b60 	.word	0x20000b60

00011d68 <settings_src_register>:
	parent->next = child;
   11d68:	2300      	movs	r3, #0
   11d6a:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11d6c:	4b04      	ldr	r3, [pc, #16]	; (11d80 <settings_src_register+0x18>)
   11d6e:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11d70:	b912      	cbnz	r2, 11d78 <settings_src_register+0x10>
	list->head = node;
   11d72:	e9c3 0000 	strd	r0, r0, [r3]
}
   11d76:	4770      	bx	lr
	parent->next = child;
   11d78:	6010      	str	r0, [r2, #0]
	list->tail = node;
   11d7a:	6058      	str	r0, [r3, #4]
}
   11d7c:	4770      	bx	lr
   11d7e:	bf00      	nop
   11d80:	20002394 	.word	0x20002394

00011d84 <settings_dst_register>:
	settings_save_dst = cs;
   11d84:	4b01      	ldr	r3, [pc, #4]	; (11d8c <settings_dst_register+0x8>)
   11d86:	6018      	str	r0, [r3, #0]
}
   11d88:	4770      	bx	lr
   11d8a:	bf00      	nop
   11d8c:	2000239c 	.word	0x2000239c

00011d90 <settings_load_subtree>:
{
   11d90:	b530      	push	{r4, r5, lr}
   11d92:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   11d94:	2300      	movs	r3, #0
{
   11d96:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   11d98:	e9cd 3302 	strd	r3, r3, [sp, #8]
   11d9c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11d9e:	f04f 33ff 	mov.w	r3, #4294967295
   11da2:	480c      	ldr	r0, [pc, #48]	; (11dd4 <settings_load_subtree+0x44>)
   11da4:	f04f 32ff 	mov.w	r2, #4294967295
   11da8:	f00c fc60 	bl	1e66c <z_impl_k_mutex_lock>
	return list->head;
   11dac:	4b0a      	ldr	r3, [pc, #40]	; (11dd8 <settings_load_subtree+0x48>)
   11dae:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11db0:	b134      	cbz	r4, 11dc0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   11db2:	6863      	ldr	r3, [r4, #4]
   11db4:	4620      	mov	r0, r4
   11db6:	681b      	ldr	r3, [r3, #0]
   11db8:	a901      	add	r1, sp, #4
   11dba:	4798      	blx	r3
	return node->next;
   11dbc:	6824      	ldr	r4, [r4, #0]
   11dbe:	e7f7      	b.n	11db0 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   11dc0:	4628      	mov	r0, r5
   11dc2:	f000 f861 	bl	11e88 <settings_commit_subtree>
   11dc6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11dc8:	4802      	ldr	r0, [pc, #8]	; (11dd4 <settings_load_subtree+0x44>)
   11dca:	f00c fcc7 	bl	1e75c <z_impl_k_mutex_unlock>
}
   11dce:	4620      	mov	r0, r4
   11dd0:	b005      	add	sp, #20
   11dd2:	bd30      	pop	{r4, r5, pc}
   11dd4:	20000b60 	.word	0x20000b60
   11dd8:	20002394 	.word	0x20002394

00011ddc <settings_store_init>:
	list->head = NULL;
   11ddc:	4b02      	ldr	r3, [pc, #8]	; (11de8 <settings_store_init+0xc>)
   11dde:	2200      	movs	r2, #0
	list->tail = NULL;
   11de0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   11de4:	4770      	bx	lr
   11de6:	bf00      	nop
   11de8:	20002394 	.word	0x20002394

00011dec <settings_init>:
	list->head = NULL;
   11dec:	4b02      	ldr	r3, [pc, #8]	; (11df8 <settings_init+0xc>)
   11dee:	2200      	movs	r2, #0
	list->tail = NULL;
   11df0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   11df4:	f7ff bff2 	b.w	11ddc <settings_store_init>
   11df8:	200023a0 	.word	0x200023a0

00011dfc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   11dfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11e00:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   11e02:	460e      	mov	r6, r1
   11e04:	b109      	cbz	r1, 11e0a <settings_parse_and_lookup+0xe>
		*next = NULL;
   11e06:	2300      	movs	r3, #0
   11e08:	600b      	str	r3, [r1, #0]
   11e0a:	4c1c      	ldr	r4, [pc, #112]	; (11e7c <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11e0c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 11e80 <settings_parse_and_lookup+0x84>
   11e10:	2500      	movs	r5, #0
   11e12:	4544      	cmp	r4, r8
   11e14:	d310      	bcc.n	11e38 <settings_parse_and_lookup+0x3c>
	return list->head;
   11e16:	4b1b      	ldr	r3, [pc, #108]	; (11e84 <settings_parse_and_lookup+0x88>)
   11e18:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   11e1a:	b35c      	cbz	r4, 11e74 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11e1c:	aa01      	add	r2, sp, #4
   11e1e:	4638      	mov	r0, r7
   11e20:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   11e24:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11e26:	f00e faee 	bl	20406 <settings_name_steq>
   11e2a:	b308      	cbz	r0, 11e70 <settings_parse_and_lookup+0x74>
			continue;
		}
		if (!bestmatch) {
   11e2c:	b9cd      	cbnz	r5, 11e62 <settings_parse_and_lookup+0x66>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   11e2e:	b10e      	cbz	r6, 11e34 <settings_parse_and_lookup+0x38>
				*next = tmpnext;
   11e30:	9b01      	ldr	r3, [sp, #4]
   11e32:	6033      	str	r3, [r6, #0]
   11e34:	4625      	mov	r5, r4
   11e36:	e01b      	b.n	11e70 <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11e38:	6821      	ldr	r1, [r4, #0]
   11e3a:	aa01      	add	r2, sp, #4
   11e3c:	4638      	mov	r0, r7
   11e3e:	f00e fae2 	bl	20406 <settings_name_steq>
   11e42:	b160      	cbz	r0, 11e5e <settings_parse_and_lookup+0x62>
		if (!bestmatch) {
   11e44:	b925      	cbnz	r5, 11e50 <settings_parse_and_lookup+0x54>
			if (next) {
   11e46:	b10e      	cbz	r6, 11e4c <settings_parse_and_lookup+0x50>
				*next = tmpnext;
   11e48:	9b01      	ldr	r3, [sp, #4]
   11e4a:	6033      	str	r3, [r6, #0]
   11e4c:	4625      	mov	r5, r4
   11e4e:	e006      	b.n	11e5e <settings_parse_and_lookup+0x62>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11e50:	6829      	ldr	r1, [r5, #0]
   11e52:	6820      	ldr	r0, [r4, #0]
   11e54:	2200      	movs	r2, #0
   11e56:	f00e fad6 	bl	20406 <settings_name_steq>
   11e5a:	2800      	cmp	r0, #0
   11e5c:	d1f3      	bne.n	11e46 <settings_parse_and_lookup+0x4a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11e5e:	3414      	adds	r4, #20
   11e60:	e7d7      	b.n	11e12 <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11e62:	6829      	ldr	r1, [r5, #0]
   11e64:	6820      	ldr	r0, [r4, #0]
   11e66:	2200      	movs	r2, #0
   11e68:	f00e facd 	bl	20406 <settings_name_steq>
   11e6c:	2800      	cmp	r0, #0
   11e6e:	d1de      	bne.n	11e2e <settings_parse_and_lookup+0x32>
	return node->next;
   11e70:	6964      	ldr	r4, [r4, #20]
   11e72:	e7d2      	b.n	11e1a <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   11e74:	4628      	mov	r0, r5
   11e76:	b002      	add	sp, #8
   11e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e7c:	0002648c 	.word	0x0002648c
   11e80:	00026590 	.word	0x00026590
   11e84:	200023a0 	.word	0x200023a0

00011e88 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   11e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11e8a:	4c18      	ldr	r4, [pc, #96]	; (11eec <settings_commit_subtree+0x64>)
   11e8c:	4f18      	ldr	r7, [pc, #96]	; (11ef0 <settings_commit_subtree+0x68>)
{
   11e8e:	4606      	mov	r6, r0
	rc = 0;
   11e90:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11e92:	42bc      	cmp	r4, r7
   11e94:	d308      	bcc.n	11ea8 <settings_commit_subtree+0x20>
	return list->head;
   11e96:	4b17      	ldr	r3, [pc, #92]	; (11ef4 <settings_commit_subtree+0x6c>)
   11e98:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   11e9a:	b324      	cbz	r4, 11ee6 <settings_commit_subtree+0x5e>
   11e9c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11e9e:	b9ae      	cbnz	r6, 11ecc <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   11ea0:	68e3      	ldr	r3, [r4, #12]
   11ea2:	b9db      	cbnz	r3, 11edc <settings_commit_subtree+0x54>
	return node->next;
   11ea4:	6964      	ldr	r4, [r4, #20]
   11ea6:	e7f8      	b.n	11e9a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11ea8:	b91e      	cbnz	r6, 11eb2 <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   11eaa:	68e3      	ldr	r3, [r4, #12]
   11eac:	b94b      	cbnz	r3, 11ec2 <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11eae:	3414      	adds	r4, #20
   11eb0:	e7ef      	b.n	11e92 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11eb2:	6820      	ldr	r0, [r4, #0]
   11eb4:	2200      	movs	r2, #0
   11eb6:	4631      	mov	r1, r6
   11eb8:	f00e faa5 	bl	20406 <settings_name_steq>
   11ebc:	2800      	cmp	r0, #0
   11ebe:	d1f4      	bne.n	11eaa <settings_commit_subtree+0x22>
   11ec0:	e7f5      	b.n	11eae <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   11ec2:	4798      	blx	r3
				rc = rc2;
   11ec4:	2d00      	cmp	r5, #0
   11ec6:	bf08      	it	eq
   11ec8:	4605      	moveq	r5, r0
   11eca:	e7f0      	b.n	11eae <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11ecc:	6820      	ldr	r0, [r4, #0]
   11ece:	2200      	movs	r2, #0
   11ed0:	4631      	mov	r1, r6
   11ed2:	f00e fa98 	bl	20406 <settings_name_steq>
   11ed6:	2800      	cmp	r0, #0
   11ed8:	d1e2      	bne.n	11ea0 <settings_commit_subtree+0x18>
   11eda:	e7e3      	b.n	11ea4 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   11edc:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   11ede:	2d00      	cmp	r5, #0
   11ee0:	bf08      	it	eq
   11ee2:	4605      	moveq	r5, r0
   11ee4:	e7de      	b.n	11ea4 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   11ee6:	4628      	mov	r0, r5
   11ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11eea:	bf00      	nop
   11eec:	0002648c 	.word	0x0002648c
   11ef0:	00026590 	.word	0x00026590
   11ef4:	200023a0 	.word	0x200023a0

00011ef8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   11ef8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   11efa:	4c06      	ldr	r4, [pc, #24]	; (11f14 <settings_subsys_init+0x1c>)
   11efc:	7823      	ldrb	r3, [r4, #0]
   11efe:	b93b      	cbnz	r3, 11f10 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   11f00:	f7ff ff74 	bl	11dec <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   11f04:	f000 f864 	bl	11fd0 <settings_backend_init>

	if (!err) {
   11f08:	b908      	cbnz	r0, 11f0e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   11f0a:	2301      	movs	r3, #1
   11f0c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   11f0e:	bd10      	pop	{r4, pc}
		return 0;
   11f10:	2000      	movs	r0, #0
   11f12:	e7fc      	b.n	11f0e <settings_subsys_init+0x16>
   11f14:	20002bca 	.word	0x20002bca

00011f18 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   11f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   11f1c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   11f1e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 11fcc <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   11f22:	3401      	adds	r4, #1
{
   11f24:	b098      	sub	sp, #96	; 0x60
   11f26:	4680      	mov	r8, r0
   11f28:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   11f2a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   11f2c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   11f30:	1e65      	subs	r5, r4, #1
   11f32:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   11f34:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11f38:	d045      	beq.n	11fc6 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   11f3a:	234a      	movs	r3, #74	; 0x4a
   11f3c:	aa05      	add	r2, sp, #20
   11f3e:	4629      	mov	r1, r5
   11f40:	4630      	mov	r0, r6
   11f42:	f00e fa33 	bl	203ac <nvs_read>
   11f46:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   11f4a:	343f      	adds	r4, #63	; 0x3f
   11f4c:	b2a4      	uxth	r4, r4
   11f4e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11f50:	4621      	mov	r1, r4
   11f52:	2301      	movs	r3, #1
   11f54:	f10d 020b 	add.w	r2, sp, #11
   11f58:	4630      	mov	r0, r6
   11f5a:	f00e fa27 	bl	203ac <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11f5e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11f60:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11f62:	dc03      	bgt.n	11f6c <settings_nvs_load+0x54>
   11f64:	2800      	cmp	r0, #0
   11f66:	dc03      	bgt.n	11f70 <settings_nvs_load+0x58>
{
   11f68:	462c      	mov	r4, r5
   11f6a:	e7e1      	b.n	11f30 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   11f6c:	2800      	cmp	r0, #0
   11f6e:	dc16      	bgt.n	11f9e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   11f70:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   11f74:	42ab      	cmp	r3, r5
   11f76:	d109      	bne.n	11f8c <settings_nvs_load+0x74>
				cf->last_name_id--;
   11f78:	4642      	mov	r2, r8
   11f7a:	1e6b      	subs	r3, r5, #1
   11f7c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   11f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11f84:	2302      	movs	r3, #2
   11f86:	4630      	mov	r0, r6
   11f88:	f7ff fdaa 	bl	11ae0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   11f8c:	4629      	mov	r1, r5
   11f8e:	4630      	mov	r0, r6
   11f90:	f00e f9b1 	bl	202f6 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   11f94:	4621      	mov	r1, r4
   11f96:	4630      	mov	r0, r6
   11f98:	f00e f9ad 	bl	202f6 <nvs_delete>
			continue;
   11f9c:	e7e4      	b.n	11f68 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   11f9e:	ab18      	add	r3, sp, #96	; 0x60
   11fa0:	441f      	add	r7, r3
   11fa2:	2300      	movs	r3, #0
   11fa4:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   11fa8:	4652      	mov	r2, sl
   11faa:	f8cd 9000 	str.w	r9, [sp]
   11fae:	ab03      	add	r3, sp, #12
   11fb0:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   11fb2:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   11fb4:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   11fb8:	f00e fa5e 	bl	20478 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   11fbc:	2800      	cmp	r0, #0
   11fbe:	d0d3      	beq.n	11f68 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   11fc0:	b018      	add	sp, #96	; 0x60
   11fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11fc6:	2000      	movs	r0, #0
	return ret;
   11fc8:	e7fa      	b.n	11fc0 <settings_nvs_load+0xa8>
   11fca:	bf00      	nop
   11fcc:	000204e3 	.word	0x000204e3

00011fd0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   11fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   11fd2:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   11fd4:	4669      	mov	r1, sp
   11fd6:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   11fd8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   11fda:	f7ff fe47 	bl	11c6c <flash_area_open>
	if (rc) {
   11fde:	4604      	mov	r4, r0
   11fe0:	2800      	cmp	r0, #0
   11fe2:	d136      	bne.n	12052 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   11fe4:	aa02      	add	r2, sp, #8
   11fe6:	a901      	add	r1, sp, #4
   11fe8:	2004      	movs	r0, #4
   11fea:	f7ff fe67 	bl	11cbc <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   11fee:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   11ff2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   11ff4:	d02d      	beq.n	12052 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   11ff6:	b138      	cbz	r0, 12008 <settings_backend_init+0x38>
   11ff8:	340c      	adds	r4, #12
   11ffa:	d005      	beq.n	12008 <settings_backend_init+0x38>
		k_panic();
   11ffc:	4040      	eors	r0, r0
   11ffe:	f380 8811 	msr	BASEPRI, r0
   12002:	f04f 0004 	mov.w	r0, #4
   12006:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   12008:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   1200a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1200e:	d223      	bcs.n	12058 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   12010:	9a00      	ldr	r2, [sp, #0]
   12012:	2300      	movs	r3, #0
   12014:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   12016:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   12018:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1201a:	4285      	cmp	r5, r0
   1201c:	b29c      	uxth	r4, r3
   1201e:	d303      	bcc.n	12028 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   12020:	3301      	adds	r3, #1
   12022:	2b08      	cmp	r3, #8
   12024:	d1f8      	bne.n	12018 <settings_backend_init+0x48>
   12026:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12028:	4d0d      	ldr	r5, [pc, #52]	; (12060 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1202a:	6853      	ldr	r3, [r2, #4]
   1202c:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   1202e:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   12030:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   12032:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12034:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev = fa->fa_dev;
   12036:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   12038:	f00e faea 	bl	20610 <settings_nvs_backend_init>
	if (rc) {
   1203c:	4604      	mov	r4, r0
   1203e:	b940      	cbnz	r0, 12052 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12040:	4e08      	ldr	r6, [pc, #32]	; (12064 <settings_backend_init+0x94>)
   12042:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   12044:	4628      	mov	r0, r5
   12046:	f7ff fe8f 	bl	11d68 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1204a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1204c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1204e:	f7ff fe99 	bl	11d84 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   12052:	4620      	mov	r0, r4
   12054:	b004      	add	sp, #16
   12056:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   12058:	f06f 0420 	mvn.w	r4, #32
   1205c:	e7f9      	b.n	12052 <settings_backend_init+0x82>
   1205e:	bf00      	nop
   12060:	200023a8 	.word	0x200023a8
   12064:	20000508 	.word	0x20000508

00012068 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1206c:	4605      	mov	r5, r0
   1206e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12072:	f3ef 8611 	mrs	r6, BASEPRI
   12076:	f383 8812 	msr	BASEPRI_MAX, r3
   1207a:	f3bf 8f6f 	isb	sy
	return list->head;
   1207e:	4b0e      	ldr	r3, [pc, #56]	; (120b8 <pm_state_notify+0x50>)
   12080:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12082:	b19c      	cbz	r4, 120ac <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12084:	4f0d      	ldr	r7, [pc, #52]	; (120bc <pm_state_notify+0x54>)
   12086:	f8df 8038 	ldr.w	r8, [pc, #56]	; 120c0 <pm_state_notify+0x58>
   1208a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   1208e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12092:	2d00      	cmp	r5, #0
   12094:	bf08      	it	eq
   12096:	4613      	moveq	r3, r2
		if (callback) {
   12098:	b12b      	cbz	r3, 120a6 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1209a:	f898 2014 	ldrb.w	r2, [r8, #20]
   1209e:	fb09 f202 	mul.w	r2, r9, r2
   120a2:	5cb8      	ldrb	r0, [r7, r2]
   120a4:	4798      	blx	r3
	return node->next;
   120a6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   120a8:	2c00      	cmp	r4, #0
   120aa:	d1f0      	bne.n	1208e <pm_state_notify+0x26>
	__asm__ volatile(
   120ac:	f386 8811 	msr	BASEPRI, r6
   120b0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   120b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   120b8:	200023e8 	.word	0x200023e8
   120bc:	200023fc 	.word	0x200023fc
   120c0:	20002b24 	.word	0x20002b24

000120c4 <pm_system_resume>:

void pm_system_resume(void)
{
   120c4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   120c6:	4b1a      	ldr	r3, [pc, #104]	; (12130 <pm_system_resume+0x6c>)
   120c8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   120ca:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   120ce:	f004 031f 	and.w	r3, r4, #31
   120d2:	2201      	movs	r2, #1
   120d4:	409a      	lsls	r2, r3
   120d6:	4b17      	ldr	r3, [pc, #92]	; (12134 <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   120d8:	0961      	lsrs	r1, r4, #5
   120da:	43d0      	mvns	r0, r2
   120dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   120e0:	e853 1f00 	ldrex	r1, [r3]
   120e4:	ea01 0500 	and.w	r5, r1, r0
   120e8:	e843 5c00 	strex	ip, r5, [r3]
   120ec:	f1bc 0f00 	cmp.w	ip, #0
   120f0:	d1f6      	bne.n	120e0 <pm_system_resume+0x1c>
   120f2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   120f6:	4211      	tst	r1, r2
   120f8:	d013      	beq.n	12122 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   120fa:	4b0f      	ldr	r3, [pc, #60]	; (12138 <pm_system_resume+0x74>)
   120fc:	4d0f      	ldr	r5, [pc, #60]	; (1213c <pm_system_resume+0x78>)
   120fe:	b18b      	cbz	r3, 12124 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   12100:	230c      	movs	r3, #12
   12102:	4363      	muls	r3, r4
   12104:	18ea      	adds	r2, r5, r3
   12106:	5ce8      	ldrb	r0, [r5, r3]
   12108:	7851      	ldrb	r1, [r2, #1]
   1210a:	f00f fc98 	bl	21a3e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1210e:	2000      	movs	r0, #0
   12110:	f7ff ffaa 	bl	12068 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12114:	230c      	movs	r3, #12
   12116:	435c      	muls	r4, r3
   12118:	192a      	adds	r2, r5, r4
   1211a:	2300      	movs	r3, #0
   1211c:	512b      	str	r3, [r5, r4]
   1211e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   12122:	bd38      	pop	{r3, r4, r5, pc}
   12124:	f383 8811 	msr	BASEPRI, r3
   12128:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1212c:	e7ef      	b.n	1210e <pm_system_resume+0x4a>
   1212e:	bf00      	nop
   12130:	20002b24 	.word	0x20002b24
   12134:	20002408 	.word	0x20002408
   12138:	00021a3f 	.word	0x00021a3f
   1213c:	200023fc 	.word	0x200023fc

00012140 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   12144:	4b33      	ldr	r3, [pc, #204]	; (12214 <pm_system_suspend+0xd4>)
{
   12146:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   12148:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1214a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1214e:	f3ef 8811 	mrs	r8, BASEPRI
   12152:	f383 8812 	msr	BASEPRI_MAX, r3
   12156:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1215a:	240c      	movs	r4, #12
   1215c:	4b2e      	ldr	r3, [pc, #184]	; (12218 <pm_system_suspend+0xd8>)
   1215e:	4e2f      	ldr	r6, [pc, #188]	; (1221c <pm_system_suspend+0xdc>)
   12160:	436c      	muls	r4, r5
   12162:	191a      	adds	r2, r3, r4
   12164:	5d19      	ldrb	r1, [r3, r4]
   12166:	2900      	cmp	r1, #0
   12168:	d049      	beq.n	121fe <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1216a:	ca07      	ldmia	r2, {r0, r1, r2}
   1216c:	eb06 0c04 	add.w	ip, r6, r4
   12170:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   12174:	2200      	movs	r2, #0
   12176:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   12178:	f388 8811 	msr	BASEPRI, r8
   1217c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12180:	230c      	movs	r3, #12
   12182:	436b      	muls	r3, r5
   12184:	18f2      	adds	r2, r6, r3
   12186:	5cf0      	ldrb	r0, [r6, r3]
   12188:	b3b8      	cbz	r0, 121fa <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1218a:	1c7b      	adds	r3, r7, #1
   1218c:	d00f      	beq.n	121ae <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1218e:	f8d2 c008 	ldr.w	ip, [r2, #8]
   12192:	4823      	ldr	r0, [pc, #140]	; (12220 <pm_system_suspend+0xe0>)
   12194:	4a23      	ldr	r2, [pc, #140]	; (12224 <pm_system_suspend+0xe4>)
   12196:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1219a:	2100      	movs	r1, #0
   1219c:	2300      	movs	r3, #0
   1219e:	fbec 0104 	umlal	r0, r1, ip, r4
   121a2:	f7ed ffad 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   121a6:	2101      	movs	r1, #1
   121a8:	1a38      	subs	r0, r7, r0
   121aa:	f013 fe49 	bl	25e40 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   121ae:	f00c fd95 	bl	1ecdc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   121b2:	2001      	movs	r0, #1
   121b4:	f7ff ff58 	bl	12068 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   121b8:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   121bc:	f005 021f 	and.w	r2, r5, #31
   121c0:	2101      	movs	r1, #1
   121c2:	4091      	lsls	r1, r2
   121c4:	4a18      	ldr	r2, [pc, #96]	; (12228 <pm_system_suspend+0xe8>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   121c6:	096b      	lsrs	r3, r5, #5
   121c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   121cc:	e853 2f00 	ldrex	r2, [r3]
   121d0:	430a      	orrs	r2, r1
   121d2:	e843 2000 	strex	r0, r2, [r3]
   121d6:	2800      	cmp	r0, #0
   121d8:	d1f8      	bne.n	121cc <pm_system_suspend+0x8c>
   121da:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   121de:	4b13      	ldr	r3, [pc, #76]	; (1222c <pm_system_suspend+0xec>)
   121e0:	b133      	cbz	r3, 121f0 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   121e2:	200c      	movs	r0, #12
   121e4:	4368      	muls	r0, r5
   121e6:	1833      	adds	r3, r6, r0
   121e8:	5c30      	ldrb	r0, [r6, r0]
   121ea:	7859      	ldrb	r1, [r3, #1]
   121ec:	f00f fc1b 	bl	21a26 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   121f0:	f7ff ff68 	bl	120c4 <pm_system_resume>
	k_sched_unlock();
   121f4:	f00c ff42 	bl	1f07c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   121f8:	2001      	movs	r0, #1
}
   121fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   121fe:	4601      	mov	r1, r0
   12200:	4628      	mov	r0, r5
   12202:	f000 f815 	bl	12230 <pm_policy_next_state>
		if (info != NULL) {
   12206:	2800      	cmp	r0, #0
   12208:	d0b6      	beq.n	12178 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1220a:	c807      	ldmia	r0, {r0, r1, r2}
   1220c:	4434      	add	r4, r6
   1220e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12212:	e7b1      	b.n	12178 <pm_system_suspend+0x38>
   12214:	20002b24 	.word	0x20002b24
   12218:	200023f0 	.word	0x200023f0
   1221c:	200023fc 	.word	0x200023fc
   12220:	000f423f 	.word	0x000f423f
   12224:	000f4240 	.word	0x000f4240
   12228:	20002408 	.word	0x20002408
   1222c:	00021a27 	.word	0x00021a27

00012230 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12234:	b085      	sub	sp, #20
   12236:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12238:	a903      	add	r1, sp, #12
   1223a:	f000 f841 	bl	122c0 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   1223e:	9b03      	ldr	r3, [sp, #12]
   12240:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12242:	4b1c      	ldr	r3, [pc, #112]	; (122b4 <pm_policy_next_state+0x84>)
   12244:	f8df 8070 	ldr.w	r8, [pc, #112]	; 122b8 <pm_policy_next_state+0x88>
   12248:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1224c:	1e44      	subs	r4, r0, #1
   1224e:	b224      	sxth	r4, r4
   12250:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   12254:	f04f 0b00 	mov.w	fp, #0
   12258:	1c63      	adds	r3, r4, #1
   1225a:	d104      	bne.n	12266 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1225c:	2500      	movs	r5, #0
}
   1225e:	4628      	mov	r0, r5
   12260:	b005      	add	sp, #20
   12262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   12266:	9b01      	ldr	r3, [sp, #4]
   12268:	4a14      	ldr	r2, [pc, #80]	; (122bc <pm_policy_next_state+0x8c>)
   1226a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1226e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12272:	46c4      	mov	ip, r8
   12274:	6868      	ldr	r0, [r5, #4]
   12276:	4659      	mov	r1, fp
   12278:	fbe0 c107 	umlal	ip, r1, r0, r7
   1227c:	2300      	movs	r3, #0
   1227e:	4660      	mov	r0, ip
   12280:	f7ed ff3e 	bl	100 <__aeabi_uldivmod>
   12284:	4681      	mov	r9, r0
   12286:	68a8      	ldr	r0, [r5, #8]
   12288:	4a0c      	ldr	r2, [pc, #48]	; (122bc <pm_policy_next_state+0x8c>)
   1228a:	46c4      	mov	ip, r8
   1228c:	4659      	mov	r1, fp
   1228e:	fbe0 c107 	umlal	ip, r1, r0, r7
   12292:	2300      	movs	r3, #0
   12294:	4660      	mov	r0, ip
   12296:	f7ed ff33 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1229a:	f1ba 3fff 	cmp.w	sl, #4294967295
   1229e:	d001      	beq.n	122a4 <pm_policy_next_state+0x74>
   122a0:	4582      	cmp	sl, r0
   122a2:	d904      	bls.n	122ae <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   122a4:	1c72      	adds	r2, r6, #1
   122a6:	d0da      	beq.n	1225e <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   122a8:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   122aa:	42b0      	cmp	r0, r6
   122ac:	d9d7      	bls.n	1225e <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   122ae:	3c01      	subs	r4, #1
   122b0:	b224      	sxth	r4, r4
   122b2:	e7d1      	b.n	12258 <pm_policy_next_state+0x28>
   122b4:	2000051c 	.word	0x2000051c
   122b8:	000f423f 	.word	0x000f423f
   122bc:	000f4240 	.word	0x000f4240

000122c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   122c0:	b908      	cbnz	r0, 122c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   122c2:	4b02      	ldr	r3, [pc, #8]	; (122cc <pm_state_cpu_get_all+0xc>)
   122c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   122c6:	2000      	movs	r0, #0
   122c8:	4770      	bx	lr
   122ca:	bf00      	nop
   122cc:	000266bc 	.word	0x000266bc

000122d0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   122d0:	4b01      	ldr	r3, [pc, #4]	; (122d8 <uECC_get_rng+0x8>)
   122d2:	6818      	ldr	r0, [r3, #0]
   122d4:	4770      	bx	lr
   122d6:	bf00      	nop
   122d8:	20000520 	.word	0x20000520

000122dc <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   122dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   122de:	2208      	movs	r2, #8
{
   122e0:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   122e2:	f00e fb64 	bl	209ae <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   122e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   122e8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   122ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   122ec:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   122ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   122f0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   122f2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   122f4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   122f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   122f8:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   122fa:	4613      	mov	r3, r2
   122fc:	466a      	mov	r2, sp
{
   122fe:	460c      	mov	r4, r1
   12300:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   12302:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12304:	4611      	mov	r1, r2
   12306:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   12308:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1230c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1230e:	f00e fa64 	bl	207da <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12312:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12314:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12316:	4630      	mov	r0, r6
   12318:	f00e fa5f 	bl	207da <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   1231c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1231e:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   12320:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12322:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   12324:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12326:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   12328:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1232a:	4405      	add	r5, r0
	tmp[7] = 0;
   1232c:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12330:	4610      	mov	r0, r2
   12332:	4611      	mov	r1, r2
   12334:	f00e fa51 	bl	207da <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12338:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1233a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1233c:	4630      	mov	r0, r6
   1233e:	f00e fa4c 	bl	207da <uECC_vli_add>
   12342:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   12344:	6a20      	ldr	r0, [r4, #32]
   12346:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   12348:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1234a:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   1234c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1234e:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   12350:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   12352:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   12354:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   12356:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12358:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1235a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1235e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12360:	f00e fa3b 	bl	207da <uECC_vli_add>
   12364:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   12366:	6a60      	ldr	r0, [r4, #36]	; 0x24
   12368:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   1236a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   1236c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   12370:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   12372:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12374:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   12376:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   1237a:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   1237c:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   12380:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   12382:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   12386:	6a20      	ldr	r0, [r4, #32]
   12388:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1238a:	4630      	mov	r0, r6
   1238c:	f00e fa25 	bl	207da <uECC_vli_add>
   12390:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   12392:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12394:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   12396:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12398:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   1239a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1239c:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   1239e:	6a20      	ldr	r0, [r4, #32]
   123a0:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   123a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   123a4:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123a6:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   123a8:	e9cd 7704 	strd	r7, r7, [sp, #16]
   123ac:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123ae:	f00e fb31 	bl	20a14 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   123b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   123b4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   123b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   123b8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   123ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   123bc:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   123be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   123c0:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   123c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   123c4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   123c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   123c8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123ca:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123cc:	2308      	movs	r3, #8
   123ce:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   123d0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123d4:	f00e fb1e 	bl	20a14 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   123d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   123da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   123dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   123de:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   123e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   123e2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   123e4:	6a23      	ldr	r3, [r4, #32]
   123e6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   123e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   123ea:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   123ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   123ee:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   123f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   123f4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123f6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   123f8:	2308      	movs	r3, #8
   123fa:	4630      	mov	r0, r6
   123fc:	f00e fb0a 	bl	20a14 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   12400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12402:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   12404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   12406:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   1240a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1240c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   1240e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12410:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   12412:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   12414:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   12418:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1241a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1241c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1241e:	2308      	movs	r3, #8
   12420:	4630      	mov	r0, r6
   12422:	f00e faf7 	bl	20a14 <uECC_vli_sub>

	if (carry < 0) {
   12426:	1a2d      	subs	r5, r5, r0
   12428:	d410      	bmi.n	1244c <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1242a:	4c0d      	ldr	r4, [pc, #52]	; (12460 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
   1242c:	b935      	cbnz	r5, 1243c <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1242e:	2208      	movs	r2, #8
   12430:	4631      	mov	r1, r6
   12432:	4620      	mov	r0, r4
   12434:	f00e fac7 	bl	209c6 <uECC_vli_cmp_unsafe>
		while (carry || 
   12438:	2801      	cmp	r0, #1
   1243a:	d00f      	beq.n	1245c <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1243c:	2308      	movs	r3, #8
   1243e:	4622      	mov	r2, r4
   12440:	4631      	mov	r1, r6
   12442:	4630      	mov	r0, r6
   12444:	f00e fae6 	bl	20a14 <uECC_vli_sub>
   12448:	1a2d      	subs	r5, r5, r0
   1244a:	e7ef      	b.n	1242c <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1244c:	4a04      	ldr	r2, [pc, #16]	; (12460 <vli_mmod_fast_secp256r1+0x184>)
   1244e:	2308      	movs	r3, #8
   12450:	4631      	mov	r1, r6
   12452:	4630      	mov	r0, r6
   12454:	f00e f9c1 	bl	207da <uECC_vli_add>
		while (carry < 0);
   12458:	182d      	adds	r5, r5, r0
   1245a:	d4f8      	bmi.n	1244e <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
   1245c:	b009      	add	sp, #36	; 0x24
   1245e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12460:	000266c0 	.word	0x000266c0

00012464 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12464:	4904      	ldr	r1, [pc, #16]	; (12478 <sub_bytes+0x14>)
   12466:	1e43      	subs	r3, r0, #1
   12468:	300f      	adds	r0, #15
   1246a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1246e:	5c8a      	ldrb	r2, [r1, r2]
   12470:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12472:	4283      	cmp	r3, r0
   12474:	d1f9      	bne.n	1246a <sub_bytes+0x6>
	}
}
   12476:	4770      	bx	lr
   12478:	0002734c 	.word	0x0002734c

0001247c <tc_aes128_set_encrypt_key>:
{
   1247c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1247e:	4e26      	ldr	r6, [pc, #152]	; (12518 <tc_aes128_set_encrypt_key+0x9c>)
{
   12480:	4607      	mov	r7, r0
   12482:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12484:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12486:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12488:	ad01      	add	r5, sp, #4
   1248a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1248c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1248e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12490:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12494:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12498:	4638      	mov	r0, r7
   1249a:	2f00      	cmp	r7, #0
   1249c:	d038      	beq.n	12510 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1249e:	2c00      	cmp	r4, #0
   124a0:	d038      	beq.n	12514 <tc_aes128_set_encrypt_key+0x98>
   124a2:	1f38      	subs	r0, r7, #4
   124a4:	4621      	mov	r1, r4
   124a6:	4602      	mov	r2, r0
   124a8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   124aa:	784b      	ldrb	r3, [r1, #1]
   124ac:	780d      	ldrb	r5, [r1, #0]
   124ae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   124b0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   124b4:	78cd      	ldrb	r5, [r1, #3]
   124b6:	432b      	orrs	r3, r5
   124b8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   124ba:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   124bc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   124c0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   124c2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   124c6:	d1f0      	bne.n	124aa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   124c8:	4c14      	ldr	r4, [pc, #80]	; (1251c <tc_aes128_set_encrypt_key+0xa0>)
   124ca:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   124cc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   124ce:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   124d0:	d116      	bne.n	12500 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   124d2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   124d6:	5ca5      	ldrb	r5, [r4, r2]
   124d8:	0e1a      	lsrs	r2, r3, #24
   124da:	5ca2      	ldrb	r2, [r4, r2]
   124dc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   124e0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   124e4:	b2db      	uxtb	r3, r3
   124e6:	5d65      	ldrb	r5, [r4, r5]
   124e8:	5ce3      	ldrb	r3, [r4, r3]
   124ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   124ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   124f2:	ad0c      	add	r5, sp, #48	; 0x30
   124f4:	f021 0303 	bic.w	r3, r1, #3
   124f8:	442b      	add	r3, r5
   124fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   124fe:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   12500:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12504:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12506:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12508:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1250a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1250c:	d1de      	bne.n	124cc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1250e:	2001      	movs	r0, #1
}
   12510:	b00d      	add	sp, #52	; 0x34
   12512:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12514:	4620      	mov	r0, r4
   12516:	e7fb      	b.n	12510 <tc_aes128_set_encrypt_key+0x94>
   12518:	00026590 	.word	0x00026590
   1251c:	0002734c 	.word	0x0002734c

00012520 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12520:	4901      	ldr	r1, [pc, #4]	; (12528 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12522:	2210      	movs	r2, #16
	str	r2, [r1]
   12524:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12526:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12528:	e000ed10 	.word	0xe000ed10

0001252c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1252c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1252e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12530:	f380 8811 	msr	BASEPRI, r0
	isb
   12534:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12538:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1253c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1253e:	b662      	cpsie	i
	isb
   12540:	f3bf 8f6f 	isb	sy

	bx	lr
   12544:	4770      	bx	lr
   12546:	bf00      	nop

00012548 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12548:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1254a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1254c:	f381 8811 	msr	BASEPRI, r1

	wfe
   12550:	bf20      	wfe

	msr	BASEPRI, r0
   12552:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12556:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12558:	4770      	bx	lr
   1255a:	bf00      	nop

0001255c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1255c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1255e:	2b00      	cmp	r3, #0
   12560:	db08      	blt.n	12574 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12562:	2201      	movs	r2, #1
   12564:	f000 001f 	and.w	r0, r0, #31
   12568:	fa02 f000 	lsl.w	r0, r2, r0
   1256c:	095b      	lsrs	r3, r3, #5
   1256e:	4a02      	ldr	r2, [pc, #8]	; (12578 <arch_irq_enable+0x1c>)
   12570:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12574:	4770      	bx	lr
   12576:	bf00      	nop
   12578:	e000e100 	.word	0xe000e100

0001257c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1257c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1257e:	2b00      	cmp	r3, #0
   12580:	db0d      	blt.n	1259e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12582:	2201      	movs	r2, #1
   12584:	095b      	lsrs	r3, r3, #5
   12586:	f000 001f 	and.w	r0, r0, #31
   1258a:	fa02 f000 	lsl.w	r0, r2, r0
   1258e:	3320      	adds	r3, #32
   12590:	4a03      	ldr	r2, [pc, #12]	; (125a0 <arch_irq_disable+0x24>)
   12592:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1259a:	f3bf 8f6f 	isb	sy
}
   1259e:	4770      	bx	lr
   125a0:	e000e100 	.word	0xe000e100

000125a4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   125a4:	4b05      	ldr	r3, [pc, #20]	; (125bc <arch_irq_is_enabled+0x18>)
   125a6:	0942      	lsrs	r2, r0, #5
   125a8:	f000 001f 	and.w	r0, r0, #31
   125ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   125b0:	2301      	movs	r3, #1
   125b2:	fa03 f000 	lsl.w	r0, r3, r0
}
   125b6:	4010      	ands	r0, r2
   125b8:	4770      	bx	lr
   125ba:	bf00      	nop
   125bc:	e000e100 	.word	0xe000e100

000125c0 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   125c0:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   125c2:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   125c4:	bf54      	ite	pl
   125c6:	1c8b      	addpl	r3, r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   125c8:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   125ca:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125cc:	bfac      	ite	ge
   125ce:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125d2:	4a07      	ldrlt	r2, [pc, #28]	; (125f0 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125d4:	ea4f 1343 	mov.w	r3, r3, lsl #5
   125d8:	bfac      	ite	ge
   125da:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125de:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125e2:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125e4:	bfb4      	ite	lt
   125e6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125e8:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   125ec:	4770      	bx	lr
   125ee:	bf00      	nop
   125f0:	e000ed14 	.word	0xe000ed14

000125f4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   125f4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   125f6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   125f8:	4b04      	ldr	r3, [pc, #16]	; (1260c <_arch_isr_direct_pm+0x18>)
   125fa:	699a      	ldr	r2, [r3, #24]
   125fc:	b11a      	cbz	r2, 12606 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   125fe:	2200      	movs	r2, #0
   12600:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   12602:	f013 f93d 	bl	25880 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12606:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12608:	bd08      	pop	{r3, pc}
   1260a:	bf00      	nop
   1260c:	20002b24 	.word	0x20002b24

00012610 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12610:	bf30      	wfi
    b z_SysNmiOnReset
   12612:	f7ff bffd 	b.w	12610 <z_SysNmiOnReset>
   12616:	bf00      	nop

00012618 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12618:	4a0b      	ldr	r2, [pc, #44]	; (12648 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1261a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1261c:	4b0b      	ldr	r3, [pc, #44]	; (1264c <z_arm_prep_c+0x34>)
   1261e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12622:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12628:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1262c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12630:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12638:	f00b fe2e 	bl	1e298 <z_bss_zero>
	z_data_copy();
   1263c:	f00c fe60 	bl	1f300 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12640:	f000 f9d0 	bl	129e4 <z_arm_interrupt_init>
	z_cstart();
   12644:	f00b fe6c 	bl	1e320 <z_cstart>
   12648:	00000000 	.word	0x00000000
   1264c:	e000ed00 	.word	0xe000ed00

00012650 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12650:	4a09      	ldr	r2, [pc, #36]	; (12678 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12652:	490a      	ldr	r1, [pc, #40]	; (1267c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12654:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12656:	6809      	ldr	r1, [r1, #0]
   12658:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1265a:	4909      	ldr	r1, [pc, #36]	; (12680 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1265c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1265e:	684b      	ldr	r3, [r1, #4]
   12660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12664:	604b      	str	r3, [r1, #4]
   12666:	2300      	movs	r3, #0
   12668:	f383 8811 	msr	BASEPRI, r3
   1266c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12670:	6893      	ldr	r3, [r2, #8]
}
   12672:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12674:	4770      	bx	lr
   12676:	bf00      	nop
   12678:	20002b24 	.word	0x20002b24
   1267c:	00026ebc 	.word	0x00026ebc
   12680:	e000ed00 	.word	0xe000ed00

00012684 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12684:	4912      	ldr	r1, [pc, #72]	; (126d0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12686:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12688:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1268c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1268e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12692:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12696:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   12698:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1269c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   126a0:	4f0c      	ldr	r7, [pc, #48]	; (126d4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   126a2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   126a6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   126a8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   126aa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   126ac:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   126ae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   126b0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   126b2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   126b6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   126b8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   126ba:	f000 fa2f 	bl	12b1c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   126be:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   126c2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   126c6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   126ca:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   126ce:	4770      	bx	lr
    ldr r1, =_kernel
   126d0:	20002b24 	.word	0x20002b24
    ldr v4, =_SCS_ICSR
   126d4:	e000ed04 	.word	0xe000ed04

000126d8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   126d8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   126dc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   126de:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   126e2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   126e6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   126e8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   126ec:	2902      	cmp	r1, #2
    beq _oops
   126ee:	d0ff      	beq.n	126f0 <_oops>

000126f0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   126f0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   126f2:	f00f f8b6 	bl	21862 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   126f6:	bd01      	pop	{r0, pc}

000126f8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   126f8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   126fc:	9b00      	ldr	r3, [sp, #0]
   126fe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12702:	490a      	ldr	r1, [pc, #40]	; (1272c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12704:	9b01      	ldr	r3, [sp, #4]
   12706:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1270a:	9b02      	ldr	r3, [sp, #8]
   1270c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12710:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12718:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1271c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12720:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12722:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12724:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12726:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12728:	4770      	bx	lr
   1272a:	bf00      	nop
   1272c:	0001fa05 	.word	0x0001fa05

00012730 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12730:	4a09      	ldr	r2, [pc, #36]	; (12758 <z_check_thread_stack_fail+0x28>)
{
   12732:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12734:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12736:	b170      	cbz	r0, 12756 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12738:	f113 0f16 	cmn.w	r3, #22
   1273c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1273e:	d005      	beq.n	1274c <z_check_thread_stack_fail+0x1c>
   12740:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   12744:	429a      	cmp	r2, r3
   12746:	d805      	bhi.n	12754 <z_check_thread_stack_fail+0x24>
   12748:	4283      	cmp	r3, r0
   1274a:	d203      	bcs.n	12754 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1274c:	4281      	cmp	r1, r0
   1274e:	bf28      	it	cs
   12750:	2000      	movcs	r0, #0
   12752:	4770      	bx	lr
   12754:	2000      	movs	r0, #0
}
   12756:	4770      	bx	lr
   12758:	20002b24 	.word	0x20002b24

0001275c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1275c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1275e:	4b09      	ldr	r3, [pc, #36]	; (12784 <arch_switch_to_main_thread+0x28>)
   12760:	6098      	str	r0, [r3, #8]
{
   12762:	460d      	mov	r5, r1
   12764:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   12766:	f000 f9d9 	bl	12b1c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1276a:	4620      	mov	r0, r4
   1276c:	f385 8809 	msr	PSP, r5
   12770:	2100      	movs	r1, #0
   12772:	b663      	cpsie	if
   12774:	f381 8811 	msr	BASEPRI, r1
   12778:	f3bf 8f6f 	isb	sy
   1277c:	2200      	movs	r2, #0
   1277e:	2300      	movs	r3, #0
   12780:	f00d f940 	bl	1fa04 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12784:	20002b24 	.word	0x20002b24

00012788 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12788:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1278a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1278c:	4a0b      	ldr	r2, [pc, #44]	; (127bc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1278e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12790:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12792:	bf1e      	ittt	ne
	movne	r1, #0
   12794:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12796:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   12798:	f013 f872 	blne	25880 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1279c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1279e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   127a2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   127a6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   127aa:	4905      	ldr	r1, [pc, #20]	; (127c0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   127ac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   127ae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   127b0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   127b2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   127b6:	4903      	ldr	r1, [pc, #12]	; (127c4 <_isr_wrapper+0x3c>)
	bx r1
   127b8:	4708      	bx	r1
   127ba:	0000      	.short	0x0000
	ldr r2, =_kernel
   127bc:	20002b24 	.word	0x20002b24
	ldr r1, =_sw_isr_table
   127c0:	000262d0 	.word	0x000262d0
	ldr r1, =z_arm_int_exit
   127c4:	000127c9 	.word	0x000127c9

000127c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   127c8:	4b04      	ldr	r3, [pc, #16]	; (127dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   127ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   127cc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   127ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   127d0:	d003      	beq.n	127da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   127d2:	4903      	ldr	r1, [pc, #12]	; (127e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   127d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   127d8:	600a      	str	r2, [r1, #0]

000127da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   127da:	4770      	bx	lr
	ldr r3, =_kernel
   127dc:	20002b24 	.word	0x20002b24
	ldr r1, =_SCS_ICSR
   127e0:	e000ed04 	.word	0xe000ed04

000127e4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   127e4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   127e6:	4b1c      	ldr	r3, [pc, #112]	; (12858 <mem_manage_fault+0x74>)
{
   127e8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   127ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   127ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   127ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   127f0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   127f2:	0790      	lsls	r0, r2, #30
   127f4:	d520      	bpl.n	12838 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   127f6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   127f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   127fa:	0612      	lsls	r2, r2, #24
   127fc:	d51c      	bpl.n	12838 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   127fe:	b119      	cbz	r1, 12808 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12806:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1280a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1280e:	06d2      	lsls	r2, r2, #27
   12810:	d415      	bmi.n	1283e <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12814:	079b      	lsls	r3, r3, #30
   12816:	d412      	bmi.n	1283e <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12818:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1281a:	4b0f      	ldr	r3, [pc, #60]	; (12858 <mem_manage_fault+0x74>)
   1281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1281e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   12820:	bf42      	ittt	mi
   12822:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   12824:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   12828:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1282a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1282c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   12830:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12832:	2300      	movs	r3, #0
   12834:	7023      	strb	r3, [r4, #0]

	return reason;
}
   12836:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   12838:	f06f 0015 	mvn.w	r0, #21
   1283c:	e7e4      	b.n	12808 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1283e:	4b06      	ldr	r3, [pc, #24]	; (12858 <mem_manage_fault+0x74>)
   12840:	685b      	ldr	r3, [r3, #4]
   12842:	0519      	lsls	r1, r3, #20
   12844:	d5e8      	bpl.n	12818 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12846:	4629      	mov	r1, r5
   12848:	f7ff ff72 	bl	12730 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1284c:	2800      	cmp	r0, #0
   1284e:	d0e3      	beq.n	12818 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12850:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12854:	2002      	movs	r0, #2
   12856:	e7e0      	b.n	1281a <mem_manage_fault+0x36>
   12858:	e000ed00 	.word	0xe000ed00

0001285c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1285c:	4b0d      	ldr	r3, [pc, #52]	; (12894 <bus_fault.constprop.0+0x38>)
   1285e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12864:	0592      	lsls	r2, r2, #22
   12866:	d508      	bpl.n	1287a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12868:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1286a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1286c:	0412      	lsls	r2, r2, #16
   1286e:	d504      	bpl.n	1287a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   12870:	b118      	cbz	r0, 1287a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12878:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1287a:	4b06      	ldr	r3, [pc, #24]	; (12894 <bus_fault.constprop.0+0x38>)
   1287c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1287e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12880:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12882:	bf58      	it	pl
   12884:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12886:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12888:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1288a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1288e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12890:	7008      	strb	r0, [r1, #0]

	return reason;
}
   12892:	4770      	bx	lr
   12894:	e000ed00 	.word	0xe000ed00

00012898 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12898:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1289a:	4b47      	ldr	r3, [pc, #284]	; (129b8 <z_arm_fault+0x120>)
   1289c:	685b      	ldr	r3, [r3, #4]
{
   1289e:	b08b      	sub	sp, #44	; 0x2c
   128a0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   128a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   128a6:	2600      	movs	r6, #0
   128a8:	f386 8811 	msr	BASEPRI, r6
   128ac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   128b0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   128b4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   128b8:	d111      	bne.n	128de <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   128ba:	f002 010c 	and.w	r1, r2, #12
   128be:	2908      	cmp	r1, #8
   128c0:	d00d      	beq.n	128de <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   128c2:	0712      	lsls	r2, r2, #28
   128c4:	d401      	bmi.n	128ca <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   128c6:	4605      	mov	r5, r0
			*nested_exc = true;
   128c8:	2601      	movs	r6, #1
	*recoverable = false;
   128ca:	2200      	movs	r2, #0
	switch (fault) {
   128cc:	3b03      	subs	r3, #3
	*recoverable = false;
   128ce:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   128d2:	2b03      	cmp	r3, #3
   128d4:	d854      	bhi.n	12980 <z_arm_fault+0xe8>
   128d6:	e8df f003 	tbb	[pc, r3]
   128da:	5504      	.short	0x5504
   128dc:	5d59      	.short	0x5d59
		return NULL;
   128de:	4635      	mov	r5, r6
   128e0:	e7f3      	b.n	128ca <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   128e2:	4b35      	ldr	r3, [pc, #212]	; (129b8 <z_arm_fault+0x120>)
   128e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   128e6:	f014 0402 	ands.w	r4, r4, #2
   128ea:	d149      	bne.n	12980 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   128ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   128ee:	2a00      	cmp	r2, #0
   128f0:	db16      	blt.n	12920 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   128f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   128f4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   128f8:	d012      	beq.n	12920 <z_arm_fault+0x88>
	uint16_t fault_insn = *(ret_addr - 1);
   128fa:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   128fc:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   12900:	f64d 7202 	movw	r2, #57090	; 0xdf02
   12904:	4291      	cmp	r1, r2
   12906:	d00a      	beq.n	1291e <z_arm_fault+0x86>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   12908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1290a:	b2d2      	uxtb	r2, r2
   1290c:	b30a      	cbz	r2, 12952 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
   1290e:	f10d 0207 	add.w	r2, sp, #7
   12912:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12914:	4628      	mov	r0, r5
   12916:	f7ff ff65 	bl	127e4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   1291a:	4604      	mov	r4, r0
		break;
   1291c:	e000      	b.n	12920 <z_arm_fault+0x88>
			reason = esf->basic.r0;
   1291e:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12920:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12924:	b99b      	cbnz	r3, 1294e <z_arm_fault+0xb6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12926:	2220      	movs	r2, #32
   12928:	4629      	mov	r1, r5
   1292a:	a802      	add	r0, sp, #8
   1292c:	f00f f864 	bl	219f8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12930:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12932:	2e00      	cmp	r6, #0
   12934:	d03b      	beq.n	129ae <z_arm_fault+0x116>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12936:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1293a:	b922      	cbnz	r2, 12946 <z_arm_fault+0xae>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1293c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12940:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12944:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12946:	a902      	add	r1, sp, #8
   12948:	4620      	mov	r0, r4
   1294a:	f00e ff88 	bl	2185e <z_arm_fatal_error>
}
   1294e:	b00b      	add	sp, #44	; 0x2c
   12950:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   12952:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   12954:	f417 477f 	ands.w	r7, r7, #65280	; 0xff00
   12958:	d005      	beq.n	12966 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   1295a:	f10d 0107 	add.w	r1, sp, #7
   1295e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12960:	f7ff ff7c 	bl	1285c <bus_fault.constprop.0>
   12964:	e7d9      	b.n	1291a <z_arm_fault+0x82>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   12966:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   12968:	4914      	ldr	r1, [pc, #80]	; (129bc <z_arm_fault+0x124>)
   1296a:	400c      	ands	r4, r1
   1296c:	d0d8      	beq.n	12920 <z_arm_fault+0x88>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1296e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1297a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1297c:	430a      	orrs	r2, r1
   1297e:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12980:	2400      	movs	r4, #0
   12982:	e7cd      	b.n	12920 <z_arm_fault+0x88>
		reason = mem_manage_fault(esf, 0, recoverable);
   12984:	f10d 0207 	add.w	r2, sp, #7
   12988:	2100      	movs	r1, #0
   1298a:	e7c3      	b.n	12914 <z_arm_fault+0x7c>
		reason = bus_fault(esf, 0, recoverable);
   1298c:	f10d 0107 	add.w	r1, sp, #7
   12990:	2000      	movs	r0, #0
   12992:	e7e5      	b.n	12960 <z_arm_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12994:	4b08      	ldr	r3, [pc, #32]	; (129b8 <z_arm_fault+0x120>)
   12996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1299a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1299c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1299e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   129a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   129a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   129a4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   129a8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   129ac:	e7e7      	b.n	1297e <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   129ae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   129b2:	f023 0301 	bic.w	r3, r3, #1
   129b6:	e7c5      	b.n	12944 <z_arm_fault+0xac>
   129b8:	e000ed00 	.word	0xe000ed00
   129bc:	ffff0000 	.word	0xffff0000

000129c0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   129c0:	4a02      	ldr	r2, [pc, #8]	; (129cc <z_arm_fault_init+0xc>)
   129c2:	6953      	ldr	r3, [r2, #20]
   129c4:	f043 0310 	orr.w	r3, r3, #16
   129c8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   129ca:	4770      	bx	lr
   129cc:	e000ed00 	.word	0xe000ed00

000129d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   129d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   129d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   129d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   129da:	4672      	mov	r2, lr
	bl z_arm_fault
   129dc:	f7ff ff5c 	bl	12898 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   129e0:	bd01      	pop	{r0, pc}
   129e2:	bf00      	nop

000129e4 <z_arm_interrupt_init>:
   129e4:	4804      	ldr	r0, [pc, #16]	; (129f8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   129e6:	2300      	movs	r3, #0
   129e8:	2140      	movs	r1, #64	; 0x40
   129ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   129ec:	3301      	adds	r3, #1
   129ee:	2b30      	cmp	r3, #48	; 0x30
   129f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   129f4:	d1f9      	bne.n	129ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   129f6:	4770      	bx	lr
   129f8:	e000e100 	.word	0xe000e100

000129fc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   129fc:	2000      	movs	r0, #0
    msr CONTROL, r0
   129fe:	f380 8814 	msr	CONTROL, r0
    isb
   12a02:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12a06:	f7fe fee3 	bl	117d0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12a0a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12a0c:	490d      	ldr	r1, [pc, #52]	; (12a44 <__start+0x48>)
    str r0, [r1]
   12a0e:	6008      	str	r0, [r1, #0]
    dsb
   12a10:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12a14:	480c      	ldr	r0, [pc, #48]	; (12a48 <__start+0x4c>)
    msr msp, r0
   12a16:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12a1a:	f000 f82b 	bl	12a74 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12a1e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12a20:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12a24:	4809      	ldr	r0, [pc, #36]	; (12a4c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12a26:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   12a2a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12a2c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12a30:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12a34:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12a36:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12a38:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12a3c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12a40:	f7ff fdea 	bl	12618 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12a44:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12a48:	20005500 	.word	0x20005500
    ldr r0, =z_interrupt_stacks
   12a4c:	200056c0 	.word	0x200056c0

00012a50 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12a50:	4907      	ldr	r1, [pc, #28]	; (12a70 <z_arm_clear_arm_mpu_config+0x20>)
   12a52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   12a56:	2300      	movs	r3, #0
	int num_regions =
   12a58:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12a5c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12a5e:	4293      	cmp	r3, r2
   12a60:	d100      	bne.n	12a64 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   12a62:	4770      	bx	lr
  MPU->RNR = rnr;
   12a64:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   12a68:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12a6c:	3301      	adds	r3, #1
   12a6e:	e7f6      	b.n	12a5e <z_arm_clear_arm_mpu_config+0xe>
   12a70:	e000ed00 	.word	0xe000ed00

00012a74 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12a74:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12a76:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12a78:	2300      	movs	r3, #0
   12a7a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12a7e:	f7ff ffe7 	bl	12a50 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12a82:	4b14      	ldr	r3, [pc, #80]	; (12ad4 <z_arm_init_arch_hw_at_boot+0x60>)
   12a84:	f04f 32ff 	mov.w	r2, #4294967295
   12a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12a98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12a9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12aa0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12aa4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12aa8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12aac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12ab0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12ab4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12ab8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12abc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12ac0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12ac4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12ac8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12aca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ace:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12ad2:	bd08      	pop	{r3, pc}
   12ad4:	e000e100 	.word	0xe000e100

00012ad8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12ad8:	4b08      	ldr	r3, [pc, #32]	; (12afc <z_impl_k_thread_abort+0x24>)
   12ada:	689b      	ldr	r3, [r3, #8]
   12adc:	4283      	cmp	r3, r0
   12ade:	d10b      	bne.n	12af8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12ae0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12ae4:	b143      	cbz	r3, 12af8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12ae6:	4b06      	ldr	r3, [pc, #24]	; (12b00 <z_impl_k_thread_abort+0x28>)
   12ae8:	685a      	ldr	r2, [r3, #4]
   12aea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12aee:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   12af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12af6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12af8:	f00c bb90 	b.w	1f21c <z_thread_abort>
   12afc:	20002b24 	.word	0x20002b24
   12b00:	e000ed00 	.word	0xe000ed00

00012b04 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12b04:	4b02      	ldr	r3, [pc, #8]	; (12b10 <z_arm_configure_static_mpu_regions+0xc>)
   12b06:	4a03      	ldr	r2, [pc, #12]	; (12b14 <z_arm_configure_static_mpu_regions+0x10>)
   12b08:	4803      	ldr	r0, [pc, #12]	; (12b18 <z_arm_configure_static_mpu_regions+0x14>)
   12b0a:	2101      	movs	r1, #1
   12b0c:	f000 b86e 	b.w	12bec <arm_core_mpu_configure_static_mpu_regions>
   12b10:	20020000 	.word	0x20020000
   12b14:	20000000 	.word	0x20000000
   12b18:	0002676c 	.word	0x0002676c

00012b1c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12b1c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12b1e:	4b05      	ldr	r3, [pc, #20]	; (12b34 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12b20:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   12b22:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12b24:	4a04      	ldr	r2, [pc, #16]	; (12b38 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12b26:	2140      	movs	r1, #64	; 0x40
   12b28:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12b2c:	4618      	mov	r0, r3
   12b2e:	2101      	movs	r1, #1
   12b30:	f000 b866 	b.w	12c00 <arm_core_mpu_configure_dynamic_mpu_regions>
   12b34:	2000240c 	.word	0x2000240c
   12b38:	150b0000 	.word	0x150b0000

00012b3c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12b3e:	4f1f      	ldr	r7, [pc, #124]	; (12bbc <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12b40:	2600      	movs	r6, #0
   12b42:	428e      	cmp	r6, r1
   12b44:	db01      	blt.n	12b4a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12b46:	4610      	mov	r0, r2
   12b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   12b4a:	6844      	ldr	r4, [r0, #4]
   12b4c:	b39c      	cbz	r4, 12bb6 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   12b4e:	b153      	cbz	r3, 12b66 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12b50:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12b54:	ea14 0f0c 	tst.w	r4, ip
   12b58:	d118      	bne.n	12b8c <mpu_configure_regions+0x50>
		&&
   12b5a:	2c1f      	cmp	r4, #31
   12b5c:	d916      	bls.n	12b8c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   12b5e:	6805      	ldr	r5, [r0, #0]
		&&
   12b60:	ea1c 0f05 	tst.w	ip, r5
   12b64:	d112      	bne.n	12b8c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12b66:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12b68:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12b6a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12b6e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   12b70:	d90f      	bls.n	12b92 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   12b72:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12b76:	d80e      	bhi.n	12b96 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12b78:	3c01      	subs	r4, #1
   12b7a:	fab4 f484 	clz	r4, r4
   12b7e:	f1c4 041f 	rsb	r4, r4, #31
   12b82:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12b84:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12b86:	ea4c 0404 	orr.w	r4, ip, r4
   12b8a:	d906      	bls.n	12b9a <mpu_configure_regions+0x5e>
			return -EINVAL;
   12b8c:	f06f 0215 	mvn.w	r2, #21
   12b90:	e7d9      	b.n	12b46 <mpu_configure_regions+0xa>
		return REGION_32B;
   12b92:	2408      	movs	r4, #8
   12b94:	e7f6      	b.n	12b84 <mpu_configure_regions+0x48>
		return REGION_4G;
   12b96:	243e      	movs	r4, #62	; 0x3e
   12b98:	e7f4      	b.n	12b84 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12b9a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   12b9e:	4315      	orrs	r5, r2
   12ba0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12ba4:	f044 0401 	orr.w	r4, r4, #1
   12ba8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12bac:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   12bb0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12bb2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   12bb6:	3601      	adds	r6, #1
   12bb8:	300c      	adds	r0, #12
   12bba:	e7c2      	b.n	12b42 <mpu_configure_regions+0x6>
   12bbc:	e000ed00 	.word	0xe000ed00

00012bc0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12bc0:	4b04      	ldr	r3, [pc, #16]	; (12bd4 <arm_core_mpu_enable+0x14>)
   12bc2:	2205      	movs	r2, #5
   12bc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   12bc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12bcc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12bd0:	4770      	bx	lr
   12bd2:	bf00      	nop
   12bd4:	e000ed00 	.word	0xe000ed00

00012bd8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12bd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12bdc:	4b02      	ldr	r3, [pc, #8]	; (12be8 <arm_core_mpu_disable+0x10>)
   12bde:	2200      	movs	r2, #0
   12be0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   12be4:	4770      	bx	lr
   12be6:	bf00      	nop
   12be8:	e000ed00 	.word	0xe000ed00

00012bec <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12bec:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12bee:	4c03      	ldr	r4, [pc, #12]	; (12bfc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12bf0:	2301      	movs	r3, #1
   12bf2:	7822      	ldrb	r2, [r4, #0]
   12bf4:	f7ff ffa2 	bl	12b3c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12bf8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   12bfa:	bd10      	pop	{r4, pc}
   12bfc:	20002bcb 	.word	0x20002bcb

00012c00 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12c00:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12c02:	4a09      	ldr	r2, [pc, #36]	; (12c28 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   12c04:	2300      	movs	r3, #0
   12c06:	7812      	ldrb	r2, [r2, #0]
   12c08:	f7ff ff98 	bl	12b3c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12c0c:	f110 0f16 	cmn.w	r0, #22
   12c10:	d002      	beq.n	12c18 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   12c12:	4a06      	ldr	r2, [pc, #24]	; (12c2c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12c14:	2807      	cmp	r0, #7
   12c16:	dd00      	ble.n	12c1a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   12c18:	bd08      	pop	{r3, pc}
   12c1a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   12c1e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   12c22:	3001      	adds	r0, #1
   12c24:	e7f6      	b.n	12c14 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   12c26:	bf00      	nop
   12c28:	20002bcb 	.word	0x20002bcb
   12c2c:	e000ed00 	.word	0xe000ed00

00012c30 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12c30:	4914      	ldr	r1, [pc, #80]	; (12c84 <z_arm_mpu_init+0x54>)
   12c32:	6808      	ldr	r0, [r1, #0]
   12c34:	2808      	cmp	r0, #8
{
   12c36:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   12c38:	d821      	bhi.n	12c7e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12c3a:	f7ff ffcd 	bl	12bd8 <arm_core_mpu_disable>
   12c3e:	4c12      	ldr	r4, [pc, #72]	; (12c88 <z_arm_mpu_init+0x58>)
   12c40:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12c42:	2200      	movs	r2, #0
   12c44:	4290      	cmp	r0, r2
   12c46:	f101 010c 	add.w	r1, r1, #12
   12c4a:	d105      	bne.n	12c58 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12c4c:	4b0f      	ldr	r3, [pc, #60]	; (12c8c <z_arm_mpu_init+0x5c>)
   12c4e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   12c50:	f7ff ffb6 	bl	12bc0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   12c54:	2000      	movs	r0, #0
}
   12c56:	bd10      	pop	{r4, pc}
   12c58:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12c5c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   12c60:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   12c64:	4313      	orrs	r3, r2
   12c66:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12c6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12c72:	f043 0301 	orr.w	r3, r3, #1
   12c76:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12c7a:	3201      	adds	r2, #1
   12c7c:	e7e2      	b.n	12c44 <z_arm_mpu_init+0x14>
		return -1;
   12c7e:	f04f 30ff 	mov.w	r0, #4294967295
   12c82:	e7e8      	b.n	12c56 <z_arm_mpu_init+0x26>
   12c84:	00026778 	.word	0x00026778
   12c88:	e000ed00 	.word	0xe000ed00
   12c8c:	20002bcb 	.word	0x20002bcb

00012c90 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   12c90:	4b01      	ldr	r3, [pc, #4]	; (12c98 <__stdout_hook_install+0x8>)
   12c92:	6018      	str	r0, [r3, #0]
}
   12c94:	4770      	bx	lr
   12c96:	bf00      	nop
   12c98:	20000524 	.word	0x20000524

00012c9c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12c9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ca0:	f3ef 8211 	mrs	r2, BASEPRI
   12ca4:	f383 8812 	msr	BASEPRI_MAX, r3
   12ca8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12cac:	4906      	ldr	r1, [pc, #24]	; (12cc8 <nordicsemi_nrf52_init+0x2c>)
   12cae:	2301      	movs	r3, #1
   12cb0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   12cb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12cb8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   12cbc:	f382 8811 	msr	BASEPRI, r2
   12cc0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12cc4:	2000      	movs	r0, #0
   12cc6:	4770      	bx	lr
   12cc8:	4001e000 	.word	0x4001e000

00012ccc <sys_arch_reboot>:
    *p_gpregret = val;
   12ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12cd0:	b2c0      	uxtb	r0, r0
   12cd2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   12cd6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12cda:	4905      	ldr	r1, [pc, #20]	; (12cf0 <sys_arch_reboot+0x24>)
   12cdc:	4b05      	ldr	r3, [pc, #20]	; (12cf4 <sys_arch_reboot+0x28>)
   12cde:	68ca      	ldr	r2, [r1, #12]
   12ce0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12ce4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12ce6:	60cb      	str	r3, [r1, #12]
   12ce8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12cec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12cee:	e7fd      	b.n	12cec <sys_arch_reboot+0x20>
   12cf0:	e000ed00 	.word	0xe000ed00
   12cf4:	05fa0004 	.word	0x05fa0004

00012cf8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12cf8:	b120      	cbz	r0, 12d04 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12cfa:	4b03      	ldr	r3, [pc, #12]	; (12d08 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12cfc:	0180      	lsls	r0, r0, #6
   12cfe:	f043 0301 	orr.w	r3, r3, #1
   12d02:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12d04:	4770      	bx	lr
   12d06:	bf00      	nop
   12d08:	00026600 	.word	0x00026600

00012d0c <ecc_process>:

	bt_recv(buf);
}

static void ecc_process(struct k_work *work)
{
   12d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12d0e:	4d5a      	ldr	r5, [pc, #360]	; (12e78 <ecc_process+0x16c>)
   12d10:	f3bf 8f5b 	dmb	ish
   12d14:	682c      	ldr	r4, [r5, #0]
   12d16:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   12d1a:	f014 0401 	ands.w	r4, r4, #1
   12d1e:	462e      	mov	r6, r5
   12d20:	d050      	beq.n	12dc4 <ecc_process+0xb8>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   12d22:	4f56      	ldr	r7, [pc, #344]	; (12e7c <ecc_process+0x170>)
   12d24:	4c56      	ldr	r4, [pc, #344]	; (12e80 <ecc_process+0x174>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   12d26:	4d57      	ldr	r5, [pc, #348]	; (12e84 <ecc_process+0x178>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   12d28:	4857      	ldr	r0, [pc, #348]	; (12e88 <ecc_process+0x17c>)
   12d2a:	463a      	mov	r2, r7
   12d2c:	4621      	mov	r1, r4
   12d2e:	f00d fca8 	bl	20682 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   12d32:	b3e0      	cbz	r0, 12dae <ecc_process+0xa2>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   12d34:	2220      	movs	r2, #32
   12d36:	4629      	mov	r1, r5
   12d38:	4620      	mov	r0, r4
   12d3a:	f00e fe4c 	bl	219d6 <memcmp>
   12d3e:	2800      	cmp	r0, #0
   12d40:	d0f2      	beq.n	12d28 <ecc_process+0x1c>
	return 0;
   12d42:	2700      	movs	r7, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12d44:	f04f 32ff 	mov.w	r2, #4294967295
   12d48:	f04f 33ff 	mov.w	r3, #4294967295
   12d4c:	2001      	movs	r0, #1
   12d4e:	f000 fa03 	bl	13158 <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   12d52:	f100 0508 	add.w	r5, r0, #8
   12d56:	2102      	movs	r1, #2
   12d58:	4604      	mov	r4, r0
   12d5a:	4628      	mov	r0, r5
   12d5c:	f012 f860 	bl	24e20 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   12d60:	233e      	movs	r3, #62	; 0x3e
   12d62:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   12d64:	2342      	movs	r3, #66	; 0x42
   12d66:	7043      	strb	r3, [r0, #1]
   12d68:	2101      	movs	r1, #1
   12d6a:	4628      	mov	r0, r5
   12d6c:	f012 f858 	bl	24e20 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   12d70:	2308      	movs	r3, #8
   12d72:	7003      	strb	r3, [r0, #0]
   12d74:	2141      	movs	r1, #65	; 0x41
   12d76:	4628      	mov	r0, r5
   12d78:	f012 f852 	bl	24e20 <net_buf_simple_add>
   12d7c:	4605      	mov	r5, r0
	evt->status = status;
   12d7e:	f800 7b01 	strb.w	r7, [r0], #1
	if (status) {
   12d82:	b1b7      	cbz	r7, 12db2 <ecc_process+0xa6>
		(void)memset(evt->key, 0, sizeof(evt->key));
   12d84:	2240      	movs	r2, #64	; 0x40
   12d86:	2100      	movs	r1, #0
   12d88:	f00e fe41 	bl	21a0e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d8c:	f3bf 8f5b 	dmb	ish
   12d90:	e856 3f00 	ldrex	r3, [r6]
   12d94:	f023 0301 	bic.w	r3, r3, #1
   12d98:	e846 3200 	strex	r2, r3, [r6]
   12d9c:	2a00      	cmp	r2, #0
   12d9e:	d1f7      	bne.n	12d90 <ecc_process+0x84>
   12da0:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   12da4:	4620      	mov	r0, r4
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
		emulate_le_generate_dhkey();
	} else {
		__ASSERT(0, "Unhandled ECC command");
	}
}
   12da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_recv(buf);
   12daa:	f000 bcd5 	b.w	13758 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   12dae:	271f      	movs	r7, #31
   12db0:	e7c8      	b.n	12d44 <ecc_process+0x38>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   12db2:	4935      	ldr	r1, [pc, #212]	; (12e88 <ecc_process+0x17c>)
   12db4:	f00e fe6d 	bl	21a92 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   12db8:	3120      	adds	r1, #32
   12dba:	f105 0021 	add.w	r0, r5, #33	; 0x21
   12dbe:	f00e fe68 	bl	21a92 <sys_memcpy_swap.constprop.0>
   12dc2:	e7e3      	b.n	12d8c <ecc_process+0x80>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12dc4:	f3bf 8f5b 	dmb	ish
   12dc8:	682b      	ldr	r3, [r5, #0]
   12dca:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   12dce:	079b      	lsls	r3, r3, #30
   12dd0:	d550      	bpl.n	12e74 <ecc_process+0x168>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   12dd2:	492a      	ldr	r1, [pc, #168]	; (12e7c <ecc_process+0x170>)
   12dd4:	482c      	ldr	r0, [pc, #176]	; (12e88 <ecc_process+0x17c>)
   12dd6:	f00e fb0d 	bl	213f4 <uECC_valid_public_key>
	if (ret < 0) {
   12dda:	2800      	cmp	r0, #0
   12ddc:	db11      	blt.n	12e02 <ecc_process+0xf6>
   12dde:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   12de2:	4927      	ldr	r1, [pc, #156]	; (12e80 <ecc_process+0x174>)
   12de4:	682b      	ldr	r3, [r5, #0]
   12de6:	4827      	ldr	r0, [pc, #156]	; (12e84 <ecc_process+0x178>)
   12de8:	f3bf 8f5b 	dmb	ish
   12dec:	f013 0f04 	tst.w	r3, #4
   12df0:	f101 0220 	add.w	r2, r1, #32
   12df4:	4b21      	ldr	r3, [pc, #132]	; (12e7c <ecc_process+0x170>)
   12df6:	bf18      	it	ne
   12df8:	4601      	movne	r1, r0
   12dfa:	4610      	mov	r0, r2
   12dfc:	f00d fc90 	bl	20720 <uECC_shared_secret>
   12e00:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12e02:	f04f 32ff 	mov.w	r2, #4294967295
   12e06:	f04f 33ff 	mov.w	r3, #4294967295
   12e0a:	2001      	movs	r0, #1
   12e0c:	f000 f9a4 	bl	13158 <bt_buf_get_rx>
   12e10:	f100 0708 	add.w	r7, r0, #8
   12e14:	2102      	movs	r1, #2
   12e16:	4605      	mov	r5, r0
   12e18:	4638      	mov	r0, r7
   12e1a:	f012 f801 	bl	24e20 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   12e1e:	233e      	movs	r3, #62	; 0x3e
   12e20:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   12e22:	2322      	movs	r3, #34	; 0x22
   12e24:	7043      	strb	r3, [r0, #1]
   12e26:	2101      	movs	r1, #1
   12e28:	4638      	mov	r0, r7
   12e2a:	f011 fff9 	bl	24e20 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   12e2e:	2309      	movs	r3, #9
   12e30:	7003      	strb	r3, [r0, #0]
   12e32:	2121      	movs	r1, #33	; 0x21
   12e34:	4638      	mov	r0, r7
   12e36:	f011 fff3 	bl	24e20 <net_buf_simple_add>
   12e3a:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   12e3c:	3001      	adds	r0, #1
   12e3e:	b99c      	cbnz	r4, 12e68 <ecc_process+0x15c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   12e40:	221f      	movs	r2, #31
   12e42:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   12e44:	21ff      	movs	r1, #255	; 0xff
   12e46:	2220      	movs	r2, #32
   12e48:	f00e fde1 	bl	21a0e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12e4c:	f3bf 8f5b 	dmb	ish
   12e50:	e856 3f00 	ldrex	r3, [r6]
   12e54:	f023 0302 	bic.w	r3, r3, #2
   12e58:	e846 3200 	strex	r2, r3, [r6]
   12e5c:	2a00      	cmp	r2, #0
   12e5e:	d1f7      	bne.n	12e50 <ecc_process+0x144>
   12e60:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   12e64:	4628      	mov	r0, r5
   12e66:	e79e      	b.n	12da6 <ecc_process+0x9a>
		evt->status = 0U;
   12e68:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   12e6a:	4907      	ldr	r1, [pc, #28]	; (12e88 <ecc_process+0x17c>)
		evt->status = 0U;
   12e6c:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   12e6e:	f00e fe10 	bl	21a92 <sys_memcpy_swap.constprop.0>
   12e72:	e7eb      	b.n	12e4c <ecc_process+0x140>
}
   12e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e76:	bf00      	nop
   12e78:	20002418 	.word	0x20002418
   12e7c:	00026798 	.word	0x00026798
   12e80:	20002bcc 	.word	0x20002bcc
   12e84:	0002745b 	.word	0x0002745b
   12e88:	20002bec 	.word	0x20002bec

00012e8c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   12e8c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e8e:	4c21      	ldr	r4, [pc, #132]	; (12f14 <le_gen_dhkey+0x88>)
   12e90:	f3bf 8f5b 	dmb	ish
   12e94:	6823      	ldr	r3, [r4, #0]
   12e96:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   12e9a:	07da      	lsls	r2, r3, #31
{
   12e9c:	4606      	mov	r6, r0
   12e9e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   12ea0:	d501      	bpl.n	12ea6 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12ea2:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	bt_long_wq_submit(&ecc_work);

	return BT_HCI_ERR_SUCCESS;
}
   12ea4:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   12ea6:	2901      	cmp	r1, #1
   12ea8:	d831      	bhi.n	12f0e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12eaa:	f3bf 8f5b 	dmb	ish
   12eae:	e854 3f00 	ldrex	r3, [r4]
   12eb2:	f043 0202 	orr.w	r2, r3, #2
   12eb6:	e844 2100 	strex	r1, r2, [r4]
   12eba:	2900      	cmp	r1, #0
   12ebc:	d1f7      	bne.n	12eae <le_gen_dhkey+0x22>
   12ebe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   12ec2:	079b      	lsls	r3, r3, #30
   12ec4:	d4ed      	bmi.n	12ea2 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   12ec6:	4814      	ldr	r0, [pc, #80]	; (12f18 <le_gen_dhkey+0x8c>)
   12ec8:	4631      	mov	r1, r6
   12eca:	f00e fde2 	bl	21a92 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   12ece:	4813      	ldr	r0, [pc, #76]	; (12f1c <le_gen_dhkey+0x90>)
   12ed0:	f106 0120 	add.w	r1, r6, #32
   12ed4:	f00e fddd 	bl	21a92 <sys_memcpy_swap.constprop.0>
   12ed8:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   12edc:	b175      	cbz	r5, 12efc <le_gen_dhkey+0x70>
   12ede:	e854 3f00 	ldrex	r3, [r4]
   12ee2:	f043 0304 	orr.w	r3, r3, #4
   12ee6:	e844 3200 	strex	r2, r3, [r4]
   12eea:	2a00      	cmp	r2, #0
   12eec:	d1f7      	bne.n	12ede <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12eee:	f3bf 8f5b 	dmb	ish
	bt_long_wq_submit(&ecc_work);
   12ef2:	480b      	ldr	r0, [pc, #44]	; (12f20 <le_gen_dhkey+0x94>)
   12ef4:	f000 f92a 	bl	1314c <bt_long_wq_submit>
   12ef8:	2000      	movs	r0, #0
   12efa:	e7d3      	b.n	12ea4 <le_gen_dhkey+0x18>
   12efc:	e854 3f00 	ldrex	r3, [r4]
   12f00:	f023 0304 	bic.w	r3, r3, #4
   12f04:	e844 3200 	strex	r2, r3, [r4]
   12f08:	2a00      	cmp	r2, #0
   12f0a:	d0f0      	beq.n	12eee <le_gen_dhkey+0x62>
   12f0c:	e7f6      	b.n	12efc <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   12f0e:	2012      	movs	r0, #18
   12f10:	e7c8      	b.n	12ea4 <le_gen_dhkey+0x18>
   12f12:	bf00      	nop
   12f14:	20002418 	.word	0x20002418
   12f18:	20002bec 	.word	0x20002bec
   12f1c:	20002c0c 	.word	0x20002c0c
   12f20:	20000528 	.word	0x20000528

00012f24 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   12f24:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12f26:	7d06      	ldrb	r6, [r0, #20]
   12f28:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   12f2a:	b976      	cbnz	r6, 12f4a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   12f2c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   12f2e:	881d      	ldrh	r5, [r3, #0]
   12f30:	f242 0226 	movw	r2, #8230	; 0x2026
   12f34:	4295      	cmp	r5, r2
   12f36:	d045      	beq.n	12fc4 <bt_hci_ecc_send+0xa0>
   12f38:	d80f      	bhi.n	12f5a <bt_hci_ecc_send+0x36>
   12f3a:	f242 0201 	movw	r2, #8193	; 0x2001
   12f3e:	4295      	cmp	r5, r2
   12f40:	d04f      	beq.n	12fe2 <bt_hci_ecc_send+0xbe>
   12f42:	f242 0325 	movw	r3, #8229	; 0x2025
   12f46:	429d      	cmp	r5, r3
   12f48:	d013      	beq.n	12f72 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   12f4a:	4b2a      	ldr	r3, [pc, #168]	; (12ff4 <bt_hci_ecc_send+0xd0>)
   12f4c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   12f50:	4620      	mov	r0, r4
   12f52:	695b      	ldr	r3, [r3, #20]
}
   12f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   12f58:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   12f5a:	f242 035e 	movw	r3, #8286	; 0x205e
   12f5e:	429d      	cmp	r5, r3
   12f60:	d1f3      	bne.n	12f4a <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   12f62:	2103      	movs	r1, #3
   12f64:	3008      	adds	r0, #8
   12f66:	f011 ffc3 	bl	24ef0 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   12f6a:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   12f6c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   12f70:	e02e      	b.n	12fd0 <bt_hci_ecc_send+0xac>
   12f72:	2103      	movs	r1, #3
   12f74:	3008      	adds	r0, #8
   12f76:	f011 ffbb 	bl	24ef0 <net_buf_simple_pull>
	net_buf_unref(buf);
   12f7a:	4620      	mov	r0, r4
   12f7c:	f008 fe36 	bl	1bbec <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f80:	f3bf 8f5b 	dmb	ish
   12f84:	4b1c      	ldr	r3, [pc, #112]	; (12ff8 <bt_hci_ecc_send+0xd4>)
   12f86:	681a      	ldr	r2, [r3, #0]
   12f88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   12f8c:	0792      	lsls	r2, r2, #30
   12f8e:	d507      	bpl.n	12fa0 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   12f90:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   12f92:	4631      	mov	r1, r6
   12f94:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   12f98:	f00e fd57 	bl	21a4a <send_cmd_status>
}
   12f9c:	2000      	movs	r0, #0
   12f9e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12fa0:	f3bf 8f5b 	dmb	ish
   12fa4:	e853 2f00 	ldrex	r2, [r3]
   12fa8:	f042 0101 	orr.w	r1, r2, #1
   12fac:	e843 1000 	strex	r0, r1, [r3]
   12fb0:	2800      	cmp	r0, #0
   12fb2:	d1f7      	bne.n	12fa4 <bt_hci_ecc_send+0x80>
   12fb4:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   12fb8:	07d3      	lsls	r3, r2, #31
   12fba:	d4e9      	bmi.n	12f90 <bt_hci_ecc_send+0x6c>
		bt_long_wq_submit(&ecc_work);
   12fbc:	480f      	ldr	r0, [pc, #60]	; (12ffc <bt_hci_ecc_send+0xd8>)
   12fbe:	f000 f8c5 	bl	1314c <bt_long_wq_submit>
		status = BT_HCI_ERR_SUCCESS;
   12fc2:	e7e6      	b.n	12f92 <bt_hci_ecc_send+0x6e>
   12fc4:	2103      	movs	r1, #3
   12fc6:	3008      	adds	r0, #8
   12fc8:	f011 ff92 	bl	24ef0 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   12fcc:	68a0      	ldr	r0, [r4, #8]
   12fce:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   12fd0:	f7ff ff5c 	bl	12e8c <le_gen_dhkey>
   12fd4:	4606      	mov	r6, r0
	net_buf_unref(buf);
   12fd6:	4620      	mov	r0, r4
   12fd8:	f008 fe08 	bl	1bbec <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   12fdc:	4631      	mov	r1, r6
   12fde:	4628      	mov	r0, r5
   12fe0:	e7da      	b.n	12f98 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   12fe2:	78da      	ldrb	r2, [r3, #3]
   12fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   12fe8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   12fea:	791a      	ldrb	r2, [r3, #4]
   12fec:	f022 0201 	bic.w	r2, r2, #1
   12ff0:	711a      	strb	r2, [r3, #4]
}
   12ff2:	e7aa      	b.n	12f4a <bt_hci_ecc_send+0x26>
   12ff4:	200002d8 	.word	0x200002d8
   12ff8:	20002418 	.word	0x20002418
   12ffc:	20000528 	.word	0x20000528

00013000 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   13000:	4903      	ldr	r1, [pc, #12]	; (13010 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   13002:	4804      	ldr	r0, [pc, #16]	; (13014 <save_id+0x14>)
   13004:	79ca      	ldrb	r2, [r1, #7]
   13006:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1300a:	f7fe be87 	b.w	11d1c <settings_save_one>
   1300e:	bf00      	nop
   13010:	200002d8 	.word	0x200002d8
   13014:	0002747b 	.word	0x0002747b

00013018 <set>:
{
   13018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1301a:	4d1c      	ldr	r5, [pc, #112]	; (1308c <set+0x74>)
   1301c:	f3bf 8f5b 	dmb	ish
   13020:	461f      	mov	r7, r3
   13022:	682b      	ldr	r3, [r5, #0]
   13024:	f3bf 8f5b 	dmb	ish
   13028:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1302a:	07da      	lsls	r2, r3, #31
{
   1302c:	4604      	mov	r4, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1302e:	d403      	bmi.n	13038 <set+0x20>
		return 0;
   13030:	2400      	movs	r4, #0
}
   13032:	4620      	mov	r0, r4
   13034:	b003      	add	sp, #12
   13036:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!name) {
   13038:	b910      	cbnz	r0, 13040 <set+0x28>
		return -ENOENT;
   1303a:	f06f 0401 	mvn.w	r4, #1
   1303e:	e7f8      	b.n	13032 <set+0x1a>
	len = settings_name_next(name, &next);
   13040:	a901      	add	r1, sp, #4
   13042:	f00d fa03 	bl	2044c <settings_name_next>
	if (!strncmp(name, "id", len)) {
   13046:	4912      	ldr	r1, [pc, #72]	; (13090 <set+0x78>)
	len = settings_name_next(name, &next);
   13048:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   1304a:	4620      	mov	r0, r4
   1304c:	f00e fcb2 	bl	219b4 <strncmp>
   13050:	4604      	mov	r4, r0
   13052:	2800      	cmp	r0, #0
   13054:	d1f1      	bne.n	1303a <set+0x22>
   13056:	f3bf 8f5b 	dmb	ish
   1305a:	682b      	ldr	r3, [r5, #0]
   1305c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   13060:	071b      	lsls	r3, r3, #28
   13062:	d4e5      	bmi.n	13030 <set+0x18>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   13064:	3dcc      	subs	r5, #204	; 0xcc
   13066:	2207      	movs	r2, #7
   13068:	4629      	mov	r1, r5
   1306a:	4638      	mov	r0, r7
   1306c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1306e:	2806      	cmp	r0, #6
   13070:	d806      	bhi.n	13080 <set+0x68>
			(void)memset(bt_dev.id_addr, 0,
   13072:	2207      	movs	r2, #7
   13074:	4621      	mov	r1, r4
   13076:	4628      	mov	r0, r5
   13078:	f00e fcc9 	bl	21a0e <memset>
			bt_dev.id_count = 0U;
   1307c:	71ec      	strb	r4, [r5, #7]
   1307e:	e7d8      	b.n	13032 <set+0x1a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   13080:	2307      	movs	r3, #7
   13082:	fbb0 f0f3 	udiv	r0, r0, r3
   13086:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   13088:	e7d3      	b.n	13032 <set+0x1a>
   1308a:	bf00      	nop
   1308c:	200003a4 	.word	0x200003a4
   13090:	0002747e 	.word	0x0002747e

00013094 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   13094:	4801      	ldr	r0, [pc, #4]	; (1309c <bt_settings_save_id+0x8>)
   13096:	f00b bd27 	b.w	1eae8 <k_work_submit>
   1309a:	bf00      	nop
   1309c:	20000538 	.word	0x20000538

000130a0 <commit>:
}

static int commit(void)
{
   130a0:	b570      	push	{r4, r5, r6, lr}
   130a2:	4c1b      	ldr	r4, [pc, #108]	; (13110 <commit+0x70>)
   130a4:	f3bf 8f5b 	dmb	ish
   130a8:	6823      	ldr	r3, [r4, #0]
   130aa:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   130ae:	f013 0f01 	tst.w	r3, #1
   130b2:	4625      	mov	r5, r4
   130b4:	d101      	bne.n	130ba <commit+0x1a>
	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   130b6:	2000      	movs	r0, #0
   130b8:	e028      	b.n	1310c <commit+0x6c>
	if (!bt_dev.id_count) {
   130ba:	f814 3cc5 	ldrb.w	r3, [r4, #-197]
   130be:	f1a4 06cc 	sub.w	r6, r4, #204	; 0xcc
   130c2:	b1cb      	cbz	r3, 130f8 <commit+0x58>
   130c4:	f3bf 8f5b 	dmb	ish
   130c8:	6823      	ldr	r3, [r4, #0]
   130ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   130ce:	075a      	lsls	r2, r3, #29
   130d0:	d401      	bmi.n	130d6 <commit+0x36>
		bt_finalize_init();
   130d2:	f000 fb81 	bl	137d8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   130d6:	f3bf 8f5b 	dmb	ish
   130da:	e855 3f00 	ldrex	r3, [r5]
   130de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   130e2:	e845 2100 	strex	r1, r2, [r5]
   130e6:	2900      	cmp	r1, #0
   130e8:	d1f7      	bne.n	130da <commit+0x3a>
   130ea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   130ee:	03db      	lsls	r3, r3, #15
   130f0:	d5e1      	bpl.n	130b6 <commit+0x16>
		bt_settings_save_id();
   130f2:	f7ff ffcf 	bl	13094 <bt_settings_save_id>
   130f6:	e7de      	b.n	130b6 <commit+0x16>
		err = bt_setup_public_id_addr();
   130f8:	f000 fe94 	bl	13e24 <bt_setup_public_id_addr>
		if (err) {
   130fc:	b930      	cbnz	r0, 1310c <commit+0x6c>
	if (!bt_dev.id_count) {
   130fe:	79f3      	ldrb	r3, [r6, #7]
   13100:	2b00      	cmp	r3, #0
   13102:	d1df      	bne.n	130c4 <commit+0x24>
		err = bt_setup_random_id_addr();
   13104:	f000 fece 	bl	13ea4 <bt_setup_random_id_addr>
		if (err) {
   13108:	2800      	cmp	r0, #0
   1310a:	d0db      	beq.n	130c4 <commit+0x24>
	}

	return 0;
}
   1310c:	bd70      	pop	{r4, r5, r6, pc}
   1310e:	bf00      	nop
   13110:	200003a4 	.word	0x200003a4

00013114 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   13114:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   13116:	4d0a      	ldr	r5, [pc, #40]	; (13140 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13118:	4b0a      	ldr	r3, [pc, #40]	; (13144 <long_wq_init+0x30>)
{
   1311a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1311c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   1311e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13120:	9302      	str	r3, [sp, #8]
   13122:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   13124:	f012 fd42 	bl	25bac <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   13128:	ab02      	add	r3, sp, #8
   1312a:	9300      	str	r3, [sp, #0]
   1312c:	4628      	mov	r0, r5
   1312e:	4906      	ldr	r1, [pc, #24]	; (13148 <long_wq_init+0x34>)
   13130:	230a      	movs	r3, #10
   13132:	f44f 628f 	mov.w	r2, #1144	; 0x478
   13136:	f00b fcdd 	bl	1eaf4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1313a:	4620      	mov	r0, r4
   1313c:	b005      	add	sp, #20
   1313e:	bd30      	pop	{r4, r5, pc}
   13140:	20001b50 	.word	0x20001b50
   13144:	00027484 	.word	0x00027484
   13148:	200034c0 	.word	0x200034c0

0001314c <bt_long_wq_submit>:
{
   1314c:	4601      	mov	r1, r0
	return k_work_submit_to_queue(&bt_long_wq, work);
   1314e:	4801      	ldr	r0, [pc, #4]	; (13154 <bt_long_wq_submit+0x8>)
   13150:	f012 bd1b 	b.w	25b8a <k_work_submit_to_queue>
   13154:	20001b50 	.word	0x20001b50

00013158 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13158:	b538      	push	{r3, r4, r5, lr}
   1315a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   1315c:	4805      	ldr	r0, [pc, #20]	; (13174 <bt_buf_get_rx+0x1c>)
   1315e:	f011 fddc 	bl	24d1a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13162:	4604      	mov	r4, r0
   13164:	b120      	cbz	r0, 13170 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   13166:	2100      	movs	r1, #0
   13168:	3008      	adds	r0, #8
   1316a:	f011 fdfb 	bl	24d64 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1316e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13170:	4620      	mov	r0, r4
   13172:	bd38      	pop	{r3, r4, r5, pc}
   13174:	20000c40 	.word	0x20000c40

00013178 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13178:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1317a:	490b      	ldr	r1, [pc, #44]	; (131a8 <bt_buf_get_cmd_complete+0x30>)
{
   1317c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   1317e:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
{
   13182:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   13184:	b920      	cbnz	r0, 13190 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1318a:	2001      	movs	r0, #1
   1318c:	f7ff bfe4 	b.w	13158 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13190:	f011 fe42 	bl	24e18 <net_buf_ref>
   13194:	2301      	movs	r3, #1
		buf->len = 0U;
   13196:	2100      	movs	r1, #0
   13198:	7503      	strb	r3, [r0, #20]
   1319a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   1319c:	4604      	mov	r4, r0
   1319e:	3008      	adds	r0, #8
   131a0:	f011 fde0 	bl	24d64 <net_buf_simple_reserve>
}
   131a4:	4620      	mov	r0, r4
   131a6:	bd10      	pop	{r4, pc}
   131a8:	200002d8 	.word	0x200002d8

000131ac <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   131ac:	b570      	push	{r4, r5, r6, lr}
   131ae:	4605      	mov	r5, r0
	switch (evt) {
   131b0:	3d0e      	subs	r5, #14
   131b2:	2d01      	cmp	r5, #1
{
   131b4:	460c      	mov	r4, r1
   131b6:	4610      	mov	r0, r2
   131b8:	4619      	mov	r1, r3
	switch (evt) {
   131ba:	d803      	bhi.n	131c4 <bt_buf_get_evt+0x18>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   131bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   131c0:	f7ff bfda 	b.w	13178 <bt_buf_get_cmd_complete>
		if (discardable) {
   131c4:	b164      	cbz	r4, 131e0 <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
   131c6:	4809      	ldr	r0, [pc, #36]	; (131ec <bt_buf_get_evt+0x40>)
   131c8:	f011 fda7 	bl	24d1a <net_buf_alloc_fixed>
			if (buf) {
   131cc:	4604      	mov	r4, r0
   131ce:	b128      	cbz	r0, 131dc <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
   131d0:	2100      	movs	r1, #0
   131d2:	3008      	adds	r0, #8
   131d4:	f011 fdc6 	bl	24d64 <net_buf_simple_reserve>
   131d8:	2301      	movs	r3, #1
   131da:	7523      	strb	r3, [r4, #20]
}
   131dc:	4620      	mov	r0, r4
   131de:	bd70      	pop	{r4, r5, r6, pc}
   131e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   131e4:	2001      	movs	r0, #1
   131e6:	f7ff bfb7 	b.w	13158 <bt_buf_get_rx>
   131ea:	bf00      	nop
   131ec:	20000be8 	.word	0x20000be8

000131f0 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   131f0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   131f2:	2101      	movs	r1, #1
   131f4:	4604      	mov	r4, r0
   131f6:	3008      	adds	r0, #8
   131f8:	f011 fe82 	bl	24f00 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
   131fc:	4621      	mov	r1, r4
   131fe:	4a03      	ldr	r2, [pc, #12]	; (1320c <hci_le_meta_event+0x1c>)
   13200:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
   13202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   13206:	2303      	movs	r3, #3
   13208:	f00e be43 	b.w	21e92 <handle_event_common.isra.0>
   1320c:	00026868 	.word	0x00026868

00013210 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   13210:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13212:	4825      	ldr	r0, [pc, #148]	; (132a8 <rx_work_handler+0x98>)
   13214:	f011 fdc8 	bl	24da8 <net_buf_slist_get>
	if (!buf) {
   13218:	4604      	mov	r4, r0
   1321a:	2800      	cmp	r0, #0
   1321c:	d043      	beq.n	132a6 <rx_work_handler+0x96>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1321e:	7d05      	ldrb	r5, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   13220:	2d01      	cmp	r5, #1
   13222:	d132      	bne.n	1328a <rx_work_handler+0x7a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13224:	8983      	ldrh	r3, [r0, #12]
   13226:	2b01      	cmp	r3, #1
   13228:	d80c      	bhi.n	13244 <rx_work_handler+0x34>
   1322a:	4a20      	ldr	r2, [pc, #128]	; (132ac <rx_work_handler+0x9c>)
   1322c:	4920      	ldr	r1, [pc, #128]	; (132b0 <rx_work_handler+0xa0>)
   1322e:	4821      	ldr	r0, [pc, #132]	; (132b4 <rx_work_handler+0xa4>)
   13230:	f640 1359 	movw	r3, #2393	; 0x959
   13234:	f00c fe12 	bl	1fe5c <assert_print>
   13238:	4040      	eors	r0, r0
   1323a:	f380 8811 	msr	BASEPRI, r0
   1323e:	f04f 0003 	mov.w	r0, #3
   13242:	df02      	svc	2
   13244:	2102      	movs	r1, #2
   13246:	f104 0008 	add.w	r0, r4, #8
   1324a:	f011 fe59 	bl	24f00 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1324e:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   13250:	2b05      	cmp	r3, #5
   13252:	4606      	mov	r6, r0
   13254:	d025      	beq.n	132a2 <rx_work_handler+0x92>
   13256:	3b0e      	subs	r3, #14
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   13258:	2b01      	cmp	r3, #1
   1325a:	bf88      	it	hi
   1325c:	2502      	movhi	r5, #2
   1325e:	07ab      	lsls	r3, r5, #30
   13260:	d40c      	bmi.n	1327c <rx_work_handler+0x6c>
   13262:	4a12      	ldr	r2, [pc, #72]	; (132ac <rx_work_handler+0x9c>)
   13264:	4914      	ldr	r1, [pc, #80]	; (132b8 <rx_work_handler+0xa8>)
   13266:	4813      	ldr	r0, [pc, #76]	; (132b4 <rx_work_handler+0xa4>)
   13268:	f640 135d 	movw	r3, #2397	; 0x95d
   1326c:	f00c fdf6 	bl	1fe5c <assert_print>
   13270:	4040      	eors	r0, r0
   13272:	f380 8811 	msr	BASEPRI, r0
   13276:	f04f 0003 	mov.w	r0, #3
   1327a:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   1327c:	7830      	ldrb	r0, [r6, #0]
   1327e:	4a0f      	ldr	r2, [pc, #60]	; (132bc <rx_work_handler+0xac>)
   13280:	2303      	movs	r3, #3
   13282:	4621      	mov	r1, r4
   13284:	f00e fe05 	bl	21e92 <handle_event_common.isra.0>
	net_buf_unref(buf);
   13288:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1328a:	f008 fcaf 	bl	1bbec <net_buf_unref>
	return list->head;
   1328e:	4b0c      	ldr	r3, [pc, #48]	; (132c0 <rx_work_handler+0xb0>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   13290:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   13294:	b13b      	cbz	r3, 132a6 <rx_work_handler+0x96>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   13296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1329a:	490a      	ldr	r1, [pc, #40]	; (132c4 <rx_work_handler+0xb4>)
   1329c:	480a      	ldr	r0, [pc, #40]	; (132c8 <rx_work_handler+0xb8>)
   1329e:	f012 bc74 	b.w	25b8a <k_work_submit_to_queue>
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   132a2:	2503      	movs	r5, #3
   132a4:	e7db      	b.n	1325e <rx_work_handler+0x4e>
}
   132a6:	bd70      	pop	{r4, r5, r6, pc}
   132a8:	200003d4 	.word	0x200003d4
   132ac:	0002748d 	.word	0x0002748d
   132b0:	000274c1 	.word	0x000274c1
   132b4:	000274da 	.word	0x000274da
   132b8:	000274f7 	.word	0x000274f7
   132bc:	00026890 	.word	0x00026890
   132c0:	200002d8 	.word	0x200002d8
   132c4:	2000055c 	.word	0x2000055c
   132c8:	20001bf0 	.word	0x20001bf0

000132cc <hci_cmd_done>:
{
   132cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132ce:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   132d0:	7990      	ldrb	r0, [r2, #6]
{
   132d2:	460e      	mov	r6, r1
   132d4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   132d6:	f008 fbc5 	bl	1ba64 <net_buf_pool_get>
   132da:	4b2d      	ldr	r3, [pc, #180]	; (13390 <hci_cmd_done+0xc4>)
   132dc:	4283      	cmp	r3, r0
   132de:	d155      	bne.n	1338c <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
   132e0:	4620      	mov	r0, r4
   132e2:	f008 fbc7 	bl	1ba74 <net_buf_id>
   132e6:	4d2b      	ldr	r5, [pc, #172]	; (13394 <hci_cmd_done+0xc8>)
   132e8:	230c      	movs	r3, #12
   132ea:	fb03 5000 	mla	r0, r3, r0, r5
   132ee:	8843      	ldrh	r3, [r0, #2]
   132f0:	42bb      	cmp	r3, r7
   132f2:	d14b      	bne.n	1338c <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
   132f4:	4f28      	ldr	r7, [pc, #160]	; (13398 <hci_cmd_done+0xcc>)
   132f6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
   132fa:	b120      	cbz	r0, 13306 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   132fc:	f008 fc76 	bl	1bbec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13300:	2300      	movs	r3, #0
   13302:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
   13306:	4620      	mov	r0, r4
   13308:	f008 fbb4 	bl	1ba74 <net_buf_id>
   1330c:	270c      	movs	r7, #12
   1330e:	fb07 5000 	mla	r0, r7, r0, r5
   13312:	6843      	ldr	r3, [r0, #4]
   13314:	b1a3      	cbz	r3, 13340 <hci_cmd_done+0x74>
   13316:	b99e      	cbnz	r6, 13340 <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13318:	4620      	mov	r0, r4
   1331a:	f008 fbab 	bl	1ba74 <net_buf_id>
   1331e:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   13322:	2301      	movs	r3, #1
   13324:	6847      	ldr	r7, [r0, #4]
   13326:	e9d7 2000 	ldrd	r2, r0, [r7]
   1332a:	f000 011f 	and.w	r1, r0, #31
   1332e:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
   13332:	7a3b      	ldrb	r3, [r7, #8]
   13334:	0940      	lsrs	r0, r0, #5
   13336:	b1d3      	cbz	r3, 1336e <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13338:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1333c:	f00e fd96 	bl	21e6c <atomic_or>
	if (cmd(buf)->sync) {
   13340:	4620      	mov	r0, r4
   13342:	f008 fb97 	bl	1ba74 <net_buf_id>
   13346:	270c      	movs	r7, #12
   13348:	fb07 5000 	mla	r0, r7, r0, r5
   1334c:	6883      	ldr	r3, [r0, #8]
   1334e:	b1eb      	cbz	r3, 1338c <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
   13350:	4620      	mov	r0, r4
   13352:	f008 fb8f 	bl	1ba74 <net_buf_id>
   13356:	4378      	muls	r0, r7
   13358:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1335a:	4620      	mov	r0, r4
   1335c:	f008 fb8a 	bl	1ba74 <net_buf_id>
   13360:	fb07 5500 	mla	r5, r7, r0, r5
   13364:	68a8      	ldr	r0, [r5, #8]
}
   13366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1336a:	f00b ba67 	b.w	1e83c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1336e:	43cb      	mvns	r3, r1
   13370:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   13374:	f3bf 8f5b 	dmb	ish
   13378:	e852 1f00 	ldrex	r1, [r2]
   1337c:	4019      	ands	r1, r3
   1337e:	e842 1000 	strex	r0, r1, [r2]
   13382:	2800      	cmp	r0, #0
   13384:	d1f8      	bne.n	13378 <hci_cmd_done+0xac>
   13386:	f3bf 8f5b 	dmb	ish
   1338a:	e7d9      	b.n	13340 <hci_cmd_done+0x74>
   1338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1338e:	bf00      	nop
   13390:	20000c14 	.word	0x20000c14
   13394:	2000241c 	.word	0x2000241c
   13398:	200002d8 	.word	0x200002d8

0001339c <hci_tx_thread>:
{
   1339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
   1339e:	4e34      	ldr	r6, [pc, #208]	; (13470 <hci_tx_thread+0xd4>)
		events[0].state = K_POLL_STATE_NOT_READY;
   133a0:	4d34      	ldr	r5, [pc, #208]	; (13474 <hci_tx_thread+0xd8>)
   133a2:	f106 07e0 	add.w	r7, r6, #224	; 0xe0
   133a6:	68eb      	ldr	r3, [r5, #12]
   133a8:	f36f 3352 	bfc	r3, #13, #6
   133ac:	60eb      	str	r3, [r5, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   133ae:	4831      	ldr	r0, [pc, #196]	; (13474 <hci_tx_thread+0xd8>)
   133b0:	f04f 32ff 	mov.w	r2, #4294967295
   133b4:	f04f 33ff 	mov.w	r3, #4294967295
   133b8:	2101      	movs	r1, #1
   133ba:	f00c f91b 	bl	1f5f4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   133be:	b160      	cbz	r0, 133da <hci_tx_thread+0x3e>
   133c0:	4a2d      	ldr	r2, [pc, #180]	; (13478 <hci_tx_thread+0xdc>)
   133c2:	492e      	ldr	r1, [pc, #184]	; (1347c <hci_tx_thread+0xe0>)
   133c4:	482e      	ldr	r0, [pc, #184]	; (13480 <hci_tx_thread+0xe4>)
   133c6:	f640 13d3 	movw	r3, #2515	; 0x9d3
   133ca:	f00c fd47 	bl	1fe5c <assert_print>
   133ce:	4040      	eors	r0, r0
   133d0:	f380 8811 	msr	BASEPRI, r0
   133d4:	f04f 0003 	mov.w	r0, #3
   133d8:	df02      	svc	2
		switch (ev->state) {
   133da:	68eb      	ldr	r3, [r5, #12]
   133dc:	f3c3 3345 	ubfx	r3, r3, #13, #6
   133e0:	2b04      	cmp	r3, #4
   133e2:	d12d      	bne.n	13440 <hci_tx_thread+0xa4>
			if (ev->tag == BT_EVENT_CMD_TX) {
   133e4:	7b2b      	ldrb	r3, [r5, #12]
   133e6:	bb5b      	cbnz	r3, 13440 <hci_tx_thread+0xa4>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   133e8:	4826      	ldr	r0, [pc, #152]	; (13484 <hci_tx_thread+0xe8>)
   133ea:	2200      	movs	r2, #0
   133ec:	2300      	movs	r3, #0
   133ee:	f011 fc99 	bl	24d24 <net_buf_get>
	BT_ASSERT(buf);
   133f2:	4604      	mov	r4, r0
   133f4:	b368      	cbz	r0, 13452 <hci_tx_thread+0xb6>
	return z_impl_k_sem_take(sem, timeout);
   133f6:	f04f 32ff 	mov.w	r2, #4294967295
   133fa:	f04f 33ff 	mov.w	r3, #4294967295
   133fe:	4638      	mov	r0, r7
   13400:	f00b fa42 	bl	1e888 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   13404:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   13408:	b9e8      	cbnz	r0, 13446 <hci_tx_thread+0xaa>
	bt_dev.sent_cmd = net_buf_ref(buf);
   1340a:	4620      	mov	r0, r4
   1340c:	f011 fd04 	bl	24e18 <net_buf_ref>
   13410:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
		return bt_hci_ecc_send(buf);
   13414:	4620      	mov	r0, r4
   13416:	f7ff fd85 	bl	12f24 <bt_hci_ecc_send>
	if (err) {
   1341a:	b188      	cbz	r0, 13440 <hci_tx_thread+0xa4>
	z_impl_k_sem_give(sem);
   1341c:	481a      	ldr	r0, [pc, #104]	; (13488 <hci_tx_thread+0xec>)
   1341e:	f00b fa0d 	bl	1e83c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   13422:	4620      	mov	r0, r4
   13424:	f008 fb26 	bl	1ba74 <net_buf_id>
   13428:	4b18      	ldr	r3, [pc, #96]	; (1348c <hci_tx_thread+0xf0>)
   1342a:	220c      	movs	r2, #12
   1342c:	fb02 3000 	mla	r0, r2, r0, r3
   13430:	211f      	movs	r1, #31
   13432:	8840      	ldrh	r0, [r0, #2]
   13434:	4622      	mov	r2, r4
   13436:	f7ff ff49 	bl	132cc <hci_cmd_done>
		net_buf_unref(buf);
   1343a:	4620      	mov	r0, r4
   1343c:	f008 fbd6 	bl	1bbec <net_buf_unref>
	z_impl_k_yield();
   13440:	f00b fe44 	bl	1f0cc <z_impl_k_yield>
	while (1) {
   13444:	e7af      	b.n	133a6 <hci_tx_thread+0xa>
		net_buf_unref(bt_dev.sent_cmd);
   13446:	f008 fbd1 	bl	1bbec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1344a:	2300      	movs	r3, #0
   1344c:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
   13450:	e7db      	b.n	1340a <hci_tx_thread+0x6e>
	BT_ASSERT(buf);
   13452:	4a09      	ldr	r2, [pc, #36]	; (13478 <hci_tx_thread+0xdc>)
   13454:	490e      	ldr	r1, [pc, #56]	; (13490 <hci_tx_thread+0xf4>)
   13456:	480a      	ldr	r0, [pc, #40]	; (13480 <hci_tx_thread+0xe4>)
   13458:	f640 136c 	movw	r3, #2412	; 0x96c
   1345c:	f00c fcfe 	bl	1fe5c <assert_print>
   13460:	4040      	eors	r0, r0
   13462:	f380 8811 	msr	BASEPRI, r0
   13466:	f04f 0003 	mov.w	r0, #3
   1346a:	df02      	svc	2
   1346c:	e7c3      	b.n	133f6 <hci_tx_thread+0x5a>
   1346e:	bf00      	nop
   13470:	200002d8 	.word	0x200002d8
   13474:	20000548 	.word	0x20000548
   13478:	0002748d 	.word	0x0002748d
   1347c:	00027525 	.word	0x00027525
   13480:	000274da 	.word	0x000274da
   13484:	200003dc 	.word	0x200003dc
   13488:	200003b8 	.word	0x200003b8
   1348c:	2000241c 	.word	0x2000241c
   13490:	0002752e 	.word	0x0002752e

00013494 <hci_cmd_complete>:
{
   13494:	b538      	push	{r3, r4, r5, lr}
   13496:	2103      	movs	r1, #3
   13498:	4604      	mov	r4, r0
   1349a:	3008      	adds	r0, #8
   1349c:	f011 fd30 	bl	24f00 <net_buf_simple_pull_mem>
	status = buf->data[0];
   134a0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   134a2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   134a4:	7819      	ldrb	r1, [r3, #0]
   134a6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   134aa:	4622      	mov	r2, r4
   134ac:	f7ff ff0e 	bl	132cc <hci_cmd_done>
	if (ncmd) {
   134b0:	b125      	cbz	r5, 134bc <hci_cmd_complete+0x28>
	z_impl_k_sem_give(sem);
   134b2:	4803      	ldr	r0, [pc, #12]	; (134c0 <hci_cmd_complete+0x2c>)
}
   134b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   134b8:	f00b b9c0 	b.w	1e83c <z_impl_k_sem_give>
   134bc:	bd38      	pop	{r3, r4, r5, pc}
   134be:	bf00      	nop
   134c0:	200003b8 	.word	0x200003b8

000134c4 <hci_cmd_status>:
{
   134c4:	b538      	push	{r3, r4, r5, lr}
   134c6:	2104      	movs	r1, #4
   134c8:	4604      	mov	r4, r0
   134ca:	3008      	adds	r0, #8
   134cc:	f011 fd18 	bl	24f00 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   134d0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   134d2:	7801      	ldrb	r1, [r0, #0]
   134d4:	8840      	ldrh	r0, [r0, #2]
   134d6:	4622      	mov	r2, r4
   134d8:	f7ff fef8 	bl	132cc <hci_cmd_done>
	if (ncmd) {
   134dc:	b125      	cbz	r5, 134e8 <hci_cmd_status+0x24>
   134de:	4803      	ldr	r0, [pc, #12]	; (134ec <hci_cmd_status+0x28>)
}
   134e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   134e4:	f00b b9aa 	b.w	1e83c <z_impl_k_sem_give>
   134e8:	bd38      	pop	{r3, r4, r5, pc}
   134ea:	bf00      	nop
   134ec:	200003b8 	.word	0x200003b8

000134f0 <bt_hci_cmd_state_set_init>:
{
   134f0:	b510      	push	{r4, lr}
	state->bit = bit;
   134f2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   134f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   134fa:	720b      	strb	r3, [r1, #8]
{
   134fc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   134fe:	f008 fab9 	bl	1ba74 <net_buf_id>
   13502:	4b03      	ldr	r3, [pc, #12]	; (13510 <bt_hci_cmd_state_set_init+0x20>)
   13504:	220c      	movs	r2, #12
   13506:	fb02 3300 	mla	r3, r2, r0, r3
   1350a:	605c      	str	r4, [r3, #4]
}
   1350c:	bd10      	pop	{r4, pc}
   1350e:	bf00      	nop
   13510:	2000241c 	.word	0x2000241c

00013514 <bt_hci_cmd_create>:
{
   13514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13518:	f04f 32ff 	mov.w	r2, #4294967295
   1351c:	f04f 33ff 	mov.w	r3, #4294967295
   13520:	4606      	mov	r6, r0
   13522:	4817      	ldr	r0, [pc, #92]	; (13580 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   13524:	4d17      	ldr	r5, [pc, #92]	; (13584 <bt_hci_cmd_create+0x70>)
{
   13526:	460f      	mov	r7, r1
   13528:	f011 fbf7 	bl	24d1a <net_buf_alloc_fixed>
   1352c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1352e:	f100 0a08 	add.w	sl, r0, #8
   13532:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13534:	f04f 0800 	mov.w	r8, #0
   13538:	4650      	mov	r0, sl
   1353a:	f011 fc13 	bl	24d64 <net_buf_simple_reserve>
   1353e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   13542:	4620      	mov	r0, r4
   13544:	f008 fa96 	bl	1ba74 <net_buf_id>
   13548:	f04f 090c 	mov.w	r9, #12
   1354c:	fb09 5000 	mla	r0, r9, r0, r5
   13550:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13552:	4620      	mov	r0, r4
   13554:	f008 fa8e 	bl	1ba74 <net_buf_id>
   13558:	fb09 5000 	mla	r0, r9, r0, r5
   1355c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13560:	4620      	mov	r0, r4
   13562:	f008 fa87 	bl	1ba74 <net_buf_id>
   13566:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   1356a:	2103      	movs	r1, #3
   1356c:	f8c5 8004 	str.w	r8, [r5, #4]
   13570:	4650      	mov	r0, sl
   13572:	f011 fc55 	bl	24e20 <net_buf_simple_add>
	hdr->param_len = param_len;
   13576:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   13578:	8006      	strh	r6, [r0, #0]
}
   1357a:	4620      	mov	r0, r4
   1357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13580:	20000c14 	.word	0x20000c14
   13584:	2000241c 	.word	0x2000241c

00013588 <bt_hci_cmd_send_sync>:
{
   13588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1358a:	4615      	mov	r5, r2
   1358c:	b087      	sub	sp, #28
	if (!buf) {
   1358e:	460c      	mov	r4, r1
   13590:	b921      	cbnz	r1, 1359c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   13592:	f7ff ffbf 	bl	13514 <bt_hci_cmd_create>
		if (!buf) {
   13596:	4604      	mov	r4, r0
   13598:	2800      	cmp	r0, #0
   1359a:	d048      	beq.n	1362e <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1359c:	2201      	movs	r2, #1
   1359e:	2100      	movs	r1, #0
   135a0:	4668      	mov	r0, sp
   135a2:	f012 fa45 	bl	25a30 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   135a6:	4620      	mov	r0, r4
   135a8:	f008 fa64 	bl	1ba74 <net_buf_id>
   135ac:	4f21      	ldr	r7, [pc, #132]	; (13634 <bt_hci_cmd_send_sync+0xac>)
   135ae:	230c      	movs	r3, #12
   135b0:	fb03 7000 	mla	r0, r3, r0, r7
   135b4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   135b8:	4620      	mov	r0, r4
   135ba:	f011 fc2d 	bl	24e18 <net_buf_ref>
   135be:	4601      	mov	r1, r0
   135c0:	481d      	ldr	r0, [pc, #116]	; (13638 <bt_hci_cmd_send_sync+0xb0>)
   135c2:	f011 fc1c 	bl	24dfe <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   135c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   135ca:	2300      	movs	r3, #0
   135cc:	4668      	mov	r0, sp
   135ce:	f00b f95b 	bl	1e888 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   135d2:	4606      	mov	r6, r0
   135d4:	b180      	cbz	r0, 135f8 <bt_hci_cmd_send_sync+0x70>
   135d6:	4a19      	ldr	r2, [pc, #100]	; (1363c <bt_hci_cmd_send_sync+0xb4>)
   135d8:	4919      	ldr	r1, [pc, #100]	; (13640 <bt_hci_cmd_send_sync+0xb8>)
   135da:	481a      	ldr	r0, [pc, #104]	; (13644 <bt_hci_cmd_send_sync+0xbc>)
   135dc:	f240 1347 	movw	r3, #327	; 0x147
   135e0:	f00c fc3c 	bl	1fe5c <assert_print>
   135e4:	4818      	ldr	r0, [pc, #96]	; (13648 <bt_hci_cmd_send_sync+0xc0>)
   135e6:	4631      	mov	r1, r6
   135e8:	f00c fc38 	bl	1fe5c <assert_print>
   135ec:	4040      	eors	r0, r0
   135ee:	f380 8811 	msr	BASEPRI, r0
   135f2:	f04f 0003 	mov.w	r0, #3
   135f6:	df02      	svc	2
	status = cmd(buf)->status;
   135f8:	4620      	mov	r0, r4
   135fa:	f008 fa3b 	bl	1ba74 <net_buf_id>
   135fe:	230c      	movs	r3, #12
   13600:	4358      	muls	r0, r3
   13602:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   13604:	b156      	cbz	r6, 1361c <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   13606:	4620      	mov	r0, r4
   13608:	f008 faf0 	bl	1bbec <net_buf_unref>
			return -EIO;
   1360c:	2e09      	cmp	r6, #9
   1360e:	bf0c      	ite	eq
   13610:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   13614:	f06f 0004 	mvnne.w	r0, #4
}
   13618:	b007      	add	sp, #28
   1361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1361c:	b115      	cbz	r5, 13624 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1361e:	602c      	str	r4, [r5, #0]
	return 0;
   13620:	4630      	mov	r0, r6
   13622:	e7f9      	b.n	13618 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   13624:	4620      	mov	r0, r4
   13626:	f008 fae1 	bl	1bbec <net_buf_unref>
	return 0;
   1362a:	4628      	mov	r0, r5
   1362c:	e7f4      	b.n	13618 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1362e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13632:	e7f1      	b.n	13618 <bt_hci_cmd_send_sync+0x90>
   13634:	2000241c 	.word	0x2000241c
   13638:	200003dc 	.word	0x200003dc
   1363c:	0002748d 	.word	0x0002748d
   13640:	00027525 	.word	0x00027525
   13644:	000274da 	.word	0x000274da
   13648:	00027532 	.word	0x00027532

0001364c <bt_hci_le_rand>:
{
   1364c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1364e:	4b14      	ldr	r3, [pc, #80]	; (136a0 <bt_hci_le_rand+0x54>)
   13650:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   13654:	2b00      	cmp	r3, #0
{
   13656:	4605      	mov	r5, r0
   13658:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1365a:	da1d      	bge.n	13698 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   1365c:	b914      	cbnz	r4, 13664 <bt_hci_le_rand+0x18>
	return 0;
   1365e:	4620      	mov	r0, r4
}
   13660:	b002      	add	sp, #8
   13662:	bd70      	pop	{r4, r5, r6, pc}
		count = MIN(len, sizeof(rp->rand));
   13664:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   13666:	aa01      	add	r2, sp, #4
   13668:	f04f 0100 	mov.w	r1, #0
   1366c:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   13670:	4626      	mov	r6, r4
   13672:	bf28      	it	cs
   13674:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   13676:	f7ff ff87 	bl	13588 <bt_hci_cmd_send_sync>
		if (err) {
   1367a:	2800      	cmp	r0, #0
   1367c:	d1f0      	bne.n	13660 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1367e:	9b01      	ldr	r3, [sp, #4]
		memcpy(buffer, rp->rand, count);
   13680:	6899      	ldr	r1, [r3, #8]
   13682:	4632      	mov	r2, r6
   13684:	3101      	adds	r1, #1
   13686:	4628      	mov	r0, r5
   13688:	f00e f9b6 	bl	219f8 <memcpy>
		net_buf_unref(rsp);
   1368c:	9801      	ldr	r0, [sp, #4]
   1368e:	f008 faad 	bl	1bbec <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   13692:	4435      	add	r5, r6
		len -= count;
   13694:	1ba4      	subs	r4, r4, r6
   13696:	e7e1      	b.n	1365c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   13698:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1369c:	e7e0      	b.n	13660 <bt_hci_le_rand+0x14>
   1369e:	bf00      	nop
   136a0:	200002d8 	.word	0x200002d8

000136a4 <hci_event_prio>:
{
   136a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136a8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   136aa:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   136ae:	4630      	mov	r0, r6
   136b0:	f011 fc5f 	bl	24f72 <net_buf_simple_headroom>
	state->len = buf->len;
   136b4:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   136b6:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
   136b8:	4605      	mov	r5, r0
   136ba:	d80c      	bhi.n	136d6 <hci_event_prio+0x32>
   136bc:	4a21      	ldr	r2, [pc, #132]	; (13744 <hci_event_prio+0xa0>)
   136be:	4922      	ldr	r1, [pc, #136]	; (13748 <hci_event_prio+0xa4>)
   136c0:	4822      	ldr	r0, [pc, #136]	; (1374c <hci_event_prio+0xa8>)
   136c2:	f640 536f 	movw	r3, #3439	; 0xd6f
   136c6:	f00c fbc9 	bl	1fe5c <assert_print>
   136ca:	4040      	eors	r0, r0
   136cc:	f380 8811 	msr	BASEPRI, r0
   136d0:	f04f 0003 	mov.w	r0, #3
   136d4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   136d6:	4630      	mov	r0, r6
   136d8:	2102      	movs	r1, #2
   136da:	f011 fc11 	bl	24f00 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   136de:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   136e0:	2b05      	cmp	r3, #5
   136e2:	4606      	mov	r6, r0
   136e4:	d026      	beq.n	13734 <hci_event_prio+0x90>
   136e6:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
   136e8:	2b01      	cmp	r3, #1
   136ea:	bf94      	ite	ls
   136ec:	f04f 0801 	movls.w	r8, #1
   136f0:	f04f 0802 	movhi.w	r8, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   136f4:	f018 0f01 	tst.w	r8, #1
   136f8:	d10c      	bne.n	13714 <hci_event_prio+0x70>
   136fa:	4a12      	ldr	r2, [pc, #72]	; (13744 <hci_event_prio+0xa0>)
   136fc:	4914      	ldr	r1, [pc, #80]	; (13750 <hci_event_prio+0xac>)
   136fe:	4813      	ldr	r0, [pc, #76]	; (1374c <hci_event_prio+0xa8>)
   13700:	f640 5373 	movw	r3, #3443	; 0xd73
   13704:	f00c fbaa 	bl	1fe5c <assert_print>
   13708:	4040      	eors	r0, r0
   1370a:	f380 8811 	msr	BASEPRI, r0
   1370e:	f04f 0003 	mov.w	r0, #3
   13712:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   13714:	4a0f      	ldr	r2, [pc, #60]	; (13754 <hci_event_prio+0xb0>)
   13716:	7830      	ldrb	r0, [r6, #0]
   13718:	2302      	movs	r3, #2
   1371a:	4621      	mov	r1, r4
   1371c:	f00e fbb9 	bl	21e92 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13720:	f018 0f02 	tst.w	r8, #2
   13724:	d009      	beq.n	1373a <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
   13726:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13728:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1372a:	fa10 f585 	uxtah	r5, r0, r5
   1372e:	60a5      	str	r5, [r4, #8]
}
   13730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   13734:	f04f 0803 	mov.w	r8, #3
   13738:	e7dc      	b.n	136f4 <hci_event_prio+0x50>
		net_buf_unref(buf);
   1373a:	4620      	mov	r0, r4
}
   1373c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   13740:	f008 ba54 	b.w	1bbec <net_buf_unref>
   13744:	0002748d 	.word	0x0002748d
   13748:	000274c1 	.word	0x000274c1
   1374c:	000274da 	.word	0x000274da
   13750:	00027552 	.word	0x00027552
   13754:	000268a8 	.word	0x000268a8

00013758 <bt_recv>:
{
   13758:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1375a:	7d04      	ldrb	r4, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   1375c:	2c01      	cmp	r4, #1
{
   1375e:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   13760:	d11b      	bne.n	1379a <bt_recv+0x42>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13762:	6883      	ldr	r3, [r0, #8]
   13764:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   13766:	2b05      	cmp	r3, #5
   13768:	d015      	beq.n	13796 <bt_recv+0x3e>
   1376a:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
   1376c:	2b01      	cmp	r3, #1
   1376e:	bf88      	it	hi
   13770:	2402      	movhi	r4, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13772:	07e3      	lsls	r3, r4, #31
   13774:	d502      	bpl.n	1377c <bt_recv+0x24>
			hci_event_prio(buf);
   13776:	4628      	mov	r0, r5
   13778:	f7ff ff94 	bl	136a4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1377c:	f014 0002 	ands.w	r0, r4, #2
   13780:	d008      	beq.n	13794 <bt_recv+0x3c>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   13782:	4808      	ldr	r0, [pc, #32]	; (137a4 <bt_recv+0x4c>)
   13784:	4629      	mov	r1, r5
   13786:	f011 faf1 	bl	24d6c <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1378a:	4907      	ldr	r1, [pc, #28]	; (137a8 <bt_recv+0x50>)
   1378c:	4807      	ldr	r0, [pc, #28]	; (137ac <bt_recv+0x54>)
   1378e:	f012 f9fc 	bl	25b8a <k_work_submit_to_queue>
		return 0;
   13792:	2000      	movs	r0, #0
}
   13794:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   13796:	2403      	movs	r4, #3
   13798:	e7eb      	b.n	13772 <bt_recv+0x1a>
		net_buf_unref(buf);
   1379a:	f008 fa27 	bl	1bbec <net_buf_unref>
		return -EINVAL;
   1379e:	f06f 0015 	mvn.w	r0, #21
   137a2:	e7f7      	b.n	13794 <bt_recv+0x3c>
   137a4:	200003d4 	.word	0x200003d4
   137a8:	2000055c 	.word	0x2000055c
   137ac:	20001bf0 	.word	0x20001bf0

000137b0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   137b0:	4a08      	ldr	r2, [pc, #32]	; (137d4 <bt_hci_driver_register+0x24>)
{
   137b2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   137b4:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
   137b8:	b930      	cbnz	r0, 137c8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   137ba:	68d9      	ldr	r1, [r3, #12]
   137bc:	b139      	cbz	r1, 137ce <bt_hci_driver_register+0x1e>
   137be:	6959      	ldr	r1, [r3, #20]
   137c0:	b129      	cbz	r1, 137ce <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   137c2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
   137c6:	4770      	bx	lr
		return -EALREADY;
   137c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   137cc:	4770      	bx	lr
		return -EINVAL;
   137ce:	f06f 0015 	mvn.w	r0, #21
}
   137d2:	4770      	bx	lr
   137d4:	200002d8 	.word	0x200002d8

000137d8 <bt_finalize_init>:
{
   137d8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   137da:	4804      	ldr	r0, [pc, #16]	; (137ec <bt_finalize_init+0x14>)
   137dc:	2104      	movs	r1, #4
   137de:	f00e fb45 	bl	21e6c <atomic_or>
}
   137e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   137e6:	2000      	movs	r0, #0
   137e8:	f000 bdf2 	b.w	143d0 <bt_le_scan_update>
   137ec:	200003a4 	.word	0x200003a4

000137f0 <bt_init>:
{
   137f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   137f2:	4dad      	ldr	r5, [pc, #692]	; (13aa8 <bt_init+0x2b8>)
   137f4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   137f8:	6899      	ldr	r1, [r3, #8]
   137fa:	f011 0101 	ands.w	r1, r1, #1
   137fe:	d123      	bne.n	13848 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   13800:	aa01      	add	r2, sp, #4
   13802:	f640 4003 	movw	r0, #3075	; 0xc03
   13806:	f7ff febf 	bl	13588 <bt_hci_cmd_send_sync>
		if (err) {
   1380a:	4604      	mov	r4, r0
   1380c:	2800      	cmp	r0, #0
   1380e:	d16e      	bne.n	138ee <bt_init+0xfe>
	uint8_t status = buf->data[0];
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	689b      	ldr	r3, [r3, #8]
	if (status) {
   13814:	781b      	ldrb	r3, [r3, #0]
   13816:	b9a3      	cbnz	r3, 13842 <bt_init+0x52>
		bt_scan_reset();
   13818:	f000 fdd4 	bl	143c4 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1381c:	f3bf 8f5b 	dmb	ish
   13820:	462b      	mov	r3, r5
   13822:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   13826:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1382a:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1382e:	f3bf 8f5b 	dmb	ish
   13832:	e853 1f00 	ldrex	r1, [r3]
   13836:	e843 2000 	strex	r0, r2, [r3]
   1383a:	2800      	cmp	r0, #0
   1383c:	d1f9      	bne.n	13832 <bt_init+0x42>
   1383e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   13842:	9801      	ldr	r0, [sp, #4]
   13844:	f008 f9d2 	bl	1bbec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   13848:	aa01      	add	r2, sp, #4
   1384a:	2100      	movs	r1, #0
   1384c:	f241 0003 	movw	r0, #4099	; 0x1003
   13850:	f7ff fe9a 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   13854:	4604      	mov	r4, r0
   13856:	2800      	cmp	r0, #0
   13858:	d149      	bne.n	138ee <bt_init+0xfe>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1385a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1385c:	4893      	ldr	r0, [pc, #588]	; (13aac <bt_init+0x2bc>)
   1385e:	6899      	ldr	r1, [r3, #8]
   13860:	2208      	movs	r2, #8
   13862:	3101      	adds	r1, #1
   13864:	f00e f8c8 	bl	219f8 <memcpy>
	net_buf_unref(rsp);
   13868:	9801      	ldr	r0, [sp, #4]
   1386a:	f008 f9bf 	bl	1bbec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1386e:	4621      	mov	r1, r4
   13870:	aa01      	add	r2, sp, #4
   13872:	f241 0001 	movw	r0, #4097	; 0x1001
   13876:	f7ff fe87 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   1387a:	4604      	mov	r4, r0
   1387c:	2800      	cmp	r0, #0
   1387e:	d136      	bne.n	138ee <bt_init+0xfe>
	read_local_ver_complete(rsp);
   13880:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   13882:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   13884:	785a      	ldrb	r2, [r3, #1]
   13886:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1388a:	78d9      	ldrb	r1, [r3, #3]
   1388c:	789a      	ldrb	r2, [r3, #2]
   1388e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13892:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   13896:	791a      	ldrb	r2, [r3, #4]
   13898:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1389c:	7a19      	ldrb	r1, [r3, #8]
   1389e:	79da      	ldrb	r2, [r3, #7]
   138a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   138a4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   138a8:	795a      	ldrb	r2, [r3, #5]
   138aa:	799b      	ldrb	r3, [r3, #6]
   138ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   138b0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   138b4:	f008 f99a 	bl	1bbec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   138b8:	4621      	mov	r1, r4
   138ba:	aa01      	add	r2, sp, #4
   138bc:	f241 0002 	movw	r0, #4098	; 0x1002
   138c0:	f7ff fe62 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   138c4:	4604      	mov	r4, r0
   138c6:	b990      	cbnz	r0, 138ee <bt_init+0xfe>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   138c8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   138ca:	4879      	ldr	r0, [pc, #484]	; (13ab0 <bt_init+0x2c0>)
   138cc:	6899      	ldr	r1, [r3, #8]
   138ce:	2240      	movs	r2, #64	; 0x40
   138d0:	3101      	adds	r1, #1
   138d2:	f00e f891 	bl	219f8 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   138d6:	4876      	ldr	r0, [pc, #472]	; (13ab0 <bt_init+0x2c0>)
   138d8:	f00e f8e5 	bl	21aa6 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   138dc:	9801      	ldr	r0, [sp, #4]
   138de:	f008 f985 	bl	1bbec <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   138e2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   138e6:	0658      	lsls	r0, r3, #25
   138e8:	d404      	bmi.n	138f4 <bt_init+0x104>
		return -ENODEV;
   138ea:	f06f 0412 	mvn.w	r4, #18
}
   138ee:	4620      	mov	r0, r4
   138f0:	b003      	add	sp, #12
   138f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   138f4:	4621      	mov	r1, r4
   138f6:	aa01      	add	r2, sp, #4
   138f8:	f242 0003 	movw	r0, #8195	; 0x2003
   138fc:	f7ff fe44 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   13900:	4604      	mov	r4, r0
   13902:	2800      	cmp	r0, #0
   13904:	d1f3      	bne.n	138ee <bt_init+0xfe>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   13906:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   13908:	486a      	ldr	r0, [pc, #424]	; (13ab4 <bt_init+0x2c4>)
   1390a:	6899      	ldr	r1, [r3, #8]
   1390c:	2208      	movs	r2, #8
   1390e:	3101      	adds	r1, #1
   13910:	f00e f872 	bl	219f8 <memcpy>
	net_buf_unref(rsp);
   13914:	9801      	ldr	r0, [sp, #4]
   13916:	f008 f969 	bl	1bbec <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1391a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1391e:	0699      	lsls	r1, r3, #26
   13920:	f140 8090 	bpl.w	13a44 <bt_init+0x254>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   13924:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   13928:	071a      	lsls	r2, r3, #28
   1392a:	f100 80a7 	bmi.w	13a7c <bt_init+0x28c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1392e:	2108      	movs	r1, #8
   13930:	f242 0001 	movw	r0, #8193	; 0x2001
   13934:	f7ff fdee 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   13938:	4604      	mov	r4, r0
   1393a:	2800      	cmp	r0, #0
   1393c:	f000 8089 	beq.w	13a52 <bt_init+0x262>
	return net_buf_simple_add(&buf->b, len);
   13940:	2108      	movs	r1, #8
   13942:	4408      	add	r0, r1
   13944:	f011 fa6c 	bl	24e20 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   13948:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
   1394c:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   13950:	2b06      	cmp	r3, #6
   13952:	bf14      	ite	ne
   13954:	2302      	movne	r3, #2
   13956:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1395a:	2200      	movs	r2, #0
   1395c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1395e:	0a1b      	lsrs	r3, r3, #8
   13960:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   13962:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   13964:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   13966:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   13968:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1396a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1396c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1396e:	4621      	mov	r1, r4
   13970:	f242 0001 	movw	r0, #8193	; 0x2001
   13974:	f7ff fe08 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   13978:	4604      	mov	r4, r0
   1397a:	2800      	cmp	r0, #0
   1397c:	d1b7      	bne.n	138ee <bt_init+0xfe>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1397e:	2108      	movs	r1, #8
   13980:	f640 4001 	movw	r0, #3073	; 0xc01
   13984:	f7ff fdc6 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   13988:	4606      	mov	r6, r0
   1398a:	2800      	cmp	r0, #0
   1398c:	d061      	beq.n	13a52 <bt_init+0x262>
   1398e:	2108      	movs	r1, #8
   13990:	4408      	add	r0, r1
   13992:	f011 fa45 	bl	24e20 <net_buf_simple_add>
   13996:	2380      	movs	r3, #128	; 0x80
   13998:	7043      	strb	r3, [r0, #1]
   1399a:	2702      	movs	r7, #2
   1399c:	2320      	movs	r3, #32
	dst[0] = val;
   1399e:	7004      	strb	r4, [r0, #0]
   139a0:	7084      	strb	r4, [r0, #2]
   139a2:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
   139a4:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
   139a6:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
   139a8:	70c7      	strb	r7, [r0, #3]
   139aa:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   139ac:	4622      	mov	r2, r4
   139ae:	4631      	mov	r1, r6
   139b0:	f640 4001 	movw	r0, #3073	; 0xc01
   139b4:	f7ff fde8 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   139b8:	4604      	mov	r4, r0
   139ba:	2800      	cmp	r0, #0
   139bc:	d197      	bne.n	138ee <bt_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   139be:	4601      	mov	r1, r0
   139c0:	aa01      	add	r2, sp, #4
   139c2:	f64f 4001 	movw	r0, #64513	; 0xfc01
   139c6:	f7ff fddf 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   139ca:	4604      	mov	r4, r0
   139cc:	bb48      	cbnz	r0, 13a22 <bt_init+0x232>
	net_buf_unref(rsp);
   139ce:	9801      	ldr	r0, [sp, #4]
   139d0:	f008 f90c 	bl	1bbec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   139d4:	4621      	mov	r1, r4
   139d6:	aa01      	add	r2, sp, #4
   139d8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   139dc:	f7ff fdd4 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   139e0:	4604      	mov	r4, r0
   139e2:	b9f0      	cbnz	r0, 13a22 <bt_init+0x232>
	rp.cmds = (void *)rsp->data;
   139e4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   139e6:	4834      	ldr	r0, [pc, #208]	; (13ab8 <bt_init+0x2c8>)
   139e8:	6899      	ldr	r1, [r3, #8]
   139ea:	463a      	mov	r2, r7
   139ec:	3101      	adds	r1, #1
   139ee:	f00e f803 	bl	219f8 <memcpy>
	net_buf_unref(rsp);
   139f2:	9801      	ldr	r0, [sp, #4]
   139f4:	f008 f8fa 	bl	1bbec <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   139f8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   139fc:	075b      	lsls	r3, r3, #29
   139fe:	d510      	bpl.n	13a22 <bt_init+0x232>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   13a00:	aa01      	add	r2, sp, #4
   13a02:	4621      	mov	r1, r4
   13a04:	f64f 4003 	movw	r0, #64515	; 0xfc03
   13a08:	f7ff fdbe 	bl	13588 <bt_hci_cmd_send_sync>
		if (err) {
   13a0c:	b948      	cbnz	r0, 13a22 <bt_init+0x232>
		rp.feat = (void *)rsp->data;
   13a0e:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   13a10:	482a      	ldr	r0, [pc, #168]	; (13abc <bt_init+0x2cc>)
   13a12:	6899      	ldr	r1, [r3, #8]
   13a14:	2201      	movs	r2, #1
   13a16:	4411      	add	r1, r2
   13a18:	f00d ffee 	bl	219f8 <memcpy>
		net_buf_unref(rsp);
   13a1c:	9801      	ldr	r0, [sp, #4]
   13a1e:	f008 f8e5 	bl	1bbec <net_buf_unref>
	err = bt_id_init();
   13a22:	f00e fa89 	bl	21f38 <bt_id_init>
	if (err) {
   13a26:	4604      	mov	r4, r0
   13a28:	2800      	cmp	r0, #0
   13a2a:	f47f af60 	bne.w	138ee <bt_init+0xfe>
		if (!bt_dev.id_count) {
   13a2e:	79eb      	ldrb	r3, [r5, #7]
   13a30:	2b00      	cmp	r3, #0
   13a32:	f43f af5c 	beq.w	138ee <bt_init+0xfe>
   13a36:	2108      	movs	r1, #8
   13a38:	4821      	ldr	r0, [pc, #132]	; (13ac0 <bt_init+0x2d0>)
   13a3a:	f00e fa17 	bl	21e6c <atomic_or>
	bt_finalize_init();
   13a3e:	f7ff fecb 	bl	137d8 <bt_finalize_init>
	return 0;
   13a42:	e754      	b.n	138ee <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   13a44:	2102      	movs	r1, #2
   13a46:	f640 406d 	movw	r0, #3181	; 0xc6d
   13a4a:	f7ff fd63 	bl	13514 <bt_hci_cmd_create>
		if (!buf) {
   13a4e:	4606      	mov	r6, r0
   13a50:	b910      	cbnz	r0, 13a58 <bt_init+0x268>
		return -ENOBUFS;
   13a52:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13a56:	e74a      	b.n	138ee <bt_init+0xfe>
   13a58:	2102      	movs	r1, #2
   13a5a:	3008      	adds	r0, #8
   13a5c:	f011 f9e0 	bl	24e20 <net_buf_simple_add>
		cp_le->le = 0x01;
   13a60:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
   13a62:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
   13a64:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   13a66:	4622      	mov	r2, r4
   13a68:	4631      	mov	r1, r6
   13a6a:	f640 406d 	movw	r0, #3181	; 0xc6d
   13a6e:	f7ff fd8b 	bl	13588 <bt_hci_cmd_send_sync>
		if (err) {
   13a72:	4604      	mov	r4, r0
   13a74:	2800      	cmp	r0, #0
   13a76:	f43f af55 	beq.w	13924 <bt_init+0x134>
   13a7a:	e738      	b.n	138ee <bt_init+0xfe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   13a7c:	aa01      	add	r2, sp, #4
   13a7e:	2100      	movs	r1, #0
   13a80:	f242 001c 	movw	r0, #8220	; 0x201c
   13a84:	f7ff fd80 	bl	13588 <bt_hci_cmd_send_sync>
		if (err) {
   13a88:	4604      	mov	r4, r0
   13a8a:	2800      	cmp	r0, #0
   13a8c:	f47f af2f 	bne.w	138ee <bt_init+0xfe>
		le_read_supp_states_complete(rsp);
   13a90:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13a92:	6883      	ldr	r3, [r0, #8]
   13a94:	f8d3 2001 	ldr.w	r2, [r3, #1]
   13a98:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   13a9c:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   13aa0:	f008 f8a4 	bl	1bbec <net_buf_unref>
   13aa4:	e743      	b.n	1392e <bt_init+0x13e>
   13aa6:	bf00      	nop
   13aa8:	200002d8 	.word	0x200002d8
   13aac:	20000348 	.word	0x20000348
   13ab0:	20000350 	.word	0x20000350
   13ab4:	200003a8 	.word	0x200003a8
   13ab8:	20000391 	.word	0x20000391
   13abc:	20000390 	.word	0x20000390
   13ac0:	200003a4 	.word	0x200003a4

00013ac4 <init_work>:
{
   13ac4:	b510      	push	{r4, lr}
	err = bt_init();
   13ac6:	f7ff fe93 	bl	137f0 <bt_init>
	if (ready_cb) {
   13aca:	4b03      	ldr	r3, [pc, #12]	; (13ad8 <init_work+0x14>)
   13acc:	681b      	ldr	r3, [r3, #0]
   13ace:	b113      	cbz	r3, 13ad6 <init_work+0x12>
}
   13ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13ad4:	4718      	bx	r3
}
   13ad6:	bd10      	pop	{r4, pc}
   13ad8:	20002434 	.word	0x20002434

00013adc <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   13adc:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   13ade:	4d33      	ldr	r5, [pc, #204]	; (13bac <bt_enable+0xd0>)
   13ae0:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
   13ae4:	b088      	sub	sp, #32
   13ae6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   13ae8:	2b00      	cmp	r3, #0
   13aea:	d059      	beq.n	13ba0 <bt_enable+0xc4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13aec:	f3bf 8f5b 	dmb	ish
   13af0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   13af4:	e850 3f00 	ldrex	r3, [r0]
   13af8:	f023 0302 	bic.w	r3, r3, #2
   13afc:	e840 3200 	strex	r2, r3, [r0]
   13b00:	2a00      	cmp	r2, #0
   13b02:	d1f7      	bne.n	13af4 <bt_enable+0x18>
   13b04:	f3bf 8f5b 	dmb	ish
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13b08:	2101      	movs	r1, #1
   13b0a:	f00e f9af 	bl	21e6c <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13b0e:	07c3      	lsls	r3, r0, #31
   13b10:	d449      	bmi.n	13ba6 <bt_enable+0xca>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   13b12:	f00d ffdc 	bl	21ace <bt_settings_init>
		if (err) {
   13b16:	4604      	mov	r4, r0
   13b18:	2800      	cmp	r0, #0
   13b1a:	d13e      	bne.n	13b9a <bt_enable+0xbe>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   13b1c:	4b24      	ldr	r3, [pc, #144]	; (13bb0 <bt_enable+0xd4>)
   13b1e:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13b20:	2201      	movs	r2, #1
   13b22:	4611      	mov	r1, r2
   13b24:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   13b28:	f011 ff82 	bl	25a30 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   13b2c:	f505 7082 	add.w	r0, r5, #260	; 0x104
   13b30:	f011 ff2c 	bl	2598c <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b34:	2200      	movs	r2, #0
   13b36:	2300      	movs	r3, #0
   13b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b3c:	f06f 0308 	mvn.w	r3, #8
   13b40:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13b44:	e9cd 4400 	strd	r4, r4, [sp]
   13b48:	4b1a      	ldr	r3, [pc, #104]	; (13bb4 <bt_enable+0xd8>)
   13b4a:	491b      	ldr	r1, [pc, #108]	; (13bb8 <bt_enable+0xdc>)
   13b4c:	9404      	str	r4, [sp, #16]
   13b4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   13b52:	481a      	ldr	r0, [pc, #104]	; (13bbc <bt_enable+0xe0>)
   13b54:	f00a fce6 	bl	1e524 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13b58:	4919      	ldr	r1, [pc, #100]	; (13bc0 <bt_enable+0xe4>)
   13b5a:	4818      	ldr	r0, [pc, #96]	; (13bbc <bt_enable+0xe0>)
   13b5c:	f011 fe8b 	bl	25876 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_start(&bt_workq, rx_thread_stack,
   13b60:	4918      	ldr	r1, [pc, #96]	; (13bc4 <bt_enable+0xe8>)
   13b62:	4819      	ldr	r0, [pc, #100]	; (13bc8 <bt_enable+0xec>)
   13b64:	9400      	str	r4, [sp, #0]
   13b66:	f06f 0307 	mvn.w	r3, #7
   13b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13b6e:	f00a ffc1 	bl	1eaf4 <k_work_queue_start>
   13b72:	4916      	ldr	r1, [pc, #88]	; (13bcc <bt_enable+0xf0>)
   13b74:	4814      	ldr	r0, [pc, #80]	; (13bc8 <bt_enable+0xec>)
   13b76:	f011 fe7e 	bl	25876 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   13b7a:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   13b7e:	68db      	ldr	r3, [r3, #12]
   13b80:	4798      	blx	r3
	if (err) {
   13b82:	4604      	mov	r4, r0
   13b84:	b948      	cbnz	r0, 13b9a <bt_enable+0xbe>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   13b86:	b926      	cbnz	r6, 13b92 <bt_enable+0xb6>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13b88:	b008      	add	sp, #32
   13b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   13b8e:	f7ff be2f 	b.w	137f0 <bt_init>
	k_work_submit(&bt_dev.init);
   13b92:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13b96:	f00a ffa7 	bl	1eae8 <k_work_submit>
}
   13b9a:	4620      	mov	r0, r4
   13b9c:	b008      	add	sp, #32
   13b9e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   13ba0:	f06f 0412 	mvn.w	r4, #18
   13ba4:	e7f9      	b.n	13b9a <bt_enable+0xbe>
		return -EALREADY;
   13ba6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13baa:	e7f6      	b.n	13b9a <bt_enable+0xbe>
   13bac:	200002d8 	.word	0x200002d8
   13bb0:	20002434 	.word	0x20002434
   13bb4:	0001339d 	.word	0x0001339d
   13bb8:	200041c0 	.word	0x200041c0
   13bbc:	20001c90 	.word	0x20001c90
   13bc0:	0002756b 	.word	0x0002756b
   13bc4:	20003980 	.word	0x20003980
   13bc8:	20001bf0 	.word	0x20001bf0
   13bcc:	00027571 	.word	0x00027571

00013bd0 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13bd0:	4b04      	ldr	r3, [pc, #16]	; (13be4 <bt_is_ready+0x14>)
   13bd2:	f3bf 8f5b 	dmb	ish
   13bd6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   13bda:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13bde:	f3c0 0080 	ubfx	r0, r0, #2, #1
   13be2:	4770      	bx	lr
   13be4:	200002d8 	.word	0x200002d8

00013be8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13be8:	4800      	ldr	r0, [pc, #0]	; (13bec <bt_get_name+0x4>)
   13bea:	4770      	bx	lr
   13bec:	00027577 	.word	0x00027577

00013bf0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   13bf2:	4f0b      	ldr	r7, [pc, #44]	; (13c20 <id_find+0x30>)
{
   13bf4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   13bf6:	2500      	movs	r5, #0
   13bf8:	79fb      	ldrb	r3, [r7, #7]
   13bfa:	b2ec      	uxtb	r4, r5
   13bfc:	42a3      	cmp	r3, r4
   13bfe:	d802      	bhi.n	13c06 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13c00:	f06f 0401 	mvn.w	r4, #1
   13c04:	e009      	b.n	13c1a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   13c06:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
   13c0a:	2207      	movs	r2, #7
   13c0c:	4439      	add	r1, r7
   13c0e:	4630      	mov	r0, r6
   13c10:	f00d fee1 	bl	219d6 <memcmp>
   13c14:	3501      	adds	r5, #1
   13c16:	2800      	cmp	r0, #0
   13c18:	d1ee      	bne.n	13bf8 <id_find+0x8>
}
   13c1a:	4620      	mov	r0, r4
   13c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c1e:	bf00      	nop
   13c20:	200002d8 	.word	0x200002d8

00013c24 <set_random_address>:
{
   13c24:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13c26:	4914      	ldr	r1, [pc, #80]	; (13c78 <set_random_address+0x54>)
   13c28:	2206      	movs	r2, #6
   13c2a:	4605      	mov	r5, r0
   13c2c:	f00d fed3 	bl	219d6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13c30:	4604      	mov	r4, r0
   13c32:	b1e0      	cbz	r0, 13c6e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13c34:	2106      	movs	r1, #6
   13c36:	f242 0005 	movw	r0, #8197	; 0x2005
   13c3a:	f7ff fc6b 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   13c3e:	4604      	mov	r4, r0
   13c40:	b1b8      	cbz	r0, 13c72 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13c42:	2206      	movs	r2, #6
   13c44:	4629      	mov	r1, r5
   13c46:	3008      	adds	r0, #8
   13c48:	f011 f8f0 	bl	24e2c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   13c4c:	4621      	mov	r1, r4
   13c4e:	2200      	movs	r2, #0
   13c50:	f242 0005 	movw	r0, #8197	; 0x2005
   13c54:	f7ff fc98 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   13c58:	4604      	mov	r4, r0
   13c5a:	b940      	cbnz	r0, 13c6e <set_random_address+0x4a>
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   13c5c:	2206      	movs	r2, #6
   13c5e:	4806      	ldr	r0, [pc, #24]	; (13c78 <set_random_address+0x54>)
   13c60:	4629      	mov	r1, r5
   13c62:	f00d fec9 	bl	219f8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13c66:	4b05      	ldr	r3, [pc, #20]	; (13c7c <set_random_address+0x58>)
   13c68:	2201      	movs	r2, #1
   13c6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   13c6e:	4620      	mov	r0, r4
   13c70:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13c72:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13c76:	e7fa      	b.n	13c6e <set_random_address+0x4a>
   13c78:	20000339 	.word	0x20000339
   13c7c:	200002d8 	.word	0x200002d8

00013c80 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13c80:	b530      	push	{r4, r5, lr}
   13c82:	4604      	mov	r4, r0
   13c84:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13c86:	460d      	mov	r5, r1
   13c88:	b1e9      	cbz	r1, 13cc6 <id_create.constprop.0+0x46>
   13c8a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13c8c:	2207      	movs	r2, #7
   13c8e:	a902      	add	r1, sp, #8
   13c90:	4628      	mov	r0, r5
   13c92:	9302      	str	r3, [sp, #8]
   13c94:	f8cd 300b 	str.w	r3, [sp, #11]
   13c98:	f00d fe9d 	bl	219d6 <memcmp>
   13c9c:	b198      	cbz	r0, 13cc6 <id_create.constprop.0+0x46>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   13c9e:	4817      	ldr	r0, [pc, #92]	; (13cfc <id_create.constprop.0+0x7c>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   13ca0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13ca4:	2207      	movs	r2, #7
   13ca6:	4629      	mov	r1, r5
   13ca8:	4420      	add	r0, r4
   13caa:	f00d fea5 	bl	219f8 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13cae:	4814      	ldr	r0, [pc, #80]	; (13d00 <id_create.constprop.0+0x80>)
   13cb0:	f00e f903 	bl	21eba <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   13cb4:	0742      	lsls	r2, r0, #29
   13cb6:	f3c0 0380 	ubfx	r3, r0, #2, #1
   13cba:	d51d      	bpl.n	13cf8 <id_create.constprop.0+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   13cbc:	f7ff f9ea 	bl	13094 <bt_settings_save_id>
	}

	return 0;
   13cc0:	2000      	movs	r0, #0
}
   13cc2:	b005      	add	sp, #20
   13cc4:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   13cc6:	4668      	mov	r0, sp
   13cc8:	f00e f8c1 	bl	21e4e <bt_addr_le_create_static>
			if (err) {
   13ccc:	2800      	cmp	r0, #0
   13cce:	d1f8      	bne.n	13cc2 <id_create.constprop.0+0x42>
		} while (id_find(&new_addr) >= 0);
   13cd0:	4668      	mov	r0, sp
   13cd2:	f7ff ff8d 	bl	13bf0 <id_find>
   13cd6:	2800      	cmp	r0, #0
   13cd8:	daf5      	bge.n	13cc6 <id_create.constprop.0+0x46>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13cda:	4808      	ldr	r0, [pc, #32]	; (13cfc <id_create.constprop.0+0x7c>)
   13cdc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13ce0:	4404      	add	r4, r0
   13ce2:	2207      	movs	r2, #7
   13ce4:	4669      	mov	r1, sp
   13ce6:	4620      	mov	r0, r4
   13ce8:	f00d fe86 	bl	219f8 <memcpy>
		if (addr) {
   13cec:	2d00      	cmp	r5, #0
   13cee:	d0de      	beq.n	13cae <id_create.constprop.0+0x2e>
   13cf0:	2207      	movs	r2, #7
   13cf2:	4621      	mov	r1, r4
   13cf4:	4628      	mov	r0, r5
   13cf6:	e7d8      	b.n	13caa <id_create.constprop.0+0x2a>
	return 0;
   13cf8:	4618      	mov	r0, r3
   13cfa:	e7e2      	b.n	13cc2 <id_create.constprop.0+0x42>
   13cfc:	200002d8 	.word	0x200002d8
   13d00:	200003a4 	.word	0x200003a4

00013d04 <bt_id_adv_random_addr_check>:
{
   13d04:	b508      	push	{r3, lr}
   13d06:	4805      	ldr	r0, [pc, #20]	; (13d1c <bt_id_adv_random_addr_check+0x18>)
   13d08:	f00e f8d7 	bl	21eba <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   13d0c:	04c3      	lsls	r3, r0, #19
   13d0e:	d402      	bmi.n	13d16 <bt_id_adv_random_addr_check+0x12>
   13d10:	4802      	ldr	r0, [pc, #8]	; (13d1c <bt_id_adv_random_addr_check+0x18>)
   13d12:	f00e f8d2 	bl	21eba <atomic_get>
}
   13d16:	2001      	movs	r0, #1
   13d18:	bd08      	pop	{r3, pc}
   13d1a:	bf00      	nop
   13d1c:	200003a4 	.word	0x200003a4

00013d20 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d22:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13d24:	4605      	mov	r5, r0
   13d26:	b918      	cbnz	r0, 13d30 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13d28:	b1ec      	cbz	r4, 13d66 <bt_id_create+0x46>
		return -EINVAL;
   13d2a:	f06f 0015 	mvn.w	r0, #21
   13d2e:	e018      	b.n	13d62 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13d30:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13d32:	2207      	movs	r2, #7
   13d34:	4669      	mov	r1, sp
   13d36:	9300      	str	r3, [sp, #0]
   13d38:	f8cd 3003 	str.w	r3, [sp, #3]
   13d3c:	f00d fe4b 	bl	219d6 <memcmp>
   13d40:	2800      	cmp	r0, #0
   13d42:	d0f1      	beq.n	13d28 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13d44:	782b      	ldrb	r3, [r5, #0]
   13d46:	2b01      	cmp	r3, #1
   13d48:	d1ef      	bne.n	13d2a <bt_id_create+0xa>
   13d4a:	79ab      	ldrb	r3, [r5, #6]
   13d4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13d50:	2bc0      	cmp	r3, #192	; 0xc0
   13d52:	d1ea      	bne.n	13d2a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13d54:	4628      	mov	r0, r5
   13d56:	f7ff ff4b 	bl	13bf0 <id_find>
   13d5a:	2800      	cmp	r0, #0
   13d5c:	dbe4      	blt.n	13d28 <bt_id_create+0x8>
			return -EALREADY;
   13d5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   13d62:	b002      	add	sp, #8
   13d64:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13d66:	4e12      	ldr	r6, [pc, #72]	; (13db0 <bt_id_create+0x90>)
   13d68:	79f3      	ldrb	r3, [r6, #7]
   13d6a:	2b01      	cmp	r3, #1
   13d6c:	d01c      	beq.n	13da8 <bt_id_create+0x88>
   13d6e:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   13d72:	f00e f8a2 	bl	21eba <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13d76:	07c3      	lsls	r3, r0, #31
   13d78:	d40b      	bmi.n	13d92 <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   13d7a:	2d00      	cmp	r5, #0
   13d7c:	d0d5      	beq.n	13d2a <bt_id_create+0xa>
   13d7e:	2207      	movs	r2, #7
   13d80:	4669      	mov	r1, sp
   13d82:	4628      	mov	r0, r5
   13d84:	9400      	str	r4, [sp, #0]
   13d86:	f8cd 4003 	str.w	r4, [sp, #3]
   13d8a:	f00d fe24 	bl	219d6 <memcmp>
   13d8e:	2800      	cmp	r0, #0
   13d90:	d0cb      	beq.n	13d2a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   13d92:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   13d94:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   13d96:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   13d98:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   13d9a:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   13d9c:	f7ff ff70 	bl	13c80 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   13da0:	2800      	cmp	r0, #0
   13da2:	bf08      	it	eq
   13da4:	4620      	moveq	r0, r4
   13da6:	e7dc      	b.n	13d62 <bt_id_create+0x42>
		return -ENOMEM;
   13da8:	f06f 000b 	mvn.w	r0, #11
   13dac:	e7d9      	b.n	13d62 <bt_id_create+0x42>
   13dae:	bf00      	nop
   13db0:	200002d8 	.word	0x200002d8

00013db4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13db4:	b570      	push	{r4, r5, r6, lr}
   13db6:	b086      	sub	sp, #24
   13db8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13dba:	aa01      	add	r2, sp, #4
   13dbc:	2100      	movs	r1, #0
   13dbe:	f241 0009 	movw	r0, #4105	; 0x1009
   13dc2:	f7ff fbe1 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   13dc6:	4604      	mov	r4, r0
   13dc8:	b970      	cbnz	r0, 13de8 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   13dca:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dcc:	9002      	str	r0, [sp, #8]
   13dce:	689d      	ldr	r5, [r3, #8]
   13dd0:	f8ad 000c 	strh.w	r0, [sp, #12]
   13dd4:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   13dd6:	2206      	movs	r2, #6
   13dd8:	a902      	add	r1, sp, #8
   13dda:	4628      	mov	r0, r5
   13ddc:	f00d fdfb 	bl	219d6 <memcmp>
   13de0:	b920      	cbnz	r0, 13dec <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   13de2:	9801      	ldr	r0, [sp, #4]
   13de4:	f007 ff02 	bl	1bbec <net_buf_unref>
		return 0U;
   13de8:	2000      	movs	r0, #0
   13dea:	e016      	b.n	13e1a <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   13dec:	4b0c      	ldr	r3, [pc, #48]	; (13e20 <bt_id_read_public_addr+0x6c>)
   13dee:	6818      	ldr	r0, [r3, #0]
   13df0:	9004      	str	r0, [sp, #16]
   13df2:	889b      	ldrh	r3, [r3, #4]
   13df4:	f8ad 3014 	strh.w	r3, [sp, #20]
   13df8:	2206      	movs	r2, #6
   13dfa:	a904      	add	r1, sp, #16
   13dfc:	4628      	mov	r0, r5
   13dfe:	f00d fdea 	bl	219d6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13e02:	2800      	cmp	r0, #0
   13e04:	d0ed      	beq.n	13de2 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   13e06:	2206      	movs	r2, #6
   13e08:	4629      	mov	r1, r5
   13e0a:	1c70      	adds	r0, r6, #1
   13e0c:	f00d fdf4 	bl	219f8 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   13e10:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13e12:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   13e14:	f007 feea 	bl	1bbec <net_buf_unref>
	return 1U;
   13e18:	2001      	movs	r0, #1
}
   13e1a:	b006      	add	sp, #24
   13e1c:	bd70      	pop	{r4, r5, r6, pc}
   13e1e:	bf00      	nop
   13e20:	000265e8 	.word	0x000265e8

00013e24 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13e24:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13e26:	4668      	mov	r0, sp
   13e28:	f7ff ffc4 	bl	13db4 <bt_id_read_public_addr>
   13e2c:	4b04      	ldr	r3, [pc, #16]	; (13e40 <bt_setup_public_id_addr+0x1c>)
   13e2e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13e30:	b118      	cbz	r0, 13e3a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13e32:	4669      	mov	r1, sp
   13e34:	2000      	movs	r0, #0
   13e36:	f7ff ff23 	bl	13c80 <id_create.constprop.0>
}
   13e3a:	b003      	add	sp, #12
   13e3c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e40:	200002d8 	.word	0x200002d8

00013e44 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e48:	4b15      	ldr	r3, [pc, #84]	; (13ea0 <bt_read_static_addr+0x5c>)
   13e4a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   13e4e:	f014 0401 	ands.w	r4, r4, #1
{
   13e52:	4607      	mov	r7, r0
   13e54:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e56:	d015      	beq.n	13e84 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13e58:	aa01      	add	r2, sp, #4
   13e5a:	2100      	movs	r1, #0
   13e5c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13e60:	f7ff fb92 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   13e64:	4605      	mov	r5, r0
   13e66:	b9c8      	cbnz	r0, 13e9c <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   13e68:	9b01      	ldr	r3, [sp, #4]
   13e6a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   13e6c:	785c      	ldrb	r4, [r3, #1]
   13e6e:	42b4      	cmp	r4, r6
   13e70:	bf28      	it	cs
   13e72:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13e74:	f04f 0816 	mov.w	r8, #22
   13e78:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   13e7a:	42a5      	cmp	r5, r4
   13e7c:	db06      	blt.n	13e8c <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   13e7e:	9801      	ldr	r0, [sp, #4]
   13e80:	f007 feb4 	bl	1bbec <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   13e84:	4620      	mov	r0, r4
   13e86:	b002      	add	sp, #8
   13e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13e8c:	fb08 7005 	mla	r0, r8, r5, r7
   13e90:	2216      	movs	r2, #22
   13e92:	4631      	mov	r1, r6
   13e94:	f00d fdb0 	bl	219f8 <memcpy>
	for (i = 0; i < cnt; i++) {
   13e98:	3501      	adds	r5, #1
   13e9a:	e7ee      	b.n	13e7a <bt_read_static_addr+0x36>
		return 0;
   13e9c:	2400      	movs	r4, #0
   13e9e:	e7f1      	b.n	13e84 <bt_read_static_addr+0x40>
   13ea0:	200002d8 	.word	0x200002d8

00013ea4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13ea6:	4e15      	ldr	r6, [pc, #84]	; (13efc <bt_setup_random_id_addr+0x58>)
   13ea8:	79f4      	ldrb	r4, [r6, #7]
{
   13eaa:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   13eac:	b9f4      	cbnz	r4, 13eec <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13eae:	2101      	movs	r1, #1
   13eb0:	a802      	add	r0, sp, #8
   13eb2:	f7ff ffc7 	bl	13e44 <bt_read_static_addr>
   13eb6:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   13eb8:	b1c0      	cbz	r0, 13eec <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13eba:	2716      	movs	r7, #22
   13ebc:	ab02      	add	r3, sp, #8
   13ebe:	b2e5      	uxtb	r5, r4
   13ec0:	fb07 3105 	mla	r1, r7, r5, r3
   13ec4:	2206      	movs	r2, #6
   13ec6:	f10d 0001 	add.w	r0, sp, #1
   13eca:	f00d fd95 	bl	219f8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   13ece:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   13ed0:	4669      	mov	r1, sp
   13ed2:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   13ed4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13ed8:	f7ff fed2 	bl	13c80 <id_create.constprop.0>
				if (err) {
   13edc:	b920      	cbnz	r0, 13ee8 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13ede:	79f2      	ldrb	r2, [r6, #7]
   13ee0:	3401      	adds	r4, #1
   13ee2:	b2e3      	uxtb	r3, r4
   13ee4:	429a      	cmp	r2, r3
   13ee6:	d8e9      	bhi.n	13ebc <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   13ee8:	b009      	add	sp, #36	; 0x24
   13eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   13eec:	2100      	movs	r1, #0
   13eee:	4608      	mov	r0, r1
}
   13ef0:	b009      	add	sp, #36	; 0x24
   13ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   13ef6:	f7ff bf13 	b.w	13d20 <bt_id_create>
   13efa:	bf00      	nop
   13efc:	200002d8 	.word	0x200002d8

00013f00 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   13f00:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   13f02:	4b0b      	ldr	r3, [pc, #44]	; (13f30 <bt_id_set_scan_own_addr+0x30>)
   13f04:	781b      	ldrb	r3, [r3, #0]
   13f06:	700b      	strb	r3, [r1, #0]
{
   13f08:	4606      	mov	r6, r0
   13f0a:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   13f0c:	f00d ffdb 	bl	21ec6 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   13f10:	b928      	cbnz	r0, 13f1e <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13f12:	f00d ffe4 	bl	21ede <bt_id_set_private_addr>
			if (err) {
   13f16:	4604      	mov	r4, r0
   13f18:	b918      	cbnz	r0, 13f22 <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   13f1a:	2301      	movs	r3, #1
   13f1c:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
   13f1e:	2400      	movs	r4, #0
   13f20:	e004      	b.n	13f2c <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
   13f22:	b91e      	cbnz	r6, 13f2c <bt_id_set_scan_own_addr+0x2c>
   13f24:	f00d ffcf 	bl	21ec6 <is_adv_using_rand_addr>
   13f28:	2800      	cmp	r0, #0
   13f2a:	d1f6      	bne.n	13f1a <bt_id_set_scan_own_addr+0x1a>
}
   13f2c:	4620      	mov	r0, r4
   13f2e:	bd70      	pop	{r4, r5, r6, pc}
   13f30:	200002d8 	.word	0x200002d8

00013f34 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13f38:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   13f3c:	7806      	ldrb	r6, [r0, #0]
{
   13f3e:	4680      	mov	r8, r0
   13f40:	460d      	mov	r5, r1
   13f42:	4691      	mov	r9, r2
   13f44:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13f46:	d02b      	beq.n	13fa0 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13f48:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14000 <bt_id_set_adv_own_addr+0xcc>
   13f4c:	b12a      	cbz	r2, 13f5a <bt_id_set_adv_own_addr+0x26>
   13f4e:	0688      	lsls	r0, r1, #26
   13f50:	d503      	bpl.n	13f5a <bt_id_set_adv_own_addr+0x26>
   13f52:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   13f56:	0659      	lsls	r1, r3, #25
   13f58:	d54f      	bpl.n	13ffa <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13f5a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   13f5e:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   13f62:	f818 3003 	ldrb.w	r3, [r8, r3]
   13f66:	2b01      	cmp	r3, #1
   13f68:	d009      	beq.n	13f7e <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13f6a:	ebaa 0606 	sub.w	r6, sl, r6
   13f6e:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13f72:	f1b9 0f00 	cmp.w	r9, #0
   13f76:	d10e      	bne.n	13f96 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13f78:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13f7a:	2400      	movs	r4, #0
   13f7c:	e008      	b.n	13f90 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13f7e:	2007      	movs	r0, #7
   13f80:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   13f84:	4440      	add	r0, r8
   13f86:	f7ff fe4d 	bl	13c24 <set_random_address>
				if (err) {
   13f8a:	4604      	mov	r4, r0
   13f8c:	2800      	cmp	r0, #0
   13f8e:	d0ec      	beq.n	13f6a <bt_id_set_adv_own_addr+0x36>
}
   13f90:	4620      	mov	r0, r4
   13f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13f96:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13f98:	bf48      	it	mi
   13f9a:	f043 0302 	orrmi.w	r3, r3, #2
   13f9e:	e7eb      	b.n	13f78 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13fa0:	f011 0504 	ands.w	r5, r1, #4
   13fa4:	d014      	beq.n	13fd0 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13fa6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 14000 <bt_id_set_adv_own_addr+0xcc>
   13faa:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   13fae:	00f5      	lsls	r5, r6, #3
   13fb0:	f818 3003 	ldrb.w	r3, [r8, r3]
   13fb4:	2b01      	cmp	r3, #1
   13fb6:	d106      	bne.n	13fc6 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13fb8:	2007      	movs	r0, #7
   13fba:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   13fbe:	4440      	add	r0, r8
   13fc0:	f7ff fe30 	bl	13c24 <set_random_address>
   13fc4:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
   13fc6:	1bad      	subs	r5, r5, r6
   13fc8:	f818 3005 	ldrb.w	r3, [r8, r5]
   13fcc:	703b      	strb	r3, [r7, #0]
   13fce:	e7df      	b.n	13f90 <bt_id_set_adv_own_addr+0x5c>
   13fd0:	480c      	ldr	r0, [pc, #48]	; (14004 <bt_id_set_adv_own_addr+0xd0>)
   13fd2:	f00d ff72 	bl	21eba <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13fd6:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13fd8:	f3c0 1680 	ubfx	r6, r0, #6, #1
   13fdc:	d502      	bpl.n	13fe4 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   13fde:	4628      	mov	r0, r5
   13fe0:	f00e f908 	bl	221f4 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   13fe4:	4640      	mov	r0, r8
   13fe6:	f00d ff8c 	bl	21f02 <bt_id_set_adv_private_addr>
   13fea:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13fec:	2001      	movs	r0, #1
   13fee:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
   13ff0:	2e00      	cmp	r6, #0
   13ff2:	d0cd      	beq.n	13f90 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   13ff4:	f00e f8fe 	bl	221f4 <bt_le_scan_set_enable>
		if (err) {
   13ff8:	e7ca      	b.n	13f90 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
   13ffa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   13ffe:	e7c7      	b.n	13f90 <bt_id_set_adv_own_addr+0x5c>
   14000:	200002d8 	.word	0x200002d8
   14004:	200003a4 	.word	0x200003a4

00014008 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14008:	6843      	ldr	r3, [r0, #4]
{
   1400a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1400c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1400e:	0558      	lsls	r0, r3, #21
   14010:	d502      	bpl.n	14018 <valid_adv_param+0x10>
		return false;
   14012:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   14014:	b003      	add	sp, #12
   14016:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14018:	6922      	ldr	r2, [r4, #16]
   1401a:	b10a      	cbz	r2, 14020 <valid_adv_param+0x18>
   1401c:	07d9      	lsls	r1, r3, #31
   1401e:	d5f8      	bpl.n	14012 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14020:	4d1a      	ldr	r5, [pc, #104]	; (1408c <valid_adv_param+0x84>)
   14022:	7820      	ldrb	r0, [r4, #0]
   14024:	79eb      	ldrb	r3, [r5, #7]
   14026:	4283      	cmp	r3, r0
   14028:	d9f3      	bls.n	14012 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1402a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1402e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14030:	2207      	movs	r2, #7
   14032:	4669      	mov	r1, sp
   14034:	4428      	add	r0, r5
   14036:	9300      	str	r3, [sp, #0]
   14038:	f8cd 3003 	str.w	r3, [sp, #3]
   1403c:	f00d fccb 	bl	219d6 <memcmp>
	if (param->id >= bt_dev.id_count ||
   14040:	2800      	cmp	r0, #0
   14042:	d0e6      	beq.n	14012 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14044:	6860      	ldr	r0, [r4, #4]
   14046:	07c2      	lsls	r2, r0, #31
   14048:	d406      	bmi.n	14058 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1404a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1404e:	2b08      	cmp	r3, #8
   14050:	d802      	bhi.n	14058 <valid_adv_param+0x50>
   14052:	68a3      	ldr	r3, [r4, #8]
   14054:	2b9f      	cmp	r3, #159	; 0x9f
   14056:	d9dc      	bls.n	14012 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14058:	f010 0f30 	tst.w	r0, #48	; 0x30
   1405c:	d002      	beq.n	14064 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1405e:	6923      	ldr	r3, [r4, #16]
   14060:	2b00      	cmp	r3, #0
   14062:	d0d6      	beq.n	14012 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14064:	06c3      	lsls	r3, r0, #27
   14066:	d401      	bmi.n	1406c <valid_adv_param+0x64>
   14068:	6923      	ldr	r3, [r4, #16]
   1406a:	b943      	cbnz	r3, 1407e <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   1406c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14070:	429a      	cmp	r2, r3
   14072:	d8ce      	bhi.n	14012 <valid_adv_param+0xa>
   14074:	2a1f      	cmp	r2, #31
   14076:	d9cc      	bls.n	14012 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1407c:	d8c9      	bhi.n	14012 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1407e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14082:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14086:	bf18      	it	ne
   14088:	2001      	movne	r0, #1
   1408a:	e7c3      	b.n	14014 <valid_adv_param+0xc>
   1408c:	200002d8 	.word	0x200002d8

00014090 <bt_le_adv_lookup_legacy>:
}
   14090:	4800      	ldr	r0, [pc, #0]	; (14094 <bt_le_adv_lookup_legacy+0x4>)
   14092:	4770      	bx	lr
   14094:	200002f0 	.word	0x200002f0

00014098 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1409c:	690e      	ldr	r6, [r1, #16]
{
   1409e:	b08d      	sub	sp, #52	; 0x34
	bool dir_adv = (param->peer != NULL), scannable = false;
   140a0:	f1b6 0900 	subs.w	r9, r6, #0
{
   140a4:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   140a6:	487b      	ldr	r0, [pc, #492]	; (14294 <bt_le_adv_start_legacy+0x1fc>)
	bool dir_adv = (param->peer != NULL), scannable = false;
   140a8:	bf18      	it	ne
   140aa:	f04f 0901 	movne.w	r9, #1
   140ae:	f00d ff54 	bl	21f5a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   140b2:	0747      	lsls	r7, r0, #29
{
   140b4:	460c      	mov	r4, r1
   140b6:	4693      	mov	fp, r2
   140b8:	469a      	mov	sl, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   140ba:	f140 80e2 	bpl.w	14282 <bt_le_adv_start_legacy+0x1ea>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   140be:	4608      	mov	r0, r1
   140c0:	f7ff ffa2 	bl	14008 <valid_adv_param>
   140c4:	b928      	cbnz	r0, 140d2 <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
   140c6:	f06f 0315 	mvn.w	r3, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   140ca:	4618      	mov	r0, r3
   140cc:	b00d      	add	sp, #52	; 0x34
   140ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   140d2:	4620      	mov	r0, r4
   140d4:	f7ff fe16 	bl	13d04 <bt_id_adv_random_addr_check>
   140d8:	4680      	mov	r8, r0
   140da:	2800      	cmp	r0, #0
   140dc:	d0f3      	beq.n	140c6 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   140de:	f105 0710 	add.w	r7, r5, #16
   140e2:	4638      	mov	r0, r7
   140e4:	f00d ff39 	bl	21f5a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   140e8:	f3c0 1180 	ubfx	r1, r0, #6, #1
   140ec:	0640      	lsls	r0, r0, #25
   140ee:	f100 80cb 	bmi.w	14288 <bt_le_adv_start_legacy+0x1f0>
	(void)memset(&set_param, 0, sizeof(set_param));
   140f2:	220f      	movs	r2, #15
   140f4:	a808      	add	r0, sp, #32
   140f6:	9105      	str	r1, [sp, #20]
   140f8:	f00d fc89 	bl	21a0e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   140fc:	68a3      	ldr	r3, [r4, #8]
   140fe:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14102:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14104:	68e3      	ldr	r3, [r4, #12]
   14106:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1410a:	f00d ff17 	bl	21f3c <get_adv_channel_map>
	if (adv->id != param->id) {
   1410e:	782a      	ldrb	r2, [r5, #0]
   14110:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   14112:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14114:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   14118:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1411a:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   1411e:	d004      	beq.n	1412a <bt_le_adv_start_legacy+0x92>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14120:	485c      	ldr	r0, [pc, #368]	; (14294 <bt_le_adv_start_legacy+0x1fc>)
   14122:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   14126:	f00d ff1e 	bl	21f66 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1412a:	4a5b      	ldr	r2, [pc, #364]	; (14298 <bt_le_adv_start_legacy+0x200>)
	adv->id = param->id;
   1412c:	7823      	ldrb	r3, [r4, #0]
   1412e:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14130:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14134:	6861      	ldr	r1, [r4, #4]
   14136:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1413a:	464a      	mov	r2, r9
   1413c:	4628      	mov	r0, r5
   1413e:	f7ff fef9 	bl	13f34 <bt_id_set_adv_own_addr>
	if (err) {
   14142:	4603      	mov	r3, r0
   14144:	2800      	cmp	r0, #0
   14146:	d1c0      	bne.n	140ca <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14148:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   1414c:	2e00      	cmp	r6, #0
   1414e:	d06e      	beq.n	1422e <bt_le_adv_start_legacy+0x196>
	memcpy(dst, src, sizeof(*dst));
   14150:	6921      	ldr	r1, [r4, #16]
   14152:	2207      	movs	r2, #7
   14154:	f00d fc50 	bl	219f8 <memcpy>
	name_type = get_adv_name_type_param(param);
   14158:	4620      	mov	r0, r4
   1415a:	f00e f802 	bl	22162 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1415e:	6863      	ldr	r3, [r4, #4]
   14160:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   14162:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14164:	d56c      	bpl.n	14240 <bt_le_adv_start_legacy+0x1a8>
		if (dir_adv) {
   14166:	2e00      	cmp	r6, #0
   14168:	d067      	beq.n	1423a <bt_le_adv_start_legacy+0x1a2>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1416a:	f013 0f10 	tst.w	r3, #16
   1416e:	bf14      	ite	ne
   14170:	2304      	movne	r3, #4
   14172:	2301      	moveq	r3, #1
   14174:	6921      	ldr	r1, [r4, #16]
   14176:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1417a:	2207      	movs	r2, #7
   1417c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14180:	f00d fc3a 	bl	219f8 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   14184:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14188:	210f      	movs	r1, #15
   1418a:	f242 0006 	movw	r0, #8198	; 0x2006
   1418e:	f7ff f9c1 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   14192:	4603      	mov	r3, r0
   14194:	2800      	cmp	r0, #0
   14196:	d07a      	beq.n	1428e <bt_le_adv_start_legacy+0x1f6>
   14198:	220f      	movs	r2, #15
   1419a:	a908      	add	r1, sp, #32
   1419c:	3008      	adds	r0, #8
   1419e:	9305      	str	r3, [sp, #20]
   141a0:	f010 fe44 	bl	24e2c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   141a4:	9b05      	ldr	r3, [sp, #20]
   141a6:	2200      	movs	r2, #0
   141a8:	4619      	mov	r1, r3
   141aa:	f242 0006 	movw	r0, #8198	; 0x2006
   141ae:	f7ff f9eb 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   141b2:	4603      	mov	r3, r0
   141b4:	2800      	cmp	r0, #0
   141b6:	d188      	bne.n	140ca <bt_le_adv_start_legacy+0x32>
	if (!dir_adv) {
   141b8:	2e00      	cmp	r6, #0
   141ba:	d052      	beq.n	14262 <bt_le_adv_start_legacy+0x1ca>
	return bt_le_adv_set_enable_legacy(adv, enable);
   141bc:	2101      	movs	r1, #1
   141be:	4628      	mov	r0, r5
   141c0:	f00d ffdf 	bl	22182 <bt_le_adv_set_enable_legacy>
	if (err) {
   141c4:	4603      	mov	r3, r0
   141c6:	2800      	cmp	r0, #0
   141c8:	f47f af7f 	bne.w	140ca <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   141cc:	2e00      	cmp	r6, #0
   141ce:	d156      	bne.n	1427e <bt_le_adv_start_legacy+0x1e6>
   141d0:	6862      	ldr	r2, [r4, #4]
   141d2:	f082 0202 	eor.w	r2, r2, #2
   141d6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   141da:	210d      	movs	r1, #13
   141dc:	4638      	mov	r0, r7
   141de:	9305      	str	r3, [sp, #20]
   141e0:	f00d ff31 	bl	22046 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   141e4:	f109 33ff 	add.w	r3, r9, #4294967295
   141e8:	425a      	negs	r2, r3
   141ea:	415a      	adcs	r2, r3
   141ec:	2107      	movs	r1, #7
   141ee:	4638      	mov	r0, r7
   141f0:	f00d ff29 	bl	22046 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   141f4:	f1a9 0102 	sub.w	r1, r9, #2
   141f8:	424a      	negs	r2, r1
   141fa:	414a      	adcs	r2, r1
   141fc:	4638      	mov	r0, r7
   141fe:	2108      	movs	r1, #8
   14200:	f00d ff21 	bl	22046 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   14204:	6862      	ldr	r2, [r4, #4]
   14206:	2109      	movs	r1, #9
   14208:	f002 0201 	and.w	r2, r2, #1
   1420c:	4638      	mov	r0, r7
   1420e:	f00d ff1a 	bl	22046 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14212:	4642      	mov	r2, r8
   14214:	210a      	movs	r1, #10
   14216:	4638      	mov	r0, r7
   14218:	f00d ff15 	bl	22046 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1421c:	6862      	ldr	r2, [r4, #4]
   1421e:	210c      	movs	r1, #12
   14220:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14224:	4638      	mov	r0, r7
   14226:	f00d ff0e 	bl	22046 <atomic_set_bit_to>
	return 0;
   1422a:	9b05      	ldr	r3, [sp, #20]
   1422c:	e74d      	b.n	140ca <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1422e:	9606      	str	r6, [sp, #24]
   14230:	2207      	movs	r2, #7
   14232:	f8cd 601b 	str.w	r6, [sp, #27]
   14236:	a906      	add	r1, sp, #24
   14238:	e78c      	b.n	14154 <bt_le_adv_start_legacy+0xbc>
			set_param.type = BT_HCI_ADV_IND;
   1423a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   1423e:	e7a3      	b.n	14188 <bt_le_adv_start_legacy+0xf0>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   14240:	0598      	lsls	r0, r3, #22
   14242:	d404      	bmi.n	1424e <bt_le_adv_start_legacy+0x1b6>
   14244:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14246:	b913      	cbnz	r3, 1424e <bt_le_adv_start_legacy+0x1b6>
   14248:	f1b9 0f02 	cmp.w	r9, #2
   1424c:	d103      	bne.n	14256 <bt_le_adv_start_legacy+0x1be>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1424e:	2302      	movs	r3, #2
   14250:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14254:	e798      	b.n	14188 <bt_le_adv_start_legacy+0xf0>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14256:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14258:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1425c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14260:	e792      	b.n	14188 <bt_le_adv_start_legacy+0xf0>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14262:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14264:	9300      	str	r3, [sp, #0]
   14266:	e9cd 8901 	strd	r8, r9, [sp, #4]
   1426a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1426c:	4652      	mov	r2, sl
   1426e:	4659      	mov	r1, fp
   14270:	4628      	mov	r0, r5
   14272:	f00d feff 	bl	22074 <le_adv_update.constprop.0>
		if (err) {
   14276:	4603      	mov	r3, r0
   14278:	2800      	cmp	r0, #0
   1427a:	d09f      	beq.n	141bc <bt_le_adv_start_legacy+0x124>
   1427c:	e725      	b.n	140ca <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1427e:	4602      	mov	r2, r0
   14280:	e7ab      	b.n	141da <bt_le_adv_start_legacy+0x142>
		return -EAGAIN;
   14282:	f06f 030a 	mvn.w	r3, #10
   14286:	e720      	b.n	140ca <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
   14288:	f06f 0377 	mvn.w	r3, #119	; 0x77
   1428c:	e71d      	b.n	140ca <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
   1428e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14292:	e71a      	b.n	140ca <bt_le_adv_start_legacy+0x32>
   14294:	200003a4 	.word	0x200003a4
   14298:	200002d8 	.word	0x200002d8

0001429c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1429c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1429e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   142a0:	9a06      	ldr	r2, [sp, #24]
{
   142a2:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   142a4:	e9cd 3200 	strd	r3, r2, [sp]
   142a8:	462b      	mov	r3, r5
   142aa:	460a      	mov	r2, r1
   142ac:	4601      	mov	r1, r0
   142ae:	4811      	ldr	r0, [pc, #68]	; (142f4 <bt_le_adv_start+0x58>)
   142b0:	f7ff fef2 	bl	14098 <bt_le_adv_start_legacy>
   142b4:	4621      	mov	r1, r4
   142b6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   142b8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   142ba:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   142be:	429d      	cmp	r5, r3
   142c0:	d102      	bne.n	142c8 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   142c2:	4630      	mov	r0, r6
   142c4:	b002      	add	sp, #8
   142c6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   142c8:	880a      	ldrh	r2, [r1, #0]
   142ca:	4282      	cmp	r2, r0
   142cc:	d104      	bne.n	142d8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   142ce:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   142d0:	b112      	cbz	r2, 142d8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   142d2:	7812      	ldrb	r2, [r2, #0]
   142d4:	07d2      	lsls	r2, r2, #31
   142d6:	d402      	bmi.n	142de <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   142d8:	3301      	adds	r3, #1
   142da:	3108      	adds	r1, #8
   142dc:	e7ef      	b.n	142be <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   142de:	4906      	ldr	r1, [pc, #24]	; (142f8 <bt_le_adv_start+0x5c>)
   142e0:	4806      	ldr	r0, [pc, #24]	; (142fc <bt_le_adv_start+0x60>)
   142e2:	f011 fc69 	bl	25bb8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   142e6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   142ea:	2300      	movs	r3, #0
   142ec:	4803      	ldr	r0, [pc, #12]	; (142fc <bt_le_adv_start+0x60>)
   142ee:	f00a fc97 	bl	1ec20 <k_work_reschedule>
   142f2:	e7e6      	b.n	142c2 <bt_le_adv_start+0x26>
   142f4:	200002f0 	.word	0x200002f0
   142f8:	000221d3 	.word	0x000221d3
   142fc:	20000308 	.word	0x20000308

00014300 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   14300:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   14302:	4813      	ldr	r0, [pc, #76]	; (14350 <bt_le_adv_stop+0x50>)
   14304:	f00d ff62 	bl	221cc <bt_le_lim_adv_cancel_timeout>
   14308:	4812      	ldr	r0, [pc, #72]	; (14354 <bt_le_adv_stop+0x54>)
   1430a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1430e:	f00d fe2a 	bl	21f66 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14312:	4810      	ldr	r0, [pc, #64]	; (14354 <bt_le_adv_stop+0x54>)
   14314:	f00d fe21 	bl	21f5a <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14318:	0642      	lsls	r2, r0, #25
   1431a:	d402      	bmi.n	14322 <bt_le_adv_stop+0x22>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   1431c:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1431e:	4620      	mov	r0, r4
   14320:	bd10      	pop	{r4, pc}
		err = bt_le_adv_set_enable_legacy(adv, false);
   14322:	480b      	ldr	r0, [pc, #44]	; (14350 <bt_le_adv_stop+0x50>)
   14324:	2100      	movs	r1, #0
   14326:	f00d ff2c 	bl	22182 <bt_le_adv_set_enable_legacy>
		if (err) {
   1432a:	4604      	mov	r4, r0
   1432c:	2800      	cmp	r0, #0
   1432e:	d1f6      	bne.n	1431e <bt_le_adv_stop+0x1e>
   14330:	4809      	ldr	r0, [pc, #36]	; (14358 <bt_le_adv_stop+0x58>)
   14332:	f00d fe12 	bl	21f5a <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   14336:	0643      	lsls	r3, r0, #25
   14338:	d5f0      	bpl.n	1431c <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1433a:	4620      	mov	r0, r4
   1433c:	f00d ff5a 	bl	221f4 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   14340:	4620      	mov	r0, r4
   14342:	f00d fdcc 	bl	21ede <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   14346:	2001      	movs	r0, #1
   14348:	f00d ff54 	bl	221f4 <bt_le_scan_set_enable>
   1434c:	e7e7      	b.n	1431e <bt_le_adv_stop+0x1e>
   1434e:	bf00      	nop
   14350:	200002f0 	.word	0x200002f0
   14354:	20000300 	.word	0x20000300
   14358:	200003a4 	.word	0x200003a4

0001435c <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   1435c:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1435e:	2102      	movs	r1, #2
{
   14360:	b087      	sub	sp, #28
   14362:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   14364:	f242 000c 	movw	r0, #8204	; 0x200c
   14368:	f7ff f8d4 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   1436c:	4605      	mov	r5, r0
   1436e:	b318      	cbz	r0, 143b8 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
   14370:	2102      	movs	r1, #2
   14372:	3008      	adds	r0, #8
   14374:	f010 fd54 	bl	24e20 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   14378:	2c01      	cmp	r4, #1
   1437a:	d11b      	bne.n	143b4 <bt_le_scan_set_enable_legacy+0x58>
   1437c:	f3bf 8f5b 	dmb	ish
   14380:	4b0f      	ldr	r3, [pc, #60]	; (143c0 <bt_le_scan_set_enable_legacy+0x64>)
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14388:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   1438c:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1438e:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   14390:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   14392:	425c      	negs	r4, r3
   14394:	415c      	adcs	r4, r3
   14396:	4a0a      	ldr	r2, [pc, #40]	; (143c0 <bt_le_scan_set_enable_legacy+0x64>)
   14398:	9400      	str	r4, [sp, #0]
   1439a:	a903      	add	r1, sp, #12
   1439c:	4628      	mov	r0, r5
   1439e:	2306      	movs	r3, #6
   143a0:	f7ff f8a6 	bl	134f0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   143a4:	2200      	movs	r2, #0
   143a6:	4629      	mov	r1, r5
   143a8:	f242 000c 	movw	r0, #8204	; 0x200c
   143ac:	f7ff f8ec 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   143b0:	b007      	add	sp, #28
   143b2:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   143b4:	2300      	movs	r3, #0
   143b6:	e7e9      	b.n	1438c <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
   143b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   143bc:	e7f8      	b.n	143b0 <bt_le_scan_set_enable_legacy+0x54>
   143be:	bf00      	nop
   143c0:	200003a4 	.word	0x200003a4

000143c4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   143c4:	4b01      	ldr	r3, [pc, #4]	; (143cc <bt_scan_reset+0x8>)
   143c6:	2200      	movs	r2, #0
   143c8:	601a      	str	r2, [r3, #0]
}
   143ca:	4770      	bx	lr
   143cc:	20002440 	.word	0x20002440

000143d0 <bt_le_scan_update>:
   143d0:	4b0a      	ldr	r3, [pc, #40]	; (143fc <bt_le_scan_update+0x2c>)
   143d2:	f3bf 8f5b 	dmb	ish
   143d6:	681a      	ldr	r2, [r3, #0]
   143d8:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   143dc:	f3c2 10c0 	ubfx	r0, r2, #7, #1
   143e0:	0612      	lsls	r2, r2, #24
   143e2:	d408      	bmi.n	143f6 <bt_le_scan_update+0x26>
   143e4:	f3bf 8f5b 	dmb	ish
   143e8:	681b      	ldr	r3, [r3, #0]
   143ea:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   143ee:	065b      	lsls	r3, r3, #25
   143f0:	d501      	bpl.n	143f6 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
   143f2:	f7ff bfb3 	b.w	1435c <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   143f6:	2000      	movs	r0, #0
   143f8:	4770      	bx	lr
   143fa:	bf00      	nop
   143fc:	200003a4 	.word	0x200003a4

00014400 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   14400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   14404:	f100 0808 	add.w	r8, r0, #8
   14408:	b08b      	sub	sp, #44	; 0x2c
   1440a:	4604      	mov	r4, r0
   1440c:	4640      	mov	r0, r8
   1440e:	f010 fd7f 	bl	24f10 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   14412:	f8df b144 	ldr.w	fp, [pc, #324]	; 14558 <bt_hci_le_adv_report+0x158>
   14416:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   14418:	b916      	cbnz	r6, 14420 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1441a:	b00b      	add	sp, #44	; 0x2c
   1441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   14420:	89a3      	ldrh	r3, [r4, #12]
   14422:	2b08      	cmp	r3, #8
   14424:	d9f9      	bls.n	1441a <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
   14426:	2109      	movs	r1, #9
   14428:	4640      	mov	r0, r8
   1442a:	f010 fd69 	bl	24f00 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   1442e:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   14432:	237f      	movs	r3, #127	; 0x7f
   14434:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   14438:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1443c:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   1443e:	7a5b      	ldrb	r3, [r3, #9]
   14440:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   14444:	23ff      	movs	r3, #255	; 0xff
   14446:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   1444a:	2300      	movs	r3, #0
   1444c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   14450:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
   14454:	7802      	ldrb	r2, [r0, #0]
   14456:	f88d 201f 	strb.w	r2, [sp, #31]
   1445a:	2a04      	cmp	r2, #4
   1445c:	bf9c      	itt	ls
   1445e:	4b3f      	ldrls	r3, [pc, #252]	; (1455c <bt_hci_le_adv_report+0x15c>)
   14460:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   14462:	f8ad 3020 	strh.w	r3, [sp, #32]
   14466:	4b3e      	ldr	r3, [pc, #248]	; (14560 <bt_hci_le_adv_report+0x160>)
   14468:	f3bf 8f5b 	dmb	ish
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   14472:	061a      	lsls	r2, r3, #24
   14474:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   14476:	f100 0101 	add.w	r1, r0, #1
   1447a:	fa1f f989 	uxth.w	r9, r9
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1447e:	d503      	bpl.n	14488 <bt_hci_le_adv_report+0x88>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   14480:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   14484:	075b      	lsls	r3, r3, #29
   14486:	d45f      	bmi.n	14548 <bt_hci_le_adv_report+0x148>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   14488:	786b      	ldrb	r3, [r5, #1]
   1448a:	1e9a      	subs	r2, r3, #2
   1448c:	2a01      	cmp	r2, #1
   1448e:	d847      	bhi.n	14520 <bt_hci_le_adv_report+0x120>
   14490:	2207      	movs	r2, #7
   14492:	a802      	add	r0, sp, #8
   14494:	f00d fab0 	bl	219f8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14498:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1449c:	3b02      	subs	r3, #2
   1449e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (scan_dev_found_cb) {
   144a2:	f8db 3000 	ldr.w	r3, [fp]
   144a6:	b1a3      	cbz	r3, 144d2 <bt_hci_le_adv_report+0xd2>
	state->offset = net_buf_simple_headroom(buf);
   144a8:	4640      	mov	r0, r8
   144aa:	f010 fd62 	bl	24f72 <net_buf_simple_headroom>
	state->len = buf->len;
   144ae:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   144b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   144b4:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   144b8:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
   144bc:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   144c0:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   144c2:	4643      	mov	r3, r8
   144c4:	a802      	add	r0, sp, #8
   144c6:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   144c8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   144ca:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   144cc:	fa10 f08a 	uxtah	r0, r0, sl
   144d0:	60a0      	str	r0, [r4, #8]
	info->addr = &id_addr;
   144d2:	ab02      	add	r3, sp, #8
   144d4:	9306      	str	r3, [sp, #24]
   144d6:	4b23      	ldr	r3, [pc, #140]	; (14564 <bt_hci_le_adv_report+0x164>)
   144d8:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   144da:	2a00      	cmp	r2, #0
   144dc:	d032      	beq.n	14544 <bt_hci_le_adv_report+0x144>
	return node->next;
   144de:	f852 7908 	ldr.w	r7, [r2], #-8
   144e2:	b107      	cbz	r7, 144e6 <bt_hci_le_adv_report+0xe6>
   144e4:	3f08      	subs	r7, #8
		if (listener->recv) {
   144e6:	6813      	ldr	r3, [r2, #0]
   144e8:	9201      	str	r2, [sp, #4]
   144ea:	b193      	cbz	r3, 14512 <bt_hci_le_adv_report+0x112>
	state->offset = net_buf_simple_headroom(buf);
   144ec:	4640      	mov	r0, r8
   144ee:	f010 fd40 	bl	24f72 <net_buf_simple_headroom>
			listener->recv(info, buf);
   144f2:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
   144f4:	89a3      	ldrh	r3, [r4, #12]
   144f6:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   144f8:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   144fc:	4682      	mov	sl, r0
			listener->recv(info, buf);
   144fe:	4641      	mov	r1, r8
   14500:	a806      	add	r0, sp, #24
	state->len = buf->len;
   14502:	9300      	str	r3, [sp, #0]
   14504:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   14506:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14508:	9b00      	ldr	r3, [sp, #0]
   1450a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1450c:	fa10 f08a 	uxtah	r0, r0, sl
   14510:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14512:	b1bf      	cbz	r7, 14544 <bt_hci_le_adv_report+0x144>
   14514:	68bb      	ldr	r3, [r7, #8]
   14516:	b103      	cbz	r3, 1451a <bt_hci_le_adv_report+0x11a>
   14518:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   1451a:	463a      	mov	r2, r7
   1451c:	461f      	mov	r7, r3
   1451e:	e7e2      	b.n	144e6 <bt_hci_le_adv_report+0xe6>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   14520:	2bff      	cmp	r3, #255	; 0xff
   14522:	d109      	bne.n	14538 <bt_hci_le_adv_report+0x138>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   14524:	2300      	movs	r3, #0
   14526:	9304      	str	r3, [sp, #16]
   14528:	2207      	movs	r2, #7
   1452a:	f8cd 3013 	str.w	r3, [sp, #19]
   1452e:	a904      	add	r1, sp, #16
   14530:	a802      	add	r0, sp, #8
   14532:	f00d fa61 	bl	219f8 <memcpy>
}
   14536:	e7b4      	b.n	144a2 <bt_hci_le_adv_report+0xa2>
		bt_addr_le_copy(&id_addr,
   14538:	2000      	movs	r0, #0
   1453a:	f00d fcce 	bl	21eda <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   1453e:	2207      	movs	r2, #7
   14540:	4601      	mov	r1, r0
   14542:	e7f5      	b.n	14530 <bt_hci_le_adv_report+0x130>
	info->addr = NULL;
   14544:	2300      	movs	r3, #0
   14546:	9306      	str	r3, [sp, #24]
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   14548:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   1454a:	4640      	mov	r0, r8
   1454c:	3101      	adds	r1, #1
   1454e:	3e01      	subs	r6, #1
   14550:	f010 fcce 	bl	24ef0 <net_buf_simple_pull>
   14554:	b2f6      	uxtb	r6, r6
   14556:	e75f      	b.n	14418 <bt_hci_le_adv_report+0x18>
   14558:	20002440 	.word	0x20002440
   1455c:	0002757e 	.word	0x0002757e
   14560:	200003a4 	.word	0x200003a4
   14564:	20002438 	.word	0x20002438

00014568 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   14568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1456c:	4c62      	ldr	r4, [pc, #392]	; (146f8 <bt_le_scan_start+0x190>)
   1456e:	f3bf 8f5b 	dmb	ish
   14572:	6823      	ldr	r3, [r4, #0]
   14574:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14578:	f013 0f04 	tst.w	r3, #4
{
   1457c:	4605      	mov	r5, r0
   1457e:	460f      	mov	r7, r1
   14580:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14582:	f000 80b6 	beq.w	146f2 <bt_le_scan_start+0x18a>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   14586:	7802      	ldrb	r2, [r0, #0]
   14588:	2a01      	cmp	r2, #1
   1458a:	d905      	bls.n	14598 <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   1458c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   14590:	4620      	mov	r0, r4
   14592:	b003      	add	sp, #12
   14594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   14598:	6843      	ldr	r3, [r0, #4]
   1459a:	f033 030f 	bics.w	r3, r3, #15
   1459e:	d1f5      	bne.n	1458c <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   145a0:	8900      	ldrh	r0, [r0, #8]
   145a2:	1f03      	subs	r3, r0, #4
   145a4:	b29b      	uxth	r3, r3
   145a6:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
   145aa:	4563      	cmp	r3, ip
   145ac:	d8ee      	bhi.n	1458c <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
   145ae:	8969      	ldrh	r1, [r5, #10]
   145b0:	1f0b      	subs	r3, r1, #4
   145b2:	b29b      	uxth	r3, r3
   145b4:	4563      	cmp	r3, ip
   145b6:	d8e9      	bhi.n	1458c <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
   145b8:	4288      	cmp	r0, r1
   145ba:	d3e7      	bcc.n	1458c <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   145bc:	b98a      	cbnz	r2, 145e2 <bt_le_scan_start+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145be:	f3bf 8f5b 	dmb	ish
   145c2:	e856 0f00 	ldrex	r0, [r6]
   145c6:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   145ca:	e846 3200 	strex	r2, r3, [r6]
   145ce:	2a00      	cmp	r2, #0
   145d0:	d1f7      	bne.n	145c2 <bt_le_scan_start+0x5a>
   145d2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   145d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   145da:	d007      	beq.n	145ec <bt_le_scan_start+0x84>
		return -EALREADY;
   145dc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   145e0:	e7d6      	b.n	14590 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
   145e2:	f00d fca0 	bl	21f26 <bt_id_scan_random_addr_check>
   145e6:	2800      	cmp	r0, #0
   145e8:	d1e9      	bne.n	145be <bt_le_scan_start+0x56>
   145ea:	e7cf      	b.n	1458c <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   145ec:	f3bf 8f5b 	dmb	ish
   145f0:	6823      	ldr	r3, [r4, #0]
   145f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   145f6:	0659      	lsls	r1, r3, #25
   145f8:	d509      	bpl.n	1460e <bt_le_scan_start+0xa6>
	return bt_le_scan_set_enable_legacy(enable);
   145fa:	f7ff feaf 	bl	1435c <bt_le_scan_set_enable_legacy>
		if (err) {
   145fe:	4604      	mov	r4, r0
   14600:	b128      	cbz	r0, 1460e <bt_le_scan_start+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14602:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14606:	483c      	ldr	r0, [pc, #240]	; (146f8 <bt_le_scan_start+0x190>)
   14608:	f00d fde5 	bl	221d6 <atomic_and>
		return err;
   1460c:	e7c0      	b.n	14590 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   1460e:	686b      	ldr	r3, [r5, #4]
	if (val) {
   14610:	07da      	lsls	r2, r3, #31
   14612:	d515      	bpl.n	14640 <bt_le_scan_start+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14614:	f3bf 8f5b 	dmb	ish
   14618:	e856 3f00 	ldrex	r3, [r6]
   1461c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14620:	e846 3200 	strex	r2, r3, [r6]
   14624:	2a00      	cmp	r2, #0
   14626:	d1f7      	bne.n	14618 <bt_le_scan_start+0xb0>
   14628:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   1462c:	89ac      	ldrh	r4, [r5, #12]
   1462e:	b16c      	cbz	r4, 1464c <bt_le_scan_start+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14630:	4831      	ldr	r0, [pc, #196]	; (146f8 <bt_le_scan_start+0x190>)
   14632:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14636:	f00d fdce 	bl	221d6 <atomic_and>
			return -ENOTSUP;
   1463a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1463e:	e7a7      	b.n	14590 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14640:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14644:	482c      	ldr	r0, [pc, #176]	; (146f8 <bt_le_scan_start+0x190>)
   14646:	f00d fdc6 	bl	221d6 <atomic_and>
   1464a:	e7ef      	b.n	1462c <bt_le_scan_start+0xc4>
		err = start_le_scan_legacy(param->type, param->interval,
   1464c:	f895 8000 	ldrb.w	r8, [r5]
   14650:	f8b5 9008 	ldrh.w	r9, [r5, #8]
   14654:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
   14656:	4621      	mov	r1, r4
   14658:	2207      	movs	r2, #7
   1465a:	4668      	mov	r0, sp
   1465c:	f00d f9d7 	bl	21a0e <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14660:	f108 33ff 	add.w	r3, r8, #4294967295
   14664:	4258      	negs	r0, r3
   14666:	f10d 0105 	add.w	r1, sp, #5
   1466a:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1466c:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
   14670:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   14674:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   14678:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1467c:	f7ff fc40 	bl	13f00 <bt_id_set_scan_own_addr>
	if (err) {
   14680:	4604      	mov	r4, r0
   14682:	2800      	cmp	r0, #0
   14684:	d1bd      	bne.n	14602 <bt_le_scan_start+0x9a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   14686:	2107      	movs	r1, #7
   14688:	f242 000b 	movw	r0, #8203	; 0x200b
   1468c:	f7fe ff42 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   14690:	4605      	mov	r5, r0
   14692:	b358      	cbz	r0, 146ec <bt_le_scan_start+0x184>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14694:	2207      	movs	r2, #7
   14696:	4669      	mov	r1, sp
   14698:	3008      	adds	r0, #8
   1469a:	f010 fbc7 	bl	24e2c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1469e:	4622      	mov	r2, r4
   146a0:	4629      	mov	r1, r5
   146a2:	f242 000b 	movw	r0, #8203	; 0x200b
   146a6:	f7fe ff6f 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   146aa:	4604      	mov	r4, r0
   146ac:	2800      	cmp	r0, #0
   146ae:	d1a8      	bne.n	14602 <bt_le_scan_start+0x9a>
	return bt_le_scan_set_enable_legacy(enable);
   146b0:	2001      	movs	r0, #1
   146b2:	f7ff fe53 	bl	1435c <bt_le_scan_set_enable_legacy>
	if (err) {
   146b6:	4604      	mov	r4, r0
   146b8:	2800      	cmp	r0, #0
   146ba:	d1a2      	bne.n	14602 <bt_le_scan_start+0x9a>
	if (val) {
   146bc:	f1b8 0f01 	cmp.w	r8, #1
   146c0:	d10e      	bne.n	146e0 <bt_le_scan_start+0x178>
   146c2:	f3bf 8f5b 	dmb	ish
   146c6:	e856 3f00 	ldrex	r3, [r6]
   146ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   146ce:	e846 3200 	strex	r2, r3, [r6]
   146d2:	2a00      	cmp	r2, #0
   146d4:	d1f7      	bne.n	146c6 <bt_le_scan_start+0x15e>
   146d6:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
   146da:	4b08      	ldr	r3, [pc, #32]	; (146fc <bt_le_scan_start+0x194>)
   146dc:	601f      	str	r7, [r3, #0]
	return 0;
   146de:	e757      	b.n	14590 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   146e0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   146e4:	4804      	ldr	r0, [pc, #16]	; (146f8 <bt_le_scan_start+0x190>)
   146e6:	f00d fd76 	bl	221d6 <atomic_and>
	if (err) {
   146ea:	e7f6      	b.n	146da <bt_le_scan_start+0x172>
		return -ENOBUFS;
   146ec:	f06f 0468 	mvn.w	r4, #104	; 0x68
   146f0:	e787      	b.n	14602 <bt_le_scan_start+0x9a>
		return -EAGAIN;
   146f2:	f06f 040a 	mvn.w	r4, #10
   146f6:	e74b      	b.n	14590 <bt_le_scan_start+0x28>
   146f8:	200003a4 	.word	0x200003a4
   146fc:	20002440 	.word	0x20002440

00014700 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   14700:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14702:	4808      	ldr	r0, [pc, #32]	; (14724 <bt_le_scan_stop+0x24>)
   14704:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14708:	f00d fd65 	bl	221d6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1470c:	0603      	lsls	r3, r0, #24
   1470e:	d506      	bpl.n	1471e <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   14710:	4b05      	ldr	r3, [pc, #20]	; (14728 <bt_le_scan_stop+0x28>)
   14712:	2000      	movs	r0, #0
   14714:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   14716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1471a:	f7ff be59 	b.w	143d0 <bt_le_scan_update>
}
   1471e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14722:	bd08      	pop	{r3, pc}
   14724:	200003a4 	.word	0x200003a4
   14728:	20002440 	.word	0x20002440

0001472c <bt_pub_key_gen>:
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1472c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1472e:	4b31      	ldr	r3, [pc, #196]	; (147f4 <bt_pub_key_gen+0xc8>)
   14730:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   14734:	f003 0306 	and.w	r3, r3, #6
   14738:	2b06      	cmp	r3, #6
   1473a:	d152      	bne.n	147e2 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   1473c:	2800      	cmp	r0, #0
   1473e:	d053      	beq.n	147e8 <bt_pub_key_gen+0xbc>
	return list->head;
   14740:	4e2d      	ldr	r6, [pc, #180]	; (147f8 <bt_pub_key_gen+0xcc>)
   14742:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14744:	b132      	cbz	r2, 14754 <bt_pub_key_gen+0x28>
   14746:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   14748:	4298      	cmp	r0, r3
   1474a:	d050      	beq.n	147ee <bt_pub_key_gen+0xc2>
	return node->next;
   1474c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1474e:	b10b      	cbz	r3, 14754 <bt_pub_key_gen+0x28>
   14750:	3b04      	subs	r3, #4
   14752:	e7f9      	b.n	14748 <bt_pub_key_gen+0x1c>
	parent->next = child;
   14754:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   14756:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   14758:	1d03      	adds	r3, r0, #4
	list->head = node;
   1475a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1475c:	b902      	cbnz	r2, 14760 <bt_pub_key_gen+0x34>
	list->tail = node;
   1475e:	6073      	str	r3, [r6, #4]
   14760:	4c26      	ldr	r4, [pc, #152]	; (147fc <bt_pub_key_gen+0xd0>)
   14762:	f3bf 8f5b 	dmb	ish
   14766:	e854 2f00 	ldrex	r2, [r4]
   1476a:	f042 0320 	orr.w	r3, r2, #32
   1476e:	e844 3100 	strex	r1, r3, [r4]
   14772:	2900      	cmp	r1, #0
   14774:	d1f7      	bne.n	14766 <bt_pub_key_gen+0x3a>
   14776:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1477a:	f012 0220 	ands.w	r2, r2, #32
   1477e:	d002      	beq.n	14786 <bt_pub_key_gen+0x5a>
		return 0;
   14780:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   14782:	4628      	mov	r0, r5
   14784:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14786:	f3bf 8f5b 	dmb	ish
   1478a:	e854 3f00 	ldrex	r3, [r4]
   1478e:	f023 0310 	bic.w	r3, r3, #16
   14792:	e844 3100 	strex	r1, r3, [r4]
   14796:	2900      	cmp	r1, #0
   14798:	d1f7      	bne.n	1478a <bt_pub_key_gen+0x5e>
   1479a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1479e:	4611      	mov	r1, r2
   147a0:	f242 0025 	movw	r0, #8229	; 0x2025
   147a4:	f7fe fef0 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   147a8:	4605      	mov	r5, r0
   147aa:	2800      	cmp	r0, #0
   147ac:	d0e8      	beq.n	14780 <bt_pub_key_gen+0x54>
   147ae:	f3bf 8f5b 	dmb	ish
   147b2:	e854 3f00 	ldrex	r3, [r4]
   147b6:	f023 0320 	bic.w	r3, r3, #32
   147ba:	e844 3200 	strex	r2, r3, [r4]
   147be:	2a00      	cmp	r2, #0
   147c0:	d1f7      	bne.n	147b2 <bt_pub_key_gen+0x86>
   147c2:	f3bf 8f5b 	dmb	ish
	return list->head;
   147c6:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147c8:	b13c      	cbz	r4, 147da <bt_pub_key_gen+0xae>
			if (cb->func) {
   147ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147ce:	3c04      	subs	r4, #4
			if (cb->func) {
   147d0:	b10b      	cbz	r3, 147d6 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   147d2:	2000      	movs	r0, #0
   147d4:	4798      	blx	r3
	return node->next;
   147d6:	6864      	ldr	r4, [r4, #4]
   147d8:	e7f6      	b.n	147c8 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   147da:	2300      	movs	r3, #0
	list->tail = NULL;
   147dc:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   147e0:	e7cf      	b.n	14782 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   147e2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   147e6:	e7cc      	b.n	14782 <bt_pub_key_gen+0x56>
		return -EINVAL;
   147e8:	f06f 0515 	mvn.w	r5, #21
   147ec:	e7c9      	b.n	14782 <bt_pub_key_gen+0x56>
			return -EALREADY;
   147ee:	f06f 0577 	mvn.w	r5, #119	; 0x77
   147f2:	e7c6      	b.n	14782 <bt_pub_key_gen+0x56>
   147f4:	200002d8 	.word	0x200002d8
   147f8:	20002448 	.word	0x20002448
   147fc:	200003a4 	.word	0x200003a4

00014800 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14800:	4b05      	ldr	r3, [pc, #20]	; (14818 <bt_pub_key_get+0x18>)
   14802:	f3bf 8f5b 	dmb	ish
   14806:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   14808:	4804      	ldr	r0, [pc, #16]	; (1481c <bt_pub_key_get+0x1c>)
   1480a:	f3bf 8f5b 	dmb	ish
		return pub_key;
   1480e:	f013 0f10 	tst.w	r3, #16
}
   14812:	bf08      	it	eq
   14814:	2000      	moveq	r0, #0
   14816:	4770      	bx	lr
   14818:	200003a4 	.word	0x200003a4
   1481c:	20002c2c 	.word	0x20002c2c

00014820 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   14820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   14822:	4d1f      	ldr	r5, [pc, #124]	; (148a0 <bt_dh_key_gen+0x80>)
   14824:	682b      	ldr	r3, [r5, #0]
   14826:	428b      	cmp	r3, r1
{
   14828:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   1482a:	d032      	beq.n	14892 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1482c:	b113      	cbz	r3, 14834 <bt_dh_key_gen+0x14>
		return -EBUSY;
   1482e:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   14832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14834:	4b1b      	ldr	r3, [pc, #108]	; (148a4 <bt_dh_key_gen+0x84>)
   14836:	f3bf 8f5b 	dmb	ish
   1483a:	681a      	ldr	r2, [r3, #0]
   1483c:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14840:	f3c2 1740 	ubfx	r7, r2, #5, #1
   14844:	0692      	lsls	r2, r2, #26
   14846:	d4f2      	bmi.n	1482e <bt_dh_key_gen+0xe>
   14848:	f3bf 8f5b 	dmb	ish
   1484c:	681b      	ldr	r3, [r3, #0]
   1484e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   14852:	06db      	lsls	r3, r3, #27
   14854:	d520      	bpl.n	14898 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   14856:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   14858:	f242 0026 	movw	r0, #8230	; 0x2026
   1485c:	2140      	movs	r1, #64	; 0x40
   1485e:	f7fe fe59 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   14862:	4604      	mov	r4, r0
   14864:	b190      	cbz	r0, 1488c <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   14866:	2140      	movs	r1, #64	; 0x40
   14868:	3008      	adds	r0, #8
   1486a:	f010 fad9 	bl	24e20 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   1486e:	2240      	movs	r2, #64	; 0x40
   14870:	4631      	mov	r1, r6
   14872:	f00d f8c1 	bl	219f8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   14876:	463a      	mov	r2, r7
   14878:	4621      	mov	r1, r4
   1487a:	f242 0026 	movw	r0, #8230	; 0x2026
   1487e:	f7fe fe83 	bl	13588 <bt_hci_cmd_send_sync>
	if (err) {
   14882:	2800      	cmp	r0, #0
   14884:	d0d5      	beq.n	14832 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   14886:	2300      	movs	r3, #0
   14888:	602b      	str	r3, [r5, #0]
		return err;
   1488a:	e7d2      	b.n	14832 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1488c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14890:	e7f9      	b.n	14886 <bt_dh_key_gen+0x66>
		return -EALREADY;
   14892:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14896:	e7cc      	b.n	14832 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   14898:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1489c:	e7c9      	b.n	14832 <bt_dh_key_gen+0x12>
   1489e:	bf00      	nop
   148a0:	20002444 	.word	0x20002444
   148a4:	200003a4 	.word	0x200003a4

000148a8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   148a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   148aa:	4c1b      	ldr	r4, [pc, #108]	; (14918 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   148ac:	6886      	ldr	r6, [r0, #8]
   148ae:	f3bf 8f5b 	dmb	ish
   148b2:	e854 3f00 	ldrex	r3, [r4]
   148b6:	f023 0320 	bic.w	r3, r3, #32
   148ba:	e844 3200 	strex	r2, r3, [r4]
   148be:	2a00      	cmp	r2, #0
   148c0:	d1f7      	bne.n	148b2 <bt_hci_evt_le_pkey_complete+0xa>
   148c2:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   148c6:	7833      	ldrb	r3, [r6, #0]
   148c8:	b983      	cbnz	r3, 148ec <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   148ca:	4814      	ldr	r0, [pc, #80]	; (1491c <bt_hci_evt_le_pkey_complete+0x74>)
   148cc:	2240      	movs	r2, #64	; 0x40
   148ce:	1c71      	adds	r1, r6, #1
   148d0:	f00d f892 	bl	219f8 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148d4:	f3bf 8f5b 	dmb	ish
   148d8:	e854 3f00 	ldrex	r3, [r4]
   148dc:	f043 0310 	orr.w	r3, r3, #16
   148e0:	e844 3200 	strex	r2, r3, [r4]
   148e4:	2a00      	cmp	r2, #0
   148e6:	d1f7      	bne.n	148d8 <bt_hci_evt_le_pkey_complete+0x30>
   148e8:	f3bf 8f5b 	dmb	ish
	return list->head;
   148ec:	4d0c      	ldr	r5, [pc, #48]	; (14920 <bt_hci_evt_le_pkey_complete+0x78>)
   148ee:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   148f0:	b16c      	cbz	r4, 1490e <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   148f2:	4f0a      	ldr	r7, [pc, #40]	; (1491c <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   148f4:	3c04      	subs	r4, #4
		if (cb->func) {
   148f6:	6823      	ldr	r3, [r4, #0]
   148f8:	b12b      	cbz	r3, 14906 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   148fa:	7832      	ldrb	r2, [r6, #0]
   148fc:	2a00      	cmp	r2, #0
   148fe:	bf0c      	ite	eq
   14900:	4638      	moveq	r0, r7
   14902:	2000      	movne	r0, #0
   14904:	4798      	blx	r3
	return node->next;
   14906:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14908:	b10c      	cbz	r4, 1490e <bt_hci_evt_le_pkey_complete+0x66>
   1490a:	3c04      	subs	r4, #4
   1490c:	e7f3      	b.n	148f6 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   1490e:	2300      	movs	r3, #0
	list->tail = NULL;
   14910:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   14914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14916:	bf00      	nop
   14918:	200003a4 	.word	0x200003a4
   1491c:	20002c2c 	.word	0x20002c2c
   14920:	20002448 	.word	0x20002448

00014924 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   14924:	4905      	ldr	r1, [pc, #20]	; (1493c <bt_hci_evt_le_dhkey_complete+0x18>)
   14926:	680b      	ldr	r3, [r1, #0]
   14928:	b133      	cbz	r3, 14938 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1492a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1492c:	2000      	movs	r0, #0
   1492e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   14930:	7811      	ldrb	r1, [r2, #0]
   14932:	b901      	cbnz	r1, 14936 <bt_hci_evt_le_dhkey_complete+0x12>
   14934:	1c50      	adds	r0, r2, #1
   14936:	4718      	bx	r3
	}
}
   14938:	4770      	bx	lr
   1493a:	bf00      	nop
   1493c:	20002444 	.word	0x20002444

00014940 <bt_mesh_provision_adv>:
	return 0;
}

int bt_mesh_provision_adv(const uint8_t uuid[16], uint16_t net_idx, uint16_t addr,
			  uint8_t attention_duration)
{
   14940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14944:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14946:	4b0d      	ldr	r3, [pc, #52]	; (1497c <bt_mesh_provision_adv+0x3c>)
   14948:	f3bf 8f5b 	dmb	ish
   1494c:	681b      	ldr	r3, [r3, #0]
   1494e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   14952:	07db      	lsls	r3, r3, #31
{
   14954:	4605      	mov	r5, r0
   14956:	460c      	mov	r4, r1
   14958:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   1495a:	d50b      	bpl.n	14974 <bt_mesh_provision_adv+0x34>
		return -EINVAL;
	}

	if (bt_mesh_subnet_get(net_idx) == NULL) {
   1495c:	4608      	mov	r0, r1
   1495e:	f001 fabd 	bl	15edc <bt_mesh_subnet_get>
   14962:	b138      	cbz	r0, 14974 <bt_mesh_provision_adv+0x34>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROVISIONER) &&
	    IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		return bt_mesh_pb_adv_open(uuid, net_idx, addr,
   14964:	463b      	mov	r3, r7
   14966:	4632      	mov	r2, r6
   14968:	4621      	mov	r1, r4
   1496a:	4628      	mov	r0, r5
					   attention_duration);
	}

	return -ENOTSUP;
}
   1496c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return bt_mesh_pb_adv_open(uuid, net_idx, addr,
   14970:	f005 b824 	b.w	199bc <bt_mesh_pb_adv_open>
}
   14974:	f06f 0015 	mvn.w	r0, #21
   14978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1497c:	20001d48 	.word	0x20001d48

00014980 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
   14980:	b538      	push	{r3, r4, r5, lr}
   14982:	481d      	ldr	r0, [pc, #116]	; (149f8 <bt_mesh_reset+0x78>)
   14984:	f3bf 8f5b 	dmb	ish
   14988:	6803      	ldr	r3, [r0, #0]
   1498a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   1498e:	07db      	lsls	r3, r3, #31
   14990:	d531      	bpl.n	149f6 <bt_mesh_reset+0x76>
		return;
	}

	bt_mesh.iv_index = 0U;
   14992:	2400      	movs	r4, #0
	bt_mesh.ivu_duration = 0;
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
   14994:	4621      	mov	r1, r4
   14996:	2204      	movs	r2, #4
	bt_mesh.iv_index = 0U;
   14998:	f1a0 0508 	sub.w	r5, r0, #8
   1499c:	f840 4c08 	str.w	r4, [r0, #-8]
	bt_mesh.ivu_duration = 0;
   149a0:	7704      	strb	r4, [r0, #28]
	bt_mesh.seq = 0U;
   149a2:	f840 4c04 	str.w	r4, [r0, #-4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
   149a6:	f00d f832 	bl	21a0e <memset>

	/* If this fails, the work handler will return early on the next
	 * execution, as the device is not provisioned. If the device is
	 * reprovisioned, the timer is always restarted.
	 */
	(void)k_work_cancel_delayable(&bt_mesh.ivu_timer);
   149aa:	f105 0028 	add.w	r0, r5, #40	; 0x28
   149ae:	f011 f911 	bl	25bd4 <k_work_cancel_delayable>

	bt_mesh_model_reset();
   149b2:	f003 ff01 	bl	187b8 <bt_mesh_model_reset>
	bt_mesh_cfg_default_set();
   149b6:	f000 f9bd 	bl	14d34 <bt_mesh_cfg_default_set>
	bt_mesh_trans_reset();
   149ba:	f002 fd4b 	bl	17454 <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
   149be:	f001 fe83 	bl	166c8 <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
   149c2:	f001 fbc1 	bl	16148 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
   149c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   149ca:	f000 ffe3 	bl	15994 <bt_mesh_net_loopback_clear>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_CLIENT)) {
		bt_mesh_gatt_client_deinit();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
   149ce:	f00d fd63 	bl	22498 <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   149d2:	4621      	mov	r1, r4
   149d4:	2210      	movs	r2, #16
   149d6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   149da:	f00d f818 	bl	21a0e <memset>

	bt_mesh_scan_disable();
   149de:	f00d fcdb 	bl	22398 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
   149e2:	f000 fc71 	bl	152c8 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
   149e6:	f003 fbbf 	bl	18168 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_store_pending();
   149ea:	f004 f891 	bl	18b10 <bt_mesh_settings_store_pending>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
   149ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
   149f2:	f004 bc37 	b.w	19264 <bt_mesh_prov_reset>
}
   149f6:	bd38      	pop	{r3, r4, r5, pc}
   149f8:	20001d48 	.word	0x20001d48

000149fc <bt_mesh_is_provisioned>:
   149fc:	4b04      	ldr	r3, [pc, #16]	; (14a10 <bt_mesh_is_provisioned+0x14>)
   149fe:	f3bf 8f5b 	dmb	ish
   14a02:	6818      	ldr	r0, [r3, #0]
   14a04:	f3bf 8f5b 	dmb	ish

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
   14a08:	f000 0001 	and.w	r0, r0, #1
   14a0c:	4770      	bx	lr
   14a0e:	bf00      	nop
   14a10:	20001d48 	.word	0x20001d48

00014a14 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
   14a14:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
   14a16:	f003 ffb1 	bl	1897c <bt_mesh_adv_enable>
	if (err) {
   14a1a:	4604      	mov	r4, r0
   14a1c:	b9c0      	cbnz	r0, 14a50 <bt_mesh_start+0x3c>
		BT_ERR("Failed enabling advertiser");
		return err;
	}

	if (bt_mesh_beacon_enabled()) {
   14a1e:	f000 f8eb 	bl	14bf8 <bt_mesh_beacon_enabled>
   14a22:	b1b8      	cbz	r0, 14a54 <bt_mesh_start+0x40>
		bt_mesh_beacon_enable();
   14a24:	f000 fc3e 	bl	152a4 <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_PROV) || !bt_mesh_prov_active() ||
   14a28:	f004 fc04 	bl	19234 <bt_mesh_prov_active>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
   14a2c:	f000 fa3c 	bl	14ea8 <bt_mesh_scan_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
   14a30:	2000      	movs	r0, #0
   14a32:	f001 fb73 	bl	1611c <bt_mesh_subnet_next>
   14a36:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
   14a38:	f003 fb9c 	bl	18174 <bt_mesh_primary_addr>
   14a3c:	4601      	mov	r1, r0

		bt_mesh_prov_complete(sub->net_idx, addr);
   14a3e:	8c28      	ldrh	r0, [r5, #32]
   14a40:	f004 fc08 	bl	19254 <bt_mesh_prov_complete>
	}

	bt_mesh_hb_start();
   14a44:	f002 ff2e 	bl	178a4 <bt_mesh_hb_start>

	bt_mesh_model_foreach(model_start, NULL);
   14a48:	4804      	ldr	r0, [pc, #16]	; (14a5c <bt_mesh_start+0x48>)
   14a4a:	2100      	movs	r1, #0
   14a4c:	f003 f992 	bl	17d74 <bt_mesh_model_foreach>

	return 0;
}
   14a50:	4620      	mov	r0, r4
   14a52:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_beacon_disable();
   14a54:	f000 fc38 	bl	152c8 <bt_mesh_beacon_disable>
   14a58:	e7e6      	b.n	14a28 <bt_mesh_start+0x14>
   14a5a:	bf00      	nop
   14a5c:	000221f9 	.word	0x000221f9

00014a60 <bt_mesh_provision>:
{
   14a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14a64:	4f47      	ldr	r7, [pc, #284]	; (14b84 <bt_mesh_provision+0x124>)
   14a66:	f8bd b028 	ldrh.w	fp, [sp, #40]	; 0x28
   14a6a:	f3bf 8f5b 	dmb	ish
   14a6e:	4681      	mov	r9, r0
   14a70:	4688      	mov	r8, r1
   14a72:	4615      	mov	r5, r2
   14a74:	469a      	mov	sl, r3
   14a76:	e857 3f00 	ldrex	r3, [r7]
   14a7a:	f043 0201 	orr.w	r2, r3, #1
   14a7e:	e847 2100 	strex	r1, r2, [r7]
   14a82:	2900      	cmp	r1, #0
   14a84:	d1f7      	bne.n	14a76 <bt_mesh_provision+0x16>
   14a86:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
   14a8a:	07da      	lsls	r2, r3, #31
   14a8c:	d477      	bmi.n	14b7e <bt_mesh_provision+0x11e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a8e:	f3bf 8f5b 	dmb	ish
   14a92:	4b3d      	ldr	r3, [pc, #244]	; (14b88 <bt_mesh_provision+0x128>)
   14a94:	681b      	ldr	r3, [r3, #0]
   14a96:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_MESH_CDB) &&
   14a9a:	07db      	lsls	r3, r3, #31
   14a9c:	d54a      	bpl.n	14b34 <bt_mesh_provision+0xd4>
		comp = bt_mesh_comp_get();
   14a9e:	f003 fbc1 	bl	18224 <bt_mesh_comp_get>
		if (comp == NULL) {
   14aa2:	4606      	mov	r6, r0
   14aa4:	b948      	cbnz	r0, 14aba <bt_mesh_provision+0x5a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14aa6:	f06f 0101 	mvn.w	r1, #1
   14aaa:	4638      	mov	r0, r7
   14aac:	f00d fbaa 	bl	22204 <atomic_and>
			return -EINVAL;
   14ab0:	f06f 0415 	mvn.w	r4, #21
}
   14ab4:	4620      	mov	r0, r4
   14ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		subnet = bt_mesh_cdb_subnet_get(net_idx);
   14aba:	4640      	mov	r0, r8
   14abc:	f006 fccc 	bl	1b458 <bt_mesh_cdb_subnet_get>
		if (!subnet) {
   14ac0:	4604      	mov	r4, r0
   14ac2:	b930      	cbnz	r0, 14ad2 <bt_mesh_provision+0x72>
   14ac4:	f06f 0101 	mvn.w	r1, #1
   14ac8:	4638      	mov	r0, r7
   14aca:	f00d fb9b 	bl	22204 <atomic_and>
			return -ENOENT;
   14ace:	460c      	mov	r4, r1
   14ad0:	e7f0      	b.n	14ab4 <bt_mesh_provision+0x54>
		prov = bt_mesh_prov_get();
   14ad2:	f004 fba9 	bl	19228 <bt_mesh_prov_get>
		node = bt_mesh_cdb_node_alloc(prov->uuid, addr,
   14ad6:	7a32      	ldrb	r2, [r6, #8]
   14ad8:	6800      	ldr	r0, [r0, #0]
   14ada:	4643      	mov	r3, r8
   14adc:	4659      	mov	r1, fp
   14ade:	f006 fd39 	bl	1b554 <bt_mesh_cdb_node_alloc>
		if (node == NULL) {
   14ae2:	4606      	mov	r6, r0
   14ae4:	b938      	cbnz	r0, 14af6 <bt_mesh_provision+0x96>
   14ae6:	f06f 0101 	mvn.w	r1, #1
   14aea:	4638      	mov	r0, r7
   14aec:	f00d fb8a 	bl	22204 <atomic_and>
			return -ENOMEM;
   14af0:	f06f 040b 	mvn.w	r4, #11
   14af4:	e7de      	b.n	14ab4 <bt_mesh_provision+0x54>
		if (BT_MESH_KEY_REFRESH(flags)) {
   14af6:	f015 0701 	ands.w	r7, r5, #1
			memcpy(subnet->keys[1].net_key, net_key, 16);
   14afa:	f04f 0210 	mov.w	r2, #16
   14afe:	4649      	mov	r1, r9
		if (BT_MESH_KEY_REFRESH(flags)) {
   14b00:	d026      	beq.n	14b50 <bt_mesh_provision+0xf0>
			memcpy(subnet->keys[1].net_key, net_key, 16);
   14b02:	f104 0013 	add.w	r0, r4, #19
   14b06:	f00c ff77 	bl	219f8 <memcpy>
			subnet->kr_phase = BT_MESH_KR_PHASE_2;
   14b0a:	2302      	movs	r3, #2
   14b0c:	70a3      	strb	r3, [r4, #2]
		bt_mesh_cdb_subnet_store(subnet);
   14b0e:	4620      	mov	r0, r4
   14b10:	f010 f8d0 	bl	24cb4 <bt_mesh_cdb_subnet_store>
		bt_mesh_cdb_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
   14b14:	f3c5 0140 	ubfx	r1, r5, #1, #1
   14b18:	4650      	mov	r0, sl
		addr = node->addr;
   14b1a:	f8b6 b010 	ldrh.w	fp, [r6, #16]
		bt_mesh_cdb_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
   14b1e:	f006 fc7d 	bl	1b41c <bt_mesh_cdb_iv_update>
		memcpy(node->dev_key, dev_key, 16);
   14b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14b24:	2210      	movs	r2, #16
   14b26:	f106 0015 	add.w	r0, r6, #21
   14b2a:	f00c ff65 	bl	219f8 <memcpy>
			bt_mesh_cdb_node_store(node);
   14b2e:	4630      	mov	r0, r6
   14b30:	f010 f8d2 	bl	24cd8 <bt_mesh_cdb_node_store>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
   14b34:	4653      	mov	r3, sl
   14b36:	464a      	mov	r2, r9
   14b38:	4629      	mov	r1, r5
   14b3a:	4640      	mov	r0, r8
   14b3c:	f000 fd44 	bl	155c8 <bt_mesh_net_create>
	if (err) {
   14b40:	4604      	mov	r4, r0
   14b42:	b150      	cbz	r0, 14b5a <bt_mesh_provision+0xfa>
   14b44:	f06f 0101 	mvn.w	r1, #1
   14b48:	480e      	ldr	r0, [pc, #56]	; (14b84 <bt_mesh_provision+0x124>)
   14b4a:	f00d fb5b 	bl	22204 <atomic_and>
		return err;
   14b4e:	e7b1      	b.n	14ab4 <bt_mesh_provision+0x54>
			memcpy(subnet->keys[0].net_key, net_key, 16);
   14b50:	1ce0      	adds	r0, r4, #3
   14b52:	f00c ff51 	bl	219f8 <memcpy>
			subnet->kr_phase = BT_MESH_KR_NORMAL;
   14b56:	70a7      	strb	r7, [r4, #2]
   14b58:	e7d9      	b.n	14b0e <bt_mesh_provision+0xae>
	bt_mesh.seq = 0U;
   14b5a:	4d0c      	ldr	r5, [pc, #48]	; (14b8c <bt_mesh_provision+0x12c>)
	bt_mesh_net_settings_commit();
   14b5c:	f001 f93e 	bl	15ddc <bt_mesh_net_settings_commit>
	bt_mesh_comp_provision(addr);
   14b60:	4658      	mov	r0, fp
	bt_mesh.seq = 0U;
   14b62:	606c      	str	r4, [r5, #4]
	bt_mesh_comp_provision(addr);
   14b64:	f003 faea 	bl	1813c <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
   14b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14b6a:	2210      	movs	r2, #16
   14b6c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   14b70:	f00c ff42 	bl	219f8 <memcpy>
		bt_mesh_net_pending_net_store();
   14b74:	f001 f8ee 	bl	15d54 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
   14b78:	f7ff ff4c 	bl	14a14 <bt_mesh_start>
	return 0;
   14b7c:	e79a      	b.n	14ab4 <bt_mesh_provision+0x54>
		return -EALREADY;
   14b7e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14b82:	e797      	b.n	14ab4 <bt_mesh_provision+0x54>
   14b84:	20001d48 	.word	0x20001d48
   14b88:	20000670 	.word	0x20000670
   14b8c:	20001d40 	.word	0x20001d40

00014b90 <bt_mesh_beacon_set>:
	uint8_t frnd;
	uint8_t default_ttl;
};

void bt_mesh_beacon_set(bool beacon)
{
   14b90:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14b92:	4b18      	ldr	r3, [pc, #96]	; (14bf4 <bt_mesh_beacon_set+0x64>)
   14b94:	4602      	mov	r2, r0
   14b96:	4618      	mov	r0, r3
   14b98:	f00d fb5f 	bl	2225a <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
   14b9c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   14ba0:	4282      	cmp	r2, r0
   14ba2:	d025      	beq.n	14bf0 <bt_mesh_beacon_set+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14ba4:	f3bf 8f5b 	dmb	ish
	if (val) {
   14ba8:	b1aa      	cbz	r2, 14bd6 <bt_mesh_beacon_set+0x46>
   14baa:	e853 2f00 	ldrex	r2, [r3]
   14bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14bb2:	e843 2100 	strex	r1, r2, [r3]
   14bb6:	2900      	cmp	r1, #0
   14bb8:	d1f7      	bne.n	14baa <bt_mesh_beacon_set+0x1a>
   14bba:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_mesh.flags, BT_MESH_BEACON, beacon);

	if (beacon) {
		bt_mesh_beacon_enable();
   14bbe:	f000 fb71 	bl	152a4 <bt_mesh_beacon_enable>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14bc2:	480c      	ldr	r0, [pc, #48]	; (14bf4 <bt_mesh_beacon_set+0x64>)
   14bc4:	f00d fb49 	bl	2225a <atomic_get>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14bc8:	07c3      	lsls	r3, r0, #31
   14bca:	d511      	bpl.n	14bf0 <bt_mesh_beacon_set+0x60>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
   14bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14bd0:	2007      	movs	r0, #7
   14bd2:	f003 bf1d 	b.w	18a10 <bt_mesh_settings_store_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14bd6:	e853 2f00 	ldrex	r2, [r3]
   14bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   14bde:	e843 2100 	strex	r1, r2, [r3]
   14be2:	2900      	cmp	r1, #0
   14be4:	d1f7      	bne.n	14bd6 <bt_mesh_beacon_set+0x46>
   14be6:	f3bf 8f5b 	dmb	ish
		bt_mesh_beacon_disable();
   14bea:	f000 fb6d 	bl	152c8 <bt_mesh_beacon_disable>
   14bee:	e7e8      	b.n	14bc2 <bt_mesh_beacon_set+0x32>
}
   14bf0:	bd08      	pop	{r3, pc}
   14bf2:	bf00      	nop
   14bf4:	20001d48 	.word	0x20001d48

00014bf8 <bt_mesh_beacon_enabled>:

bool bt_mesh_beacon_enabled(void)
{
   14bf8:	b508      	push	{r3, lr}
   14bfa:	4803      	ldr	r0, [pc, #12]	; (14c08 <bt_mesh_beacon_enabled+0x10>)
   14bfc:	f00d fb2d 	bl	2225a <atomic_get>
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}
   14c00:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   14c04:	bd08      	pop	{r3, pc}
   14c06:	bf00      	nop
   14c08:	20001d48 	.word	0x20001d48

00014c0c <bt_mesh_default_ttl_set>:
	return feature_get(BT_MESH_GATT_PROXY);
}

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
   14c0c:	2801      	cmp	r0, #1
{
   14c0e:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
   14c10:	d014      	beq.n	14c3c <bt_mesh_default_ttl_set+0x30>
   14c12:	0602      	lsls	r2, r0, #24
   14c14:	d412      	bmi.n	14c3c <bt_mesh_default_ttl_set+0x30>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
   14c16:	4b0b      	ldr	r3, [pc, #44]	; (14c44 <bt_mesh_default_ttl_set+0x38>)
   14c18:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   14c1c:	4282      	cmp	r2, r0
   14c1e:	d101      	bne.n	14c24 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14c20:	2000      	movs	r0, #0
	}

	return 0;
}
   14c22:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
   14c24:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
   14c28:	f103 0008 	add.w	r0, r3, #8
   14c2c:	f00d fb15 	bl	2225a <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14c30:	07c3      	lsls	r3, r0, #31
   14c32:	d5f5      	bpl.n	14c20 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14c34:	2007      	movs	r0, #7
   14c36:	f003 feeb 	bl	18a10 <bt_mesh_settings_store_schedule>
   14c3a:	e7f1      	b.n	14c20 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
   14c3c:	f06f 0015 	mvn.w	r0, #21
   14c40:	e7ef      	b.n	14c22 <bt_mesh_default_ttl_set+0x16>
   14c42:	bf00      	nop
   14c44:	20001d40 	.word	0x20001d40

00014c48 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
   14c48:	4b01      	ldr	r3, [pc, #4]	; (14c50 <bt_mesh_default_ttl_get+0x8>)
   14c4a:	f893 0027 	ldrb.w	r0, [r3, #39]	; 0x27
   14c4e:	4770      	bx	lr
   14c50:	20001d40 	.word	0x20001d40

00014c54 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
   14c54:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
   14c56:	4b09      	ldr	r3, [pc, #36]	; (14c7c <bt_mesh_net_transmit_set+0x28>)
   14c58:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   14c5c:	4282      	cmp	r2, r0
   14c5e:	d00c      	beq.n	14c7a <bt_mesh_net_transmit_set+0x26>
		return;
	}

	bt_mesh.net_xmit = xmit;
   14c60:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
   14c64:	f103 0008 	add.w	r0, r3, #8
   14c68:	f00d faf7 	bl	2225a <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14c6c:	07c3      	lsls	r3, r0, #31
   14c6e:	d504      	bpl.n	14c7a <bt_mesh_net_transmit_set+0x26>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
   14c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14c74:	2007      	movs	r0, #7
   14c76:	f003 becb 	b.w	18a10 <bt_mesh_settings_store_schedule>
}
   14c7a:	bd08      	pop	{r3, pc}
   14c7c:	20001d40 	.word	0x20001d40

00014c80 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
   14c80:	4b01      	ldr	r3, [pc, #4]	; (14c88 <bt_mesh_net_transmit_get+0x8>)
   14c82:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   14c86:	4770      	bx	lr
   14c88:	20001d40 	.word	0x20001d40

00014c8c <bt_mesh_relay_set>:
	if (state != BT_MESH_FEATURE_DISABLED &&
   14c8c:	2801      	cmp	r0, #1

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
   14c8e:	b508      	push	{r3, lr}
   14c90:	4603      	mov	r3, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
   14c92:	d83a      	bhi.n	14d0a <bt_mesh_relay_set+0x7e>
   14c94:	4a1e      	ldr	r2, [pc, #120]	; (14d10 <bt_mesh_relay_set+0x84>)
   14c96:	4610      	mov	r0, r2
   14c98:	f00d fadf 	bl	2225a <atomic_get>
	    (state == BT_MESH_FEATURE_ENABLED)) {
   14c9c:	f003 0301 	and.w	r3, r3, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
   14ca0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14ca4:	4283      	cmp	r3, r0
   14ca6:	f1a2 0008 	sub.w	r0, r2, #8
   14caa:	d027      	beq.n	14cfc <bt_mesh_relay_set+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14cac:	f3bf 8f5b 	dmb	ish
	if (val) {
   14cb0:	b1d3      	cbz	r3, 14ce8 <bt_mesh_relay_set+0x5c>
   14cb2:	e852 3f00 	ldrex	r3, [r2]
   14cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14cba:	e842 3c00 	strex	ip, r3, [r2]
   14cbe:	f1bc 0f00 	cmp.w	ip, #0
   14cc2:	d1f6      	bne.n	14cb2 <bt_mesh_relay_set+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14cc4:	f3bf 8f5b 	dmb	ish

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
   14cc8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
   14ccc:	2001      	movs	r0, #1
   14cce:	f002 fdc1 	bl	17854 <bt_mesh_hb_feature_changed>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14cd2:	480f      	ldr	r0, [pc, #60]	; (14d10 <bt_mesh_relay_set+0x84>)
   14cd4:	f00d fac1 	bl	2225a <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14cd8:	f010 0001 	ands.w	r0, r0, #1
   14cdc:	d003      	beq.n	14ce6 <bt_mesh_relay_set+0x5a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14cde:	2007      	movs	r0, #7
   14ce0:	f003 fe96 	bl	18a10 <bt_mesh_settings_store_schedule>
	}

	return 0;
   14ce4:	2000      	movs	r0, #0
}
   14ce6:	bd08      	pop	{r3, pc}
   14ce8:	e852 3f00 	ldrex	r3, [r2]
   14cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14cf0:	e842 3c00 	strex	ip, r3, [r2]
   14cf4:	f1bc 0f00 	cmp.w	ip, #0
   14cf8:	d0e4      	beq.n	14cc4 <bt_mesh_relay_set+0x38>
   14cfa:	e7f5      	b.n	14ce8 <bt_mesh_relay_set+0x5c>
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
   14cfc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   14d00:	428b      	cmp	r3, r1
   14d02:	d1e1      	bne.n	14cc8 <bt_mesh_relay_set+0x3c>
		return -EALREADY;
   14d04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14d08:	e7ed      	b.n	14ce6 <bt_mesh_relay_set+0x5a>
		return err;
   14d0a:	f06f 0015 	mvn.w	r0, #21
   14d0e:	e7ea      	b.n	14ce6 <bt_mesh_relay_set+0x5a>
   14d10:	20001d48 	.word	0x20001d48

00014d14 <bt_mesh_relay_get>:

enum bt_mesh_feat_state bt_mesh_relay_get(void)
{
   14d14:	b508      	push	{r3, lr}
   14d16:	4803      	ldr	r0, [pc, #12]	; (14d24 <bt_mesh_relay_get+0x10>)
   14d18:	f00d fa9f 	bl	2225a <atomic_get>
	return feature_get(BT_MESH_RELAY);
}
   14d1c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14d20:	bd08      	pop	{r3, pc}
   14d22:	bf00      	nop
   14d24:	20001d48 	.word	0x20001d48

00014d28 <bt_mesh_relay_retransmit_get>:
	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return 0;
	}

	return bt_mesh.relay_xmit;
}
   14d28:	4b01      	ldr	r3, [pc, #4]	; (14d30 <bt_mesh_relay_retransmit_get+0x8>)
   14d2a:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   14d2e:	4770      	bx	lr
   14d30:	20001d40 	.word	0x20001d40

00014d34 <bt_mesh_cfg_default_set>:
}

void bt_mesh_cfg_default_set(void)
{
	bt_mesh.default_ttl = CONFIG_BT_MESH_DEFAULT_TTL;
	bt_mesh.net_xmit =
   14d34:	4b0a      	ldr	r3, [pc, #40]	; (14d60 <bt_mesh_cfg_default_set+0x2c>)
   14d36:	220a      	movs	r2, #10
   14d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		BT_MESH_TRANSMIT(CONFIG_BT_MESH_NETWORK_TRANSMIT_COUNT,
				 CONFIG_BT_MESH_NETWORK_TRANSMIT_INTERVAL);

#if defined(CONFIG_BT_MESH_RELAY)
	bt_mesh.relay_xmit =
   14d3c:	f240 720b 	movw	r2, #1803	; 0x70b
   14d40:	84da      	strh	r2, [r3, #38]	; 0x26
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d42:	3308      	adds	r3, #8
   14d44:	f3bf 8f5b 	dmb	ish
   14d48:	e853 2f00 	ldrex	r2, [r3]
   14d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14d50:	e843 2100 	strex	r1, r2, [r3]
   14d54:	2900      	cmp	r1, #0
   14d56:	d1f7      	bne.n	14d48 <bt_mesh_cfg_default_set+0x14>
   14d58:	f3bf 8f5b 	dmb	ish
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND_ENABLED)) {
		atomic_set_bit(bt_mesh.flags, BT_MESH_FRIEND);
	}
}
   14d5c:	4770      	bx	lr
   14d5e:	bf00      	nop
   14d60:	20001d40 	.word	0x20001d40

00014d64 <bt_mesh_cfg_pending_store>:
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
   14d64:	b507      	push	{r0, r1, r2, lr}
   14d66:	4816      	ldr	r0, [pc, #88]	; (14dc0 <bt_mesh_cfg_pending_store+0x5c>)
   14d68:	f00d fa77 	bl	2225a <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   14d6c:	07c3      	lsls	r3, r0, #31
   14d6e:	d521      	bpl.n	14db4 <bt_mesh_cfg_pending_store+0x50>
	return bt_mesh.net_xmit;
   14d70:	4a14      	ldr	r2, [pc, #80]	; (14dc4 <bt_mesh_cfg_pending_store+0x60>)
	val.net_transmit = bt_mesh_net_transmit_get();
   14d72:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   14d76:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
   14d7a:	f7ff ffcb 	bl	14d14 <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
   14d7e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
   14d82:	f88d 3002 	strb.w	r3, [sp, #2]
	val.relay = bt_mesh_relay_get();
   14d86:	f88d 0001 	strb.w	r0, [sp, #1]
	val.beacon = bt_mesh_beacon_enabled();
   14d8a:	f7ff ff35 	bl	14bf8 <bt_mesh_beacon_enabled>
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
   14d8e:	2302      	movs	r3, #2
	val.beacon = bt_mesh_beacon_enabled();
   14d90:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
   14d94:	f88d 3004 	strb.w	r3, [sp, #4]
	val.frnd = bt_mesh_friend_get();
   14d98:	f88d 3005 	strb.w	r3, [sp, #5]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   14d9c:	4669      	mov	r1, sp
	val.default_ttl = bt_mesh_default_ttl_get();
   14d9e:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   14da2:	4809      	ldr	r0, [pc, #36]	; (14dc8 <bt_mesh_cfg_pending_store+0x64>)
	val.default_ttl = bt_mesh_default_ttl_get();
   14da4:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   14da8:	2207      	movs	r2, #7
   14daa:	f7fc ffb7 	bl	11d1c <settings_save_one>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
   14dae:	b003      	add	sp, #12
   14db0:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
   14db4:	4804      	ldr	r0, [pc, #16]	; (14dc8 <bt_mesh_cfg_pending_store+0x64>)
}
   14db6:	b003      	add	sp, #12
   14db8:	f85d eb04 	ldr.w	lr, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
   14dbc:	f00b bb1f 	b.w	203fe <settings_delete>
   14dc0:	20001d48 	.word	0x20001d48
   14dc4:	20001d40 	.word	0x20001d40
   14dc8:	00027583 	.word	0x00027583

00014dcc <bt_mesh_adv_create_from_pool>:
static struct net_buf *bt_mesh_adv_create_from_pool(struct net_buf_pool *buf_pool,
						    struct bt_mesh_adv *adv_pool,
						    enum bt_mesh_adv_type type,
						    enum bt_mesh_adv_tag tag,
						    uint8_t xmit, k_timeout_t timeout)
{
   14dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dd0:	461c      	mov	r4, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dd2:	4b17      	ldr	r3, [pc, #92]	; (14e30 <bt_mesh_adv_create_from_pool+0x64>)
   14dd4:	f3bf 8f5b 	dmb	ish
   14dd8:	681b      	ldr	r3, [r3, #0]
   14dda:	f3bf 8f5b 	dmb	ish
	struct bt_mesh_adv *adv;
	struct net_buf *buf;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
   14dde:	f3c3 0840 	ubfx	r8, r3, #1, #1
   14de2:	079b      	lsls	r3, r3, #30
{
   14de4:	460d      	mov	r5, r1
   14de6:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
   14de8:	d420      	bmi.n	14e2c <bt_mesh_adv_create_from_pool+0x60>
	return net_buf_alloc_fixed(pool, timeout);
   14dea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   14dee:	f00f ff94 	bl	24d1a <net_buf_alloc_fixed>
		BT_WARN("Refusing to allocate buffer while suspended");
		return NULL;
	}

	buf = net_buf_alloc(buf_pool, timeout);
	if (!buf) {
   14df2:	4606      	mov	r6, r0
   14df4:	b1b8      	cbz	r0, 14e26 <bt_mesh_adv_create_from_pool+0x5a>
		return NULL;
	}

	adv = &adv_pool[net_buf_id(buf)];
   14df6:	f006 fe3d 	bl	1ba74 <net_buf_id>
   14dfa:	220c      	movs	r2, #12
   14dfc:	fb02 5500 	mla	r5, r2, r0, r5
	BT_MESH_ADV(buf) = adv;
   14e00:	6175      	str	r5, [r6, #20]

	(void)memset(adv, 0, sizeof(*adv));
   14e02:	4641      	mov	r1, r8
   14e04:	4628      	mov	r0, r5
   14e06:	f00c fe02 	bl	21a0e <memset>

	adv->type         = type;
   14e0a:	0124      	lsls	r4, r4, #4
   14e0c:	7a2b      	ldrb	r3, [r5, #8]
   14e0e:	f004 0470 	and.w	r4, r4, #112	; 0x70
   14e12:	f007 0703 	and.w	r7, r7, #3
   14e16:	f023 0373 	bic.w	r3, r3, #115	; 0x73
   14e1a:	433c      	orrs	r4, r7
   14e1c:	431c      	orrs	r4, r3
	adv->tag          = tag;
	adv->xmit         = xmit;
   14e1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
	adv->type         = type;
   14e22:	722c      	strb	r4, [r5, #8]
	adv->xmit         = xmit;
   14e24:	726b      	strb	r3, [r5, #9]

	return buf;
}
   14e26:	4630      	mov	r0, r6
   14e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   14e2c:	2600      	movs	r6, #0
   14e2e:	e7fa      	b.n	14e26 <bt_mesh_adv_create_from_pool+0x5a>
   14e30:	20001d48 	.word	0x20001d48

00014e34 <bt_mesh_adv_create>:

struct net_buf *bt_mesh_adv_create(enum bt_mesh_adv_type type,
				   enum bt_mesh_adv_tag tag,
				   uint8_t xmit, k_timeout_t timeout)
{
   14e34:	b530      	push	{r4, r5, lr}
   14e36:	b085      	sub	sp, #20
   14e38:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   14e3c:	460b      	mov	r3, r1
#if defined(CONFIG_BT_MESH_RELAY)
	if (tag & BT_MESH_RELAY_ADV) {
   14e3e:	0799      	lsls	r1, r3, #30
		return bt_mesh_adv_create_from_pool(&relay_buf_pool,
   14e40:	9200      	str	r2, [sp, #0]
   14e42:	e9cd 4502 	strd	r4, r5, [sp, #8]
   14e46:	4602      	mov	r2, r0
   14e48:	bf47      	ittee	mi
   14e4a:	4904      	ldrmi	r1, [pc, #16]	; (14e5c <bt_mesh_adv_create+0x28>)
   14e4c:	4804      	ldrmi	r0, [pc, #16]	; (14e60 <bt_mesh_adv_create+0x2c>)
						    adv_relay_pool, type,
						    tag, xmit, timeout);
	}
#endif

	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_local_pool, type,
   14e4e:	4905      	ldrpl	r1, [pc, #20]	; (14e64 <bt_mesh_adv_create+0x30>)
   14e50:	4805      	ldrpl	r0, [pc, #20]	; (14e68 <bt_mesh_adv_create+0x34>)
   14e52:	f7ff ffbb 	bl	14dcc <bt_mesh_adv_create_from_pool>
					    tag, xmit, timeout);
}
   14e56:	b005      	add	sp, #20
   14e58:	bd30      	pop	{r4, r5, pc}
   14e5a:	bf00      	nop
   14e5c:	200024c8 	.word	0x200024c8
   14e60:	20000c6c 	.word	0x20000c6c
   14e64:	20002450 	.word	0x20002450
   14e68:	20000bbc 	.word	0x20000bbc

00014e6c <bt_mesh_adv_buf_get>:
		return NULL;
	}
}
#else /* !CONFIG_BT_MESH_RELAY_ADV_SETS */
struct net_buf *bt_mesh_adv_buf_get(k_timeout_t timeout)
{
   14e6c:	4602      	mov	r2, r0
   14e6e:	460b      	mov	r3, r1
	return net_buf_get(&bt_mesh_adv_queue, timeout);
   14e70:	4801      	ldr	r0, [pc, #4]	; (14e78 <bt_mesh_adv_buf_get+0xc>)
   14e72:	f00f bf57 	b.w	24d24 <net_buf_get>
   14e76:	bf00      	nop
   14e78:	20000ba4 	.word	0x20000ba4

00014e7c <bt_mesh_adv_send>:

}

void bt_mesh_adv_send(struct net_buf *buf, const struct bt_mesh_send_cb *cb,
		      void *cb_data)
{
   14e7c:	b510      	push	{r4, lr}
	BT_DBG("type 0x%02x len %u: %s", BT_MESH_ADV(buf)->type, buf->len,
	       bt_hex(buf->data, buf->len));

	BT_MESH_ADV(buf)->cb = cb;
   14e7e:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
   14e80:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
   14e84:	6942      	ldr	r2, [r0, #20]
   14e86:	7a13      	ldrb	r3, [r2, #8]
   14e88:	f043 0308 	orr.w	r3, r3, #8
   14e8c:	7213      	strb	r3, [r2, #8]
	} else {
		net_buf_put(&bt_mesh_relay_queue, net_buf_ref(buf));
		bt_mesh_adv_buf_relay_ready();
	}
#else /* !CONFIG_BT_MESH_RELAY_ADV_SETS */
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
   14e8e:	f00f ffc3 	bl	24e18 <net_buf_ref>
   14e92:	4601      	mov	r1, r0
   14e94:	4803      	ldr	r0, [pc, #12]	; (14ea4 <bt_mesh_adv_send+0x28>)
   14e96:	f00f ffb2 	bl	24dfe <net_buf_put>
	bt_mesh_adv_buf_local_ready();
#endif /* CONFIG_BT_MESH_RELAY_ADV_SETS */
}
   14e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_local_ready();
   14e9e:	f00f bcde 	b.w	2485e <bt_mesh_adv_buf_local_ready>
   14ea2:	bf00      	nop
   14ea4:	20000ba4 	.word	0x20000ba4

00014ea8 <bt_mesh_scan_enable>:
		net_buf_simple_pull(buf, len);
	}
}

int bt_mesh_scan_enable(void)
{
   14ea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
   14eaa:	2100      	movs	r1, #0
   14eac:	2214      	movs	r2, #20
   14eae:	a801      	add	r0, sp, #4
   14eb0:	f00c fdad 	bl	21a0e <memset>
   14eb4:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
   14eb8:	4906      	ldr	r1, [pc, #24]	; (14ed4 <bt_mesh_scan_enable+0x2c>)
	struct bt_le_scan_param scan_param = {
   14eba:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
   14ebc:	a801      	add	r0, sp, #4
   14ebe:	f7ff fb53 	bl	14568 <bt_le_scan_start>
	if (err && err != -EALREADY) {
   14ec2:	b118      	cbz	r0, 14ecc <bt_mesh_scan_enable+0x24>
		BT_ERR("starting scan failed (err %d)", err);
		return err;
	}

	return 0;
   14ec4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14ec8:	bf08      	it	eq
   14eca:	2000      	moveq	r0, #0
}
   14ecc:	b007      	add	sp, #28
   14ece:	f85d fb04 	ldr.w	pc, [sp], #4
   14ed2:	bf00      	nop
   14ed4:	0002231f 	.word	0x0002231f

00014ed8 <beacon_send>:

	bt_mesh_subnet_foreach(sub_update_beacon_observation);
}

static void beacon_send(struct k_work *work)
{
   14ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14eda:	b087      	sub	sp, #28
	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
   14edc:	f7ff fd8e 	bl	149fc <bt_mesh_is_provisioned>
   14ee0:	b310      	cbz	r0, 14f28 <beacon_send+0x50>
		if (!bt_mesh_beacon_enabled() &&
   14ee2:	f7ff fe89 	bl	14bf8 <bt_mesh_beacon_enabled>
   14ee6:	b1a8      	cbz	r0, 14f14 <beacon_send+0x3c>
	first_half = !first_half;
   14ee8:	4a43      	ldr	r2, [pc, #268]	; (14ff8 <beacon_send+0x120>)
   14eea:	7813      	ldrb	r3, [r2, #0]
   14eec:	f083 0301 	eor.w	r3, r3, #1
   14ef0:	7013      	strb	r3, [r2, #0]
	if (first_half) {
   14ef2:	b913      	cbnz	r3, 14efa <beacon_send+0x22>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
   14ef4:	4841      	ldr	r0, [pc, #260]	; (14ffc <beacon_send+0x124>)
   14ef6:	f001 f901 	bl	160fc <bt_mesh_subnet_foreach>
		    !atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
			return;
		}

		update_beacon_observation();
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
   14efa:	4841      	ldr	r0, [pc, #260]	; (15000 <beacon_send+0x128>)
   14efc:	2100      	movs	r1, #0
   14efe:	f001 f8eb 	bl	160d8 <bt_mesh_subnet_find>

		k_work_schedule(&beacon_timer, PROVISIONED_INTERVAL);
   14f02:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
		/* Don't send anything if we have an active provisioning link */
		if (!bt_mesh_prov_active()) {
			unprovisioned_beacon_send();
		}

		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
   14f06:	483f      	ldr	r0, [pc, #252]	; (15004 <beacon_send+0x12c>)
   14f08:	2300      	movs	r3, #0
	}

}
   14f0a:	b007      	add	sp, #28
   14f0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
   14f10:	f009 be52 	b.w	1ebb8 <k_work_schedule>
   14f14:	4b3c      	ldr	r3, [pc, #240]	; (15008 <beacon_send+0x130>)
   14f16:	f3bf 8f5b 	dmb	ish
   14f1a:	681b      	ldr	r3, [r3, #0]
   14f1c:	f3bf 8f5b 	dmb	ish
		if (!bt_mesh_beacon_enabled() &&
   14f20:	071b      	lsls	r3, r3, #28
   14f22:	d4e1      	bmi.n	14ee8 <beacon_send+0x10>
}
   14f24:	b007      	add	sp, #28
   14f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!bt_mesh_prov_active()) {
   14f28:	f004 f984 	bl	19234 <bt_mesh_prov_active>
   14f2c:	4605      	mov	r5, r0
   14f2e:	2800      	cmp	r0, #0
   14f30:	d15d      	bne.n	14fee <beacon_send+0x116>
				 UNPROV_XMIT, K_NO_WAIT);
   14f32:	2200      	movs	r2, #0
   14f34:	2300      	movs	r3, #0
	uint8_t uri_hash[16] = { 0 };
   14f36:	e9cd 0002 	strd	r0, r0, [sp, #8]
   14f3a:	e9cd 0004 	strd	r0, r0, [sp, #16]
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
   14f3e:	e9cd 2300 	strd	r2, r3, [sp]
   14f42:	2101      	movs	r1, #1
   14f44:	220a      	movs	r2, #10
   14f46:	2002      	movs	r0, #2
   14f48:	f7ff ff74 	bl	14e34 <bt_mesh_adv_create>
	if (!buf) {
   14f4c:	4606      	mov	r6, r0
   14f4e:	2800      	cmp	r0, #0
   14f50:	d04d      	beq.n	14fee <beacon_send+0x116>
	prov = bt_mesh_prov_get();
   14f52:	f004 f969 	bl	19228 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
   14f56:	f106 0708 	add.w	r7, r6, #8
   14f5a:	4604      	mov	r4, r0
   14f5c:	4629      	mov	r1, r5
   14f5e:	4638      	mov	r0, r7
   14f60:	f00f ff6d 	bl	24e3e <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14f64:	6821      	ldr	r1, [r4, #0]
   14f66:	2210      	movs	r2, #16
   14f68:	4638      	mov	r0, r7
   14f6a:	f00f ff5f 	bl	24e2c <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
   14f6e:	6860      	ldr	r0, [r4, #4]
   14f70:	2800      	cmp	r0, #0
   14f72:	d03f      	beq.n	14ff4 <beacon_send+0x11c>
   14f74:	a902      	add	r1, sp, #8
   14f76:	f00d fe09 	bl	22b8c <bt_mesh_s1>
   14f7a:	2800      	cmp	r0, #0
   14f7c:	d13a      	bne.n	14ff4 <beacon_send+0x11c>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
   14f7e:	8921      	ldrh	r1, [r4, #8]
   14f80:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
   14f84:	4638      	mov	r0, r7
   14f86:	f00f ff6c 	bl	24e62 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14f8a:	2204      	movs	r2, #4
   14f8c:	a902      	add	r1, sp, #8
   14f8e:	4638      	mov	r0, r7
   14f90:	f00f ff4c 	bl	24e2c <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
   14f94:	2200      	movs	r2, #0
   14f96:	4611      	mov	r1, r2
   14f98:	4630      	mov	r0, r6
   14f9a:	f7ff ff6f 	bl	14e7c <bt_mesh_adv_send>
	net_buf_unref(buf);
   14f9e:	4630      	mov	r0, r6
   14fa0:	f006 fe24 	bl	1bbec <net_buf_unref>
	if (prov->uri) {
   14fa4:	6863      	ldr	r3, [r4, #4]
   14fa6:	b313      	cbz	r3, 14fee <beacon_send+0x116>
					 UNPROV_XMIT, K_NO_WAIT);
   14fa8:	2200      	movs	r2, #0
   14faa:	2300      	movs	r3, #0
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, BT_MESH_LOCAL_ADV,
   14fac:	e9cd 2300 	strd	r2, r3, [sp]
   14fb0:	2101      	movs	r1, #1
   14fb2:	220a      	movs	r2, #10
   14fb4:	2003      	movs	r0, #3
   14fb6:	f7ff ff3d 	bl	14e34 <bt_mesh_adv_create>
		if (!buf) {
   14fba:	4605      	mov	r5, r0
   14fbc:	b1b8      	cbz	r0, 14fee <beacon_send+0x116>
		len = strlen(prov->uri);
   14fbe:	6860      	ldr	r0, [r4, #4]
   14fc0:	f00c fcdc 	bl	2197c <strlen>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14fc4:	f105 0708 	add.w	r7, r5, #8
   14fc8:	4606      	mov	r6, r0
   14fca:	4638      	mov	r0, r7
   14fcc:	f00f ffd5 	bl	24f7a <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
   14fd0:	4286      	cmp	r6, r0
   14fd2:	d809      	bhi.n	14fe8 <beacon_send+0x110>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14fd4:	6861      	ldr	r1, [r4, #4]
   14fd6:	4632      	mov	r2, r6
   14fd8:	4638      	mov	r0, r7
   14fda:	f00f ff27 	bl	24e2c <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
   14fde:	2200      	movs	r2, #0
   14fe0:	4611      	mov	r1, r2
   14fe2:	4628      	mov	r0, r5
   14fe4:	f7ff ff4a 	bl	14e7c <bt_mesh_adv_send>
		net_buf_unref(buf);
   14fe8:	4628      	mov	r0, r5
   14fea:	f006 fdff 	bl	1bbec <net_buf_unref>
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
   14fee:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   14ff2:	e788      	b.n	14f06 <beacon_send+0x2e>
		oob_info = prov->oob_info;
   14ff4:	8921      	ldrh	r1, [r4, #8]
   14ff6:	e7c5      	b.n	14f84 <beacon_send+0xac>
   14ff8:	20002c6c 	.word	0x20002c6c
   14ffc:	000223ab 	.word	0x000223ab
   15000:	00015061 	.word	0x00015061
   15004:	20001d10 	.word	0x20001d10
   15008:	20001d48 	.word	0x20001d48

0001500c <bt_mesh_beacon_create>:
{
   1500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1500e:	460c      	mov	r4, r1
   15010:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
   15012:	f000 ff33 	bl	15e7c <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
   15016:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
   15018:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
   1501a:	4620      	mov	r0, r4
   1501c:	f00f ff0f 	bl	24e3e <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   15020:	f895 6022 	ldrb.w	r6, [r5, #34]	; 0x22
   15024:	1eb3      	subs	r3, r6, #2
   15026:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
   15028:	4639      	mov	r1, r7
   1502a:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   1502c:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
   1502e:	f00f ff06 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
   15032:	214a      	movs	r1, #74	; 0x4a
   15034:	fb01 5106 	mla	r1, r1, r6, r5
   15038:	2208      	movs	r2, #8
   1503a:	3162      	adds	r1, #98	; 0x62
   1503c:	4620      	mov	r0, r4
   1503e:	f00f fef5 	bl	24e2c <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
   15042:	4b06      	ldr	r3, [pc, #24]	; (1505c <bt_mesh_beacon_create+0x50>)
   15044:	4620      	mov	r0, r4
   15046:	6819      	ldr	r1, [r3, #0]
   15048:	f00f ff22 	bl	24e90 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
   1504c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   15050:	4620      	mov	r0, r4
   15052:	2208      	movs	r2, #8
}
   15054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
   15058:	f00f bee8 	b.w	24e2c <net_buf_simple_add_mem>
   1505c:	20001d40 	.word	0x20001d40

00015060 <secure_beacon_send>:
{
   15060:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15062:	4604      	mov	r4, r0
	uint32_t now = k_uptime_get_32();
   15064:	f00d f9dd 	bl	22422 <k_uptime_get_32>
	time_diff = now - sub->beacon_sent;
   15068:	6822      	ldr	r2, [r4, #0]
	if (time_diff < (600 * MSEC_PER_SEC) &&
   1506a:	4b18      	ldr	r3, [pc, #96]	; (150cc <secure_beacon_send+0x6c>)
	time_diff = now - sub->beacon_sent;
   1506c:	1a82      	subs	r2, r0, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
   1506e:	429a      	cmp	r2, r3
   15070:	d80f      	bhi.n	15092 <secure_beacon_send+0x32>
		(time_diff < BEACON_THRESHOLD(sub) ||
   15072:	7a25      	ldrb	r5, [r4, #8]
	time_since_last_recv = now - sub->beacon_recv;
   15074:	6861      	ldr	r1, [r4, #4]
		(time_diff < BEACON_THRESHOLD(sub) ||
   15076:	f242 7310 	movw	r3, #10000	; 0x2710
   1507a:	fb05 3303 	mla	r3, r5, r3, r3
   1507e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   15082:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
   15084:	4293      	cmp	r3, r2
   15086:	d81c      	bhi.n	150c2 <secure_beacon_send+0x62>
	time_since_last_recv = now - sub->beacon_recv;
   15088:	1a40      	subs	r0, r0, r1
		(time_diff < BEACON_THRESHOLD(sub) ||
   1508a:	f242 730f 	movw	r3, #9999	; 0x270f
   1508e:	4298      	cmp	r0, r3
   15090:	d917      	bls.n	150c2 <secure_beacon_send+0x62>
				 PROV_XMIT, K_NO_WAIT);
   15092:	2200      	movs	r2, #0
   15094:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
   15096:	e9cd 2300 	strd	r2, r3, [sp]
   1509a:	2101      	movs	r1, #1
   1509c:	2208      	movs	r2, #8
   1509e:	2002      	movs	r0, #2
   150a0:	f7ff fec8 	bl	14e34 <bt_mesh_adv_create>
	if (!buf) {
   150a4:	4605      	mov	r5, r0
   150a6:	b170      	cbz	r0, 150c6 <secure_beacon_send+0x66>
	bt_mesh_beacon_create(sub, &buf->b);
   150a8:	f100 0108 	add.w	r1, r0, #8
   150ac:	4620      	mov	r0, r4
   150ae:	f7ff ffad 	bl	1500c <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
   150b2:	4628      	mov	r0, r5
   150b4:	4906      	ldr	r1, [pc, #24]	; (150d0 <secure_beacon_send+0x70>)
   150b6:	4622      	mov	r2, r4
   150b8:	f7ff fee0 	bl	14e7c <bt_mesh_adv_send>
	net_buf_unref(buf);
   150bc:	4628      	mov	r0, r5
   150be:	f006 fd95 	bl	1bbec <net_buf_unref>
		return false;
   150c2:	2000      	movs	r0, #0
   150c4:	e000      	b.n	150c8 <secure_beacon_send+0x68>
		return true; /* Bail out */
   150c6:	2001      	movs	r0, #1
}
   150c8:	b003      	add	sp, #12
   150ca:	bd30      	pop	{r4, r5, pc}
   150cc:	000927bf 	.word	0x000927bf
   150d0:	000268d8 	.word	0x000268d8

000150d4 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
   150d4:	b523      	push	{r0, r1, r5, lr}
   150d6:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
   150d8:	f000 fed0 	bl	15e7c <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   150dc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   150e0:	1e9a      	subs	r2, r3, #2
   150e2:	4253      	negs	r3, r2
   150e4:	4153      	adcs	r3, r2
	uint8_t flags = bt_mesh_net_flags(sub);
   150e6:	4601      	mov	r1, r0

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
   150e8:	204a      	movs	r0, #74	; 0x4a
   150ea:	4343      	muls	r3, r0
   150ec:	f103 0262 	add.w	r2, r3, #98	; 0x62
   150f0:	f103 006a 	add.w	r0, r3, #106	; 0x6a
				   bt_mesh.iv_index, sub->auth);
   150f4:	f105 0328 	add.w	r3, r5, #40	; 0x28
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
   150f8:	9300      	str	r3, [sp, #0]
   150fa:	4b04      	ldr	r3, [pc, #16]	; (1510c <bt_mesh_beacon_update+0x38>)
   150fc:	442a      	add	r2, r5
   150fe:	681b      	ldr	r3, [r3, #0]
   15100:	4428      	add	r0, r5
   15102:	f00d fe76 	bl	22df2 <bt_mesh_beacon_auth>
	if (err) {
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
	}
}
   15106:	b002      	add	sp, #8
   15108:	bd20      	pop	{r5, pc}
   1510a:	bf00      	nop
   1510c:	20001d40 	.word	0x20001d40

00015110 <bt_mesh_beacon_init>:
	.evt_handler = subnet_evt,
};

void bt_mesh_beacon_init(void)
{
	k_work_init_delayable(&beacon_timer, beacon_send);
   15110:	4901      	ldr	r1, [pc, #4]	; (15118 <bt_mesh_beacon_init+0x8>)
   15112:	4802      	ldr	r0, [pc, #8]	; (1511c <bt_mesh_beacon_init+0xc>)
   15114:	f010 bd50 	b.w	25bb8 <k_work_init_delayable>
   15118:	00014ed9 	.word	0x00014ed9
   1511c:	20001d10 	.word	0x20001d10

00015120 <bt_mesh_beacon_ivu_initiator>:
	if (val) {
   15120:	4b0d      	ldr	r3, [pc, #52]	; (15158 <bt_mesh_beacon_ivu_initiator+0x38>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15122:	f3bf 8f5b 	dmb	ish
   15126:	b170      	cbz	r0, 15146 <bt_mesh_beacon_ivu_initiator+0x26>
   15128:	e853 2f00 	ldrex	r2, [r3]
   1512c:	f042 0208 	orr.w	r2, r2, #8
   15130:	e843 2100 	strex	r1, r2, [r3]
   15134:	2900      	cmp	r1, #0
   15136:	d1f7      	bne.n	15128 <bt_mesh_beacon_ivu_initiator+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15138:	f3bf 8f5b 	dmb	ish
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
   1513c:	4807      	ldr	r0, [pc, #28]	; (1515c <bt_mesh_beacon_ivu_initiator+0x3c>)
   1513e:	2200      	movs	r2, #0
   15140:	2300      	movs	r3, #0
   15142:	f009 bd39 	b.w	1ebb8 <k_work_schedule>
   15146:	e853 2f00 	ldrex	r2, [r3]
   1514a:	f022 0208 	bic.w	r2, r2, #8
   1514e:	e843 2100 	strex	r1, r2, [r3]
   15152:	2900      	cmp	r1, #0
   15154:	d0f0      	beq.n	15138 <bt_mesh_beacon_ivu_initiator+0x18>
   15156:	e7f6      	b.n	15146 <bt_mesh_beacon_ivu_initiator+0x26>
   15158:	20001d48 	.word	0x20001d48
   1515c:	20001d10 	.word	0x20001d10

00015160 <bt_mesh_beacon_recv>:
{
   15160:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
   15162:	8883      	ldrh	r3, [r0, #4]
{
   15164:	b085      	sub	sp, #20
   15166:	4604      	mov	r4, r0
	if (buf->len < 1) {
   15168:	b12b      	cbz	r3, 15176 <bt_mesh_beacon_recv+0x16>
	type = net_buf_simple_pull_u8(buf);
   1516a:	f00f fed1 	bl	24f10 <net_buf_simple_pull_u8>
	switch (type) {
   1516e:	4605      	mov	r5, r0
   15170:	b118      	cbz	r0, 1517a <bt_mesh_beacon_recv+0x1a>
   15172:	2801      	cmp	r0, #1
   15174:	d022      	beq.n	151bc <bt_mesh_beacon_recv+0x5c>
}
   15176:	b005      	add	sp, #20
   15178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len != 18 && buf->len != 22) {
   1517a:	88a3      	ldrh	r3, [r4, #4]
   1517c:	f023 0304 	bic.w	r3, r3, #4
   15180:	b29b      	uxth	r3, r3
   15182:	2b12      	cmp	r3, #18
   15184:	d1f7      	bne.n	15176 <bt_mesh_beacon_recv+0x16>
	uuid = net_buf_simple_pull_mem(buf, 16);
   15186:	2110      	movs	r1, #16
   15188:	4620      	mov	r0, r4
   1518a:	f00f feb9 	bl	24f00 <net_buf_simple_pull_mem>
   1518e:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
   15190:	4620      	mov	r0, r4
   15192:	f00f fecd 	bl	24f30 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
   15196:	88a3      	ldrh	r3, [r4, #4]
   15198:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
   1519a:	4607      	mov	r7, r0
	if (buf->len == 4) {
   1519c:	d104      	bne.n	151a8 <bt_mesh_beacon_recv+0x48>
		uri_hash_val = net_buf_simple_pull_be32(buf);
   1519e:	4620      	mov	r0, r4
   151a0:	f00f fede 	bl	24f60 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
   151a4:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
   151a6:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
   151a8:	f004 f83e 	bl	19228 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
   151ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
   151ae:	2b00      	cmp	r3, #0
   151b0:	d0e1      	beq.n	15176 <bt_mesh_beacon_recv+0x16>
		prov->unprovisioned_beacon(uuid,
   151b2:	462a      	mov	r2, r5
   151b4:	4639      	mov	r1, r7
   151b6:	4630      	mov	r0, r6
   151b8:	4798      	blx	r3
   151ba:	e7dc      	b.n	15176 <bt_mesh_beacon_recv+0x16>
	if (buf->len < 21) {
   151bc:	88a3      	ldrh	r3, [r4, #4]
   151be:	2b14      	cmp	r3, #20
   151c0:	d9d9      	bls.n	15176 <bt_mesh_beacon_recv+0x16>
	sub = bt_mesh_subnet_find(beacon_cache_match, buf->data);
   151c2:	6821      	ldr	r1, [r4, #0]
   151c4:	4834      	ldr	r0, [pc, #208]	; (15298 <bt_mesh_beacon_recv+0x138>)
   151c6:	f000 ff87 	bl	160d8 <bt_mesh_subnet_find>
	if (sub) {
   151ca:	4605      	mov	r5, r0
   151cc:	2800      	cmp	r0, #0
   151ce:	d153      	bne.n	15278 <bt_mesh_beacon_recv+0x118>
	params.flags = net_buf_simple_pull_u8(buf);
   151d0:	4620      	mov	r0, r4
	data = buf->data;
   151d2:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
   151d4:	f00f fe9c 	bl	24f10 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
   151d8:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
   151da:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
   151de:	4620      	mov	r0, r4
   151e0:	f00f fe8e 	bl	24f00 <net_buf_simple_pull_mem>
   151e4:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
   151e6:	4620      	mov	r0, r4
   151e8:	f00f feba 	bl	24f60 <net_buf_simple_pull_be32>
	params.auth = buf->data;
   151ec:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
   151ee:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
   151f0:	4669      	mov	r1, sp
   151f2:	482a      	ldr	r0, [pc, #168]	; (1529c <bt_mesh_beacon_recv+0x13c>)
	params.auth = buf->data;
   151f4:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
   151f6:	f000 ff6f 	bl	160d8 <bt_mesh_subnet_find>
	if (!sub) {
   151fa:	4605      	mov	r5, r0
   151fc:	2800      	cmp	r0, #0
   151fe:	d0ba      	beq.n	15176 <bt_mesh_beacon_recv+0x16>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
   15200:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   15204:	2b02      	cmp	r3, #2
   15206:	d103      	bne.n	15210 <bt_mesh_beacon_recv+0xb0>
   15208:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1520c:	2b00      	cmp	r3, #0
   1520e:	d0b2      	beq.n	15176 <bt_mesh_beacon_recv+0x16>
	memcpy(sub->beacon_cache, data, 21);
   15210:	2215      	movs	r2, #21
   15212:	4631      	mov	r1, r6
   15214:	f105 000a 	add.w	r0, r5, #10
   15218:	f00c fbee 	bl	219f8 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
   1521c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   15220:	f89d 200d 	ldrb.w	r2, [sp, #13]
   15224:	4628      	mov	r0, r5
   15226:	f001 0101 	and.w	r1, r1, #1
   1522a:	f00d f972 	bl	22512 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
   1522e:	2000      	movs	r0, #0
   15230:	f000 fe54 	bl	15edc <bt_mesh_subnet_get>
   15234:	b108      	cbz	r0, 1523a <bt_mesh_beacon_recv+0xda>
   15236:	8c2b      	ldrh	r3, [r5, #32]
   15238:	b9f3      	cbnz	r3, 15278 <bt_mesh_beacon_recv+0x118>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1523a:	f3bf 8f5b 	dmb	ish
   1523e:	4b18      	ldr	r3, [pc, #96]	; (152a0 <bt_mesh_beacon_recv+0x140>)
   15240:	681a      	ldr	r2, [r3, #0]
   15242:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   15246:	0712      	lsls	r2, r2, #28
   15248:	d50f      	bpl.n	1526a <bt_mesh_beacon_recv+0x10a>
   1524a:	f3bf 8f5b 	dmb	ish
   1524e:	681a      	ldr	r2, [r3, #0]
   15250:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
   15254:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   15258:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
   1525c:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   15260:	429a      	cmp	r2, r3
   15262:	d102      	bne.n	1526a <bt_mesh_beacon_recv+0x10a>
		bt_mesh_beacon_ivu_initiator(false);
   15264:	2000      	movs	r0, #0
   15266:	f7ff ff5b 	bl	15120 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
   1526a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1526e:	9802      	ldr	r0, [sp, #8]
   15270:	f3c1 0140 	ubfx	r1, r1, #1, #1
   15274:	f000 f9de 	bl	15634 <bt_mesh_net_iv_update>
	if (bt_mesh_beacon_enabled() &&
   15278:	f7ff fcbe 	bl	14bf8 <bt_mesh_beacon_enabled>
   1527c:	2800      	cmp	r0, #0
   1527e:	f43f af7a 	beq.w	15176 <bt_mesh_beacon_recv+0x16>
	    sub->beacons_cur < 0xff) {
   15282:	7a6b      	ldrb	r3, [r5, #9]
	if (bt_mesh_beacon_enabled() &&
   15284:	2bff      	cmp	r3, #255	; 0xff
   15286:	f43f af76 	beq.w	15176 <bt_mesh_beacon_recv+0x16>
		sub->beacons_cur++;
   1528a:	3301      	adds	r3, #1
   1528c:	726b      	strb	r3, [r5, #9]
		sub->beacon_recv = k_uptime_get_32();
   1528e:	f00d f8c8 	bl	22422 <k_uptime_get_32>
   15292:	6068      	str	r0, [r5, #4]
   15294:	e76f      	b.n	15176 <bt_mesh_beacon_recv+0x16>
   15296:	bf00      	nop
   15298:	000223b5 	.word	0x000223b5
   1529c:	000223c7 	.word	0x000223c7
   152a0:	20001d48 	.word	0x20001d48

000152a4 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
   152a4:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
   152a6:	f7ff fba9 	bl	149fc <bt_mesh_is_provisioned>
   152aa:	b110      	cbz	r0, 152b2 <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
   152ac:	4804      	ldr	r0, [pc, #16]	; (152c0 <bt_mesh_beacon_enable+0x1c>)
   152ae:	f000 ff25 	bl	160fc <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
   152b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
   152b6:	4803      	ldr	r0, [pc, #12]	; (152c4 <bt_mesh_beacon_enable+0x20>)
   152b8:	2200      	movs	r2, #0
   152ba:	2300      	movs	r3, #0
   152bc:	f009 bcb0 	b.w	1ec20 <k_work_reschedule>
   152c0:	0002245d 	.word	0x0002245d
   152c4:	20001d10 	.word	0x20001d10

000152c8 <bt_mesh_beacon_disable>:
   152c8:	4b05      	ldr	r3, [pc, #20]	; (152e0 <bt_mesh_beacon_disable+0x18>)
   152ca:	f3bf 8f5b 	dmb	ish
   152ce:	681b      	ldr	r3, [r3, #0]
   152d0:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
   152d4:	071b      	lsls	r3, r3, #28
   152d6:	d402      	bmi.n	152de <bt_mesh_beacon_disable+0x16>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
   152d8:	4802      	ldr	r0, [pc, #8]	; (152e4 <bt_mesh_beacon_disable+0x1c>)
   152da:	f010 bc7b 	b.w	25bd4 <k_work_cancel_delayable>
	}
}
   152de:	4770      	bx	lr
   152e0:	20001d48 	.word	0x20001d48
   152e4:	20001d10 	.word	0x20001d10

000152e8 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
   152e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152ec:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
   152ee:	680b      	ldr	r3, [r1, #0]
{
   152f0:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
   152f2:	781a      	ldrb	r2, [r3, #0]
{
   152f4:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
   152f6:	7830      	ldrb	r0, [r6, #0]
   152f8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   152fc:	4298      	cmp	r0, r3
   152fe:	d002      	beq.n	15306 <net_decrypt+0x1e>
		return false;
   15300:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
   15302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
   15306:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 153d0 <net_decrypt+0xe8>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
   1530a:	7d2f      	ldrb	r7, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
   1530c:	f8d8 3000 	ldr.w	r3, [r8]
   15310:	f003 0301 	and.w	r3, r3, #1
   15314:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   15318:	463a      	mov	r2, r7
   1531a:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
   1531e:	2300      	movs	r3, #0
   15320:	752a      	strb	r2, [r5, #20]
   15322:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
   15324:	68a3      	ldr	r3, [r4, #8]
   15326:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
   15328:	888a      	ldrh	r2, [r1, #4]
   1532a:	6809      	ldr	r1, [r1, #0]
   1532c:	4620      	mov	r0, r4
   1532e:	f00f fd7d 	bl	24e2c <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
   15332:	7d2b      	ldrb	r3, [r5, #20]
   15334:	f8d8 1000 	ldr.w	r1, [r8]
   15338:	6820      	ldr	r0, [r4, #0]
   1533a:	f003 0301 	and.w	r3, r3, #1
   1533e:	f106 0211 	add.w	r2, r6, #17
   15342:	1ac9      	subs	r1, r1, r3
   15344:	f002 fbbc 	bl	17ac0 <bt_mesh_net_obfuscate>
   15348:	2800      	cmp	r0, #0
   1534a:	d1d9      	bne.n	15300 <net_decrypt+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
   1534c:	6823      	ldr	r3, [r4, #0]
   1534e:	f8b3 2005 	ldrh.w	r2, [r3, #5]
   15352:	ba52      	rev16	r2, r2
   15354:	b290      	uxth	r0, r2
	rx->ctx.addr = SRC(out->data);
   15356:	812a      	strh	r2, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
   15358:	b212      	sxth	r2, r2
   1535a:	2a00      	cmp	r2, #0
   1535c:	ddd0      	ble.n	15300 <net_decrypt+0x18>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
   1535e:	f002 ff23 	bl	181a8 <bt_mesh_has_addr>
   15362:	2800      	cmp	r0, #0
   15364:	d1cc      	bne.n	15300 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
   15366:	7d2d      	ldrb	r5, [r5, #20]
   15368:	f015 0130 	ands.w	r1, r5, #48	; 0x30
   1536c:	d11d      	bne.n	153aa <net_decrypt+0xc2>
		if (msg_cache[i].src == SRC(pdu->data) &&
   1536e:	6823      	ldr	r3, [r4, #0]
   15370:	f8df b060 	ldr.w	fp, [pc, #96]	; 153d4 <net_decrypt+0xec>
   15374:	f8b3 9005 	ldrh.w	r9, [r3, #5]
   15378:	fa99 f999 	rev16.w	r9, r9
   1537c:	fa1f f989 	uxth.w	r9, r9
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
   15380:	f103 0a02 	add.w	sl, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
   15384:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
   15388:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1538c:	454b      	cmp	r3, r9
   1538e:	d109      	bne.n	153a4 <net_decrypt+0xbc>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
   15390:	4650      	mov	r0, sl
   15392:	f00d f867 	bl	22464 <sys_get_be24>
   15396:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
   1539a:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
   1539e:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
   153a2:	d0ad      	beq.n	15300 <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
   153a4:	3101      	adds	r1, #1
   153a6:	2920      	cmp	r1, #32
   153a8:	d1ec      	bne.n	15384 <net_decrypt+0x9c>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
   153aa:	f007 0330 	and.w	r3, r7, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
   153ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   153b2:	f8d8 2000 	ldr.w	r2, [r8]
   153b6:	424b      	negs	r3, r1
   153b8:	f005 0501 	and.w	r5, r5, #1
   153bc:	414b      	adcs	r3, r1
   153be:	1b52      	subs	r2, r2, r5
   153c0:	4621      	mov	r1, r4
   153c2:	1c70      	adds	r0, r6, #1
   153c4:	f00d fc4c 	bl	22c60 <bt_mesh_net_decrypt>
				   proxy) == 0;
   153c8:	fab0 f080 	clz	r0, r0
   153cc:	0940      	lsrs	r0, r0, #5
   153ce:	e798      	b.n	15302 <net_decrypt+0x1a>
   153d0:	20001d40 	.word	0x20001d40
   153d4:	200026cc 	.word	0x200026cc

000153d8 <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
   153d8:	b513      	push	{r0, r1, r4, lr}
   153da:	460c      	mov	r4, r1
   153dc:	4610      	mov	r0, r2
   153de:	4619      	mov	r1, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
   153e0:	b924      	cbnz	r4, 153ec <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
   153e2:	4b0b      	ldr	r3, [pc, #44]	; (15410 <seq_set+0x38>)
		return 0;
   153e4:	4620      	mov	r0, r4
		bt_mesh.seq = 0U;
   153e6:	605c      	str	r4, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
   153e8:	b002      	add	sp, #8
   153ea:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
   153ec:	2303      	movs	r3, #3
   153ee:	aa01      	add	r2, sp, #4
   153f0:	f00f fa7e 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   153f4:	2800      	cmp	r0, #0
   153f6:	d1f7      	bne.n	153e8 <seq_set+0x10>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   153f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   153fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
   15404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
   15408:	4a01      	ldr	r2, [pc, #4]	; (15410 <seq_set+0x38>)
   1540a:	337f      	adds	r3, #127	; 0x7f
   1540c:	6053      	str	r3, [r2, #4]
	return 0;
   1540e:	e7eb      	b.n	153e8 <seq_set+0x10>
   15410:	20001d40 	.word	0x20001d40

00015414 <net_set>:
{
   15414:	b510      	push	{r4, lr}
   15416:	460c      	mov	r4, r1
   15418:	b086      	sub	sp, #24
   1541a:	4610      	mov	r0, r2
   1541c:	4619      	mov	r1, r3
	if (len_rd == 0) {
   1541e:	b94c      	cbnz	r4, 15434 <net_set+0x20>
		bt_mesh_comp_unprovision();
   15420:	f002 fea2 	bl	18168 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   15424:	480c      	ldr	r0, [pc, #48]	; (15458 <net_set+0x44>)
   15426:	2210      	movs	r2, #16
   15428:	4621      	mov	r1, r4
   1542a:	f00c faf0 	bl	21a0e <memset>
}
   1542e:	4620      	mov	r0, r4
   15430:	b006      	add	sp, #24
   15432:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
   15434:	2312      	movs	r3, #18
   15436:	aa01      	add	r2, sp, #4
   15438:	f00f fa5a 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1543c:	4604      	mov	r4, r0
   1543e:	2800      	cmp	r0, #0
   15440:	d1f5      	bne.n	1542e <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
   15442:	2210      	movs	r2, #16
   15444:	f10d 0106 	add.w	r1, sp, #6
   15448:	4803      	ldr	r0, [pc, #12]	; (15458 <net_set+0x44>)
   1544a:	f00c fad5 	bl	219f8 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
   1544e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   15452:	f002 fe73 	bl	1813c <bt_mesh_comp_provision>
	return 0;
   15456:	e7ea      	b.n	1542e <net_set+0x1a>
   15458:	20001d98 	.word	0x20001d98

0001545c <bt_mesh_net_local>:
{
   1545c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return list->head;
   1545e:	4e2e      	ldr	r6, [pc, #184]	; (15518 <bt_mesh_net_local+0xbc>)
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   15460:	4d2e      	ldr	r5, [pc, #184]	; (1551c <bt_mesh_net_local+0xc0>)
{
   15462:	b08b      	sub	sp, #44	; 0x2c
   15464:	69f4      	ldr	r4, [r6, #28]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15466:	2c00      	cmp	r4, #0
   15468:	d053      	beq.n	15512 <bt_mesh_net_local+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1546a:	6a32      	ldr	r2, [r6, #32]
	return node->next;
   1546c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1546e:	61f3      	str	r3, [r6, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15470:	4294      	cmp	r4, r2
		struct bt_mesh_net_rx rx = {
   15472:	f04f 0100 	mov.w	r1, #0
   15476:	f04f 0210 	mov.w	r2, #16
   1547a:	a806      	add	r0, sp, #24
	list->tail = node;
   1547c:	bf08      	it	eq
   1547e:	6233      	streq	r3, [r6, #32]
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
   15480:	9400      	str	r4, [sp, #0]
		struct bt_mesh_net_rx rx = {
   15482:	f00c fac4 	bl	21a0e <memset>
			.sub = buf->sub,
   15486:	6867      	ldr	r7, [r4, #4]
		struct bt_mesh_net_rx rx = {
   15488:	9704      	str	r7, [sp, #16]
   1548a:	8c3b      	ldrh	r3, [r7, #32]
   1548c:	f8ad 3014 	strh.w	r3, [sp, #20]
   15490:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15494:	f8ad 3016 	strh.w	r3, [sp, #22]
   15498:	89e3      	ldrh	r3, [r4, #14]
   1549a:	ba5b      	rev16	r3, r3
   1549c:	f8ad 3018 	strh.w	r3, [sp, #24]
   154a0:	8a23      	ldrh	r3, [r4, #16]
   154a2:	ba5b      	rev16	r3, r3
   154a4:	f8ad 301a 	strh.w	r3, [sp, #26]
				.recv_ttl = TTL(buf->data),
   154a8:	7aa1      	ldrb	r1, [r4, #10]
   154aa:	f001 037f 	and.w	r3, r1, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
   154ae:	f88d 301d 	strb.w	r3, [sp, #29]
			.seq = SEQ(buf->data),
   154b2:	f104 000b 	add.w	r0, r4, #11
		struct bt_mesh_net_rx rx = {
   154b6:	2301      	movs	r3, #1
   154b8:	f88d 301f 	strb.w	r3, [sp, #31]
			.seq = SEQ(buf->data),
   154bc:	f00c ffd2 	bl	22464 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
   154c0:	6833      	ldr	r3, [r6, #0]
		struct bt_mesh_net_rx rx = {
   154c2:	9008      	str	r0, [sp, #32]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
   154c4:	7a62      	ldrb	r2, [r4, #9]
   154c6:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
   154ca:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
			.new_key = SUBNET_KEY_TX_IDX(buf->sub),
   154ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   154d2:	1e90      	subs	r0, r2, #2
   154d4:	4242      	negs	r2, r0
   154d6:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
   154d8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   154dc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   154e0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
			.ctl = CTL(buf->data),
   154e4:	09c9      	lsrs	r1, r1, #7
		struct bt_mesh_net_rx rx = {
   154e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
   154ea:	f022 027b 	bic.w	r2, r2, #123	; 0x7b
   154ee:	4313      	orrs	r3, r2
   154f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		net_buf_simple_init_with_data(&sbuf, buf->data, buf->len);
   154f4:	7a22      	ldrb	r2, [r4, #8]
   154f6:	f104 0109 	add.w	r1, r4, #9
   154fa:	a801      	add	r0, sp, #4
   154fc:	f00f fc2c 	bl	24d58 <net_buf_simple_init_with_data>
		(void)bt_mesh_trans_recv(&sbuf, &rx);
   15500:	a904      	add	r1, sp, #16
   15502:	a801      	add	r0, sp, #4
   15504:	f001 ff3c 	bl	17380 <bt_mesh_trans_recv>
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   15508:	4669      	mov	r1, sp
   1550a:	4628      	mov	r0, r5
   1550c:	f010 f984 	bl	25818 <k_mem_slab_free>
   15510:	e7a8      	b.n	15464 <bt_mesh_net_local+0x8>
}
   15512:	b00b      	add	sp, #44	; 0x2c
   15514:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15516:	bf00      	nop
   15518:	20001d40 	.word	0x20001d40
   1551c:	20000b14 	.word	0x20000b14

00015520 <atomic_get.constprop.0>:
   15520:	4b03      	ldr	r3, [pc, #12]	; (15530 <atomic_get.constprop.0+0x10>)
   15522:	f3bf 8f5b 	dmb	ish
   15526:	6898      	ldr	r0, [r3, #8]
   15528:	f3bf 8f5b 	dmb	ish
}
   1552c:	4770      	bx	lr
   1552e:	bf00      	nop
   15530:	20001d40 	.word	0x20001d40

00015534 <atomic_set_bit_to.constprop.0>:
   15534:	4b0b      	ldr	r3, [pc, #44]	; (15564 <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15536:	f3bf 8f5b 	dmb	ish
   1553a:	b150      	cbz	r0, 15552 <atomic_set_bit_to.constprop.0+0x1e>
   1553c:	e853 2f00 	ldrex	r2, [r3]
   15540:	f042 0204 	orr.w	r2, r2, #4
   15544:	e843 2100 	strex	r1, r2, [r3]
   15548:	2900      	cmp	r1, #0
   1554a:	d1f7      	bne.n	1553c <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1554c:	f3bf 8f5b 	dmb	ish
	}
}
   15550:	4770      	bx	lr
   15552:	e853 2f00 	ldrex	r2, [r3]
   15556:	f022 0204 	bic.w	r2, r2, #4
   1555a:	e843 2100 	strex	r1, r2, [r3]
   1555e:	2900      	cmp	r1, #0
   15560:	d0f4      	beq.n	1554c <atomic_set_bit_to.constprop.0+0x18>
   15562:	e7f6      	b.n	15552 <atomic_set_bit_to.constprop.0+0x1e>
   15564:	20001d48 	.word	0x20001d48

00015568 <iv_set>:
{
   15568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1556a:	460c      	mov	r4, r1
   1556c:	4610      	mov	r0, r2
   1556e:	4619      	mov	r1, r3
	if (len_rd == 0) {
   15570:	b98c      	cbnz	r4, 15596 <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
   15572:	4b14      	ldr	r3, [pc, #80]	; (155c4 <iv_set+0x5c>)
   15574:	f843 4b08 	str.w	r4, [r3], #8
   15578:	f3bf 8f5b 	dmb	ish
   1557c:	e853 2f00 	ldrex	r2, [r3]
   15580:	f022 0204 	bic.w	r2, r2, #4
   15584:	e843 2100 	strex	r1, r2, [r3]
   15588:	2900      	cmp	r1, #0
   1558a:	d1f7      	bne.n	1557c <iv_set+0x14>
   1558c:	f3bf 8f5b 	dmb	ish
}
   15590:	4620      	mov	r0, r4
   15592:	b003      	add	sp, #12
   15594:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
   15596:	2305      	movs	r3, #5
   15598:	466a      	mov	r2, sp
   1559a:	f00f f9a9 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1559e:	4604      	mov	r4, r0
   155a0:	2800      	cmp	r0, #0
   155a2:	d1f5      	bne.n	15590 <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   155a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
   155a8:	4d06      	ldr	r5, [pc, #24]	; (155c4 <iv_set+0x5c>)
   155aa:	9b00      	ldr	r3, [sp, #0]
   155ac:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   155ae:	f000 0001 	and.w	r0, r0, #1
   155b2:	f7ff ffbf 	bl	15534 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = iv.iv_duration;
   155b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   155ba:	f3c3 0346 	ubfx	r3, r3, #1, #7
   155be:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return 0;
   155c2:	e7e5      	b.n	15590 <iv_set+0x28>
   155c4:	20001d40 	.word	0x20001d40

000155c8 <bt_mesh_net_create>:
{
   155c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155cc:	460d      	mov	r5, r1
   155ce:	461f      	mov	r7, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
   155d0:	f015 0301 	ands.w	r3, r5, #1
{
   155d4:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
   155d6:	bf1d      	ittte	ne
   155d8:	4613      	movne	r3, r2
   155da:	2102      	movne	r1, #2
   155dc:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
   155de:	4619      	moveq	r1, r3
{
   155e0:	4606      	mov	r6, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
   155e2:	f000 fd45 	bl	16070 <bt_mesh_subnet_set>
   155e6:	4604      	mov	r4, r0
	if (err) {
   155e8:	b9d8      	cbnz	r0, 15622 <bt_mesh_net_create+0x5a>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
   155ea:	4601      	mov	r1, r0
   155ec:	2280      	movs	r2, #128	; 0x80
   155ee:	480e      	ldr	r0, [pc, #56]	; (15628 <bt_mesh_net_create+0x60>)
	bt_mesh.iv_index = iv_index;
   155f0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1562c <bt_mesh_net_create+0x64>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
   155f4:	f00c fa0b 	bl	21a0e <memset>
	msg_cache_next = 0U;
   155f8:	4b0d      	ldr	r3, [pc, #52]	; (15630 <bt_mesh_net_create+0x68>)
	bt_mesh.iv_index = iv_index;
   155fa:	f8c8 7000 	str.w	r7, [r8]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
   155fe:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
   15602:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
   15604:	f7ff ff96 	bl	15534 <atomic_set_bit_to.constprop.0>
	if (BT_MESH_IV_UPDATE(flags)) {
   15608:	b110      	cbz	r0, 15610 <bt_mesh_net_create+0x48>
		bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
   1560a:	2360      	movs	r3, #96	; 0x60
   1560c:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
		bt_mesh_subnet_store(idx);
   15610:	4630      	mov	r0, r6
   15612:	f00c ff50 	bl	224b6 <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   15616:	2004      	movs	r0, #4
   15618:	f003 f9fa 	bl	18a10 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   1561c:	2005      	movs	r0, #5
   1561e:	f003 f9f7 	bl	18a10 <bt_mesh_settings_store_schedule>
}
   15622:	4620      	mov	r0, r4
   15624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15628:	200026cc 	.word	0x200026cc
   1562c:	20001d40 	.word	0x20001d40
   15630:	20002b66 	.word	0x20002b66

00015634 <bt_mesh_net_iv_update>:
{
   15634:	b570      	push	{r4, r5, r6, lr}
	if (iv_index < bt_mesh.iv_index ||
   15636:	4d33      	ldr	r5, [pc, #204]	; (15704 <bt_mesh_net_iv_update+0xd0>)
   15638:	682b      	ldr	r3, [r5, #0]
   1563a:	4283      	cmp	r3, r0
{
   1563c:	4606      	mov	r6, r0
   1563e:	460c      	mov	r4, r1
	if (iv_index < bt_mesh.iv_index ||
   15640:	d902      	bls.n	15648 <bt_mesh_net_iv_update+0x14>
		return false;
   15642:	2400      	movs	r4, #0
}
   15644:	4620      	mov	r0, r4
   15646:	bd70      	pop	{r4, r5, r6, pc}
	    iv_index > bt_mesh.iv_index + 42) {
   15648:	f103 022a 	add.w	r2, r3, #42	; 0x2a
	if (iv_index < bt_mesh.iv_index ||
   1564c:	4282      	cmp	r2, r0
   1564e:	d3f8      	bcc.n	15642 <bt_mesh_net_iv_update+0xe>
	if ((iv_index > bt_mesh.iv_index + 1) ||
   15650:	3301      	adds	r3, #1
   15652:	4283      	cmp	r3, r0
   15654:	d224      	bcs.n	156a0 <bt_mesh_net_iv_update+0x6c>
		if (ivi_was_recovered &&
   15656:	4b2c      	ldr	r3, [pc, #176]	; (15708 <bt_mesh_net_iv_update+0xd4>)
   15658:	781a      	ldrb	r2, [r3, #0]
   1565a:	2a00      	cmp	r2, #0
   1565c:	d143      	bne.n	156e6 <bt_mesh_net_iv_update+0xb2>
		ivi_was_recovered = true;
   1565e:	2201      	movs	r2, #1
   15660:	701a      	strb	r2, [r3, #0]
		bt_mesh_rpl_clear();
   15662:	f003 fb45 	bl	18cf0 <bt_mesh_rpl_clear>
		bt_mesh.seq = 0U;
   15666:	2300      	movs	r3, #0
		bt_mesh.iv_index = iv_index;
   15668:	602e      	str	r6, [r5, #0]
		bt_mesh.seq = 0U;
   1566a:	606b      	str	r3, [r5, #4]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
   1566c:	4620      	mov	r0, r4
   1566e:	f7ff ff61 	bl	15534 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
   15672:	2300      	movs	r3, #0
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   15674:	4a25      	ldr	r2, [pc, #148]	; (1570c <bt_mesh_net_iv_update+0xd8>)
	bt_mesh.ivu_duration = 0U;
   15676:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   1567a:	4825      	ldr	r0, [pc, #148]	; (15710 <bt_mesh_net_iv_update+0xdc>)
   1567c:	2300      	movs	r3, #0
   1567e:	f009 facf 	bl	1ec20 <k_work_reschedule>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
   15682:	4824      	ldr	r0, [pc, #144]	; (15714 <bt_mesh_net_iv_update+0xe0>)
   15684:	f000 fd3a 	bl	160fc <bt_mesh_subnet_foreach>
		bt_mesh_cdb_iv_update(iv_index, iv_update);
   15688:	4621      	mov	r1, r4
   1568a:	4630      	mov	r0, r6
   1568c:	f005 fec6 	bl	1b41c <bt_mesh_cdb_iv_update>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   15690:	2004      	movs	r0, #4
   15692:	f003 f9bd 	bl	18a10 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   15696:	2005      	movs	r0, #5
   15698:	f003 f9ba 	bl	18a10 <bt_mesh_settings_store_schedule>
	return true;
   1569c:	2401      	movs	r4, #1
   1569e:	e7d1      	b.n	15644 <bt_mesh_net_iv_update+0x10>
	if ((iv_index > bt_mesh.iv_index + 1) ||
   156a0:	d105      	bne.n	156ae <bt_mesh_net_iv_update+0x7a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   156a2:	f7ff ff3d 	bl	15520 <atomic_get.constprop.0>
	    (iv_index == bt_mesh.iv_index + 1 &&
   156a6:	0743      	lsls	r3, r0, #29
   156a8:	d4d5      	bmi.n	15656 <bt_mesh_net_iv_update+0x22>
	     (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) || !iv_update))) {
   156aa:	2900      	cmp	r1, #0
   156ac:	d0d3      	beq.n	15656 <bt_mesh_net_iv_update+0x22>
   156ae:	f7ff ff37 	bl	15520 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) == iv_update) {
   156b2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   156b6:	42a0      	cmp	r0, r4
   156b8:	d0c3      	beq.n	15642 <bt_mesh_net_iv_update+0xe>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   156ba:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   156be:	2b5f      	cmp	r3, #95	; 0x5f
   156c0:	d9bf      	bls.n	15642 <bt_mesh_net_iv_update+0xe>
	if (!iv_update && bt_mesh_tx_in_progress()) {
   156c2:	b9ac      	cbnz	r4, 156f0 <bt_mesh_net_iv_update+0xbc>
   156c4:	f001 fbb6 	bl	16e34 <bt_mesh_tx_in_progress>
   156c8:	b1c8      	cbz	r0, 156fe <bt_mesh_net_iv_update+0xca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   156ca:	f3bf 8f5b 	dmb	ish
   156ce:	4b12      	ldr	r3, [pc, #72]	; (15718 <bt_mesh_net_iv_update+0xe4>)
   156d0:	e853 2f00 	ldrex	r2, [r3]
   156d4:	f042 0220 	orr.w	r2, r2, #32
   156d8:	e843 2100 	strex	r1, r2, [r3]
   156dc:	2900      	cmp	r1, #0
   156de:	d1f7      	bne.n	156d0 <bt_mesh_net_iv_update+0x9c>
   156e0:	f3bf 8f5b 	dmb	ish
   156e4:	e7ae      	b.n	15644 <bt_mesh_net_iv_update+0x10>
		if (ivi_was_recovered &&
   156e6:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   156ea:	2abf      	cmp	r2, #191	; 0xbf
   156ec:	d9a9      	bls.n	15642 <bt_mesh_net_iv_update+0xe>
   156ee:	e7b6      	b.n	1565e <bt_mesh_net_iv_update+0x2a>
		bt_mesh.iv_index = iv_index;
   156f0:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
   156f2:	f003 fb11 	bl	18d18 <bt_mesh_rpl_reset>
		ivi_was_recovered = false;
   156f6:	4b04      	ldr	r3, [pc, #16]	; (15708 <bt_mesh_net_iv_update+0xd4>)
   156f8:	2200      	movs	r2, #0
   156fa:	701a      	strb	r2, [r3, #0]
   156fc:	e7b6      	b.n	1566c <bt_mesh_net_iv_update+0x38>
		bt_mesh.seq = 0U;
   156fe:	606c      	str	r4, [r5, #4]
   15700:	e7b4      	b.n	1566c <bt_mesh_net_iv_update+0x38>
   15702:	bf00      	nop
   15704:	20001d40 	.word	0x20001d40
   15708:	20002c6d 	.word	0x20002c6d
   1570c:	a8c00000 	.word	0xa8c00000
   15710:	20001d68 	.word	0x20001d68
   15714:	000150d5 	.word	0x000150d5
   15718:	20001d48 	.word	0x20001d48

0001571c <ivu_refresh>:
{
   1571c:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   1571e:	f7ff f96d 	bl	149fc <bt_mesh_is_provisioned>
   15722:	b358      	cbz	r0, 1577c <ivu_refresh+0x60>
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
   15724:	4c16      	ldr	r4, [pc, #88]	; (15780 <ivu_refresh+0x64>)
   15726:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1572a:	2be7      	cmp	r3, #231	; 0xe7
   1572c:	bf28      	it	cs
   1572e:	23e7      	movcs	r3, #231	; 0xe7
   15730:	3318      	adds	r3, #24
   15732:	b2db      	uxtb	r3, r3
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   15734:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
   15736:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   1573a:	d809      	bhi.n	15750 <ivu_refresh+0x34>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   1573c:	2004      	movs	r0, #4
   1573e:	f003 f967 	bl	18a10 <bt_mesh_settings_store_schedule>
}
   15742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   15746:	4a0f      	ldr	r2, [pc, #60]	; (15784 <ivu_refresh+0x68>)
   15748:	480f      	ldr	r0, [pc, #60]	; (15788 <ivu_refresh+0x6c>)
   1574a:	2300      	movs	r3, #0
   1574c:	f009 ba68 	b.w	1ec20 <k_work_reschedule>
		goto end;
   15750:	2260      	movs	r2, #96	; 0x60
   15752:	fbb3 f1f2 	udiv	r1, r3, r2
   15756:	fb02 3311 	mls	r3, r2, r1, r3
	if (!(bt_mesh.ivu_duration % BT_MESH_IVU_MIN_HOURS)) {
   1575a:	b2db      	uxtb	r3, r3
   1575c:	b913      	cbnz	r3, 15764 <ivu_refresh+0x48>
		bt_mesh_subnet_foreach(bt_mesh_beacon_cache_clear);
   1575e:	480b      	ldr	r0, [pc, #44]	; (1578c <ivu_refresh+0x70>)
   15760:	f000 fccc 	bl	160fc <bt_mesh_subnet_foreach>
   15764:	f7ff fedc 	bl	15520 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   15768:	0743      	lsls	r3, r0, #29
   1576a:	d5e7      	bpl.n	1573c <ivu_refresh+0x20>
		bt_mesh_beacon_ivu_initiator(true);
   1576c:	2001      	movs	r0, #1
   1576e:	f7ff fcd7 	bl	15120 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
   15772:	6820      	ldr	r0, [r4, #0]
   15774:	2100      	movs	r1, #0
   15776:	f7ff ff5d 	bl	15634 <bt_mesh_net_iv_update>
   1577a:	e7e2      	b.n	15742 <ivu_refresh+0x26>
}
   1577c:	bd10      	pop	{r4, pc}
   1577e:	bf00      	nop
   15780:	20001d40 	.word	0x20001d40
   15784:	a8c00000 	.word	0xa8c00000
   15788:	20001d68 	.word	0x20001d68
   1578c:	00022449 	.word	0x00022449

00015790 <bt_mesh_next_seq>:
{
   15790:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
   15792:	4c10      	ldr	r4, [pc, #64]	; (157d4 <bt_mesh_next_seq+0x44>)
   15794:	6865      	ldr	r5, [r4, #4]
   15796:	1c6b      	adds	r3, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
   15798:	065a      	lsls	r2, r3, #25
	uint32_t seq = bt_mesh.seq++;
   1579a:	6063      	str	r3, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
   1579c:	d102      	bne.n	157a4 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   1579e:	2005      	movs	r0, #5
   157a0:	f003 f936 	bl	18a10 <bt_mesh_settings_store_schedule>
   157a4:	f7ff febc 	bl	15520 <atomic_get.constprop.0>
   157a8:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
   157aa:	075b      	lsls	r3, r3, #29
   157ac:	f3c0 0080 	ubfx	r0, r0, #2, #1
   157b0:	d40e      	bmi.n	157d0 <bt_mesh_next_seq+0x40>
   157b2:	6863      	ldr	r3, [r4, #4]
   157b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   157b8:	d90a      	bls.n	157d0 <bt_mesh_next_seq+0x40>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
   157ba:	f000 fb8f 	bl	15edc <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
   157be:	b138      	cbz	r0, 157d0 <bt_mesh_next_seq+0x40>
		bt_mesh_beacon_ivu_initiator(true);
   157c0:	2001      	movs	r0, #1
   157c2:	f7ff fcad 	bl	15120 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
   157c6:	6820      	ldr	r0, [r4, #0]
   157c8:	2101      	movs	r1, #1
   157ca:	4408      	add	r0, r1
   157cc:	f7ff ff32 	bl	15634 <bt_mesh_net_iv_update>
}
   157d0:	4628      	mov	r0, r5
   157d2:	bd38      	pop	{r3, r4, r5, pc}
   157d4:	20001d40 	.word	0x20001d40

000157d8 <net_header_encode>:
{
   157d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   157da:	6843      	ldr	r3, [r0, #4]
   157dc:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
   157de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   157e2:	429f      	cmp	r7, r3
{
   157e4:	4605      	mov	r5, r0
   157e6:	460e      	mov	r6, r1
   157e8:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
   157ea:	d007      	beq.n	157fc <net_header_encode+0x24>
	} else if (net_buf_simple_tailroom(buf) < 4) {
   157ec:	4620      	mov	r0, r4
   157ee:	f00f fbc4 	bl	24f7a <net_buf_simple_tailroom>
   157f2:	2803      	cmp	r0, #3
   157f4:	d808      	bhi.n	15808 <net_header_encode+0x30>
		return -EINVAL;
   157f6:	f06f 0015 	mvn.w	r0, #21
}
   157fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
   157fc:	4610      	mov	r0, r2
   157fe:	f00f fbbc 	bl	24f7a <net_buf_simple_tailroom>
   15802:	2807      	cmp	r0, #7
   15804:	d8f2      	bhi.n	157ec <net_header_encode+0x14>
   15806:	e7f6      	b.n	157f6 <net_header_encode+0x1e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
   15808:	686b      	ldr	r3, [r5, #4]
   1580a:	4620      	mov	r0, r4
   1580c:	8899      	ldrh	r1, [r3, #4]
   1580e:	f00f fb4a 	bl	24ea6 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
   15812:	8929      	ldrh	r1, [r5, #8]
   15814:	4620      	mov	r0, r4
   15816:	f00f fb46 	bl	24ea6 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
   1581a:	f7ff ffb9 	bl	15790 <bt_mesh_next_seq>
   1581e:	4601      	mov	r1, r0
   15820:	4620      	mov	r0, r4
   15822:	f00f fb55 	bl	24ed0 <net_buf_simple_push_be24>
	if (ctl) {
   15826:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1582a:	429f      	cmp	r7, r3
   1582c:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
   1582e:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
   15830:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
   15832:	bf08      	it	eq
   15834:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
   15838:	f00f fb41 	bl	24ebe <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
   1583c:	4b07      	ldr	r3, [pc, #28]	; (1585c <net_header_encode+0x84>)
   1583e:	7819      	ldrb	r1, [r3, #0]
   15840:	f7ff fe6e 	bl	15520 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15844:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15848:	1a09      	subs	r1, r1, r0
   1584a:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
   1584e:	4620      	mov	r0, r4
   15850:	b2c9      	uxtb	r1, r1
   15852:	f00f fb34 	bl	24ebe <net_buf_simple_push_u8>
	return 0;
   15856:	2000      	movs	r0, #0
   15858:	e7cf      	b.n	157fa <net_header_encode+0x22>
   1585a:	bf00      	nop
   1585c:	20001d40 	.word	0x20001d40

00015860 <bt_mesh_net_send>:
{
   15860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15864:	461f      	mov	r7, r3
	tx->friend_cred = 0U;
   15866:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15868:	f8d0 8000 	ldr.w	r8, [r0]
	tx->friend_cred = 0U;
   1586c:	f36f 0300 	bfc	r3, #0, #1
   15870:	72c3      	strb	r3, [r0, #11]
{
   15872:	460d      	mov	r5, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15874:	f898 1022 	ldrb.w	r1, [r8, #34]	; 0x22
{
   15878:	4616      	mov	r6, r2
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   1587a:	1e8a      	subs	r2, r1, #2
{
   1587c:	b085      	sub	sp, #20
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   1587e:	4253      	negs	r3, r2
   15880:	4153      	adcs	r3, r2
   15882:	9300      	str	r3, [sp, #0]
	err = net_header_encode(tx, cred->nid, &buf->b);
   15884:	9a00      	ldr	r2, [sp, #0]
   15886:	234a      	movs	r3, #74	; 0x4a
   15888:	fb03 8302 	mla	r3, r3, r2, r8
   1588c:	f105 0908 	add.w	r9, r5, #8
   15890:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
   15894:	464a      	mov	r2, r9
{
   15896:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
   15898:	f7ff ff9e 	bl	157d8 <net_header_encode>
	if (err) {
   1589c:	4683      	mov	fp, r0
   1589e:	2800      	cmp	r0, #0
   158a0:	d16a      	bne.n	15978 <bt_mesh_net_send+0x118>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
   158a2:	6863      	ldr	r3, [r4, #4]
   158a4:	8898      	ldrh	r0, [r3, #4]
   158a6:	f00c fd0b 	bl	222c0 <bt_mesh_fixed_group_match>
   158aa:	b170      	cbz	r0, 158ca <bt_mesh_net_send+0x6a>
		err = loopback(tx, buf->data, buf->len);
   158ac:	68ab      	ldr	r3, [r5, #8]
   158ae:	9301      	str	r3, [sp, #4]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
   158b0:	4835      	ldr	r0, [pc, #212]	; (15988 <bt_mesh_net_send+0x128>)
		err = loopback(tx, buf->data, buf->len);
   158b2:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
   158b6:	2200      	movs	r2, #0
   158b8:	2300      	movs	r3, #0
   158ba:	a903      	add	r1, sp, #12
   158bc:	f008 fdd2 	bl	1e464 <k_mem_slab_alloc>
	if (err) {
   158c0:	4683      	mov	fp, r0
   158c2:	b178      	cbz	r0, 158e4 <bt_mesh_net_send+0x84>
		return -ENOMEM;
   158c4:	f06f 0b0b 	mvn.w	fp, #11
   158c8:	e021      	b.n	1590e <bt_mesh_net_send+0xae>
	    bt_mesh_has_addr(tx->ctx->addr)) {
   158ca:	6863      	ldr	r3, [r4, #4]
   158cc:	8898      	ldrh	r0, [r3, #4]
   158ce:	f002 fc6b 	bl	181a8 <bt_mesh_has_addr>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
   158d2:	2800      	cmp	r0, #0
   158d4:	d1ea      	bne.n	158ac <bt_mesh_net_send+0x4c>
	if (tx->ctx->send_ttl == 1U) {
   158d6:	6863      	ldr	r3, [r4, #4]
   158d8:	7adb      	ldrb	r3, [r3, #11]
   158da:	2b01      	cmp	r3, #1
   158dc:	d11f      	bne.n	1591e <bt_mesh_net_send+0xbe>
		err = -EINVAL;
   158de:	f06f 0b15 	mvn.w	fp, #21
   158e2:	e049      	b.n	15978 <bt_mesh_net_send+0x118>
	buf->sub = tx->sub;
   158e4:	9803      	ldr	r0, [sp, #12]
   158e6:	6822      	ldr	r2, [r4, #0]
   158e8:	6042      	str	r2, [r0, #4]
	(void)memcpy(buf->data, data, len);
   158ea:	9901      	ldr	r1, [sp, #4]
   158ec:	4652      	mov	r2, sl
   158ee:	3009      	adds	r0, #9
   158f0:	f00c f882 	bl	219f8 <memcpy>
	buf->len = len;
   158f4:	9a03      	ldr	r2, [sp, #12]
	return list->tail;
   158f6:	4925      	ldr	r1, [pc, #148]	; (1598c <bt_mesh_net_send+0x12c>)
   158f8:	f882 a008 	strb.w	sl, [r2, #8]
   158fc:	6a08      	ldr	r0, [r1, #32]
	parent->next = child;
   158fe:	f8c2 b000 	str.w	fp, [r2]
Z_GENLIST_APPEND(slist, snode)
   15902:	bb38      	cbnz	r0, 15954 <bt_mesh_net_send+0xf4>
	list->head = node;
   15904:	e9c1 2207 	strd	r2, r2, [r1, #28]
	k_work_submit(&bt_mesh.local_work);
   15908:	4821      	ldr	r0, [pc, #132]	; (15990 <bt_mesh_net_send+0x130>)
   1590a:	f009 f8ed 	bl	1eae8 <k_work_submit>
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
   1590e:	6862      	ldr	r2, [r4, #4]
   15910:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
   15914:	2900      	cmp	r1, #0
   15916:	dc20      	bgt.n	1595a <bt_mesh_net_send+0xfa>
   15918:	7ad2      	ldrb	r2, [r2, #11]
   1591a:	2a01      	cmp	r2, #1
   1591c:	d01d      	beq.n	1595a <bt_mesh_net_send+0xfa>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
   1591e:	4b1b      	ldr	r3, [pc, #108]	; (1598c <bt_mesh_net_send+0x12c>)
   15920:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15922:	f7ff fdfd 	bl	15520 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15926:	9b00      	ldr	r3, [sp, #0]
   15928:	214a      	movs	r1, #74	; 0x4a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
   1592a:	f3c0 0080 	ubfx	r0, r0, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   1592e:	fb01 8103 	mla	r1, r1, r3, r8
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
   15932:	1a12      	subs	r2, r2, r0
   15934:	2300      	movs	r3, #0
   15936:	3141      	adds	r1, #65	; 0x41
   15938:	4648      	mov	r0, r9
   1593a:	f00c fd9b 	bl	22474 <net_encrypt>
	if (err) {
   1593e:	4683      	mov	fp, r0
   15940:	b9d0      	cbnz	r0, 15978 <bt_mesh_net_send+0x118>
	BT_MESH_ADV(buf)->cb = cb;
   15942:	696a      	ldr	r2, [r5, #20]
	bt_mesh_adv_send(buf, cb, cb_data);
   15944:	4631      	mov	r1, r6
	BT_MESH_ADV(buf)->cb_data = cb_data;
   15946:	e9c2 6700 	strd	r6, r7, [r2]
	bt_mesh_adv_send(buf, cb, cb_data);
   1594a:	4628      	mov	r0, r5
   1594c:	463a      	mov	r2, r7
   1594e:	f7ff fa95 	bl	14e7c <bt_mesh_adv_send>
   15952:	e011      	b.n	15978 <bt_mesh_net_send+0x118>
	parent->next = child;
   15954:	6002      	str	r2, [r0, #0]
	list->tail = node;
   15956:	620a      	str	r2, [r1, #32]
}
   15958:	e7d6      	b.n	15908 <bt_mesh_net_send+0xa8>
			if (!err) {
   1595a:	f1bb 0f00 	cmp.w	fp, #0
   1595e:	d10b      	bne.n	15978 <bt_mesh_net_send+0x118>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
   15960:	b156      	cbz	r6, 15978 <bt_mesh_net_send+0x118>
		return;
	}

	if (cb->start) {
   15962:	6834      	ldr	r4, [r6, #0]
   15964:	b11c      	cbz	r4, 1596e <bt_mesh_net_send+0x10e>
		cb->start(0, 0, cb_data);
   15966:	463a      	mov	r2, r7
   15968:	4659      	mov	r1, fp
   1596a:	4658      	mov	r0, fp
   1596c:	47a0      	blx	r4
	}

	if (cb->end) {
   1596e:	6872      	ldr	r2, [r6, #4]
   15970:	b112      	cbz	r2, 15978 <bt_mesh_net_send+0x118>
		cb->end(0, cb_data);
   15972:	4639      	mov	r1, r7
   15974:	2000      	movs	r0, #0
   15976:	4790      	blx	r2
	net_buf_unref(buf);
   15978:	4628      	mov	r0, r5
   1597a:	f006 f937 	bl	1bbec <net_buf_unref>
}
   1597e:	4658      	mov	r0, fp
   15980:	b005      	add	sp, #20
   15982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15986:	bf00      	nop
   15988:	20000b14 	.word	0x20000b14
   1598c:	20001d40 	.word	0x20001d40
   15990:	20001d4c 	.word	0x20001d4c

00015994 <bt_mesh_net_loopback_clear>:
{
   15994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	list->tail = NULL;
   15998:	2400      	movs	r4, #0
	return list->head;
   1599a:	4d14      	ldr	r5, [pc, #80]	; (159ec <bt_mesh_net_loopback_clear+0x58>)
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   1599c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 159f0 <bt_mesh_net_loopback_clear+0x5c>
{
   159a0:	4606      	mov	r6, r0
	list->head = NULL;
   159a2:	4627      	mov	r7, r4
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
   159a4:	f64f 78ff 	movw	r8, #65535	; 0xffff
	return list->head;
   159a8:	69eb      	ldr	r3, [r5, #28]
Z_GENLIST_GET(slist, snode)
   159aa:	b95b      	cbnz	r3, 159c4 <bt_mesh_net_loopback_clear+0x30>
	bt_mesh.local_queue = new_list;
   159ac:	e9c5 7407 	strd	r7, r4, [r5, #28]
}
   159b0:	b003      	add	sp, #12
   159b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   159b6:	2200      	movs	r2, #0
   159b8:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   159ba:	b10c      	cbz	r4, 159c0 <bt_mesh_net_loopback_clear+0x2c>
	parent->next = child;
   159bc:	6023      	str	r3, [r4, #0]
}
   159be:	e013      	b.n	159e8 <bt_mesh_net_loopback_clear+0x54>
	list->head = node;
   159c0:	461f      	mov	r7, r3
   159c2:	e011      	b.n	159e8 <bt_mesh_net_loopback_clear+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   159c4:	6a29      	ldr	r1, [r5, #32]
	return node->next;
   159c6:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   159c8:	61ea      	str	r2, [r5, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   159ca:	428b      	cmp	r3, r1
	list->tail = node;
   159cc:	bf08      	it	eq
   159ce:	622a      	streq	r2, [r5, #32]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
   159d0:	4546      	cmp	r6, r8
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
   159d2:	9301      	str	r3, [sp, #4]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
   159d4:	d003      	beq.n	159de <bt_mesh_net_loopback_clear+0x4a>
   159d6:	685a      	ldr	r2, [r3, #4]
   159d8:	8c12      	ldrh	r2, [r2, #32]
   159da:	42b2      	cmp	r2, r6
   159dc:	d1eb      	bne.n	159b6 <bt_mesh_net_loopback_clear+0x22>
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   159de:	a901      	add	r1, sp, #4
   159e0:	4648      	mov	r0, r9
   159e2:	f00f ff19 	bl	25818 <k_mem_slab_free>
   159e6:	4623      	mov	r3, r4
   159e8:	461c      	mov	r4, r3
   159ea:	e7dd      	b.n	159a8 <bt_mesh_net_loopback_clear+0x14>
   159ec:	20001d40 	.word	0x20001d40
   159f0:	20000b14 	.word	0x20000b14

000159f4 <bt_mesh_net_decode>:
{
   159f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159f8:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
   159fa:	8883      	ldrh	r3, [r0, #4]
{
   159fc:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
   159fe:	f1a3 0212 	sub.w	r2, r3, #18
   15a02:	2a0b      	cmp	r2, #11
{
   15a04:	460e      	mov	r6, r1
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
   15a06:	d86e      	bhi.n	15ae6 <bt_mesh_net_decode+0xf2>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
   15a08:	bb81      	cbnz	r1, 15a6c <bt_mesh_net_decode+0x78>
	return buf->data + buf->len;
   15a0a:	6805      	ldr	r5, [r0, #0]
   15a0c:	441d      	add	r5, r3
	return ((uint16_t)src[0] << 8) | src[1];
   15a0e:	f815 7c07 	ldrb.w	r7, [r5, #-7]
   15a12:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   15a16:	f815 2c06 	ldrb.w	r2, [r5, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15a1a:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
   15a1e:	f815 7c05 	ldrb.w	r7, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15a22:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
   15a26:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
   15a2a:	f815 2c04 	ldrb.w	r2, [r5, #-4]
   15a2e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15a32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
   15a36:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   15a3a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15a3e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   15a42:	4a2d      	ldr	r2, [pc, #180]	; (15af8 <bt_mesh_net_decode+0x104>)
   15a44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
   15a48:	407d      	eors	r5, r7
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
   15a4a:	460b      	mov	r3, r1
   15a4c:	4611      	mov	r1, r2
		if (dup_cache[i] == val) {
   15a4e:	f852 7b04 	ldr.w	r7, [r2], #4
   15a52:	42bd      	cmp	r5, r7
   15a54:	d047      	beq.n	15ae6 <bt_mesh_net_decode+0xf2>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
   15a56:	3301      	adds	r3, #1
   15a58:	2b20      	cmp	r3, #32
   15a5a:	d1f8      	bne.n	15a4e <bt_mesh_net_decode+0x5a>
	dup_cache_next %= ARRAY_SIZE(dup_cache);
   15a5c:	4a27      	ldr	r2, [pc, #156]	; (15afc <bt_mesh_net_decode+0x108>)
   15a5e:	6813      	ldr	r3, [r2, #0]
   15a60:	f003 031f 	and.w	r3, r3, #31
	dup_cache[dup_cache_next++] = val;
   15a64:	1c5f      	adds	r7, r3, #1
   15a66:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15a6a:	6017      	str	r7, [r2, #0]
	rx->net_if = net_if;
   15a6c:	7d23      	ldrb	r3, [r4, #20]
   15a6e:	f366 1305 	bfi	r3, r6, #4, #2
   15a72:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
   15a74:	4601      	mov	r1, r0
   15a76:	4b22      	ldr	r3, [pc, #136]	; (15b00 <bt_mesh_net_decode+0x10c>)
   15a78:	4642      	mov	r2, r8
   15a7a:	4620      	mov	r0, r4
   15a7c:	f000 fb70 	bl	16160 <bt_mesh_net_cred_find>
   15a80:	2800      	cmp	r0, #0
   15a82:	d033      	beq.n	15aec <bt_mesh_net_decode+0xf8>
	rx->ctx.recv_ttl = TTL(out->data);
   15a84:	f8d8 1000 	ldr.w	r1, [r8]
	rx->ctl = CTL(out->data);
   15a88:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
   15a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15a8e:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
   15a90:	784b      	ldrb	r3, [r1, #1]
   15a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15a96:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
   15a98:	3b00      	subs	r3, #0
   15a9a:	bf18      	it	ne
   15a9c:	2301      	movne	r3, #1
   15a9e:	425b      	negs	r3, r3
   15aa0:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
   15aa2:	784b      	ldrb	r3, [r1, #1]
   15aa4:	09db      	lsrs	r3, r3, #7
   15aa6:	f363 02c3 	bfi	r2, r3, #3, #1
   15aaa:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
   15aac:	1c88      	adds	r0, r1, #2
   15aae:	f00c fcd9 	bl	22464 <sys_get_be24>
   15ab2:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
   15ab4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
   15ab8:	2e03      	cmp	r6, #3
   15aba:	ba5b      	rev16	r3, r3
   15abc:	b29a      	uxth	r2, r3
	rx->ctx.recv_dst = DST(out->data);
   15abe:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
   15ac0:	d000      	beq.n	15ac4 <bt_mesh_net_decode+0xd0>
   15ac2:	b1b2      	cbz	r2, 15af2 <bt_mesh_net_decode+0xfe>
	msg_cache_next %= ARRAY_SIZE(msg_cache);
   15ac4:	490f      	ldr	r1, [pc, #60]	; (15b04 <bt_mesh_net_decode+0x110>)
	msg_cache[msg_cache_next].src = rx->ctx.addr;
   15ac6:	8922      	ldrh	r2, [r4, #8]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
   15ac8:	880b      	ldrh	r3, [r1, #0]
	msg_cache[msg_cache_next].src = rx->ctx.addr;
   15aca:	f3c2 020e 	ubfx	r2, r2, #0, #15
   15ace:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
	msg_cache_next %= ARRAY_SIZE(msg_cache);
   15ad2:	f003 031f 	and.w	r3, r3, #31
	msg_cache[msg_cache_next].src = rx->ctx.addr;
   15ad6:	4a0c      	ldr	r2, [pc, #48]	; (15b08 <bt_mesh_net_decode+0x114>)
   15ad8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	msg_cache_next++;
   15adc:	3301      	adds	r3, #1
   15ade:	800b      	strh	r3, [r1, #0]
	return 0;
   15ae0:	2000      	movs	r0, #0
}
   15ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   15ae6:	f06f 0015 	mvn.w	r0, #21
   15aea:	e7fa      	b.n	15ae2 <bt_mesh_net_decode+0xee>
		return -ENOENT;
   15aec:	f06f 0001 	mvn.w	r0, #1
   15af0:	e7f7      	b.n	15ae2 <bt_mesh_net_decode+0xee>
		return -EBADMSG;
   15af2:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   15af6:	e7f4      	b.n	15ae2 <bt_mesh_net_decode+0xee>
   15af8:	20002648 	.word	0x20002648
   15afc:	200026c8 	.word	0x200026c8
   15b00:	000152e9 	.word	0x000152e9
   15b04:	20002b66 	.word	0x20002b66
   15b08:	200026cc 	.word	0x200026cc

00015b0c <bt_mesh_net_recv>:
{
   15b0c:	b570      	push	{r4, r5, r6, lr}
   15b0e:	b094      	sub	sp, #80	; 0x50
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15b10:	ab0c      	add	r3, sp, #48	; 0x30
{
   15b12:	4615      	mov	r5, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15b14:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   15b18:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
   15b1c:	2218      	movs	r2, #24
{
   15b1e:	460e      	mov	r6, r1
   15b20:	4604      	mov	r4, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
   15b22:	2100      	movs	r1, #0
   15b24:	eb0d 0002 	add.w	r0, sp, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15b28:	9303      	str	r3, [sp, #12]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
   15b2a:	f00b ff70 	bl	21a0e <memset>
   15b2e:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	if (!bt_mesh_is_provisioned()) {
   15b32:	f7fe ff63 	bl	149fc <bt_mesh_is_provisioned>
   15b36:	2800      	cmp	r0, #0
   15b38:	d061      	beq.n	15bfe <bt_mesh_net_recv+0xf2>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
   15b3a:	ab03      	add	r3, sp, #12
   15b3c:	aa06      	add	r2, sp, #24
   15b3e:	4629      	mov	r1, r5
   15b40:	4620      	mov	r0, r4
   15b42:	f7ff ff57 	bl	159f4 <bt_mesh_net_decode>
   15b46:	2800      	cmp	r0, #0
   15b48:	d159      	bne.n	15bfe <bt_mesh_net_recv+0xf2>
	state->offset = net_buf_simple_headroom(buf);
   15b4a:	a803      	add	r0, sp, #12
   15b4c:	f00f fa11 	bl	24f72 <net_buf_simple_headroom>
   15b50:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15b52:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
	state->len = buf->len;
   15b56:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   15b5a:	f00c fbb1 	bl	222c0 <bt_mesh_fixed_group_match>
   15b5e:	2800      	cmp	r0, #0
   15b60:	d147      	bne.n	15bf2 <bt_mesh_net_recv+0xe6>
			  bt_mesh_has_addr(rx.ctx.recv_dst));
   15b62:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
   15b66:	f002 fb1f 	bl	181a8 <bt_mesh_has_addr>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15b6a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
   15b6e:	a906      	add	r1, sp, #24
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15b70:	f360 1386 	bfi	r3, r0, #6, #1
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
   15b74:	a803      	add	r0, sp, #12
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15b76:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
   15b7a:	f001 fc01 	bl	17380 <bt_mesh_trans_recv>
   15b7e:	300b      	adds	r0, #11
   15b80:	d113      	bne.n	15baa <bt_mesh_net_recv+0x9e>
		msg_cache[--msg_cache_next].src = BT_MESH_ADDR_UNASSIGNED;
   15b82:	4a53      	ldr	r2, [pc, #332]	; (15cd0 <bt_mesh_net_recv+0x1c4>)
   15b84:	8813      	ldrh	r3, [r2, #0]
   15b86:	3b01      	subs	r3, #1
   15b88:	b29b      	uxth	r3, r3
   15b8a:	8013      	strh	r3, [r2, #0]
   15b8c:	4a51      	ldr	r2, [pc, #324]	; (15cd4 <bt_mesh_net_recv+0x1c8>)
   15b8e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   15b92:	f36f 010e 	bfc	r1, #0, #15
   15b96:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		dup_cache[--dup_cache_next] = 0;
   15b9a:	4a4f      	ldr	r2, [pc, #316]	; (15cd8 <bt_mesh_net_recv+0x1cc>)
   15b9c:	6813      	ldr	r3, [r2, #0]
   15b9e:	3b01      	subs	r3, #1
   15ba0:	6013      	str	r3, [r2, #0]
   15ba2:	4a4e      	ldr	r2, [pc, #312]	; (15cdc <bt_mesh_net_recv+0x1d0>)
   15ba4:	2100      	movs	r1, #0
   15ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
   15baa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
   15bae:	2b00      	cmp	r3, #0
   15bb0:	dd04      	ble.n	15bbc <bt_mesh_net_recv+0xb0>
	    (!rx.local_match && !rx.friend_match)) {
   15bb2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
   15bb6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   15bba:	d120      	bne.n	15bfe <bt_mesh_net_recv+0xf2>
	buf->data = buf->__buf + state->offset;
   15bbc:	9805      	ldr	r0, [sp, #20]
	if (rx->ctx.recv_ttl <= 1U) {
   15bbe:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
	buf->len = state->len;
   15bc2:	f8ad 5010 	strh.w	r5, [sp, #16]
	buf->data = buf->__buf + state->offset;
   15bc6:	fa10 f484 	uxtah	r4, r0, r4
   15bca:	2b01      	cmp	r3, #1
   15bcc:	9403      	str	r4, [sp, #12]
   15bce:	d916      	bls.n	15bfe <bt_mesh_net_recv+0xf2>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
   15bd0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15bd4:	f013 0f34 	tst.w	r3, #52	; 0x34
   15bd8:	d108      	bne.n	15bec <bt_mesh_net_recv+0xe0>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
   15bda:	f7ff f89b 	bl	14d14 <bt_mesh_relay_get>
	    !rx->friend_cred &&
   15bde:	2801      	cmp	r0, #1
   15be0:	d109      	bne.n	15bf6 <bt_mesh_net_recv+0xea>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
   15be2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15be6:	f013 0f34 	tst.w	r3, #52	; 0x34
   15bea:	d00a      	beq.n	15c02 <bt_mesh_net_recv+0xf6>
		transmit = bt_mesh_net_transmit_get();
   15bec:	f7ff f848 	bl	14c80 <bt_mesh_net_transmit_get>
   15bf0:	e009      	b.n	15c06 <bt_mesh_net_recv+0xfa>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15bf2:	2001      	movs	r0, #1
   15bf4:	e7b9      	b.n	15b6a <bt_mesh_net_recv+0x5e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
   15bf6:	f00c fb39 	bl	2226c <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
   15bfa:	2801      	cmp	r0, #1
   15bfc:	d0f1      	beq.n	15be2 <bt_mesh_net_recv+0xd6>
}
   15bfe:	b014      	add	sp, #80	; 0x50
   15c00:	bd70      	pop	{r4, r5, r6, pc}
		transmit = bt_mesh_relay_retransmit_get();
   15c02:	f7ff f891 	bl	14d28 <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
   15c06:	4602      	mov	r2, r0
				 transmit, K_NO_WAIT);
   15c08:	2100      	movs	r1, #0
   15c0a:	2000      	movs	r0, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_RELAY_ADV,
   15c0c:	e9cd 0100 	strd	r0, r1, [sp]
   15c10:	2102      	movs	r1, #2
   15c12:	2001      	movs	r0, #1
   15c14:	f7ff f90e 	bl	14e34 <bt_mesh_adv_create>
	if (!buf) {
   15c18:	4604      	mov	r4, r0
   15c1a:	2800      	cmp	r0, #0
   15c1c:	d0ef      	beq.n	15bfe <bt_mesh_net_recv+0xf2>
	sbuf->data[1] &= 0x80;
   15c1e:	9a03      	ldr	r2, [sp, #12]
   15c20:	7853      	ldrb	r3, [r2, #1]
   15c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   15c26:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
   15c28:	9a03      	ldr	r2, [sp, #12]
   15c2a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   15c2e:	7851      	ldrb	r1, [r2, #1]
   15c30:	3b01      	subs	r3, #1
   15c32:	430b      	orrs	r3, r1
   15c34:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15c36:	f100 0508 	add.w	r5, r0, #8
   15c3a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   15c3e:	9903      	ldr	r1, [sp, #12]
   15c40:	4628      	mov	r0, r5
   15c42:	f00f f8f3 	bl	24e2c <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
   15c46:	9a06      	ldr	r2, [sp, #24]
	if (rx->friend_cred) {
   15c48:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
   15c4c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
   15c50:	1e99      	subs	r1, r3, #2
   15c52:	424b      	negs	r3, r1
   15c54:	414b      	adcs	r3, r1
   15c56:	214a      	movs	r1, #74	; 0x4a
   15c58:	434b      	muls	r3, r1
   15c5a:	f103 0141 	add.w	r1, r3, #65	; 0x41
	if (rx->friend_cred) {
   15c5e:	0740      	lsls	r0, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
   15c60:	4411      	add	r1, r2
	if (rx->friend_cred) {
   15c62:	d50b      	bpl.n	15c7c <bt_mesh_net_recv+0x170>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
   15c64:	68a6      	ldr	r6, [r4, #8]
   15c66:	7830      	ldrb	r0, [r6, #0]
   15c68:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
   15c6c:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
   15c6e:	68a0      	ldr	r0, [r4, #8]
   15c70:	4413      	add	r3, r2
   15c72:	7802      	ldrb	r2, [r0, #0]
   15c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   15c78:	4313      	orrs	r3, r2
   15c7a:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
   15c7c:	4b18      	ldr	r3, [pc, #96]	; (15ce0 <bt_mesh_net_recv+0x1d4>)
   15c7e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   15c82:	6818      	ldr	r0, [r3, #0]
   15c84:	f002 0201 	and.w	r2, r2, #1
   15c88:	1a82      	subs	r2, r0, r2
   15c8a:	2300      	movs	r3, #0
   15c8c:	4628      	mov	r0, r5
   15c8e:	f00c fbf1 	bl	22474 <net_encrypt>
   15c92:	b9b0      	cbnz	r0, 15cc2 <bt_mesh_net_recv+0x1b6>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15c94:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	switch (net_if) {
   15c98:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15c9c:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
   15ca0:	d006      	beq.n	15cb0 <bt_mesh_net_recv+0x1a4>
   15ca2:	2a02      	cmp	r2, #2
   15ca4:	d011      	beq.n	15cca <bt_mesh_net_recv+0x1be>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15ca6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15caa:	075b      	lsls	r3, r3, #29
   15cac:	d404      	bmi.n	15cb8 <bt_mesh_net_recv+0x1ac>
done:
   15cae:	e008      	b.n	15cc2 <bt_mesh_net_recv+0x1b6>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   15cb0:	f7ff f830 	bl	14d14 <bt_mesh_relay_get>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15cb4:	2801      	cmp	r0, #1
   15cb6:	d1f6      	bne.n	15ca6 <bt_mesh_net_recv+0x19a>
		bt_mesh_adv_send(buf, NULL, NULL);
   15cb8:	2200      	movs	r2, #0
   15cba:	4611      	mov	r1, r2
   15cbc:	4620      	mov	r0, r4
   15cbe:	f7ff f8dd 	bl	14e7c <bt_mesh_adv_send>
	net_buf_unref(buf);
   15cc2:	4620      	mov	r0, r4
   15cc4:	f005 ff92 	bl	1bbec <net_buf_unref>
   15cc8:	e799      	b.n	15bfe <bt_mesh_net_recv+0xf2>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   15cca:	f00c facf 	bl	2226c <bt_mesh_gatt_proxy_get>
   15cce:	e7f1      	b.n	15cb4 <bt_mesh_net_recv+0x1a8>
   15cd0:	20002b66 	.word	0x20002b66
   15cd4:	200026cc 	.word	0x200026cc
   15cd8:	200026c8 	.word	0x200026c8
   15cdc:	20002648 	.word	0x20002648
   15ce0:	20001d40 	.word	0x20001d40

00015ce4 <bt_mesh_net_init>:
{
   15ce4:	b510      	push	{r4, lr}
	k_work_init_delayable(&bt_mesh.ivu_timer, ivu_refresh);
   15ce6:	4c06      	ldr	r4, [pc, #24]	; (15d00 <bt_mesh_net_init+0x1c>)
   15ce8:	4906      	ldr	r1, [pc, #24]	; (15d04 <bt_mesh_net_init+0x20>)
   15cea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15cee:	f00f ff63 	bl	25bb8 <k_work_init_delayable>
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
   15cf2:	f104 000c 	add.w	r0, r4, #12
   15cf6:	4904      	ldr	r1, [pc, #16]	; (15d08 <bt_mesh_net_init+0x24>)
}
   15cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
   15cfc:	f00f bf18 	b.w	25b30 <k_work_init>
   15d00:	20001d40 	.word	0x20001d40
   15d04:	0001571d 	.word	0x0001571d
   15d08:	0001545d 	.word	0x0001545d

00015d0c <bt_mesh_net_pending_iv_store>:
		BT_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
   15d0c:	b507      	push	{r0, r1, r2, lr}
   15d0e:	f7ff fc07 	bl	15520 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   15d12:	07c3      	lsls	r3, r0, #31
   15d14:	d514      	bpl.n	15d40 <bt_mesh_net_pending_iv_store+0x34>
	iv.iv_index = bt_mesh.iv_index;
   15d16:	4a0d      	ldr	r2, [pc, #52]	; (15d4c <bt_mesh_net_pending_iv_store+0x40>)
   15d18:	6813      	ldr	r3, [r2, #0]
   15d1a:	9300      	str	r3, [sp, #0]
   15d1c:	f7ff fc00 	bl	15520 <atomic_get.constprop.0>
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   15d20:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   15d24:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15d28:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
   15d2c:	f88d 0004 	strb.w	r0, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   15d30:	2205      	movs	r2, #5
   15d32:	4669      	mov	r1, sp
   15d34:	4806      	ldr	r0, [pc, #24]	; (15d50 <bt_mesh_net_pending_iv_store+0x44>)
   15d36:	f7fb fff1 	bl	11d1c <settings_save_one>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
   15d3a:	b003      	add	sp, #12
   15d3c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
   15d40:	4803      	ldr	r0, [pc, #12]	; (15d50 <bt_mesh_net_pending_iv_store+0x44>)
}
   15d42:	b003      	add	sp, #12
   15d44:	f85d eb04 	ldr.w	lr, [sp], #4
	err = settings_delete("bt/mesh/IV");
   15d48:	f00a bb59 	b.w	203fe <settings_delete>
   15d4c:	20001d40 	.word	0x20001d40
   15d50:	00027593 	.word	0x00027593

00015d54 <bt_mesh_net_pending_net_store>:
		BT_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
   15d54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15d56:	f7ff fbe3 	bl	15520 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   15d5a:	07c3      	lsls	r3, r0, #31
   15d5c:	d511      	bpl.n	15d82 <bt_mesh_net_pending_net_store+0x2e>
	net.primary_addr = bt_mesh_primary_addr();
   15d5e:	f002 fa09 	bl	18174 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   15d62:	490b      	ldr	r1, [pc, #44]	; (15d90 <bt_mesh_net_pending_net_store+0x3c>)
	net.primary_addr = bt_mesh_primary_addr();
   15d64:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   15d68:	2210      	movs	r2, #16
   15d6a:	f10d 0006 	add.w	r0, sp, #6
   15d6e:	f00b fe43 	bl	219f8 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
   15d72:	2212      	movs	r2, #18
   15d74:	a901      	add	r1, sp, #4
   15d76:	4807      	ldr	r0, [pc, #28]	; (15d94 <bt_mesh_net_pending_net_store+0x40>)
   15d78:	f7fb ffd0 	bl	11d1c <settings_save_one>
		store_pending_net();
	} else {
		clear_net();
	}
}
   15d7c:	b007      	add	sp, #28
   15d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Net");
   15d82:	4804      	ldr	r0, [pc, #16]	; (15d94 <bt_mesh_net_pending_net_store+0x40>)
}
   15d84:	b007      	add	sp, #28
   15d86:	f85d eb04 	ldr.w	lr, [sp], #4
	err = settings_delete("bt/mesh/Net");
   15d8a:	f00a bb38 	b.w	203fe <settings_delete>
   15d8e:	bf00      	nop
   15d90:	20001d98 	.word	0x20001d98
   15d94:	0002759e 	.word	0x0002759e

00015d98 <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
   15d98:	b507      	push	{r0, r1, r2, lr}
   15d9a:	f7ff fbc1 	bl	15520 <atomic_get.constprop.0>
	struct seq_val seq;
	int err;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   15d9e:	07c3      	lsls	r3, r0, #31
   15da0:	d512      	bpl.n	15dc8 <bt_mesh_net_pending_seq_store+0x30>
		sys_put_le24(bt_mesh.seq, seq.val);
   15da2:	4b0c      	ldr	r3, [pc, #48]	; (15dd4 <bt_mesh_net_pending_seq_store+0x3c>)

		err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   15da4:	480c      	ldr	r0, [pc, #48]	; (15dd8 <bt_mesh_net_pending_seq_store+0x40>)
		sys_put_le24(bt_mesh.seq, seq.val);
   15da6:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15da8:	f88d 3004 	strb.w	r3, [sp, #4]
	dst[1] = val >> 8;
   15dac:	f3c3 2207 	ubfx	r2, r3, #8, #8
   15db0:	f88d 2005 	strb.w	r2, [sp, #5]
	dst[2] = val >> 16;
   15db4:	0c1b      	lsrs	r3, r3, #16
		err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   15db6:	2203      	movs	r2, #3
   15db8:	a901      	add	r1, sp, #4
   15dba:	f88d 3006 	strb.w	r3, [sp, #6]
   15dbe:	f7fb ffad 	bl	11d1c <settings_save_one>
			BT_ERR("Failed to clear Seq value");
		} else {
			BT_DBG("Cleared Seq value");
		}
	}
}
   15dc2:	b003      	add	sp, #12
   15dc4:	f85d fb04 	ldr.w	pc, [sp], #4
		err = settings_delete("bt/mesh/Seq");
   15dc8:	4803      	ldr	r0, [pc, #12]	; (15dd8 <bt_mesh_net_pending_seq_store+0x40>)
}
   15dca:	b003      	add	sp, #12
   15dcc:	f85d eb04 	ldr.w	lr, [sp], #4
		err = settings_delete("bt/mesh/Seq");
   15dd0:	f00a bb15 	b.w	203fe <settings_delete>
   15dd4:	20001d40 	.word	0x20001d40
   15dd8:	000275aa 	.word	0x000275aa

00015ddc <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   15ddc:	4805      	ldr	r0, [pc, #20]	; (15df4 <bt_mesh_net_settings_commit+0x18>)
   15dde:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   15de2:	2b5f      	cmp	r3, #95	; 0x5f
   15de4:	d804      	bhi.n	15df0 <bt_mesh_net_settings_commit+0x14>
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   15de6:	4a04      	ldr	r2, [pc, #16]	; (15df8 <bt_mesh_net_settings_commit+0x1c>)
   15de8:	2300      	movs	r3, #0
   15dea:	3028      	adds	r0, #40	; 0x28
   15dec:	f008 bf18 	b.w	1ec20 <k_work_reschedule>
	}
}
   15df0:	4770      	bx	lr
   15df2:	bf00      	nop
   15df4:	20001d40 	.word	0x20001d40
   15df8:	a8c00000 	.word	0xa8c00000

00015dfc <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
   15dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
   15dfe:	4c06      	ldr	r4, [pc, #24]	; (15e18 <subnet_evt+0x1c>)
   15e00:	4f06      	ldr	r7, [pc, #24]	; (15e1c <subnet_evt+0x20>)
{
   15e02:	4605      	mov	r5, r0
   15e04:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
   15e06:	42bc      	cmp	r4, r7
   15e08:	d300      	bcc.n	15e0c <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
   15e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
   15e0c:	f854 3b04 	ldr.w	r3, [r4], #4
   15e10:	4631      	mov	r1, r6
   15e12:	4628      	mov	r0, r5
   15e14:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
   15e16:	e7f6      	b.n	15e06 <subnet_evt+0xa>
   15e18:	00026480 	.word	0x00026480
   15e1c:	00026488 	.word	0x00026488

00015e20 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
   15e20:	b530      	push	{r4, r5, lr}
   15e22:	b085      	sub	sp, #20
	uint8_t p = 0;
   15e24:	2300      	movs	r3, #0
   15e26:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   15e2a:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
   15e2e:	460d      	mov	r5, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   15e30:	9301      	str	r3, [sp, #4]
   15e32:	f100 0312 	add.w	r3, r0, #18
{
   15e36:	4604      	mov	r4, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   15e38:	9300      	str	r3, [sp, #0]
   15e3a:	2201      	movs	r2, #1
   15e3c:	f100 0311 	add.w	r3, r0, #17
   15e40:	f10d 010f 	add.w	r1, sp, #15
   15e44:	4628      	mov	r0, r5
   15e46:	f001 fd7d 	bl	17944 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
   15e4a:	b998      	cbnz	r0, 15e74 <net_keys_create+0x54>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
		return err;
	}

	memcpy(keys->net, key, 16);
   15e4c:	4629      	mov	r1, r5
   15e4e:	2210      	movs	r2, #16
   15e50:	1c60      	adds	r0, r4, #1
   15e52:	f00b fdd1 	bl	219f8 <memcpy>

	BT_DBG("NID 0x%02x EncKey %s", keys->msg.nid,
	       bt_hex(keys->msg.enc, 16));
	BT_DBG("PrivacyKey %s", bt_hex(keys->msg.privacy, 16));

	err = bt_mesh_k3(key, keys->net_id);
   15e56:	f104 0132 	add.w	r1, r4, #50	; 0x32
   15e5a:	4628      	mov	r0, r5
   15e5c:	f001 fdca 	bl	179f4 <bt_mesh_k3>
	if (err) {
   15e60:	b940      	cbnz	r0, 15e74 <net_keys_create+0x54>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
   15e62:	4905      	ldr	r1, [pc, #20]	; (15e78 <net_keys_create+0x58>)
   15e64:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   15e68:	4628      	mov	r0, r5
   15e6a:	f001 fe15 	bl	17a98 <bt_mesh_id128>

	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
   15e6e:	b908      	cbnz	r0, 15e74 <net_keys_create+0x54>
		return err;
	}

	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;
   15e70:	2301      	movs	r3, #1
   15e72:	7023      	strb	r3, [r4, #0]

	return 0;
}
   15e74:	b005      	add	sp, #20
   15e76:	bd30      	pop	{r4, r5, pc}
   15e78:	000275b6 	.word	0x000275b6

00015e7c <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
   15e7c:	b120      	cbz	r0, 15e88 <bt_mesh_net_flags+0xc>
   15e7e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
	uint8_t flags = 0x00;
   15e82:	1e82      	subs	r2, r0, #2
   15e84:	4250      	negs	r0, r2
   15e86:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15e88:	4b05      	ldr	r3, [pc, #20]	; (15ea0 <bt_mesh_net_flags+0x24>)
   15e8a:	f3bf 8f5b 	dmb	ish
   15e8e:	681b      	ldr	r3, [r3, #0]
   15e90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   15e94:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
   15e96:	bf48      	it	mi
   15e98:	f040 0002 	orrmi.w	r0, r0, #2
}
   15e9c:	4770      	bx	lr
   15e9e:	bf00      	nop
   15ea0:	20001d48 	.word	0x20001d48

00015ea4 <bt_mesh_subnets_get>:

	return STATUS_SUCCESS;
}

ssize_t bt_mesh_subnets_get(uint16_t net_idxs[], size_t max, off_t skip)
{
   15ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   15ea6:	2300      	movs	r3, #0
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15ea8:	4e0b      	ldr	r6, [pc, #44]	; (15ed8 <bt_mesh_subnets_get+0x34>)
{
   15eaa:	4604      	mov	r4, r0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15eac:	f64f 77ff 	movw	r7, #65535	; 0xffff
	size_t count = 0;
   15eb0:	4618      	mov	r0, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15eb2:	8c35      	ldrh	r5, [r6, #32]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   15eb4:	b103      	cbz	r3, 15eb8 <bt_mesh_subnets_get+0x14>

		net_idxs[count++] = sub->net_idx;
	}

	return count;
}
   15eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15eb8:	42bd      	cmp	r5, r7
   15eba:	d0fc      	beq.n	15eb6 <bt_mesh_subnets_get+0x12>
		if (skip) {
   15ebc:	b112      	cbz	r2, 15ec4 <bt_mesh_subnets_get+0x20>
			skip--;
   15ebe:	3a01      	subs	r2, #1
		net_idxs[count++] = sub->net_idx;
   15ec0:	2301      	movs	r3, #1
   15ec2:	e7f6      	b.n	15eb2 <bt_mesh_subnets_get+0xe>
		if (count >= max) {
   15ec4:	4288      	cmp	r0, r1
   15ec6:	d203      	bcs.n	15ed0 <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
   15ec8:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
   15ecc:	3001      	adds	r0, #1
   15ece:	e7f7      	b.n	15ec0 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
   15ed0:	f06f 000b 	mvn.w	r0, #11
   15ed4:	e7ef      	b.n	15eb6 <bt_mesh_subnets_get+0x12>
   15ed6:	bf00      	nop
   15ed8:	2000056c 	.word	0x2000056c

00015edc <bt_mesh_subnet_get>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
   15edc:	4b03      	ldr	r3, [pc, #12]	; (15eec <bt_mesh_subnet_get+0x10>)
   15ede:	8c1a      	ldrh	r2, [r3, #32]
			return sub;
		}
	}

	return NULL;
}
   15ee0:	4282      	cmp	r2, r0
   15ee2:	bf0c      	ite	eq
   15ee4:	4618      	moveq	r0, r3
   15ee6:	2000      	movne	r0, #0
   15ee8:	4770      	bx	lr
   15eea:	bf00      	nop
   15eec:	2000056c 	.word	0x2000056c

00015ef0 <store_subnet>:
{
   15ef0:	b510      	push	{r4, lr}
   15ef2:	b08e      	sub	sp, #56	; 0x38
   15ef4:	4601      	mov	r1, r0
	sub = bt_mesh_subnet_get(net_idx);
   15ef6:	f7ff fff1 	bl	15edc <bt_mesh_subnet_get>
	if (!sub) {
   15efa:	4604      	mov	r4, r0
   15efc:	b1e8      	cbz	r0, 15f3a <store_subnet+0x4a>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   15efe:	460b      	mov	r3, r1
   15f00:	4a0f      	ldr	r2, [pc, #60]	; (15f40 <store_subnet+0x50>)
   15f02:	2114      	movs	r1, #20
   15f04:	4668      	mov	r0, sp
   15f06:	f009 fcc5 	bl	1f894 <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
   15f0a:	2210      	movs	r2, #16
   15f0c:	f104 0131 	add.w	r1, r4, #49	; 0x31
   15f10:	f10d 0015 	add.w	r0, sp, #21
   15f14:	f00b fd70 	bl	219f8 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
   15f18:	2210      	movs	r2, #16
   15f1a:	f104 017b 	add.w	r1, r4, #123	; 0x7b
   15f1e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
   15f22:	f00b fd69 	bl	219f8 <memcpy>
	key.kr_flag = 0U; /* Deprecated */
   15f26:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	err = settings_save_one(path, &key, sizeof(key));
   15f2a:	2221      	movs	r2, #33	; 0x21
	key.kr_flag = 0U; /* Deprecated */
   15f2c:	005b      	lsls	r3, r3, #1
	err = settings_save_one(path, &key, sizeof(key));
   15f2e:	a905      	add	r1, sp, #20
   15f30:	4668      	mov	r0, sp
	key.kr_flag = 0U; /* Deprecated */
   15f32:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
   15f36:	f7fb fef1 	bl	11d1c <settings_save_one>
}
   15f3a:	b00e      	add	sp, #56	; 0x38
   15f3c:	bd10      	pop	{r4, pc}
   15f3e:	bf00      	nop
   15f40:	000275bb 	.word	0x000275bb

00015f44 <update_subnet_settings>:
{
   15f44:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (update->key_idx == key_idx) {
   15f46:	4d1b      	ldr	r5, [pc, #108]	; (15fb4 <update_subnet_settings+0x70>)
		if (!update->valid) {
   15f48:	786c      	ldrb	r4, [r5, #1]
		if (update->key_idx == key_idx) {
   15f4a:	882a      	ldrh	r2, [r5, #0]
		if (!update->valid) {
   15f4c:	f014 0f10 	tst.w	r4, #16
{
   15f50:	b087      	sub	sp, #28
   15f52:	4603      	mov	r3, r0
	uint8_t clear = store ? 0U : 1U;
   15f54:	f081 0601 	eor.w	r6, r1, #1
		if (update->key_idx == key_idx) {
   15f58:	f3c2 070b 	ubfx	r7, r2, #0, #12
		if (!update->valid) {
   15f5c:	d113      	bne.n	15f86 <update_subnet_settings+0x42>
	free_slot->key_idx = net_idx;
   15f5e:	f3c0 030b 	ubfx	r3, r0, #0, #12
   15f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15f66:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
   15f6a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
   15f6e:	f3c3 030d 	ubfx	r3, r3, #0, #14
   15f72:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   15f76:	4313      	orrs	r3, r2
   15f78:	802b      	strh	r3, [r5, #0]
		bt_mesh_settings_store_schedule(
   15f7a:	2001      	movs	r0, #1
}
   15f7c:	b007      	add	sp, #28
   15f7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_mesh_settings_store_schedule(
   15f82:	f002 bd45 	b.w	18a10 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
   15f86:	4287      	cmp	r7, r0
   15f88:	d103      	bne.n	15f92 <update_subnet_settings+0x4e>
		update->clear = clear;
   15f8a:	f366 1445 	bfi	r4, r6, #5, #1
   15f8e:	706c      	strb	r4, [r5, #1]
   15f90:	e7f3      	b.n	15f7a <update_subnet_settings+0x36>
		if (store) {
   15f92:	b121      	cbz	r1, 15f9e <update_subnet_settings+0x5a>
}
   15f94:	b007      	add	sp, #28
   15f96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			store_subnet(net_idx);
   15f9a:	f7ff bfa9 	b.w	15ef0 <store_subnet>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   15f9e:	4a06      	ldr	r2, [pc, #24]	; (15fb8 <update_subnet_settings+0x74>)
   15fa0:	2114      	movs	r1, #20
   15fa2:	a801      	add	r0, sp, #4
   15fa4:	f009 fc76 	bl	1f894 <snprintk>
	err = settings_delete(path);
   15fa8:	a801      	add	r0, sp, #4
   15faa:	f00a fa28 	bl	203fe <settings_delete>
}
   15fae:	b007      	add	sp, #28
   15fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15fb2:	bf00      	nop
   15fb4:	20002b68 	.word	0x20002b68
   15fb8:	000275bb 	.word	0x000275bb

00015fbc <bt_mesh_subnet_add>:
{
   15fbc:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
   15fbe:	4d15      	ldr	r5, [pc, #84]	; (16014 <bt_mesh_subnet_add+0x58>)
   15fc0:	8c2b      	ldrh	r3, [r5, #32]
{
   15fc2:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
   15fc4:	429e      	cmp	r6, r3
{
   15fc6:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
   15fc8:	d00b      	beq.n	15fe2 <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   15fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15fce:	4293      	cmp	r3, r2
   15fd0:	d11e      	bne.n	16010 <bt_mesh_subnet_add+0x54>
	err = net_keys_create(&sub->keys[0], key);
   15fd2:	f105 0030 	add.w	r0, r5, #48	; 0x30
   15fd6:	f7ff ff23 	bl	15e20 <net_keys_create>
	if (err) {
   15fda:	4604      	mov	r4, r0
   15fdc:	b158      	cbz	r0, 15ff6 <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
   15fde:	2010      	movs	r0, #16
   15fe0:	e008      	b.n	15ff4 <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
   15fe2:	2210      	movs	r2, #16
   15fe4:	f105 0131 	add.w	r1, r5, #49	; 0x31
   15fe8:	f00b fcf5 	bl	219d6 <memcmp>
		return STATUS_SUCCESS;
   15fec:	2800      	cmp	r0, #0
   15fee:	bf14      	ite	ne
   15ff0:	2006      	movne	r0, #6
   15ff2:	2000      	moveq	r0, #0
}
   15ff4:	bd70      	pop	{r4, r5, r6, pc}
	sub->kr_phase = BT_MESH_KR_NORMAL;
   15ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   15ffa:	4601      	mov	r1, r0
   15ffc:	4628      	mov	r0, r5
	sub->kr_phase = BT_MESH_KR_NORMAL;
   15ffe:	846b      	strh	r3, [r5, #34]	; 0x22
	sub->net_idx = net_idx;
   16000:	842e      	strh	r6, [r5, #32]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   16002:	f7ff fefb 	bl	15dfc <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   16006:	8c28      	ldrh	r0, [r5, #32]
   16008:	f00c fa55 	bl	224b6 <bt_mesh_subnet_store>
	return STATUS_SUCCESS;
   1600c:	4620      	mov	r0, r4
   1600e:	e7f1      	b.n	15ff4 <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
   16010:	2005      	movs	r0, #5
   16012:	e7ef      	b.n	15ff4 <bt_mesh_subnet_add+0x38>
   16014:	2000056c 	.word	0x2000056c

00016018 <bt_mesh_subnet_kr_phase_set>:
{
   16018:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
   1601a:	4b14      	ldr	r3, [pc, #80]	; (1606c <bt_mesh_subnet_kr_phase_set+0x54>)
   1601c:	881a      	ldrh	r2, [r3, #0]
   1601e:	789b      	ldrb	r3, [r3, #2]
   16020:	f8ad 2004 	strh.w	r2, [sp, #4]
   16024:	f88d 3006 	strb.w	r3, [sp, #6]
	sub = bt_mesh_subnet_get(net_idx);
   16028:	f7ff ff58 	bl	15edc <bt_mesh_subnet_get>
{
   1602c:	460c      	mov	r4, r1
	if (!sub) {
   1602e:	4605      	mov	r5, r0
   16030:	b918      	cbnz	r0, 1603a <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
   16032:	7008      	strb	r0, [r1, #0]
		return STATUS_INVALID_NETKEY;
   16034:	2004      	movs	r0, #4
}
   16036:	b003      	add	sp, #12
   16038:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
   1603a:	7809      	ldrb	r1, [r1, #0]
   1603c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   16040:	4299      	cmp	r1, r3
   16042:	d00d      	beq.n	16060 <bt_mesh_subnet_kr_phase_set+0x48>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
   16044:	2b02      	cmp	r3, #2
   16046:	d80d      	bhi.n	16064 <bt_mesh_subnet_kr_phase_set+0x4c>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
   16048:	aa02      	add	r2, sp, #8
   1604a:	441a      	add	r2, r3
   1604c:	f812 2c04 	ldrb.w	r2, [r2, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
   16050:	40ca      	lsrs	r2, r1
   16052:	07d2      	lsls	r2, r2, #31
   16054:	d506      	bpl.n	16064 <bt_mesh_subnet_kr_phase_set+0x4c>
		key_refresh(sub, *phase);
   16056:	f00c fa31 	bl	224bc <key_refresh>
		*phase = sub->kr_phase;
   1605a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1605e:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
   16060:	2000      	movs	r0, #0
   16062:	e7e8      	b.n	16036 <bt_mesh_subnet_kr_phase_set+0x1e>
	*phase = sub->kr_phase;
   16064:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
   16066:	200b      	movs	r0, #11
   16068:	e7e5      	b.n	16036 <bt_mesh_subnet_kr_phase_set+0x1e>
   1606a:	bf00      	nop
   1606c:	000275cd 	.word	0x000275cd

00016070 <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
   16070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
   16072:	4c17      	ldr	r4, [pc, #92]	; (160d0 <bt_mesh_subnet_set+0x60>)
{
   16074:	461d      	mov	r5, r3
		if (subnets[i].net_idx == net_idx) {
   16076:	8c23      	ldrh	r3, [r4, #32]
   16078:	4298      	cmp	r0, r3
{
   1607a:	460f      	mov	r7, r1
   1607c:	4606      	mov	r6, r0
   1607e:	4611      	mov	r1, r2
		if (subnets[i].net_idx == net_idx) {
   16080:	d020      	beq.n	160c4 <bt_mesh_subnet_set+0x54>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   16082:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16086:	4293      	cmp	r3, r2
   16088:	d11f      	bne.n	160ca <bt_mesh_subnet_set+0x5a>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
   1608a:	b959      	cbnz	r1, 160a4 <bt_mesh_subnet_set+0x34>
   1608c:	b99d      	cbnz	r5, 160b6 <bt_mesh_subnet_set+0x46>
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
   1608e:	4810      	ldr	r0, [pc, #64]	; (160d0 <bt_mesh_subnet_set+0x60>)
	sub->net_idx = net_idx;
   16090:	8426      	strh	r6, [r4, #32]
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
   16092:	2302      	movs	r3, #2
	sub->kr_phase = kr_phase;
   16094:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
   16098:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	bt_mesh_beacon_update(sub);
   1609c:	f7ff f81a 	bl	150d4 <bt_mesh_beacon_update>

	return 0;
   160a0:	2000      	movs	r0, #0
   160a2:	e007      	b.n	160b4 <bt_mesh_subnet_set+0x44>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   160a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   160a8:	f7ff feba 	bl	15e20 <net_keys_create>
   160ac:	2800      	cmp	r0, #0
   160ae:	d0ed      	beq.n	1608c <bt_mesh_subnet_set+0x1c>
			return -EIO;
   160b0:	f06f 0004 	mvn.w	r0, #4
}
   160b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   160b6:	4807      	ldr	r0, [pc, #28]	; (160d4 <bt_mesh_subnet_set+0x64>)
   160b8:	4629      	mov	r1, r5
   160ba:	f7ff feb1 	bl	15e20 <net_keys_create>
   160be:	2800      	cmp	r0, #0
   160c0:	d0e5      	beq.n	1608e <bt_mesh_subnet_set+0x1e>
   160c2:	e7f5      	b.n	160b0 <bt_mesh_subnet_set+0x40>
		return -EALREADY;
   160c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   160c8:	e7f4      	b.n	160b4 <bt_mesh_subnet_set+0x44>
		return -ENOMEM;
   160ca:	f06f 000b 	mvn.w	r0, #11
   160ce:	e7f1      	b.n	160b4 <bt_mesh_subnet_set+0x44>
   160d0:	2000056c 	.word	0x2000056c
   160d4:	200005e6 	.word	0x200005e6

000160d8 <bt_mesh_subnet_find>:

struct bt_mesh_subnet *bt_mesh_subnet_find(bool (*cb)(struct bt_mesh_subnet *sub, void *cb_data),
					   void *cb_data)
{
   160d8:	4603      	mov	r3, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   160da:	4807      	ldr	r0, [pc, #28]	; (160f8 <bt_mesh_subnet_find+0x20>)
{
   160dc:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   160de:	8c04      	ldrh	r4, [r0, #32]
   160e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   160e4:	4294      	cmp	r4, r2
   160e6:	d005      	beq.n	160f4 <bt_mesh_subnet_find+0x1c>
			continue;
		}

		if (!cb || cb(&subnets[i], cb_data)) {
   160e8:	b90b      	cbnz	r3, 160ee <bt_mesh_subnet_find+0x16>
			return &subnets[i];
   160ea:	4803      	ldr	r0, [pc, #12]	; (160f8 <bt_mesh_subnet_find+0x20>)
		}
	}

	return NULL;
}
   160ec:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
   160ee:	4798      	blx	r3
   160f0:	2800      	cmp	r0, #0
   160f2:	d1fa      	bne.n	160ea <bt_mesh_subnet_find+0x12>
	return NULL;
   160f4:	2000      	movs	r0, #0
   160f6:	e7f9      	b.n	160ec <bt_mesh_subnet_find+0x14>
   160f8:	2000056c 	.word	0x2000056c

000160fc <bt_mesh_subnet_foreach>:

size_t bt_mesh_subnet_foreach(void (*cb)(struct bt_mesh_subnet *sub))
{
   160fc:	b508      	push	{r3, lr}
   160fe:	4603      	mov	r3, r0
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   16100:	4805      	ldr	r0, [pc, #20]	; (16118 <bt_mesh_subnet_foreach+0x1c>)
   16102:	8c01      	ldrh	r1, [r0, #32]
   16104:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16108:	4291      	cmp	r1, r2
   1610a:	d002      	beq.n	16112 <bt_mesh_subnet_foreach+0x16>
			continue;
		}

		cb(&subnets[i]);
   1610c:	4798      	blx	r3
		count++;
   1610e:	2001      	movs	r0, #1
	}

	return count;
}
   16110:	bd08      	pop	{r3, pc}
   16112:	2000      	movs	r0, #0
	return count;
   16114:	e7fc      	b.n	16110 <bt_mesh_subnet_foreach+0x14>
   16116:	bf00      	nop
   16118:	2000056c 	.word	0x2000056c

0001611c <bt_mesh_subnet_next>:

struct bt_mesh_subnet *bt_mesh_subnet_next(struct bt_mesh_subnet *sub)
{
	if (sub) {
   1611c:	b168      	cbz	r0, 1613a <bt_mesh_subnet_next+0x1e>
		sub = &subnets[0];
	}

	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
		/* Roll over once we reach the end */
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
   1611e:	4b08      	ldr	r3, [pc, #32]	; (16140 <bt_mesh_subnet_next+0x24>)
		sub++;
   16120:	30c4      	adds	r0, #196	; 0xc4
		sub = &subnets[0];
   16122:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
   16126:	4298      	cmp	r0, r3
   16128:	bf08      	it	eq
   1612a:	4610      	moveq	r0, r2
			sub = &subnets[0];
		}

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1612c:	8c02      	ldrh	r2, [r0, #32]
			return sub;
		}
	}

	return NULL;
}
   1612e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16132:	429a      	cmp	r2, r3
   16134:	bf08      	it	eq
   16136:	2000      	moveq	r0, #0
   16138:	4770      	bx	lr
		sub = &subnets[0];
   1613a:	4802      	ldr	r0, [pc, #8]	; (16144 <bt_mesh_subnet_next+0x28>)
   1613c:	e7f6      	b.n	1612c <bt_mesh_subnet_next+0x10>
   1613e:	bf00      	nop
   16140:	20000630 	.word	0x20000630
   16144:	2000056c 	.word	0x2000056c

00016148 <bt_mesh_net_keys_reset>:
	 * are associated with each net key.
	 */
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   16148:	4804      	ldr	r0, [pc, #16]	; (1615c <bt_mesh_net_keys_reset+0x14>)
   1614a:	8c02      	ldrh	r2, [r0, #32]
   1614c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16150:	429a      	cmp	r2, r3
   16152:	d001      	beq.n	16158 <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
   16154:	f00c b9ee 	b.w	22534 <subnet_del>
		}
	}
}
   16158:	4770      	bx	lr
   1615a:	bf00      	nop
   1615c:	2000056c 	.word	0x2000056c

00016160 <bt_mesh_net_cred_find>:
			   struct net_buf_simple *out,
			   bool (*cb)(struct bt_mesh_net_rx *rx,
				      struct net_buf_simple *in,
				      struct net_buf_simple *out,
				      const struct bt_mesh_net_cred *cred))
{
   16160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16162:	461d      	mov	r5, r3
		}
	}
#endif

	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		rx->sub = &subnets[i];
   16164:	4b16      	ldr	r3, [pc, #88]	; (161c0 <bt_mesh_net_cred_find+0x60>)
   16166:	6003      	str	r3, [r0, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
   16168:	f8b3 e020 	ldrh.w	lr, [r3, #32]
   1616c:	f64f 7cff 	movw	ip, #65535	; 0xffff
   16170:	45e6      	cmp	lr, ip
{
   16172:	4604      	mov	r4, r0
   16174:	460e      	mov	r6, r1
   16176:	4617      	mov	r7, r2
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
   16178:	d01f      	beq.n	161ba <bt_mesh_net_cred_find+0x5a>
			continue;
		}

		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
			if (!rx->sub->keys[j].valid) {
   1617a:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
   1617e:	f1bc 0f00 	cmp.w	ip, #0
   16182:	d002      	beq.n	1618a <bt_mesh_net_cred_find+0x2a>
				continue;
			}

			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
   16184:	3341      	adds	r3, #65	; 0x41
   16186:	47a8      	blx	r5
   16188:	b9a8      	cbnz	r0, 161b6 <bt_mesh_net_cred_find+0x56>
			if (!rx->sub->keys[j].valid) {
   1618a:	6823      	ldr	r3, [r4, #0]
   1618c:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
   16190:	b19a      	cbz	r2, 161ba <bt_mesh_net_cred_find+0x5a>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
   16192:	338b      	adds	r3, #139	; 0x8b
   16194:	463a      	mov	r2, r7
   16196:	4631      	mov	r1, r6
   16198:	4620      	mov	r0, r4
   1619a:	47a8      	blx	r5
   1619c:	b168      	cbz	r0, 161ba <bt_mesh_net_cred_find+0x5a>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
   1619e:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
   161a0:	7d23      	ldrb	r3, [r4, #20]
   161a2:	f023 0306 	bic.w	r3, r3, #6
   161a6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   161aa:	7523      	strb	r3, [r4, #20]
				rx->friend_cred = 0U;
				rx->ctx.net_idx = rx->sub->net_idx;
   161ac:	6823      	ldr	r3, [r4, #0]
   161ae:	8c1b      	ldrh	r3, [r3, #32]
   161b0:	80a3      	strh	r3, [r4, #4]
				return true;
   161b2:	2001      	movs	r0, #1
			}
		}
	}

	return false;
}
   161b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
   161b6:	2200      	movs	r2, #0
   161b8:	e7f2      	b.n	161a0 <bt_mesh_net_cred_find+0x40>
	return false;
   161ba:	2000      	movs	r0, #0
   161bc:	e7fa      	b.n	161b4 <bt_mesh_net_cred_find+0x54>
   161be:	bf00      	nop
   161c0:	2000056c 	.word	0x2000056c

000161c4 <bt_mesh_subnet_pending_store>:
}

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);

void bt_mesh_subnet_pending_store(void)
{
   161c4:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
   161c6:	4c0e      	ldr	r4, [pc, #56]	; (16200 <bt_mesh_subnet_pending_store+0x3c>)
   161c8:	7862      	ldrb	r2, [r4, #1]
   161ca:	06d1      	lsls	r1, r2, #27
{
   161cc:	b086      	sub	sp, #24
		if (!update->valid) {
   161ce:	d510      	bpl.n	161f2 <bt_mesh_subnet_pending_store+0x2e>
			continue;
		}

		if (update->clear) {
			clear_net_key(update->key_idx);
   161d0:	8823      	ldrh	r3, [r4, #0]
		if (update->clear) {
   161d2:	0692      	lsls	r2, r2, #26
			clear_net_key(update->key_idx);
   161d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
		if (update->clear) {
   161d8:	d50d      	bpl.n	161f6 <bt_mesh_subnet_pending_store+0x32>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   161da:	4a0a      	ldr	r2, [pc, #40]	; (16204 <bt_mesh_subnet_pending_store+0x40>)
   161dc:	2114      	movs	r1, #20
   161de:	a801      	add	r0, sp, #4
   161e0:	f009 fb58 	bl	1f894 <snprintk>
	err = settings_delete(path);
   161e4:	a801      	add	r0, sp, #4
   161e6:	f00a f90a 	bl	203fe <settings_delete>
		} else {
			store_subnet(update->key_idx);
		}

		update->valid = 0U;
   161ea:	7863      	ldrb	r3, [r4, #1]
   161ec:	f36f 1304 	bfc	r3, #4, #1
   161f0:	7063      	strb	r3, [r4, #1]
	}
}
   161f2:	b006      	add	sp, #24
   161f4:	bd10      	pop	{r4, pc}
			store_subnet(update->key_idx);
   161f6:	4618      	mov	r0, r3
   161f8:	f7ff fe7a 	bl	15ef0 <store_subnet>
   161fc:	e7f5      	b.n	161ea <bt_mesh_subnet_pending_store+0x26>
   161fe:	bf00      	nop
   16200:	20002b68 	.word	0x20002b68
   16204:	000275bb 	.word	0x000275bb

00016208 <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
   16208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   1620a:	4d07      	ldr	r5, [pc, #28]	; (16228 <app_key_evt+0x20>)
   1620c:	4f07      	ldr	r7, [pc, #28]	; (1622c <app_key_evt+0x24>)
{
   1620e:	4604      	mov	r4, r0
   16210:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   16212:	42bd      	cmp	r5, r7
   16214:	d300      	bcc.n	16218 <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
   16216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
   16218:	f855 3b04 	ldr.w	r3, [r5], #4
   1621c:	8821      	ldrh	r1, [r4, #0]
   1621e:	8860      	ldrh	r0, [r4, #2]
   16220:	4632      	mov	r2, r6
   16222:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   16224:	e7f5      	b.n	16212 <app_key_evt+0xa>
   16226:	bf00      	nop
   16228:	00026488 	.word	0x00026488
   1622c:	0002648c 	.word	0x0002648c

00016230 <store_app_key>:
{
   16230:	b530      	push	{r4, r5, lr}
		if (apps[i].app_idx == app_idx) {
   16232:	4c13      	ldr	r4, [pc, #76]	; (16280 <store_app_key+0x50>)
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   16234:	4a13      	ldr	r2, [pc, #76]	; (16284 <store_app_key+0x54>)
{
   16236:	b08f      	sub	sp, #60	; 0x3c
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   16238:	4603      	mov	r3, r0
{
   1623a:	4605      	mov	r5, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   1623c:	2114      	movs	r1, #20
   1623e:	4668      	mov	r0, sp
   16240:	f009 fb28 	bl	1f894 <snprintk>
		if (apps[i].app_idx == app_idx) {
   16244:	8863      	ldrh	r3, [r4, #2]
   16246:	42ab      	cmp	r3, r5
   16248:	d117      	bne.n	1627a <store_app_key+0x4a>
	key.net_idx = app->net_idx,
   1624a:	8823      	ldrh	r3, [r4, #0]
   1624c:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
   16250:	2210      	movs	r2, #16
	key.updated = app->updated,
   16252:	7923      	ldrb	r3, [r4, #4]
   16254:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   16258:	1da1      	adds	r1, r4, #6
   1625a:	f10d 0017 	add.w	r0, sp, #23
   1625e:	f00b fbcb 	bl	219f8 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
   16262:	2210      	movs	r2, #16
   16264:	f104 0117 	add.w	r1, r4, #23
   16268:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1626c:	f00b fbc4 	bl	219f8 <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
   16270:	2223      	movs	r2, #35	; 0x23
   16272:	a905      	add	r1, sp, #20
   16274:	4668      	mov	r0, sp
   16276:	f7fb fd51 	bl	11d1c <settings_save_one>
}
   1627a:	b00f      	add	sp, #60	; 0x3c
   1627c:	bd30      	pop	{r4, r5, pc}
   1627e:	bf00      	nop
   16280:	20000acc 	.word	0x20000acc
   16284:	000275e0 	.word	0x000275e0

00016288 <update_app_key_settings>:
{
   16288:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (update->key_idx == key_idx) {
   1628a:	4d1b      	ldr	r5, [pc, #108]	; (162f8 <update_app_key_settings+0x70>)
		if (!update->valid) {
   1628c:	786c      	ldrb	r4, [r5, #1]
		if (update->key_idx == key_idx) {
   1628e:	882a      	ldrh	r2, [r5, #0]
		if (!update->valid) {
   16290:	f014 0f10 	tst.w	r4, #16
{
   16294:	b087      	sub	sp, #28
   16296:	4603      	mov	r3, r0
	uint8_t clear = store ? 0U : 1U;
   16298:	f081 0601 	eor.w	r6, r1, #1
		if (update->key_idx == key_idx) {
   1629c:	f3c2 070b 	ubfx	r7, r2, #0, #12
		if (!update->valid) {
   162a0:	d113      	bne.n	162ca <update_app_key_settings+0x42>
	free_slot->key_idx = app_idx;
   162a2:	f3c0 030b 	ubfx	r3, r0, #0, #12
   162a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   162aa:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
   162ae:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
   162b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
   162b6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   162ba:	4313      	orrs	r3, r2
   162bc:	802b      	strh	r3, [r5, #0]
		bt_mesh_settings_store_schedule(
   162be:	2002      	movs	r0, #2
}
   162c0:	b007      	add	sp, #28
   162c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_mesh_settings_store_schedule(
   162c6:	f002 bba3 	b.w	18a10 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
   162ca:	4287      	cmp	r7, r0
   162cc:	d103      	bne.n	162d6 <update_app_key_settings+0x4e>
		update->clear = clear;
   162ce:	f366 1445 	bfi	r4, r6, #5, #1
   162d2:	706c      	strb	r4, [r5, #1]
   162d4:	e7f3      	b.n	162be <update_app_key_settings+0x36>
		if (store) {
   162d6:	b121      	cbz	r1, 162e2 <update_app_key_settings+0x5a>
}
   162d8:	b007      	add	sp, #28
   162da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			store_app_key(app_idx);
   162de:	f7ff bfa7 	b.w	16230 <store_app_key>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   162e2:	4a06      	ldr	r2, [pc, #24]	; (162fc <update_app_key_settings+0x74>)
   162e4:	2114      	movs	r1, #20
   162e6:	a801      	add	r0, sp, #4
   162e8:	f009 fad4 	bl	1f894 <snprintk>
	err = settings_delete(path);
   162ec:	a801      	add	r0, sp, #4
   162ee:	f00a f886 	bl	203fe <settings_delete>
}
   162f2:	b007      	add	sp, #28
   162f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162f6:	bf00      	nop
   162f8:	20002b6a 	.word	0x20002b6a
   162fc:	000275e0 	.word	0x000275e0

00016300 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
   16300:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
   16304:	b538      	push	{r3, r4, r5, lr}
   16306:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
   16308:	d123      	bne.n	16352 <subnet_evt+0x52>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
   1630a:	bd38      	pop	{r3, r4, r5, pc}
		} else if (evt == BT_MESH_KEY_REVOKED) {
   1630c:	2d04      	cmp	r5, #4
   1630e:	d11a      	bne.n	16346 <subnet_evt+0x46>
	if (!app->updated) {
   16310:	7923      	ldrb	r3, [r4, #4]
   16312:	2b00      	cmp	r3, #0
   16314:	d0f9      	beq.n	1630a <subnet_evt+0xa>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
   16316:	2211      	movs	r2, #17
   16318:	f104 0116 	add.w	r1, r4, #22
   1631c:	1d60      	adds	r0, r4, #5
   1631e:	f00b fb6b 	bl	219f8 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
   16322:	2211      	movs	r2, #17
   16324:	2100      	movs	r1, #0
   16326:	f104 0016 	add.w	r0, r4, #22
   1632a:	f00b fb70 	bl	21a0e <memset>
	app->updated = false;
   1632e:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
   16330:	2101      	movs	r1, #1
   16332:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
   16334:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
   16336:	f7ff ffa7 	bl	16288 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
   1633a:	4629      	mov	r1, r5
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
   1633c:	4620      	mov	r0, r4
}
   1633e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
   16342:	f7ff bf61 	b.w	16208 <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
   16346:	2d03      	cmp	r5, #3
   16348:	d1df      	bne.n	1630a <subnet_evt+0xa>
   1634a:	7923      	ldrb	r3, [r4, #4]
   1634c:	2b00      	cmp	r3, #0
   1634e:	d0dc      	beq.n	1630a <subnet_evt+0xa>
   16350:	e7f4      	b.n	1633c <subnet_evt+0x3c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   16352:	4c08      	ldr	r4, [pc, #32]	; (16374 <subnet_evt+0x74>)
   16354:	8862      	ldrh	r2, [r4, #2]
   16356:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1635a:	429a      	cmp	r2, r3
   1635c:	d0d5      	beq.n	1630a <subnet_evt+0xa>
		if (app->net_idx != sub->net_idx) {
   1635e:	8822      	ldrh	r2, [r4, #0]
   16360:	8c03      	ldrh	r3, [r0, #32]
   16362:	429a      	cmp	r2, r3
   16364:	d1d1      	bne.n	1630a <subnet_evt+0xa>
		if (evt == BT_MESH_KEY_DELETED) {
   16366:	2d01      	cmp	r5, #1
   16368:	d1d0      	bne.n	1630c <subnet_evt+0xc>
			app_key_del(app);
   1636a:	4620      	mov	r0, r4
}
   1636c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_del(app);
   16370:	f00c b980 	b.w	22674 <app_key_del>
   16374:	20000acc 	.word	0x20000acc

00016378 <bt_mesh_app_key_add>:
{
   16378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1637c:	4680      	mov	r8, r0
	if (!bt_mesh_subnet_get(net_idx)) {
   1637e:	4608      	mov	r0, r1
{
   16380:	460f      	mov	r7, r1
   16382:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
   16384:	f7ff fdaa 	bl	15edc <bt_mesh_subnet_get>
   16388:	b390      	cbz	r0, 163f0 <bt_mesh_app_key_add+0x78>
		if (apps[i].app_idx == app_idx) {
   1638a:	4d1a      	ldr	r5, [pc, #104]	; (163f4 <bt_mesh_app_key_add+0x7c>)
   1638c:	886b      	ldrh	r3, [r5, #2]
   1638e:	4598      	cmp	r8, r3
   16390:	d00b      	beq.n	163aa <bt_mesh_app_key_add+0x32>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
   16392:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16396:	4293      	cmp	r3, r2
   16398:	d128      	bne.n	163ec <bt_mesh_app_key_add+0x74>
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   1639a:	1d69      	adds	r1, r5, #5
   1639c:	4630      	mov	r0, r6
   1639e:	f001 fb55 	bl	17a4c <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
   163a2:	4604      	mov	r4, r0
   163a4:	b178      	cbz	r0, 163c6 <bt_mesh_app_key_add+0x4e>
		return STATUS_CANNOT_SET;
   163a6:	200f      	movs	r0, #15
   163a8:	e00b      	b.n	163c2 <bt_mesh_app_key_add+0x4a>
		if (app->net_idx != net_idx) {
   163aa:	882b      	ldrh	r3, [r5, #0]
   163ac:	42bb      	cmp	r3, r7
   163ae:	d11f      	bne.n	163f0 <bt_mesh_app_key_add+0x78>
		if (memcmp(key, app->keys[0].val, 16)) {
   163b0:	2210      	movs	r2, #16
   163b2:	1da9      	adds	r1, r5, #6
   163b4:	4630      	mov	r0, r6
   163b6:	f00b fb0e 	bl	219d6 <memcmp>
		return STATUS_SUCCESS;
   163ba:	2800      	cmp	r0, #0
   163bc:	bf14      	ite	ne
   163be:	2006      	movne	r0, #6
   163c0:	2000      	moveq	r0, #0
}
   163c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(app->keys[0].val, key, 16);
   163c6:	2210      	movs	r2, #16
	app->updated = false;
   163c8:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
   163ca:	4631      	mov	r1, r6
   163cc:	1da8      	adds	r0, r5, #6
	app->net_idx = net_idx;
   163ce:	802f      	strh	r7, [r5, #0]
	app->app_idx = app_idx;
   163d0:	f8a5 8002 	strh.w	r8, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
   163d4:	f00b fb10 	bl	219f8 <memcpy>
		update_app_key_settings(app->app_idx, true);
   163d8:	8868      	ldrh	r0, [r5, #2]
   163da:	2101      	movs	r1, #1
   163dc:	f7ff ff54 	bl	16288 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
   163e0:	4628      	mov	r0, r5
   163e2:	4621      	mov	r1, r4
   163e4:	f7ff ff10 	bl	16208 <app_key_evt>
	return STATUS_SUCCESS;
   163e8:	4620      	mov	r0, r4
   163ea:	e7ea      	b.n	163c2 <bt_mesh_app_key_add+0x4a>
		return STATUS_INSUFF_RESOURCES;
   163ec:	2005      	movs	r0, #5
   163ee:	e7e8      	b.n	163c2 <bt_mesh_app_key_add+0x4a>
		return STATUS_INVALID_NETKEY;
   163f0:	2004      	movs	r0, #4
   163f2:	e7e6      	b.n	163c2 <bt_mesh_app_key_add+0x4a>
   163f4:	20000acc 	.word	0x20000acc

000163f8 <bt_mesh_app_key_update>:
{
   163f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (apps[i].app_idx == app_idx) {
   163fa:	4d1f      	ldr	r5, [pc, #124]	; (16478 <bt_mesh_app_key_update+0x80>)
   163fc:	886b      	ldrh	r3, [r5, #2]
   163fe:	4283      	cmp	r3, r0
{
   16400:	4616      	mov	r6, r2
		if (apps[i].app_idx == app_idx) {
   16402:	d132      	bne.n	1646a <bt_mesh_app_key_update+0x72>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
   16404:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16408:	4299      	cmp	r1, r3
   1640a:	8828      	ldrh	r0, [r5, #0]
   1640c:	d001      	beq.n	16412 <bt_mesh_app_key_update+0x1a>
   1640e:	4288      	cmp	r0, r1
   16410:	d12d      	bne.n	1646e <bt_mesh_app_key_update+0x76>
	sub = bt_mesh_subnet_get(app->net_idx);
   16412:	f7ff fd63 	bl	15edc <bt_mesh_subnet_get>
	if (!sub) {
   16416:	b360      	cbz	r0, 16472 <bt_mesh_app_key_update+0x7a>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   16418:	f890 7022 	ldrb.w	r7, [r0, #34]	; 0x22
   1641c:	2f01      	cmp	r7, #1
   1641e:	d001      	beq.n	16424 <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
   16420:	200b      	movs	r0, #11
}
   16422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
   16424:	792b      	ldrb	r3, [r5, #4]
   16426:	b14b      	cbz	r3, 1643c <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
   16428:	4814      	ldr	r0, [pc, #80]	; (1647c <bt_mesh_app_key_update+0x84>)
   1642a:	2210      	movs	r2, #16
   1642c:	4631      	mov	r1, r6
   1642e:	f00b fad2 	bl	219d6 <memcmp>
		return STATUS_SUCCESS;
   16432:	2800      	cmp	r0, #0
   16434:	bf14      	ite	ne
   16436:	2006      	movne	r0, #6
   16438:	2000      	moveq	r0, #0
   1643a:	e7f2      	b.n	16422 <bt_mesh_app_key_update+0x2a>
   1643c:	4910      	ldr	r1, [pc, #64]	; (16480 <bt_mesh_app_key_update+0x88>)
   1643e:	4630      	mov	r0, r6
   16440:	f001 fb04 	bl	17a4c <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
   16444:	4604      	mov	r4, r0
   16446:	2800      	cmp	r0, #0
   16448:	d1ea      	bne.n	16420 <bt_mesh_app_key_update+0x28>
	memcpy(app->keys[1].val, key, 16);
   1644a:	2210      	movs	r2, #16
   1644c:	4631      	mov	r1, r6
   1644e:	480b      	ldr	r0, [pc, #44]	; (1647c <bt_mesh_app_key_update+0x84>)
	app->updated = true;
   16450:	712f      	strb	r7, [r5, #4]
	memcpy(app->keys[1].val, key, 16);
   16452:	f00b fad1 	bl	219f8 <memcpy>
		update_app_key_settings(app->app_idx, true);
   16456:	8868      	ldrh	r0, [r5, #2]
   16458:	4639      	mov	r1, r7
   1645a:	f7ff ff15 	bl	16288 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
   1645e:	4806      	ldr	r0, [pc, #24]	; (16478 <bt_mesh_app_key_update+0x80>)
   16460:	2102      	movs	r1, #2
   16462:	f7ff fed1 	bl	16208 <app_key_evt>
	return STATUS_SUCCESS;
   16466:	4620      	mov	r0, r4
   16468:	e7db      	b.n	16422 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_APPKEY;
   1646a:	2003      	movs	r0, #3
   1646c:	e7d9      	b.n	16422 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
   1646e:	2011      	movs	r0, #17
   16470:	e7d7      	b.n	16422 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
   16472:	2004      	movs	r0, #4
   16474:	e7d5      	b.n	16422 <bt_mesh_app_key_update+0x2a>
   16476:	bf00      	nop
   16478:	20000acc 	.word	0x20000acc
   1647c:	20000ae3 	.word	0x20000ae3
   16480:	20000ae2 	.word	0x20000ae2

00016484 <bt_mesh_app_key_del>:
{
   16484:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   16486:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1648a:	4299      	cmp	r1, r3
{
   1648c:	4605      	mov	r5, r0
   1648e:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   16490:	d105      	bne.n	1649e <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
   16492:	4b0d      	ldr	r3, [pc, #52]	; (164c8 <bt_mesh_app_key_del+0x44>)
   16494:	885a      	ldrh	r2, [r3, #2]
   16496:	42aa      	cmp	r2, r5
   16498:	d008      	beq.n	164ac <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
   1649a:	2000      	movs	r0, #0
}
   1649c:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   1649e:	4608      	mov	r0, r1
   164a0:	f7ff fd1c 	bl	15edc <bt_mesh_subnet_get>
   164a4:	2800      	cmp	r0, #0
   164a6:	d1f4      	bne.n	16492 <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
   164a8:	2004      	movs	r0, #4
   164aa:	e7f7      	b.n	1649c <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
   164ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   164b0:	4294      	cmp	r4, r2
   164b2:	d002      	beq.n	164ba <bt_mesh_app_key_del+0x36>
   164b4:	881b      	ldrh	r3, [r3, #0]
   164b6:	42a3      	cmp	r3, r4
   164b8:	d103      	bne.n	164c2 <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
   164ba:	4803      	ldr	r0, [pc, #12]	; (164c8 <bt_mesh_app_key_del+0x44>)
   164bc:	f00c f8da 	bl	22674 <app_key_del>
   164c0:	e7eb      	b.n	1649a <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
   164c2:	2011      	movs	r0, #17
   164c4:	e7ea      	b.n	1649c <bt_mesh_app_key_del+0x18>
   164c6:	bf00      	nop
   164c8:	20000acc 	.word	0x20000acc

000164cc <bt_mesh_app_key_set>:
{
   164cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
   164d0:	4d1b      	ldr	r5, [pc, #108]	; (16540 <bt_mesh_app_key_set+0x74>)
{
   164d2:	461c      	mov	r4, r3
		if (apps[i].app_idx == app_idx) {
   164d4:	886b      	ldrh	r3, [r5, #2]
   164d6:	4298      	cmp	r0, r3
{
   164d8:	4607      	mov	r7, r0
   164da:	4688      	mov	r8, r1
   164dc:	4616      	mov	r6, r2
		if (apps[i].app_idx == app_idx) {
   164de:	d02a      	beq.n	16536 <bt_mesh_app_key_set+0x6a>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
   164e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   164e4:	4293      	cmp	r3, r2
   164e6:	d128      	bne.n	1653a <bt_mesh_app_key_set+0x6e>
	memcpy(app->keys[0].val, old_key, 16);
   164e8:	4631      	mov	r1, r6
   164ea:	2210      	movs	r2, #16
   164ec:	1da8      	adds	r0, r5, #6
   164ee:	f00b fa83 	bl	219f8 <memcpy>
   164f2:	4630      	mov	r0, r6
   164f4:	1d69      	adds	r1, r5, #5
   164f6:	f001 faa9 	bl	17a4c <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
   164fa:	4606      	mov	r6, r0
   164fc:	b120      	cbz	r0, 16508 <bt_mesh_app_key_set+0x3c>
		return -EIO;
   164fe:	f06f 0604 	mvn.w	r6, #4
}
   16502:	4630      	mov	r0, r6
   16504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
   16508:	b93c      	cbnz	r4, 1651a <bt_mesh_app_key_set+0x4e>
	app->updated = !!new_key;
   1650a:	3c00      	subs	r4, #0
   1650c:	bf18      	it	ne
   1650e:	2401      	movne	r4, #1
	app->net_idx = net_idx;
   16510:	f8a5 8000 	strh.w	r8, [r5]
	app->app_idx = app_idx;
   16514:	806f      	strh	r7, [r5, #2]
	app->updated = !!new_key;
   16516:	712c      	strb	r4, [r5, #4]
	return 0;
   16518:	e7f3      	b.n	16502 <bt_mesh_app_key_set+0x36>
		memcpy(app->keys[1].val, new_key, 16);
   1651a:	4621      	mov	r1, r4
   1651c:	2210      	movs	r2, #16
   1651e:	f105 0017 	add.w	r0, r5, #23
   16522:	f00b fa69 	bl	219f8 <memcpy>
   16526:	f105 0116 	add.w	r1, r5, #22
   1652a:	4620      	mov	r0, r4
   1652c:	f001 fa8e 	bl	17a4c <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
   16530:	2800      	cmp	r0, #0
   16532:	d0ea      	beq.n	1650a <bt_mesh_app_key_set+0x3e>
   16534:	e7e3      	b.n	164fe <bt_mesh_app_key_set+0x32>
		return 0;
   16536:	2600      	movs	r6, #0
   16538:	e7e3      	b.n	16502 <bt_mesh_app_key_set+0x36>
		return -ENOMEM;
   1653a:	f06f 060b 	mvn.w	r6, #11
   1653e:	e7e0      	b.n	16502 <bt_mesh_app_key_set+0x36>
   16540:	20000acc 	.word	0x20000acc

00016544 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
   16544:	4b02      	ldr	r3, [pc, #8]	; (16550 <bt_mesh_app_key_exists+0xc>)
   16546:	885b      	ldrh	r3, [r3, #2]
}
   16548:	1a1b      	subs	r3, r3, r0
   1654a:	4258      	negs	r0, r3
   1654c:	4158      	adcs	r0, r3
   1654e:	4770      	bx	lr
   16550:	20000acc 	.word	0x20000acc

00016554 <bt_mesh_app_keys_get>:
{
   16554:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
   16556:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   16558:	4f0d      	ldr	r7, [pc, #52]	; (16590 <bt_mesh_app_keys_get+0x3c>)
{
   1655a:	4604      	mov	r4, r0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   1655c:	f64f 7cff 	movw	ip, #65535	; 0xffff
	size_t count = 0;
   16560:	4628      	mov	r0, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   16562:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
   16564:	b105      	cbz	r5, 16568 <bt_mesh_app_keys_get+0x14>
}
   16566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   16568:	4566      	cmp	r6, ip
   1656a:	d0fc      	beq.n	16566 <bt_mesh_app_keys_get+0x12>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
   1656c:	4564      	cmp	r4, ip
   1656e:	d002      	beq.n	16576 <bt_mesh_app_keys_get+0x22>
   16570:	883d      	ldrh	r5, [r7, #0]
   16572:	42a5      	cmp	r5, r4
   16574:	d101      	bne.n	1657a <bt_mesh_app_keys_get+0x26>
		if (skip) {
   16576:	b113      	cbz	r3, 1657e <bt_mesh_app_keys_get+0x2a>
			skip--;
   16578:	3b01      	subs	r3, #1
		app_idxs[count++] = app->app_idx;
   1657a:	2501      	movs	r5, #1
   1657c:	e7f1      	b.n	16562 <bt_mesh_app_keys_get+0xe>
		if (count >= max) {
   1657e:	4290      	cmp	r0, r2
   16580:	d203      	bcs.n	1658a <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
   16582:	f821 6010 	strh.w	r6, [r1, r0, lsl #1]
   16586:	3001      	adds	r0, #1
   16588:	e7f7      	b.n	1657a <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
   1658a:	f06f 000b 	mvn.w	r0, #11
   1658e:	e7ea      	b.n	16566 <bt_mesh_app_keys_get+0x12>
   16590:	20000acc 	.word	0x20000acc

00016594 <bt_mesh_keys_resolve>:
{
   16594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16596:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   16598:	8842      	ldrh	r2, [r0, #2]
{
   1659a:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   1659c:	1cd3      	adds	r3, r2, #3
   1659e:	b29b      	uxth	r3, r3
   165a0:	2b01      	cmp	r3, #1
{
   165a2:	4604      	mov	r4, r0
   165a4:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   165a6:	d906      	bls.n	165b6 <bt_mesh_keys_resolve+0x22>
		if (apps[i].app_idx == app_idx) {
   165a8:	4c1c      	ldr	r4, [pc, #112]	; (1661c <bt_mesh_keys_resolve+0x88>)
   165aa:	8863      	ldrh	r3, [r4, #2]
   165ac:	4293      	cmp	r3, r2
   165ae:	d01e      	beq.n	165ee <bt_mesh_keys_resolve+0x5a>
		return -EINVAL;
   165b0:	f06f 0015 	mvn.w	r0, #21
}
   165b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*sub = bt_mesh_subnet_get(ctx->net_idx);
   165b6:	8800      	ldrh	r0, [r0, #0]
   165b8:	f7ff fc90 	bl	15edc <bt_mesh_subnet_get>
   165bc:	6038      	str	r0, [r7, #0]
		if (!*sub) {
   165be:	2800      	cmp	r0, #0
   165c0:	d0f6      	beq.n	165b0 <bt_mesh_keys_resolve+0x1c>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
   165c2:	8862      	ldrh	r2, [r4, #2]
   165c4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   165c8:	429a      	cmp	r2, r3
   165ca:	d10d      	bne.n	165e8 <bt_mesh_keys_resolve+0x54>
		    !bt_mesh_has_addr(ctx->addr)) {
   165cc:	88a0      	ldrh	r0, [r4, #4]
   165ce:	f001 fdeb 	bl	181a8 <bt_mesh_has_addr>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
   165d2:	b948      	cbnz	r0, 165e8 <bt_mesh_keys_resolve+0x54>
			node = bt_mesh_cdb_node_get(ctx->addr);
   165d4:	88a0      	ldrh	r0, [r4, #4]
   165d6:	f005 f80d 	bl	1b5f4 <bt_mesh_cdb_node_get>
			if (!node) {
   165da:	2800      	cmp	r0, #0
   165dc:	d0e8      	beq.n	165b0 <bt_mesh_keys_resolve+0x1c>
			*app_key = node->dev_key;
   165de:	3015      	adds	r0, #21
   165e0:	6028      	str	r0, [r5, #0]
		*aid = 0;
   165e2:	2000      	movs	r0, #0
   165e4:	7030      	strb	r0, [r6, #0]
		return 0;
   165e6:	e7e5      	b.n	165b4 <bt_mesh_keys_resolve+0x20>
			*app_key = bt_mesh.dev_key;
   165e8:	4b0d      	ldr	r3, [pc, #52]	; (16620 <bt_mesh_keys_resolve+0x8c>)
   165ea:	602b      	str	r3, [r5, #0]
   165ec:	e7f9      	b.n	165e2 <bt_mesh_keys_resolve+0x4e>
	*sub = bt_mesh_subnet_get(app->net_idx);
   165ee:	8820      	ldrh	r0, [r4, #0]
   165f0:	f7ff fc74 	bl	15edc <bt_mesh_subnet_get>
   165f4:	6038      	str	r0, [r7, #0]
	if (!*sub) {
   165f6:	2800      	cmp	r0, #0
   165f8:	d0da      	beq.n	165b0 <bt_mesh_keys_resolve+0x1c>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
   165fa:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   165fe:	2b02      	cmp	r3, #2
   16600:	d107      	bne.n	16612 <bt_mesh_keys_resolve+0x7e>
   16602:	7923      	ldrb	r3, [r4, #4]
   16604:	b12b      	cbz	r3, 16612 <bt_mesh_keys_resolve+0x7e>
		*aid = app->keys[1].id;
   16606:	7da3      	ldrb	r3, [r4, #22]
   16608:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
   1660a:	3417      	adds	r4, #23
   1660c:	602c      	str	r4, [r5, #0]
	return 0;
   1660e:	2000      	movs	r0, #0
   16610:	e7d0      	b.n	165b4 <bt_mesh_keys_resolve+0x20>
		*aid = app->keys[0].id;
   16612:	7963      	ldrb	r3, [r4, #5]
   16614:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
   16616:	4b03      	ldr	r3, [pc, #12]	; (16624 <bt_mesh_keys_resolve+0x90>)
   16618:	602b      	str	r3, [r5, #0]
   1661a:	e7f8      	b.n	1660e <bt_mesh_keys_resolve+0x7a>
   1661c:	20000acc 	.word	0x20000acc
   16620:	20001d98 	.word	0x20001d98
   16624:	20000ad2 	.word	0x20000ad2

00016628 <bt_mesh_app_key_find>:
{
   16628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1662a:	9f06      	ldr	r7, [sp, #24]
   1662c:	4614      	mov	r4, r2
   1662e:	461e      	mov	r6, r3
	if (dev_key) {
   16630:	b328      	cbz	r0, 1667e <bt_mesh_app_key_find+0x56>
		if (IS_ENABLED(CONFIG_BT_MESH_CDB) &&
   16632:	7d13      	ldrb	r3, [r2, #20]
   16634:	f003 0330 	and.w	r3, r3, #48	; 0x30
   16638:	2b10      	cmp	r3, #16
   1663a:	d106      	bne.n	1664a <bt_mesh_app_key_find+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
   1663c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   16640:	2b00      	cmp	r3, #0
   16642:	dc11      	bgt.n	16668 <bt_mesh_app_key_find+0x40>
		return BT_MESH_KEY_UNUSED;
   16644:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   16648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			node = bt_mesh_cdb_node_get(rx->ctx.addr);
   1664a:	8910      	ldrh	r0, [r2, #8]
   1664c:	f004 ffd2 	bl	1b5f4 <bt_mesh_cdb_node_get>
			if (node && !cb(rx, node->dev_key, cb_data)) {
   16650:	2800      	cmp	r0, #0
   16652:	d0f3      	beq.n	1663c <bt_mesh_app_key_find+0x14>
   16654:	f100 0115 	add.w	r1, r0, #21
   16658:	463a      	mov	r2, r7
   1665a:	4620      	mov	r0, r4
   1665c:	47b0      	blx	r6
   1665e:	2800      	cmp	r0, #0
   16660:	d1ec      	bne.n	1663c <bt_mesh_app_key_find+0x14>
				return BT_MESH_KEY_DEV_REMOTE;
   16662:	f64f 70fd 	movw	r0, #65533	; 0xfffd
   16666:	e7ef      	b.n	16648 <bt_mesh_app_key_find+0x20>
			err = cb(rx, bt_mesh.dev_key, cb_data);
   16668:	4915      	ldr	r1, [pc, #84]	; (166c0 <bt_mesh_app_key_find+0x98>)
   1666a:	463a      	mov	r2, r7
   1666c:	4620      	mov	r0, r4
   1666e:	47b0      	blx	r6
			if (!err) {
   16670:	2800      	cmp	r0, #0
   16672:	d1e7      	bne.n	16644 <bt_mesh_app_key_find+0x1c>
				return BT_MESH_KEY_DEV_LOCAL;
   16674:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   16678:	e7e6      	b.n	16648 <bt_mesh_app_key_find+0x20>
			cred = &app->keys[0];
   1667a:	1d6b      	adds	r3, r5, #5
   1667c:	e014      	b.n	166a8 <bt_mesh_app_key_find+0x80>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   1667e:	4d11      	ldr	r5, [pc, #68]	; (166c4 <bt_mesh_app_key_find+0x9c>)
   16680:	886a      	ldrh	r2, [r5, #2]
   16682:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16686:	429a      	cmp	r2, r3
   16688:	d0dc      	beq.n	16644 <bt_mesh_app_key_find+0x1c>
		if (app->net_idx != rx->sub->net_idx) {
   1668a:	6823      	ldr	r3, [r4, #0]
   1668c:	882a      	ldrh	r2, [r5, #0]
   1668e:	8c1b      	ldrh	r3, [r3, #32]
   16690:	429a      	cmp	r2, r3
   16692:	d1d7      	bne.n	16644 <bt_mesh_app_key_find+0x1c>
		if (rx->new_key && app->updated) {
   16694:	7d23      	ldrb	r3, [r4, #20]
   16696:	079b      	lsls	r3, r3, #30
   16698:	d5ef      	bpl.n	1667a <bt_mesh_app_key_find+0x52>
   1669a:	7928      	ldrb	r0, [r5, #4]
			cred = &app->keys[1];
   1669c:	1d6b      	adds	r3, r5, #5
   1669e:	f105 0216 	add.w	r2, r5, #22
   166a2:	2800      	cmp	r0, #0
   166a4:	bf18      	it	ne
   166a6:	4613      	movne	r3, r2
		if (cred->id != aid) {
   166a8:	781a      	ldrb	r2, [r3, #0]
   166aa:	428a      	cmp	r2, r1
   166ac:	d1ca      	bne.n	16644 <bt_mesh_app_key_find+0x1c>
		err = cb(rx, cred->val, cb_data);
   166ae:	463a      	mov	r2, r7
   166b0:	1c59      	adds	r1, r3, #1
   166b2:	4620      	mov	r0, r4
   166b4:	47b0      	blx	r6
		if (err) {
   166b6:	2800      	cmp	r0, #0
   166b8:	d1c4      	bne.n	16644 <bt_mesh_app_key_find+0x1c>
		return app->app_idx;
   166ba:	8868      	ldrh	r0, [r5, #2]
   166bc:	e7c4      	b.n	16648 <bt_mesh_app_key_find+0x20>
   166be:	bf00      	nop
   166c0:	20001d98 	.word	0x20001d98
   166c4:	20000acc 	.word	0x20000acc

000166c8 <bt_mesh_app_keys_reset>:
void bt_mesh_app_keys_reset(void)
{
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx != BT_MESH_KEY_UNUSED) {
   166c8:	4804      	ldr	r0, [pc, #16]	; (166dc <bt_mesh_app_keys_reset+0x14>)
   166ca:	8842      	ldrh	r2, [r0, #2]
   166cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   166d0:	429a      	cmp	r2, r3
   166d2:	d001      	beq.n	166d8 <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
   166d4:	f00b bfce 	b.w	22674 <app_key_del>
		}
	}
}
   166d8:	4770      	bx	lr
   166da:	bf00      	nop
   166dc:	20000acc 	.word	0x20000acc

000166e0 <bt_mesh_app_key_pending_store>:
}

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);

void bt_mesh_app_key_pending_store(void)
{
   166e0:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
   166e2:	4c0e      	ldr	r4, [pc, #56]	; (1671c <bt_mesh_app_key_pending_store+0x3c>)
   166e4:	7862      	ldrb	r2, [r4, #1]
   166e6:	06d1      	lsls	r1, r2, #27
{
   166e8:	b086      	sub	sp, #24
		if (!update->valid) {
   166ea:	d510      	bpl.n	1670e <bt_mesh_app_key_pending_store+0x2e>
			continue;
		}

		if (update->clear) {
			clear_app_key(update->key_idx);
   166ec:	8823      	ldrh	r3, [r4, #0]
		if (update->clear) {
   166ee:	0692      	lsls	r2, r2, #26
			clear_app_key(update->key_idx);
   166f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
		if (update->clear) {
   166f4:	d50d      	bpl.n	16712 <bt_mesh_app_key_pending_store+0x32>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   166f6:	4a0a      	ldr	r2, [pc, #40]	; (16720 <bt_mesh_app_key_pending_store+0x40>)
   166f8:	2114      	movs	r1, #20
   166fa:	a801      	add	r0, sp, #4
   166fc:	f009 f8ca 	bl	1f894 <snprintk>
	err = settings_delete(path);
   16700:	a801      	add	r0, sp, #4
   16702:	f009 fe7c 	bl	203fe <settings_delete>
		} else {
			store_app_key(update->key_idx);
		}

		update->valid = 0U;
   16706:	7863      	ldrb	r3, [r4, #1]
   16708:	f36f 1304 	bfc	r3, #4, #1
   1670c:	7063      	strb	r3, [r4, #1]
	}
}
   1670e:	b006      	add	sp, #24
   16710:	bd10      	pop	{r4, pc}
			store_app_key(update->key_idx);
   16712:	4618      	mov	r0, r3
   16714:	f7ff fd8c 	bl	16230 <store_app_key>
   16718:	e7f5      	b.n	16706 <bt_mesh_app_key_pending_store+0x26>
   1671a:	bf00      	nop
   1671c:	20002b6a 	.word	0x20002b6a
   16720:	000275e0 	.word	0x000275e0

00016724 <sdu_recv>:
}

static int sdu_recv(struct bt_mesh_net_rx *rx, uint8_t hdr, uint8_t aszmic,
		    struct net_buf_simple *buf, struct net_buf_simple *sdu,
		    struct seg_rx *seg)
{
   16724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16728:	4604      	mov	r4, r0
   1672a:	b08b      	sub	sp, #44	; 0x2c
   1672c:	460d      	mov	r5, r1
   1672e:	4691      	mov	r9, r2
   16730:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
   16734:	2210      	movs	r2, #16
   16736:	2100      	movs	r1, #0
   16738:	a803      	add	r0, sp, #12
{
   1673a:	4698      	mov	r8, r3
	struct decrypt_ctx ctx = {
   1673c:	f00b f967 	bl	21a0e <memset>
   16740:	8923      	ldrh	r3, [r4, #8]
   16742:	f8ad 300a 	strh.w	r3, [sp, #10]
		.crypto = {
			.dev_key = !AKF(&hdr),
   16746:	ea6f 1095 	mvn.w	r0, r5, lsr #6
	struct decrypt_ctx ctx = {
   1674a:	8963      	ldrh	r3, [r4, #10]
   1674c:	f88d 9009 	strb.w	r9, [sp, #9]
			.dev_key = !AKF(&hdr),
   16750:	f000 0001 	and.w	r0, r0, #1
	struct decrypt_ctx ctx = {
   16754:	f88d 0008 	strb.w	r0, [sp, #8]
   16758:	f8ad 300c 	strh.w	r3, [sp, #12]
   1675c:	b31f      	cbz	r7, 167a6 <sdu_recv+0x82>
   1675e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   16762:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.aszmic = aszmic,
			.src = rx->ctx.addr,
			.dst = rx->ctx.recv_dst,
			.seq_num = seg ? (seg->seq_auth & 0xffffff) : rx->seq,
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   16766:	7d23      	ldrb	r3, [r4, #20]
	struct decrypt_ctx ctx = {
   16768:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   1676a:	f003 0201 	and.w	r2, r3, #1
   1676e:	4b0f      	ldr	r3, [pc, #60]	; (167ac <sdu_recv+0x88>)
	struct decrypt_ctx ctx = {
   16770:	9709      	str	r7, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   16772:	681b      	ldr	r3, [r3, #0]
   16774:	1a9b      	subs	r3, r3, r2
	struct decrypt_ctx ctx = {
   16776:	9305      	str	r3, [sp, #20]

	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
	}

	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   16778:	ab02      	add	r3, sp, #8
   1677a:	9300      	str	r3, [sp, #0]
   1677c:	4622      	mov	r2, r4
   1677e:	4b0c      	ldr	r3, [pc, #48]	; (167b0 <sdu_recv+0x8c>)
   16780:	f005 013f 	and.w	r1, r5, #63	; 0x3f
	struct decrypt_ctx ctx = {
   16784:	e9cd 8607 	strd	r8, r6, [sp, #28]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   16788:	f7ff ff4e 	bl	16628 <bt_mesh_app_key_find>
					       rx, sdu_try_decrypt, &ctx);
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   1678c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16790:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   16792:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   16794:	d003      	beq.n	1679e <sdu_recv+0x7a>
		return 0;
	}

	BT_DBG("Decrypted (AppIdx: 0x%03x)", rx->ctx.app_idx);

	bt_mesh_model_recv(rx, sdu);
   16796:	4631      	mov	r1, r6
   16798:	4620      	mov	r0, r4
   1679a:	f001 fd5d 	bl	18258 <bt_mesh_model_recv>

	return 0;
}
   1679e:	2000      	movs	r0, #0
   167a0:	b00b      	add	sp, #44	; 0x2c
   167a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
   167a6:	6922      	ldr	r2, [r4, #16]
   167a8:	e7dd      	b.n	16766 <sdu_recv+0x42>
   167aa:	bf00      	nop
   167ac:	20001d40 	.word	0x20001d40
   167b0:	00022755 	.word	0x00022755

000167b4 <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
   167b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   167b8:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);

	/* If this fails, the handler will exit early on the next execution, as
	 * it checks rx->in_use.
	 */
	(void)k_work_cancel_delayable(&rx->ack);
   167ba:	30a8      	adds	r0, #168	; 0xa8
{
   167bc:	460f      	mov	r7, r1
	(void)k_work_cancel_delayable(&rx->ack);
   167be:	f00f fa09 	bl	25bd4 <k_work_cancel_delayable>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
						&rx->seq_auth);
	}

	for (i = 0; i <= rx->seg_n; i++) {
   167c2:	2500      	movs	r5, #0
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
   167c4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1680c <seg_rx_reset+0x58>
   167c8:	1d26      	adds	r6, r4, #4
		rx->seg[i] = NULL;
   167ca:	46a9      	mov	r9, r5
		if (!rx->seg[i]) {
   167cc:	4631      	mov	r1, r6
   167ce:	3604      	adds	r6, #4
   167d0:	680b      	ldr	r3, [r1, #0]
   167d2:	b123      	cbz	r3, 167de <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
   167d4:	4640      	mov	r0, r8
   167d6:	f00f f81f 	bl	25818 <k_mem_slab_free>
		rx->seg[i] = NULL;
   167da:	f846 9c04 	str.w	r9, [r6, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
   167de:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
   167e2:	3501      	adds	r5, #1
   167e4:	f003 021f 	and.w	r2, r3, #31
   167e8:	4295      	cmp	r5, r2
   167ea:	ddef      	ble.n	167cc <seg_rx_reset+0x18>
	}

	rx->in_use = 0U;
   167ec:	f36f 1386 	bfc	r3, #6, #1
   167f0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
   167f4:	b13f      	cbz	r7, 16806 <seg_rx_reset+0x52>
		rx->seq_auth = 0U;
   167f6:	2000      	movs	r0, #0
   167f8:	2100      	movs	r1, #0
   167fa:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
		rx->sub = NULL;
   167fe:	2300      	movs	r3, #0
   16800:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
   16802:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
   16806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1680a:	bf00      	nop
   1680c:	20000b30 	.word	0x20000b30

00016810 <seg_tx_reset>:
{
   16810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16814:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&tx->retransmit);
   16816:	3030      	adds	r0, #48	; 0x30
   16818:	f00f f9dc 	bl	25bd4 <k_work_cancel_delayable>
	tx->cb = NULL;
   1681c:	2500      	movs	r5, #0
	tx->blocked = false;
   1681e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   16822:	4f23      	ldr	r7, [pc, #140]	; (168b0 <seg_tx_reset+0xa0>)
	tx->sub = NULL;
   16824:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
   16826:	2000      	movs	r0, #0
   16828:	2100      	movs	r1, #0
	tx->cb_data = NULL;
   1682a:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	tx->seq_auth = 0U;
   1682e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	tx->blocked = false;
   16832:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
   16836:	61a5      	str	r5, [r4, #24]
	tx->ack_src = BT_MESH_ADDR_UNASSIGNED;
   16838:	83a5      	strh	r5, [r4, #28]
	tx->blocked = false;
   1683a:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   1683e:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
   16840:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   16842:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16846:	b19b      	cbz	r3, 16870 <seg_tx_reset+0x60>
		if (!tx->seg[i]) {
   16848:	6833      	ldr	r3, [r6, #0]
   1684a:	b153      	cbz	r3, 16862 <seg_tx_reset+0x52>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   1684c:	4631      	mov	r1, r6
   1684e:	4638      	mov	r0, r7
   16850:	f00e ffe2 	bl	25818 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
   16854:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
   16858:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1685c:	3b01      	subs	r3, #1
   1685e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   16862:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   16866:	3501      	adds	r5, #1
   16868:	42ab      	cmp	r3, r5
   1686a:	f106 0604 	add.w	r6, r6, #4
   1686e:	dae8      	bge.n	16842 <seg_tx_reset+0x32>
	tx->seg_send_started = 0;
   16870:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	tx->nack_count = 0;
   16874:	2100      	movs	r1, #0
	tx->seg_send_started = 0;
   16876:	f361 1345 	bfi	r3, r1, #5, #1
   1687a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1687e:	4b0d      	ldr	r3, [pc, #52]	; (168b4 <seg_tx_reset+0xa4>)
	tx->nack_count = 0;
   16880:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
   16884:	f3bf 8f5b 	dmb	ish
   16888:	e853 2f00 	ldrex	r2, [r3]
   1688c:	f022 0020 	bic.w	r0, r2, #32
   16890:	e843 0400 	strex	r4, r0, [r3]
   16894:	2c00      	cmp	r4, #0
   16896:	d1f7      	bne.n	16888 <seg_tx_reset+0x78>
   16898:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
   1689c:	0692      	lsls	r2, r2, #26
   1689e:	d505      	bpl.n	168ac <seg_tx_reset+0x9c>
}
   168a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
   168a4:	f853 0c08 	ldr.w	r0, [r3, #-8]
   168a8:	f7fe bec4 	b.w	15634 <bt_mesh_net_iv_update>
}
   168ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   168b0:	20000b30 	.word	0x20000b30
   168b4:	20001d48 	.word	0x20001d48

000168b8 <seg_tx_complete>:
{
   168b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168bc:	460d      	mov	r5, r1
   168be:	4923      	ldr	r1, [pc, #140]	; (1694c <seg_tx_complete+0x94>)
	void *cb_data = tx->cb_data;
   168c0:	e9d0 670a 	ldrd	r6, r7, [r0, #40]	; 0x28
{
   168c4:	4604      	mov	r4, r0
	struct seg_tx *blocked = NULL;
   168c6:	2000      	movs	r0, #0
	for (i = 0; i < ARRAY_SIZE(seg_tx); ++i) {
   168c8:	4686      	mov	lr, r0
   168ca:	4688      	mov	r8, r1
		    seg_tx[i].blocked &&
   168cc:	f04f 0960 	mov.w	r9, #96	; 0x60
		if (&seg_tx[i] != tx &&
   168d0:	428c      	cmp	r4, r1
   168d2:	d018      	beq.n	16906 <seg_tx_complete+0x4e>
		    seg_tx[i].blocked &&
   168d4:	fb09 830e 	mla	r3, r9, lr, r8
   168d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		if (&seg_tx[i] != tx &&
   168dc:	07db      	lsls	r3, r3, #31
   168de:	d512      	bpl.n	16906 <seg_tx_complete+0x4e>
	return (tx->src == src) && (tx->dst == dst);
   168e0:	8b0a      	ldrh	r2, [r1, #24]
   168e2:	8b23      	ldrh	r3, [r4, #24]
   168e4:	429a      	cmp	r2, r3
   168e6:	d10e      	bne.n	16906 <seg_tx_complete+0x4e>
   168e8:	8b4a      	ldrh	r2, [r1, #26]
   168ea:	8b63      	ldrh	r3, [r4, #26]
   168ec:	429a      	cmp	r2, r3
   168ee:	d10a      	bne.n	16906 <seg_tx_complete+0x4e>
		    seg_tx_blocks(tx, seg_tx[i].src, seg_tx[i].dst) &&
   168f0:	b338      	cbz	r0, 16942 <seg_tx_complete+0x8a>
		    (!blocked || seg_tx[i].seq_auth < blocked->seq_auth)) {
   168f2:	f8d1 c010 	ldr.w	ip, [r1, #16]
   168f6:	f8d0 a010 	ldr.w	sl, [r0, #16]
   168fa:	694a      	ldr	r2, [r1, #20]
   168fc:	6943      	ldr	r3, [r0, #20]
   168fe:	45d4      	cmp	ip, sl
   16900:	eb72 0303 	sbcs.w	r3, r2, r3
   16904:	d31d      	bcc.n	16942 <seg_tx_complete+0x8a>
	for (i = 0; i < ARRAY_SIZE(seg_tx); ++i) {
   16906:	f10e 0e01 	add.w	lr, lr, #1
   1690a:	f1be 0f03 	cmp.w	lr, #3
   1690e:	f101 0160 	add.w	r1, r1, #96	; 0x60
   16912:	d1dd      	bne.n	168d0 <seg_tx_complete+0x18>
	if (blocked) {
   16914:	b150      	cbz	r0, 1692c <seg_tx_complete+0x74>
		blocked->blocked = false;
   16916:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1691a:	f36f 0300 	bfc	r3, #0, #1
   1691e:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
   16922:	2200      	movs	r2, #0
   16924:	2300      	movs	r3, #0
   16926:	3030      	adds	r0, #48	; 0x30
   16928:	f008 f97a 	bl	1ec20 <k_work_reschedule>
	seg_tx_reset(tx);
   1692c:	4620      	mov	r0, r4
   1692e:	f7ff ff6f 	bl	16810 <seg_tx_reset>
	if (cb && cb->end) {
   16932:	b146      	cbz	r6, 16946 <seg_tx_complete+0x8e>
   16934:	6873      	ldr	r3, [r6, #4]
   16936:	b133      	cbz	r3, 16946 <seg_tx_complete+0x8e>
		cb->end(err, cb_data);
   16938:	4639      	mov	r1, r7
   1693a:	4628      	mov	r0, r5
}
   1693c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cb->end(err, cb_data);
   16940:	4718      	bx	r3
   16942:	4608      	mov	r0, r1
   16944:	e7df      	b.n	16906 <seg_tx_complete+0x4e>
}
   16946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1694a:	bf00      	nop
   1694c:	20001e80 	.word	0x20001e80

00016950 <seg_tx_send_unacked>:
{
   16950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!tx->nack_count) {
   16954:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   16958:	b089      	sub	sp, #36	; 0x24
   1695a:	4604      	mov	r4, r0
	if (!tx->nack_count) {
   1695c:	b393      	cbz	r3, 169c4 <seg_tx_send_unacked+0x74>
		.net_idx = tx->sub->net_idx,
   1695e:	6802      	ldr	r2, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
   16960:	9205      	str	r2, [sp, #20]
	struct bt_mesh_msg_ctx ctx = {
   16962:	2300      	movs	r3, #0
   16964:	f8cd 300e 	str.w	r3, [sp, #14]
   16968:	8c13      	ldrh	r3, [r2, #32]
   1696a:	f8ad 3008 	strh.w	r3, [sp, #8]
   1696e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
		.addr = tx->dst,
   16972:	8b45      	ldrh	r5, [r0, #26]
	struct bt_mesh_msg_ctx ctx = {
   16974:	f8ad 500c 	strh.w	r5, [sp, #12]
   16978:	f343 0140 	sbfx	r1, r3, #1, #1
   1697c:	f8ad 100a 	strh.w	r1, [sp, #10]
   16980:	2101      	movs	r1, #1
   16982:	f88d 1012 	strb.w	r1, [sp, #18]
   16986:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
   1698a:	f88d 1013 	strb.w	r1, [sp, #19]
	struct bt_mesh_net_tx net_tx = {
   1698e:	f890 1020 	ldrb.w	r1, [r0, #32]
   16992:	aa02      	add	r2, sp, #8
		.friend_cred = tx->friend_cred,
   16994:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx net_tx = {
   16998:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   1699c:	9206      	str	r2, [sp, #24]
	if (!tx->attempts) {
   1699e:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
	struct bt_mesh_net_tx net_tx = {
   169a2:	8b02      	ldrh	r2, [r0, #24]
   169a4:	f8ad 201c 	strh.w	r2, [sp, #28]
		.xmit = tx->xmit,
   169a8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
	struct bt_mesh_net_tx net_tx = {
   169ac:	f88d 201e 	strb.w	r2, [sp, #30]
   169b0:	f88d 301f 	strb.w	r3, [sp, #31]
	if (!tx->attempts) {
   169b4:	b981      	cbnz	r1, 169d8 <seg_tx_send_unacked+0x88>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
   169b6:	b22d      	sxth	r5, r5
   169b8:	2d00      	cmp	r5, #0
			seg_tx_complete(tx, -ETIMEDOUT);
   169ba:	bfc8      	it	gt
   169bc:	f06f 0173 	mvngt.w	r1, #115	; 0x73
			seg_tx_complete(tx, 0);
   169c0:	f7ff ff7a 	bl	168b8 <seg_tx_complete>
}
   169c4:	b009      	add	sp, #36	; 0x24
   169c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!tx->seg[tx->seg_o]) {
   169ca:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   169ce:	6840      	ldr	r0, [r0, #4]
   169d0:	bb68      	cbnz	r0, 16a2e <seg_tx_send_unacked+0xde>
			tx->seg_o++;
   169d2:	3301      	adds	r3, #1
   169d4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	while (tx->seg_o <= tx->seg_n) {
   169d8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   169dc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   169e0:	4298      	cmp	r0, r3
   169e2:	d2f2      	bcs.n	169ca <seg_tx_send_unacked+0x7a>
	tx->seg_o = 0U;
   169e4:	2300      	movs	r3, #0
	tx->attempts--;
   169e6:	3901      	subs	r1, #1
	tx->seg_o = 0U;
   169e8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	tx->attempts--;
   169ec:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	k_work_reschedule(&tx->retransmit, K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   169f0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
   169f4:	2b00      	cmp	r3, #0
   169f6:	bfc4      	itt	gt
   169f8:	f894 2026 	ldrbgt.w	r2, [r4, #38]	; 0x26
   169fc:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   16a00:	f04f 0032 	mov.w	r0, #50	; 0x32
   16a04:	bfc8      	it	gt
   16a06:	fb00 3002 	mlagt	r0, r0, r2, r3
   16a0a:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   16a0c:	03c0      	lsls	r0, r0, #15
   16a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a12:	2300      	movs	r3, #0
   16a14:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   16a18:	03c9      	lsls	r1, r1, #15
   16a1a:	f7e9 fb71 	bl	100 <__aeabi_uldivmod>
   16a1e:	f104 0530 	add.w	r5, r4, #48	; 0x30
   16a22:	4602      	mov	r2, r0
   16a24:	460b      	mov	r3, r1
   16a26:	4628      	mov	r0, r5
   16a28:	f008 f8fa 	bl	1ec20 <k_work_reschedule>
   16a2c:	e7ca      	b.n	169c4 <seg_tx_send_unacked+0x74>
					 tx->xmit, BUF_TIMEOUT);
   16a2e:	2000      	movs	r0, #0
   16a30:	2100      	movs	r1, #0
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   16a32:	e9cd 0100 	strd	r0, r1, [sp]
   16a36:	2101      	movs	r1, #1
   16a38:	4608      	mov	r0, r1
   16a3a:	f7fe f9fb 	bl	14e34 <bt_mesh_adv_create>
		if (!seg) {
   16a3e:	4607      	mov	r7, r0
   16a40:	2800      	cmp	r0, #0
   16a42:	d0d5      	beq.n	169f0 <seg_tx_send_unacked+0xa0>
	net_buf_simple_reserve(&buf->b, reserve);
   16a44:	f100 0508 	add.w	r5, r0, #8
   16a48:	2109      	movs	r1, #9
   16a4a:	4628      	mov	r0, r5
   16a4c:	f00e f98a 	bl	24d64 <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   16a50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
   16a54:	f894 6023 	ldrb.w	r6, [r4, #35]	; 0x23
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   16a58:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	net_buf_simple_add_u8(buf, tx->hdr);
   16a5c:	f894 1020 	ldrb.w	r1, [r4, #32]
		return BT_MESH_APP_SEG_SDU_MAX;
   16a60:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   16a64:	8be3      	ldrh	r3, [r4, #30]
		return BT_MESH_APP_SEG_SDU_MAX;
   16a66:	bf14      	ite	ne
   16a68:	f04f 0808 	movne.w	r8, #8
   16a6c:	f04f 080c 	moveq.w	r8, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   16a70:	fb08 3316 	mls	r3, r8, r6, r3
   16a74:	4598      	cmp	r8, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   16a76:	4628      	mov	r0, r5
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   16a78:	bfa8      	it	ge
   16a7a:	fa5f f883 	uxtbge.w	r8, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   16a7e:	f00e f9de 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   16a82:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   16a86:	f3c9 090c 	ubfx	r9, r9, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   16a8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16a8e:	ea4f 1199 	mov.w	r1, r9, lsr #6
   16a92:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   16a96:	4628      	mov	r0, r5
   16a98:	f00e f9d1 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   16a9c:	08f1      	lsrs	r1, r6, #3
   16a9e:	ea41 0189 	orr.w	r1, r1, r9, lsl #2
   16aa2:	b2c9      	uxtb	r1, r1
   16aa4:	4628      	mov	r0, r5
   16aa6:	f00e f9ca 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   16aaa:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   16aae:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   16ab2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   16ab6:	b2c9      	uxtb	r1, r1
   16ab8:	4628      	mov	r0, r5
   16aba:	f00e f9c0 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   16abe:	6871      	ldr	r1, [r6, #4]
   16ac0:	4642      	mov	r2, r8
   16ac2:	4628      	mov	r0, r5
   16ac4:	f00e f9b2 	bl	24e2c <net_buf_simple_add_mem>
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
   16ac8:	4a06      	ldr	r2, [pc, #24]	; (16ae4 <seg_tx_send_unacked+0x194>)
   16aca:	4623      	mov	r3, r4
   16acc:	4639      	mov	r1, r7
   16ace:	a805      	add	r0, sp, #20
   16ad0:	f7fe fec6 	bl	15860 <bt_mesh_net_send>
		if (err) {
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d18b      	bne.n	169f0 <seg_tx_send_unacked+0xa0>
		tx->seg_o++;
   16ad8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   16adc:	3301      	adds	r3, #1
   16ade:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		return;
   16ae2:	e76f      	b.n	169c4 <seg_tx_send_unacked+0x74>
   16ae4:	000268e0 	.word	0x000268e0

00016ae8 <ctl_recv>:
{
   16ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
   16aec:	f011 047f 	ands.w	r4, r1, #127	; 0x7f
{
   16af0:	4680      	mov	r8, r0
   16af2:	4615      	mov	r5, r2
   16af4:	461e      	mov	r6, r3
	switch (ctl_op) {
   16af6:	d008      	beq.n	16b0a <ctl_recv+0x22>
   16af8:	2c0a      	cmp	r4, #10
   16afa:	f000 80a6 	beq.w	16c4a <ctl_recv+0x162>
	if (!rx->local_match) {
   16afe:	7d03      	ldrb	r3, [r0, #20]
   16b00:	065b      	lsls	r3, r3, #25
   16b02:	d54a      	bpl.n	16b9a <ctl_recv+0xb2>
	return -ENOENT;
   16b04:	f06f 0701 	mvn.w	r7, #1
   16b08:	e004      	b.n	16b14 <ctl_recv+0x2c>
	if (buf->len < 6) {
   16b0a:	8893      	ldrh	r3, [r2, #4]
   16b0c:	2b05      	cmp	r3, #5
   16b0e:	d805      	bhi.n	16b1c <ctl_recv+0x34>
		return -EINVAL;
   16b10:	f06f 0715 	mvn.w	r7, #21
}
   16b14:	4638      	mov	r0, r7
   16b16:	b003      	add	sp, #12
   16b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
   16b1c:	4610      	mov	r0, r2
   16b1e:	f00e fa07 	bl	24f30 <net_buf_simple_pull_be16>
	obo = seq_zero >> 15;
   16b22:	f3c0 39cf 	ubfx	r9, r0, #15, #16
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   16b26:	f3c0 078c 	ubfx	r7, r0, #2, #13
	ack = net_buf_simple_pull_be32(buf);
   16b2a:	4628      	mov	r0, r5
   16b2c:	f00e fa18 	bl	24f60 <net_buf_simple_pull_be32>
   16b30:	4a49      	ldr	r2, [pc, #292]	; (16c58 <ctl_recv+0x170>)
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
   16b32:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	ack = net_buf_simple_pull_be32(buf);
   16b36:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
   16b38:	4690      	mov	r8, r2
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
   16b3a:	46a2      	mov	sl, r4
   16b3c:	e9d2 0c04 	ldrd	r0, ip, [r2, #16]
   16b40:	f3c0 010c 	ubfx	r1, r0, #0, #13
   16b44:	45d2      	cmp	sl, sl
   16b46:	bf08      	it	eq
   16b48:	42b9      	cmpeq	r1, r7
   16b4a:	d128      	bne.n	16b9e <ctl_recv+0xb6>
		if (tx->dst == addr) {
   16b4c:	8b51      	ldrh	r1, [r2, #26]
   16b4e:	428b      	cmp	r3, r1
   16b50:	d012      	beq.n	16b78 <ctl_recv+0x90>
		if (obo && (tx->nack_count == tx->seg_n + 1 || tx->ack_src == addr)) {
   16b52:	f1b9 0f00 	cmp.w	r9, #0
   16b56:	d022      	beq.n	16b9e <ctl_recv+0xb6>
   16b58:	f892 e022 	ldrb.w	lr, [r2, #34]	; 0x22
   16b5c:	f892 b024 	ldrb.w	fp, [r2, #36]	; 0x24
   16b60:	f10e 0e01 	add.w	lr, lr, #1
   16b64:	45f3      	cmp	fp, lr
   16b66:	d003      	beq.n	16b70 <ctl_recv+0x88>
   16b68:	f8b2 e01c 	ldrh.w	lr, [r2, #28]
   16b6c:	459e      	cmp	lr, r3
   16b6e:	d116      	bne.n	16b9e <ctl_recv+0xb6>
			tx->ack_src = addr;
   16b70:	2260      	movs	r2, #96	; 0x60
   16b72:	fb02 8204 	mla	r2, r2, r4, r8
   16b76:	8393      	strh	r3, [r2, #28]
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
   16b78:	b209      	sxth	r1, r1
   16b7a:	2900      	cmp	r1, #0
   16b7c:	ddc8      	ble.n	16b10 <ctl_recv+0x28>
   16b7e:	f04f 0960 	mov.w	r9, #96	; 0x60
   16b82:	fb09 f904 	mul.w	r9, r9, r4
	*seq_auth = tx->seq_auth;
   16b86:	e9c6 0c00 	strd	r0, ip, [r6]
		tx = &seg_tx[i];
   16b8a:	eb08 0a09 	add.w	sl, r8, r9
	if (!ack) {
   16b8e:	b965      	cbnz	r5, 16baa <ctl_recv+0xc2>
		seg_tx_complete(tx, -ECANCELED);
   16b90:	f06f 018b 	mvn.w	r1, #139	; 0x8b
   16b94:	4650      	mov	r0, sl
   16b96:	f7ff fe8f 	bl	168b8 <seg_tx_complete>
	return 0;
   16b9a:	2700      	movs	r7, #0
   16b9c:	e7ba      	b.n	16b14 <ctl_recv+0x2c>
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
   16b9e:	3401      	adds	r4, #1
   16ba0:	2c03      	cmp	r4, #3
   16ba2:	f102 0260 	add.w	r2, r2, #96	; 0x60
   16ba6:	d1c9      	bne.n	16b3c <ctl_recv+0x54>
   16ba8:	e7b2      	b.n	16b10 <ctl_recv+0x28>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
   16baa:	f89a 2022 	ldrb.w	r2, [sl, #34]	; 0x22
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
   16bae:	fab5 f385 	clz	r3, r5
   16bb2:	f1c3 031f 	rsb	r3, r3, #31
   16bb6:	4293      	cmp	r3, r2
   16bb8:	d8aa      	bhi.n	16b10 <ctl_recv+0x28>
   16bba:	f04f 0b18 	mov.w	fp, #24
   16bbe:	fb0b fb04 	mul.w	fp, fp, r4
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   16bc2:	2d00      	cmp	r5, #0
   16bc4:	fa95 f6a5 	rbit	r6, r5
   16bc8:	fab6 f686 	clz	r6, r6
   16bcc:	bf08      	it	eq
   16bce:	f04f 36ff 	moveq.w	r6, #4294967295
	while ((bit = find_lsb_set(ack))) {
   16bd2:	1c77      	adds	r7, r6, #1
   16bd4:	d111      	bne.n	16bfa <ctl_recv+0x112>
	if (tx->nack_count) {
   16bd6:	2160      	movs	r1, #96	; 0x60
   16bd8:	fb01 8404 	mla	r4, r1, r4, r8
   16bdc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16be0:	b373      	cbz	r3, 16c40 <ctl_recv+0x158>
		if (tx->seg_o == 0) {
   16be2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   16be6:	2b00      	cmp	r3, #0
   16be8:	d1d7      	bne.n	16b9a <ctl_recv+0xb2>
			k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   16bea:	f109 0030 	add.w	r0, r9, #48	; 0x30
   16bee:	2200      	movs	r2, #0
   16bf0:	2300      	movs	r3, #0
   16bf2:	4440      	add	r0, r8
   16bf4:	f008 f814 	bl	1ec20 <k_work_reschedule>
   16bf8:	e78c      	b.n	16b14 <ctl_recv+0x2c>
		if (tx->seg[bit - 1]) {
   16bfa:	2718      	movs	r7, #24
   16bfc:	4367      	muls	r7, r4
   16bfe:	19bb      	adds	r3, r7, r6
   16c00:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   16c04:	685b      	ldr	r3, [r3, #4]
   16c06:	b1ab      	cbz	r3, 16c34 <ctl_recv+0x14c>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   16c08:	f10b 0101 	add.w	r1, fp, #1
   16c0c:	fa51 f186 	uxtab	r1, r1, r6
			seg_tx_done(tx, bit - 1);
   16c10:	b2f3      	uxtb	r3, r6
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   16c12:	4812      	ldr	r0, [pc, #72]	; (16c5c <ctl_recv+0x174>)
			seg_tx_done(tx, bit - 1);
   16c14:	9301      	str	r3, [sp, #4]
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   16c16:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   16c1a:	f00e fdfd 	bl	25818 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
   16c1e:	9b01      	ldr	r3, [sp, #4]
   16c20:	441f      	add	r7, r3
   16c22:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   16c26:	2300      	movs	r3, #0
   16c28:	607b      	str	r3, [r7, #4]
	tx->nack_count--;
   16c2a:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
   16c2e:	3b01      	subs	r3, #1
   16c30:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
		ack &= ~BIT(bit - 1);
   16c34:	2301      	movs	r3, #1
   16c36:	fa03 f606 	lsl.w	r6, r3, r6
   16c3a:	ea25 0506 	bic.w	r5, r5, r6
   16c3e:	e7c0      	b.n	16bc2 <ctl_recv+0xda>
		seg_tx_complete(tx, 0);
   16c40:	4639      	mov	r1, r7
   16c42:	4650      	mov	r0, sl
   16c44:	f7ff fe38 	bl	168b8 <seg_tx_complete>
   16c48:	e764      	b.n	16b14 <ctl_recv+0x2c>
		return bt_mesh_hb_recv(rx, buf);
   16c4a:	4611      	mov	r1, r2
}
   16c4c:	b003      	add	sp, #12
   16c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return bt_mesh_hb_recv(rx, buf);
   16c52:	f000 bcf9 	b.w	17648 <bt_mesh_hb_recv>
   16c56:	bf00      	nop
   16c58:	20001e80 	.word	0x20001e80
   16c5c:	20000b30 	.word	0x20000b30

00016c60 <send_seg>:
{
   16c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c64:	b085      	sub	sp, #20
   16c66:	460f      	mov	r7, r1
	bool blocked = false;
   16c68:	2500      	movs	r5, #0
{
   16c6a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   16c6e:	496e      	ldr	r1, [pc, #440]	; (16e28 <send_seg+0x1c8>)
   16c70:	2603      	movs	r6, #3
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
   16c72:	462c      	mov	r4, r5
		if (seg_tx[i].nack_count) {
   16c74:	f891 e024 	ldrb.w	lr, [r1, #36]	; 0x24
   16c78:	f1be 0f00 	cmp.w	lr, #0
   16c7c:	f000 8092 	beq.w	16da4 <send_seg+0x144>
	return (tx->src == src) && (tx->dst == dst);
   16c80:	f8b0 8008 	ldrh.w	r8, [r0, #8]
   16c84:	f8b1 e018 	ldrh.w	lr, [r1, #24]
   16c88:	45f0      	cmp	r8, lr
   16c8a:	f040 8088 	bne.w	16d9e <send_seg+0x13e>
   16c8e:	f8d0 e004 	ldr.w	lr, [r0, #4]
   16c92:	f8b1 801a 	ldrh.w	r8, [r1, #26]
   16c96:	f8be e004 	ldrh.w	lr, [lr, #4]
   16c9a:	ebae 0908 	sub.w	r9, lr, r8
   16c9e:	f1d9 0e00 	rsbs	lr, r9, #0
   16ca2:	eb4e 0e09 	adc.w	lr, lr, r9
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
   16ca6:	ea45 050e 	orr.w	r5, r5, lr
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
   16caa:	3e01      	subs	r6, #1
   16cac:	f101 0160 	add.w	r1, r1, #96	; 0x60
   16cb0:	d1e0      	bne.n	16c74 <send_seg+0x14>
	if (!tx) {
   16cb2:	2c00      	cmp	r4, #0
   16cb4:	f000 80b5 	beq.w	16e22 <send_seg+0x1c2>
						 net_tx->ctx->addr);
   16cb8:	f8d0 e004 	ldr.w	lr, [r0, #4]
	if (ctl_op) {
   16cbc:	f1bc 0f00 	cmp.w	ip, #0
   16cc0:	d074      	beq.n	16dac <send_seg+0x14c>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
   16cc2:	f89c 1000 	ldrb.w	r1, [ip]
   16cc6:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
   16cca:	f884 1020 	strb.w	r1, [r4, #32]
	tx->src = net_tx->src;
   16cce:	8901      	ldrh	r1, [r0, #8]
   16cd0:	8321      	strh	r1, [r4, #24]
	tx->dst = net_tx->ctx->addr;
   16cd2:	f8be 1004 	ldrh.w	r1, [lr, #4]
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   16cd6:	f8b7 e004 	ldrh.w	lr, [r7, #4]
	tx->dst = net_tx->ctx->addr;
   16cda:	8361      	strh	r1, [r4, #26]
		return BT_MESH_APP_SEG_SDU_MAX;
   16cdc:	f1bc 0f00 	cmp.w	ip, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   16ce0:	f10e 31ff 	add.w	r1, lr, #4294967295
	tx->seg_o = 0;
   16ce4:	f04f 0c00 	mov.w	ip, #0
		return BT_MESH_APP_SEG_SDU_MAX;
   16ce8:	bf14      	ite	ne
   16cea:	f04f 0808 	movne.w	r8, #8
   16cee:	f04f 080c 	moveq.w	r8, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   16cf2:	fb91 f1f8 	sdiv	r1, r1, r8
   16cf6:	b2c9      	uxtb	r1, r1
   16cf8:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	tx->seg_o = 0;
   16cfc:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
	tx->nack_count = tx->seg_n + 1;
   16d00:	f101 0101 	add.w	r1, r1, #1
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   16d04:	f8df c124 	ldr.w	ip, [pc, #292]	; 16e2c <send_seg+0x1cc>
	tx->nack_count = tx->seg_n + 1;
   16d08:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	tx->len = sdu->len;
   16d0c:	f8a4 e01e 	strh.w	lr, [r4, #30]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   16d10:	f8dc 1000 	ldr.w	r1, [ip]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d14:	f3bf 8f5b 	dmb	ish
   16d18:	f8dc e008 	ldr.w	lr, [ip, #8]
   16d1c:	f3bf 8f5b 	dmb	ish
   16d20:	f3ce 0e80 	ubfx	lr, lr, #2, #1
   16d24:	f8dc c004 	ldr.w	ip, [ip, #4]
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
   16d28:	f8df a104 	ldr.w	sl, [pc, #260]	; 16e30 <send_seg+0x1d0>
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   16d2c:	eba1 010e 	sub.w	r1, r1, lr
   16d30:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   16d34:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
   16d38:	e9c4 1e04 	strd	r1, lr, [r4, #16]
	tx->sub = net_tx->sub;
   16d3c:	6801      	ldr	r1, [r0, #0]
   16d3e:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
   16d40:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
   16d44:	f04f 0304 	mov.w	r3, #4
   16d48:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	tx->xmit = net_tx->xmit;
   16d4c:	7a83      	ldrb	r3, [r0, #10]
   16d4e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	tx->aszmic = net_tx->aszmic;
   16d52:	7ac2      	ldrb	r2, [r0, #11]
	tx->ctl = !!ctl_op;
   16d54:	bf14      	ite	ne
   16d56:	2301      	movne	r3, #1
   16d58:	2300      	moveq	r3, #0
	tx->aszmic = net_tx->aszmic;
   16d5a:	f3c2 0140 	ubfx	r1, r2, #1, #1
	tx->blocked = blocked;
   16d5e:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
	tx->friend_cred = net_tx->friend_cred;
   16d62:	f3c2 0200 	ubfx	r2, r2, #0, #1
	tx->blocked = blocked;
   16d66:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   16d6a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   16d6e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   16d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16d76:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   16d7a:	4313      	orrs	r3, r2
   16d7c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	tx->ttl = net_tx->ctx->send_ttl;
   16d80:	6843      	ldr	r3, [r0, #4]
   16d82:	7adb      	ldrb	r3, [r3, #11]
   16d84:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	for (seg_o = 0U; sdu->len; seg_o++) {
   16d88:	f8b7 9004 	ldrh.w	r9, [r7, #4]
   16d8c:	f1b9 0f00 	cmp.w	r9, #0
   16d90:	d119      	bne.n	16dc6 <send_seg+0x166>
	if (blocked) {
   16d92:	2d00      	cmp	r5, #0
   16d94:	d040      	beq.n	16e18 <send_seg+0x1b8>
		bt_mesh_next_seq();
   16d96:	f7fe fcfb 	bl	15790 <bt_mesh_next_seq>
		return 0;
   16d9a:	4648      	mov	r0, r9
   16d9c:	e021      	b.n	16de2 <send_seg+0x182>
	return (tx->src == src) && (tx->dst == dst);
   16d9e:	f04f 0e00 	mov.w	lr, #0
   16da2:	e780      	b.n	16ca6 <send_seg+0x46>
		} else if (!tx) {
   16da4:	2c00      	cmp	r4, #0
   16da6:	bf08      	it	eq
   16da8:	460c      	moveq	r4, r1
   16daa:	e77e      	b.n	16caa <send_seg+0x4a>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
   16dac:	f8be 1002 	ldrh.w	r1, [lr, #2]
   16db0:	3103      	adds	r1, #3
   16db2:	b289      	uxth	r1, r1
   16db4:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
   16db6:	bf85      	ittet	hi
   16db8:	7ac1      	ldrbhi	r1, [r0, #11]
   16dba:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
   16dbe:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
   16dc0:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
   16dc4:	e781      	b.n	16cca <send_seg+0x6a>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
   16dc6:	2200      	movs	r2, #0
   16dc8:	2300      	movs	r3, #0
   16dca:	a903      	add	r1, sp, #12
   16dcc:	4650      	mov	r0, sl
   16dce:	f007 fb49 	bl	1e464 <k_mem_slab_alloc>
		if (err) {
   16dd2:	f106 0b01 	add.w	fp, r6, #1
   16dd6:	b138      	cbz	r0, 16de8 <send_seg+0x188>
			seg_tx_reset(tx);
   16dd8:	4620      	mov	r0, r4
   16dda:	f7ff fd19 	bl	16810 <seg_tx_reset>
			return -ENOBUFS;
   16dde:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   16de2:	b005      	add	sp, #20
   16de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
   16de8:	f8b7 9004 	ldrh.w	r9, [r7, #4]
   16dec:	9b03      	ldr	r3, [sp, #12]
   16dee:	9301      	str	r3, [sp, #4]
   16df0:	45c1      	cmp	r9, r8
   16df2:	bf28      	it	cs
   16df4:	46c1      	movcs	r9, r8
   16df6:	4649      	mov	r1, r9
   16df8:	4638      	mov	r0, r7
   16dfa:	f00e f881 	bl	24f00 <net_buf_simple_pull_mem>
   16dfe:	9b01      	ldr	r3, [sp, #4]
		tx->seg[seg_o] = buf;
   16e00:	b2f6      	uxtb	r6, r6
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
   16e02:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
   16e04:	eb04 0686 	add.w	r6, r4, r6, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
   16e08:	4618      	mov	r0, r3
   16e0a:	464a      	mov	r2, r9
   16e0c:	f00a fdf4 	bl	219f8 <memcpy>
		tx->seg[seg_o] = buf;
   16e10:	9b03      	ldr	r3, [sp, #12]
   16e12:	6073      	str	r3, [r6, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
   16e14:	465e      	mov	r6, fp
   16e16:	e7b7      	b.n	16d88 <send_seg+0x128>
	seg_tx_send_unacked(tx);
   16e18:	4620      	mov	r0, r4
   16e1a:	f7ff fd99 	bl	16950 <seg_tx_send_unacked>
	return 0;
   16e1e:	4628      	mov	r0, r5
   16e20:	e7df      	b.n	16de2 <send_seg+0x182>
		return -EBUSY;
   16e22:	f06f 000f 	mvn.w	r0, #15
   16e26:	e7dc      	b.n	16de2 <send_seg+0x182>
   16e28:	20001e80 	.word	0x20001e80
   16e2c:	20001d40 	.word	0x20001d40
   16e30:	20000b30 	.word	0x20000b30

00016e34 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
   16e34:	4a06      	ldr	r2, [pc, #24]	; (16e50 <bt_mesh_tx_in_progress+0x1c>)
   16e36:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   16e3a:	f892 1084 	ldrb.w	r1, [r2, #132]	; 0x84
   16e3e:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
   16e42:	430b      	orrs	r3, r1
   16e44:	4313      	orrs	r3, r2
}
   16e46:	bf14      	ite	ne
   16e48:	2001      	movne	r0, #1
   16e4a:	2000      	moveq	r0, #0
   16e4c:	4770      	bx	lr
   16e4e:	bf00      	nop
   16e50:	20001e80 	.word	0x20001e80

00016e54 <bt_mesh_trans_send>:
{
   16e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e58:	461f      	mov	r7, r3
	if (msg->len < 1) {
   16e5a:	888b      	ldrh	r3, [r1, #4]
{
   16e5c:	b08b      	sub	sp, #44	; 0x2c
   16e5e:	4604      	mov	r4, r0
   16e60:	460d      	mov	r5, r1
   16e62:	4616      	mov	r6, r2
	if (msg->len < 1) {
   16e64:	b923      	cbnz	r3, 16e70 <bt_mesh_trans_send+0x1c>
		return -EINVAL;
   16e66:	f06f 0015 	mvn.w	r0, #21
}
   16e6a:	b00b      	add	sp, #44	; 0x2c
   16e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (msg->len > BT_MESH_TX_SDU_MAX - BT_MESH_MIC_SHORT) {
   16e70:	2b20      	cmp	r3, #32
   16e72:	f200 8092 	bhi.w	16f9a <bt_mesh_trans_send+0x146>
	if (net_buf_simple_tailroom(msg) < BT_MESH_MIC_SHORT) {
   16e76:	4608      	mov	r0, r1
   16e78:	f00e f87f 	bl	24f7a <net_buf_simple_tailroom>
   16e7c:	2803      	cmp	r0, #3
   16e7e:	d9f2      	bls.n	16e66 <bt_mesh_trans_send+0x12>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   16e80:	f8d4 8004 	ldr.w	r8, [r4, #4]
   16e84:	f898 300b 	ldrb.w	r3, [r8, #11]
   16e88:	2bff      	cmp	r3, #255	; 0xff
   16e8a:	d17b      	bne.n	16f84 <bt_mesh_trans_send+0x130>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   16e8c:	f7fd fedc 	bl	14c48 <bt_mesh_default_ttl_get>
   16e90:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
   16e94:	88ab      	ldrh	r3, [r5, #4]
		tx->ctx->send_rel = true;
   16e96:	6860      	ldr	r0, [r4, #4]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
   16e98:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
   16e9a:	bf84      	itt	hi
   16e9c:	2301      	movhi	r3, #1
   16e9e:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   16ea0:	8883      	ldrh	r3, [r0, #4]
   16ea2:	2b00      	cmp	r3, #0
   16ea4:	d0df      	beq.n	16e66 <bt_mesh_trans_send+0x12>
   16ea6:	b21b      	sxth	r3, r3
   16ea8:	2b00      	cmp	r3, #0
   16eaa:	dc04      	bgt.n	16eb6 <bt_mesh_trans_send+0x62>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
   16eac:	8843      	ldrh	r3, [r0, #2]
   16eae:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
   16eb0:	b29b      	uxth	r3, r3
   16eb2:	2b01      	cmp	r3, #1
   16eb4:	d9d7      	bls.n	16e66 <bt_mesh_trans_send+0x12>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
   16eb6:	f10d 030f 	add.w	r3, sp, #15
   16eba:	aa04      	add	r2, sp, #16
   16ebc:	4621      	mov	r1, r4
   16ebe:	f7ff fb69 	bl	16594 <bt_mesh_keys_resolve>
	if (err) {
   16ec2:	2800      	cmp	r0, #0
   16ec4:	d1d1      	bne.n	16e6a <bt_mesh_trans_send+0x16>
	tx->xmit = bt_mesh_net_transmit_get();
   16ec6:	f7fd fedb 	bl	14c80 <bt_mesh_net_transmit_get>
	tx->aid = aid;
   16eca:	7ae3      	ldrb	r3, [r4, #11]
   16ecc:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
   16ed0:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
   16ed2:	f362 0387 	bfi	r3, r2, #2, #6
   16ed6:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
   16ed8:	6863      	ldr	r3, [r4, #4]
   16eda:	f893 800a 	ldrb.w	r8, [r3, #10]
   16ede:	f1b8 0f00 	cmp.w	r8, #0
   16ee2:	d008      	beq.n	16ef6 <bt_mesh_trans_send+0xa2>
   16ee4:	4628      	mov	r0, r5
   16ee6:	f00e f848 	bl	24f7a <net_buf_simple_tailroom>
   16eea:	2807      	cmp	r0, #7
   16eec:	bf94      	ite	ls
   16eee:	f04f 0800 	movls.w	r8, #0
   16ef2:	f04f 0801 	movhi.w	r8, #1
   16ef6:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
   16ef8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   16efc:	f368 0341 	bfi	r3, r8, #1, #1
   16f00:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
   16f02:	2210      	movs	r2, #16
   16f04:	2100      	movs	r1, #0
   16f06:	a806      	add	r0, sp, #24
   16f08:	f00a fd81 	bl	21a0e <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   16f0c:	6863      	ldr	r3, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
   16f0e:	8922      	ldrh	r2, [r4, #8]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   16f10:	8859      	ldrh	r1, [r3, #2]
	struct bt_mesh_app_crypto_ctx crypto = {
   16f12:	f8ad 2016 	strh.w	r2, [sp, #22]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   16f16:	3103      	adds	r1, #3
   16f18:	b289      	uxth	r1, r1
		.seq_num = bt_mesh.seq,
   16f1a:	4a21      	ldr	r2, [pc, #132]	; (16fa0 <bt_mesh_trans_send+0x14c>)
	struct bt_mesh_app_crypto_ctx crypto = {
   16f1c:	889b      	ldrh	r3, [r3, #4]
   16f1e:	f8ad 3018 	strh.w	r3, [sp, #24]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   16f22:	2901      	cmp	r1, #1
	struct bt_mesh_app_crypto_ctx crypto = {
   16f24:	6853      	ldr	r3, [r2, #4]
   16f26:	9307      	str	r3, [sp, #28]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   16f28:	bf8c      	ite	hi
   16f2a:	2100      	movhi	r1, #0
   16f2c:	2101      	movls	r1, #1
   16f2e:	f88d 1014 	strb.w	r1, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
   16f32:	f88d 8015 	strb.w	r8, [sp, #21]
		.iv_index = BT_MESH_NET_IVI_TX,
   16f36:	6813      	ldr	r3, [r2, #0]
   16f38:	f3bf 8f5b 	dmb	ish
   16f3c:	6892      	ldr	r2, [r2, #8]
   16f3e:	f3bf 8f5b 	dmb	ish
   16f42:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16f46:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
   16f48:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
   16f4a:	6863      	ldr	r3, [r4, #4]
   16f4c:	889b      	ldrh	r3, [r3, #4]
   16f4e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
   16f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
   16f56:	bf38      	it	cc
   16f58:	2300      	movcc	r3, #0
	return bt_mesh_app_encrypt(key, &crypto, msg);
   16f5a:	462a      	mov	r2, r5
   16f5c:	a905      	add	r1, sp, #20
   16f5e:	4648      	mov	r0, r9
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
   16f60:	bf38      	it	cc
   16f62:	9309      	strcc	r3, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
   16f64:	f00b feb7 	bl	22cd6 <bt_mesh_app_encrypt>
	if (err) {
   16f68:	2800      	cmp	r0, #0
   16f6a:	f47f af7e 	bne.w	16e6a <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_rel) {
   16f6e:	6863      	ldr	r3, [r4, #4]
   16f70:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
   16f72:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
   16f74:	b153      	cbz	r3, 16f8c <bt_mesh_trans_send+0x138>
		err = send_seg(tx, msg, cb, cb_data, NULL);
   16f76:	463b      	mov	r3, r7
   16f78:	4632      	mov	r2, r6
   16f7a:	4629      	mov	r1, r5
   16f7c:	4620      	mov	r0, r4
   16f7e:	f7ff fe6f 	bl	16c60 <send_seg>
   16f82:	e772      	b.n	16e6a <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   16f84:	061b      	lsls	r3, r3, #24
   16f86:	f53f af6e 	bmi.w	16e66 <bt_mesh_trans_send+0x12>
   16f8a:	e783      	b.n	16e94 <bt_mesh_trans_send+0x40>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
   16f8c:	463b      	mov	r3, r7
   16f8e:	4632      	mov	r2, r6
   16f90:	4629      	mov	r1, r5
   16f92:	4620      	mov	r0, r4
   16f94:	f00b fc1c 	bl	227d0 <send_unseg>
   16f98:	e767      	b.n	16e6a <bt_mesh_trans_send+0x16>
		return -EMSGSIZE;
   16f9a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   16f9e:	e764      	b.n	16e6a <bt_mesh_trans_send+0x16>
   16fa0:	20001d40 	.word	0x20001d40

00016fa4 <trans_seg>:
}

static int trans_seg(struct net_buf_simple *buf, struct bt_mesh_net_rx *net_rx,
		     enum bt_mesh_friend_pdu_type *pdu_type, uint64_t *seq_auth,
		     uint8_t *seg_count)
{
   16fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fa8:	b0cb      	sub	sp, #300	; 0x12c
   16faa:	461e      	mov	r6, r3
	struct bt_mesh_rpl *rpl = NULL;
   16fac:	2300      	movs	r3, #0
   16fae:	9306      	str	r3, [sp, #24]
	uint32_t auth_seqnum;
	uint8_t seg_n;
	uint8_t seg_o;
	int err;

	if (buf->len < 5) {
   16fb0:	8883      	ldrh	r3, [r0, #4]
	uint8_t *hdr = buf->data;
   16fb2:	f8d0 8000 	ldr.w	r8, [r0]
	if (buf->len < 5) {
   16fb6:	2b04      	cmp	r3, #4
{
   16fb8:	4607      	mov	r7, r0
   16fba:	460c      	mov	r4, r1
   16fbc:	4693      	mov	fp, r2
	if (buf->len < 5) {
   16fbe:	d805      	bhi.n	16fcc <trans_seg+0x28>
		BT_ERR("Too short segmented message (len %u)", buf->len);
		return -EINVAL;
   16fc0:	f06f 0a15 	mvn.w	sl, #21
	}

	seg_rx_reset(rx, false);

	return err;
}
   16fc4:	4650      	mov	r0, sl
   16fc6:	b04b      	add	sp, #300	; 0x12c
   16fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
   16fcc:	a906      	add	r1, sp, #24
   16fce:	4620      	mov	r0, r4
   16fd0:	f001 fe50 	bl	18c74 <bt_mesh_rpl_check>
   16fd4:	2800      	cmp	r0, #0
   16fd6:	d1f3      	bne.n	16fc0 <trans_seg+0x1c>
	net_buf_simple_pull(buf, 1);
   16fd8:	2101      	movs	r1, #1
   16fda:	4638      	mov	r0, r7
   16fdc:	f00d ff88 	bl	24ef0 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
   16fe0:	4638      	mov	r0, r7
   16fe2:	f00d ffa5 	bl	24f30 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   16fe6:	f3c0 028c 	ubfx	r2, r0, #2, #13
	seg_o = (seq_zero & 0x03) << 3;
   16fea:	00c5      	lsls	r5, r0, #3
	seg_n = net_buf_simple_pull_u8(buf);
   16fec:	4638      	mov	r0, r7
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   16fee:	9204      	str	r2, [sp, #16]
	seg_n = net_buf_simple_pull_u8(buf);
   16ff0:	f00d ff8e 	bl	24f10 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
   16ff4:	f005 0518 	and.w	r5, r5, #24
	seg_o |= seg_n >> 5;
   16ff8:	ea45 1550 	orr.w	r5, r5, r0, lsr #5
   16ffc:	b2ed      	uxtb	r5, r5
	seg_n &= 0x1f;
   16ffe:	f000 0a1f 	and.w	sl, r0, #31
	if (seg_o > seg_n) {
   17002:	4555      	cmp	r5, sl
	seg_n = net_buf_simple_pull_u8(buf);
   17004:	4681      	mov	r9, r0
	if (seg_o > seg_n) {
   17006:	d8db      	bhi.n	16fc0 <trans_seg+0x1c>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   17008:	7d20      	ldrb	r0, [r4, #20]
   1700a:	6923      	ldr	r3, [r4, #16]
   1700c:	9a04      	ldr	r2, [sp, #16]
   1700e:	f000 0101 	and.w	r1, r0, #1
   17012:	48b9      	ldr	r0, [pc, #740]	; (172f8 <trans_seg+0x354>)
   17014:	1a9a      	subs	r2, r3, r2
   17016:	6800      	ldr	r0, [r0, #0]
   17018:	f3c2 020c 	ubfx	r2, r2, #0, #13
   1701c:	1a40      	subs	r0, r0, r1
   1701e:	1a9b      	subs	r3, r3, r2
   17020:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   17024:	0a01      	lsrs	r1, r0, #8
   17026:	e9c6 3100 	strd	r3, r1, [r6]
	auth_seqnum = *seq_auth & BIT_MASK(24);
   1702a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1702e:	9304      	str	r3, [sp, #16]
	*seg_count = seg_n + 1;
   17030:	f10a 0301 	add.w	r3, sl, #1
   17034:	9305      	str	r3, [sp, #20]
   17036:	9b54      	ldr	r3, [sp, #336]	; 0x150
		if (rx->src != net_rx->ctx.addr ||
   17038:	48b0      	ldr	r0, [pc, #704]	; (172fc <trans_seg+0x358>)
	*seg_count = seg_n + 1;
   1703a:	f10a 0201 	add.w	r2, sl, #1
   1703e:	701a      	strb	r2, [r3, #0]
		if (rx->src != net_rx->ctx.addr ||
   17040:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   17044:	68a3      	ldr	r3, [r4, #8]
   17046:	429a      	cmp	r2, r3
   17048:	d110      	bne.n	1706c <trans_seg+0xc8>
		if (rx->seq_auth >= *seq_auth) {
   1704a:	e9d0 1322 	ldrd	r1, r3, [r0, #136]	; 0x88
   1704e:	e9d6 c200 	ldrd	ip, r2, [r6]
   17052:	4561      	cmp	r1, ip
   17054:	eb73 0e02 	sbcs.w	lr, r3, r2
   17058:	f080 8158 	bcs.w	1730c <trans_seg+0x368>
		if (rx->in_use) {
   1705c:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
   17060:	065b      	lsls	r3, r3, #25
   17062:	d503      	bpl.n	1706c <trans_seg+0xc8>
			seg_rx_reset(rx, true);
   17064:	2101      	movs	r1, #1
   17066:	f7ff fba5 	bl	167b4 <seg_rx_reset>
	if (rx) {
   1706a:	48a4      	ldr	r0, [pc, #656]	; (172fc <trans_seg+0x358>)
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
   1706c:	9a06      	ldr	r2, [sp, #24]
   1706e:	b18a      	cbz	r2, 17094 <trans_seg+0xf0>
   17070:	8813      	ldrh	r3, [r2, #0]
   17072:	f3c3 030e 	ubfx	r3, r3, #0, #15
   17076:	b16b      	cbz	r3, 17094 <trans_seg+0xf0>
   17078:	6853      	ldr	r3, [r2, #4]
   1707a:	9904      	ldr	r1, [sp, #16]
   1707c:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
   17080:	d808      	bhi.n	17094 <trans_seg+0xf0>
   17082:	f992 3001 	ldrsb.w	r3, [r2, #1]
   17086:	2b00      	cmp	r3, #0
   17088:	f280 8177 	bge.w	1737a <trans_seg+0x3d6>
	    (!rpl->old_iv || net_rx->old_iv)) {
   1708c:	7d23      	ldrb	r3, [r4, #20]
   1708e:	07da      	lsls	r2, r3, #31
   17090:	f100 8173 	bmi.w	1737a <trans_seg+0x3d6>
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
   17094:	4b9a      	ldr	r3, [pc, #616]	; (17300 <trans_seg+0x35c>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
   17096:	689a      	ldr	r2, [r3, #8]
   17098:	699b      	ldr	r3, [r3, #24]
   1709a:	429a      	cmp	r2, r3
   1709c:	d106      	bne.n	170ac <trans_seg+0x108>
		return -ENOMEM;
   1709e:	f06f 0a0b 	mvn.w	sl, #11
   170a2:	e78f      	b.n	16fc4 <trans_seg+0x20>
				bt_mesh_rpl_update(rpl, net_rx);
   170a4:	4621      	mov	r1, r4
   170a6:	f00d fc32 	bl	2490e <bt_mesh_rpl_update>
   170aa:	e166      	b.n	1737a <trans_seg+0x3d6>
		if (rx->in_use) {
   170ac:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
   170b0:	f011 0c40 	ands.w	ip, r1, #64	; 0x40
   170b4:	d1f3      	bne.n	1709e <trans_seg+0xfa>
		rx->sub = net_rx->sub;
   170b6:	6823      	ldr	r3, [r4, #0]
   170b8:	6003      	str	r3, [r0, #0]
		rx->ctl = net_rx->ctl;
   170ba:	7d23      	ldrb	r3, [r4, #20]
   170bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   170c0:	015b      	lsls	r3, r3, #5
   170c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   170c6:	f021 0160 	bic.w	r1, r1, #96	; 0x60
   170ca:	430b      	orrs	r3, r1
   170cc:	f880 3097 	strb.w	r3, [r0, #151]	; 0x97
		rx->seq_auth = *seq_auth;
   170d0:	e9d6 2300 	ldrd	r2, r3, [r6]
   170d4:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
		rx->seg_n = seg_n;
   170d8:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
   170dc:	f369 0304 	bfi	r3, r9, #0, #5
   170e0:	f880 3097 	strb.w	r3, [r0, #151]	; 0x97
		rx->hdr = *hdr;
   170e4:	f898 3000 	ldrb.w	r3, [r8]
   170e8:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
		rx->ttl = net_rx->ctx.send_ttl;
   170ec:	7be3      	ldrb	r3, [r4, #15]
   170ee:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
		rx->src = net_rx->ctx.addr;
   170f2:	8923      	ldrh	r3, [r4, #8]
   170f4:	f8a0 3090 	strh.w	r3, [r0, #144]	; 0x90
		rx->dst = net_rx->ctx.recv_dst;
   170f8:	8963      	ldrh	r3, [r4, #10]
   170fa:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
	rx->obo = net_rx->friend_match;
   170fe:	7d23      	ldrb	r3, [r4, #20]
   17100:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
		rx->block = 0U;
   17104:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
	rx->obo = net_rx->friend_match;
   17108:	09db      	lsrs	r3, r3, #7
   1710a:	f363 12c7 	bfi	r2, r3, #7, #1
   1710e:	f880 2097 	strb.w	r2, [r0, #151]	; 0x97
	if (BIT(seg_o) & rx->block) {
   17112:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 172fc <trans_seg+0x358>
   17116:	f8d9 309c 	ldr.w	r3, [r9, #156]	; 0x9c
   1711a:	40eb      	lsrs	r3, r5
   1711c:	f013 0201 	ands.w	r2, r3, #1
   17120:	f040 812b 	bne.w	1737a <trans_seg+0x3d6>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   17124:	f899 1097 	ldrb.w	r1, [r9, #151]	; 0x97
   17128:	88b8      	ldrh	r0, [r7, #4]
   1712a:	f3c1 1340 	ubfx	r3, r1, #5, #1
		return BT_MESH_APP_SEG_SDU_MAX;
   1712e:	2b00      	cmp	r3, #0
   17130:	bf14      	ite	ne
   17132:	2308      	movne	r3, #8
   17134:	230c      	moveq	r3, #12
	if (seg_o == seg_n) {
   17136:	4555      	cmp	r5, sl
   17138:	d16b      	bne.n	17212 <trans_seg+0x26e>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   1713a:	fb03 0305 	mla	r3, r3, r5, r0
   1713e:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   17140:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   17144:	f8a9 3094 	strh.w	r3, [r9, #148]	; 0x94
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   17148:	d852      	bhi.n	171f0 <trans_seg+0x24c>
	return z_impl_k_uptime_ticks();
   1714a:	f00e fe97 	bl	25e7c <z_impl_k_uptime_ticks>
   1714e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17152:	fba0 0302 	umull	r0, r3, r0, r2
   17156:	fb02 3301 	mla	r3, r2, r1, r3
   1715a:	0bc0      	lsrs	r0, r0, #15
   1715c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
   17160:	f8c9 00a0 	str.w	r0, [r9, #160]	; 0xa0
		int32_t timeout = ack_timeout(rx);
   17164:	f899 0098 	ldrb.w	r0, [r9, #152]	; 0x98
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   17168:	28ff      	cmp	r0, #255	; 0xff
   1716a:	d101      	bne.n	17170 <trans_seg+0x1cc>
		ttl = bt_mesh_default_ttl_get();
   1716c:	f7fd fd6c 	bl	14c48 <bt_mesh_default_ttl_get>
	to = CONFIG_BT_MESH_SEG_ACK_BASE_TIMEOUT +
   17170:	2396      	movs	r3, #150	; 0x96
   17172:	f04f 0c32 	mov.w	ip, #50	; 0x32
   17176:	fb1c 3c00 	smlabb	ip, ip, r0, r3
	return MAX(to, 400);
   1717a:	f5bc 7fc8 	cmp.w	ip, #400	; 0x190
   1717e:	bfb8      	it	lt
   17180:	f44f 7cc8 	movlt.w	ip, #400	; 0x190
   17184:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   17188:	f240 30e7 	movw	r0, #999	; 0x3e7
   1718c:	2100      	movs	r1, #0
   1718e:	fbcc 010e 	smlal	r0, r1, ip, lr
   17192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17196:	2300      	movs	r3, #0
   17198:	f7e8 ffb2 	bl	100 <__aeabi_uldivmod>
   1719c:	4602      	mov	r2, r0
   1719e:	460b      	mov	r3, r1
		k_work_schedule(&rx->ack, K_MSEC(timeout));
   171a0:	4858      	ldr	r0, [pc, #352]	; (17304 <trans_seg+0x360>)
   171a2:	f007 fd09 	bl	1ebb8 <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
   171a6:	1c69      	adds	r1, r5, #1
   171a8:	b2c9      	uxtb	r1, r1
   171aa:	4855      	ldr	r0, [pc, #340]	; (17300 <trans_seg+0x35c>)
   171ac:	2200      	movs	r2, #0
   171ae:	2300      	movs	r3, #0
   171b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
   171b4:	f007 f956 	bl	1e464 <k_mem_slab_alloc>
	if (err) {
   171b8:	4682      	mov	sl, r0
   171ba:	2800      	cmp	r0, #0
   171bc:	f040 8099 	bne.w	172f2 <trans_seg+0x34e>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
   171c0:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   171c4:	88ba      	ldrh	r2, [r7, #4]
   171c6:	6858      	ldr	r0, [r3, #4]
   171c8:	6839      	ldr	r1, [r7, #0]
   171ca:	f00a fc15 	bl	219f8 <memcpy>
	rx->block |= BIT(seg_o);
   171ce:	f8d9 309c 	ldr.w	r3, [r9, #156]	; 0x9c
   171d2:	2201      	movs	r2, #1
   171d4:	fa02 f505 	lsl.w	r5, r2, r5
   171d8:	431d      	orrs	r5, r3
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   171da:	9b05      	ldr	r3, [sp, #20]
	rx->block |= BIT(seg_o);
   171dc:	f8c9 509c 	str.w	r5, [r9, #156]	; 0x9c
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   171e0:	fa02 f303 	lsl.w	r3, r2, r3
   171e4:	3b01      	subs	r3, #1
   171e6:	429d      	cmp	r5, r3
   171e8:	d016      	beq.n	17218 <trans_seg+0x274>
		*pdu_type = BT_MESH_FRIEND_PDU_PARTIAL;
   171ea:	f88b 2000 	strb.w	r2, [fp]
		return 0;
   171ee:	e6e9      	b.n	16fc4 <trans_seg+0x20>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   171f0:	09c9      	lsrs	r1, r1, #7
   171f2:	e9cd 2101 	strd	r2, r1, [sp, #4]
   171f6:	7be3      	ldrb	r3, [r4, #15]
   171f8:	8922      	ldrh	r2, [r4, #8]
   171fa:	8961      	ldrh	r1, [r4, #10]
   171fc:	6820      	ldr	r0, [r4, #0]
   171fe:	9600      	str	r6, [sp, #0]
   17200:	f00b fb77 	bl	228f2 <send_ack.isra.0>
			seg_rx_reset(rx, true);
   17204:	2101      	movs	r1, #1
   17206:	4648      	mov	r0, r9
   17208:	f7ff fad4 	bl	167b4 <seg_rx_reset>
			return -EMSGSIZE;
   1720c:	f06f 0a79 	mvn.w	sl, #121	; 0x79
   17210:	e6d8      	b.n	16fc4 <trans_seg+0x20>
		if (buf->len != seg_len(rx->ctl)) {
   17212:	4283      	cmp	r3, r0
   17214:	d099      	beq.n	1714a <trans_seg+0x1a6>
   17216:	e6d3      	b.n	16fc0 <trans_seg+0x1c>
	if (rpl) {
   17218:	9806      	ldr	r0, [sp, #24]
   1721a:	b168      	cbz	r0, 17238 <trans_seg+0x294>
		bt_mesh_rpl_update(rpl, net_rx);
   1721c:	4621      	mov	r1, r4
   1721e:	f00d fb76 	bl	2490e <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
   17222:	9906      	ldr	r1, [sp, #24]
   17224:	9804      	ldr	r0, [sp, #16]
   17226:	684b      	ldr	r3, [r1, #4]
   17228:	f3c3 2217 	ubfx	r2, r3, #8, #24
   1722c:	4282      	cmp	r2, r0
   1722e:	bf38      	it	cc
   17230:	4602      	movcc	r2, r0
   17232:	f362 231f 	bfi	r3, r2, #8, #24
   17236:	604b      	str	r3, [r1, #4]
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
   17238:	2302      	movs	r3, #2
   1723a:	f88b 3000 	strb.w	r3, [fp]
	(void)k_work_cancel_delayable(&rx->ack);
   1723e:	4831      	ldr	r0, [pc, #196]	; (17304 <trans_seg+0x360>)
   17240:	f00e fcc8 	bl	25bd4 <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
   17244:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   17248:	8922      	ldrh	r2, [r4, #8]
   1724a:	8961      	ldrh	r1, [r4, #10]
   1724c:	6820      	ldr	r0, [r4, #0]
   1724e:	09db      	lsrs	r3, r3, #7
   17250:	9302      	str	r3, [sp, #8]
   17252:	f8d9 309c 	ldr.w	r3, [r9, #156]	; 0x9c
   17256:	e9cd 6300 	strd	r6, r3, [sp]
   1725a:	7be3      	ldrb	r3, [r4, #15]
   1725c:	f00b fb49 	bl	228f2 <send_ack.isra.0>
	if (net_rx->ctl) {
   17260:	7d23      	ldrb	r3, [r4, #20]
   17262:	071b      	lsls	r3, r3, #28
   17264:	d517      	bpl.n	17296 <trans_seg+0x2f2>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   17266:	ab0a      	add	r3, sp, #40	; 0x28
   17268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1726c:	e9cd 2308 	strd	r2, r3, [sp, #32]
		seg_rx_assemble(rx, &sdu, 0U);
   17270:	4822      	ldr	r0, [pc, #136]	; (172fc <trans_seg+0x358>)
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   17272:	9307      	str	r3, [sp, #28]
		seg_rx_assemble(rx, &sdu, 0U);
   17274:	2200      	movs	r2, #0
   17276:	a907      	add	r1, sp, #28
   17278:	f00b fa3b 	bl	226f2 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
   1727c:	f898 1000 	ldrb.w	r1, [r8]
   17280:	4633      	mov	r3, r6
   17282:	aa07      	add	r2, sp, #28
   17284:	4620      	mov	r0, r4
   17286:	f7ff fc2f 	bl	16ae8 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   1728a:	4682      	mov	sl, r0
	seg_rx_reset(rx, false);
   1728c:	481b      	ldr	r0, [pc, #108]	; (172fc <trans_seg+0x358>)
   1728e:	2100      	movs	r1, #0
   17290:	f7ff fa90 	bl	167b4 <seg_rx_reset>
	return err;
   17294:	e696      	b.n	16fc4 <trans_seg+0x20>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
   17296:	f898 3001 	ldrb.w	r3, [r8, #1]
   1729a:	f8b9 2094 	ldrh.w	r2, [r9, #148]	; 0x94
   1729e:	09db      	lsrs	r3, r3, #7
   172a0:	bf14      	ite	ne
   172a2:	2309      	movne	r3, #9
   172a4:	2305      	moveq	r3, #5
   172a6:	429a      	cmp	r2, r3
   172a8:	db20      	blt.n	172ec <trans_seg+0x348>
	if (!buf->__buf) {
   172aa:	4b17      	ldr	r3, [pc, #92]	; (17308 <trans_seg+0x364>)
   172ac:	6899      	ldr	r1, [r3, #8]
   172ae:	b911      	cbnz	r1, 172b6 <trans_seg+0x312>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   172b0:	f103 010c 	add.w	r1, r3, #12
   172b4:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
   172b6:	6899      	ldr	r1, [r3, #8]
   172b8:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
   172ba:	2000      	movs	r0, #0
   172bc:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
   172be:	f898 3001 	ldrb.w	r3, [r8, #1]
   172c2:	09db      	lsrs	r3, r3, #7
   172c4:	bf14      	ite	ne
   172c6:	2308      	movne	r3, #8
   172c8:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
   172ca:	ad0a      	add	r5, sp, #40	; 0x28
   172cc:	1ad2      	subs	r2, r2, r3
   172ce:	4628      	mov	r0, r5
   172d0:	f00d fd42 	bl	24d58 <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   172d4:	f898 2001 	ldrb.w	r2, [r8, #1]
   172d8:	f898 1000 	ldrb.w	r1, [r8]
   172dc:	4b0a      	ldr	r3, [pc, #40]	; (17308 <trans_seg+0x364>)
   172de:	e9cd 5900 	strd	r5, r9, [sp]
   172e2:	09d2      	lsrs	r2, r2, #7
   172e4:	4620      	mov	r0, r4
   172e6:	f7ff fa1d 	bl	16724 <sdu_recv>
   172ea:	e7ce      	b.n	1728a <trans_seg+0x2e6>
		err = -EINVAL;
   172ec:	f06f 0a15 	mvn.w	sl, #21
   172f0:	e7cc      	b.n	1728c <trans_seg+0x2e8>
		return -ENOBUFS;
   172f2:	f06f 0a68 	mvn.w	sl, #104	; 0x68
   172f6:	e665      	b.n	16fc4 <trans_seg+0x20>
   172f8:	20001d40 	.word	0x20001d40
   172fc:	20001da8 	.word	0x20001da8
   17300:	20000b30 	.word	0x20000b30
   17304:	20001e50 	.word	0x20001e50
   17308:	2000063c 	.word	0x2000063c
		if (rx->seq_auth > *seq_auth) {
   1730c:	458c      	cmp	ip, r1
   1730e:	eb72 0303 	sbcs.w	r3, r2, r3
   17312:	f4ff ae55 	bcc.w	16fc0 <trans_seg+0x1c>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
   17316:	f898 2000 	ldrb.w	r2, [r8]
   1731a:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
   1731e:	429a      	cmp	r2, r3
   17320:	f47f ae4e 	bne.w	16fc0 <trans_seg+0x1c>
   17324:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
   17328:	f002 031f 	and.w	r3, r2, #31
   1732c:	4553      	cmp	r3, sl
   1732e:	f47f ae47 	bne.w	16fc0 <trans_seg+0x1c>
	if (rx->ctl != net_rx->ctl) {
   17332:	7d21      	ldrb	r1, [r4, #20]
   17334:	f3c2 1c40 	ubfx	ip, r2, #5, #1
   17338:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1733c:	458c      	cmp	ip, r1
   1733e:	f47f ae3f 	bne.w	16fc0 <trans_seg+0x1c>
		if (rx->in_use) {
   17342:	0651      	lsls	r1, r2, #25
   17344:	f53f aee5 	bmi.w	17112 <trans_seg+0x16e>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   17348:	1c5a      	adds	r2, r3, #1
   1734a:	2301      	movs	r3, #1
   1734c:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   17350:	4093      	lsls	r3, r2
   17352:	3b01      	subs	r3, #1
   17354:	428b      	cmp	r3, r1
   17356:	f47f ae33 	bne.w	16fc0 <trans_seg+0x1c>
				 seq_auth, rx->block, rx->obo);
   1735a:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   1735e:	8961      	ldrh	r1, [r4, #10]
   17360:	6820      	ldr	r0, [r4, #0]
   17362:	9600      	str	r6, [sp, #0]
   17364:	09d2      	lsrs	r2, r2, #7
   17366:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1736a:	7be3      	ldrb	r3, [r4, #15]
   1736c:	8922      	ldrh	r2, [r4, #8]
   1736e:	f00b fac0 	bl	228f2 <send_ack.isra.0>
			if (rpl) {
   17372:	9806      	ldr	r0, [sp, #24]
   17374:	2800      	cmp	r0, #0
   17376:	f47f ae95 	bne.w	170a4 <trans_seg+0x100>
			return -EALREADY;
   1737a:	f06f 0a77 	mvn.w	sl, #119	; 0x77
   1737e:	e621      	b.n	16fc4 <trans_seg+0x20>

00017380 <bt_mesh_trans_recv>:

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
   17380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   17384:	f04f 32ff 	mov.w	r2, #4294967295
{
   17388:	b086      	sub	sp, #24
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   1738a:	f04f 33ff 	mov.w	r3, #4294967295
   1738e:	e9cd 2304 	strd	r2, r3, [sp, #16]

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
   17392:	7d0b      	ldrb	r3, [r1, #20]
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   17394:	2400      	movs	r4, #0
		rx->friend_match = false;
   17396:	f364 13c7 	bfi	r3, r4, #7, #1
{
   1739a:	4605      	mov	r5, r0
		rx->friend_match = false;
   1739c:	750b      	strb	r3, [r1, #20]
{
   1739e:	4688      	mov	r8, r1

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
   173a0:	2109      	movs	r1, #9
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   173a2:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t seg_count = 0;
   173a6:	f88d 400f 	strb.w	r4, [sp, #15]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
   173aa:	f00d fda1 	bl	24ef0 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
   173ae:	4628      	mov	r0, r5
   173b0:	f00d fddf 	bl	24f72 <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
   173b4:	682b      	ldr	r3, [r5, #0]
	state->len = buf->len;
   173b6:	88af      	ldrh	r7, [r5, #4]
   173b8:	f993 3000 	ldrsb.w	r3, [r3]
   173bc:	42a3      	cmp	r3, r4
	state->offset = net_buf_simple_headroom(buf);
   173be:	4606      	mov	r6, r0
   173c0:	da16      	bge.n	173f0 <bt_mesh_trans_recv+0x70>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
   173c2:	f898 4014 	ldrb.w	r4, [r8, #20]
   173c6:	f014 00c0 	ands.w	r0, r4, #192	; 0xc0
   173ca:	d00e      	beq.n	173ea <bt_mesh_trans_recv+0x6a>
			return 0;
		}

		err = trans_seg(buf, rx, &pdu_type, &seq_auth, &seg_count);
   173cc:	f10d 030f 	add.w	r3, sp, #15
   173d0:	9300      	str	r3, [sp, #0]
   173d2:	f10d 020e 	add.w	r2, sp, #14
   173d6:	ab04      	add	r3, sp, #16
   173d8:	4641      	mov	r1, r8
   173da:	4628      	mov	r0, r5
   173dc:	f7ff fde2 	bl	16fa4 <trans_seg>
	buf->data = buf->__buf + state->offset;
   173e0:	68ab      	ldr	r3, [r5, #8]
	buf->len = state->len;
   173e2:	80af      	strh	r7, [r5, #4]
	buf->data = buf->__buf + state->offset;
   173e4:	fa13 f686 	uxtah	r6, r3, r6
   173e8:	602e      	str	r6, [r5, #0]
						  seg_count, buf);
		}
	}

	return err;
}
   173ea:	b006      	add	sp, #24
   173ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		seg_count = 1;
   173f0:	2301      	movs	r3, #1
   173f2:	f88d 300f 	strb.w	r3, [sp, #15]
	if (buf->len < 1) {
   173f6:	b917      	cbnz	r7, 173fe <bt_mesh_trans_recv+0x7e>
		return -EINVAL;
   173f8:	f06f 0015 	mvn.w	r0, #21
   173fc:	e7f0      	b.n	173e0 <bt_mesh_trans_recv+0x60>
	if (bt_mesh_rpl_check(rx, NULL)) {
   173fe:	4621      	mov	r1, r4
   17400:	4640      	mov	r0, r8
   17402:	f001 fc37 	bl	18c74 <bt_mesh_rpl_check>
   17406:	2800      	cmp	r0, #0
   17408:	d1f6      	bne.n	173f8 <bt_mesh_trans_recv+0x78>
	hdr = net_buf_simple_pull_u8(buf);
   1740a:	4628      	mov	r0, r5
   1740c:	f00d fd80 	bl	24f10 <net_buf_simple_pull_u8>
	if (rx->ctl) {
   17410:	f898 2014 	ldrb.w	r2, [r8, #20]
   17414:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
   17418:	4601      	mov	r1, r0
	if (rx->ctl) {
   1741a:	d005      	beq.n	17428 <bt_mesh_trans_recv+0xa8>
		return ctl_recv(rx, hdr, buf, seq_auth);
   1741c:	ab04      	add	r3, sp, #16
   1741e:	462a      	mov	r2, r5
   17420:	4640      	mov	r0, r8
   17422:	f7ff fb61 	bl	16ae8 <ctl_recv>
   17426:	e7db      	b.n	173e0 <bt_mesh_trans_recv+0x60>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
   17428:	88ab      	ldrh	r3, [r5, #4]
   1742a:	2b04      	cmp	r3, #4
   1742c:	d9e4      	bls.n	173f8 <bt_mesh_trans_recv+0x78>
	buf->len -= APP_MIC_LEN(0);
   1742e:	3b04      	subs	r3, #4
   17430:	80ab      	strh	r3, [r5, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   17432:	4b04      	ldr	r3, [pc, #16]	; (17444 <bt_mesh_trans_recv+0xc4>)
   17434:	9300      	str	r3, [sp, #0]
   17436:	9201      	str	r2, [sp, #4]
   17438:	462b      	mov	r3, r5
   1743a:	4640      	mov	r0, r8
   1743c:	f7ff f972 	bl	16724 <sdu_recv>
   17440:	e7ce      	b.n	173e0 <bt_mesh_trans_recv+0x60>
   17442:	bf00      	nop
   17444:	20000630 	.word	0x20000630

00017448 <bt_mesh_rx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i], true);
   17448:	4801      	ldr	r0, [pc, #4]	; (17450 <bt_mesh_rx_reset+0x8>)
   1744a:	2101      	movs	r1, #1
   1744c:	f7ff b9b2 	b.w	167b4 <seg_rx_reset>
   17450:	20001da8 	.word	0x20001da8

00017454 <bt_mesh_trans_reset>:
{
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
}

void bt_mesh_trans_reset(void)
{
   17454:	b510      	push	{r4, lr}
	bt_mesh_rx_reset();

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
   17456:	4c0a      	ldr	r4, [pc, #40]	; (17480 <bt_mesh_trans_reset+0x2c>)
	bt_mesh_rx_reset();
   17458:	f7ff fff6 	bl	17448 <bt_mesh_rx_reset>
		seg_tx_reset(&seg_tx[i]);
   1745c:	4620      	mov	r0, r4
   1745e:	f7ff f9d7 	bl	16810 <seg_tx_reset>
   17462:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17466:	f7ff f9d3 	bl	16810 <seg_tx_reset>
   1746a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1746e:	f7ff f9cf 	bl	16810 <seg_tx_reset>
			virtual_addrs[i].ref = 0U;
			virtual_addrs[i].changed = 1U;
		}
	}

	bt_mesh_rpl_clear();
   17472:	f001 fc3d 	bl	18cf0 <bt_mesh_rpl_clear>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		store_va_label();
	}
}
   17476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   1747a:	2009      	movs	r0, #9
   1747c:	f001 bac8 	b.w	18a10 <bt_mesh_settings_store_schedule>
   17480:	20001e80 	.word	0x20001e80

00017484 <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
   17484:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_work_init_delayable(&seg_tx[i].retransmit, seg_retransmit);
   17486:	4d0b      	ldr	r5, [pc, #44]	; (174b4 <bt_mesh_trans_init+0x30>)
   17488:	4c0b      	ldr	r4, [pc, #44]	; (174b8 <bt_mesh_trans_init+0x34>)
   1748a:	4629      	mov	r1, r5
   1748c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17490:	f00e fb92 	bl	25bb8 <k_work_init_delayable>
   17494:	4629      	mov	r1, r5
   17496:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1749a:	f00e fb8d 	bl	25bb8 <k_work_init_delayable>
   1749e:	4629      	mov	r1, r5
   174a0:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   174a4:	f00e fb88 	bl	25bb8 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
	}
}
   174a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
   174ac:	4903      	ldr	r1, [pc, #12]	; (174bc <bt_mesh_trans_init+0x38>)
   174ae:	4804      	ldr	r0, [pc, #16]	; (174c0 <bt_mesh_trans_init+0x3c>)
   174b0:	f00e bb82 	b.w	25bb8 <k_work_init_delayable>
   174b4:	000227cb 	.word	0x000227cb
   174b8:	20001e80 	.word	0x20001e80
   174bc:	00022989 	.word	0x00022989
   174c0:	20001e50 	.word	0x20001e50

000174c4 <notify_pub_sent>:
static struct bt_mesh_hb_sub sub;
static struct k_work_delayable sub_timer;
static struct k_work_delayable pub_timer;

static void notify_pub_sent(void)
{
   174c4:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   174c6:	4c06      	ldr	r4, [pc, #24]	; (174e0 <notify_pub_sent+0x1c>)
   174c8:	4d06      	ldr	r5, [pc, #24]	; (174e4 <notify_pub_sent+0x20>)
		if (cb->pub_sent) {
			cb->pub_sent(&pub);
   174ca:	4e07      	ldr	r6, [pc, #28]	; (174e8 <notify_pub_sent+0x24>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   174cc:	42ac      	cmp	r4, r5
   174ce:	d300      	bcc.n	174d2 <notify_pub_sent+0xe>
		}
	}
}
   174d0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pub_sent) {
   174d2:	68a3      	ldr	r3, [r4, #8]
   174d4:	b10b      	cbz	r3, 174da <notify_pub_sent+0x16>
			cb->pub_sent(&pub);
   174d6:	4630      	mov	r0, r6
   174d8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   174da:	340c      	adds	r4, #12
   174dc:	e7f6      	b.n	174cc <notify_pub_sent+0x8>
   174de:	bf00      	nop
   174e0:	0002648c 	.word	0x0002648c
   174e4:	0002648c 	.word	0x0002648c
   174e8:	2000274c 	.word	0x2000274c

000174ec <sub_end>:
		}
	}
}

static void sub_end(struct k_work *work)
{
   174ec:	b570      	push	{r4, r5, r6, lr}
	sub.remaining = 0;
   174ee:	4d07      	ldr	r5, [pc, #28]	; (1750c <sub_end+0x20>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   174f0:	4c07      	ldr	r4, [pc, #28]	; (17510 <sub_end+0x24>)
   174f2:	4e08      	ldr	r6, [pc, #32]	; (17514 <sub_end+0x28>)
	sub.remaining = 0;
   174f4:	2300      	movs	r3, #0
   174f6:	606b      	str	r3, [r5, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   174f8:	42b4      	cmp	r4, r6
   174fa:	d300      	bcc.n	174fe <sub_end+0x12>
	notify_sub_end();
}
   174fc:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->sub_end) {
   174fe:	6863      	ldr	r3, [r4, #4]
   17500:	b10b      	cbz	r3, 17506 <sub_end+0x1a>
			cb->sub_end(&sub);
   17502:	4628      	mov	r0, r5
   17504:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   17506:	340c      	adds	r4, #12
   17508:	e7f6      	b.n	174f8 <sub_end+0xc>
   1750a:	bf00      	nop
   1750c:	2000275c 	.word	0x2000275c
   17510:	0002648c 	.word	0x0002648c
   17514:	0002648c 	.word	0x0002648c

00017518 <hb_publish_end_cb>:
{
   17518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pub.period && pub.count > 1) {
   1751a:	4d14      	ldr	r5, [pc, #80]	; (1756c <hb_publish_end_cb+0x54>)
   1751c:	68ec      	ldr	r4, [r5, #12]
{
   1751e:	4606      	mov	r6, r0
	if (pub.period && pub.count > 1) {
   17520:	b1b4      	cbz	r4, 17550 <hb_publish_end_cb+0x38>
   17522:	886b      	ldrh	r3, [r5, #2]
   17524:	2b01      	cmp	r3, #1
   17526:	d913      	bls.n	17550 <hb_publish_end_cb+0x38>
		k_work_reschedule(&pub_timer, K_SECONDS(pub.period));
   17528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1752c:	435c      	muls	r4, r3
   1752e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   17532:	f240 30e7 	movw	r0, #999	; 0x3e7
   17536:	2100      	movs	r1, #0
   17538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1753c:	2300      	movs	r3, #0
   1753e:	fbe4 0107 	umlal	r0, r1, r4, r7
   17542:	f7e8 fddd 	bl	100 <__aeabi_uldivmod>
   17546:	4602      	mov	r2, r0
   17548:	460b      	mov	r3, r1
   1754a:	4809      	ldr	r0, [pc, #36]	; (17570 <hb_publish_end_cb+0x58>)
   1754c:	f007 fb68 	bl	1ec20 <k_work_reschedule>
	if (pub.count != 0xffff) {
   17550:	886b      	ldrh	r3, [r5, #2]
   17552:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17556:	4293      	cmp	r3, r2
		pub.count--;
   17558:	bf1c      	itt	ne
   1755a:	f103 33ff 	addne.w	r3, r3, #4294967295
   1755e:	806b      	strhne	r3, [r5, #2]
	if (!err) {
   17560:	b91e      	cbnz	r6, 1756a <hb_publish_end_cb+0x52>
}
   17562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_pub_sent();
   17566:	f7ff bfad 	b.w	174c4 <notify_pub_sent>
}
   1756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1756c:	2000274c 	.word	0x2000274c
   17570:	20001fa0 	.word	0x20001fa0

00017574 <heartbeat_send.constprop.0>:

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   17574:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
   17576:	4c26      	ldr	r4, [pc, #152]	; (17610 <heartbeat_send.constprop.0+0x9c>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   17578:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   1757a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1757e:	f8ad 2012 	strh.w	r2, [sp, #18]
   17582:	8822      	ldrh	r2, [r4, #0]
   17584:	f8ad 2014 	strh.w	r2, [sp, #20]
   17588:	2300      	movs	r3, #0
   1758a:	7922      	ldrb	r2, [r4, #4]
   1758c:	f88d 201b 	strb.w	r2, [sp, #27]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   17590:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
   17592:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
   17594:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
   17598:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
   1759c:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
   175a0:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   175a2:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
   175a6:	f7fe fc99 	bl	15edc <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   175aa:	ab04      	add	r3, sp, #16
   175ac:	9308      	str	r3, [sp, #32]
   175ae:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   175b0:	f000 fde0 	bl	18174 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   175b4:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   175b8:	f7fd fb62 	bl	14c80 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   175bc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   175c0:	9807      	ldr	r0, [sp, #28]
   175c2:	b310      	cbz	r0, 1760a <heartbeat_send.constprop.0+0x96>
   175c4:	8820      	ldrh	r0, [r4, #0]
   175c6:	b300      	cbz	r0, 1760a <heartbeat_send.constprop.0+0x96>
		return 0;
	}

	hb.init_ttl = pub.ttl;
   175c8:	7923      	ldrb	r3, [r4, #4]
   175ca:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   175ce:	f7fd fba1 	bl	14d14 <bt_mesh_relay_get>
	uint16_t feat = 0U;
   175d2:	1e43      	subs	r3, r0, #1
   175d4:	425c      	negs	r4, r3
   175d6:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   175d8:	f00a fe48 	bl	2226c <bt_mesh_gatt_proxy_get>
   175dc:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   175de:	bf08      	it	eq
   175e0:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   175e4:	f00a fe47 	bl	22276 <bt_mesh_friend_get>
   175e8:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   175ea:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
   175ee:	bf08      	it	eq
   175f0:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   175f4:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
   175f8:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   175fa:	2303      	movs	r3, #3
   175fc:	aa03      	add	r2, sp, #12
   175fe:	210a      	movs	r1, #10
   17600:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
   17602:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   17606:	f00b f933 	bl	22870 <bt_mesh_ctl_send>
				cb, cb_data);
}
   1760a:	b00b      	add	sp, #44	; 0x2c
   1760c:	bd30      	pop	{r4, r5, pc}
   1760e:	bf00      	nop
   17610:	2000274c 	.word	0x2000274c

00017614 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
   17614:	b510      	push	{r4, lr}
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	/* Fast exit if disabled or expired */
	if (pub.period == 0U || pub.count == 0U) {
   17616:	4c0a      	ldr	r4, [pc, #40]	; (17640 <hb_publish+0x2c>)
   17618:	68e3      	ldr	r3, [r4, #12]
   1761a:	b133      	cbz	r3, 1762a <hb_publish+0x16>
   1761c:	8863      	ldrh	r3, [r4, #2]
   1761e:	b123      	cbz	r3, 1762a <hb_publish+0x16>
		return;
	}

	sub = bt_mesh_subnet_get(pub.net_idx);
   17620:	8920      	ldrh	r0, [r4, #8]
   17622:	f7fe fc5b 	bl	15edc <bt_mesh_subnet_get>
	if (!sub) {
   17626:	b908      	cbnz	r0, 1762c <hb_publish+0x18>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
   17628:	8020      	strh	r0, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
   1762a:	bd10      	pop	{r4, pc}
	err = heartbeat_send(&publish_cb, NULL);
   1762c:	4805      	ldr	r0, [pc, #20]	; (17644 <hb_publish+0x30>)
   1762e:	f7ff ffa1 	bl	17574 <heartbeat_send.constprop.0>
	if (err) {
   17632:	2800      	cmp	r0, #0
   17634:	d0f9      	beq.n	1762a <hb_publish+0x16>
}
   17636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		hb_publish_end_cb(err, NULL);
   1763a:	2100      	movs	r1, #0
   1763c:	f7ff bf6c 	b.w	17518 <hb_publish_end_cb>
   17640:	2000274c 	.word	0x2000274c
   17644:	000268f0 	.word	0x000268f0

00017648 <bt_mesh_hb_recv>:
int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
   17648:	888b      	ldrh	r3, [r1, #4]
   1764a:	2b02      	cmp	r3, #2
{
   1764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17650:	4607      	mov	r7, r0
   17652:	460d      	mov	r5, r1
	if (buf->len < 3) {
   17654:	d949      	bls.n	176ea <bt_mesh_hb_recv+0xa2>
		BT_ERR("Too short heartbeat message");
		return -EINVAL;
	}

	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   17656:	4608      	mov	r0, r1
   17658:	f00d fc5a 	bl	24f10 <net_buf_simple_pull_u8>
	feat = net_buf_simple_pull_be16(buf);

	hops = (init_ttl - rx->ctx.recv_ttl + 1);

	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   1765c:	4e24      	ldr	r6, [pc, #144]	; (176f0 <bt_mesh_hb_recv+0xa8>)
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   1765e:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
   17660:	4628      	mov	r0, r5
   17662:	f00d fc65 	bl	24f30 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   17666:	68ba      	ldr	r2, [r7, #8]
   17668:	68b3      	ldr	r3, [r6, #8]
   1766a:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
   1766c:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   1766e:	d002      	beq.n	17676 <bt_mesh_hb_recv+0x2e>
		BT_DBG("No subscription for received heartbeat");
		return 0;
   17670:	2000      	movs	r0, #0
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
   17672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return k_work_delayable_busy_get(dwork) != 0;
   17676:	481f      	ldr	r0, [pc, #124]	; (176f4 <bt_mesh_hb_recv+0xac>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   17678:	7b7f      	ldrb	r7, [r7, #13]
   1767a:	f00e faa9 	bl	25bd0 <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
   1767e:	2800      	cmp	r0, #0
   17680:	d0f6      	beq.n	17670 <bt_mesh_hb_recv+0x28>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   17682:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   17686:	f1c7 0701 	rsb	r7, r7, #1
	sub.min_hops = MIN(sub.min_hops, hops);
   1768a:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   1768c:	443c      	add	r4, r7
   1768e:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
   17690:	42a3      	cmp	r3, r4
   17692:	bf28      	it	cs
   17694:	4623      	movcs	r3, r4
   17696:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
   17698:	7bf3      	ldrb	r3, [r6, #15]
   1769a:	42a3      	cmp	r3, r4
   1769c:	bf38      	it	cc
   1769e:	4623      	movcc	r3, r4
   176a0:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
   176a2:	89b3      	ldrh	r3, [r6, #12]
   176a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176a8:	4293      	cmp	r3, r2
		sub.count++;
   176aa:	bf1c      	itt	ne
   176ac:	3301      	addne	r3, #1
   176ae:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   176b0:	8973      	ldrh	r3, [r6, #10]
   176b2:	b15b      	cbz	r3, 176cc <bt_mesh_hb_recv+0x84>
	return z_timeout_remaining(&dwork->timeout);
   176b4:	4810      	ldr	r0, [pc, #64]	; (176f8 <bt_mesh_hb_recv+0xb0>)
   176b6:	f00e fba3 	bl	25e00 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   176ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   176be:	fba0 3002 	umull	r3, r0, r0, r2
   176c2:	0bdb      	lsrs	r3, r3, #15
   176c4:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
   176c8:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
   176cc:	6073      	str	r3, [r6, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   176ce:	4f0b      	ldr	r7, [pc, #44]	; (176fc <bt_mesh_hb_recv+0xb4>)
   176d0:	4e0b      	ldr	r6, [pc, #44]	; (17700 <bt_mesh_hb_recv+0xb8>)
			cb->recv(&sub, hops, feat);
   176d2:	f8df 801c 	ldr.w	r8, [pc, #28]	; 176f0 <bt_mesh_hb_recv+0xa8>
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   176d6:	42be      	cmp	r6, r7
   176d8:	d2ca      	bcs.n	17670 <bt_mesh_hb_recv+0x28>
		if (cb->recv) {
   176da:	6833      	ldr	r3, [r6, #0]
   176dc:	b11b      	cbz	r3, 176e6 <bt_mesh_hb_recv+0x9e>
			cb->recv(&sub, hops, feat);
   176de:	462a      	mov	r2, r5
   176e0:	4621      	mov	r1, r4
   176e2:	4640      	mov	r0, r8
   176e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   176e6:	360c      	adds	r6, #12
   176e8:	e7f5      	b.n	176d6 <bt_mesh_hb_recv+0x8e>
		return -EINVAL;
   176ea:	f06f 0015 	mvn.w	r0, #21
   176ee:	e7c0      	b.n	17672 <bt_mesh_hb_recv+0x2a>
   176f0:	2000275c 	.word	0x2000275c
   176f4:	20001fd0 	.word	0x20001fd0
   176f8:	20001fe0 	.word	0x20001fe0
   176fc:	0002648c 	.word	0x0002648c
   17700:	0002648c 	.word	0x0002648c

00017704 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
   17704:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   17706:	4604      	mov	r4, r0
   17708:	b108      	cbz	r0, 1770e <bt_mesh_hb_pub_set+0xa>
   1770a:	8803      	ldrh	r3, [r0, #0]
   1770c:	b97b      	cbnz	r3, 1772e <bt_mesh_hb_pub_set+0x2a>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1770e:	4b14      	ldr	r3, [pc, #80]	; (17760 <bt_mesh_hb_pub_set+0x5c>)
	(void)k_work_cancel_delayable(&pub_timer);
   17710:	4814      	ldr	r0, [pc, #80]	; (17764 <bt_mesh_hb_pub_set+0x60>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   17712:	2400      	movs	r4, #0
   17714:	601c      	str	r4, [r3, #0]
	pub.ttl = 0U;
   17716:	711c      	strb	r4, [r3, #4]
	pub.period = 0U;
   17718:	60dc      	str	r4, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
   1771a:	f00e fa5b 	bl	25bd4 <k_work_cancel_delayable>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
   1771e:	f7fd f96d 	bl	149fc <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   17722:	b118      	cbz	r0, 1772c <bt_mesh_hb_pub_set+0x28>
	 * the work item.
	 */
	k_work_reschedule(&pub_timer, K_NO_WAIT);

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_store_schedule(
   17724:	2006      	movs	r0, #6
   17726:	f001 f973 	bl	18a10 <bt_mesh_settings_store_schedule>
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
   1772a:	2000      	movs	r0, #0
}
   1772c:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
   1772e:	8900      	ldrh	r0, [r0, #8]
   17730:	f7fe fbd4 	bl	15edc <bt_mesh_subnet_get>
   17734:	b190      	cbz	r0, 1775c <bt_mesh_hb_pub_set+0x58>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   17736:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
   17738:	4d09      	ldr	r5, [pc, #36]	; (17760 <bt_mesh_hb_pub_set+0x5c>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   1773a:	f003 030f 	and.w	r3, r3, #15
   1773e:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
   17740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17744:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
   17748:	f7fd f958 	bl	149fc <bt_mesh_is_provisioned>
   1774c:	2800      	cmp	r0, #0
   1774e:	d0ec      	beq.n	1772a <bt_mesh_hb_pub_set+0x26>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
   17750:	2200      	movs	r2, #0
   17752:	2300      	movs	r3, #0
   17754:	4803      	ldr	r0, [pc, #12]	; (17764 <bt_mesh_hb_pub_set+0x60>)
   17756:	f007 fa63 	bl	1ec20 <k_work_reschedule>
   1775a:	e7e3      	b.n	17724 <bt_mesh_hb_pub_set+0x20>
		return STATUS_INVALID_NETKEY;
   1775c:	2004      	movs	r0, #4
   1775e:	e7e5      	b.n	1772c <bt_mesh_hb_pub_set+0x28>
   17760:	2000274c 	.word	0x2000274c
   17764:	20001fa0 	.word	0x20001fa0

00017768 <bt_mesh_hb_pub_get>:

void bt_mesh_hb_pub_get(struct bt_mesh_hb_pub *get)
{
	*get = pub;
   17768:	4b03      	ldr	r3, [pc, #12]	; (17778 <bt_mesh_hb_pub_get+0x10>)
{
   1776a:	b510      	push	{r4, lr}
   1776c:	4604      	mov	r4, r0
	*get = pub;
   1776e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   17770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   17774:	bd10      	pop	{r4, pc}
   17776:	bf00      	nop
   17778:	2000274c 	.word	0x2000274c

0001777c <bt_mesh_hb_sub_set>:

uint8_t bt_mesh_hb_sub_set(uint16_t src, uint16_t dst, uint32_t period)
{
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   1777c:	0403      	lsls	r3, r0, #16
{
   1777e:	b570      	push	{r4, r5, r6, lr}
   17780:	4606      	mov	r6, r0
   17782:	460c      	mov	r4, r1
   17784:	4615      	mov	r5, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   17786:	d501      	bpl.n	1778c <bt_mesh_hb_sub_set+0x10>
		BT_WARN("Prohibited source address");
		return STATUS_INVALID_ADDRESS;
   17788:	2001      	movs	r0, #1
	 * configuration disables the subscription.
	 */
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));

	return STATUS_SUCCESS;
}
   1778a:	bd70      	pop	{r4, r5, r6, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   1778c:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
   17790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17794:	d3f8      	bcc.n	17788 <bt_mesh_hb_sub_set+0xc>
   17796:	f501 7380 	add.w	r3, r1, #256	; 0x100
   1779a:	b29b      	uxth	r3, r3
   1779c:	2bfb      	cmp	r3, #251	; 0xfb
   1779e:	d9f3      	bls.n	17788 <bt_mesh_hb_sub_set+0xc>
   177a0:	b20b      	sxth	r3, r1
   177a2:	2b00      	cmp	r3, #0
   177a4:	dc04      	bgt.n	177b0 <bt_mesh_hb_sub_set+0x34>
	if (period > (1U << 16)) {
   177a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   177aa:	d906      	bls.n	177ba <bt_mesh_hb_sub_set+0x3e>
		return STATUS_CANNOT_SET;
   177ac:	200f      	movs	r0, #15
   177ae:	e7ec      	b.n	1778a <bt_mesh_hb_sub_set+0xe>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
   177b0:	f000 fce0 	bl	18174 <bt_mesh_primary_addr>
   177b4:	42a0      	cmp	r0, r4
   177b6:	d1e7      	bne.n	17788 <bt_mesh_hb_sub_set+0xc>
   177b8:	e7f5      	b.n	177a6 <bt_mesh_hb_sub_set+0x2a>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
   177ba:	4b13      	ldr	r3, [pc, #76]	; (17808 <bt_mesh_hb_sub_set+0x8c>)
   177bc:	b106      	cbz	r6, 177c0 <bt_mesh_hb_sub_set+0x44>
   177be:	b9dc      	cbnz	r4, 177f8 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
   177c0:	2200      	movs	r2, #0
		sub.count = 0U;
   177c2:	e9c3 2202 	strd	r2, r2, [r3, #8]
		sub.period = 0U;
   177c6:	601a      	str	r2, [r3, #0]
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));
   177c8:	681d      	ldr	r5, [r3, #0]
			return ((t * to_hz + off) / from_hz);
   177ca:	2400      	movs	r4, #0
   177cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   177d0:	435d      	muls	r5, r3
   177d2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   177d6:	f240 30e7 	movw	r0, #999	; 0x3e7
   177da:	4621      	mov	r1, r4
   177dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   177e0:	2300      	movs	r3, #0
   177e2:	fbe5 0106 	umlal	r0, r1, r5, r6
   177e6:	f7e8 fc8b 	bl	100 <__aeabi_uldivmod>
   177ea:	4602      	mov	r2, r0
   177ec:	460b      	mov	r3, r1
   177ee:	4807      	ldr	r0, [pc, #28]	; (1780c <bt_mesh_hb_sub_set+0x90>)
   177f0:	f007 fa16 	bl	1ec20 <k_work_reschedule>
	return STATUS_SUCCESS;
   177f4:	4620      	mov	r0, r4
   177f6:	e7c8      	b.n	1778a <bt_mesh_hb_sub_set+0xe>
	} else if (period) {
   177f8:	b125      	cbz	r5, 17804 <bt_mesh_hb_sub_set+0x88>
		sub.count = 0U;
   177fa:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
		sub.src = src;
   177fe:	811e      	strh	r6, [r3, #8]
		sub.dst = dst;
   17800:	815c      	strh	r4, [r3, #10]
		sub.count = 0U;
   17802:	60da      	str	r2, [r3, #12]
		sub.period = 0U;
   17804:	601d      	str	r5, [r3, #0]
   17806:	e7df      	b.n	177c8 <bt_mesh_hb_sub_set+0x4c>
   17808:	2000275c 	.word	0x2000275c
   1780c:	20001fd0 	.word	0x20001fd0

00017810 <bt_mesh_hb_sub_reset_count>:

void bt_mesh_hb_sub_reset_count(void)
{
	sub.count = 0;
   17810:	4b01      	ldr	r3, [pc, #4]	; (17818 <bt_mesh_hb_sub_reset_count+0x8>)
   17812:	2200      	movs	r2, #0
   17814:	819a      	strh	r2, [r3, #12]
}
   17816:	4770      	bx	lr
   17818:	2000275c 	.word	0x2000275c

0001781c <bt_mesh_hb_sub_get>:

void bt_mesh_hb_sub_get(struct bt_mesh_hb_sub *get)
{
   1781c:	b538      	push	{r3, r4, r5, lr}
	*get = sub;
   1781e:	4d0b      	ldr	r5, [pc, #44]	; (1784c <bt_mesh_hb_sub_get+0x30>)
{
   17820:	4604      	mov	r4, r0
	*get = sub;
   17822:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   1782a:	896b      	ldrh	r3, [r5, #10]
   1782c:	b15b      	cbz	r3, 17846 <bt_mesh_hb_sub_get+0x2a>
   1782e:	4808      	ldr	r0, [pc, #32]	; (17850 <bt_mesh_hb_sub_get+0x34>)
   17830:	f00e fae6 	bl	25e00 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   17834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17838:	fba0 3002 	umull	r3, r0, r0, r2
   1783c:	0bdb      	lsrs	r3, r3, #15
   1783e:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
   17842:	fbb3 f3f2 	udiv	r3, r3, r2
	get->remaining = sub_remaining();
   17846:	6063      	str	r3, [r4, #4]
}
   17848:	bd38      	pop	{r3, r4, r5, pc}
   1784a:	bf00      	nop
   1784c:	2000275c 	.word	0x2000275c
   17850:	20001fe0 	.word	0x20001fe0

00017854 <bt_mesh_hb_feature_changed>:
{
	static const struct bt_mesh_send_cb pub_cb = {
		.end = hb_unsolicited_pub_end_cb,
	};

	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   17854:	4b04      	ldr	r3, [pc, #16]	; (17868 <bt_mesh_hb_feature_changed+0x14>)
   17856:	881a      	ldrh	r2, [r3, #0]
   17858:	b12a      	cbz	r2, 17866 <bt_mesh_hb_feature_changed+0x12>
		return;
	}

	if (!(pub.feat & features)) {
   1785a:	88db      	ldrh	r3, [r3, #6]
   1785c:	4218      	tst	r0, r3
   1785e:	d002      	beq.n	17866 <bt_mesh_hb_feature_changed+0x12>
		return;
	}

	heartbeat_send(&pub_cb, NULL);
   17860:	4802      	ldr	r0, [pc, #8]	; (1786c <bt_mesh_hb_feature_changed+0x18>)
   17862:	f7ff be87 	b.w	17574 <heartbeat_send.constprop.0>
}
   17866:	4770      	bx	lr
   17868:	2000274c 	.word	0x2000274c
   1786c:	000268e8 	.word	0x000268e8

00017870 <bt_mesh_hb_init>:

void bt_mesh_hb_init(void)
{
   17870:	b508      	push	{r3, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
   17872:	4b07      	ldr	r3, [pc, #28]	; (17890 <bt_mesh_hb_init+0x20>)
	k_work_init_delayable(&pub_timer, hb_publish);
   17874:	4907      	ldr	r1, [pc, #28]	; (17894 <bt_mesh_hb_init+0x24>)
   17876:	4808      	ldr	r0, [pc, #32]	; (17898 <bt_mesh_hb_init+0x28>)
	pub.net_idx = BT_MESH_KEY_UNUSED;
   17878:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1787c:	811a      	strh	r2, [r3, #8]
	k_work_init_delayable(&pub_timer, hb_publish);
   1787e:	f00e f99b 	bl	25bb8 <k_work_init_delayable>
	k_work_init_delayable(&sub_timer, sub_end);
}
   17882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&sub_timer, sub_end);
   17886:	4905      	ldr	r1, [pc, #20]	; (1789c <bt_mesh_hb_init+0x2c>)
   17888:	4805      	ldr	r0, [pc, #20]	; (178a0 <bt_mesh_hb_init+0x30>)
   1788a:	f00e b995 	b.w	25bb8 <k_work_init_delayable>
   1788e:	bf00      	nop
   17890:	2000274c 	.word	0x2000274c
   17894:	00017615 	.word	0x00017615
   17898:	20001fa0 	.word	0x20001fa0
   1789c:	000174ed 	.word	0x000174ed
   178a0:	20001fd0 	.word	0x20001fd0

000178a4 <bt_mesh_hb_start>:

void bt_mesh_hb_start(void)
{
	if (pub.count && pub.period) {
   178a4:	4b05      	ldr	r3, [pc, #20]	; (178bc <bt_mesh_hb_start+0x18>)
   178a6:	885a      	ldrh	r2, [r3, #2]
   178a8:	b132      	cbz	r2, 178b8 <bt_mesh_hb_start+0x14>
   178aa:	68db      	ldr	r3, [r3, #12]
   178ac:	b123      	cbz	r3, 178b8 <bt_mesh_hb_start+0x14>
		BT_DBG("Starting heartbeat publication");
		k_work_reschedule(&pub_timer, K_NO_WAIT);
   178ae:	4804      	ldr	r0, [pc, #16]	; (178c0 <bt_mesh_hb_start+0x1c>)
   178b0:	2200      	movs	r2, #0
   178b2:	2300      	movs	r3, #0
   178b4:	f007 b9b4 	b.w	1ec20 <k_work_reschedule>
	}
}
   178b8:	4770      	bx	lr
   178ba:	bf00      	nop
   178bc:	2000274c 	.word	0x2000274c
   178c0:	20001fa0 	.word	0x20001fa0

000178c4 <bt_mesh_hb_pub_pending_store>:
}

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);

void bt_mesh_hb_pub_pending_store(void)
{
   178c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
   178c6:	a802      	add	r0, sp, #8
   178c8:	f7ff ff4e 	bl	17768 <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   178cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   178d0:	b929      	cbnz	r1, 178de <bt_mesh_hb_pub_pending_store+0x1a>
		err = settings_delete("bt/mesh/HBPub");
   178d2:	481b      	ldr	r0, [pc, #108]	; (17940 <bt_mesh_hb_pub_pending_store+0x7c>)
   178d4:	f008 fd93 	bl	203fe <settings_delete>
	if (err) {
		BT_ERR("Failed to store Heartbeat Publication");
	} else {
		BT_DBG("Stored Heartbeat Publication");
	}
}
   178d8:	b007      	add	sp, #28
   178da:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
   178de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
   178e2:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
   178e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   178ea:	1a98      	subs	r0, r3, r2
   178ec:	4243      	negs	r3, r0
   178ee:	4143      	adcs	r3, r0
   178f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   178f4:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
   178f8:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
   178fa:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   178fe:	b13b      	cbz	r3, 17910 <bt_mesh_hb_pub_pending_store+0x4c>
		return 0x00;
	} else if (val == 0xffff) {
   17900:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   17902:	bf1d      	ittte	ne
   17904:	fab3 f383 	clzne	r3, r3
   17908:	f1c3 0320 	rsbne	r3, r3, #32
   1790c:	b2db      	uxtbne	r3, r3
		return 0xff;
   1790e:	23ff      	moveq	r3, #255	; 0xff
		val.period = bt_mesh_hb_log(pub.period);
   17910:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
   17914:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17918:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
   1791c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		val.net_idx = pub.net_idx;
   17920:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.feat = pub.feat;
   17924:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
   17928:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   1792c:	4804      	ldr	r0, [pc, #16]	; (17940 <bt_mesh_hb_pub_pending_store+0x7c>)
		val.net_idx = pub.net_idx;
   1792e:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   17932:	4669      	mov	r1, sp
   17934:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
   17936:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   1793a:	f7fa f9ef 	bl	11d1c <settings_save_one>
}
   1793e:	e7cb      	b.n	178d8 <bt_mesh_hb_pub_pending_store+0x14>
   17940:	00027601 	.word	0x00027601

00017944 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
   17944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17948:	b094      	sub	sp, #80	; 0x50
   1794a:	4680      	mov	r8, r0
   1794c:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
   1794e:	4828      	ldr	r0, [pc, #160]	; (179f0 <bt_mesh_k2+0xac>)
   17950:	a902      	add	r1, sp, #8
{
   17952:	4615      	mov	r5, r2
   17954:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
   17956:	f00b f919 	bl	22b8c <bt_mesh_s1>
	if (err) {
   1795a:	4604      	mov	r4, r0
   1795c:	2800      	cmp	r0, #0
   1795e:	d143      	bne.n	179e8 <bt_mesh_k2+0xa4>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
   17960:	ab0a      	add	r3, sp, #40	; 0x28
   17962:	2210      	movs	r2, #16
   17964:	4641      	mov	r1, r8
   17966:	a802      	add	r0, sp, #8
   17968:	f00b f906 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (err) {
   1796c:	4604      	mov	r4, r0
   1796e:	2800      	cmp	r0, #0
   17970:	d13a      	bne.n	179e8 <bt_mesh_k2+0xa4>
		return err;
	}

	pad = 0x01;
   17972:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
   17974:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
   17978:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1797c:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
   1797e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
   17982:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
   17986:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1798a:	2203      	movs	r2, #3
   1798c:	462b      	mov	r3, r5
   1798e:	a90e      	add	r1, sp, #56	; 0x38
   17990:	a80a      	add	r0, sp, #40	; 0x28
   17992:	f00b f8d0 	bl	22b36 <bt_mesh_aes_cmac>
	if (err) {
   17996:	4604      	mov	r4, r0
   17998:	bb30      	cbnz	r0, 179e8 <bt_mesh_k2+0xa4>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
   1799a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
   1799e:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
   179a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   179a4:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
   179a6:	2302      	movs	r3, #2
   179a8:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
   179ac:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   179ae:	462b      	mov	r3, r5
   179b0:	2203      	movs	r2, #3
   179b2:	a90e      	add	r1, sp, #56	; 0x38
   179b4:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
   179b6:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   179b8:	f00b f8bd 	bl	22b36 <bt_mesh_aes_cmac>
	if (err) {
   179bc:	4604      	mov	r4, r0
   179be:	b998      	cbnz	r0, 179e8 <bt_mesh_k2+0xa4>
		return err;
	}

	memcpy(enc_key, out, 16);
   179c0:	4632      	mov	r2, r6
   179c2:	4629      	mov	r1, r5
   179c4:	981a      	ldr	r0, [sp, #104]	; 0x68
   179c6:	f00a f817 	bl	219f8 <memcpy>

	pad = 0x03;
   179ca:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   179cc:	462b      	mov	r3, r5
   179ce:	a90e      	add	r1, sp, #56	; 0x38
   179d0:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
   179d2:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   179d6:	f00b f8ae 	bl	22b36 <bt_mesh_aes_cmac>
	if (err) {
   179da:	4604      	mov	r4, r0
   179dc:	b920      	cbnz	r0, 179e8 <bt_mesh_k2+0xa4>
		return err;
	}

	memcpy(priv_key, out, 16);
   179de:	981b      	ldr	r0, [sp, #108]	; 0x6c
   179e0:	4632      	mov	r2, r6
   179e2:	4629      	mov	r1, r5
   179e4:	f00a f808 	bl	219f8 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
   179e8:	4620      	mov	r0, r4
   179ea:	b014      	add	sp, #80	; 0x50
   179ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179f0:	0002760f 	.word	0x0002760f

000179f4 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
   179f4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   179f6:	4b13      	ldr	r3, [pc, #76]	; (17a44 <bt_mesh_k3+0x50>)
{
   179f8:	b08a      	sub	sp, #40	; 0x28
   179fa:	4606      	mov	r6, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   179fc:	6818      	ldr	r0, [r3, #0]
   179fe:	9000      	str	r0, [sp, #0]
   17a00:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
   17a02:	4811      	ldr	r0, [pc, #68]	; (17a48 <bt_mesh_k3+0x54>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   17a04:	f88d 3004 	strb.w	r3, [sp, #4]
{
   17a08:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
   17a0a:	a902      	add	r1, sp, #8
   17a0c:	f00b f8be 	bl	22b8c <bt_mesh_s1>
	if (err) {
   17a10:	4604      	mov	r4, r0
   17a12:	b9a0      	cbnz	r0, 17a3e <bt_mesh_k3+0x4a>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   17a14:	ab06      	add	r3, sp, #24
   17a16:	2210      	movs	r2, #16
   17a18:	4631      	mov	r1, r6
   17a1a:	a802      	add	r0, sp, #8
   17a1c:	f00b f8ac 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (err) {
   17a20:	4604      	mov	r4, r0
   17a22:	b960      	cbnz	r0, 17a3e <bt_mesh_k3+0x4a>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
   17a24:	ab02      	add	r3, sp, #8
   17a26:	2205      	movs	r2, #5
   17a28:	4669      	mov	r1, sp
   17a2a:	a806      	add	r0, sp, #24
   17a2c:	f00b f8a4 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (err) {
   17a30:	4604      	mov	r4, r0
   17a32:	b920      	cbnz	r0, 17a3e <bt_mesh_k3+0x4a>
		return err;
	}

	memcpy(out, tmp + 8, 8);
   17a34:	2208      	movs	r2, #8
   17a36:	a904      	add	r1, sp, #16
   17a38:	4628      	mov	r0, r5
   17a3a:	f009 ffdd 	bl	219f8 <memcpy>

	return 0;
}
   17a3e:	4620      	mov	r0, r4
   17a40:	b00a      	add	sp, #40	; 0x28
   17a42:	bd70      	pop	{r4, r5, r6, pc}
   17a44:	00027619 	.word	0x00027619
   17a48:	00027614 	.word	0x00027614

00017a4c <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
   17a4c:	b530      	push	{r4, r5, lr}
   17a4e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   17a50:	4b0f      	ldr	r3, [pc, #60]	; (17a90 <bt_mesh_k4+0x44>)
   17a52:	9301      	str	r3, [sp, #4]
{
   17a54:	4605      	mov	r5, r0
   17a56:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
   17a58:	480e      	ldr	r0, [pc, #56]	; (17a94 <bt_mesh_k4+0x48>)
   17a5a:	a902      	add	r1, sp, #8
   17a5c:	f00b f896 	bl	22b8c <bt_mesh_s1>
	if (err) {
   17a60:	b998      	cbnz	r0, 17a8a <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   17a62:	ab06      	add	r3, sp, #24
   17a64:	2210      	movs	r2, #16
   17a66:	4629      	mov	r1, r5
   17a68:	a802      	add	r0, sp, #8
   17a6a:	f00b f885 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (err) {
   17a6e:	b960      	cbnz	r0, 17a8a <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
   17a70:	2204      	movs	r2, #4
   17a72:	ab02      	add	r3, sp, #8
   17a74:	eb0d 0102 	add.w	r1, sp, r2
   17a78:	a806      	add	r0, sp, #24
   17a7a:	f00b f87d 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (err) {
   17a7e:	b920      	cbnz	r0, 17a8a <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
   17a80:	f89d 3017 	ldrb.w	r3, [sp, #23]
   17a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17a88:	7023      	strb	r3, [r4, #0]

	return 0;
}
   17a8a:	b00b      	add	sp, #44	; 0x2c
   17a8c:	bd30      	pop	{r4, r5, pc}
   17a8e:	bf00      	nop
   17a90:	01366469 	.word	0x01366469
   17a94:	0002761f 	.word	0x0002761f

00017a98 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
   17a98:	b530      	push	{r4, r5, lr}
   17a9a:	b087      	sub	sp, #28
   17a9c:	4604      	mov	r4, r0
   17a9e:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
   17aa0:	a902      	add	r1, sp, #8
{
   17aa2:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
   17aa4:	f00b f872 	bl	22b8c <bt_mesh_s1>
	if (err) {
   17aa8:	b930      	cbnz	r0, 17ab8 <bt_mesh_id128+0x20>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
   17aaa:	4b04      	ldr	r3, [pc, #16]	; (17abc <bt_mesh_id128+0x24>)
   17aac:	9500      	str	r5, [sp, #0]
   17aae:	aa02      	add	r2, sp, #8
   17ab0:	2110      	movs	r1, #16
   17ab2:	4620      	mov	r0, r4
   17ab4:	f00b f87d 	bl	22bb2 <bt_mesh_k1>
}
   17ab8:	b007      	add	sp, #28
   17aba:	bd30      	pop	{r4, r5, pc}
   17abc:	00027624 	.word	0x00027624

00017ac0 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
   17ac0:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   17ac2:	4b18      	ldr	r3, [pc, #96]	; (17b24 <bt_mesh_net_obfuscate+0x64>)
{
   17ac4:	b088      	sub	sp, #32
   17ac6:	4604      	mov	r4, r0
   17ac8:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   17aca:	6818      	ldr	r0, [r3, #0]
   17acc:	889b      	ldrh	r3, [r3, #4]
   17ace:	9000      	str	r0, [sp, #0]
   17ad0:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
   17ad4:	f10d 0105 	add.w	r1, sp, #5
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   17ad8:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
   17ada:	4630      	mov	r0, r6
{
   17adc:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   17ade:	f8cd 3006 	str.w	r3, [sp, #6]
   17ae2:	f8cd 300a 	str.w	r3, [sp, #10]
   17ae6:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
   17aea:	f00a fffb 	bl	22ae4 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   17aee:	2207      	movs	r2, #7
   17af0:	18a1      	adds	r1, r4, r2
   17af2:	f10d 0009 	add.w	r0, sp, #9
   17af6:	f009 ff7f 	bl	219f8 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   17afa:	aa04      	add	r2, sp, #16
   17afc:	4669      	mov	r1, sp
   17afe:	4628      	mov	r0, r5
   17b00:	f00d fd2c 	bl	2555c <bt_encrypt_be>
	if (err) {
   17b04:	b958      	cbnz	r0, 17b1e <bt_mesh_net_obfuscate+0x5e>
   17b06:	4623      	mov	r3, r4
   17b08:	aa04      	add	r2, sp, #16
   17b0a:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
   17b0c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   17b10:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   17b14:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   17b16:	ea81 0105 	eor.w	r1, r1, r5
   17b1a:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   17b1c:	d1f6      	bne.n	17b0c <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
   17b1e:	b008      	add	sp, #32
   17b20:	bd70      	pop	{r4, r5, r6, pc}
   17b22:	bf00      	nop
   17b24:	000265ee 	.word	0x000265ee

00017b28 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
   17b28:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
   17b2a:	4a06      	ldr	r2, [pc, #24]	; (17b44 <bt_mesh_fcs_calc+0x1c>)
   17b2c:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
   17b2e:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   17b30:	4288      	cmp	r0, r1
   17b32:	d102      	bne.n	17b3a <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
   17b34:	43d8      	mvns	r0, r3
}
   17b36:	b2c0      	uxtb	r0, r0
   17b38:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
   17b3a:	f810 4b01 	ldrb.w	r4, [r0], #1
   17b3e:	4063      	eors	r3, r4
   17b40:	5cd3      	ldrb	r3, [r2, r3]
   17b42:	e7f5      	b.n	17b30 <bt_mesh_fcs_calc+0x8>
   17b44:	00027630 	.word	0x00027630

00017b48 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
   17b48:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
   17b4a:	6804      	ldr	r4, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
   17b4c:	8880      	ldrh	r0, [r0, #4]
   17b4e:	4d08      	ldr	r5, [pc, #32]	; (17b70 <bt_mesh_fcs_check+0x28>)
   17b50:	4420      	add	r0, r4
	uint8_t fcs = 0xff;
   17b52:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   17b54:	4284      	cmp	r4, r0
   17b56:	d106      	bne.n	17b66 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
   17b58:	404b      	eors	r3, r1
   17b5a:	5ce8      	ldrb	r0, [r5, r3]
}
   17b5c:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
   17b60:	4258      	negs	r0, r3
   17b62:	4158      	adcs	r0, r3
   17b64:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
   17b66:	f814 2b01 	ldrb.w	r2, [r4], #1
   17b6a:	405a      	eors	r2, r3
   17b6c:	5cab      	ldrb	r3, [r5, r2]
   17b6e:	e7f1      	b.n	17b54 <bt_mesh_fcs_check+0xc>
   17b70:	00027630 	.word	0x00027630

00017b74 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
   17b74:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
   17b76:	4b04      	ldr	r3, [pc, #16]	; (17b88 <bt_mesh_prov_conf_key+0x14>)
   17b78:	9200      	str	r2, [sp, #0]
   17b7a:	460a      	mov	r2, r1
   17b7c:	2120      	movs	r1, #32
   17b7e:	f00b f818 	bl	22bb2 <bt_mesh_k1>
}
   17b82:	b003      	add	sp, #12
   17b84:	f85d fb04 	ldr.w	pc, [sp], #4
   17b88:	0002762b 	.word	0x0002762b

00017b8c <mod_init>:
}
#endif

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
   17b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b90:	9d06      	ldr	r5, [sp, #24]
	int i;
	int *err = user_data;

	if (*err) {
   17b92:	682f      	ldr	r7, [r5, #0]
{
   17b94:	4604      	mov	r4, r0
   17b96:	460e      	mov	r6, r1
   17b98:	4690      	mov	r8, r2
	if (*err) {
   17b9a:	b9f7      	cbnz	r7, 17bda <mod_init+0x4e>
		return;
	}

	if (mod->pub) {
   17b9c:	6880      	ldr	r0, [r0, #8]
   17b9e:	b120      	cbz	r0, 17baa <mod_init+0x1e>
		mod->pub->mod = mod;
   17ba0:	f840 4b18 	str.w	r4, [r0], #24
		k_work_init_delayable(&mod->pub->timer, mod_publish);
   17ba4:	491a      	ldr	r1, [pc, #104]	; (17c10 <mod_init+0x84>)
   17ba6:	f00e f807 	bl	25bb8 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   17baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17bae:	81a3      	strh	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
   17bb0:	4b18      	ldr	r3, [pc, #96]	; (17c14 <mod_init+0x88>)
   17bb2:	681b      	ldr	r3, [r3, #0]
   17bb4:	68db      	ldr	r3, [r3, #12]
   17bb6:	1af3      	subs	r3, r6, r3
   17bb8:	111b      	asrs	r3, r3, #4
   17bba:	7123      	strb	r3, [r4, #4]
	if (vnd) {
   17bbc:	f1b8 0f00 	cmp.w	r8, #0
   17bc0:	d017      	beq.n	17bf2 <mod_init+0x66>
		mod->mod_idx = mod - elem->vnd_models;
   17bc2:	68f3      	ldr	r3, [r6, #12]
   17bc4:	1ae3      	subs	r3, r4, r3
   17bc6:	115b      	asrs	r3, r3, #5
   17bc8:	7163      	strb	r3, [r4, #5]
	for (op = mod->op; op->func; op++) {
   17bca:	6963      	ldr	r3, [r4, #20]
   17bcc:	330c      	adds	r3, #12
   17bce:	f853 2c04 	ldr.w	r2, [r3, #-4]
   17bd2:	4619      	mov	r1, r3
   17bd4:	b91a      	cbnz	r2, 17bde <mod_init+0x52>

		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE)) {
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
   17bd6:	602f      	str	r7, [r5, #0]
			if (*err) {
   17bd8:	b17f      	cbz	r7, 17bfa <mod_init+0x6e>
	}

	if (mod->cb && mod->cb->init) {
		*err = mod->cb->init(mod);
	}
}
   17bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cid == mod->vnd.company) {
   17bde:	8820      	ldrh	r0, [r4, #0]
   17be0:	f831 2c0c 	ldrh.w	r2, [r1, #-12]
   17be4:	4290      	cmp	r0, r2
   17be6:	f103 030c 	add.w	r3, r3, #12
   17bea:	d0f0      	beq.n	17bce <mod_init+0x42>
		return -EINVAL;
   17bec:	f06f 0715 	mvn.w	r7, #21
   17bf0:	e7f1      	b.n	17bd6 <mod_init+0x4a>
		mod->mod_idx = mod - elem->models;
   17bf2:	68b3      	ldr	r3, [r6, #8]
   17bf4:	1ae3      	subs	r3, r4, r3
   17bf6:	115b      	asrs	r3, r3, #5
   17bf8:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
   17bfa:	69a3      	ldr	r3, [r4, #24]
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d0ec      	beq.n	17bda <mod_init+0x4e>
   17c00:	689b      	ldr	r3, [r3, #8]
   17c02:	2b00      	cmp	r3, #0
   17c04:	d0e9      	beq.n	17bda <mod_init+0x4e>
		*err = mod->cb->init(mod);
   17c06:	4620      	mov	r0, r4
   17c08:	4798      	blx	r3
   17c0a:	6028      	str	r0, [r5, #0]
   17c0c:	e7e5      	b.n	17bda <mod_init+0x4e>
   17c0e:	bf00      	nop
   17c10:	00017e45 	.word	0x00017e45
   17c14:	2000276c 	.word	0x2000276c

00017c18 <encode_mod_path.isra.0>:
	return mod_set(true, name, len_rd, read_cb, cb_arg);
}

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
   17c18:	b470      	push	{r4, r5, r6}
   17c1a:	4606      	mov	r6, r0
   17c1c:	460c      	mov	r4, r1
   17c1e:	461d      	mov	r5, r3
   17c20:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
			    const char *key, char *path, size_t path_len)
{
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   17c24:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
   17c28:	9503      	str	r5, [sp, #12]
	if (vnd) {
   17c2a:	b11a      	cbz	r2, 17c34 <encode_mod_path.isra.0+0x1c>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   17c2c:	4a02      	ldr	r2, [pc, #8]	; (17c38 <encode_mod_path.isra.0+0x20>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
	}
}
   17c2e:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   17c30:	f007 be30 	b.w	1f894 <snprintk>
   17c34:	4a01      	ldr	r2, [pc, #4]	; (17c3c <encode_mod_path.isra.0+0x24>)
   17c36:	e7fa      	b.n	17c2e <encode_mod_path.isra.0+0x16>
   17c38:	00027730 	.word	0x00027730
   17c3c:	00027740 	.word	0x00027740

00017c40 <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
   17c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!mod->flags) {
   17c42:	88c3      	ldrh	r3, [r0, #6]
{
   17c44:	b08b      	sub	sp, #44	; 0x2c
   17c46:	4604      	mov	r4, r0
   17c48:	4616      	mov	r6, r2
	if (!mod->flags) {
   17c4a:	2b00      	cmp	r3, #0
   17c4c:	d05d      	beq.n	17d0a <store_pending_mod+0xca>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   17c4e:	07d8      	lsls	r0, r3, #31
   17c50:	d51f      	bpl.n	17c92 <store_pending_mod+0x52>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   17c52:	f023 0301 	bic.w	r3, r3, #1
   17c56:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   17c58:	89a3      	ldrh	r3, [r4, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   17c5a:	7961      	ldrb	r1, [r4, #5]
   17c5c:	7920      	ldrb	r0, [r4, #4]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   17c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c62:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
   17c64:	bf18      	it	ne
   17c66:	f8ad 300c 	strhne.w	r3, [sp, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   17c6a:	f04f 0314 	mov.w	r3, #20
   17c6e:	eb0d 0503 	add.w	r5, sp, r3
			keys[count++] = mod->keys[i];
   17c72:	bf14      	ite	ne
   17c74:	2701      	movne	r7, #1
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   17c76:	2700      	moveq	r7, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   17c78:	9301      	str	r3, [sp, #4]
   17c7a:	9500      	str	r5, [sp, #0]
   17c7c:	4b3a      	ldr	r3, [pc, #232]	; (17d68 <store_pending_mod+0x128>)
   17c7e:	4632      	mov	r2, r6
   17c80:	f7ff ffca 	bl	17c18 <encode_mod_path.isra.0>
	if (count) {
   17c84:	2f00      	cmp	r7, #0
   17c86:	d042      	beq.n	17d0e <store_pending_mod+0xce>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   17c88:	2202      	movs	r2, #2
   17c8a:	a903      	add	r1, sp, #12
   17c8c:	4628      	mov	r0, r5
   17c8e:	f7fa f845 	bl	11d1c <settings_save_one>
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   17c92:	88e3      	ldrh	r3, [r4, #6]
   17c94:	0799      	lsls	r1, r3, #30
   17c96:	d520      	bpl.n	17cda <store_pending_mod+0x9a>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   17c98:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   17c9a:	f023 0302 	bic.w	r3, r3, #2
   17c9e:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   17ca0:	b115      	cbz	r5, 17ca8 <store_pending_mod+0x68>
			groups[count++] = mod->groups[i];
   17ca2:	f8ad 500c 	strh.w	r5, [sp, #12]
   17ca6:	2501      	movs	r5, #1
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   17ca8:	8a23      	ldrh	r3, [r4, #16]
   17caa:	b12b      	cbz	r3, 17cb8 <store_pending_mod+0x78>
			groups[count++] = mod->groups[i];
   17cac:	aa0a      	add	r2, sp, #40	; 0x28
   17cae:	eb02 0245 	add.w	r2, r2, r5, lsl #1
   17cb2:	3501      	adds	r5, #1
   17cb4:	f822 3c1c 	strh.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   17cb8:	2314      	movs	r3, #20
   17cba:	eb0d 0703 	add.w	r7, sp, r3
   17cbe:	9301      	str	r3, [sp, #4]
   17cc0:	7961      	ldrb	r1, [r4, #5]
   17cc2:	4b2a      	ldr	r3, [pc, #168]	; (17d6c <store_pending_mod+0x12c>)
   17cc4:	7920      	ldrb	r0, [r4, #4]
   17cc6:	9700      	str	r7, [sp, #0]
   17cc8:	4632      	mov	r2, r6
   17cca:	f7ff ffa5 	bl	17c18 <encode_mod_path.isra.0>
	if (count) {
   17cce:	b315      	cbz	r5, 17d16 <store_pending_mod+0xd6>
		err = settings_save_one(path, groups,
   17cd0:	006a      	lsls	r2, r5, #1
   17cd2:	a903      	add	r1, sp, #12
   17cd4:	4638      	mov	r0, r7
   17cd6:	f7fa f821 	bl	11d1c <settings_save_one>
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   17cda:	88e3      	ldrh	r3, [r4, #6]
   17cdc:	075a      	lsls	r2, r3, #29
   17cde:	d514      	bpl.n	17d0a <store_pending_mod+0xca>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   17ce0:	f023 0304 	bic.w	r3, r3, #4
   17ce4:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   17ce6:	2314      	movs	r3, #20
   17ce8:	eb0d 0503 	add.w	r5, sp, r3
   17cec:	9301      	str	r3, [sp, #4]
   17cee:	4632      	mov	r2, r6
   17cf0:	4b1f      	ldr	r3, [pc, #124]	; (17d70 <store_pending_mod+0x130>)
   17cf2:	7961      	ldrb	r1, [r4, #5]
   17cf4:	7920      	ldrb	r0, [r4, #4]
   17cf6:	9500      	str	r5, [sp, #0]
   17cf8:	f7ff ff8e 	bl	17c18 <encode_mod_path.isra.0>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   17cfc:	68a2      	ldr	r2, [r4, #8]
   17cfe:	b10a      	cbz	r2, 17d04 <store_pending_mod+0xc4>
   17d00:	8893      	ldrh	r3, [r2, #4]
   17d02:	b963      	cbnz	r3, 17d1e <store_pending_mod+0xde>
		err = settings_delete(path);
   17d04:	4628      	mov	r0, r5
   17d06:	f008 fb7a 	bl	203fe <settings_delete>
		store_pending_mod_pub(mod, vnd);
	}
}
   17d0a:	b00b      	add	sp, #44	; 0x2c
   17d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = settings_delete(path);
   17d0e:	4628      	mov	r0, r5
   17d10:	f008 fb75 	bl	203fe <settings_delete>
}
   17d14:	e7bd      	b.n	17c92 <store_pending_mod+0x52>
		err = settings_delete(path);
   17d16:	4638      	mov	r0, r7
   17d18:	f008 fb71 	bl	203fe <settings_delete>
}
   17d1c:	e7dd      	b.n	17cda <store_pending_mod+0x9a>
		pub.addr = mod->pub->addr;
   17d1e:	f8ad 300c 	strh.w	r3, [sp, #12]
		pub.key = mod->pub->key;
   17d22:	88d3      	ldrh	r3, [r2, #6]
   17d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
   17d28:	f8ad 300e 	strh.w	r3, [sp, #14]
		pub.ttl = mod->pub->ttl;
   17d2c:	8913      	ldrh	r3, [r2, #8]
   17d2e:	f8ad 3010 	strh.w	r3, [sp, #16]
		pub.period = mod->pub->period;
   17d32:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17d36:	8951      	ldrh	r1, [r2, #10]
   17d38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   17d3c:	f3c1 010b 	ubfx	r1, r1, #0, #12
   17d40:	f023 030f 	bic.w	r3, r3, #15
   17d44:	430b      	orrs	r3, r1
   17d46:	f8ad 3012 	strh.w	r3, [sp, #18]
		pub.cred = mod->pub->cred;
   17d4a:	79d3      	ldrb	r3, [r2, #7]
   17d4c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   17d50:	f3c3 1300 	ubfx	r3, r3, #4, #1
   17d54:	f363 1204 	bfi	r2, r3, #4, #1
   17d58:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
   17d5c:	a903      	add	r1, sp, #12
   17d5e:	2208      	movs	r2, #8
   17d60:	4628      	mov	r0, r5
   17d62:	f7f9 ffdb 	bl	11d1c <settings_save_one>
}
   17d66:	e7d0      	b.n	17d0a <store_pending_mod+0xca>
   17d68:	00027750 	.word	0x00027750
   17d6c:	00027755 	.word	0x00027755
   17d70:	00027759 	.word	0x00027759

00017d74 <bt_mesh_model_foreach>:
{
   17d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
   17d78:	f8df 9068 	ldr.w	r9, [pc, #104]	; 17de4 <bt_mesh_model_foreach+0x70>
{
   17d7c:	4606      	mov	r6, r0
   17d7e:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
   17d80:	2500      	movs	r5, #0
   17d82:	f8d9 3000 	ldr.w	r3, [r9]
   17d86:	689a      	ldr	r2, [r3, #8]
   17d88:	42aa      	cmp	r2, r5
   17d8a:	d802      	bhi.n	17d92 <bt_mesh_model_foreach+0x1e>
}
   17d8c:	b003      	add	sp, #12
   17d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   17d92:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
   17d94:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   17d98:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
   17d9c:	7923      	ldrb	r3, [r4, #4]
   17d9e:	4543      	cmp	r3, r8
   17da0:	dc06      	bgt.n	17db0 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
   17da2:	f04f 0800 	mov.w	r8, #0
   17da6:	7963      	ldrb	r3, [r4, #5]
   17da8:	4543      	cmp	r3, r8
   17daa:	dc0e      	bgt.n	17dca <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
   17dac:	3501      	adds	r5, #1
   17dae:	e7e8      	b.n	17d82 <bt_mesh_model_foreach+0xe>
			struct bt_mesh_model *model = &elem->models[j];
   17db0:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
   17db2:	9700      	str	r7, [sp, #0]
   17db4:	fab5 f385 	clz	r3, r5
   17db8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
   17dbc:	095b      	lsrs	r3, r3, #5
   17dbe:	2200      	movs	r2, #0
   17dc0:	4621      	mov	r1, r4
   17dc2:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
   17dc4:	f108 0801 	add.w	r8, r8, #1
   17dc8:	e7e8      	b.n	17d9c <bt_mesh_model_foreach+0x28>
			struct bt_mesh_model *model = &elem->vnd_models[j];
   17dca:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
   17dcc:	9700      	str	r7, [sp, #0]
   17dce:	fab5 f385 	clz	r3, r5
   17dd2:	eb00 1048 	add.w	r0, r0, r8, lsl #5
   17dd6:	095b      	lsrs	r3, r3, #5
   17dd8:	2201      	movs	r2, #1
   17dda:	4621      	mov	r1, r4
   17ddc:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
   17dde:	f108 0801 	add.w	r8, r8, #1
   17de2:	e7e0      	b.n	17da6 <bt_mesh_model_foreach+0x32>
   17de4:	2000276c 	.word	0x2000276c

00017de8 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
   17de8:	6883      	ldr	r3, [r0, #8]
   17dea:	b1eb      	cbz	r3, 17e28 <bt_mesh_model_pub_period_get+0x40>
	switch (mod->pub->period >> 6) {
   17dec:	7a98      	ldrb	r0, [r3, #10]
   17dee:	0982      	lsrs	r2, r0, #6
   17df0:	2a02      	cmp	r2, #2
   17df2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   17df6:	d012      	beq.n	17e1e <bt_mesh_model_pub_period_get+0x36>
   17df8:	2a03      	cmp	r2, #3
   17dfa:	d013      	beq.n	17e24 <bt_mesh_model_pub_period_get+0x3c>
   17dfc:	2a01      	cmp	r2, #1
   17dfe:	d00a      	beq.n	17e16 <bt_mesh_model_pub_period_get+0x2e>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
   17e00:	2264      	movs	r2, #100	; 0x64
   17e02:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
   17e06:	79da      	ldrb	r2, [r3, #7]
   17e08:	0652      	lsls	r2, r2, #25
   17e0a:	d50e      	bpl.n	17e2a <bt_mesh_model_pub_period_get+0x42>
		return period >> mod->pub->period_div;
   17e0c:	7adb      	ldrb	r3, [r3, #11]
   17e0e:	f003 030f 	and.w	r3, r3, #15
   17e12:	4118      	asrs	r0, r3
   17e14:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
   17e16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   17e1a:	4350      	muls	r0, r2
		break;
   17e1c:	e7f3      	b.n	17e06 <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
   17e1e:	f242 7210 	movw	r2, #10000	; 0x2710
   17e22:	e7fa      	b.n	17e1a <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   17e24:	4a01      	ldr	r2, [pc, #4]	; (17e2c <bt_mesh_model_pub_period_get+0x44>)
   17e26:	e7f8      	b.n	17e1a <bt_mesh_model_pub_period_get+0x32>
		return 0;
   17e28:	4618      	mov	r0, r3
}
   17e2a:	4770      	bx	lr
   17e2c:	000927c0 	.word	0x000927c0

00017e30 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
   17e30:	4b03      	ldr	r3, [pc, #12]	; (17e40 <bt_mesh_model_elem+0x10>)
   17e32:	7900      	ldrb	r0, [r0, #4]
   17e34:	681b      	ldr	r3, [r3, #0]
   17e36:	68db      	ldr	r3, [r3, #12]
}
   17e38:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   17e3c:	4770      	bx	lr
   17e3e:	bf00      	nop
   17e40:	2000276c 	.word	0x2000276c

00017e44 <mod_publish>:
{
   17e44:	b570      	push	{r4, r5, r6, lr}
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
   17e46:	f830 3c14 	ldrh.w	r3, [r0, #-20]
{
   17e4a:	b092      	sub	sp, #72	; 0x48
   17e4c:	4604      	mov	r4, r0
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
   17e4e:	2b00      	cmp	r3, #0
   17e50:	d07f      	beq.n	17f52 <mod_publish+0x10e>
   17e52:	f3bf 8f5b 	dmb	ish
   17e56:	4b40      	ldr	r3, [pc, #256]	; (17f58 <mod_publish+0x114>)
   17e58:	681b      	ldr	r3, [r3, #0]
   17e5a:	f3bf 8f5b 	dmb	ish
   17e5e:	079b      	lsls	r3, r3, #30
   17e60:	d477      	bmi.n	17f52 <mod_publish+0x10e>
	if (pub->count) {
   17e62:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		    bt_mesh_model_pub_is_retransmission(pub->mod)) {
   17e66:	f850 0c18 	ldr.w	r0, [r0, #-24]
	if (pub->count) {
   17e6a:	f013 06f0 	ands.w	r6, r3, #240	; 0xf0
   17e6e:	d016      	beq.n	17e9e <mod_publish+0x5a>
		pub->count--;
   17e70:	33f0      	adds	r3, #240	; 0xf0
   17e72:	f804 3c0d 	strb.w	r3, [r4, #-13]
		if (pub->retr_update && pub->update &&
   17e76:	f914 3c11 	ldrsb.w	r3, [r4, #-17]
   17e7a:	2b00      	cmp	r3, #0
   17e7c:	da2f      	bge.n	17ede <mod_publish+0x9a>
   17e7e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   17e82:	b362      	cbz	r2, 17ede <mod_publish+0x9a>
   17e84:	6883      	ldr	r3, [r0, #8]
 *
 * @return true if this is a retransmission, false if this is a first publication.
 */
static inline bool bt_mesh_model_pub_is_retransmission(const struct bt_mesh_model *model)
{
	return model->pub->count != BT_MESH_PUB_TRANSMIT_COUNT(model->pub->retransmit);
   17e86:	7ad9      	ldrb	r1, [r3, #11]
   17e88:	7a5b      	ldrb	r3, [r3, #9]
   17e8a:	f003 0307 	and.w	r3, r3, #7
   17e8e:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
   17e92:	d024      	beq.n	17ede <mod_publish+0x9a>
			err = pub->update(pub->mod);
   17e94:	4790      	blx	r2
			if (err) {
   17e96:	b310      	cbz	r0, 17ede <mod_publish+0x9a>
		publish_sent(err, pub->mod);
   17e98:	f854 1c18 	ldr.w	r1, [r4, #-24]
   17e9c:	e01a      	b.n	17ed4 <mod_publish+0x90>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   17e9e:	f814 2c0f 	ldrb.w	r2, [r4, #-15]
   17ea2:	f002 0207 	and.w	r2, r2, #7
   17ea6:	f362 1307 	bfi	r3, r2, #4, #4
   17eaa:	f804 3c0d 	strb.w	r3, [r4, #-13]
	if (!pub->update) {
   17eae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17eb2:	b1a3      	cbz	r3, 17ede <mod_publish+0x9a>
	err = pub->update(pub->mod);
   17eb4:	4798      	blx	r3
   17eb6:	4605      	mov	r5, r0
	pub->period_start = k_uptime_get_32();
   17eb8:	f00a ffbd 	bl	22e36 <k_uptime_get_32>
   17ebc:	f844 0c0c 	str.w	r0, [r4, #-12]
	if (err) {
   17ec0:	b16d      	cbz	r5, 17ede <mod_publish+0x9a>
		pub->count = 0;
   17ec2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
   17ec6:	f854 1c18 	ldr.w	r1, [r4, #-24]
		pub->count = 0;
   17eca:	f366 1307 	bfi	r3, r6, #4, #4
   17ece:	f804 3c0d 	strb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
   17ed2:	4628      	mov	r0, r5
}
   17ed4:	b012      	add	sp, #72	; 0x48
   17ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		publish_sent(err, pub->mod);
   17eda:	f00a bfd3 	b.w	22e84 <publish_sent>
	err = publish_transmit(pub->mod);
   17ede:	f854 5c18 	ldr.w	r5, [r4, #-24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   17ee2:	ab09      	add	r3, sp, #36	; 0x24
   17ee4:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
   17ee8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	struct bt_mesh_model_pub *pub = mod->pub;
   17eec:	68aa      	ldr	r2, [r5, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   17eee:	9300      	str	r3, [sp, #0]
		.app_idx = pub->key,
   17ef0:	88d0      	ldrh	r0, [r2, #6]
	struct bt_mesh_msg_ctx ctx = {
   17ef2:	2100      	movs	r1, #0
   17ef4:	e9cd 1103 	strd	r1, r1, [sp, #12]
		.app_idx = pub->key,
   17ef8:	f3c0 000b 	ubfx	r0, r0, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   17efc:	f8cd 1013 	str.w	r1, [sp, #19]
   17f00:	f8ad 000e 	strh.w	r0, [sp, #14]
   17f04:	8890      	ldrh	r0, [r2, #4]
   17f06:	f8ad 0010 	strh.w	r0, [sp, #16]
   17f0a:	7a10      	ldrb	r0, [r2, #8]
   17f0c:	f88d 0017 	strb.w	r0, [sp, #23]
   17f10:	ab03      	add	r3, sp, #12
		.src = bt_mesh_model_elem(mod)->addr,
   17f12:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
   17f14:	e9cd 3107 	strd	r3, r1, [sp, #28]
   17f18:	9106      	str	r1, [sp, #24]
		.src = bt_mesh_model_elem(mod)->addr,
   17f1a:	f7ff ff89 	bl	17e30 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   17f1e:	8803      	ldrh	r3, [r0, #0]
   17f20:	f8ad 3020 	strh.w	r3, [sp, #32]
		.friend_cred = pub->cred,
   17f24:	79d3      	ldrb	r3, [r2, #7]
	struct bt_mesh_net_tx tx = {
   17f26:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
		.friend_cred = pub->cred,
   17f2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
   17f2e:	f363 0100 	bfi	r1, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   17f32:	6913      	ldr	r3, [r2, #16]
	struct bt_mesh_net_tx tx = {
   17f34:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   17f38:	889a      	ldrh	r2, [r3, #4]
   17f3a:	6819      	ldr	r1, [r3, #0]
   17f3c:	4668      	mov	r0, sp
   17f3e:	f00c ff75 	bl	24e2c <net_buf_simple_add_mem>
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   17f42:	4a06      	ldr	r2, [pc, #24]	; (17f5c <mod_publish+0x118>)
   17f44:	462b      	mov	r3, r5
   17f46:	4669      	mov	r1, sp
   17f48:	a806      	add	r0, sp, #24
   17f4a:	f7fe ff83 	bl	16e54 <bt_mesh_trans_send>
	if (err) {
   17f4e:	2800      	cmp	r0, #0
   17f50:	d1a2      	bne.n	17e98 <mod_publish+0x54>
}
   17f52:	b012      	add	sp, #72	; 0x48
   17f54:	bd70      	pop	{r4, r5, r6, pc}
   17f56:	bf00      	nop
   17f58:	20001d48 	.word	0x20001d48
   17f5c:	000268f8 	.word	0x000268f8

00017f60 <bt_mesh_model_get>:
	if (elem_idx >= dev_comp->elem_count) {
   17f60:	4b0b      	ldr	r3, [pc, #44]	; (17f90 <bt_mesh_model_get+0x30>)
   17f62:	681b      	ldr	r3, [r3, #0]
{
   17f64:	b510      	push	{r4, lr}
	if (elem_idx >= dev_comp->elem_count) {
   17f66:	689c      	ldr	r4, [r3, #8]
   17f68:	42a1      	cmp	r1, r4
   17f6a:	d20f      	bcs.n	17f8c <bt_mesh_model_get+0x2c>
	elem = &dev_comp->elem[elem_idx];
   17f6c:	68db      	ldr	r3, [r3, #12]
   17f6e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
   17f72:	b130      	cbz	r0, 17f82 <bt_mesh_model_get+0x22>
		if (mod_idx >= elem->vnd_model_count) {
   17f74:	794b      	ldrb	r3, [r1, #5]
   17f76:	4293      	cmp	r3, r2
   17f78:	d908      	bls.n	17f8c <bt_mesh_model_get+0x2c>
		return &elem->vnd_models[mod_idx];
   17f7a:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
   17f7c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
}
   17f80:	bd10      	pop	{r4, pc}
		if (mod_idx >= elem->model_count) {
   17f82:	790b      	ldrb	r3, [r1, #4]
   17f84:	4293      	cmp	r3, r2
   17f86:	d9fb      	bls.n	17f80 <bt_mesh_model_get+0x20>
		return &elem->models[mod_idx];
   17f88:	6888      	ldr	r0, [r1, #8]
   17f8a:	e7f7      	b.n	17f7c <bt_mesh_model_get+0x1c>
		return NULL;
   17f8c:	2000      	movs	r0, #0
   17f8e:	e7f7      	b.n	17f80 <bt_mesh_model_get+0x20>
   17f90:	2000276c 	.word	0x2000276c

00017f94 <mod_set>:
{
   17f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f98:	b087      	sub	sp, #28
   17f9a:	4605      	mov	r5, r0
   17f9c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   17fa0:	4616      	mov	r6, r2
   17fa2:	461f      	mov	r7, r3
	if (!name) {
   17fa4:	460c      	mov	r4, r1
   17fa6:	b929      	cbnz	r1, 17fb4 <mod_set+0x20>
		return -ENOENT;
   17fa8:	f06f 0401 	mvn.w	r4, #1
}
   17fac:	4620      	mov	r0, r4
   17fae:	b007      	add	sp, #28
   17fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_key = strtol(name, NULL, 16);
   17fb4:	2210      	movs	r2, #16
   17fb6:	2100      	movs	r1, #0
   17fb8:	4620      	mov	r0, r4
   17fba:	f009 fc61 	bl	21880 <strtol>
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   17fbe:	b2c2      	uxtb	r2, r0
   17fc0:	f3c0 2107 	ubfx	r1, r0, #8, #8
   17fc4:	4628      	mov	r0, r5
   17fc6:	f7ff ffcb 	bl	17f60 <bt_mesh_model_get>
	if (!mod) {
   17fca:	4605      	mov	r5, r0
   17fcc:	2800      	cmp	r0, #0
   17fce:	d0eb      	beq.n	17fa8 <mod_set+0x14>
	len = settings_name_next(name, &next);
   17fd0:	a903      	add	r1, sp, #12
   17fd2:	4620      	mov	r0, r4
   17fd4:	f008 fa3a 	bl	2044c <settings_name_next>
   17fd8:	4680      	mov	r8, r0
	if (!next) {
   17fda:	9803      	ldr	r0, [sp, #12]
   17fdc:	2800      	cmp	r0, #0
   17fde:	d0e3      	beq.n	17fa8 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
   17fe0:	4946      	ldr	r1, [pc, #280]	; (180fc <mod_set+0x168>)
   17fe2:	4642      	mov	r2, r8
   17fe4:	f009 fce6 	bl	219b4 <strncmp>
   17fe8:	b968      	cbnz	r0, 18006 <mod_set+0x72>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   17fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17fee:	81ab      	strh	r3, [r5, #12]
	if (len_rd == 0) {
   17ff0:	b90e      	cbnz	r6, 17ff6 <mod_set+0x62>
		return 0;
   17ff2:	2400      	movs	r4, #0
   17ff4:	e7da      	b.n	17fac <mod_set+0x18>
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   17ff6:	2202      	movs	r2, #2
   17ff8:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   17ffc:	4648      	mov	r0, r9
   17ffe:	47b8      	blx	r7
	if (len < 0) {
   18000:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   18004:	e7d2      	b.n	17fac <mod_set+0x18>
	if (!strncmp(next, "sub", len)) {
   18006:	493e      	ldr	r1, [pc, #248]	; (18100 <mod_set+0x16c>)
   18008:	9803      	ldr	r0, [sp, #12]
   1800a:	4642      	mov	r2, r8
   1800c:	f009 fcd2 	bl	219b4 <strncmp>
   18010:	4601      	mov	r1, r0
   18012:	b948      	cbnz	r0, 18028 <mod_set+0x94>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   18014:	350e      	adds	r5, #14
   18016:	2204      	movs	r2, #4
   18018:	4628      	mov	r0, r5
   1801a:	f009 fcf8 	bl	21a0e <memset>
	if (len_rd == 0) {
   1801e:	2e00      	cmp	r6, #0
   18020:	d0e7      	beq.n	17ff2 <mod_set+0x5e>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   18022:	2204      	movs	r2, #4
   18024:	4629      	mov	r1, r5
   18026:	e7e9      	b.n	17ffc <mod_set+0x68>
	if (!strncmp(next, "pub", len)) {
   18028:	4936      	ldr	r1, [pc, #216]	; (18104 <mod_set+0x170>)
   1802a:	9803      	ldr	r0, [sp, #12]
   1802c:	4642      	mov	r2, r8
   1802e:	f009 fcc1 	bl	219b4 <strncmp>
   18032:	4604      	mov	r4, r0
   18034:	2800      	cmp	r0, #0
   18036:	d141      	bne.n	180bc <mod_set+0x128>
	if (!mod->pub) {
   18038:	68ab      	ldr	r3, [r5, #8]
   1803a:	2b00      	cmp	r3, #0
   1803c:	d03b      	beq.n	180b6 <mod_set+0x122>
	if (len_rd == 0) {
   1803e:	b946      	cbnz	r6, 18052 <mod_set+0xbe>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   18040:	685a      	ldr	r2, [r3, #4]
   18042:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   18046:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   18048:	689a      	ldr	r2, [r3, #8]
   1804a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
   1804e:	609a      	str	r2, [r3, #8]
		return 0;
   18050:	e7ac      	b.n	17fac <mod_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
   18052:	2308      	movs	r3, #8
   18054:	aa04      	add	r2, sp, #16
   18056:	4649      	mov	r1, r9
   18058:	4638      	mov	r0, r7
   1805a:	f00c fc49 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1805e:	4604      	mov	r4, r0
   18060:	2800      	cmp	r0, #0
   18062:	d1a3      	bne.n	17fac <mod_set+0x18>
	mod->pub->addr = pub.addr;
   18064:	68aa      	ldr	r2, [r5, #8]
   18066:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1806a:	8093      	strh	r3, [r2, #4]
	mod->pub->cred = pub.cred;
   1806c:	f89d 3017 	ldrb.w	r3, [sp, #23]
	mod->pub->key = pub.key;
   18070:	f3c3 1100 	ubfx	r1, r3, #4, #1
   18074:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   18078:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1807c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   18080:	88d1      	ldrh	r1, [r2, #6]
   18082:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
   18086:	f021 011f 	bic.w	r1, r1, #31
   1808a:	430b      	orrs	r3, r1
   1808c:	80d3      	strh	r3, [r2, #6]
	mod->pub->ttl = pub.ttl;
   1808e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   18092:	8113      	strh	r3, [r2, #8]
	mod->pub->period = pub.period;
   18094:	8953      	ldrh	r3, [r2, #10]
   18096:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1809a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1809e:	f023 030f 	bic.w	r3, r3, #15
   180a2:	f3c1 010b 	ubfx	r1, r1, #0, #12
   180a6:	430b      	orrs	r3, r1
   180a8:	8153      	strh	r3, [r2, #10]
	mod->pub->count = 0U;
   180aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
   180ae:	f360 1307 	bfi	r3, r0, #4, #4
   180b2:	72d3      	strb	r3, [r2, #11]
	return 0;
   180b4:	e77a      	b.n	17fac <mod_set+0x18>
		return -EINVAL;
   180b6:	f06f 0415 	mvn.w	r4, #21
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   180ba:	e777      	b.n	17fac <mod_set+0x18>
	if (!strncmp(next, "data", len)) {
   180bc:	4912      	ldr	r1, [pc, #72]	; (18108 <mod_set+0x174>)
   180be:	9803      	ldr	r0, [sp, #12]
   180c0:	4642      	mov	r2, r8
   180c2:	f009 fc77 	bl	219b4 <strncmp>
   180c6:	4604      	mov	r4, r0
   180c8:	2800      	cmp	r0, #0
   180ca:	f47f af6d 	bne.w	17fa8 <mod_set+0x14>
	settings_name_next(name, &next);
   180ce:	9803      	ldr	r0, [sp, #12]
   180d0:	a904      	add	r1, sp, #16
   180d2:	f008 f9bb 	bl	2044c <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   180d6:	69ab      	ldr	r3, [r5, #24]
   180d8:	2b00      	cmp	r3, #0
   180da:	f43f af67 	beq.w	17fac <mod_set+0x18>
   180de:	f8d3 8000 	ldr.w	r8, [r3]
   180e2:	f1b8 0f00 	cmp.w	r8, #0
   180e6:	f43f af61 	beq.w	17fac <mod_set+0x18>
		return mod->cb->settings_set(mod, next, len_rd,
   180ea:	9904      	ldr	r1, [sp, #16]
   180ec:	f8cd 9000 	str.w	r9, [sp]
   180f0:	463b      	mov	r3, r7
   180f2:	4632      	mov	r2, r6
   180f4:	4628      	mov	r0, r5
   180f6:	47c0      	blx	r8
   180f8:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   180fa:	e757      	b.n	17fac <mod_set+0x18>
   180fc:	00027750 	.word	0x00027750
   18100:	00027755 	.word	0x00027755
   18104:	00027759 	.word	0x00027759
   18108:	0002775d 	.word	0x0002775d

0001810c <bt_mesh_comp_register>:
{
   1810c:	b507      	push	{r0, r1, r2, lr}
	if (!comp || !comp->elem_count) {
   1810e:	b168      	cbz	r0, 1812c <bt_mesh_comp_register+0x20>
   18110:	6883      	ldr	r3, [r0, #8]
   18112:	b15b      	cbz	r3, 1812c <bt_mesh_comp_register+0x20>
	dev_comp = comp;
   18114:	4b07      	ldr	r3, [pc, #28]	; (18134 <bt_mesh_comp_register+0x28>)
	bt_mesh_model_foreach(mod_init, &err);
   18116:	a901      	add	r1, sp, #4
	dev_comp = comp;
   18118:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, &err);
   1811a:	4807      	ldr	r0, [pc, #28]	; (18138 <bt_mesh_comp_register+0x2c>)
	err = 0;
   1811c:	2300      	movs	r3, #0
   1811e:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
   18120:	f7ff fe28 	bl	17d74 <bt_mesh_model_foreach>
	return err;
   18124:	9801      	ldr	r0, [sp, #4]
}
   18126:	b003      	add	sp, #12
   18128:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1812c:	f06f 0015 	mvn.w	r0, #21
   18130:	e7f9      	b.n	18126 <bt_mesh_comp_register+0x1a>
   18132:	bf00      	nop
   18134:	2000276c 	.word	0x2000276c
   18138:	00017b8d 	.word	0x00017b8d

0001813c <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
   1813c:	4b08      	ldr	r3, [pc, #32]	; (18160 <bt_mesh_comp_provision+0x24>)
{
   1813e:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
   18140:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
   18142:	4b08      	ldr	r3, [pc, #32]	; (18164 <bt_mesh_comp_provision+0x28>)
   18144:	6819      	ldr	r1, [r3, #0]
   18146:	688c      	ldr	r4, [r1, #8]
   18148:	2300      	movs	r3, #0
   1814a:	18c2      	adds	r2, r0, r3
   1814c:	42a3      	cmp	r3, r4
   1814e:	b292      	uxth	r2, r2
   18150:	d100      	bne.n	18154 <bt_mesh_comp_provision+0x18>
}
   18152:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
   18154:	011d      	lsls	r5, r3, #4
   18156:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
   18158:	3301      	adds	r3, #1
		elem->addr = addr++;
   1815a:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
   1815c:	e7f5      	b.n	1814a <bt_mesh_comp_provision+0xe>
   1815e:	bf00      	nop
   18160:	20002b6c 	.word	0x20002b6c
   18164:	2000276c 	.word	0x2000276c

00018168 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
   18168:	4b01      	ldr	r3, [pc, #4]	; (18170 <bt_mesh_comp_unprovision+0x8>)
   1816a:	2200      	movs	r2, #0
   1816c:	801a      	strh	r2, [r3, #0]
}
   1816e:	4770      	bx	lr
   18170:	20002b6c 	.word	0x20002b6c

00018174 <bt_mesh_primary_addr>:
}
   18174:	4b01      	ldr	r3, [pc, #4]	; (1817c <bt_mesh_primary_addr+0x8>)
   18176:	8818      	ldrh	r0, [r3, #0]
   18178:	4770      	bx	lr
   1817a:	bf00      	nop
   1817c:	20002b6c 	.word	0x20002b6c

00018180 <bt_mesh_elem_find>:
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   18180:	b203      	sxth	r3, r0
   18182:	2b00      	cmp	r3, #0
   18184:	dd0b      	ble.n	1819e <bt_mesh_elem_find+0x1e>
	index = addr - dev_comp->elem[0].addr;
   18186:	4b07      	ldr	r3, [pc, #28]	; (181a4 <bt_mesh_elem_find+0x24>)
   18188:	681a      	ldr	r2, [r3, #0]
   1818a:	68d3      	ldr	r3, [r2, #12]
	if (index >= dev_comp->elem_count) {
   1818c:	6892      	ldr	r2, [r2, #8]
	index = addr - dev_comp->elem[0].addr;
   1818e:	8819      	ldrh	r1, [r3, #0]
   18190:	1a40      	subs	r0, r0, r1
	if (index >= dev_comp->elem_count) {
   18192:	b280      	uxth	r0, r0
   18194:	4290      	cmp	r0, r2
   18196:	d202      	bcs.n	1819e <bt_mesh_elem_find+0x1e>
	return &dev_comp->elem[index];
   18198:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1819c:	4770      	bx	lr
		return NULL;
   1819e:	2000      	movs	r0, #0
}
   181a0:	4770      	bx	lr
   181a2:	bf00      	nop
   181a4:	2000276c 	.word	0x2000276c

000181a8 <bt_mesh_has_addr>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   181a8:	b202      	sxth	r2, r0
   181aa:	2a00      	cmp	r2, #0
{
   181ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181ae:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   181b0:	dc08      	bgt.n	181c4 <bt_mesh_has_addr+0x1c>
	for (index = 0; index < dev_comp->elem_count; index++) {
   181b2:	4a1b      	ldr	r2, [pc, #108]	; (18220 <bt_mesh_has_addr+0x78>)
   181b4:	6815      	ldr	r5, [r2, #0]
   181b6:	68ae      	ldr	r6, [r5, #8]
   181b8:	2400      	movs	r4, #0
   181ba:	b2a2      	uxth	r2, r4
   181bc:	4296      	cmp	r6, r2
   181be:	d807      	bhi.n	181d0 <bt_mesh_has_addr+0x28>
	return false;
   181c0:	2000      	movs	r0, #0
   181c2:	e004      	b.n	181ce <bt_mesh_has_addr+0x26>
		return bt_mesh_elem_find(addr) != NULL;
   181c4:	f7ff ffdc 	bl	18180 <bt_mesh_elem_find>
   181c8:	3800      	subs	r0, #0
   181ca:	bf18      	it	ne
   181cc:	2001      	movne	r0, #1
}
   181ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
   181d0:	68e9      	ldr	r1, [r5, #12]
   181d2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
   181d6:	2100      	movs	r1, #0
   181d8:	7917      	ldrb	r7, [r2, #4]
   181da:	42b9      	cmp	r1, r7
   181dc:	db05      	blt.n	181ea <bt_mesh_has_addr+0x42>
	for (i = 0; i < elem->vnd_model_count; i++) {
   181de:	7957      	ldrb	r7, [r2, #5]
   181e0:	2100      	movs	r1, #0
   181e2:	42b9      	cmp	r1, r7
   181e4:	db0d      	blt.n	18202 <bt_mesh_has_addr+0x5a>
	for (index = 0; index < dev_comp->elem_count; index++) {
   181e6:	3401      	adds	r4, #1
   181e8:	e7e7      	b.n	181ba <bt_mesh_has_addr+0x12>
		model = &elem->models[i];
   181ea:	6890      	ldr	r0, [r2, #8]
   181ec:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		if (mod->groups[i] == addr) {
   181f0:	f8b0 c00e 	ldrh.w	ip, [r0, #14]
   181f4:	459c      	cmp	ip, r3
   181f6:	d010      	beq.n	1821a <bt_mesh_has_addr+0x72>
   181f8:	8a00      	ldrh	r0, [r0, #16]
   181fa:	4298      	cmp	r0, r3
   181fc:	d00d      	beq.n	1821a <bt_mesh_has_addr+0x72>
	for (i = 0; i < elem->model_count; i++) {
   181fe:	3101      	adds	r1, #1
   18200:	e7eb      	b.n	181da <bt_mesh_has_addr+0x32>
		model = &elem->vnd_models[i];
   18202:	68d0      	ldr	r0, [r2, #12]
   18204:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		if (mod->groups[i] == addr) {
   18208:	f8b0 c00e 	ldrh.w	ip, [r0, #14]
   1820c:	459c      	cmp	ip, r3
   1820e:	d004      	beq.n	1821a <bt_mesh_has_addr+0x72>
   18210:	8a00      	ldrh	r0, [r0, #16]
   18212:	4298      	cmp	r0, r3
   18214:	d001      	beq.n	1821a <bt_mesh_has_addr+0x72>
	for (i = 0; i < elem->vnd_model_count; i++) {
   18216:	3101      	adds	r1, #1
   18218:	e7e3      	b.n	181e2 <bt_mesh_has_addr+0x3a>
			return true;
   1821a:	2001      	movs	r0, #1
   1821c:	e7d7      	b.n	181ce <bt_mesh_has_addr+0x26>
   1821e:	bf00      	nop
   18220:	2000276c 	.word	0x2000276c

00018224 <bt_mesh_comp_get>:
}
   18224:	4b01      	ldr	r3, [pc, #4]	; (1822c <bt_mesh_comp_get+0x8>)
   18226:	6818      	ldr	r0, [r3, #0]
   18228:	4770      	bx	lr
   1822a:	bf00      	nop
   1822c:	2000276c 	.word	0x2000276c

00018230 <bt_mesh_model_find_group>:
{
   18230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18232:	4604      	mov	r4, r0
	struct find_group_visitor_ctx ctx = {
   18234:	2300      	movs	r3, #0
		.mod = *mod,
   18236:	6800      	ldr	r0, [r0, #0]
	struct find_group_visitor_ctx ctx = {
   18238:	f8ad 100c 	strh.w	r1, [sp, #12]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
   1823c:	aa01      	add	r2, sp, #4
   1823e:	4905      	ldr	r1, [pc, #20]	; (18254 <bt_mesh_model_find_group+0x24>)
	struct find_group_visitor_ctx ctx = {
   18240:	9301      	str	r3, [sp, #4]
   18242:	9002      	str	r0, [sp, #8]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
   18244:	f00a ff06 	bl	23054 <bt_mesh_model_extensions_walk>
	*mod = ctx.mod;
   18248:	9b02      	ldr	r3, [sp, #8]
}
   1824a:	9801      	ldr	r0, [sp, #4]
	*mod = ctx.mod;
   1824c:	6023      	str	r3, [r4, #0]
}
   1824e:	b004      	add	sp, #16
   18250:	bd10      	pop	{r4, pc}
   18252:	bf00      	nop
   18254:	00022e51 	.word	0x00022e51

00018258 <bt_mesh_model_recv>:
{
   18258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
   1825c:	680b      	ldr	r3, [r1, #0]
   1825e:	781b      	ldrb	r3, [r3, #0]
{
   18260:	4689      	mov	r9, r1
	switch (buf->data[0] >> 6) {
   18262:	0999      	lsrs	r1, r3, #6
   18264:	2902      	cmp	r1, #2
{
   18266:	b085      	sub	sp, #20
   18268:	4606      	mov	r6, r0
	switch (buf->data[0] >> 6) {
   1826a:	d013      	beq.n	18294 <bt_mesh_model_recv+0x3c>
   1826c:	2903      	cmp	r1, #3
   1826e:	d019      	beq.n	182a4 <bt_mesh_model_recv+0x4c>
		if (buf->data[0] == 0x7f) {
   18270:	2b7f      	cmp	r3, #127	; 0x7f
   18272:	d00c      	beq.n	1828e <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf);
   18274:	4648      	mov	r0, r9
   18276:	f00c fe4b 	bl	24f10 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
   1827a:	4605      	mov	r5, r0
		return 0;
   1827c:	b2ab      	uxth	r3, r5
	for (i = 0; i < dev_comp->elem_count; i++) {
   1827e:	f04f 0800 	mov.w	r8, #0
   18282:	9301      	str	r3, [sp, #4]
   18284:	4b49      	ldr	r3, [pc, #292]	; (183ac <bt_mesh_model_recv+0x154>)
   18286:	681b      	ldr	r3, [r3, #0]
   18288:	6899      	ldr	r1, [r3, #8]
   1828a:	4541      	cmp	r1, r8
   1828c:	d818      	bhi.n	182c0 <bt_mesh_model_recv+0x68>
}
   1828e:	b005      	add	sp, #20
   18290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
   18294:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18298:	2b01      	cmp	r3, #1
   1829a:	d9f8      	bls.n	1828e <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_be16(buf);
   1829c:	4648      	mov	r0, r9
   1829e:	f00c fe47 	bl	24f30 <net_buf_simple_pull_be16>
   182a2:	e7ea      	b.n	1827a <bt_mesh_model_recv+0x22>
		if (buf->len < 3) {
   182a4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   182a8:	2b02      	cmp	r3, #2
   182aa:	d9f0      	bls.n	1828e <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
   182ac:	4648      	mov	r0, r9
   182ae:	f00c fe2f 	bl	24f10 <net_buf_simple_pull_u8>
   182b2:	4605      	mov	r5, r0
		*opcode |= net_buf_simple_pull_le16(buf);
   182b4:	4648      	mov	r0, r9
   182b6:	f00c fe33 	bl	24f20 <net_buf_simple_pull_le16>
   182ba:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
		return 0;
   182be:	e7dd      	b.n	1827c <bt_mesh_model_recv+0x24>
		op = find_op(&dev_comp->elem[i], opcode, &model);
   182c0:	68df      	ldr	r7, [r3, #12]
   182c2:	eb07 1308 	add.w	r3, r7, r8, lsl #4
		models = elem->vnd_models;
   182c6:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
	if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
   182ca:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		count = elem->model_count;
   182ce:	bf33      	iteet	cc
   182d0:	791b      	ldrbcc	r3, [r3, #4]
		count = elem->vnd_model_count;
   182d2:	795b      	ldrbcs	r3, [r3, #5]
   182d4:	f8dd c004 	ldrcs.w	ip, [sp, #4]
		models = elem->models;
   182d8:	460c      	movcc	r4, r1
	uint32_t cid = UINT32_MAX;
   182da:	bf38      	it	cc
   182dc:	f04f 3cff 	movcc.w	ip, #4294967295
	for (i = 0U; i < count; i++) {
   182e0:	eb04 1143 	add.w	r1, r4, r3, lsl #5
   182e4:	42a1      	cmp	r1, r4
   182e6:	d102      	bne.n	182ee <bt_mesh_model_recv+0x96>
	for (i = 0; i < dev_comp->elem_count; i++) {
   182e8:	f108 0801 	add.w	r8, r8, #1
   182ec:	e7ca      	b.n	18284 <bt_mesh_model_recv+0x2c>
		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE) &&
   182ee:	f1bc 3fff 	cmp.w	ip, #4294967295
   182f2:	d002      	beq.n	182fa <bt_mesh_model_recv+0xa2>
		     cid != models[i].vnd.company) {
   182f4:	8823      	ldrh	r3, [r4, #0]
		     cid != UINT32_MAX &&
   182f6:	459c      	cmp	ip, r3
   182f8:	d104      	bne.n	18304 <bt_mesh_model_recv+0xac>
		for (op = (*model)->op; op->func; op++) {
   182fa:	f8d4 a014 	ldr.w	sl, [r4, #20]
   182fe:	f8da 0008 	ldr.w	r0, [sl, #8]
   18302:	b908      	cbnz	r0, 18308 <bt_mesh_model_recv+0xb0>
	for (i = 0U; i < count; i++) {
   18304:	3420      	adds	r4, #32
   18306:	e7ed      	b.n	182e4 <bt_mesh_model_recv+0x8c>
			if (op->opcode == opcode) {
   18308:	f8da 0000 	ldr.w	r0, [sl]
   1830c:	4285      	cmp	r5, r0
   1830e:	d01c      	beq.n	1834a <bt_mesh_model_recv+0xf2>
		for (op = (*model)->op; op->func; op++) {
   18310:	f10a 0a0c 	add.w	sl, sl, #12
   18314:	e7f3      	b.n	182fe <bt_mesh_model_recv+0xa6>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst) ||
   18316:	f481 4000 	eor.w	r0, r1, #32768	; 0x8000
   1831a:	f5b0 4ffe 	cmp.w	r0, #32512	; 0x7f00
   1831e:	d306      	bcc.n	1832e <bt_mesh_model_recv+0xd6>
		  (BT_MESH_ADDR_IS_FIXED_GROUP(dst) &&  mod->elem_idx != 0)) {
   18320:	f501 7780 	add.w	r7, r1, #256	; 0x100
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst) ||
   18324:	b2bf      	uxth	r7, r7
   18326:	2ffe      	cmp	r7, #254	; 0xfe
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   18328:	7920      	ldrb	r0, [r4, #4]
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst) ||
   1832a:	d807      	bhi.n	1833c <bt_mesh_model_recv+0xe4>
		  (BT_MESH_ADDR_IS_FIXED_GROUP(dst) &&  mod->elem_idx != 0)) {
   1832c:	b130      	cbz	r0, 1833c <bt_mesh_model_recv+0xe4>
		return !!bt_mesh_model_find_group(&mod, dst);
   1832e:	a803      	add	r0, sp, #12
   18330:	f7ff ff7e 	bl	18230 <bt_mesh_model_find_group>
   18334:	3800      	subs	r0, #0
   18336:	bf18      	it	ne
   18338:	2001      	movne	r0, #1
   1833a:	e018      	b.n	1836e <bt_mesh_model_recv+0x116>
	return mod->elem_idx == 0;
   1833c:	fab0 f080 	clz	r0, r0
   18340:	0940      	lsrs	r0, r0, #5
   18342:	e014      	b.n	1836e <bt_mesh_model_recv+0x116>
		} else if ((op->len < 0) && (buf->len != (size_t)(-op->len))) {
   18344:	42c8      	cmn	r0, r1
   18346:	d01c      	beq.n	18382 <bt_mesh_model_recv+0x12a>
   18348:	e7ce      	b.n	182e8 <bt_mesh_model_recv+0x90>
		if (!bt_mesh_model_has_key(model, rx->ctx.app_idx)) {
   1834a:	88f1      	ldrh	r1, [r6, #6]
   1834c:	4620      	mov	r0, r4
   1834e:	f00a fe2e 	bl	22fae <bt_mesh_model_has_key>
   18352:	2800      	cmp	r0, #0
   18354:	d0c8      	beq.n	182e8 <bt_mesh_model_recv+0x90>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   18356:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   1835a:	8971      	ldrh	r1, [r6, #10]
   1835c:	9403      	str	r4, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   1835e:	2800      	cmp	r0, #0
   18360:	ddd9      	ble.n	18316 <bt_mesh_model_recv+0xbe>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   18362:	7920      	ldrb	r0, [r4, #4]
   18364:	0100      	lsls	r0, r0, #4
   18366:	5a38      	ldrh	r0, [r7, r0]
   18368:	1a43      	subs	r3, r0, r1
   1836a:	4258      	negs	r0, r3
   1836c:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   1836e:	2800      	cmp	r0, #0
   18370:	d0ba      	beq.n	182e8 <bt_mesh_model_recv+0x90>
		if ((op->len >= 0) && (buf->len < (size_t)op->len)) {
   18372:	f8da 1004 	ldr.w	r1, [sl, #4]
   18376:	f8b9 0004 	ldrh.w	r0, [r9, #4]
   1837a:	2900      	cmp	r1, #0
   1837c:	dbe2      	blt.n	18344 <bt_mesh_model_recv+0xec>
   1837e:	4281      	cmp	r1, r0
   18380:	d8b2      	bhi.n	182e8 <bt_mesh_model_recv+0x90>
	state->offset = net_buf_simple_headroom(buf);
   18382:	4648      	mov	r0, r9
   18384:	f00c fdf5 	bl	24f72 <net_buf_simple_headroom>
		(void)op->func(model, &rx->ctx, buf);
   18388:	f8da 3008 	ldr.w	r3, [sl, #8]
	state->len = buf->len;
   1838c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
	state->offset = net_buf_simple_headroom(buf);
   18390:	4607      	mov	r7, r0
   18392:	464a      	mov	r2, r9
   18394:	1d31      	adds	r1, r6, #4
   18396:	4620      	mov	r0, r4
   18398:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1839a:	f8d9 0008 	ldr.w	r0, [r9, #8]
	buf->len = state->len;
   1839e:	f8a9 b004 	strh.w	fp, [r9, #4]
	buf->data = buf->__buf + state->offset;
   183a2:	fa10 f787 	uxtah	r7, r0, r7
   183a6:	f8c9 7000 	str.w	r7, [r9]
	buf->len = state->len;
   183aa:	e79d      	b.n	182e8 <bt_mesh_model_recv+0x90>
   183ac:	2000276c 	.word	0x2000276c

000183b0 <bt_mesh_model_pending_store>:

void bt_mesh_model_pending_store(void)
{
	bt_mesh_model_foreach(store_pending_mod, NULL);
   183b0:	4801      	ldr	r0, [pc, #4]	; (183b8 <bt_mesh_model_pending_store+0x8>)
   183b2:	2100      	movs	r1, #0
   183b4:	f7ff bcde 	b.w	17d74 <bt_mesh_model_foreach>
   183b8:	00017c41 	.word	0x00017c41

000183bc <bt_mesh_model_settings_commit>:
	}
}

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
   183bc:	4801      	ldr	r0, [pc, #4]	; (183c4 <bt_mesh_model_settings_commit+0x8>)
   183be:	2100      	movs	r1, #0
   183c0:	f7ff bcd8 	b.w	17d74 <bt_mesh_model_foreach>
   183c4:	00022f13 	.word	0x00022f13

000183c8 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
   183c8:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   183ca:	2a01      	cmp	r2, #1
{
   183cc:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
   183d0:	d104      	bne.n	183dc <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
   183d2:	4804      	ldr	r0, [pc, #16]	; (183e4 <app_key_evt+0x1c>)
   183d4:	f10d 0106 	add.w	r1, sp, #6
   183d8:	f7ff fccc 	bl	17d74 <bt_mesh_model_foreach>
	}
}
   183dc:	b003      	add	sp, #12
   183de:	f85d fb04 	ldr.w	pc, [sp], #4
   183e2:	bf00      	nop
   183e4:	000242ff 	.word	0x000242ff

000183e8 <node_reset>:
	k_work_submit(&node_reset_pending);
}

static int node_reset(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		      struct net_buf_simple *buf)
{
   183e8:	b570      	push	{r4, r5, r6, lr}
   183ea:	b088      	sub	sp, #32
	static const struct bt_mesh_send_cb reset_cb = {
		.start = reset_send_start,
		.end = reset_send_end,
	};

	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   183ec:	ab03      	add	r3, sp, #12
{
   183ee:	4604      	mov	r4, r0
   183f0:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   183f2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   183f6:	a805      	add	r0, sp, #20

	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
   183f8:	2600      	movs	r6, #0
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   183fa:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   183fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18402:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   18404:	f00a fe3e 	bl	23084 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
   18408:	4b04      	ldr	r3, [pc, #16]	; (1841c <node_reset+0x34>)
   1840a:	9600      	str	r6, [sp, #0]
   1840c:	aa05      	add	r2, sp, #20
   1840e:	4629      	mov	r1, r5
   18410:	4620      	mov	r0, r4
   18412:	f00a fdde 	bl	22fd2 <bt_mesh_model_send>
		BT_ERR("Unable to send Node Reset Status");
	}

	return 0;
}
   18416:	4630      	mov	r0, r6
   18418:	b008      	add	sp, #32
   1841a:	bd70      	pop	{r4, r5, r6, pc}
   1841c:	00026b50 	.word	0x00026b50

00018420 <reset_send_end>:
	k_work_submit(&node_reset_pending);
   18420:	4801      	ldr	r0, [pc, #4]	; (18428 <reset_send_end+0x8>)
   18422:	f006 bb61 	b.w	1eae8 <k_work_submit>
   18426:	bf00      	nop
   18428:	20000648 	.word	0x20000648

0001842c <reset_send_start>:
	if (err) {
   1842c:	b111      	cbz	r1, 18434 <reset_send_start+0x8>
		k_work_submit(&node_reset_pending);
   1842e:	4802      	ldr	r0, [pc, #8]	; (18438 <reset_send_start+0xc>)
   18430:	f006 bb5a 	b.w	1eae8 <k_work_submit>
}
   18434:	4770      	bx	lr
   18436:	bf00      	nop
   18438:	20000648 	.word	0x20000648

0001843c <mod_sub_get_vnd>:
{
   1843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18440:	4614      	mov	r4, r2
   18442:	b090      	sub	sp, #64	; 0x40
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   18444:	ab07      	add	r3, sp, #28
   18446:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
   1844a:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
   1844c:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1844e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   18452:	9304      	str	r3, [sp, #16]
{
   18454:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
   18456:	f00c fd63 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1845a:	b203      	sxth	r3, r0
   1845c:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1845e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   18460:	dd50      	ble.n	18504 <mod_sub_get_vnd+0xc8>
	company = net_buf_simple_pull_le16(buf);
   18462:	4620      	mov	r0, r4
   18464:	f00c fd5c 	bl	24f20 <net_buf_simple_pull_le16>
   18468:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
   1846a:	4620      	mov	r0, r4
   1846c:	f00c fd58 	bl	24f20 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   18470:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
   18472:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   18474:	f248 012c 	movw	r1, #32812	; 0x802c
   18478:	4620      	mov	r0, r4
   1847a:	f00a fe03 	bl	23084 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1847e:	4628      	mov	r0, r5
   18480:	f7ff fe7e 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   18484:	b9d8      	cbnz	r0, 184be <mod_sub_get_vnd+0x82>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   18486:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   18488:	4620      	mov	r0, r4
   1848a:	f00c fcd8 	bl	24e3e <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1848e:	4629      	mov	r1, r5
   18490:	4620      	mov	r0, r4
   18492:	f00c fcdc 	bl	24e4e <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   18496:	4639      	mov	r1, r7
   18498:	4620      	mov	r0, r4
   1849a:	f00c fcd8 	bl	24e4e <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1849e:	4631      	mov	r1, r6
   184a0:	4620      	mov	r0, r4
   184a2:	f00c fcd4 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   184a6:	2500      	movs	r5, #0
   184a8:	9500      	str	r5, [sp, #0]
   184aa:	462b      	mov	r3, r5
   184ac:	4622      	mov	r2, r4
   184ae:	4651      	mov	r1, sl
   184b0:	4648      	mov	r0, r9
   184b2:	f00a fd8e 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   184b6:	4628      	mov	r0, r5
}
   184b8:	b010      	add	sp, #64	; 0x40
   184ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = bt_mesh_model_find_vnd(elem, company, id);
   184be:	4632      	mov	r2, r6
   184c0:	4639      	mov	r1, r7
   184c2:	f00a fd9f 	bl	23004 <bt_mesh_model_find_vnd>
	if (!mod) {
   184c6:	4680      	mov	r8, r0
   184c8:	b908      	cbnz	r0, 184ce <mod_sub_get_vnd+0x92>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   184ca:	2102      	movs	r1, #2
   184cc:	e7dc      	b.n	18488 <mod_sub_get_vnd+0x4c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   184ce:	2100      	movs	r1, #0
   184d0:	4620      	mov	r0, r4
   184d2:	f00c fcb4 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   184d6:	4629      	mov	r1, r5
   184d8:	4620      	mov	r0, r4
   184da:	f00c fcb8 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   184de:	4639      	mov	r1, r7
   184e0:	4620      	mov	r0, r4
   184e2:	f00c fcb4 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   184e6:	4631      	mov	r1, r6
   184e8:	4620      	mov	r0, r4
   184ea:	f00c fcb0 	bl	24e4e <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   184ee:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
   184f0:	f898 3004 	ldrb.w	r3, [r8, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   184f4:	4905      	ldr	r1, [pc, #20]	; (1850c <mod_sub_get_vnd+0xd0>)
	visit_ctx.elem_idx = mod->elem_idx;
   184f6:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   184fa:	aa02      	add	r2, sp, #8
   184fc:	4640      	mov	r0, r8
   184fe:	f00a fda9 	bl	23054 <bt_mesh_model_extensions_walk>
   18502:	e7d0      	b.n	184a6 <mod_sub_get_vnd+0x6a>
		return -EINVAL;
   18504:	f06f 0015 	mvn.w	r0, #21
   18508:	e7d6      	b.n	184b8 <mod_sub_get_vnd+0x7c>
   1850a:	bf00      	nop
   1850c:	00023fdf 	.word	0x00023fdf

00018510 <mod_sub_get>:
{
   18510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18514:	4614      	mov	r4, r2
   18516:	b091      	sub	sp, #68	; 0x44
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   18518:	ab07      	add	r3, sp, #28
   1851a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
{
   1851e:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   18520:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   18522:	e9cd 2305 	strd	r2, r3, [sp, #20]
   18526:	9304      	str	r3, [sp, #16]
{
   18528:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   1852a:	f00c fcf9 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1852e:	b203      	sxth	r3, r0
   18530:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   18532:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   18534:	dd42      	ble.n	185bc <mod_sub_get+0xac>
	id = net_buf_simple_pull_le16(buf);
   18536:	4620      	mov	r0, r4
   18538:	f00c fcf2 	bl	24f20 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   1853c:	ac04      	add	r4, sp, #16
	id = net_buf_simple_pull_le16(buf);
   1853e:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   18540:	f248 012a 	movw	r1, #32810	; 0x802a
   18544:	4620      	mov	r0, r4
   18546:	f00a fd9d 	bl	23084 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1854a:	4628      	mov	r0, r5
   1854c:	f7ff fe18 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   18550:	b9b8      	cbnz	r0, 18582 <mod_sub_get+0x72>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   18552:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   18554:	4620      	mov	r0, r4
   18556:	f00c fc72 	bl	24e3e <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1855a:	4629      	mov	r1, r5
   1855c:	4620      	mov	r0, r4
   1855e:	f00c fc76 	bl	24e4e <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   18562:	4631      	mov	r1, r6
   18564:	4620      	mov	r0, r4
   18566:	f00c fc72 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1856a:	2500      	movs	r5, #0
   1856c:	9500      	str	r5, [sp, #0]
   1856e:	462b      	mov	r3, r5
   18570:	4622      	mov	r2, r4
   18572:	4649      	mov	r1, r9
   18574:	4640      	mov	r0, r8
   18576:	f00a fd2c 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   1857a:	4628      	mov	r0, r5
}
   1857c:	b011      	add	sp, #68	; 0x44
   1857e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = bt_mesh_model_find(elem, id);
   18582:	4631      	mov	r1, r6
   18584:	f00a fd53 	bl	2302e <bt_mesh_model_find>
	if (!mod) {
   18588:	4607      	mov	r7, r0
   1858a:	b908      	cbnz	r0, 18590 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1858c:	2102      	movs	r1, #2
   1858e:	e7e1      	b.n	18554 <mod_sub_get+0x44>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   18590:	2100      	movs	r1, #0
   18592:	4620      	mov	r0, r4
   18594:	f00c fc53 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   18598:	4629      	mov	r1, r5
   1859a:	4620      	mov	r0, r4
   1859c:	f00c fc57 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   185a0:	4631      	mov	r1, r6
   185a2:	4620      	mov	r0, r4
   185a4:	f00c fc53 	bl	24e4e <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   185a8:	9403      	str	r4, [sp, #12]
	visit_ctx.elem_idx = mod->elem_idx;
   185aa:	793b      	ldrb	r3, [r7, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   185ac:	4905      	ldr	r1, [pc, #20]	; (185c4 <mod_sub_get+0xb4>)
	visit_ctx.elem_idx = mod->elem_idx;
   185ae:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   185b2:	aa02      	add	r2, sp, #8
   185b4:	4638      	mov	r0, r7
   185b6:	f00a fd4d 	bl	23054 <bt_mesh_model_extensions_walk>
   185ba:	e7d6      	b.n	1856a <mod_sub_get+0x5a>
		return -EINVAL;
   185bc:	f06f 0015 	mvn.w	r0, #21
   185c0:	e7dc      	b.n	1857c <mod_sub_get+0x6c>
   185c2:	bf00      	nop
   185c4:	00023fdf 	.word	0x00023fdf

000185c8 <mod_sub_del_all>:
{
   185c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   185cc:	8893      	ldrh	r3, [r2, #4]
   185ce:	f023 0302 	bic.w	r3, r3, #2
   185d2:	b29b      	uxth	r3, r3
   185d4:	2b04      	cmp	r3, #4
{
   185d6:	b086      	sub	sp, #24
   185d8:	4606      	mov	r6, r0
   185da:	460f      	mov	r7, r1
   185dc:	4614      	mov	r4, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
   185de:	d132      	bne.n	18646 <mod_sub_del_all+0x7e>
	elem_addr = net_buf_simple_pull_le16(buf);
   185e0:	4610      	mov	r0, r2
   185e2:	f00c fc9d 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   185e6:	b203      	sxth	r3, r0
   185e8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   185ea:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   185ec:	dd2e      	ble.n	1864c <mod_sub_del_all+0x84>
	mod_id = buf->data;
   185ee:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   185f2:	f7ff fdc5 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   185f6:	b9a0      	cbnz	r0, 18622 <mod_sub_del_all+0x5a>
		vnd = (buf->len == 4U);
   185f8:	88a3      	ldrh	r3, [r4, #4]
   185fa:	1f1a      	subs	r2, r3, #4
   185fc:	4253      	negs	r3, r2
   185fe:	4153      	adcs	r3, r2
   18600:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   18604:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr,
   18606:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1860a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1860e:	2300      	movs	r3, #0
   18610:	9300      	str	r3, [sp, #0]
   18612:	4639      	mov	r1, r7
   18614:	462b      	mov	r3, r5
   18616:	4630      	mov	r0, r6
   18618:	f00a fee4 	bl	233e4 <send_mod_sub_status>
}
   1861c:	b006      	add	sp, #24
   1861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
   18622:	4621      	mov	r1, r4
   18624:	f10d 0217 	add.w	r2, sp, #23
   18628:	f00b fa8d 	bl	23b46 <get_model>
	if (!mod) {
   1862c:	4604      	mov	r4, r0
   1862e:	b140      	cbz	r0, 18642 <mod_sub_del_all+0x7a>
	bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   18630:	2200      	movs	r2, #0
   18632:	4908      	ldr	r1, [pc, #32]	; (18654 <mod_sub_del_all+0x8c>)
   18634:	f00a fd0e 	bl	23054 <bt_mesh_model_extensions_walk>
		bt_mesh_model_sub_store(mod);
   18638:	4620      	mov	r0, r4
   1863a:	f00a fd15 	bl	23068 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   1863e:	2200      	movs	r2, #0
   18640:	e7e1      	b.n	18606 <mod_sub_del_all+0x3e>
		status = STATUS_INVALID_MODEL;
   18642:	2202      	movs	r2, #2
   18644:	e7df      	b.n	18606 <mod_sub_del_all+0x3e>
		return -EMSGSIZE;
   18646:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1864a:	e7e7      	b.n	1861c <mod_sub_del_all+0x54>
		return -EINVAL;
   1864c:	f06f 0015 	mvn.w	r0, #21
   18650:	e7e4      	b.n	1861c <mod_sub_del_all+0x54>
   18652:	bf00      	nop
   18654:	00023627 	.word	0x00023627

00018658 <mod_sub_overwrite>:
{
   18658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1865c:	8893      	ldrh	r3, [r2, #4]
   1865e:	2b06      	cmp	r3, #6
{
   18660:	b087      	sub	sp, #28
   18662:	4607      	mov	r7, r0
   18664:	4688      	mov	r8, r1
   18666:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   18668:	d001      	beq.n	1866e <mod_sub_overwrite+0x16>
   1866a:	2b08      	cmp	r3, #8
   1866c:	d13e      	bne.n	186ec <mod_sub_overwrite+0x94>
	elem_addr = net_buf_simple_pull_le16(buf);
   1866e:	4620      	mov	r0, r4
   18670:	f00c fc56 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   18674:	b203      	sxth	r3, r0
   18676:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   18678:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1867a:	dd3a      	ble.n	186f2 <mod_sub_overwrite+0x9a>
	sub_addr = net_buf_simple_pull_le16(buf);
   1867c:	4620      	mov	r0, r4
   1867e:	f00c fc4f 	bl	24f20 <net_buf_simple_pull_le16>
   18682:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   18684:	4628      	mov	r0, r5
	mod_id = buf->data;
   18686:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1868a:	f7ff fd79 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   1868e:	b938      	cbnz	r0, 186a0 <mod_sub_overwrite+0x48>
		vnd = (buf->len == 4U);
   18690:	88a3      	ldrh	r3, [r4, #4]
   18692:	1f1a      	subs	r2, r3, #4
   18694:	4253      	negs	r3, r2
   18696:	4153      	adcs	r3, r2
   18698:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1869c:	2201      	movs	r2, #1
   1869e:	e016      	b.n	186ce <mod_sub_overwrite+0x76>
	mod = get_model(elem, buf, &vnd);
   186a0:	4621      	mov	r1, r4
   186a2:	f10d 0217 	add.w	r2, sp, #23
   186a6:	f00b fa4e 	bl	23b46 <get_model>
   186aa:	4604      	mov	r4, r0
	if (!mod) {
   186ac:	b1e0      	cbz	r0, 186e8 <mod_sub_overwrite+0x90>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr) && !BT_MESH_ADDR_IS_FIXED_GROUP(sub_addr)) {
   186ae:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   186b2:	b29b      	uxth	r3, r3
   186b4:	f643 72fe 	movw	r2, #16382	; 0x3ffe
   186b8:	4293      	cmp	r3, r2
   186ba:	d8ef      	bhi.n	1869c <mod_sub_overwrite+0x44>
		bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   186bc:	2200      	movs	r2, #0
   186be:	490e      	ldr	r1, [pc, #56]	; (186f8 <mod_sub_overwrite+0xa0>)
   186c0:	f00a fcc8 	bl	23054 <bt_mesh_model_extensions_walk>
		mod->groups[0] = sub_addr;
   186c4:	81e6      	strh	r6, [r4, #14]
			bt_mesh_model_sub_store(mod);
   186c6:	4620      	mov	r0, r4
   186c8:	f00a fcce 	bl	23068 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   186cc:	2200      	movs	r2, #0
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   186ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   186d2:	9600      	str	r6, [sp, #0]
   186d4:	e9cd 9301 	strd	r9, r3, [sp, #4]
   186d8:	4641      	mov	r1, r8
   186da:	462b      	mov	r3, r5
   186dc:	4638      	mov	r0, r7
   186de:	f00a fe81 	bl	233e4 <send_mod_sub_status>
}
   186e2:	b007      	add	sp, #28
   186e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   186e8:	2202      	movs	r2, #2
   186ea:	e7f0      	b.n	186ce <mod_sub_overwrite+0x76>
		return -EMSGSIZE;
   186ec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   186f0:	e7f7      	b.n	186e2 <mod_sub_overwrite+0x8a>
		return -EINVAL;
   186f2:	f06f 0015 	mvn.w	r0, #21
   186f6:	e7f4      	b.n	186e2 <mod_sub_overwrite+0x8a>
   186f8:	00023627 	.word	0x00023627

000186fc <mod_sub_va_overwrite>:
{
   186fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18700:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   18702:	2300      	movs	r3, #0
   18704:	f8ad 3016 	strh.w	r3, [sp, #22]
	if ((buf->len != 20U) && (buf->len != 22U)) {
   18708:	8893      	ldrh	r3, [r2, #4]
   1870a:	f023 0302 	bic.w	r3, r3, #2
   1870e:	b29b      	uxth	r3, r3
   18710:	2b14      	cmp	r3, #20
{
   18712:	4607      	mov	r7, r0
   18714:	4688      	mov	r8, r1
   18716:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   18718:	d145      	bne.n	187a6 <mod_sub_va_overwrite+0xaa>
	elem_addr = net_buf_simple_pull_le16(buf);
   1871a:	4610      	mov	r0, r2
   1871c:	f00c fc00 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   18720:	b203      	sxth	r3, r0
   18722:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   18724:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   18726:	dd41      	ble.n	187ac <mod_sub_va_overwrite+0xb0>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   18728:	2110      	movs	r1, #16
   1872a:	4620      	mov	r0, r4
   1872c:	f00c fbe8 	bl	24f00 <net_buf_simple_pull_mem>
   18730:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   18732:	4630      	mov	r0, r6
	mod_id = buf->data;
   18734:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   18738:	f7ff fd22 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   1873c:	b9b0      	cbnz	r0, 1876c <mod_sub_va_overwrite+0x70>
		vnd = (buf->len == 4U);
   1873e:	88a3      	ldrh	r3, [r4, #4]
   18740:	1f1a      	subs	r2, r3, #4
   18742:	4253      	negs	r3, r2
   18744:	4153      	adcs	r3, r2
   18746:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   1874a:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1874c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18750:	e9cd 9301 	strd	r9, r3, [sp, #4]
   18754:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   18758:	9300      	str	r3, [sp, #0]
   1875a:	4622      	mov	r2, r4
   1875c:	4633      	mov	r3, r6
   1875e:	4641      	mov	r1, r8
   18760:	4638      	mov	r0, r7
   18762:	f00a fe3f 	bl	233e4 <send_mod_sub_status>
}
   18766:	b006      	add	sp, #24
   18768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
   1876c:	f10d 0215 	add.w	r2, sp, #21
   18770:	4621      	mov	r1, r4
   18772:	f00b f9e8 	bl	23b46 <get_model>
	if (!mod) {
   18776:	4605      	mov	r5, r0
   18778:	b198      	cbz	r0, 187a2 <mod_sub_va_overwrite+0xa6>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   1877a:	f10d 0116 	add.w	r1, sp, #22
   1877e:	4650      	mov	r0, sl
   18780:	f00a f966 	bl	22a50 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   18784:	4604      	mov	r4, r0
   18786:	2800      	cmp	r0, #0
   18788:	d1e0      	bne.n	1874c <mod_sub_va_overwrite+0x50>
			bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   1878a:	4602      	mov	r2, r0
   1878c:	4909      	ldr	r1, [pc, #36]	; (187b4 <mod_sub_va_overwrite+0xb8>)
   1878e:	4628      	mov	r0, r5
   18790:	f00a fc60 	bl	23054 <bt_mesh_model_extensions_walk>
			mod->groups[0] = sub_addr;
   18794:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   18798:	81eb      	strh	r3, [r5, #14]
				bt_mesh_model_sub_store(mod);
   1879a:	4628      	mov	r0, r5
   1879c:	f00a fc64 	bl	23068 <bt_mesh_model_sub_store>
   187a0:	e7d4      	b.n	1874c <mod_sub_va_overwrite+0x50>
		status = STATUS_INVALID_MODEL;
   187a2:	2402      	movs	r4, #2
   187a4:	e7d2      	b.n	1874c <mod_sub_va_overwrite+0x50>
		return -EMSGSIZE;
   187a6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   187aa:	e7dc      	b.n	18766 <mod_sub_va_overwrite+0x6a>
		return -EINVAL;
   187ac:	f06f 0015 	mvn.w	r0, #21
   187b0:	e7d9      	b.n	18766 <mod_sub_va_overwrite+0x6a>
   187b2:	bf00      	nop
   187b4:	00023627 	.word	0x00023627

000187b8 <bt_mesh_model_reset>:
	}
}

void bt_mesh_model_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   187b8:	4801      	ldr	r0, [pc, #4]	; (187c0 <bt_mesh_model_reset+0x8>)
   187ba:	2100      	movs	r1, #0
   187bc:	f7ff bada 	b.w	17d74 <bt_mesh_model_foreach>
   187c0:	00023631 	.word	0x00023631

000187c4 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   187c4:	b570      	push	{r4, r5, r6, lr}
   187c6:	460c      	mov	r4, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   187c8:	bb00      	cbnz	r0, 1880c <bt_mesh_attention+0x48>
		srv = health_srv;
   187ca:	4b12      	ldr	r3, [pc, #72]	; (18814 <bt_mesh_attention+0x50>)
   187cc:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
   187ce:	b1fd      	cbz	r5, 18810 <bt_mesh_attention+0x4c>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
   187d0:	6828      	ldr	r0, [r5, #0]
	} else {
		srv = model->user_data;
	}

	if ((time > 0) && srv->cb && srv->cb->attn_on) {
   187d2:	b124      	cbz	r4, 187de <bt_mesh_attention+0x1a>
   187d4:	686b      	ldr	r3, [r5, #4]
   187d6:	b113      	cbz	r3, 187de <bt_mesh_attention+0x1a>
   187d8:	691b      	ldr	r3, [r3, #16]
   187da:	b103      	cbz	r3, 187de <bt_mesh_attention+0x1a>
		srv->cb->attn_on(model);
   187dc:	4798      	blx	r3
	}

	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
   187de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   187e2:	434c      	muls	r4, r1
			return ((t * to_hz + off) / from_hz);
   187e4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   187e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   187ec:	2100      	movs	r1, #0
   187ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   187f2:	2300      	movs	r3, #0
   187f4:	fbe4 0106 	umlal	r0, r1, r4, r6
   187f8:	f7e7 fc82 	bl	100 <__aeabi_uldivmod>
   187fc:	4602      	mov	r2, r0
   187fe:	460b      	mov	r3, r1
   18800:	f105 0008 	add.w	r0, r5, #8
}
   18804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
   18808:	f006 ba0a 	b.w	1ec20 <k_work_reschedule>
		srv = model->user_data;
   1880c:	69c5      	ldr	r5, [r0, #28]
   1880e:	e7e0      	b.n	187d2 <bt_mesh_attention+0xe>
}
   18810:	bd70      	pop	{r4, r5, r6, pc}
   18812:	bf00      	nop
   18814:	20002770 	.word	0x20002770

00018818 <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
   18818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
   1881c:	4e41      	ldr	r6, [pc, #260]	; (18924 <adv_thread+0x10c>)
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   1881e:	4f42      	ldr	r7, [pc, #264]	; (18928 <adv_thread+0x110>)
{
   18820:	b08b      	sub	sp, #44	; 0x2c

				buf = bt_mesh_adv_buf_get(SYS_TIMEOUT_MS(adv_timeout));
				bt_le_adv_stop();
			}
		} else {
			buf = bt_mesh_adv_buf_get(K_FOREVER);
   18822:	f04f 30ff 	mov.w	r0, #4294967295
   18826:	f04f 31ff 	mov.w	r1, #4294967295
   1882a:	f7fc fb1f 	bl	14e6c <bt_mesh_adv_buf_get>
		}

		if (!buf) {
   1882e:	4604      	mov	r4, r0
   18830:	2800      	cmp	r0, #0
   18832:	d0f6      	beq.n	18822 <adv_thread+0xa>
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
   18834:	6942      	ldr	r2, [r0, #20]
   18836:	7a13      	ldrb	r3, [r2, #8]
   18838:	0719      	lsls	r1, r3, #28
   1883a:	d566      	bpl.n	1890a <adv_thread+0xf2>
			BT_MESH_ADV(buf)->busy = 0U;
   1883c:	f36f 03c3 	bfc	r3, #3, #1
   18840:	7213      	strb	r3, [r2, #8]
			       ADV_INT_FAST_MS :
   18842:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
	struct bt_le_adv_param param = {};
   18846:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
   18848:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
   1884a:	eb0d 0002 	add.w	r0, sp, r2
   1884e:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
   18852:	bf8c      	ite	hi
   18854:	f04f 0814 	movhi.w	r8, #20
   18858:	f04f 0864 	movls.w	r8, #100	; 0x64
	struct bt_le_adv_param param = {};
   1885c:	f009 f8d7 	bl	21a0e <memset>
	adv_int = MAX(adv_int_min,
   18860:	6961      	ldr	r1, [r4, #20]
   18862:	7a4d      	ldrb	r5, [r1, #9]
   18864:	08ea      	lsrs	r2, r5, #3
   18866:	1c53      	adds	r3, r2, #1
   18868:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1886c:	ebb8 0f42 	cmp.w	r8, r2, lsl #1
   18870:	bfda      	itte	le
   18872:	4613      	movle	r3, r2
   18874:	005b      	lslle	r3, r3, #1
   18876:	fa1f f388 	uxthgt.w	r3, r8
	duration = adv_int +
   1887a:	f005 0207 	and.w	r2, r5, #7
   1887e:	f103 050a 	add.w	r5, r3, #10
   18882:	fb02 5505 	mla	r5, r2, r5, r5
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   18886:	7a0a      	ldrb	r2, [r1, #8]
   18888:	f002 0203 	and.w	r2, r2, #3
	duration = adv_int +
   1888c:	441d      	add	r5, r3
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   1888e:	5cba      	ldrb	r2, [r7, r2]
   18890:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
   18894:	89a2      	ldrh	r2, [r4, #12]
   18896:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
   1889a:	68a2      	ldr	r2, [r4, #8]
   1889c:	9204      	str	r2, [sp, #16]
	duration = adv_int +
   1889e:	b2ad      	uxth	r5, r5
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
   188a0:	2205      	movs	r2, #5
   188a2:	00db      	lsls	r3, r3, #3
   188a4:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
   188a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   188ac:	f00d fae6 	bl	25e7c <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   188b0:	2300      	movs	r3, #0
   188b2:	9300      	str	r3, [sp, #0]
   188b4:	2201      	movs	r2, #1
   188b6:	a903      	add	r1, sp, #12
   188b8:	a805      	add	r0, sp, #20
   188ba:	f7fb fcef 	bl	1429c <bt_le_adv_start>
	bt_mesh_adv_send_start(duration, err, BT_MESH_ADV(buf));
   188be:	f8d4 9014 	ldr.w	r9, [r4, #20]
			   const struct bt_data *sd, size_t sd_len);

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  struct bt_mesh_adv *adv)
{
	if (!adv->started) {
   188c2:	f899 3008 	ldrb.w	r3, [r9, #8]
   188c6:	075a      	lsls	r2, r3, #29
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   188c8:	4680      	mov	r8, r0
   188ca:	d428      	bmi.n	1891e <adv_thread+0x106>
		adv->started = 1;
   188cc:	f043 0304 	orr.w	r3, r3, #4
   188d0:	f889 3008 	strb.w	r3, [r9, #8]

		if (adv->cb && adv->cb->start) {
   188d4:	f8d9 3000 	ldr.w	r3, [r9]
   188d8:	b133      	cbz	r3, 188e8 <adv_thread+0xd0>
   188da:	681b      	ldr	r3, [r3, #0]
   188dc:	b123      	cbz	r3, 188e8 <adv_thread+0xd0>
			adv->cb->start(duration, err, adv->cb_data);
   188de:	4601      	mov	r1, r0
   188e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   188e4:	4628      	mov	r0, r5
   188e6:	4798      	blx	r3
		}

		if (err) {
   188e8:	f1b8 0f00 	cmp.w	r8, #0
   188ec:	d113      	bne.n	18916 <adv_thread+0xfe>
   188ee:	f240 30e7 	movw	r0, #999	; 0x3e7
   188f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   188f6:	2300      	movs	r3, #0
   188f8:	eb00 30c5 	add.w	r0, r0, r5, lsl #15
   188fc:	2100      	movs	r1, #0
   188fe:	f7e7 fbff 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   18902:	f006 fc6b 	bl	1f1dc <z_impl_k_sleep>
	err = bt_le_adv_stop();
   18906:	f7fb fcfb 	bl	14300 <bt_le_adv_stop>
			adv_send(buf);
		}

		net_buf_unref(buf);
   1890a:	4620      	mov	r0, r4
   1890c:	f003 f96e 	bl	1bbec <net_buf_unref>
	z_impl_k_yield();
   18910:	f006 fbdc 	bl	1f0cc <z_impl_k_yield>
}
   18914:	e785      	b.n	18822 <adv_thread+0xa>
			adv->cb = NULL;
   18916:	2300      	movs	r3, #0
   18918:	f8c9 3000 	str.w	r3, [r9]
	if (err) {
   1891c:	e7f5      	b.n	1890a <adv_thread+0xf2>
   1891e:	2800      	cmp	r0, #0
   18920:	d1f3      	bne.n	1890a <adv_thread+0xf2>
   18922:	e7e4      	b.n	188ee <adv_thread+0xd6>
   18924:	200002d8 	.word	0x200002d8
   18928:	0002758f 	.word	0x0002758f

0001892c <bt_mesh_adv_init>:
{
	bt_mesh_adv_buf_get_cancel();
}

void bt_mesh_adv_init(void)
{
   1892c:	b510      	push	{r4, lr}
   1892e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18930:	4c0e      	ldr	r4, [pc, #56]	; (1896c <bt_mesh_adv_init+0x40>)
   18932:	490f      	ldr	r1, [pc, #60]	; (18970 <bt_mesh_adv_init+0x44>)
   18934:	f04f 32ff 	mov.w	r2, #4294967295
   18938:	f04f 33ff 	mov.w	r3, #4294967295
   1893c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18940:	2300      	movs	r3, #0
   18942:	f06f 0208 	mvn.w	r2, #8
   18946:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1894a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1894e:	9300      	str	r3, [sp, #0]
   18950:	f44f 7240 	mov.w	r2, #768	; 0x300
   18954:	4b07      	ldr	r3, [pc, #28]	; (18974 <bt_mesh_adv_init+0x48>)
   18956:	4620      	mov	r0, r4
   18958:	f005 fde4 	bl	1e524 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1895c:	4906      	ldr	r1, [pc, #24]	; (18978 <bt_mesh_adv_init+0x4c>)
   1895e:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(CONFIG_BT_MESH_ADV_PRIO),
			0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
   18960:	b008      	add	sp, #32
   18962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18966:	f00c bf86 	b.w	25876 <z_impl_k_thread_name_set>
   1896a:	bf00      	nop
   1896c:	20002000 	.word	0x20002000
   18970:	20004800 	.word	0x20004800
   18974:	00018819 	.word	0x00018819
   18978:	00027776 	.word	0x00027776

0001897c <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
   1897c:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
   1897e:	4802      	ldr	r0, [pc, #8]	; (18988 <bt_mesh_adv_enable+0xc>)
   18980:	f00c ff7c 	bl	2587c <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
   18984:	2000      	movs	r0, #0
   18986:	bd08      	pop	{r3, pc}
   18988:	20002000 	.word	0x20002000

0001898c <atomic_test_and_clear_bit.constprop.0>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   1898c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1898e:	2301      	movs	r3, #1
   18990:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18994:	4b0a      	ldr	r3, [pc, #40]	; (189c0 <atomic_test_and_clear_bit.constprop.0+0x34>)
   18996:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1899a:	43c1      	mvns	r1, r0
   1899c:	e853 2f00 	ldrex	r2, [r3]
   189a0:	ea02 0c01 	and.w	ip, r2, r1
   189a4:	e843 ce00 	strex	lr, ip, [r3]
   189a8:	f1be 0f00 	cmp.w	lr, #0
   189ac:	d1f6      	bne.n	1899c <atomic_test_and_clear_bit.constprop.0+0x10>
   189ae:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   189b2:	4202      	tst	r2, r0
}
   189b4:	bf14      	ite	ne
   189b6:	2001      	movne	r0, #1
   189b8:	2000      	moveq	r0, #0
   189ba:	f85d fb04 	ldr.w	pc, [sp], #4
   189be:	bf00      	nop
   189c0:	20002774 	.word	0x20002774

000189c4 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   189c4:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189c6:	4b10      	ldr	r3, [pc, #64]	; (18a08 <mesh_commit+0x44>)
   189c8:	f3bf 8f5b 	dmb	ish
   189cc:	681b      	ldr	r3, [r3, #0]
   189ce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   189d2:	07db      	lsls	r3, r3, #31
   189d4:	d516      	bpl.n	18a04 <mesh_commit+0x40>
		 * will be called again later.
		 */
		return 0;
	}

	if (!bt_mesh_subnet_next(NULL)) {
   189d6:	2000      	movs	r0, #0
   189d8:	f7fd fba0 	bl	1611c <bt_mesh_subnet_next>
   189dc:	b190      	cbz	r0, 18a04 <mesh_commit+0x40>

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		(void)bt_mesh_pb_gatt_srv_disable();
	}

	bt_mesh_net_settings_commit();
   189de:	f7fd f9fd 	bl	15ddc <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   189e2:	f7ff fceb 	bl	183bc <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   189e6:	f3bf 8f5b 	dmb	ish
   189ea:	4b08      	ldr	r3, [pc, #32]	; (18a0c <mesh_commit+0x48>)
   189ec:	e853 2f00 	ldrex	r2, [r3]
   189f0:	f042 0201 	orr.w	r2, r2, #1
   189f4:	e843 2100 	strex	r1, r2, [r3]
   189f8:	2900      	cmp	r1, #0
   189fa:	d1f7      	bne.n	189ec <mesh_commit+0x28>
   189fc:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   18a00:	f7fc f808 	bl	14a14 <bt_mesh_start>

	return 0;
}
   18a04:	2000      	movs	r0, #0
   18a06:	bd08      	pop	{r3, pc}
   18a08:	200003a4 	.word	0x200003a4
   18a0c:	20001d48 	.word	0x20001d48

00018a10 <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_VA_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   18a10:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18a12:	4b2b      	ldr	r3, [pc, #172]	; (18ac0 <bt_mesh_settings_store_schedule+0xb0>)
   18a14:	f3bf 8f5b 	dmb	ish
   18a18:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   18a1a:	2101      	movs	r1, #1
   18a1c:	f000 001f 	and.w	r0, r0, #31
   18a20:	fa01 f000 	lsl.w	r0, r1, r0
   18a24:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   18a28:	e852 1f00 	ldrex	r1, [r2]
   18a2c:	4301      	orrs	r1, r0
   18a2e:	e842 1400 	strex	r4, r1, [r2]
   18a32:	2c00      	cmp	r4, #0
   18a34:	d1f8      	bne.n	18a28 <bt_mesh_settings_store_schedule+0x18>
   18a36:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18a3a:	f3bf 8f5b 	dmb	ish
   18a3e:	681a      	ldr	r2, [r3, #0]
   18a40:	f3bf 8f5b 	dmb	ish
	uint32_t timeout_ms, remaining_ms;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   18a44:	f412 6f87 	tst.w	r2, #1080	; 0x438
   18a48:	d133      	bne.n	18ab2 <bt_mesh_settings_store_schedule+0xa2>
   18a4a:	f3bf 8f5b 	dmb	ish
   18a4e:	681a      	ldr	r2, [r3, #0]
   18a50:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (IS_ENABLED(CONFIG_BT_MESH_RPL_STORAGE_MODE_SETTINGS) && RPL_STORE_TIMEOUT >= 0 &&
   18a54:	07d2      	lsls	r2, r2, #31
   18a56:	d421      	bmi.n	18a9c <bt_mesh_settings_store_schedule+0x8c>
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
		   !(atomic_get(pending_flags) & GENERIC_PENDING_BITS)) {
		timeout_ms = RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   18a58:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   18a5c:	4819      	ldr	r0, [pc, #100]	; (18ac4 <bt_mesh_settings_store_schedule+0xb4>)
   18a5e:	f00d f9cf 	bl	25e00 <z_timeout_remaining>
   18a62:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18a66:	4604      	mov	r4, r0
   18a68:	2100      	movs	r1, #0
   18a6a:	f240 30e7 	movw	r0, #999	; 0x3e7
   18a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a72:	2300      	movs	r3, #0
   18a74:	fbe5 0106 	umlal	r0, r1, r5, r6
   18a78:	f7e7 fb42 	bl	100 <__aeabi_uldivmod>
   18a7c:	4602      	mov	r2, r0
			return (uint32_t)((t * to_hz + off) / from_hz);
   18a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18a82:	fba4 4000 	umull	r4, r0, r4, r0
   18a86:	0be4      	lsrs	r4, r4, #15
   18a88:	ea44 4440 	orr.w	r4, r4, r0, lsl #17

	/* If the new deadline is sooner, override any existing
	 * deadline; otherwise schedule without changing any existing
	 * deadline.
	 */
	if (timeout_ms < remaining_ms) {
   18a8c:	42a5      	cmp	r5, r4
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
   18a8e:	480e      	ldr	r0, [pc, #56]	; (18ac8 <bt_mesh_settings_store_schedule+0xb8>)
			return ((t * to_hz + off) / from_hz);
   18a90:	460b      	mov	r3, r1
	if (timeout_ms < remaining_ms) {
   18a92:	d210      	bcs.n	18ab6 <bt_mesh_settings_store_schedule+0xa6>
	} else {
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
	}
}
   18a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
   18a98:	f006 b8c2 	b.w	1ec20 <k_work_reschedule>
   18a9c:	f3bf 8f5b 	dmb	ish
   18aa0:	681a      	ldr	r2, [r3, #0]
   18aa2:	f3bf 8f5b 	dmb	ish
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
   18aa6:	f240 33c6 	movw	r3, #966	; 0x3c6
   18aaa:	421a      	tst	r2, r3
   18aac:	d1d4      	bne.n	18a58 <bt_mesh_settings_store_schedule+0x48>
		timeout_ms = RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   18aae:	4d07      	ldr	r5, [pc, #28]	; (18acc <bt_mesh_settings_store_schedule+0xbc>)
   18ab0:	e7d4      	b.n	18a5c <bt_mesh_settings_store_schedule+0x4c>
		timeout_ms = 0;
   18ab2:	2500      	movs	r5, #0
   18ab4:	e7d2      	b.n	18a5c <bt_mesh_settings_store_schedule+0x4c>
}
   18ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
   18aba:	f006 b87d 	b.w	1ebb8 <k_work_schedule>
   18abe:	bf00      	nop
   18ac0:	20002774 	.word	0x20002774
   18ac4:	20002090 	.word	0x20002090
   18ac8:	20002080 	.word	0x20002080
   18acc:	000927c0 	.word	0x000927c0

00018ad0 <bt_mesh_settings_store_cancel>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ad0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   18ad2:	2301      	movs	r3, #1
   18ad4:	f000 001f 	and.w	r0, r0, #31
   18ad8:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18adc:	4b07      	ldr	r3, [pc, #28]	; (18afc <bt_mesh_settings_store_cancel+0x2c>)
   18ade:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ae2:	43c0      	mvns	r0, r0
   18ae4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18ae8:	e853 2f00 	ldrex	r2, [r3]
   18aec:	4002      	ands	r2, r0
   18aee:	e843 2100 	strex	r1, r2, [r3]
   18af2:	2900      	cmp	r1, #0
   18af4:	d1f8      	bne.n	18ae8 <bt_mesh_settings_store_cancel+0x18>
   18af6:	f3bf 8f5b 	dmb	ish

void bt_mesh_settings_store_cancel(enum bt_mesh_settings_flag flag)
{
	atomic_clear_bit(pending_flags, flag);
}
   18afa:	4770      	bx	lr
   18afc:	20002774 	.word	0x20002774

00018b00 <bt_mesh_settings_init>:
	}
}

void bt_mesh_settings_init(void)
{
	k_work_init_delayable(&pending_store, store_pending);
   18b00:	4901      	ldr	r1, [pc, #4]	; (18b08 <bt_mesh_settings_init+0x8>)
   18b02:	4802      	ldr	r0, [pc, #8]	; (18b0c <bt_mesh_settings_init+0xc>)
   18b04:	f00d b858 	b.w	25bb8 <k_work_init_delayable>
   18b08:	00024861 	.word	0x00024861
   18b0c:	20002080 	.word	0x20002080

00018b10 <bt_mesh_settings_store_pending>:
}

void bt_mesh_settings_store_pending(void)
{
   18b10:	b510      	push	{r4, lr}
	(void)k_work_cancel_delayable(&pending_store);
   18b12:	4c04      	ldr	r4, [pc, #16]	; (18b24 <bt_mesh_settings_store_pending+0x14>)
   18b14:	4620      	mov	r0, r4
   18b16:	f00d f85d 	bl	25bd4 <k_work_cancel_delayable>

	store_pending(&pending_store.work);
   18b1a:	4620      	mov	r0, r4
}
   18b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	store_pending(&pending_store.work);
   18b20:	f00b be9e 	b.w	24860 <store_pending>
   18b24:	20002080 	.word	0x20002080

00018b28 <rpl_set>:
	(void) memset(&replay_list[last - shift + 1], 0, sizeof(struct bt_mesh_rpl) * shift);
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
   18b28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18b2c:	460c      	mov	r4, r1
   18b2e:	4617      	mov	r7, r2
   18b30:	4698      	mov	r8, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
   18b32:	2800      	cmp	r0, #0
   18b34:	d045      	beq.n	18bc2 <rpl_set+0x9a>
		BT_ERR("Insufficient number of arguments");
		return -ENOENT;
	}

	src = strtol(name, NULL, 16);
   18b36:	2100      	movs	r1, #0
   18b38:	2210      	movs	r2, #16
   18b3a:	f008 fea1 	bl	21880 <strtol>
		if (replay_list[i].src == src) {
   18b3e:	4d22      	ldr	r5, [pc, #136]	; (18bc8 <rpl_set+0xa0>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18b40:	2300      	movs	r3, #0
		if (replay_list[i].src == src) {
   18b42:	b281      	uxth	r1, r0
   18b44:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
   18b48:	f3c2 020e 	ubfx	r2, r2, #0, #15
   18b4c:	4291      	cmp	r1, r2
   18b4e:	d118      	bne.n	18b82 <rpl_set+0x5a>
			return &replay_list[i];
   18b50:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
	entry = bt_mesh_rpl_find(src);

	if (len_rd == 0) {
   18b54:	b334      	cbz	r4, 18ba4 <rpl_set+0x7c>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
			return -ENOMEM;
		}
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   18b56:	2304      	movs	r3, #4
   18b58:	eb0d 0203 	add.w	r2, sp, r3
   18b5c:	4641      	mov	r1, r8
   18b5e:	4638      	mov	r0, r7
   18b60:	f00b fec6 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   18b64:	bb50      	cbnz	r0, 18bbc <rpl_set+0x94>
		BT_ERR("Failed to set `net`");
		return err;
	}

	entry->seq = rpl.seq;
   18b66:	9b01      	ldr	r3, [sp, #4]
   18b68:	806b      	strh	r3, [r5, #2]
   18b6a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   18b6e:	712b      	strb	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
   18b70:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b74:	786a      	ldrb	r2, [r5, #1]
   18b76:	f3c3 0300 	ubfx	r3, r3, #0, #1
   18b7a:	f363 12c7 	bfi	r2, r3, #7, #1
   18b7e:	706a      	strb	r2, [r5, #1]

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
   18b80:	e01c      	b.n	18bbc <rpl_set+0x94>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18b82:	3301      	adds	r3, #1
   18b84:	2b0a      	cmp	r3, #10
   18b86:	d1dd      	bne.n	18b44 <rpl_set+0x1c>
	if (len_rd == 0) {
   18b88:	b18c      	cbz	r4, 18bae <rpl_set+0x86>
   18b8a:	2400      	movs	r4, #0
		if (!replay_list[i].src) {
   18b8c:	f835 6034 	ldrh.w	r6, [r5, r4, lsl #3]
   18b90:	f3c6 030e 	ubfx	r3, r6, #0, #15
   18b94:	b96b      	cbnz	r3, 18bb2 <rpl_set+0x8a>
			replay_list[i].src = src;
   18b96:	f360 060e 	bfi	r6, r0, #0, #15
   18b9a:	f825 6034 	strh.w	r6, [r5, r4, lsl #3]
			return &replay_list[i];
   18b9e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
		if (!entry) {
   18ba2:	e7d8      	b.n	18b56 <rpl_set+0x2e>
			(void)memset(entry, 0, sizeof(*entry));
   18ba4:	2208      	movs	r2, #8
   18ba6:	4621      	mov	r1, r4
   18ba8:	4628      	mov	r0, r5
   18baa:	f008 ff30 	bl	21a0e <memset>
		return 0;
   18bae:	4620      	mov	r0, r4
   18bb0:	e004      	b.n	18bbc <rpl_set+0x94>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18bb2:	3401      	adds	r4, #1
   18bb4:	2c0a      	cmp	r4, #10
   18bb6:	d1e9      	bne.n	18b8c <rpl_set+0x64>
			return -ENOMEM;
   18bb8:	f06f 000b 	mvn.w	r0, #11
}
   18bbc:	b002      	add	sp, #8
   18bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   18bc2:	f06f 0001 	mvn.w	r0, #1
   18bc6:	e7f9      	b.n	18bbc <rpl_set+0x94>
   18bc8:	200020b0 	.word	0x200020b0

00018bcc <clear_rpl>:
{
   18bcc:	b510      	push	{r4, lr}
	if (!rpl->src) {
   18bce:	8803      	ldrh	r3, [r0, #0]
   18bd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
{
   18bd4:	b086      	sub	sp, #24
   18bd6:	4604      	mov	r4, r0
	if (!rpl->src) {
   18bd8:	b32a      	cbz	r2, 18c26 <clear_rpl+0x5a>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   18bda:	4613      	mov	r3, r2
   18bdc:	2112      	movs	r1, #18
   18bde:	4a13      	ldr	r2, [pc, #76]	; (18c2c <clear_rpl+0x60>)
   18be0:	a801      	add	r0, sp, #4
   18be2:	f006 fe57 	bl	1f894 <snprintk>
	err = settings_delete(path);
   18be6:	a801      	add	r0, sp, #4
   18be8:	f007 fc09 	bl	203fe <settings_delete>
	(void)memset(rpl, 0, sizeof(*rpl));
   18bec:	2208      	movs	r2, #8
   18bee:	4620      	mov	r0, r4
   18bf0:	2100      	movs	r1, #0
   18bf2:	f008 ff0c 	bl	21a0e <memset>
   18bf6:	f3bf 8f5b 	dmb	ish
	return rpl - &replay_list[0];
   18bfa:	480d      	ldr	r0, [pc, #52]	; (18c30 <clear_rpl+0x64>)
   18bfc:	1a24      	subs	r4, r4, r0
   18bfe:	10e4      	asrs	r4, r4, #3
   18c00:	0962      	lsrs	r2, r4, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c02:	2301      	movs	r3, #1
   18c04:	f004 041f 	and.w	r4, r4, #31
   18c08:	fa03 f404 	lsl.w	r4, r3, r4
   18c0c:	4b09      	ldr	r3, [pc, #36]	; (18c34 <clear_rpl+0x68>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18c0e:	43e4      	mvns	r4, r4
   18c10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18c14:	e853 2f00 	ldrex	r2, [r3]
   18c18:	4022      	ands	r2, r4
   18c1a:	e843 2100 	strex	r1, r2, [r3]
   18c1e:	2900      	cmp	r1, #0
   18c20:	d1f8      	bne.n	18c14 <clear_rpl+0x48>
   18c22:	f3bf 8f5b 	dmb	ish
}
   18c26:	b006      	add	sp, #24
   18c28:	bd10      	pop	{r4, pc}
   18c2a:	bf00      	nop
   18c2c:	0002778a 	.word	0x0002778a
   18c30:	200020b0 	.word	0x200020b0
   18c34:	2000277c 	.word	0x2000277c

00018c38 <schedule_rpl_store.constprop.0>:
	return rpl - &replay_list[0];
   18c38:	4b0c      	ldr	r3, [pc, #48]	; (18c6c <schedule_rpl_store.constprop.0+0x34>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c3a:	f3bf 8f5b 	dmb	ish
   18c3e:	1ac0      	subs	r0, r0, r3
   18c40:	10c0      	asrs	r0, r0, #3
   18c42:	4b0b      	ldr	r3, [pc, #44]	; (18c70 <schedule_rpl_store.constprop.0+0x38>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18c44:	0941      	lsrs	r1, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c46:	2201      	movs	r2, #1
   18c48:	f000 001f 	and.w	r0, r0, #31
   18c4c:	fa02 f000 	lsl.w	r0, r2, r0
   18c50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18c54:	e853 2f00 	ldrex	r2, [r3]
   18c58:	4302      	orrs	r2, r0
   18c5a:	e843 2100 	strex	r1, r2, [r3]
   18c5e:	2900      	cmp	r1, #0
   18c60:	d1f8      	bne.n	18c54 <schedule_rpl_store.constprop.0+0x1c>
   18c62:	f3bf 8f5b 	dmb	ish
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   18c66:	2000      	movs	r0, #0
   18c68:	f7ff bed2 	b.w	18a10 <bt_mesh_settings_store_schedule>
   18c6c:	200020b0 	.word	0x200020b0
   18c70:	2000277c 	.word	0x2000277c

00018c74 <bt_mesh_rpl_check>:
{
   18c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   18c76:	7d06      	ldrb	r6, [r0, #20]
   18c78:	f006 0330 	and.w	r3, r6, #48	; 0x30
   18c7c:	2b10      	cmp	r3, #16
{
   18c7e:	4605      	mov	r5, r0
   18c80:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   18c82:	d00c      	beq.n	18c9e <bt_mesh_rpl_check+0x2a>
	if (!rx->local_match) {
   18c84:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   18c88:	d00a      	beq.n	18ca0 <bt_mesh_rpl_check+0x2c>
   18c8a:	4818      	ldr	r0, [pc, #96]	; (18cec <bt_mesh_rpl_check+0x78>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18c8c:	2200      	movs	r2, #0
   18c8e:	4601      	mov	r1, r0
		if (!rpl->src) {
   18c90:	f831 7032 	ldrh.w	r7, [r1, r2, lsl #3]
   18c94:	f3c7 030e 	ubfx	r3, r7, #0, #15
   18c98:	b91b      	cbnz	r3, 18ca2 <bt_mesh_rpl_check+0x2e>
				if (match) {
   18c9a:	b1ec      	cbz	r4, 18cd8 <bt_mesh_rpl_check+0x64>
					*match = rpl;
   18c9c:	6020      	str	r0, [r4, #0]
				return false;
   18c9e:	2000      	movs	r0, #0
}
   18ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
   18ca2:	892b      	ldrh	r3, [r5, #8]
   18ca4:	f3c7 070e 	ubfx	r7, r7, #0, #15
   18ca8:	429f      	cmp	r7, r3
   18caa:	d119      	bne.n	18ce0 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
   18cac:	00d7      	lsls	r7, r2, #3
   18cae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   18cb2:	f992 3001 	ldrsb.w	r3, [r2, #1]
   18cb6:	07f2      	lsls	r2, r6, #31
   18cb8:	d503      	bpl.n	18cc2 <bt_mesh_rpl_check+0x4e>
   18cba:	2b00      	cmp	r3, #0
   18cbc:	db03      	blt.n	18cc6 <bt_mesh_rpl_check+0x52>
				return true;
   18cbe:	2001      	movs	r0, #1
   18cc0:	e7ee      	b.n	18ca0 <bt_mesh_rpl_check+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
   18cc2:	2b00      	cmp	r3, #0
   18cc4:	dbe9      	blt.n	18c9a <bt_mesh_rpl_check+0x26>
			    rpl->seq < rx->seq) {
   18cc6:	4439      	add	r1, r7
   18cc8:	790a      	ldrb	r2, [r1, #4]
   18cca:	884b      	ldrh	r3, [r1, #2]
   18ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
   18cd0:	692a      	ldr	r2, [r5, #16]
   18cd2:	4293      	cmp	r3, r2
   18cd4:	d2f3      	bcs.n	18cbe <bt_mesh_rpl_check+0x4a>
   18cd6:	e7e0      	b.n	18c9a <bt_mesh_rpl_check+0x26>
					bt_mesh_rpl_update(rpl, rx);
   18cd8:	4629      	mov	r1, r5
   18cda:	f00b fe18 	bl	2490e <bt_mesh_rpl_update>
   18cde:	e7de      	b.n	18c9e <bt_mesh_rpl_check+0x2a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18ce0:	3201      	adds	r2, #1
   18ce2:	2a0a      	cmp	r2, #10
   18ce4:	f100 0008 	add.w	r0, r0, #8
   18ce8:	d1d2      	bne.n	18c90 <bt_mesh_rpl_check+0x1c>
   18cea:	e7e8      	b.n	18cbe <bt_mesh_rpl_check+0x4a>
   18cec:	200020b0 	.word	0x200020b0

00018cf0 <bt_mesh_rpl_clear>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18cf0:	4b08      	ldr	r3, [pc, #32]	; (18d14 <bt_mesh_rpl_clear+0x24>)
   18cf2:	f3bf 8f5b 	dmb	ish
   18cf6:	2201      	movs	r2, #1
   18cf8:	e853 1f00 	ldrex	r1, [r3]
   18cfc:	2900      	cmp	r1, #0
   18cfe:	d103      	bne.n	18d08 <bt_mesh_rpl_clear+0x18>
   18d00:	e843 2000 	strex	r0, r2, [r3]
   18d04:	2800      	cmp	r0, #0
   18d06:	d1f7      	bne.n	18cf8 <bt_mesh_rpl_clear+0x8>
   18d08:	f3bf 8f5b 	dmb	ish
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   18d0c:	2000      	movs	r0, #0
   18d0e:	f7ff be7f 	b.w	18a10 <bt_mesh_settings_store_schedule>
   18d12:	bf00      	nop
   18d14:	20002778 	.word	0x20002778

00018d18 <bt_mesh_rpl_reset>:
{
   18d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d1a:	4f1a      	ldr	r7, [pc, #104]	; (18d84 <bt_mesh_rpl_reset+0x6c>)
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18d1c:	2400      	movs	r4, #0
	int last = 0;
   18d1e:	4620      	mov	r0, r4
	int shift = 0;
   18d20:	4625      	mov	r5, r4
   18d22:	463e      	mov	r6, r7
		if (rpl->src) {
   18d24:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   18d28:	f3c3 030e 	ubfx	r3, r3, #0, #15
   18d2c:	b153      	cbz	r3, 18d44 <bt_mesh_rpl_reset+0x2c>
			if (rpl->old_iv) {
   18d2e:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   18d32:	f993 2001 	ldrsb.w	r2, [r3, #1]
   18d36:	2a00      	cmp	r2, #0
   18d38:	da13      	bge.n	18d62 <bt_mesh_rpl_reset+0x4a>
					clear_rpl(rpl);
   18d3a:	4638      	mov	r0, r7
   18d3c:	f7ff ff46 	bl	18bcc <clear_rpl>
				shift++;
   18d40:	3501      	adds	r5, #1
					schedule_rpl_store(&replay_list[i - shift], true);
   18d42:	4620      	mov	r0, r4
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18d44:	3401      	adds	r4, #1
   18d46:	2c0a      	cmp	r4, #10
   18d48:	f107 0708 	add.w	r7, r7, #8
   18d4c:	d1ea      	bne.n	18d24 <bt_mesh_rpl_reset+0xc>
	(void) memset(&replay_list[last - shift + 1], 0, sizeof(struct bt_mesh_rpl) * shift);
   18d4e:	1b40      	subs	r0, r0, r5
   18d50:	3001      	adds	r0, #1
   18d52:	00ea      	lsls	r2, r5, #3
   18d54:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
   18d58:	2100      	movs	r1, #0
}
   18d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void) memset(&replay_list[last - shift + 1], 0, sizeof(struct bt_mesh_rpl) * shift);
   18d5e:	f008 be56 	b.w	21a0e <memset>
				rpl->old_iv = true;
   18d62:	785a      	ldrb	r2, [r3, #1]
					replay_list[i - shift] = *rpl;
   18d64:	1b60      	subs	r0, r4, r5
				rpl->old_iv = true;
   18d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18d6a:	705a      	strb	r2, [r3, #1]
				if (shift > 0) {
   18d6c:	00c0      	lsls	r0, r0, #3
   18d6e:	b125      	cbz	r5, 18d7a <bt_mesh_rpl_reset+0x62>
					replay_list[i - shift] = *rpl;
   18d70:	e9d7 2300 	ldrd	r2, r3, [r7]
   18d74:	1831      	adds	r1, r6, r0
   18d76:	e9c1 2300 	strd	r2, r3, [r1]
					schedule_rpl_store(&replay_list[i - shift], true);
   18d7a:	4430      	add	r0, r6
   18d7c:	f7ff ff5c 	bl	18c38 <schedule_rpl_store.constprop.0>
   18d80:	e7df      	b.n	18d42 <bt_mesh_rpl_reset+0x2a>
   18d82:	bf00      	nop
   18d84:	200020b0 	.word	0x200020b0

00018d88 <bt_mesh_rpl_pending_store>:
		BT_DBG("Stored RPL %s value", path);
	}
}

void bt_mesh_rpl_pending_store(uint16_t addr)
{
   18d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool clr;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
   18d8c:	b203      	sxth	r3, r0
   18d8e:	2b00      	cmp	r3, #0
{
   18d90:	b087      	sub	sp, #28
   18d92:	4605      	mov	r5, r0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
   18d94:	dc06      	bgt.n	18da4 <bt_mesh_rpl_pending_store+0x1c>
   18d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18d9a:	4298      	cmp	r0, r3
   18d9c:	d129      	bne.n	18df2 <bt_mesh_rpl_pending_store+0x6a>
	     addr != BT_MESH_ADDR_ALL_NODES)) {
		return;
	}

	if (addr == BT_MESH_ADDR_ALL_NODES) {
		bt_mesh_settings_store_cancel(BT_MESH_SETTINGS_RPL_PENDING);
   18d9e:	2000      	movs	r0, #0
   18da0:	f7ff fe96 	bl	18ad0 <bt_mesh_settings_store_cancel>
   18da4:	f3bf 8f5b 	dmb	ish
   18da8:	4b39      	ldr	r3, [pc, #228]	; (18e90 <bt_mesh_rpl_pending_store+0x108>)
   18daa:	2400      	movs	r4, #0
   18dac:	e853 2f00 	ldrex	r2, [r3]
   18db0:	2a01      	cmp	r2, #1
   18db2:	d103      	bne.n	18dbc <bt_mesh_rpl_pending_store+0x34>
   18db4:	e843 4100 	strex	r1, r4, [r3]
   18db8:	2900      	cmp	r1, #0
   18dba:	d1f7      	bne.n	18dac <bt_mesh_rpl_pending_store+0x24>
   18dbc:	f3bf 8f5b 	dmb	ish
   18dc0:	4e34      	ldr	r6, [pc, #208]	; (18e94 <bt_mesh_rpl_pending_store+0x10c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18dc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 18e98 <bt_mesh_rpl_pending_store+0x110>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   18dc6:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 18e9c <bt_mesh_rpl_pending_store+0x114>
   18dca:	bf0c      	ite	eq
   18dcc:	f04f 0901 	moveq.w	r9, #1
   18dd0:	46a1      	movne	r9, r4
	}

	clr = atomic_cas(&clear, 1, 0);

	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18dd2:	4637      	mov	r7, r6
		if (addr != BT_MESH_ADDR_ALL_NODES &&
   18dd4:	f64f 78ff 	movw	r8, #65535	; 0xffff
   18dd8:	4545      	cmp	r5, r8
   18dda:	d00d      	beq.n	18df8 <bt_mesh_rpl_pending_store+0x70>
		    addr != replay_list[i].src) {
   18ddc:	f837 3034 	ldrh.w	r3, [r7, r4, lsl #3]
		if (addr != BT_MESH_ADDR_ALL_NODES &&
   18de0:	f3c3 030e 	ubfx	r3, r3, #0, #15
   18de4:	42ab      	cmp	r3, r5
   18de6:	d007      	beq.n	18df8 <bt_mesh_rpl_pending_store+0x70>
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   18de8:	3401      	adds	r4, #1
   18dea:	2c0a      	cmp	r4, #10
   18dec:	f106 0608 	add.w	r6, r6, #8
   18df0:	d1f2      	bne.n	18dd8 <bt_mesh_rpl_pending_store+0x50>

		if (addr != BT_MESH_ADDR_ALL_NODES) {
			break;
		}
	}
}
   18df2:	b007      	add	sp, #28
   18df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (clr) {
   18df8:	f1b9 0f00 	cmp.w	r9, #0
   18dfc:	d005      	beq.n	18e0a <bt_mesh_rpl_pending_store+0x82>
			clear_rpl(&replay_list[i]);
   18dfe:	4630      	mov	r0, r6
   18e00:	f7ff fee4 	bl	18bcc <clear_rpl>
		if (addr != BT_MESH_ADDR_ALL_NODES) {
   18e04:	4545      	cmp	r5, r8
   18e06:	d0ef      	beq.n	18de8 <bt_mesh_rpl_pending_store+0x60>
   18e08:	e7f3      	b.n	18df2 <bt_mesh_rpl_pending_store+0x6a>
	return rpl - &replay_list[0];
   18e0a:	1bf3      	subs	r3, r6, r7
	atomic_val_t mask = ATOMIC_MASK(bit);
   18e0c:	f3c3 02c4 	ubfx	r2, r3, #3, #5
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18e10:	119b      	asrs	r3, r3, #6
	atomic_val_t mask = ATOMIC_MASK(bit);
   18e12:	2101      	movs	r1, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18e14:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   18e18:	fa01 f202 	lsl.w	r2, r1, r2
   18e1c:	f023 0303 	bic.w	r3, r3, #3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18e20:	43d0      	mvns	r0, r2
   18e22:	4453      	add	r3, sl
   18e24:	f3bf 8f5b 	dmb	ish
   18e28:	e853 1f00 	ldrex	r1, [r3]
   18e2c:	ea01 0c00 	and.w	ip, r1, r0
   18e30:	e843 ce00 	strex	lr, ip, [r3]
   18e34:	f1be 0f00 	cmp.w	lr, #0
   18e38:	d1f6      	bne.n	18e28 <bt_mesh_rpl_pending_store+0xa0>
   18e3a:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_and_clear_bit(store, rpl_idx(&replay_list[i]))) {
   18e3e:	4211      	tst	r1, r2
   18e40:	d0e0      	beq.n	18e04 <bt_mesh_rpl_pending_store+0x7c>
	if (!entry->src) {
   18e42:	f837 3034 	ldrh.w	r3, [r7, r4, lsl #3]
   18e46:	f3c3 020e 	ubfx	r2, r3, #0, #15
   18e4a:	2a00      	cmp	r2, #0
   18e4c:	d0da      	beq.n	18e04 <bt_mesh_rpl_pending_store+0x7c>
	rpl.seq = entry->seq;
   18e4e:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   18e52:	f3c3 030e 	ubfx	r3, r3, #0, #15
	rpl.seq = entry->seq;
   18e56:	790a      	ldrb	r2, [r1, #4]
   18e58:	8848      	ldrh	r0, [r1, #2]
   18e5a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   18e5e:	9a00      	ldr	r2, [sp, #0]
   18e60:	f360 0217 	bfi	r2, r0, #0, #24
   18e64:	9200      	str	r2, [sp, #0]
	rpl.old_iv = entry->old_iv;
   18e66:	7849      	ldrb	r1, [r1, #1]
   18e68:	f3c2 6207 	ubfx	r2, r2, #24, #8
   18e6c:	09c9      	lsrs	r1, r1, #7
   18e6e:	f361 0200 	bfi	r2, r1, #0, #1
   18e72:	f88d 2003 	strb.w	r2, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   18e76:	2112      	movs	r1, #18
   18e78:	465a      	mov	r2, fp
   18e7a:	a801      	add	r0, sp, #4
   18e7c:	f006 fd0a 	bl	1f894 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   18e80:	2204      	movs	r2, #4
   18e82:	4669      	mov	r1, sp
   18e84:	eb0d 0002 	add.w	r0, sp, r2
   18e88:	f7f8 ff48 	bl	11d1c <settings_save_one>
		BT_DBG("Stored RPL %s value", path);
   18e8c:	e7ba      	b.n	18e04 <bt_mesh_rpl_pending_store+0x7c>
   18e8e:	bf00      	nop
   18e90:	20002778 	.word	0x20002778
   18e94:	200020b0 	.word	0x200020b0
   18e98:	2000277c 	.word	0x2000277c
   18e9c:	0002778a 	.word	0x0002778a

00018ea0 <prov_recv>:
	return atomic_test_bit(bt_mesh_prov_link.flags, LINK_ACTIVE);
}

static void prov_recv(const struct prov_bearer *bearer, void *cb_data,
		      struct net_buf_simple *buf)
{
   18ea0:	b430      	push	{r4, r5}
		[PROV_DATA]           = PDU_LEN_DATA,
		[PROV_COMPLETE]       = PDU_LEN_COMPLETE,
		[PROV_FAILED]         = PDU_LEN_FAILED,
	};

	uint8_t type = buf->data[0];
   18ea2:	6810      	ldr	r0, [r2, #0]

	BT_DBG("type 0x%02x len %u", type, buf->len);

	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_PDU);
   18ea4:	4c10      	ldr	r4, [pc, #64]	; (18ee8 <prov_recv+0x48>)
	uint8_t type = buf->data[0];
   18ea6:	7801      	ldrb	r1, [r0, #0]
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_PDU);
   18ea8:	68a3      	ldr	r3, [r4, #8]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   18eaa:	2909      	cmp	r1, #9
   18eac:	d903      	bls.n	18eb6 <prov_recv+0x16>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_PDU);
   18eae:	689b      	ldr	r3, [r3, #8]
   18eb0:	2001      	movs	r0, #1
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
		return;
	}

	bt_mesh_prov_link.role->op[type](&buf->data[1]);
}
   18eb2:	bc30      	pop	{r4, r5}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   18eb4:	4718      	bx	r3
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   18eb6:	d003      	beq.n	18ec0 <prov_recv+0x20>
   18eb8:	f894 403f 	ldrb.w	r4, [r4, #63]	; 0x3f
   18ebc:	428c      	cmp	r4, r1
   18ebe:	d103      	bne.n	18ec8 <prov_recv+0x28>
	    !bt_mesh_prov_link.role->op[type]) {
   18ec0:	1d0c      	adds	r4, r1, #4
   18ec2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   18ec6:	b914      	cbnz	r4, 18ece <prov_recv+0x2e>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   18ec8:	689b      	ldr	r3, [r3, #8]
   18eca:	2003      	movs	r0, #3
   18ecc:	e7f1      	b.n	18eb2 <prov_recv+0x12>
	if (1 + op_len[type] != buf->len) {
   18ece:	4d07      	ldr	r5, [pc, #28]	; (18eec <prov_recv+0x4c>)
   18ed0:	8892      	ldrh	r2, [r2, #4]
   18ed2:	5c69      	ldrb	r1, [r5, r1]
   18ed4:	3101      	adds	r1, #1
   18ed6:	4291      	cmp	r1, r2
   18ed8:	d002      	beq.n	18ee0 <prov_recv+0x40>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   18eda:	689b      	ldr	r3, [r3, #8]
   18edc:	2002      	movs	r0, #2
   18ede:	e7e8      	b.n	18eb2 <prov_recv+0x12>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   18ee0:	4623      	mov	r3, r4
   18ee2:	3001      	adds	r0, #1
}
   18ee4:	bc30      	pop	{r4, r5}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   18ee6:	4718      	bx	r3
   18ee8:	20002784 	.word	0x20002784
   18eec:	000277d2 	.word	0x000277d2

00018ef0 <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   18ef0:	4b07      	ldr	r3, [pc, #28]	; (18f10 <prov_link_closed+0x20>)
   18ef2:	689b      	ldr	r3, [r3, #8]
   18ef4:	685b      	ldr	r3, [r3, #4]
{
   18ef6:	b510      	push	{r4, lr}
   18ef8:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   18efa:	b103      	cbz	r3, 18efe <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   18efc:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   18efe:	4b05      	ldr	r3, [pc, #20]	; (18f14 <prov_link_closed+0x24>)
   18f00:	681b      	ldr	r3, [r3, #0]
   18f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18f04:	b11b      	cbz	r3, 18f0e <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   18f06:	7820      	ldrb	r0, [r4, #0]
	}
}
   18f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   18f0c:	4718      	bx	r3
}
   18f0e:	bd10      	pop	{r4, pc}
   18f10:	20002784 	.word	0x20002784
   18f14:	20002780 	.word	0x20002780

00018f18 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   18f18:	4b03      	ldr	r3, [pc, #12]	; (18f28 <prov_bearer_error+0x10>)
   18f1a:	689b      	ldr	r3, [r3, #8]
   18f1c:	689b      	ldr	r3, [r3, #8]
{
   18f1e:	4610      	mov	r0, r2
	if (bt_mesh_prov_link.role->error) {
   18f20:	b103      	cbz	r3, 18f24 <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   18f22:	4718      	bx	r3
	}
}
   18f24:	4770      	bx	lr
   18f26:	bf00      	nop
   18f28:	20002784 	.word	0x20002784

00018f2c <get_auth_string>:
{
   18f2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18f30:	4607      	mov	r7, r0
   18f32:	460c      	mov	r4, r1
	bt_rand(&value, sizeof(value));
   18f34:	4668      	mov	r0, sp
   18f36:	2108      	movs	r1, #8
   18f38:	f004 fb38 	bl	1d5ac <bt_rand>
	for (int i = 0; i < size; i++) {
   18f3c:	e9dd 6500 	ldrd	r6, r5, [sp]
   18f40:	2300      	movs	r3, #0
		str[i] = characters[idx];
   18f42:	f8df a060 	ldr.w	sl, [pc, #96]	; 18fa4 <get_auth_string+0x78>
	for (int i = 0; i < size; i++) {
   18f46:	4698      	mov	r8, r3
   18f48:	4544      	cmp	r4, r8
   18f4a:	dc13      	bgt.n	18f74 <get_auth_string+0x48>
   18f4c:	b10b      	cbz	r3, 18f52 <get_auth_string+0x26>
   18f4e:	e9cd 6500 	strd	r6, r5, [sp]
	memcpy(bt_mesh_prov_link.auth, str, size);
   18f52:	4d15      	ldr	r5, [pc, #84]	; (18fa8 <get_auth_string+0x7c>)
	str[size] = '\0';
   18f54:	2600      	movs	r6, #0
	memcpy(bt_mesh_prov_link.auth, str, size);
   18f56:	4622      	mov	r2, r4
   18f58:	4639      	mov	r1, r7
	str[size] = '\0';
   18f5a:	553e      	strb	r6, [r7, r4]
	memcpy(bt_mesh_prov_link.auth, str, size);
   18f5c:	4628      	mov	r0, r5
   18f5e:	f008 fd4b 	bl	219f8 <memcpy>
	memset(bt_mesh_prov_link.auth + size, 0,
   18f62:	f1c4 0210 	rsb	r2, r4, #16
   18f66:	4631      	mov	r1, r6
   18f68:	1928      	adds	r0, r5, r4
   18f6a:	f008 fd50 	bl	21a0e <memset>
}
   18f6e:	b002      	add	sp, #8
   18f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int idx = value % 36;
   18f74:	4630      	mov	r0, r6
   18f76:	4629      	mov	r1, r5
   18f78:	2224      	movs	r2, #36	; 0x24
   18f7a:	2300      	movs	r3, #0
   18f7c:	f7e7 f8c0 	bl	100 <__aeabi_uldivmod>
		value = value / 36;
   18f80:	2300      	movs	r3, #0
		int idx = value % 36;
   18f82:	4691      	mov	r9, r2
		value = value / 36;
   18f84:	4630      	mov	r0, r6
   18f86:	4629      	mov	r1, r5
   18f88:	2224      	movs	r2, #36	; 0x24
   18f8a:	f7e7 f8b9 	bl	100 <__aeabi_uldivmod>
		str[i] = characters[idx];
   18f8e:	f81a 3009 	ldrb.w	r3, [sl, r9]
   18f92:	f807 3008 	strb.w	r3, [r7, r8]
		value = value / 36;
   18f96:	4606      	mov	r6, r0
   18f98:	460d      	mov	r5, r1
	for (int i = 0; i < size; i++) {
   18f9a:	f108 0801 	add.w	r8, r8, #1
   18f9e:	2301      	movs	r3, #1
   18fa0:	e7d2      	b.n	18f48 <get_auth_string+0x1c>
   18fa2:	bf00      	nop
   18fa4:	000277ae 	.word	0x000277ae
   18fa8:	20002793 	.word	0x20002793

00018fac <get_auth_number>:
{
   18fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint32_t divider[PROV_IO_OOB_SIZE_MAX] = { 10, 100, 1000, 10000,
   18fae:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1903c <get_auth_number+0x90>
{
   18fb2:	4607      	mov	r7, r0
   18fb4:	4614      	mov	r4, r2
   18fb6:	460e      	mov	r6, r1
	const uint32_t divider[PROV_IO_OOB_SIZE_MAX] = { 10, 100, 1000, 10000,
   18fb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
{
   18fbc:	b08b      	sub	sp, #44	; 0x2c
	const uint32_t divider[PROV_IO_OOB_SIZE_MAX] = { 10, 100, 1000, 10000,
   18fbe:	ad02      	add	r5, sp, #8
   18fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18fc2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   18fc6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	bt_rand(&num, sizeof(num));
   18fca:	2104      	movs	r1, #4
	uint32_t num = 0;
   18fcc:	2300      	movs	r3, #0
	bt_rand(&num, sizeof(num));
   18fce:	eb0d 0001 	add.w	r0, sp, r1
	uint32_t num = 0;
   18fd2:	9301      	str	r3, [sp, #4]
	bt_rand(&num, sizeof(num));
   18fd4:	f004 faea 	bl	1d5ac <bt_rand>
	if (output == BT_MESH_BLINK ||
   18fd8:	1e7b      	subs	r3, r7, #1
		num %= divider[size - 1];
   18fda:	1e62      	subs	r2, r4, #1
	if (output == BT_MESH_BLINK ||
   18fdc:	2b01      	cmp	r3, #1
   18fde:	ea4f 0282 	mov.w	r2, r2, lsl #2
   18fe2:	9b01      	ldr	r3, [sp, #4]
   18fe4:	d908      	bls.n	18ff8 <get_auth_number+0x4c>
		num %= divider[size - 1];
   18fe6:	a90a      	add	r1, sp, #40	; 0x28
   18fe8:	4411      	add	r1, r2
	    output == BT_MESH_BEEP ||
   18fea:	2f04      	cmp	r7, #4
		num %= divider[size - 1];
   18fec:	f851 1c20 	ldr.w	r1, [r1, #-32]
	    output == BT_MESH_BEEP ||
   18ff0:	d002      	beq.n	18ff8 <get_auth_number+0x4c>
	    output == BT_MESH_VIBRATE ||
   18ff2:	3e01      	subs	r6, #1
   18ff4:	2e01      	cmp	r6, #1
   18ff6:	d81b      	bhi.n	19030 <get_auth_number+0x84>
		num = (num % (divider[size - 1] - 1)) + 1;
   18ff8:	a90a      	add	r1, sp, #40	; 0x28
   18ffa:	440a      	add	r2, r1
   18ffc:	f852 2c20 	ldr.w	r2, [r2, #-32]
   19000:	3a01      	subs	r2, #1
   19002:	fbb3 f1f2 	udiv	r1, r3, r2
   19006:	fb02 3311 	mls	r3, r2, r1, r3
   1900a:	3301      	adds	r3, #1
	dst[0] = val >> 8;
   1900c:	480c      	ldr	r0, [pc, #48]	; (19040 <get_auth_number+0x94>)
   1900e:	9301      	str	r3, [sp, #4]
	sys_put_be16(val >> 16, dst);
   19010:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   19012:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   19014:	7702      	strb	r2, [r0, #28]
	dst[0] = val >> 8;
   19016:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1901a:	76c1      	strb	r1, [r0, #27]
   1901c:	7742      	strb	r2, [r0, #29]
	dst[1] = val;
   1901e:	7783      	strb	r3, [r0, #30]
	memset(bt_mesh_prov_link.auth, 0, 12);
   19020:	220c      	movs	r2, #12
   19022:	2100      	movs	r1, #0
   19024:	300f      	adds	r0, #15
   19026:	f008 fcf2 	bl	21a0e <memset>
}
   1902a:	9801      	ldr	r0, [sp, #4]
   1902c:	b00b      	add	sp, #44	; 0x2c
   1902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		num %= divider[size - 1];
   19030:	fbb3 f2f1 	udiv	r2, r3, r1
   19034:	fb01 3312 	mls	r3, r1, r2, r3
   19038:	e7e8      	b.n	1900c <get_auth_number+0x60>
   1903a:	bf00      	nop
   1903c:	000265bc 	.word	0x000265bc
   19040:	20002784 	.word	0x20002784

00019044 <atomic_or.constprop.0.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19044:	4b06      	ldr	r3, [pc, #24]	; (19060 <atomic_or.constprop.0.isra.0+0x1c>)
   19046:	f3bf 8f5b 	dmb	ish
   1904a:	e853 2f00 	ldrex	r2, [r3]
   1904e:	4302      	orrs	r2, r0
   19050:	e843 2100 	strex	r1, r2, [r3]
   19054:	2900      	cmp	r1, #0
   19056:	d1f8      	bne.n	1904a <atomic_or.constprop.0.isra.0+0x6>
   19058:	f3bf 8f5b 	dmb	ish
}
   1905c:	4770      	bx	lr
   1905e:	bf00      	nop
   19060:	20002784 	.word	0x20002784

00019064 <prov_link_opened>:
{
   19064:	b510      	push	{r4, lr}
   19066:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19068:	2002      	movs	r0, #2
   1906a:	f7ff ffeb 	bl	19044 <atomic_or.constprop.0.isra.0>
	if (bt_mesh_prov->link_open) {
   1906e:	4b07      	ldr	r3, [pc, #28]	; (1908c <prov_link_opened+0x28>)
   19070:	681b      	ldr	r3, [r3, #0]
   19072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19074:	b10b      	cbz	r3, 1907a <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   19076:	7820      	ldrb	r0, [r4, #0]
   19078:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   1907a:	4b05      	ldr	r3, [pc, #20]	; (19090 <prov_link_opened+0x2c>)
   1907c:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   1907e:	689b      	ldr	r3, [r3, #8]
   19080:	681b      	ldr	r3, [r3, #0]
   19082:	b113      	cbz	r3, 1908a <prov_link_opened+0x26>
}
   19084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   19088:	4718      	bx	r3
}
   1908a:	bd10      	pop	{r4, pc}
   1908c:	20002780 	.word	0x20002780
   19090:	20002784 	.word	0x20002784

00019094 <bt_mesh_prov_reset_state>:
	pub_key_cb.func = func ? func : pub_key_ready;
   19094:	4b11      	ldr	r3, [pc, #68]	; (190dc <bt_mesh_prov_reset_state+0x48>)
   19096:	4a12      	ldr	r2, [pc, #72]	; (190e0 <bt_mesh_prov_reset_state+0x4c>)
{
   19098:	b510      	push	{r4, lr}
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
   1909a:	4c12      	ldr	r4, [pc, #72]	; (190e4 <bt_mesh_prov_reset_state+0x50>)
	pub_key_cb.func = func ? func : pub_key_ready;
   1909c:	2800      	cmp	r0, #0
   1909e:	bf18      	it	ne
   190a0:	4603      	movne	r3, r0
   190a2:	6013      	str	r3, [r2, #0]
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
   190a4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   190a8:	b11b      	cbz	r3, 190b2 <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   190aa:	2100      	movs	r1, #0
   190ac:	4608      	mov	r0, r1
   190ae:	f7ff fb89 	bl	187c4 <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   190b2:	f3bf 8f5b 	dmb	ish
   190b6:	2100      	movs	r1, #0
   190b8:	e854 3f00 	ldrex	r3, [r4]
   190bc:	e844 1200 	strex	r2, r1, [r4]
   190c0:	2a00      	cmp	r2, #0
   190c2:	d1f9      	bne.n	190b8 <bt_mesh_prov_reset_state+0x24>
   190c4:	f3bf 8f5b 	dmb	ish
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   190c8:	4807      	ldr	r0, [pc, #28]	; (190e8 <bt_mesh_prov_reset_state+0x54>)
   190ca:	f240 1215 	movw	r2, #277	; 0x115
   190ce:	f008 fc9e 	bl	21a0e <memset>
}
   190d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = bt_pub_key_gen(&pub_key_cb);
   190d6:	4802      	ldr	r0, [pc, #8]	; (190e0 <bt_mesh_prov_reset_state+0x4c>)
   190d8:	f7fb bb28 	b.w	1472c <bt_pub_key_gen>
   190dc:	00024945 	.word	0x00024945
   190e0:	200028a8 	.word	0x200028a8
   190e4:	20002784 	.word	0x20002784
   190e8:	20002793 	.word	0x20002793

000190ec <bt_mesh_prov_auth>:
{
   190ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   190ee:	4606      	mov	r6, r0
   190f0:	b085      	sub	sp, #20
   190f2:	4614      	mov	r4, r2
   190f4:	461d      	mov	r5, r3
	switch (method) {
   190f6:	2903      	cmp	r1, #3
   190f8:	d878      	bhi.n	191ec <bt_mesh_prov_auth+0x100>
   190fa:	e8df f001 	tbb	[pc, r1]
   190fe:	0c02      	.short	0x0c02
   19100:	5013      	.short	0x5013
		if (action || size) {
   19102:	432c      	orrs	r4, r5
   19104:	d172      	bne.n	191ec <bt_mesh_prov_auth+0x100>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   19106:	4844      	ldr	r0, [pc, #272]	; (19218 <bt_mesh_prov_auth+0x12c>)
   19108:	2210      	movs	r2, #16
   1910a:	4621      	mov	r1, r4
   1910c:	f008 fc7f 	bl	21a0e <memset>
		return 0;
   19110:	4620      	mov	r0, r4
}
   19112:	b005      	add	sp, #20
   19114:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (action || size) {
   19116:	432c      	orrs	r4, r5
   19118:	d168      	bne.n	191ec <bt_mesh_prov_auth+0x100>
   1911a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1911e:	f7ff ff91 	bl	19044 <atomic_or.constprop.0.isra.0>
   19122:	e7f5      	b.n	19110 <bt_mesh_prov_auth+0x24>
	switch (action) {
   19124:	2a04      	cmp	r2, #4
   19126:	d85f      	bhi.n	191e8 <bt_mesh_prov_auth+0xfc>
   19128:	4b3c      	ldr	r3, [pc, #240]	; (1921c <bt_mesh_prov_auth+0x130>)
   1912a:	5c9c      	ldrb	r4, [r3, r2]
		if (is_provisioner) {
   1912c:	b170      	cbz	r0, 1914c <bt_mesh_prov_auth+0x60>
			if (output == BT_MESH_DISPLAY_STRING) {
   1912e:	2c10      	cmp	r4, #16
   19130:	d10a      	bne.n	19148 <bt_mesh_prov_auth+0x5c>
   19132:	2008      	movs	r0, #8
   19134:	f7ff ff86 	bl	19044 <atomic_or.constprop.0.isra.0>
			return bt_mesh_prov->input(input, size);
   19138:	4b39      	ldr	r3, [pc, #228]	; (19220 <bt_mesh_prov_auth+0x134>)
   1913a:	681b      	ldr	r3, [r3, #0]
   1913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1913e:	4629      	mov	r1, r5
}
   19140:	b005      	add	sp, #20
   19142:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return bt_mesh_prov->input(input, size);
   19146:	4718      	bx	r3
   19148:	2004      	movs	r0, #4
   1914a:	e7f3      	b.n	19134 <bt_mesh_prov_auth+0x48>
	if (!output) {
   1914c:	2c00      	cmp	r4, #0
   1914e:	d04d      	beq.n	191ec <bt_mesh_prov_auth+0x100>
	if (!(bt_mesh_prov->output_actions & output)) {
   19150:	4f33      	ldr	r7, [pc, #204]	; (19220 <bt_mesh_prov_auth+0x134>)
   19152:	683b      	ldr	r3, [r7, #0]
   19154:	8b5a      	ldrh	r2, [r3, #26]
   19156:	4222      	tst	r2, r4
   19158:	d048      	beq.n	191ec <bt_mesh_prov_auth+0x100>
	if (size > bt_mesh_prov->output_size) {
   1915a:	7e5b      	ldrb	r3, [r3, #25]
   1915c:	42ab      	cmp	r3, r5
   1915e:	d345      	bcc.n	191ec <bt_mesh_prov_auth+0x100>
		if (output == BT_MESH_DISPLAY_STRING) {
   19160:	2c10      	cmp	r4, #16
   19162:	d10b      	bne.n	1917c <bt_mesh_prov_auth+0x90>
   19164:	4620      	mov	r0, r4
   19166:	f7ff ff6d 	bl	19044 <atomic_or.constprop.0.isra.0>
			get_auth_string(str, size);
   1916a:	4629      	mov	r1, r5
   1916c:	a801      	add	r0, sp, #4
   1916e:	f7ff fedd 	bl	18f2c <get_auth_string>
			return bt_mesh_prov->output_string(str);
   19172:	683b      	ldr	r3, [r7, #0]
			return bt_mesh_prov->output_string(str);
   19174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19176:	a801      	add	r0, sp, #4
   19178:	4798      	blx	r3
   1917a:	e7ca      	b.n	19112 <bt_mesh_prov_auth+0x26>
   1917c:	2010      	movs	r0, #16
   1917e:	f7ff ff61 	bl	19044 <atomic_or.constprop.0.isra.0>
		return bt_mesh_prov->output_number(output,
   19182:	683b      	ldr	r3, [r7, #0]
   19184:	4631      	mov	r1, r6
   19186:	462a      	mov	r2, r5
   19188:	4620      	mov	r0, r4
   1918a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
   1918c:	f7ff ff0e 	bl	18fac <get_auth_number>
   19190:	463b      	mov	r3, r7
   19192:	4601      	mov	r1, r0
   19194:	4620      	mov	r0, r4
}
   19196:	b005      	add	sp, #20
   19198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_mesh_prov->output_number(output,
   1919c:	4718      	bx	r3
	switch (action) {
   1919e:	2a03      	cmp	r2, #3
   191a0:	d827      	bhi.n	191f2 <bt_mesh_prov_auth+0x106>
   191a2:	4b20      	ldr	r3, [pc, #128]	; (19224 <bt_mesh_prov_auth+0x138>)
   191a4:	5c9c      	ldrb	r4, [r3, r2]
		if (!is_provisioner) {
   191a6:	b998      	cbnz	r0, 191d0 <bt_mesh_prov_auth+0xe4>
	if (!input) {
   191a8:	b304      	cbz	r4, 191ec <bt_mesh_prov_auth+0x100>
	if (!(bt_mesh_prov->input_actions & input)) {
   191aa:	4e1d      	ldr	r6, [pc, #116]	; (19220 <bt_mesh_prov_auth+0x134>)
   191ac:	6833      	ldr	r3, [r6, #0]
   191ae:	8bda      	ldrh	r2, [r3, #30]
   191b0:	4222      	tst	r2, r4
   191b2:	d01b      	beq.n	191ec <bt_mesh_prov_auth+0x100>
	if (size > bt_mesh_prov->input_size) {
   191b4:	7f1b      	ldrb	r3, [r3, #28]
   191b6:	42ab      	cmp	r3, r5
   191b8:	d318      	bcc.n	191ec <bt_mesh_prov_auth+0x100>
			if (input == BT_MESH_ENTER_STRING) {
   191ba:	2c08      	cmp	r4, #8
   191bc:	bf0c      	ite	eq
   191be:	4620      	moveq	r0, r4
   191c0:	2004      	movne	r0, #4
   191c2:	f7ff ff3f 	bl	19044 <atomic_or.constprop.0.isra.0>
			return bt_mesh_prov->input(input, size);
   191c6:	6833      	ldr	r3, [r6, #0]
   191c8:	4629      	mov	r1, r5
   191ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   191cc:	4620      	mov	r0, r4
   191ce:	e7b7      	b.n	19140 <bt_mesh_prov_auth+0x54>
		if (input == BT_MESH_ENTER_STRING) {
   191d0:	2c08      	cmp	r4, #8
   191d2:	d111      	bne.n	191f8 <bt_mesh_prov_auth+0x10c>
   191d4:	2010      	movs	r0, #16
   191d6:	f7ff ff35 	bl	19044 <atomic_or.constprop.0.isra.0>
			get_auth_string(str, size);
   191da:	4629      	mov	r1, r5
   191dc:	a801      	add	r0, sp, #4
   191de:	f7ff fea5 	bl	18f2c <get_auth_string>
			return bt_mesh_prov->output_string(str);
   191e2:	4b0f      	ldr	r3, [pc, #60]	; (19220 <bt_mesh_prov_auth+0x134>)
   191e4:	681b      	ldr	r3, [r3, #0]
   191e6:	e7c5      	b.n	19174 <bt_mesh_prov_auth+0x88>
		if (is_provisioner) {
   191e8:	2800      	cmp	r0, #0
   191ea:	d1ad      	bne.n	19148 <bt_mesh_prov_auth+0x5c>
			return -EINVAL;
   191ec:	f06f 0015 	mvn.w	r0, #21
   191f0:	e78f      	b.n	19112 <bt_mesh_prov_auth+0x26>
		if (!is_provisioner) {
   191f2:	2800      	cmp	r0, #0
   191f4:	d0fa      	beq.n	191ec <bt_mesh_prov_auth+0x100>
   191f6:	2400      	movs	r4, #0
   191f8:	2010      	movs	r0, #16
   191fa:	f7ff ff23 	bl	19044 <atomic_or.constprop.0.isra.0>
		return bt_mesh_prov->output_number(output,
   191fe:	4b08      	ldr	r3, [pc, #32]	; (19220 <bt_mesh_prov_auth+0x134>)
   19200:	681b      	ldr	r3, [r3, #0]
   19202:	4621      	mov	r1, r4
   19204:	462a      	mov	r2, r5
   19206:	2000      	movs	r0, #0
   19208:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   1920a:	f7ff fecf 	bl	18fac <get_auth_number>
   1920e:	4633      	mov	r3, r6
   19210:	4601      	mov	r1, r0
   19212:	2008      	movs	r0, #8
   19214:	e7bf      	b.n	19196 <bt_mesh_prov_auth+0xaa>
   19216:	bf00      	nop
   19218:	20002793 	.word	0x20002793
   1921c:	000277a5 	.word	0x000277a5
   19220:	20002780 	.word	0x20002780
   19224:	000277aa 	.word	0x000277aa

00019228 <bt_mesh_prov_get>:
}
   19228:	4b01      	ldr	r3, [pc, #4]	; (19230 <bt_mesh_prov_get+0x8>)
   1922a:	6818      	ldr	r0, [r3, #0]
   1922c:	4770      	bx	lr
   1922e:	bf00      	nop
   19230:	20002780 	.word	0x20002780

00019234 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19234:	4b04      	ldr	r3, [pc, #16]	; (19248 <bt_mesh_prov_active+0x14>)
   19236:	f3bf 8f5b 	dmb	ish
   1923a:	6818      	ldr	r0, [r3, #0]
   1923c:	f3bf 8f5b 	dmb	ish
}
   19240:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19244:	4770      	bx	lr
   19246:	bf00      	nop
   19248:	20002784 	.word	0x20002784

0001924c <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   1924c:	4800      	ldr	r0, [pc, #0]	; (19250 <bt_mesh_prov_bearer_cb_get+0x4>)
   1924e:	4770      	bx	lr
   19250:	00026b58 	.word	0x00026b58

00019254 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   19254:	4b02      	ldr	r3, [pc, #8]	; (19260 <bt_mesh_prov_complete+0xc>)
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1925a:	b103      	cbz	r3, 1925e <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   1925c:	4718      	bx	r3
	}
}
   1925e:	4770      	bx	lr
   19260:	20002780 	.word	0x20002780

00019264 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   19264:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   19266:	f00b fbc1 	bl	249ec <pb_adv_reset>

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
	}

	bt_mesh_prov_reset_state(NULL);
   1926a:	2000      	movs	r0, #0
   1926c:	f7ff ff12 	bl	19094 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   19270:	4b03      	ldr	r3, [pc, #12]	; (19280 <bt_mesh_prov_reset+0x1c>)
   19272:	681b      	ldr	r3, [r3, #0]
   19274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19276:	b113      	cbz	r3, 1927e <bt_mesh_prov_reset+0x1a>
		bt_mesh_prov->reset();
	}
}
   19278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   1927c:	4718      	bx	r3
}
   1927e:	bd10      	pop	{r4, pc}
   19280:	20002780 	.word	0x20002780

00019284 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   19284:	b508      	push	{r3, lr}
	if (!prov_info) {
   19286:	b140      	cbz	r0, 1929a <bt_mesh_prov_init+0x16>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   19288:	4b05      	ldr	r3, [pc, #20]	; (192a0 <bt_mesh_prov_init+0x1c>)
   1928a:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   1928c:	f001 f886 	bl	1a39c <pb_adv_init>
	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
	}

	return bt_mesh_prov_reset_state(NULL);
}
   19290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   19294:	2000      	movs	r0, #0
   19296:	f7ff befd 	b.w	19094 <bt_mesh_prov_reset_state>
}
   1929a:	f06f 0015 	mvn.w	r0, #21
   1929e:	bd08      	pop	{r3, pc}
   192a0:	20002780 	.word	0x20002780

000192a4 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   192a4:	4b02      	ldr	r3, [pc, #8]	; (192b0 <bt_mesh_prov_send+0xc>)
   192a6:	685b      	ldr	r3, [r3, #4]
   192a8:	2200      	movs	r2, #0
   192aa:	689b      	ldr	r3, [r3, #8]
   192ac:	4718      	bx	r3
   192ae:	bf00      	nop
   192b0:	20002784 	.word	0x20002784

000192b4 <prov_link_close>:
}

static void prov_link_close(enum prov_bearer_link_status status)
{
	BT_DBG("%u", status);
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   192b4:	4b03      	ldr	r3, [pc, #12]	; (192c4 <prov_link_close+0x10>)
   192b6:	22ff      	movs	r2, #255	; 0xff
   192b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	bt_mesh_prov_link.bearer->link_close(status);
   192bc:	685b      	ldr	r3, [r3, #4]
   192be:	695b      	ldr	r3, [r3, #20]
   192c0:	4718      	bx	r3
   192c2:	bf00      	nop
   192c4:	20002784 	.word	0x20002784

000192c8 <send_confirm>:

	send_start();
}

static void send_confirm(void)
{
   192c8:	b510      	push	{r4, lr}

	BT_DBG("ConfInputs[0]   %s", bt_hex(inputs, 64));
	BT_DBG("ConfInputs[64]  %s", bt_hex(&inputs[64], 64));
	BT_DBG("ConfInputs[128] %s", bt_hex(&inputs[128], 17));

	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   192ca:	4920      	ldr	r1, [pc, #128]	; (1934c <send_confirm+0x84>)
{
   192cc:	b088      	sub	sp, #32
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   192ce:	ab03      	add	r3, sp, #12
   192d0:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   192d4:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   192d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   192dc:	9300      	str	r3, [sp, #0]
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   192de:	f009 fd60 	bl	22da2 <bt_mesh_prov_conf_salt>
   192e2:	b120      	cbz	r0, 192ee <send_confirm+0x26>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   192e4:	2002      	movs	r0, #2
   192e6:	f7ff ffe5 	bl	192b4 <prov_link_close>
		BT_ERR("Failed to send Provisioning Confirm");
		return;
	}

	bt_mesh_prov_link.expect = PROV_CONFIRM;
}
   192ea:	b008      	add	sp, #32
   192ec:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey,
   192ee:	4a18      	ldr	r2, [pc, #96]	; (19350 <send_confirm+0x88>)
   192f0:	f1a2 0110 	sub.w	r1, r2, #16
   192f4:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   192f8:	f7fe fc3c 	bl	17b74 <bt_mesh_prov_conf_key>
   192fc:	2800      	cmp	r0, #0
   192fe:	d1f1      	bne.n	192e4 <send_confirm+0x1c>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   19300:	4814      	ldr	r0, [pc, #80]	; (19354 <send_confirm+0x8c>)
   19302:	2110      	movs	r1, #16
   19304:	f004 f952 	bl	1d5ac <bt_rand>
   19308:	2800      	cmp	r0, #0
   1930a:	d1eb      	bne.n	192e4 <send_confirm+0x1c>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   1930c:	2105      	movs	r1, #5
   1930e:	4668      	mov	r0, sp
   19310:	f00b fb2b 	bl	2496a <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key,
   19314:	4b10      	ldr	r3, [pc, #64]	; (19358 <send_confirm+0x90>)
   19316:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1931a:	f103 0110 	add.w	r1, r3, #16
   1931e:	f103 0030 	add.w	r0, r3, #48	; 0x30
   19322:	f009 fd4d 	bl	22dc0 <bt_mesh_prov_conf>
   19326:	4604      	mov	r4, r0
   19328:	2800      	cmp	r0, #0
   1932a:	d1db      	bne.n	192e4 <send_confirm+0x1c>
	net_buf_simple_add_mem(&cfm, bt_mesh_prov_link.conf, 16);
   1932c:	490a      	ldr	r1, [pc, #40]	; (19358 <send_confirm+0x90>)
   1932e:	2210      	movs	r2, #16
   19330:	4668      	mov	r0, sp
   19332:	f00b fd7b 	bl	24e2c <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   19336:	4621      	mov	r1, r4
   19338:	4668      	mov	r0, sp
   1933a:	f7ff ffb3 	bl	192a4 <bt_mesh_prov_send>
   1933e:	2800      	cmp	r0, #0
   19340:	d1d3      	bne.n	192ea <send_confirm+0x22>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   19342:	4b06      	ldr	r3, [pc, #24]	; (1935c <send_confirm+0x94>)
   19344:	2205      	movs	r2, #5
   19346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1934a:	e7ce      	b.n	192ea <send_confirm+0x22>
   1934c:	200027e4 	.word	0x200027e4
   19350:	200027f4 	.word	0x200027f4
   19354:	200027d4 	.word	0x200027d4
   19358:	200027c4 	.word	0x200027c4
   1935c:	20002784 	.word	0x20002784

00019360 <prov_link_opened>:
{
	reset_state();
}

static void prov_link_opened(void)
{
   19360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	net_buf_simple_add_u8(&inv, prov_device.attention_duration);
   19362:	4c10      	ldr	r4, [pc, #64]	; (193a4 <prov_link_opened+0x44>)
	PROV_BUF(inv, PDU_LEN_INVITE);
   19364:	f8cd d004 	str.w	sp, [sp, #4]
   19368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	bt_mesh_prov_buf_init(&inv, PROV_INVITE);
   1936c:	2100      	movs	r1, #0
   1936e:	a801      	add	r0, sp, #4
	PROV_BUF(inv, PDU_LEN_INVITE);
   19370:	9302      	str	r3, [sp, #8]
   19372:	f8cd d00c 	str.w	sp, [sp, #12]
	bt_mesh_prov_buf_init(&inv, PROV_INVITE);
   19376:	f00b faf8 	bl	2496a <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&inv, prov_device.attention_duration);
   1937a:	7a21      	ldrb	r1, [r4, #8]
   1937c:	a801      	add	r0, sp, #4
   1937e:	f00b fd5e 	bl	24e3e <net_buf_simple_add_u8>
	memcpy(bt_mesh_prov_link.conf_inputs.invite, &prov_device.attention_duration,
   19382:	f104 0108 	add.w	r1, r4, #8
   19386:	4808      	ldr	r0, [pc, #32]	; (193a8 <prov_link_opened+0x48>)
   19388:	2201      	movs	r2, #1
   1938a:	f008 fb35 	bl	219f8 <memcpy>
	if (bt_mesh_prov_send(&inv, NULL)) {
   1938e:	2100      	movs	r1, #0
   19390:	a801      	add	r0, sp, #4
   19392:	f7ff ff87 	bl	192a4 <bt_mesh_prov_send>
   19396:	b918      	cbnz	r0, 193a0 <prov_link_opened+0x40>
	bt_mesh_prov_link.expect = PROV_CAPABILITIES;
   19398:	4b04      	ldr	r3, [pc, #16]	; (193ac <prov_link_opened+0x4c>)
   1939a:	2201      	movs	r2, #1
   1939c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	send_invite();
}
   193a0:	b004      	add	sp, #16
   193a2:	bd10      	pop	{r4, pc}
   193a4:	200028b0 	.word	0x200028b0
   193a8:	20002804 	.word	0x20002804
   193ac:	20002784 	.word	0x20002784

000193b0 <prov_complete>:
{
   193b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cdb_node *node = prov_device.node;
   193b2:	4d0b      	ldr	r5, [pc, #44]	; (193e0 <prov_complete+0x30>)
   193b4:	682c      	ldr	r4, [r5, #0]
		bt_mesh_cdb_node_store(node);
   193b6:	4620      	mov	r0, r4
   193b8:	f00b fc8e 	bl	24cd8 <bt_mesh_cdb_node_store>
	prov_device.node = NULL;
   193bc:	2000      	movs	r0, #0
   193be:	6028      	str	r0, [r5, #0]
	prov_link_close(PROV_BEARER_LINK_STATUS_SUCCESS);
   193c0:	f7ff ff78 	bl	192b4 <prov_link_close>
	if (bt_mesh_prov->node_added) {
   193c4:	4b07      	ldr	r3, [pc, #28]	; (193e4 <prov_complete+0x34>)
   193c6:	681b      	ldr	r3, [r3, #0]
   193c8:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   193ca:	b13d      	cbz	r5, 193dc <prov_complete+0x2c>
		bt_mesh_prov->node_added(node->net_idx, node->uuid, node->addr,
   193cc:	7d23      	ldrb	r3, [r4, #20]
   193ce:	8a22      	ldrh	r2, [r4, #16]
   193d0:	8a60      	ldrh	r0, [r4, #18]
   193d2:	4621      	mov	r1, r4
   193d4:	46ac      	mov	ip, r5
}
   193d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov->node_added(node->net_idx, node->uuid, node->addr,
   193da:	4760      	bx	ip
}
   193dc:	bd70      	pop	{r4, r5, r6, pc}
   193de:	bf00      	nop
   193e0:	200028b0 	.word	0x200028b0
   193e4:	20002780 	.word	0x20002780

000193e8 <prov_confirm>:
{
   193e8:	b510      	push	{r4, lr}
	if (!memcmp(data, bt_mesh_prov_link.conf, 16)) {
   193ea:	4916      	ldr	r1, [pc, #88]	; (19444 <prov_confirm+0x5c>)
{
   193ec:	b088      	sub	sp, #32
	if (!memcmp(data, bt_mesh_prov_link.conf, 16)) {
   193ee:	2210      	movs	r2, #16
{
   193f0:	4604      	mov	r4, r0
	if (!memcmp(data, bt_mesh_prov_link.conf, 16)) {
   193f2:	f008 faf0 	bl	219d6 <memcmp>
   193f6:	b928      	cbnz	r0, 19404 <prov_confirm+0x1c>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   193f8:	2002      	movs	r0, #2
}
   193fa:	b008      	add	sp, #32
   193fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   19400:	f7ff bf58 	b.w	192b4 <prov_link_close>
	memcpy(bt_mesh_prov_link.conf, data, 16);
   19404:	2210      	movs	r2, #16
   19406:	4621      	mov	r1, r4
   19408:	480e      	ldr	r0, [pc, #56]	; (19444 <prov_confirm+0x5c>)
   1940a:	f008 faf5 	bl	219f8 <memcpy>
	PROV_BUF(rnd, PDU_LEN_RANDOM);
   1940e:	ab03      	add	r3, sp, #12
   19410:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   19414:	2106      	movs	r1, #6
   19416:	4668      	mov	r0, sp
	PROV_BUF(rnd, PDU_LEN_RANDOM);
   19418:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1941c:	9300      	str	r3, [sp, #0]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   1941e:	f00b faa4 	bl	2496a <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   19422:	4909      	ldr	r1, [pc, #36]	; (19448 <prov_confirm+0x60>)
   19424:	2210      	movs	r2, #16
   19426:	4668      	mov	r0, sp
   19428:	f00b fd00 	bl	24e2c <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   1942c:	2100      	movs	r1, #0
   1942e:	4668      	mov	r0, sp
   19430:	f7ff ff38 	bl	192a4 <bt_mesh_prov_send>
   19434:	b918      	cbnz	r0, 1943e <prov_confirm+0x56>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   19436:	4b05      	ldr	r3, [pc, #20]	; (1944c <prov_confirm+0x64>)
   19438:	2206      	movs	r2, #6
   1943a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   1943e:	b008      	add	sp, #32
   19440:	bd10      	pop	{r4, pc}
   19442:	bf00      	nop
   19444:	200027c4 	.word	0x200027c4
   19448:	200027d4 	.word	0x200027d4
   1944c:	20002784 	.word	0x20002784

00019450 <prov_random>:
{
   19450:	b570      	push	{r4, r5, r6, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   19452:	494d      	ldr	r1, [pc, #308]	; (19588 <prov_random+0x138>)
{
   19454:	b09e      	sub	sp, #120	; 0x78
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   19456:	2210      	movs	r2, #16
{
   19458:	4604      	mov	r4, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1945a:	f008 fabc 	bl	219d6 <memcmp>
   1945e:	b918      	cbnz	r0, 19468 <prov_random+0x18>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   19460:	2002      	movs	r0, #2
   19462:	f7ff ff27 	bl	192b4 <prov_link_close>
		return;
   19466:	e08c      	b.n	19582 <prov_random+0x132>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key,
   19468:	4a48      	ldr	r2, [pc, #288]	; (1958c <prov_random+0x13c>)
   1946a:	ab09      	add	r3, sp, #36	; 0x24
   1946c:	4621      	mov	r1, r4
   1946e:	f102 0061 	add.w	r0, r2, #97	; 0x61
   19472:	f009 fca5 	bl	22dc0 <bt_mesh_prov_conf>
   19476:	2800      	cmp	r0, #0
   19478:	d1f2      	bne.n	19460 <prov_random+0x10>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   1947a:	4945      	ldr	r1, [pc, #276]	; (19590 <prov_random+0x140>)
   1947c:	2210      	movs	r2, #16
   1947e:	a809      	add	r0, sp, #36	; 0x24
   19480:	f008 faa9 	bl	219d6 <memcmp>
   19484:	2800      	cmp	r0, #0
   19486:	d1eb      	bne.n	19460 <prov_random+0x10>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt,
   19488:	4b42      	ldr	r3, [pc, #264]	; (19594 <prov_random+0x144>)
   1948a:	4622      	mov	r2, r4
   1948c:	f1a3 01c1 	sub.w	r1, r3, #193	; 0xc1
   19490:	f1a3 00b1 	sub.w	r0, r3, #177	; 0xb1
   19494:	f009 fc6f 	bl	22d76 <bt_mesh_prov_salt>
   19498:	2800      	cmp	r0, #0
   1949a:	d1e1      	bne.n	19460 <prov_random+0x10>
	PROV_BUF(pdu, PDU_LEN_DATA);
   1949c:	ab15      	add	r3, sp, #84	; 0x54
   1949e:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   194a2:	e9cd 2303 	strd	r2, r3, [sp, #12]

static inline int bt_mesh_session_key(const uint8_t dhkey[32],
				      const uint8_t prov_salt[16],
				      uint8_t session_key[16])
{
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   194a6:	4a3b      	ldr	r2, [pc, #236]	; (19594 <prov_random+0x144>)
   194a8:	9302      	str	r3, [sp, #8]
   194aa:	ae0d      	add	r6, sp, #52	; 0x34
   194ac:	4b3a      	ldr	r3, [pc, #232]	; (19598 <prov_random+0x148>)
   194ae:	9600      	str	r6, [sp, #0]
   194b0:	2120      	movs	r1, #32
   194b2:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   194b6:	f009 fb7c 	bl	22bb2 <bt_mesh_k1>
	if (err) {
   194ba:	2800      	cmp	r0, #0
   194bc:	d1d0      	bne.n	19460 <prov_random+0x10>
				      uint8_t nonce[13])
{
	uint8_t tmp[16];
	int err;

	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   194be:	4a35      	ldr	r2, [pc, #212]	; (19594 <prov_random+0x144>)
   194c0:	ab11      	add	r3, sp, #68	; 0x44
   194c2:	9300      	str	r3, [sp, #0]
   194c4:	2120      	movs	r1, #32
   194c6:	4b35      	ldr	r3, [pc, #212]	; (1959c <prov_random+0x14c>)
   194c8:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   194cc:	f009 fb71 	bl	22bb2 <bt_mesh_k1>
	if (!err) {
   194d0:	2800      	cmp	r0, #0
   194d2:	d1c5      	bne.n	19460 <prov_random+0x10>
			      bt_mesh_prov_link.prov_salt, prov_device.node->dev_key);
   194d4:	4d32      	ldr	r5, [pc, #200]	; (195a0 <prov_random+0x150>)
		memcpy(nonce, tmp + 3, 13);
   194d6:	220d      	movs	r2, #13
   194d8:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   194dc:	a805      	add	r0, sp, #20
   194de:	f008 fa8b 	bl	219f8 <memcpy>
   194e2:	682b      	ldr	r3, [r5, #0]

static inline int bt_mesh_dev_key(const uint8_t dhkey[32],
				  const uint8_t prov_salt[16],
				  uint8_t dev_key[16])
{
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   194e4:	4a2b      	ldr	r2, [pc, #172]	; (19594 <prov_random+0x144>)
   194e6:	3315      	adds	r3, #21
   194e8:	9300      	str	r3, [sp, #0]
   194ea:	2120      	movs	r1, #32
   194ec:	4b2d      	ldr	r3, [pc, #180]	; (195a4 <prov_random+0x154>)
   194ee:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   194f2:	f009 fb5e 	bl	22bb2 <bt_mesh_k1>
	if (err) {
   194f6:	2800      	cmp	r0, #0
   194f8:	d1b2      	bne.n	19460 <prov_random+0x10>
	sub = bt_mesh_cdb_subnet_get(prov_device.node->net_idx);
   194fa:	682b      	ldr	r3, [r5, #0]
   194fc:	8a58      	ldrh	r0, [r3, #18]
   194fe:	f001 ffab 	bl	1b458 <bt_mesh_cdb_subnet_get>
	if (sub == NULL) {
   19502:	4604      	mov	r4, r0
   19504:	2800      	cmp	r0, #0
   19506:	d0ab      	beq.n	19460 <prov_random+0x10>
	bt_mesh_prov_buf_init(&pdu, PROV_DATA);
   19508:	2107      	movs	r1, #7
   1950a:	a802      	add	r0, sp, #8
   1950c:	f00b fa2d 	bl	2496a <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&pdu, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_key, 16);
   19510:	78a1      	ldrb	r1, [r4, #2]
   19512:	1e8b      	subs	r3, r1, #2
   19514:	4259      	negs	r1, r3
   19516:	4159      	adcs	r1, r3
   19518:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   1951c:	2210      	movs	r2, #16
   1951e:	3103      	adds	r1, #3
   19520:	a802      	add	r0, sp, #8
   19522:	f00b fc83 	bl	24e2c <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&pdu, prov_device.node->net_idx);
   19526:	682b      	ldr	r3, [r5, #0]
   19528:	a802      	add	r0, sp, #8
   1952a:	8a59      	ldrh	r1, [r3, #18]
   1952c:	f00b fc99 	bl	24e62 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&pdu, bt_mesh_cdb_subnet_flags(sub));
   19530:	4620      	mov	r0, r4
   19532:	f001 fffd 	bl	1b530 <bt_mesh_cdb_subnet_flags>
   19536:	4601      	mov	r1, r0
   19538:	a802      	add	r0, sp, #8
   1953a:	f00b fc80 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_be32(&pdu, bt_mesh_cdb.iv_index);
   1953e:	4b1a      	ldr	r3, [pc, #104]	; (195a8 <prov_random+0x158>)
   19540:	a802      	add	r0, sp, #8
   19542:	6819      	ldr	r1, [r3, #0]
   19544:	f00b fca4 	bl	24e90 <net_buf_simple_add_be32>
	net_buf_simple_add_be16(&pdu, prov_device.node->addr);
   19548:	682b      	ldr	r3, [r5, #0]
   1954a:	a802      	add	r0, sp, #8
   1954c:	8a19      	ldrh	r1, [r3, #16]
   1954e:	f00b fc88 	bl	24e62 <net_buf_simple_add_be16>
	net_buf_simple_add(&pdu, 8); /* For MIC */
   19552:	2108      	movs	r1, #8
   19554:	eb0d 0001 	add.w	r0, sp, r1
   19558:	f00b fc62 	bl	24e20 <net_buf_simple_add>
	err = bt_mesh_prov_encrypt(session_key, nonce, &pdu.data[1],
   1955c:	9b02      	ldr	r3, [sp, #8]
   1955e:	3301      	adds	r3, #1
   19560:	a905      	add	r1, sp, #20
   19562:	461a      	mov	r2, r3
   19564:	4630      	mov	r0, r6
   19566:	f009 fc38 	bl	22dda <bt_mesh_prov_encrypt>
	if (err) {
   1956a:	4601      	mov	r1, r0
   1956c:	2800      	cmp	r0, #0
   1956e:	f47f af77 	bne.w	19460 <prov_random+0x10>
	if (bt_mesh_prov_send(&pdu, NULL)) {
   19572:	a802      	add	r0, sp, #8
   19574:	f7ff fe96 	bl	192a4 <bt_mesh_prov_send>
   19578:	b918      	cbnz	r0, 19582 <prov_random+0x132>
	bt_mesh_prov_link.expect = PROV_COMPLETE;
   1957a:	4b0c      	ldr	r3, [pc, #48]	; (195ac <prov_random+0x15c>)
   1957c:	2208      	movs	r2, #8
   1957e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   19582:	b01e      	add	sp, #120	; 0x78
   19584:	bd70      	pop	{r4, r5, r6, pc}
   19586:	bf00      	nop
   19588:	200027d4 	.word	0x200027d4
   1958c:	20002793 	.word	0x20002793
   19590:	200027c4 	.word	0x200027c4
   19594:	20002895 	.word	0x20002895
   19598:	000277dc 	.word	0x000277dc
   1959c:	000277e1 	.word	0x000277e1
   195a0:	200028b0 	.word	0x200028b0
   195a4:	000277e6 	.word	0x000277e6
   195a8:	2000066c 	.word	0x2000066c
   195ac:	20002784 	.word	0x20002784

000195b0 <send_pub_key>:
{
   195b0:	b510      	push	{r4, lr}
   195b2:	b094      	sub	sp, #80	; 0x50
	PROV_BUF(buf, PDU_LEN_PUB_KEY);
   195b4:	ab03      	add	r3, sp, #12
   195b6:	f44f 0282 	mov.w	r2, #4259840	; 0x410000
   195ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
   195be:	9300      	str	r3, [sp, #0]
	key = bt_pub_key_get();
   195c0:	f7fb f91e 	bl	14800 <bt_pub_key_get>
	if (!key) {
   195c4:	4604      	mov	r4, r0
   195c6:	b920      	cbnz	r0, 195d2 <send_pub_key+0x22>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   195c8:	2002      	movs	r0, #2
   195ca:	f7ff fe73 	bl	192b4 <prov_link_close>
}
   195ce:	b014      	add	sp, #80	; 0x50
   195d0:	bd10      	pop	{r4, pc}
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   195d2:	2103      	movs	r1, #3
   195d4:	4668      	mov	r0, sp
   195d6:	f00b f9c8 	bl	2496a <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, BT_PUB_KEY_COORD_LEN), key, BT_PUB_KEY_COORD_LEN);
   195da:	2120      	movs	r1, #32
   195dc:	4668      	mov	r0, sp
   195de:	f00b fc1f 	bl	24e20 <net_buf_simple_add>
   195e2:	4621      	mov	r1, r4
   195e4:	f00b f9cd 	bl	24982 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(net_buf_simple_add(&buf, BT_PUB_KEY_COORD_LEN), &key[BT_PUB_KEY_COORD_LEN],
   195e8:	2120      	movs	r1, #32
   195ea:	4668      	mov	r0, sp
   195ec:	f00b fc18 	bl	24e20 <net_buf_simple_add>
   195f0:	f104 0120 	add.w	r1, r4, #32
   195f4:	f00b f9c5 	bl	24982 <sys_memcpy_swap.constprop.0>
	memcpy(bt_mesh_prov_link.conf_inputs.pub_key_provisioner, &buf.data[1], PDU_LEN_PUB_KEY);
   195f8:	9900      	ldr	r1, [sp, #0]
   195fa:	4808      	ldr	r0, [pc, #32]	; (1961c <send_pub_key+0x6c>)
   195fc:	3101      	adds	r1, #1
   195fe:	2240      	movs	r2, #64	; 0x40
   19600:	f008 f9fa 	bl	219f8 <memcpy>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   19604:	4906      	ldr	r1, [pc, #24]	; (19620 <send_pub_key+0x70>)
   19606:	4668      	mov	r0, sp
   19608:	f7ff fe4c 	bl	192a4 <bt_mesh_prov_send>
   1960c:	2800      	cmp	r0, #0
   1960e:	d1de      	bne.n	195ce <send_pub_key+0x1e>
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   19610:	4b04      	ldr	r3, [pc, #16]	; (19624 <send_pub_key+0x74>)
   19612:	2203      	movs	r2, #3
   19614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   19618:	e7d9      	b.n	195ce <send_pub_key+0x1e>
   1961a:	bf00      	nop
   1961c:	20002815 	.word	0x20002815
   19620:	00019899 	.word	0x00019899
   19624:	20002784 	.word	0x20002784

00019628 <start_sent>:
{
   19628:	b508      	push	{r3, lr}
	if (!bt_pub_key_get()) {
   1962a:	f7fb f8e9 	bl	14800 <bt_pub_key_get>
   1962e:	b928      	cbnz	r0, 1963c <start_sent+0x14>
}
   19630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19634:	4803      	ldr	r0, [pc, #12]	; (19644 <start_sent+0x1c>)
   19636:	2101      	movs	r1, #1
   19638:	f00b b988 	b.w	2494c <atomic_or>
   1963c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
   19640:	f7ff bfb6 	b.w	195b0 <send_pub_key>
   19644:	20002784 	.word	0x20002784

00019648 <prov_capabilities>:
{
   19648:	b530      	push	{r4, r5, lr}
	caps.algorithms = sys_get_be16(&data[1]);
   1964a:	f8b0 3001 	ldrh.w	r3, [r0, #1]
	caps.elem_count = data[0];
   1964e:	7802      	ldrb	r2, [r0, #0]
{
   19650:	b089      	sub	sp, #36	; 0x24
	caps.algorithms = sys_get_be16(&data[1]);
   19652:	ba5b      	rev16	r3, r3
   19654:	f8ad 300a 	strh.w	r3, [sp, #10]
	caps.pub_key_type = data[3];
   19658:	78c3      	ldrb	r3, [r0, #3]
   1965a:	f88d 300c 	strb.w	r3, [sp, #12]
	caps.static_oob = data[4];
   1965e:	7903      	ldrb	r3, [r0, #4]
   19660:	f88d 300d 	strb.w	r3, [sp, #13]
	caps.output_size = data[5];
   19664:	7943      	ldrb	r3, [r0, #5]
   19666:	f88d 3010 	strb.w	r3, [sp, #16]
	caps.output_actions = (bt_mesh_output_action_t)
   1966a:	88c3      	ldrh	r3, [r0, #6]
	caps.elem_count = data[0];
   1966c:	f88d 2008 	strb.w	r2, [sp, #8]
	caps.output_actions = (bt_mesh_output_action_t)
   19670:	ba5b      	rev16	r3, r3
   19672:	f88d 300e 	strb.w	r3, [sp, #14]
	caps.input_size = data[8];
   19676:	7a03      	ldrb	r3, [r0, #8]
   19678:	f88d 3011 	strb.w	r3, [sp, #17]
	caps.input_actions = (bt_mesh_input_action_t)
   1967c:	f8b0 3009 	ldrh.w	r3, [r0, #9]
   19680:	ba5b      	rev16	r3, r3
{
   19682:	4604      	mov	r4, r0
	caps.input_actions = (bt_mesh_input_action_t)
   19684:	f88d 300f 	strb.w	r3, [sp, #15]
	if (data[0] == 0) {
   19688:	b922      	cbnz	r2, 19694 <prov_capabilities+0x4c>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   1968a:	2002      	movs	r0, #2
   1968c:	f7ff fe12 	bl	192b4 <prov_link_close>
}
   19690:	b009      	add	sp, #36	; 0x24
   19692:	bd30      	pop	{r4, r5, pc}
		bt_mesh_cdb_node_alloc(prov_device.uuid,
   19694:	4d43      	ldr	r5, [pc, #268]	; (197a4 <prov_capabilities+0x15c>)
   19696:	88eb      	ldrh	r3, [r5, #6]
   19698:	88a9      	ldrh	r1, [r5, #4]
   1969a:	f105 0009 	add.w	r0, r5, #9
   1969e:	f001 ff59 	bl	1b554 <bt_mesh_cdb_node_alloc>
	prov_device.node =
   196a2:	6028      	str	r0, [r5, #0]
	if (prov_device.node == NULL) {
   196a4:	2800      	cmp	r0, #0
   196a6:	d0f0      	beq.n	1968a <prov_capabilities+0x42>
	if (bt_mesh_prov->capabilities) {
   196a8:	4d3f      	ldr	r5, [pc, #252]	; (197a8 <prov_capabilities+0x160>)
	memcpy(bt_mesh_prov_link.conf_inputs.capabilities, data, PDU_LEN_CAPABILITIES);
   196aa:	4840      	ldr	r0, [pc, #256]	; (197ac <prov_capabilities+0x164>)
   196ac:	220b      	movs	r2, #11
   196ae:	4621      	mov	r1, r4
   196b0:	f008 f9a2 	bl	219f8 <memcpy>
	if (bt_mesh_prov->capabilities) {
   196b4:	682b      	ldr	r3, [r5, #0]
   196b6:	6a1b      	ldr	r3, [r3, #32]
   196b8:	b10b      	cbz	r3, 196be <prov_capabilities+0x76>
		bt_mesh_prov->capabilities(&caps);
   196ba:	a802      	add	r0, sp, #8
   196bc:	4798      	blx	r3
	if (bt_mesh_prov_link.oob_method == AUTH_METHOD_STATIC) {
   196be:	4c3c      	ldr	r4, [pc, #240]	; (197b0 <prov_capabilities+0x168>)
   196c0:	7b23      	ldrb	r3, [r4, #12]
   196c2:	2b01      	cmp	r3, #1
   196c4:	d144      	bne.n	19750 <prov_capabilities+0x108>
		if (!caps->static_oob) {
   196c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if (!bt_mesh_prov->input) {
   196ca:	2b00      	cmp	r3, #0
   196cc:	d0dd      	beq.n	1968a <prov_capabilities+0x42>
	PROV_BUF(start, PDU_LEN_START);
   196ce:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
	bt_mesh_prov_buf_init(&start, PROV_START);
   196d2:	2102      	movs	r1, #2
   196d4:	a805      	add	r0, sp, #20
	PROV_BUF(start, PDU_LEN_START);
   196d6:	9306      	str	r3, [sp, #24]
	bool oob_pub_key = bt_mesh_prov_link.conf_inputs.capabilities[3] == PUB_KEY_OOB;
   196d8:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
	PROV_BUF(start, PDU_LEN_START);
   196dc:	f8cd d014 	str.w	sp, [sp, #20]
   196e0:	f8cd d01c 	str.w	sp, [sp, #28]
	bt_mesh_prov_buf_init(&start, PROV_START);
   196e4:	f00b f941 	bl	2496a <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&start, PROV_ALG_P256);
   196e8:	2100      	movs	r1, #0
   196ea:	a805      	add	r0, sp, #20
   196ec:	f00b fba7 	bl	24e3e <net_buf_simple_add_u8>
   196f0:	f3bf 8f5b 	dmb	ish
   196f4:	6823      	ldr	r3, [r4, #0]
   196f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, REMOTE_PUB_KEY) && oob_pub_key) {
   196fa:	05db      	lsls	r3, r3, #23
   196fc:	d54c      	bpl.n	19798 <prov_capabilities+0x150>
   196fe:	2d01      	cmp	r5, #1
   19700:	d14a      	bne.n	19798 <prov_capabilities+0x150>
		net_buf_simple_add_u8(&start, PUB_KEY_OOB);
   19702:	4629      	mov	r1, r5
   19704:	a805      	add	r0, sp, #20
   19706:	f00b fb9a 	bl	24e3e <net_buf_simple_add_u8>
   1970a:	4829      	ldr	r0, [pc, #164]	; (197b0 <prov_capabilities+0x168>)
   1970c:	2140      	movs	r1, #64	; 0x40
   1970e:	f00b f91d 	bl	2494c <atomic_or>
	net_buf_simple_add_u8(&start, bt_mesh_prov_link.oob_method);
   19712:	7b21      	ldrb	r1, [r4, #12]
   19714:	a805      	add	r0, sp, #20
   19716:	f00b fb92 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&start, bt_mesh_prov_link.oob_action);
   1971a:	7b61      	ldrb	r1, [r4, #13]
   1971c:	a805      	add	r0, sp, #20
   1971e:	f00b fb8e 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&start, bt_mesh_prov_link.oob_size);
   19722:	7ba1      	ldrb	r1, [r4, #14]
   19724:	a805      	add	r0, sp, #20
   19726:	f00b fb8a 	bl	24e3e <net_buf_simple_add_u8>
	memcpy(bt_mesh_prov_link.conf_inputs.start, &start.data[1], PDU_LEN_START);
   1972a:	9905      	ldr	r1, [sp, #20]
   1972c:	4821      	ldr	r0, [pc, #132]	; (197b4 <prov_capabilities+0x16c>)
   1972e:	2205      	movs	r2, #5
   19730:	3101      	adds	r1, #1
   19732:	f008 f961 	bl	219f8 <memcpy>
	if (bt_mesh_prov_auth(true, bt_mesh_prov_link.oob_method,
   19736:	7ba3      	ldrb	r3, [r4, #14]
   19738:	7b62      	ldrb	r2, [r4, #13]
   1973a:	7b21      	ldrb	r1, [r4, #12]
   1973c:	2001      	movs	r0, #1
   1973e:	f7ff fcd5 	bl	190ec <bt_mesh_prov_auth>
   19742:	2800      	cmp	r0, #0
   19744:	dba4      	blt.n	19690 <prov_capabilities+0x48>
	if (bt_mesh_prov_send(&start, start_sent)) {
   19746:	491c      	ldr	r1, [pc, #112]	; (197b8 <prov_capabilities+0x170>)
   19748:	a805      	add	r0, sp, #20
   1974a:	f7ff fdab 	bl	192a4 <bt_mesh_prov_send>
		return;
   1974e:	e79f      	b.n	19690 <prov_capabilities+0x48>
	} else if (bt_mesh_prov_link.oob_method == AUTH_METHOD_INPUT) {
   19750:	2b03      	cmp	r3, #3
   19752:	d110      	bne.n	19776 <prov_capabilities+0x12e>
		if (bt_mesh_prov_link.oob_size > caps->input_size) {
   19754:	7ba2      	ldrb	r2, [r4, #14]
   19756:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1975a:	429a      	cmp	r2, r3
   1975c:	d895      	bhi.n	1968a <prov_capabilities+0x42>
		if (!(BIT(bt_mesh_prov_link.oob_action) & caps->input_actions)) {
   1975e:	7b62      	ldrb	r2, [r4, #13]
   19760:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19764:	40d3      	lsrs	r3, r2
   19766:	07d9      	lsls	r1, r3, #31
   19768:	d58f      	bpl.n	1968a <prov_capabilities+0x42>
			if (!bt_mesh_prov->output_string) {
   1976a:	682b      	ldr	r3, [r5, #0]
		if (bt_mesh_prov_link.oob_action == INPUT_OOB_STRING) {
   1976c:	2a03      	cmp	r2, #3
			if (!bt_mesh_prov->output_string) {
   1976e:	bf0c      	ite	eq
   19770:	6a9b      	ldreq	r3, [r3, #40]	; 0x28
			if (!bt_mesh_prov->output_number) {
   19772:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
   19774:	e7a9      	b.n	196ca <prov_capabilities+0x82>
	} else if (bt_mesh_prov_link.oob_method == AUTH_METHOD_OUTPUT) {
   19776:	2b02      	cmp	r3, #2
   19778:	d1a9      	bne.n	196ce <prov_capabilities+0x86>
		if (bt_mesh_prov_link.oob_size > caps->output_size) {
   1977a:	7ba2      	ldrb	r2, [r4, #14]
   1977c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   19780:	429a      	cmp	r2, r3
   19782:	d882      	bhi.n	1968a <prov_capabilities+0x42>
		if (!(BIT(bt_mesh_prov_link.oob_action) & caps->output_actions)) {
   19784:	7b62      	ldrb	r2, [r4, #13]
   19786:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1978a:	40d3      	lsrs	r3, r2
   1978c:	07da      	lsls	r2, r3, #31
   1978e:	f57f af7c 	bpl.w	1968a <prov_capabilities+0x42>
		if (!bt_mesh_prov->input) {
   19792:	682b      	ldr	r3, [r5, #0]
   19794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19796:	e798      	b.n	196ca <prov_capabilities+0x82>
		net_buf_simple_add_u8(&start, PUB_KEY_NO_OOB);
   19798:	2100      	movs	r1, #0
   1979a:	a805      	add	r0, sp, #20
   1979c:	f00b fb4f 	bl	24e3e <net_buf_simple_add_u8>
   197a0:	e7b7      	b.n	19712 <prov_capabilities+0xca>
   197a2:	bf00      	nop
   197a4:	200028b0 	.word	0x200028b0
   197a8:	20002780 	.word	0x20002780
   197ac:	20002805 	.word	0x20002805
   197b0:	20002784 	.word	0x20002784
   197b4:	20002810 	.word	0x20002810
   197b8:	00019629 	.word	0x00019629

000197bc <reset_state.isra.0>:
static int reset_state(void)
   197bc:	b508      	push	{r3, lr}
	if (prov_device.node != NULL) {
   197be:	4b05      	ldr	r3, [pc, #20]	; (197d4 <reset_state.isra.0+0x18>)
   197c0:	6818      	ldr	r0, [r3, #0]
   197c2:	b110      	cbz	r0, 197ca <reset_state.isra.0+0xe>
		bt_mesh_cdb_node_del(prov_device.node, false);
   197c4:	2100      	movs	r1, #0
   197c6:	f00b fa78 	bl	24cba <bt_mesh_cdb_node_del>
}
   197ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(pub_key_ready);
   197ce:	4802      	ldr	r0, [pc, #8]	; (197d8 <reset_state.isra.0+0x1c>)
   197d0:	f7ff bc60 	b.w	19094 <bt_mesh_prov_reset_state>
   197d4:	200028b0 	.word	0x200028b0
   197d8:	00019939 	.word	0x00019939

000197dc <local_input_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   197dc:	4b08      	ldr	r3, [pc, #32]	; (19800 <local_input_complete+0x24>)
   197de:	f3bf 8f5b 	dmb	ish
   197e2:	e853 2f00 	ldrex	r2, [r3]
   197e6:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   197ea:	e843 1000 	strex	r0, r1, [r3]
   197ee:	2800      	cmp	r0, #0
   197f0:	d1f7      	bne.n	197e2 <local_input_complete+0x6>
   197f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_CONFIRM)) {
   197f6:	0553      	lsls	r3, r2, #21
   197f8:	d501      	bpl.n	197fe <local_input_complete+0x22>
		send_confirm();
   197fa:	f7ff bd65 	b.w	192c8 <send_confirm>
}
   197fe:	4770      	bx	lr
   19800:	20002784 	.word	0x20002784

00019804 <prov_dh_key_gen>:
{
   19804:	b500      	push	{lr}
	sys_memcpy_swap(remote_pk_le, remote_pk, BT_PUB_KEY_COORD_LEN);
   19806:	4915      	ldr	r1, [pc, #84]	; (1985c <prov_dh_key_gen+0x58>)
{
   19808:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, BT_PUB_KEY_COORD_LEN);
   1980a:	4668      	mov	r0, sp
   1980c:	f00b f8b9 	bl	24982 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&remote_pk_le[BT_PUB_KEY_COORD_LEN], &remote_pk[BT_PUB_KEY_COORD_LEN],
   19810:	3120      	adds	r1, #32
   19812:	a808      	add	r0, sp, #32
   19814:	f00b f8b5 	bl	24982 <sys_memcpy_swap.constprop.0>
	if (!memcmp(local_pk, remote_pk, BT_PUB_KEY_LEN)) {
   19818:	3920      	subs	r1, #32
   1981a:	2240      	movs	r2, #64	; 0x40
   1981c:	f1a1 0040 	sub.w	r0, r1, #64	; 0x40
   19820:	f008 f8d9 	bl	219d6 <memcmp>
   19824:	b928      	cbnz	r0, 19832 <prov_dh_key_gen+0x2e>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   19826:	2002      	movs	r0, #2
   19828:	f7ff fd44 	bl	192b4 <prov_link_close>
}
   1982c:	b011      	add	sp, #68	; 0x44
   1982e:	f85d fb04 	ldr.w	pc, [sp], #4
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   19832:	490b      	ldr	r1, [pc, #44]	; (19860 <prov_dh_key_gen+0x5c>)
   19834:	4668      	mov	r0, sp
   19836:	f7fa fff3 	bl	14820 <bt_dh_key_gen>
   1983a:	b110      	cbz	r0, 19842 <prov_dh_key_gen+0x3e>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   1983c:	2002      	movs	r0, #2
   1983e:	f7ff fd39 	bl	192b4 <prov_link_close>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19842:	f3bf 8f5b 	dmb	ish
   19846:	4b07      	ldr	r3, [pc, #28]	; (19864 <prov_dh_key_gen+0x60>)
   19848:	681a      	ldr	r2, [r3, #0]
   1984a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, NOTIFY_INPUT_COMPLETE)) {
   1984e:	06d2      	lsls	r2, r2, #27
		bt_mesh_prov_link.expect = PROV_INPUT_COMPLETE;
   19850:	bf44      	itt	mi
   19852:	2204      	movmi	r2, #4
   19854:	f883 203f 	strbmi.w	r2, [r3, #63]	; 0x3f
   19858:	e7e8      	b.n	1982c <prov_dh_key_gen+0x28>
   1985a:	bf00      	nop
   1985c:	20002855 	.word	0x20002855
   19860:	000198d1 	.word	0x000198d1
   19864:	20002784 	.word	0x20002784

00019868 <prov_pub_key>:
{
   19868:	b538      	push	{r3, r4, r5, lr}
   1986a:	4c0a      	ldr	r4, [pc, #40]	; (19894 <prov_pub_key+0x2c>)
   1986c:	4605      	mov	r5, r0
   1986e:	f44f 7180 	mov.w	r1, #256	; 0x100
   19872:	4620      	mov	r0, r4
   19874:	f00b f86a 	bl	2494c <atomic_or>
	memcpy(bt_mesh_prov_link.conf_inputs.pub_key_device, data, BT_PUB_KEY_LEN);
   19878:	4629      	mov	r1, r5
   1987a:	2240      	movs	r2, #64	; 0x40
   1987c:	f104 00d1 	add.w	r0, r4, #209	; 0xd1
   19880:	f008 f8ba 	bl	219f8 <memcpy>
	bt_mesh_prov_link.bearer->clear_tx();
   19884:	6863      	ldr	r3, [r4, #4]
   19886:	68db      	ldr	r3, [r3, #12]
   19888:	4798      	blx	r3
}
   1988a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	prov_dh_key_gen();
   1988e:	f7ff bfb9 	b.w	19804 <prov_dh_key_gen>
   19892:	bf00      	nop
   19894:	20002784 	.word	0x20002784

00019898 <public_key_sent>:
{
   19898:	b510      	push	{r4, lr}
   1989a:	4c0c      	ldr	r4, [pc, #48]	; (198cc <public_key_sent+0x34>)
   1989c:	2180      	movs	r1, #128	; 0x80
   1989e:	4620      	mov	r0, r4
   198a0:	f00b f854 	bl	2494c <atomic_or>
   198a4:	f3bf 8f5b 	dmb	ish
   198a8:	6823      	ldr	r3, [r4, #0]
   198aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_PUB_KEY) &&
   198ae:	065a      	lsls	r2, r3, #25
   198b0:	d50a      	bpl.n	198c8 <public_key_sent+0x30>
   198b2:	f3bf 8f5b 	dmb	ish
   198b6:	6823      	ldr	r3, [r4, #0]
   198b8:	f3bf 8f5b 	dmb	ish
   198bc:	05db      	lsls	r3, r3, #23
   198be:	d503      	bpl.n	198c8 <public_key_sent+0x30>
}
   198c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_dh_key_gen();
   198c4:	f7ff bf9e 	b.w	19804 <prov_dh_key_gen>
}
   198c8:	bd10      	pop	{r4, pc}
   198ca:	bf00      	nop
   198cc:	20002784 	.word	0x20002784

000198d0 <prov_dh_key_cb>:
{
   198d0:	b510      	push	{r4, lr}
	if (!dhkey) {
   198d2:	4601      	mov	r1, r0
   198d4:	b920      	cbnz	r0, 198e0 <prov_dh_key_cb+0x10>
}
   198d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   198da:	2002      	movs	r0, #2
   198dc:	f7ff bcea 	b.w	192b4 <prov_link_close>
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, BT_DH_KEY_LEN);
   198e0:	4c13      	ldr	r4, [pc, #76]	; (19930 <prov_dh_key_cb+0x60>)
   198e2:	4620      	mov	r0, r4
   198e4:	f00b f84d 	bl	24982 <sys_memcpy_swap.constprop.0>
   198e8:	f3bf 8f5b 	dmb	ish
   198ec:	f854 3c1f 	ldr.w	r3, [r4, #-31]
   198f0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING) ||
   198f4:	0719      	lsls	r1, r3, #28
   198f6:	d506      	bpl.n	19906 <prov_dh_key_cb+0x36>
}
   198f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198fc:	480d      	ldr	r0, [pc, #52]	; (19934 <prov_dh_key_cb+0x64>)
   198fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19902:	f00b b823 	b.w	2494c <atomic_or>
   19906:	f3bf 8f5b 	dmb	ish
   1990a:	f854 3c1f 	ldr.w	r3, [r4, #-31]
   1990e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING) ||
   19912:	075a      	lsls	r2, r3, #29
   19914:	d4f0      	bmi.n	198f8 <prov_dh_key_cb+0x28>
   19916:	f3bf 8f5b 	dmb	ish
   1991a:	f854 3c1f 	ldr.w	r3, [r4, #-31]
   1991e:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   19922:	06db      	lsls	r3, r3, #27
   19924:	d4e8      	bmi.n	198f8 <prov_dh_key_cb+0x28>
}
   19926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_confirm();
   1992a:	f7ff bccd 	b.w	192c8 <send_confirm>
   1992e:	bf00      	nop
   19930:	200027a3 	.word	0x200027a3
   19934:	20002784 	.word	0x20002784

00019938 <pub_key_ready>:
	if (!pkey) {
   19938:	b180      	cbz	r0, 1995c <pub_key_ready+0x24>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1993a:	f3bf 8f5b 	dmb	ish
   1993e:	4b08      	ldr	r3, [pc, #32]	; (19960 <pub_key_ready+0x28>)
   19940:	e853 2f00 	ldrex	r2, [r3]
   19944:	f022 0101 	bic.w	r1, r2, #1
   19948:	e843 1000 	strex	r0, r1, [r3]
   1994c:	2800      	cmp	r0, #0
   1994e:	d1f7      	bne.n	19940 <pub_key_ready+0x8>
   19950:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   19954:	07d3      	lsls	r3, r2, #31
   19956:	d501      	bpl.n	1995c <pub_key_ready+0x24>
		send_pub_key();
   19958:	f7ff be2a 	b.w	195b0 <send_pub_key>
}
   1995c:	4770      	bx	lr
   1995e:	bf00      	nop
   19960:	20002784 	.word	0x20002784

00019964 <prov_input_complete>:
{
   19964:	b510      	push	{r4, lr}
   19966:	4c13      	ldr	r4, [pc, #76]	; (199b4 <prov_input_complete+0x50>)
   19968:	f3bf 8f5b 	dmb	ish
   1996c:	e854 2f00 	ldrex	r2, [r4]
   19970:	f022 0310 	bic.w	r3, r2, #16
   19974:	e844 3100 	strex	r1, r3, [r4]
   19978:	2900      	cmp	r1, #0
   1997a:	d1f7      	bne.n	1996c <prov_input_complete+0x8>
   1997c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   19980:	06d2      	lsls	r2, r2, #27
   19982:	d504      	bpl.n	1998e <prov_input_complete+0x2a>
	    bt_mesh_prov->input_complete) {
   19984:	4b0c      	ldr	r3, [pc, #48]	; (199b8 <prov_input_complete+0x54>)
   19986:	681b      	ldr	r3, [r3, #0]
   19988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				      NOTIFY_INPUT_COMPLETE) &&
   1998a:	b103      	cbz	r3, 1998e <prov_input_complete+0x2a>
		bt_mesh_prov->input_complete();
   1998c:	4798      	blx	r3
   1998e:	f3bf 8f5b 	dmb	ish
   19992:	e854 3f00 	ldrex	r3, [r4]
   19996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
   1999a:	e844 2100 	strex	r1, r2, [r4]
   1999e:	2900      	cmp	r1, #0
   199a0:	d1f7      	bne.n	19992 <prov_input_complete+0x2e>
   199a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_CONFIRM)) {
   199a6:	055b      	lsls	r3, r3, #21
   199a8:	d503      	bpl.n	199b2 <prov_input_complete+0x4e>
}
   199aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		send_confirm();
   199ae:	f7ff bc8b 	b.w	192c8 <send_confirm>
}
   199b2:	bd10      	pop	{r4, pc}
   199b4:	20002784 	.word	0x20002784
   199b8:	20002780 	.word	0x20002780

000199bc <bt_mesh_pb_adv_open>:
}

#if defined(CONFIG_BT_MESH_PB_ADV)
int bt_mesh_pb_adv_open(const uint8_t uuid[16], uint16_t net_idx, uint16_t addr,
			uint8_t attention_duration)
{
   199bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   199c0:	4c26      	ldr	r4, [pc, #152]	; (19a5c <bt_mesh_pb_adv_open+0xa0>)
   199c2:	b088      	sub	sp, #32
   199c4:	4607      	mov	r7, r0
   199c6:	4689      	mov	r9, r1
   199c8:	4620      	mov	r0, r4
   199ca:	2102      	movs	r1, #2
   199cc:	4692      	mov	sl, r2
   199ce:	4698      	mov	r8, r3
   199d0:	f00a ffbc 	bl	2494c <atomic_or>
	if (atomic_test_and_set_bit(bt_mesh_prov_link.flags, LINK_ACTIVE)) {
   199d4:	ea10 0601 	ands.w	r6, r0, r1
   199d8:	d13d      	bne.n	19a56 <bt_mesh_pb_adv_open+0x9a>
	struct bt_uuid_128 uuid_repr = { .uuid = { BT_UUID_TYPE_128 } };
   199da:	2211      	movs	r2, #17
   199dc:	4631      	mov	r1, r6
   199de:	a803      	add	r0, sp, #12
   199e0:	f008 f815 	bl	21a0e <memset>
	memcpy(prov_device.uuid, uuid, 16);
   199e4:	4d1e      	ldr	r5, [pc, #120]	; (19a60 <bt_mesh_pb_adv_open+0xa4>)
	struct bt_uuid_128 uuid_repr = { .uuid = { BT_UUID_TYPE_128 } };
   199e6:	2302      	movs	r3, #2
	memcpy(uuid_repr.val, uuid, 16);
   199e8:	2210      	movs	r2, #16
   199ea:	4639      	mov	r1, r7
   199ec:	f10d 000d 	add.w	r0, sp, #13
	struct bt_uuid_128 uuid_repr = { .uuid = { BT_UUID_TYPE_128 } };
   199f0:	f88d 300c 	strb.w	r3, [sp, #12]
	memcpy(uuid_repr.val, uuid, 16);
   199f4:	f008 f800 	bl	219f8 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   199f8:	2120      	movs	r1, #32
   199fa:	4620      	mov	r0, r4
   199fc:	f00a ffa6 	bl	2494c <atomic_or>
	memcpy(prov_device.uuid, uuid, 16);
   19a00:	4639      	mov	r1, r7
   19a02:	2210      	movs	r2, #16
   19a04:	f105 0009 	add.w	r0, r5, #9
   19a08:	f007 fff6 	bl	219f8 <memcpy>
	bt_mesh_prov_link.bearer = bearer;
   19a0c:	4b15      	ldr	r3, [pc, #84]	; (19a64 <bt_mesh_pb_adv_open+0xa8>)
	bt_mesh_prov_link.role = &role_provisioner;
   19a0e:	4a16      	ldr	r2, [pc, #88]	; (19a68 <bt_mesh_pb_adv_open+0xac>)
	err = bt_mesh_prov_link.bearer->link_open(prov_device.uuid, PROTOCOL_TIMEOUT,
   19a10:	691f      	ldr	r7, [r3, #16]
	bt_mesh_prov_link.bearer = bearer;
   19a12:	6063      	str	r3, [r4, #4]
	bt_mesh_prov_link.role = &role_provisioner;
   19a14:	60a2      	str	r2, [r4, #8]
	prov_device.addr = addr;
   19a16:	f8a5 a004 	strh.w	sl, [r5, #4]
	prov_device.net_idx = net_idx;
   19a1a:	f8a5 9006 	strh.w	r9, [r5, #6]
	prov_device.attention_duration = attention_duration;
   19a1e:	f885 8008 	strb.w	r8, [r5, #8]
	err = bt_mesh_prov_link.bearer->link_open(prov_device.uuid, PROTOCOL_TIMEOUT,
   19a22:	f7ff fc13 	bl	1924c <bt_mesh_prov_bearer_cb_get>
   19a26:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   19a2a:	e9cd 0600 	strd	r0, r6, [sp]
   19a2e:	2300      	movs	r3, #0
   19a30:	f105 0009 	add.w	r0, r5, #9
   19a34:	47b8      	blx	r7
	if (err) {
   19a36:	b158      	cbz	r0, 19a50 <bt_mesh_pb_adv_open+0x94>
   19a38:	f3bf 8f5b 	dmb	ish
   19a3c:	e854 3f00 	ldrex	r3, [r4]
   19a40:	f023 0302 	bic.w	r3, r3, #2
   19a44:	e844 3200 	strex	r2, r3, [r4]
   19a48:	2a00      	cmp	r2, #0
   19a4a:	d1f7      	bne.n	19a3c <bt_mesh_pb_adv_open+0x80>
   19a4c:	f3bf 8f5b 	dmb	ish
	return bt_mesh_provisioner_open(&pb_adv, uuid, net_idx, addr, attention_duration);
}
   19a50:	b008      	add	sp, #32
   19a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EBUSY;
   19a56:	f06f 000f 	mvn.w	r0, #15
   19a5a:	e7f9      	b.n	19a50 <bt_mesh_pb_adv_open+0x94>
   19a5c:	20002784 	.word	0x20002784
   19a60:	200028b0 	.word	0x200028b0
   19a64:	00026bc8 	.word	0x00026bc8
   19a68:	00026b68 	.word	0x00026b68

00019a6c <prov_failed>:
{
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
}

static void prov_failed(uint8_t err)
{
   19a6c:	b510      	push	{r4, lr}
	BT_DBG("%u", err);
	link.cb->error(&pb_adv, link.cb_data, err);
   19a6e:	4c06      	ldr	r4, [pc, #24]	; (19a88 <prov_failed+0x1c>)
   19a70:	68a3      	ldr	r3, [r4, #8]
   19a72:	68e1      	ldr	r1, [r4, #12]
   19a74:	689b      	ldr	r3, [r3, #8]
{
   19a76:	4602      	mov	r2, r0
	link.cb->error(&pb_adv, link.cb_data, err);
   19a78:	4804      	ldr	r0, [pc, #16]	; (19a8c <prov_failed+0x20>)
   19a7a:	4798      	blx	r3
   19a7c:	1d20      	adds	r0, r4, #4
   19a7e:	2108      	movs	r1, #8
	atomic_set_bit(link.flags, ADV_LINK_INVALID);
}
   19a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19a84:	f00a bf8b 	b.w	2499e <atomic_or>
   19a88:	200003f8 	.word	0x200003f8
   19a8c:	00026bc8 	.word	0x00026bc8

00019a90 <send_reliable>:
/*******************************************************************************
 * TX
 ******************************************************************************/

static void send_reliable(void)
{
   19a90:	b570      	push	{r4, r5, r6, lr}
   19a92:	4d0c      	ldr	r5, [pc, #48]	; (19ac4 <send_reliable+0x34>)
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   19a94:	2400      	movs	r4, #0
		struct net_buf *buf = link.tx.buf[i];
   19a96:	f855 0b04 	ldr.w	r0, [r5], #4

		if (!buf) {
   19a9a:	b150      	cbz	r0, 19ab2 <send_reliable+0x22>
			break;
		}

		if (BT_MESH_ADV(buf)->busy) {
   19a9c:	6943      	ldr	r3, [r0, #20]
   19a9e:	7a1a      	ldrb	r2, [r3, #8]
   19aa0:	f012 0208 	ands.w	r2, r2, #8
   19aa4:	d102      	bne.n	19aac <send_reliable+0x1c>
			continue;
		}

		BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

		bt_mesh_adv_send(buf, NULL, NULL);
   19aa6:	4611      	mov	r1, r2
   19aa8:	f7fb f9e8 	bl	14e7c <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   19aac:	3401      	adds	r4, #1
   19aae:	2c03      	cmp	r4, #3
   19ab0:	d1f1      	bne.n	19a96 <send_reliable+0x6>
	}

	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
}
   19ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
   19ab6:	4804      	ldr	r0, [pc, #16]	; (19ac8 <send_reliable+0x38>)
   19ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19abc:	2300      	movs	r3, #0
   19abe:	f005 b8af 	b.w	1ec20 <k_work_reschedule>
   19ac2:	bf00      	nop
   19ac4:	2000041c 	.word	0x2000041c
   19ac8:	20000430 	.word	0x20000430

00019acc <free_segments>:
{
   19acc:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   19ace:	2400      	movs	r4, #0
   19ad0:	4d08      	ldr	r5, [pc, #32]	; (19af4 <free_segments+0x28>)
		link.tx.buf[i] = NULL;
   19ad2:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   19ad4:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   19ad8:	b158      	cbz	r0, 19af2 <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
   19ada:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   19adc:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   19ae0:	7a1a      	ldrb	r2, [r3, #8]
   19ae2:	f366 02c3 	bfi	r2, r6, #3, #1
   19ae6:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   19ae8:	3401      	adds	r4, #1
		net_buf_unref(buf);
   19aea:	f002 f87f 	bl	1bbec <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   19aee:	2c03      	cmp	r4, #3
   19af0:	d1f0      	bne.n	19ad4 <free_segments+0x8>
}
   19af2:	bd70      	pop	{r4, r5, r6, pc}
   19af4:	2000041c 	.word	0x2000041c

00019af8 <prov_clear_tx>:
{
   19af8:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&link.tx.retransmit);
   19afa:	4803      	ldr	r0, [pc, #12]	; (19b08 <prov_clear_tx+0x10>)
   19afc:	f00c f86a 	bl	25bd4 <k_work_cancel_delayable>
}
   19b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   19b04:	f7ff bfe2 	b.w	19acc <free_segments>
   19b08:	20000430 	.word	0x20000430

00019b0c <bearer_ctl_send_unacked>:

	return 0;
}

static int bearer_ctl_send_unacked(struct net_buf *buf)
{
   19b0c:	b510      	push	{r4, lr}
	if (!buf) {
   19b0e:	4604      	mov	r4, r0
   19b10:	b188      	cbz	r0, 19b36 <bearer_ctl_send_unacked+0x2a>
		return -ENOMEM;
	}

	prov_clear_tx();
   19b12:	f7ff fff1 	bl	19af8 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   19b16:	2300      	movs	r3, #0
   19b18:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   19b1c:	4807      	ldr	r0, [pc, #28]	; (19b3c <bearer_ctl_send_unacked+0x30>)
   19b1e:	f005 f87f 	bl	1ec20 <k_work_reschedule>

	bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   19b22:	4907      	ldr	r1, [pc, #28]	; (19b40 <bearer_ctl_send_unacked+0x34>)
   19b24:	2200      	movs	r2, #0
   19b26:	4620      	mov	r0, r4
   19b28:	f7fb f9a8 	bl	14e7c <bt_mesh_adv_send>
	net_buf_unref(buf);
   19b2c:	4620      	mov	r0, r4
   19b2e:	f002 f85d 	bl	1bbec <net_buf_unref>

	return 0;
   19b32:	2000      	movs	r0, #0
}
   19b34:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   19b36:	f06f 000b 	mvn.w	r0, #11
   19b3a:	e7fb      	b.n	19b34 <bearer_ctl_send_unacked+0x28>
   19b3c:	20000460 	.word	0x20000460
   19b40:	20000658 	.word	0x20000658

00019b44 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19b44:	4b03      	ldr	r3, [pc, #12]	; (19b54 <atomic_get.constprop.0+0x10>)
   19b46:	f3bf 8f5b 	dmb	ish
   19b4a:	6858      	ldr	r0, [r3, #4]
   19b4c:	f3bf 8f5b 	dmb	ish
}
   19b50:	4770      	bx	lr
   19b52:	bf00      	nop
   19b54:	200003f8 	.word	0x200003f8

00019b58 <prov_link_accept>:

	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   19b58:	b570      	push	{r4, r5, r6, lr}
   19b5a:	4606      	mov	r6, r0
   19b5c:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   19b5e:	f7fe ff0d 	bl	1897c <bt_mesh_adv_enable>
	if (err) {
   19b62:	4604      	mov	r4, r0
   19b64:	b978      	cbnz	r0, 19b86 <prov_link_accept+0x2e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19b66:	f7ff ffed 	bl	19b44 <atomic_get.constprop.0>
		BT_ERR("Failed enabling advertiser");
		return err;
	}

	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   19b6a:	07c3      	lsls	r3, r0, #31
   19b6c:	d40d      	bmi.n	19b8a <prov_link_accept+0x32>
		return -EBUSY;
	}

	link.rx.id = XACT_ID_MAX;
   19b6e:	4b08      	ldr	r3, [pc, #32]	; (19b90 <prov_link_accept+0x38>)
   19b70:	227f      	movs	r2, #127	; 0x7f
   19b72:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   19b74:	22ff      	movs	r2, #255	; 0xff
	link.cb = cb;
	link.cb_data = cb_data;
   19b76:	e9c3 6502 	strd	r6, r5, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
   19b7a:	f883 2020 	strb.w	r2, [r3, #32]

	/* Make sure we're scanning for provisioning invitations */
	bt_mesh_scan_enable();
   19b7e:	f7fb f993 	bl	14ea8 <bt_mesh_scan_enable>
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();
   19b82:	f7fb fb8f 	bl	152a4 <bt_mesh_beacon_enable>

	return 0;
}
   19b86:	4620      	mov	r0, r4
   19b88:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   19b8a:	f06f 040f 	mvn.w	r4, #15
   19b8e:	e7fa      	b.n	19b86 <prov_link_accept+0x2e>
   19b90:	200003f8 	.word	0x200003f8

00019b94 <gen_prov_ack>:
{
   19b94:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   19b96:	4c0b      	ldr	r4, [pc, #44]	; (19bc4 <gen_prov_ack+0x30>)
   19b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b9a:	b18b      	cbz	r3, 19bc0 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   19b9c:	7902      	ldrb	r2, [r0, #4]
   19b9e:	f894 3020 	ldrb.w	r3, [r4, #32]
   19ba2:	429a      	cmp	r2, r3
   19ba4:	d10c      	bne.n	19bc0 <gen_prov_ack+0x2c>
   19ba6:	f7ff ffcd 	bl	19b44 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   19baa:	0743      	lsls	r3, r0, #29
   19bac:	d401      	bmi.n	19bb2 <gen_prov_ack+0x1e>
			prov_clear_tx();
   19bae:	f7ff ffa3 	bl	19af8 <prov_clear_tx>
		if (link.tx.cb) {
   19bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19bb4:	b123      	cbz	r3, 19bc0 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   19bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   19bb8:	2000      	movs	r0, #0
}
   19bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   19bbe:	4718      	bx	r3
}
   19bc0:	bd10      	pop	{r4, pc}
   19bc2:	bf00      	nop
   19bc4:	200003f8 	.word	0x200003f8

00019bc8 <reset_adv_link>:
{
   19bc8:	b538      	push	{r3, r4, r5, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
   19bca:	4c1a      	ldr	r4, [pc, #104]	; (19c34 <reset_adv_link+0x6c>)
	prov_clear_tx();
   19bcc:	f7ff ff94 	bl	19af8 <prov_clear_tx>
	(void)k_work_cancel_delayable(&link.prot_timer);
   19bd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   19bd4:	f00b fffe 	bl	25bd4 <k_work_cancel_delayable>
   19bd8:	f7ff ffb4 	bl	19b44 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   19bdc:	0683      	lsls	r3, r0, #26
   19bde:	f3c0 1540 	ubfx	r5, r0, #5, #1
   19be2:	d510      	bpl.n	19c06 <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   19be4:	2238      	movs	r2, #56	; 0x38
   19be6:	2100      	movs	r1, #0
   19be8:	4620      	mov	r0, r4
   19bea:	f007 ff10 	bl	21a0e <memset>
		link.rx.id = XACT_ID_NVAL;
   19bee:	23ff      	movs	r3, #255	; 0xff
   19bf0:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   19bf2:	23ff      	movs	r3, #255	; 0xff
   19bf4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   19bf8:	4b0f      	ldr	r3, [pc, #60]	; (19c38 <reset_adv_link+0x70>)
   19bfa:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
   19bfc:	2200      	movs	r2, #0
   19bfe:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   19c00:	689a      	ldr	r2, [r3, #8]
   19c02:	601a      	str	r2, [r3, #0]
}
   19c04:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_mesh_is_provisioned()) {
   19c06:	f7fa fef9 	bl	149fc <bt_mesh_is_provisioned>
   19c0a:	b100      	cbz	r0, 19c0e <reset_adv_link+0x46>
			link.cb = NULL;
   19c0c:	60a5      	str	r5, [r4, #8]
		link.id = 0;
   19c0e:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19c10:	4b0a      	ldr	r3, [pc, #40]	; (19c3c <reset_adv_link+0x74>)
   19c12:	6022      	str	r2, [r4, #0]
   19c14:	f3bf 8f5b 	dmb	ish
   19c18:	e853 1f00 	ldrex	r1, [r3]
   19c1c:	e843 2000 	strex	r0, r2, [r3]
   19c20:	2800      	cmp	r0, #0
   19c22:	d1f9      	bne.n	19c18 <reset_adv_link+0x50>
   19c24:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   19c28:	237f      	movs	r3, #127	; 0x7f
   19c2a:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   19c2c:	23ff      	movs	r3, #255	; 0xff
   19c2e:	f884 3020 	strb.w	r3, [r4, #32]
   19c32:	e7de      	b.n	19bf2 <reset_adv_link+0x2a>
   19c34:	200003f8 	.word	0x200003f8
   19c38:	20000660 	.word	0x20000660
   19c3c:	200003fc 	.word	0x200003fc

00019c40 <close_link>:
{
   19c40:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   19c42:	4b06      	ldr	r3, [pc, #24]	; (19c5c <close_link+0x1c>)
	void *cb_data = link.cb_data;
   19c44:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
{
   19c48:	4604      	mov	r4, r0
	reset_adv_link();
   19c4a:	f7ff ffbd 	bl	19bc8 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   19c4e:	6873      	ldr	r3, [r6, #4]
   19c50:	4803      	ldr	r0, [pc, #12]	; (19c60 <close_link+0x20>)
   19c52:	4622      	mov	r2, r4
   19c54:	4629      	mov	r1, r5
}
   19c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   19c5a:	4718      	bx	r3
   19c5c:	200003f8 	.word	0x200003f8
   19c60:	00026bc8 	.word	0x00026bc8

00019c64 <ctl_buf_create>:
{
   19c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c68:	4605      	mov	r5, r0
	buf = adv_buf_create(retransmits);
   19c6a:	4618      	mov	r0, r3
{
   19c6c:	460f      	mov	r7, r1
   19c6e:	4690      	mov	r8, r2
	buf = adv_buf_create(retransmits);
   19c70:	f00a fea4 	bl	249bc <adv_buf_create>
	if (!buf) {
   19c74:	4604      	mov	r4, r0
   19c76:	b1b0      	cbz	r0, 19ca6 <ctl_buf_create+0x42>
	net_buf_add_be32(buf, link.id);
   19c78:	4b0c      	ldr	r3, [pc, #48]	; (19cac <ctl_buf_create+0x48>)
	net_buf_simple_add_be32(&buf->b, val);
   19c7a:	f100 0608 	add.w	r6, r0, #8
   19c7e:	6819      	ldr	r1, [r3, #0]
   19c80:	4630      	mov	r0, r6
	net_buf_add_u8(buf, GPC_CTL(op));
   19c82:	00ad      	lsls	r5, r5, #2
   19c84:	f00b f904 	bl	24e90 <net_buf_simple_add_be32>
   19c88:	f045 0503 	orr.w	r5, r5, #3
	net_buf_add_u8(buf, 0x00);
   19c8c:	2100      	movs	r1, #0
   19c8e:	4620      	mov	r0, r4
   19c90:	f00a fea3 	bl	249da <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_CTL(op));
   19c94:	b2e9      	uxtb	r1, r5
   19c96:	4620      	mov	r0, r4
   19c98:	f00a fe9f 	bl	249da <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19c9c:	4642      	mov	r2, r8
   19c9e:	4639      	mov	r1, r7
   19ca0:	4630      	mov	r0, r6
   19ca2:	f00b f8c3 	bl	24e2c <net_buf_simple_add_mem>
}
   19ca6:	4620      	mov	r0, r4
   19ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19cac:	200003f8 	.word	0x200003f8

00019cb0 <gen_prov_ctl>:
{
   19cb0:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   19cb2:	7942      	ldrb	r2, [r0, #5]
   19cb4:	0892      	lsrs	r2, r2, #2
   19cb6:	2a01      	cmp	r2, #1
{
   19cb8:	4605      	mov	r5, r0
	switch (BEARER_CTL(rx->gpc)) {
   19cba:	d043      	beq.n	19d44 <gen_prov_ctl+0x94>
   19cbc:	2a02      	cmp	r2, #2
   19cbe:	d056      	beq.n	19d6e <gen_prov_ctl+0xbe>
   19cc0:	2a00      	cmp	r2, #0
   19cc2:	d162      	bne.n	19d8a <gen_prov_ctl+0xda>
	if (buf->len < 16) {
   19cc4:	888b      	ldrh	r3, [r1, #4]
   19cc6:	2b0f      	cmp	r3, #15
   19cc8:	d95f      	bls.n	19d8a <gen_prov_ctl+0xda>
   19cca:	f7ff ff3b 	bl	19b44 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   19cce:	07c4      	lsls	r4, r0, #31
   19cd0:	d50d      	bpl.n	19cee <gen_prov_ctl+0x3e>
		if (link.id != rx->link_id) {
   19cd2:	4b2e      	ldr	r3, [pc, #184]	; (19d8c <gen_prov_ctl+0xdc>)
   19cd4:	6819      	ldr	r1, [r3, #0]
   19cd6:	682b      	ldr	r3, [r5, #0]
   19cd8:	4299      	cmp	r1, r3
   19cda:	d156      	bne.n	19d8a <gen_prov_ctl+0xda>
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   19cdc:	2302      	movs	r3, #2
   19cde:	4611      	mov	r1, r2
   19ce0:	2001      	movs	r0, #1
   19ce2:	f7ff ffbf 	bl	19c64 <ctl_buf_create>
}
   19ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   19cea:	f7ff bf0f 	b.w	19b0c <bearer_ctl_send_unacked>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   19cee:	680c      	ldr	r4, [r1, #0]
   19cf0:	f7ff fa9a 	bl	19228 <bt_mesh_prov_get>
   19cf4:	2210      	movs	r2, #16
   19cf6:	6801      	ldr	r1, [r0, #0]
   19cf8:	4620      	mov	r0, r4
   19cfa:	f007 fe6c 	bl	219d6 <memcmp>
   19cfe:	4604      	mov	r4, r0
   19d00:	2800      	cmp	r0, #0
   19d02:	d142      	bne.n	19d8a <gen_prov_ctl+0xda>
	link.id = rx->link_id;
   19d04:	4e21      	ldr	r6, [pc, #132]	; (19d8c <gen_prov_ctl+0xdc>)
   19d06:	682b      	ldr	r3, [r5, #0]
   19d08:	4630      	mov	r0, r6
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d0a:	2101      	movs	r1, #1
   19d0c:	f840 3b04 	str.w	r3, [r0], #4
   19d10:	f00a fe45 	bl	2499e <atomic_or>
	net_buf_simple_reset(link.rx.buf);
   19d14:	6973      	ldr	r3, [r6, #20]
	buf->data = buf->__buf;
   19d16:	689a      	ldr	r2, [r3, #8]
   19d18:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   19d1a:	809c      	strh	r4, [r3, #4]
	err = bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   19d1c:	4622      	mov	r2, r4
   19d1e:	2302      	movs	r3, #2
   19d20:	4621      	mov	r1, r4
   19d22:	2001      	movs	r0, #1
   19d24:	f7ff ff9e 	bl	19c64 <ctl_buf_create>
   19d28:	f7ff fef0 	bl	19b0c <bearer_ctl_send_unacked>
	if (err) {
   19d2c:	b118      	cbz	r0, 19d36 <gen_prov_ctl+0x86>
}
   19d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_adv_link();
   19d32:	f7ff bf49 	b.w	19bc8 <reset_adv_link>
	link.cb->link_opened(&pb_adv, link.cb_data);
   19d36:	68b3      	ldr	r3, [r6, #8]
   19d38:	68f1      	ldr	r1, [r6, #12]
   19d3a:	681b      	ldr	r3, [r3, #0]
		link.cb->link_opened(&pb_adv, link.cb_data);
   19d3c:	4814      	ldr	r0, [pc, #80]	; (19d90 <gen_prov_ctl+0xe0>)
}
   19d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   19d42:	4718      	bx	r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19d44:	f7ff fefe 	bl	19b44 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   19d48:	07c0      	lsls	r0, r0, #31
   19d4a:	d51e      	bpl.n	19d8a <gen_prov_ctl+0xda>
   19d4c:	f7ff fefa 	bl	19b44 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   19d50:	0681      	lsls	r1, r0, #26
   19d52:	d51a      	bpl.n	19d8a <gen_prov_ctl+0xda>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d54:	4c0d      	ldr	r4, [pc, #52]	; (19d8c <gen_prov_ctl+0xdc>)
   19d56:	2102      	movs	r1, #2
   19d58:	1d20      	adds	r0, r4, #4
   19d5a:	f00a fe20 	bl	2499e <atomic_or>
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   19d5e:	0782      	lsls	r2, r0, #30
   19d60:	d413      	bmi.n	19d8a <gen_prov_ctl+0xda>
		prov_clear_tx();
   19d62:	f7ff fec9 	bl	19af8 <prov_clear_tx>
		link.cb->link_opened(&pb_adv, link.cb_data);
   19d66:	68a3      	ldr	r3, [r4, #8]
   19d68:	68e1      	ldr	r1, [r4, #12]
   19d6a:	681b      	ldr	r3, [r3, #0]
   19d6c:	e7e6      	b.n	19d3c <gen_prov_ctl+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19d6e:	f7ff fee9 	bl	19b44 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   19d72:	07c3      	lsls	r3, r0, #31
   19d74:	d509      	bpl.n	19d8a <gen_prov_ctl+0xda>
	if (buf->len != 1) {
   19d76:	888b      	ldrh	r3, [r1, #4]
   19d78:	2b01      	cmp	r3, #1
   19d7a:	d106      	bne.n	19d8a <gen_prov_ctl+0xda>
	close_link(net_buf_simple_pull_u8(buf));
   19d7c:	4608      	mov	r0, r1
   19d7e:	f00b f8c7 	bl	24f10 <net_buf_simple_pull_u8>
}
   19d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   19d86:	f7ff bf5b 	b.w	19c40 <close_link>
}
   19d8a:	bd70      	pop	{r4, r5, r6, pc}
   19d8c:	200003f8 	.word	0x200003f8
   19d90:	00026bc8 	.word	0x00026bc8

00019d94 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   19d94:	b507      	push	{r0, r1, r2, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d96:	2104      	movs	r1, #4
   19d98:	f88d 0007 	strb.w	r0, [sp, #7]
   19d9c:	4808      	ldr	r0, [pc, #32]	; (19dc0 <prov_link_close+0x2c>)
   19d9e:	f00a fdfe 	bl	2499e <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   19da2:	0743      	lsls	r3, r0, #29
   19da4:	d408      	bmi.n	19db8 <prov_link_close+0x24>
		return;
	}

	/* Ignore errors, the link will time out eventually if this doesn't get sent */
	bearer_ctl_send_unacked(ctl_buf_create(LINK_CLOSE, &status, 1, RETRANSMITS_LINK_CLOSE));
   19da6:	2302      	movs	r3, #2
   19da8:	2201      	movs	r2, #1
   19daa:	f10d 0107 	add.w	r1, sp, #7
   19dae:	4618      	mov	r0, r3
   19db0:	f7ff ff58 	bl	19c64 <ctl_buf_create>
   19db4:	f7ff feaa 	bl	19b0c <bearer_ctl_send_unacked>
}
   19db8:	b003      	add	sp, #12
   19dba:	f85d fb04 	ldr.w	pc, [sp], #4
   19dbe:	bf00      	nop
   19dc0:	200003fc 	.word	0x200003fc

00019dc4 <protocol_timeout>:
{
   19dc4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19dc6:	f7ff febd 	bl	19b44 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   19dca:	07c3      	lsls	r3, r0, #31
   19dcc:	d507      	bpl.n	19dde <protocol_timeout+0x1a>
	link.rx.seg = 0U;
   19dce:	4b04      	ldr	r3, [pc, #16]	; (19de0 <protocol_timeout+0x1c>)
   19dd0:	2200      	movs	r2, #0
   19dd2:	745a      	strb	r2, [r3, #17]
}
   19dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_TIMEOUT);
   19dd8:	2001      	movs	r0, #1
   19dda:	f7ff bfdb 	b.w	19d94 <prov_link_close>
}
   19dde:	bd08      	pop	{r3, pc}
   19de0:	200003f8 	.word	0x200003f8

00019de4 <prov_retransmit>:
{
   19de4:	b508      	push	{r3, lr}
   19de6:	f7ff fead 	bl	19b44 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   19dea:	07c3      	lsls	r3, r0, #31
   19dec:	d521      	bpl.n	19e32 <prov_retransmit+0x4e>
	return z_impl_k_uptime_ticks();
   19dee:	f00c f845 	bl	25e7c <z_impl_k_uptime_ticks>
   19df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19df6:	fba0 0302 	umull	r0, r3, r0, r2
   19dfa:	fb02 3101 	mla	r1, r2, r1, r3
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
   19dfe:	4a0d      	ldr	r2, [pc, #52]	; (19e34 <prov_retransmit+0x50>)
   19e00:	e9d2 3206 	ldrd	r3, r2, [r2, #24]
   19e04:	0bc0      	lsrs	r0, r0, #15
   19e06:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   19e0a:	1ac0      	subs	r0, r0, r3
   19e0c:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   19e10:	f247 5331 	movw	r3, #30001	; 0x7531
   19e14:	eb61 0102 	sbc.w	r1, r1, r2
   19e18:	4298      	cmp	r0, r3
   19e1a:	f171 0300 	sbcs.w	r3, r1, #0
   19e1e:	db04      	blt.n	19e2a <prov_retransmit+0x46>
}
   19e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   19e24:	2002      	movs	r0, #2
   19e26:	f7ff bfb5 	b.w	19d94 <prov_link_close>
}
   19e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_reliable();
   19e2e:	f7ff be2f 	b.w	19a90 <send_reliable>
}
   19e32:	bd08      	pop	{r3, pc}
   19e34:	200003f8 	.word	0x200003f8

00019e38 <gen_prov_ack_send>:
{
   19e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19e3a:	4e1e      	ldr	r6, [pc, #120]	; (19eb4 <gen_prov_ack_send+0x7c>)
   19e3c:	2110      	movs	r1, #16
   19e3e:	4605      	mov	r5, r0
   19e40:	1d30      	adds	r0, r6, #4
   19e42:	f00a fdac 	bl	2499e <atomic_or>
	if (pending && link.tx.pending_ack == xact_id) {
   19e46:	ea10 0701 	ands.w	r7, r0, r1
   19e4a:	d003      	beq.n	19e54 <gen_prov_ack_send+0x1c>
   19e4c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   19e50:	42ab      	cmp	r3, r5
   19e52:	d011      	beq.n	19e78 <gen_prov_ack_send+0x40>
	buf = adv_buf_create(RETRANSMITS_ACK);
   19e54:	2002      	movs	r0, #2
   19e56:	f00a fdb1 	bl	249bc <adv_buf_create>
	if (!buf) {
   19e5a:	4604      	mov	r4, r0
   19e5c:	b968      	cbnz	r0, 19e7a <gen_prov_ack_send+0x42>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19e5e:	4b16      	ldr	r3, [pc, #88]	; (19eb8 <gen_prov_ack_send+0x80>)
   19e60:	f3bf 8f5b 	dmb	ish
   19e64:	e853 2f00 	ldrex	r2, [r3]
   19e68:	f022 0210 	bic.w	r2, r2, #16
   19e6c:	e843 2100 	strex	r1, r2, [r3]
   19e70:	2900      	cmp	r1, #0
   19e72:	d1f7      	bne.n	19e64 <gen_prov_ack_send+0x2c>
   19e74:	f3bf 8f5b 	dmb	ish
}
   19e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pending) {
   19e7a:	b9cf      	cbnz	r7, 19eb0 <gen_prov_ack_send+0x78>
		complete = &cb;
   19e7c:	4f0f      	ldr	r7, [pc, #60]	; (19ebc <gen_prov_ack_send+0x84>)
		link.tx.pending_ack = xact_id;
   19e7e:	f886 5021 	strb.w	r5, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
   19e82:	6831      	ldr	r1, [r6, #0]
   19e84:	f104 0008 	add.w	r0, r4, #8
   19e88:	f00b f802 	bl	24e90 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   19e8c:	4629      	mov	r1, r5
   19e8e:	4620      	mov	r0, r4
   19e90:	f00a fda3 	bl	249da <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_ACK);
   19e94:	4620      	mov	r0, r4
   19e96:	2101      	movs	r1, #1
   19e98:	f00a fd9f 	bl	249da <net_buf_add_u8.isra.0>
	bt_mesh_adv_send(buf, complete, NULL);
   19e9c:	4620      	mov	r0, r4
   19e9e:	4639      	mov	r1, r7
   19ea0:	2200      	movs	r2, #0
   19ea2:	f7fa ffeb 	bl	14e7c <bt_mesh_adv_send>
	net_buf_unref(buf);
   19ea6:	4620      	mov	r0, r4
}
   19ea8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
   19eac:	f001 be9e 	b.w	1bbec <net_buf_unref>
		complete = NULL;
   19eb0:	2700      	movs	r7, #0
   19eb2:	e7e6      	b.n	19e82 <gen_prov_ack_send+0x4a>
   19eb4:	200003f8 	.word	0x200003f8
   19eb8:	200003fc 	.word	0x200003fc
   19ebc:	00026ba0 	.word	0x00026ba0

00019ec0 <prov_msg_recv>:
{
   19ec0:	b510      	push	{r4, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   19ec2:	4c11      	ldr	r4, [pc, #68]	; (19f08 <prov_msg_recv+0x48>)
   19ec4:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   19ec8:	2300      	movs	r3, #0
   19eca:	f104 0068 	add.w	r0, r4, #104	; 0x68
   19ece:	f004 fea7 	bl	1ec20 <k_work_reschedule>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   19ed2:	7ce1      	ldrb	r1, [r4, #19]
   19ed4:	6960      	ldr	r0, [r4, #20]
   19ed6:	f7fd fe37 	bl	17b48 <bt_mesh_fcs_check>
   19eda:	b198      	cbz	r0, 19f04 <prov_msg_recv+0x44>
	gen_prov_ack_send(link.rx.id);
   19edc:	7c20      	ldrb	r0, [r4, #16]
   19ede:	f7ff ffab 	bl	19e38 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19ee2:	f7ff fe2f 	bl	19b44 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   19ee6:	0703      	lsls	r3, r0, #28
   19ee8:	d504      	bpl.n	19ef4 <prov_msg_recv+0x34>
}
   19eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   19eee:	2003      	movs	r0, #3
   19ef0:	f7ff bdbc 	b.w	19a6c <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   19ef4:	68a3      	ldr	r3, [r4, #8]
   19ef6:	6962      	ldr	r2, [r4, #20]
   19ef8:	68e1      	ldr	r1, [r4, #12]
   19efa:	68db      	ldr	r3, [r3, #12]
   19efc:	4803      	ldr	r0, [pc, #12]	; (19f0c <prov_msg_recv+0x4c>)
}
   19efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   19f02:	4718      	bx	r3
}
   19f04:	bd10      	pop	{r4, pc}
   19f06:	bf00      	nop
   19f08:	200003f8 	.word	0x200003f8
   19f0c:	00026bc8 	.word	0x00026bc8

00019f10 <gen_prov_cont>:
{
   19f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   19f12:	4c32      	ldr	r4, [pc, #200]	; (19fdc <gen_prov_cont+0xcc>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   19f14:	7947      	ldrb	r7, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   19f16:	7c23      	ldrb	r3, [r4, #16]
{
   19f18:	4602      	mov	r2, r0
   19f1a:	460d      	mov	r5, r1
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   19f1c:	7901      	ldrb	r1, [r0, #4]
   19f1e:	7c60      	ldrb	r0, [r4, #17]
   19f20:	bb38      	cbnz	r0, 19f72 <gen_prov_cont+0x62>
   19f22:	428b      	cmp	r3, r1
   19f24:	d108      	bne.n	19f38 <gen_prov_cont+0x28>
   19f26:	f7ff fe0d 	bl	19b44 <atomic_get.constprop.0>
		if (!ack_pending()) {
   19f2a:	06c4      	lsls	r4, r0, #27
   19f2c:	d423      	bmi.n	19f76 <gen_prov_cont+0x66>
}
   19f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			gen_prov_ack_send(rx->xact_id);
   19f32:	7910      	ldrb	r0, [r2, #4]
   19f34:	f7ff bf80 	b.w	19e38 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   19f38:	1c5a      	adds	r2, r3, #1
   19f3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   19f3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	if (!link.rx.seg &&
   19f42:	4313      	orrs	r3, r2
   19f44:	428b      	cmp	r3, r1
   19f46:	d116      	bne.n	19f76 <gen_prov_cont+0x66>
		link.rx.id = rx->xact_id;
   19f48:	7423      	strb	r3, [r4, #16]
		net_buf_simple_reset(link.rx.buf);
   19f4a:	6963      	ldr	r3, [r4, #20]
	buf->data = buf->__buf;
   19f4c:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   19f4e:	8098      	strh	r0, [r3, #4]
	buf->data = buf->__buf;
   19f50:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   19f52:	23ff      	movs	r3, #255	; 0xff
   19f54:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
   19f56:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
   19f58:	f7ff fdce 	bl	19af8 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   19f5c:	7ca3      	ldrb	r3, [r4, #18]
   19f5e:	ebb3 0f97 	cmp.w	r3, r7, lsr #2
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   19f62:	ea4f 0697 	mov.w	r6, r7, lsr #2
	if (seg > link.rx.last_seg) {
   19f66:	d207      	bcs.n	19f78 <gen_prov_cont+0x68>
}
   19f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   19f6c:	2002      	movs	r0, #2
   19f6e:	f7ff bd7d 	b.w	19a6c <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   19f72:	428b      	cmp	r3, r1
   19f74:	d0f2      	beq.n	19f5c <gen_prov_cont+0x4c>
}
   19f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(link.rx.seg & BIT(seg))) {
   19f78:	7c63      	ldrb	r3, [r4, #17]
   19f7a:	40f3      	lsrs	r3, r6
   19f7c:	07d8      	lsls	r0, r3, #31
   19f7e:	d5fa      	bpl.n	19f76 <gen_prov_cont+0x66>
	if (XACT_SEG_OFFSET(seg) + buf->len > RX_BUFFER_MAX) {
   19f80:	1e73      	subs	r3, r6, #1
   19f82:	2017      	movs	r0, #23
   19f84:	88aa      	ldrh	r2, [r5, #4]
   19f86:	4343      	muls	r3, r0
   19f88:	3314      	adds	r3, #20
   19f8a:	18d1      	adds	r1, r2, r3
   19f8c:	2941      	cmp	r1, #65	; 0x41
   19f8e:	dcf2      	bgt.n	19f76 <gen_prov_cont+0x66>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   19f90:	6961      	ldr	r1, [r4, #20]
   19f92:	6808      	ldr	r0, [r1, #0]
   19f94:	6829      	ldr	r1, [r5, #0]
   19f96:	4418      	add	r0, r3
   19f98:	f007 fd2e 	bl	219f8 <memcpy>
	XACT_SEG_RECV(seg);
   19f9c:	2201      	movs	r2, #1
   19f9e:	fa02 f306 	lsl.w	r3, r2, r6
   19fa2:	7c62      	ldrb	r2, [r4, #17]
   19fa4:	ea22 0203 	bic.w	r2, r2, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   19fa8:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
   19faa:	7462      	strb	r2, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   19fac:	42b3      	cmp	r3, r6
   19fae:	d10f      	bne.n	19fd0 <gen_prov_cont+0xc0>
   19fb0:	07d1      	lsls	r1, r2, #31
   19fb2:	d4e0      	bmi.n	19f76 <gen_prov_cont+0x66>
		expect_len = (link.rx.buf->len - 20U -
   19fb4:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
   19fb8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   19fbc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   19fc0:	6961      	ldr	r1, [r4, #20]
   19fc2:	8889      	ldrh	r1, [r1, #4]
   19fc4:	3303      	adds	r3, #3
   19fc6:	440b      	add	r3, r1
		if (expect_len != buf->len) {
   19fc8:	88a9      	ldrh	r1, [r5, #4]
   19fca:	b2db      	uxtb	r3, r3
   19fcc:	428b      	cmp	r3, r1
   19fce:	d1cb      	bne.n	19f68 <gen_prov_cont+0x58>
	if (!link.rx.seg) {
   19fd0:	2a00      	cmp	r2, #0
   19fd2:	d1d0      	bne.n	19f76 <gen_prov_cont+0x66>
}
   19fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
   19fd8:	f7ff bf72 	b.w	19ec0 <prov_msg_recv>
   19fdc:	200003f8 	.word	0x200003f8

00019fe0 <gen_prov_start>:
{
   19fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->xact_id == link.rx.id) {
   19fe2:	4c3a      	ldr	r4, [pc, #232]	; (1a0cc <gen_prov_start+0xec>)
{
   19fe4:	460e      	mov	r6, r1
	if (rx->xact_id == link.rx.id) {
   19fe6:	7c22      	ldrb	r2, [r4, #16]
   19fe8:	7901      	ldrb	r1, [r0, #4]
   19fea:	4291      	cmp	r1, r2
{
   19fec:	4605      	mov	r5, r0
	if (rx->xact_id == link.rx.id) {
   19fee:	d10d      	bne.n	1a00c <gen_prov_start+0x2c>
		if (!link.rx.seg) {
   19ff0:	7c63      	ldrb	r3, [r4, #17]
   19ff2:	b943      	cbnz	r3, 1a006 <gen_prov_start+0x26>
   19ff4:	f7ff fda6 	bl	19b44 <atomic_get.constprop.0>
			if (!ack_pending()) {
   19ff8:	06c1      	lsls	r1, r0, #27
   19ffa:	d406      	bmi.n	1a00a <gen_prov_start+0x2a>
				gen_prov_ack_send(rx->xact_id);
   19ffc:	7928      	ldrb	r0, [r5, #4]
}
   19ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				gen_prov_ack_send(rx->xact_id);
   1a002:	f7ff bf19 	b.w	19e38 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   1a006:	07da      	lsls	r2, r3, #31
   1a008:	d408      	bmi.n	1a01c <gen_prov_start+0x3c>
}
   1a00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1a00c:	1c53      	adds	r3, r2, #1
   1a00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a012:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   1a016:	4313      	orrs	r3, r2
   1a018:	4299      	cmp	r1, r3
   1a01a:	d1f6      	bne.n	1a00a <gen_prov_start+0x2a>
	net_buf_simple_reset(link.rx.buf);
   1a01c:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
   1a01e:	2300      	movs	r3, #0
   1a020:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   1a022:	68bb      	ldr	r3, [r7, #8]
   1a024:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   1a026:	4630      	mov	r0, r6
   1a028:	f00a ff82 	bl	24f30 <net_buf_simple_pull_be16>
   1a02c:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   1a02e:	792b      	ldrb	r3, [r5, #4]
   1a030:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1a032:	4630      	mov	r0, r6
   1a034:	f00a ff6c 	bl	24f10 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   1a038:	6962      	ldr	r2, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1a03a:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   1a03c:	8893      	ldrh	r3, [r2, #4]
   1a03e:	b923      	cbnz	r3, 1a04a <gen_prov_start+0x6a>
}
   1a040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   1a044:	2002      	movs	r0, #2
   1a046:	f7ff bd11 	b.w	19a6c <prov_failed>
	if (link.rx.buf->len > link.rx.buf->size) {
   1a04a:	88d2      	ldrh	r2, [r2, #6]
   1a04c:	429a      	cmp	r2, r3
   1a04e:	d3f7      	bcc.n	1a040 <gen_prov_start+0x60>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   1a050:	796a      	ldrb	r2, [r5, #5]
   1a052:	0892      	lsrs	r2, r2, #2
   1a054:	d036      	beq.n	1a0c4 <gen_prov_start+0xe4>
   1a056:	2b14      	cmp	r3, #20
   1a058:	d9f2      	bls.n	1a040 <gen_prov_start+0x60>
	len -= START_PAYLOAD_MAX;
   1a05a:	3b14      	subs	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1a05c:	b29b      	uxth	r3, r3
   1a05e:	2117      	movs	r1, #23
   1a060:	fbb3 f3f1 	udiv	r3, r3, r1
   1a064:	3301      	adds	r3, #1
	if (START_LAST_SEG(rx->gpc) != last_seg(link.rx.buf->len)) {
   1a066:	b2db      	uxtb	r3, r3
   1a068:	429a      	cmp	r2, r3
   1a06a:	d1e9      	bne.n	1a040 <gen_prov_start+0x60>
	prov_clear_tx();
   1a06c:	f7ff fd44 	bl	19af8 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1a070:	796a      	ldrb	r2, [r5, #5]
	if ((link.rx.seg & BIT(0)) &&
   1a072:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1a074:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
   1a076:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1a078:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   1a07a:	d51f      	bpl.n	1a0bc <gen_prov_start+0xdc>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   1a07c:	43cb      	mvns	r3, r1
	if (op == 0) {
   1a07e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1a082:	d0dd      	beq.n	1a040 <gen_prov_start+0x60>
	return 32 - __builtin_clz(op);
   1a084:	fab3 f383 	clz	r3, r3
   1a088:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
   1a08c:	4293      	cmp	r3, r2
   1a08e:	d8d7      	bhi.n	1a040 <gen_prov_start+0x60>
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   1a090:	3201      	adds	r2, #1
   1a092:	2301      	movs	r3, #1
   1a094:	4093      	lsls	r3, r2
   1a096:	3b01      	subs	r3, #1
   1a098:	400b      	ands	r3, r1
   1a09a:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   1a09c:	6963      	ldr	r3, [r4, #20]
   1a09e:	88b2      	ldrh	r2, [r6, #4]
   1a0a0:	6818      	ldr	r0, [r3, #0]
   1a0a2:	6831      	ldr	r1, [r6, #0]
   1a0a4:	f007 fca8 	bl	219f8 <memcpy>
	XACT_SEG_RECV(0);
   1a0a8:	7c63      	ldrb	r3, [r4, #17]
   1a0aa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1a0ae:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   1a0b0:	2b00      	cmp	r3, #0
   1a0b2:	d1aa      	bne.n	1a00a <gen_prov_start+0x2a>
}
   1a0b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
   1a0b8:	f7ff bf02 	b.w	19ec0 <prov_msg_recv>
	uint8_t seg = SEG_NVAL;
   1a0bc:	2900      	cmp	r1, #0
   1a0be:	bf08      	it	eq
   1a0c0:	21ff      	moveq	r1, #255	; 0xff
   1a0c2:	e7e5      	b.n	1a090 <gen_prov_start+0xb0>
	if (len <= START_PAYLOAD_MAX) {
   1a0c4:	2b14      	cmp	r3, #20
   1a0c6:	d8c8      	bhi.n	1a05a <gen_prov_start+0x7a>
   1a0c8:	e7d0      	b.n	1a06c <gen_prov_start+0x8c>
   1a0ca:	bf00      	nop
   1a0cc:	200003f8 	.word	0x200003f8

0001a0d0 <prov_send_adv>:
{
   1a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1a0d4:	4d52      	ldr	r5, [pc, #328]	; (1a220 <prov_send_adv+0x150>)
{
   1a0d6:	460f      	mov	r7, r1
   1a0d8:	4604      	mov	r4, r0
   1a0da:	4616      	mov	r6, r2
	prov_clear_tx();
   1a0dc:	f7ff fd0c 	bl	19af8 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1a0e0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1a0e4:	2300      	movs	r3, #0
   1a0e6:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1a0ea:	f004 fd99 	bl	1ec20 <k_work_reschedule>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   1a0ee:	2000      	movs	r0, #0
   1a0f0:	f00a fc64 	bl	249bc <adv_buf_create>
	if (!start) {
   1a0f4:	4681      	mov	r9, r0
   1a0f6:	2800      	cmp	r0, #0
   1a0f8:	d06b      	beq.n	1a1d2 <prov_send_adv+0x102>
	link.tx.id = next_transaction_id(link.tx.id);
   1a0fa:	f895 2020 	ldrb.w	r2, [r5, #32]
	net_buf_simple_add_be32(&buf->b, val);
   1a0fe:	6829      	ldr	r1, [r5, #0]
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1a100:	1c53      	adds	r3, r2, #1
   1a102:	f100 0808 	add.w	r8, r0, #8
   1a106:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1a10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a10e:	4313      	orrs	r3, r2
   1a110:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
   1a112:	f885 3020 	strb.w	r3, [r5, #32]
   1a116:	f00a febb 	bl	24e90 <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   1a11a:	f895 1020 	ldrb.w	r1, [r5, #32]
   1a11e:	4648      	mov	r0, r9
   1a120:	f00a fc5b 	bl	249da <net_buf_add_u8.isra.0>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1a124:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
   1a126:	2b14      	cmp	r3, #20
	len -= START_PAYLOAD_MAX;
   1a128:	bf81      	itttt	hi
   1a12a:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1a12c:	b29b      	uxthhi	r3, r3
   1a12e:	2117      	movhi	r1, #23
   1a130:	fbb3 f3f1 	udivhi	r3, r3, r1
   1a134:	bf86      	itte	hi
   1a136:	3301      	addhi	r3, #1
   1a138:	b2db      	uxtbhi	r3, r3
		return 0;
   1a13a:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1a13c:	009b      	lsls	r3, r3, #2
   1a13e:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
   1a142:	4648      	mov	r0, r9
   1a144:	f00a fc49 	bl	249da <net_buf_add_u8.isra.0>
	net_buf_simple_add_be16(&buf->b, val);
   1a148:	88a1      	ldrh	r1, [r4, #4]
   1a14a:	4640      	mov	r0, r8
   1a14c:	f00a fe89 	bl	24e62 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   1a150:	7921      	ldrb	r1, [r4, #4]
   1a152:	6820      	ldr	r0, [r4, #0]
   1a154:	f7fd fce8 	bl	17b28 <bt_mesh_fcs_calc>
   1a158:	4601      	mov	r1, r0
   1a15a:	4648      	mov	r0, r9
   1a15c:	f00a fc3d 	bl	249da <net_buf_add_u8.isra.0>
	link.tx.buf[0] = start;
   1a160:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	link.tx.cb_data = cb_data;
   1a164:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
   1a168:	f00b fe88 	bl	25e7c <z_impl_k_uptime_ticks>
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   1a16c:	88a6      	ldrh	r6, [r4, #4]
   1a16e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1a224 <prov_send_adv+0x154>
   1a172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a176:	fba0 0302 	umull	r0, r3, r0, r2
   1a17a:	fb02 3101 	mla	r1, r2, r1, r3
	net_buf_add_mem(start, msg->data, seg_len);
   1a17e:	2e14      	cmp	r6, #20
   1a180:	ea4f 30d0 	mov.w	r0, r0, lsr #15
   1a184:	bf28      	it	cs
   1a186:	2614      	movcs	r6, #20
   1a188:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1a18c:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
   1a18e:	e9c5 0106 	strd	r0, r1, [r5, #24]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a192:	4632      	mov	r2, r6
   1a194:	6821      	ldr	r1, [r4, #0]
   1a196:	4640      	mov	r0, r8
   1a198:	f00a fe48 	bl	24e2c <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   1a19c:	4631      	mov	r1, r6
   1a19e:	4620      	mov	r0, r4
   1a1a0:	f00a fea6 	bl	24ef0 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   1a1a4:	2700      	movs	r7, #0
   1a1a6:	88a6      	ldrh	r6, [r4, #4]
   1a1a8:	b91e      	cbnz	r6, 1a1b2 <prov_send_adv+0xe2>
	send_reliable();
   1a1aa:	f7ff fc71 	bl	19a90 <send_reliable>
	return 0;
   1a1ae:	4630      	mov	r0, r6
   1a1b0:	e005      	b.n	1a1be <prov_send_adv+0xee>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   1a1b2:	2f08      	cmp	r7, #8
   1a1b4:	d105      	bne.n	1a1c2 <prov_send_adv+0xf2>
			free_segments();
   1a1b6:	f7ff fc89 	bl	19acc <free_segments>
			return -E2BIG;
   1a1ba:	f06f 0006 	mvn.w	r0, #6
}
   1a1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   1a1c2:	2000      	movs	r0, #0
   1a1c4:	f00a fbfa 	bl	249bc <adv_buf_create>
		if (!buf) {
   1a1c8:	3704      	adds	r7, #4
   1a1ca:	4606      	mov	r6, r0
   1a1cc:	b920      	cbnz	r0, 1a1d8 <prov_send_adv+0x108>
			free_segments();
   1a1ce:	f7ff fc7d 	bl	19acc <free_segments>
		return -ENOBUFS;
   1a1d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a1d6:	e7f2      	b.n	1a1be <prov_send_adv+0xee>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   1a1d8:	f8b4 8004 	ldrh.w	r8, [r4, #4]
		link.tx.buf[seg_id] = buf;
   1a1dc:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
   1a1e0:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   1a1e4:	f1b8 0f17 	cmp.w	r8, #23
   1a1e8:	6829      	ldr	r1, [r5, #0]
   1a1ea:	4650      	mov	r0, sl
   1a1ec:	bf28      	it	cs
   1a1ee:	f04f 0817 	movcs.w	r8, #23
   1a1f2:	f00a fe4d 	bl	24e90 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   1a1f6:	f895 1020 	ldrb.w	r1, [r5, #32]
   1a1fa:	4630      	mov	r0, r6
   1a1fc:	f00a fbed 	bl	249da <net_buf_add_u8.isra.0>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   1a200:	f047 0102 	orr.w	r1, r7, #2
   1a204:	4630      	mov	r0, r6
   1a206:	b2c9      	uxtb	r1, r1
   1a208:	f00a fbe7 	bl	249da <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a20c:	6821      	ldr	r1, [r4, #0]
   1a20e:	4642      	mov	r2, r8
   1a210:	4650      	mov	r0, sl
   1a212:	f00a fe0b 	bl	24e2c <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   1a216:	4641      	mov	r1, r8
   1a218:	4620      	mov	r0, r4
   1a21a:	f00a fe69 	bl	24ef0 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   1a21e:	e7c2      	b.n	1a1a6 <prov_send_adv+0xd6>
   1a220:	200003f8 	.word	0x200003f8
   1a224:	20000420 	.word	0x20000420

0001a228 <prov_link_open>:
{
   1a228:	b570      	push	{r4, r5, r6, lr}
   1a22a:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   1a22c:	f7fe fba6 	bl	1897c <bt_mesh_adv_enable>
	if (err) {
   1a230:	4604      	mov	r4, r0
   1a232:	2800      	cmp	r0, #0
   1a234:	d13e      	bne.n	1a2b4 <prov_link_open+0x8c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a236:	4d23      	ldr	r5, [pc, #140]	; (1a2c4 <prov_link_open+0x9c>)
   1a238:	2101      	movs	r1, #1
   1a23a:	1d28      	adds	r0, r5, #4
   1a23c:	f00a fbaf 	bl	2499e <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   1a240:	ea10 0401 	ands.w	r4, r0, r1
   1a244:	d13b      	bne.n	1a2be <prov_link_open+0x96>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a246:	2120      	movs	r1, #32
   1a248:	1d28      	adds	r0, r5, #4
   1a24a:	f00a fba8 	bl	2499e <atomic_or>
	bt_rand(&link.id, sizeof(link.id));
   1a24e:	2104      	movs	r1, #4
   1a250:	4628      	mov	r0, r5
   1a252:	f003 f9ab 	bl	1d5ac <bt_rand>
	link.tx.id = XACT_ID_MAX;
   1a256:	237f      	movs	r3, #127	; 0x7f
   1a258:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   1a25c:	23ff      	movs	r3, #255	; 0xff
   1a25e:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   1a260:	9b04      	ldr	r3, [sp, #16]
   1a262:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   1a264:	9b05      	ldr	r3, [sp, #20]
   1a266:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   1a268:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   1a26a:	689a      	ldr	r2, [r3, #8]
   1a26c:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   1a26e:	809c      	strh	r4, [r3, #4]
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   1a270:	4631      	mov	r1, r6
   1a272:	4623      	mov	r3, r4
   1a274:	2210      	movs	r2, #16
   1a276:	4620      	mov	r0, r4
   1a278:	f7ff fcf4 	bl	19c64 <ctl_buf_create>
	if (!buf) {
   1a27c:	4606      	mov	r6, r0
   1a27e:	b1d8      	cbz	r0, 1a2b8 <prov_link_open+0x90>
	prov_clear_tx();
   1a280:	f7ff fc3a 	bl	19af8 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1a284:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1a288:	2300      	movs	r3, #0
   1a28a:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1a28e:	f004 fcc7 	bl	1ec20 <k_work_reschedule>
   1a292:	f00b fdf3 	bl	25e7c <z_impl_k_uptime_ticks>
   1a296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a29a:	fba0 3002 	umull	r3, r0, r0, r2
   1a29e:	fb02 0101 	mla	r1, r2, r1, r0
   1a2a2:	0bdb      	lsrs	r3, r3, #15
   1a2a4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1a2a8:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
   1a2aa:	e9c5 3106 	strd	r3, r1, [r5, #24]
	link.tx.buf[0] = buf;
   1a2ae:	626e      	str	r6, [r5, #36]	; 0x24
	send_reliable();
   1a2b0:	f7ff fbee 	bl	19a90 <send_reliable>
}
   1a2b4:	4620      	mov	r0, r4
   1a2b6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1a2b8:	f06f 040b 	mvn.w	r4, #11
   1a2bc:	e7fa      	b.n	1a2b4 <prov_link_open+0x8c>
		return -EBUSY;
   1a2be:	f06f 040f 	mvn.w	r4, #15
   1a2c2:	e7f7      	b.n	1a2b4 <prov_link_open+0x8c>
   1a2c4:	200003f8 	.word	0x200003f8

0001a2c8 <buf_sent>:
   1a2c8:	4b09      	ldr	r3, [pc, #36]	; (1a2f0 <buf_sent+0x28>)
   1a2ca:	f3bf 8f5b 	dmb	ish
   1a2ce:	e853 2f00 	ldrex	r2, [r3]
   1a2d2:	f022 0104 	bic.w	r1, r2, #4
   1a2d6:	e843 1000 	strex	r0, r1, [r3]
   1a2da:	2800      	cmp	r0, #0
   1a2dc:	d1f7      	bne.n	1a2ce <buf_sent+0x6>
   1a2de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(link.flags, ADV_LINK_CLOSING)) {
   1a2e2:	0753      	lsls	r3, r2, #29
   1a2e4:	d502      	bpl.n	1a2ec <buf_sent+0x24>
		close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   1a2e6:	2000      	movs	r0, #0
   1a2e8:	f7ff bcaa 	b.w	19c40 <close_link>
}
   1a2ec:	4770      	bx	lr
   1a2ee:	bf00      	nop
   1a2f0:	200003fc 	.word	0x200003fc

0001a2f4 <ack_complete>:
   1a2f4:	4b06      	ldr	r3, [pc, #24]	; (1a310 <ack_complete+0x1c>)
   1a2f6:	f3bf 8f5b 	dmb	ish
   1a2fa:	e853 2f00 	ldrex	r2, [r3]
   1a2fe:	f022 0210 	bic.w	r2, r2, #16
   1a302:	e843 2100 	strex	r1, r2, [r3]
   1a306:	2900      	cmp	r1, #0
   1a308:	d1f7      	bne.n	1a2fa <ack_complete+0x6>
   1a30a:	f3bf 8f5b 	dmb	ish
}
   1a30e:	4770      	bx	lr
   1a310:	200003fc 	.word	0x200003fc

0001a314 <bt_mesh_pb_adv_recv>:
{
   1a314:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   1a316:	4d1f      	ldr	r5, [pc, #124]	; (1a394 <bt_mesh_pb_adv_recv+0x80>)
   1a318:	68ab      	ldr	r3, [r5, #8]
{
   1a31a:	4604      	mov	r4, r0
	if (!link.cb) {
   1a31c:	2b00      	cmp	r3, #0
   1a31e:	d036      	beq.n	1a38e <bt_mesh_pb_adv_recv+0x7a>
	if (buf->len < 6) {
   1a320:	8883      	ldrh	r3, [r0, #4]
   1a322:	2b05      	cmp	r3, #5
   1a324:	d933      	bls.n	1a38e <bt_mesh_pb_adv_recv+0x7a>
	rx.link_id = net_buf_simple_pull_be32(buf);
   1a326:	f00a fe1b 	bl	24f60 <net_buf_simple_pull_be32>
   1a32a:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   1a32c:	4620      	mov	r0, r4
   1a32e:	f00a fdef 	bl	24f10 <net_buf_simple_pull_u8>
   1a332:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   1a336:	4620      	mov	r0, r4
   1a338:	f00a fdea 	bl	24f10 <net_buf_simple_pull_u8>
   1a33c:	f88d 0005 	strb.w	r0, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a340:	f7ff fc00 	bl	19b44 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   1a344:	07c3      	lsls	r3, r0, #31
   1a346:	d503      	bpl.n	1a350 <bt_mesh_pb_adv_recv+0x3c>
   1a348:	682a      	ldr	r2, [r5, #0]
   1a34a:	9b00      	ldr	r3, [sp, #0]
   1a34c:	429a      	cmp	r2, r3
   1a34e:	d11e      	bne.n	1a38e <bt_mesh_pb_adv_recv+0x7a>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   1a350:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a354:	4a10      	ldr	r2, [pc, #64]	; (1a398 <bt_mesh_pb_adv_recv+0x84>)
   1a356:	88a1      	ldrh	r1, [r4, #4]
   1a358:	f003 0303 	and.w	r3, r3, #3
   1a35c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a360:	795b      	ldrb	r3, [r3, #5]
   1a362:	4299      	cmp	r1, r3
   1a364:	d313      	bcc.n	1a38e <bt_mesh_pb_adv_recv+0x7a>
   1a366:	f7ff fbed 	bl	19b44 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1a36a:	f010 0f01 	tst.w	r0, #1
   1a36e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a372:	d105      	bne.n	1a380 <bt_mesh_pb_adv_recv+0x6c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   1a374:	f003 0103 	and.w	r1, r3, #3
   1a378:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1a37c:	7909      	ldrb	r1, [r1, #4]
   1a37e:	b931      	cbnz	r1, 1a38e <bt_mesh_pb_adv_recv+0x7a>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   1a380:	f003 0303 	and.w	r3, r3, #3
   1a384:	4621      	mov	r1, r4
   1a386:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1a38a:	4668      	mov	r0, sp
   1a38c:	4798      	blx	r3
}
   1a38e:	b003      	add	sp, #12
   1a390:	bd30      	pop	{r4, r5, pc}
   1a392:	bf00      	nop
   1a394:	200003f8 	.word	0x200003f8
   1a398:	00026ba8 	.word	0x00026ba8

0001a39c <pb_adv_init>:

void pb_adv_init(void)
{
   1a39c:	b510      	push	{r4, lr}
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
   1a39e:	4c06      	ldr	r4, [pc, #24]	; (1a3b8 <pb_adv_init+0x1c>)
   1a3a0:	4906      	ldr	r1, [pc, #24]	; (1a3bc <pb_adv_init+0x20>)
   1a3a2:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1a3a6:	f00b fc07 	bl	25bb8 <k_work_init_delayable>
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
   1a3aa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a3ae:	4904      	ldr	r1, [pc, #16]	; (1a3c0 <pb_adv_init+0x24>)
}
   1a3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
   1a3b4:	f00b bc00 	b.w	25bb8 <k_work_init_delayable>
   1a3b8:	200003f8 	.word	0x200003f8
   1a3bc:	00019dc5 	.word	0x00019dc5
   1a3c0:	00019de5 	.word	0x00019de5

0001a3c4 <krp_status>:
	uint8_t *phase;
};

static int krp_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		       struct net_buf_simple *buf)
{
   1a3c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	status = net_buf_simple_pull_u8(buf);
   1a3c8:	4610      	mov	r0, r2
{
   1a3ca:	4615      	mov	r5, r2
   1a3cc:	460f      	mov	r7, r1
	status = net_buf_simple_pull_u8(buf);
   1a3ce:	f00a fd9f 	bl	24f10 <net_buf_simple_pull_u8>
   1a3d2:	4606      	mov	r6, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   1a3d4:	4628      	mov	r0, r5
   1a3d6:	f00a fda3 	bl	24f20 <net_buf_simple_pull_le16>
   1a3da:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   1a3dc:	4628      	mov	r0, r5
   1a3de:	f00a fd97 	bl	24f10 <net_buf_simple_pull_u8>

	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_KRP_STATUS, ctx->addr, (void **)&param)) {
   1a3e2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1a430 <krp_status+0x6c>
   1a3e6:	88ba      	ldrh	r2, [r7, #4]
	phase = net_buf_simple_pull_u8(buf);
   1a3e8:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_KRP_STATUS, ctx->addr, (void **)&param)) {
   1a3ea:	f8d8 0000 	ldr.w	r0, [r8]
   1a3ee:	ab01      	add	r3, sp, #4
   1a3f0:	f248 0117 	movw	r1, #32791	; 0x8017
   1a3f4:	3008      	adds	r0, #8
   1a3f6:	f008 fe8c 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a3fa:	b190      	cbz	r0, 1a422 <krp_status+0x5e>
		if (param->net_idx != net_idx) {
   1a3fc:	9b01      	ldr	r3, [sp, #4]
   1a3fe:	889a      	ldrh	r2, [r3, #4]
   1a400:	f3c4 040b 	ubfx	r4, r4, #0, #12
   1a404:	42a2      	cmp	r2, r4
   1a406:	d10f      	bne.n	1a428 <krp_status+0x64>
			return -ENOENT;
		}

		if (param->status) {
   1a408:	681b      	ldr	r3, [r3, #0]
   1a40a:	b103      	cbz	r3, 1a40e <krp_status+0x4a>
			*param->status = status;
   1a40c:	701e      	strb	r6, [r3, #0]
		}

		if (param->phase) {
   1a40e:	9b01      	ldr	r3, [sp, #4]
   1a410:	689b      	ldr	r3, [r3, #8]
   1a412:	b103      	cbz	r3, 1a416 <krp_status+0x52>
			*param->phase = phase;
   1a414:	701d      	strb	r5, [r3, #0]
 *
 *  @param ack Context of a message to be acknowledged.
 */
static inline void bt_mesh_msg_ack_ctx_rx(struct bt_mesh_msg_ack_ctx *ack)
{
	k_sem_give(&ack->sem);
   1a416:	f8d8 0000 	ldr.w	r0, [r8]
   1a41a:	3008      	adds	r0, #8
   1a41c:	f00a fae8 	bl	249f0 <k_sem_give>
		}

		bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);
	}

	return 0;
   1a420:	2000      	movs	r0, #0
}
   1a422:	b002      	add	sp, #8
   1a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENOENT;
   1a428:	f06f 0001 	mvn.w	r0, #1
   1a42c:	e7f9      	b.n	1a422 <krp_status+0x5e>
   1a42e:	bf00      	nop
   1a430:	200028cc 	.word	0x200028cc

0001a434 <node_identity_status>:
};

static int node_identity_status(struct bt_mesh_model *model,
				 struct bt_mesh_msg_ctx *ctx,
				 struct net_buf_simple *buf)
{
   1a434:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	status = net_buf_simple_pull_u8(buf);
   1a438:	4610      	mov	r0, r2
{
   1a43a:	4614      	mov	r4, r2
   1a43c:	460d      	mov	r5, r1
	status = net_buf_simple_pull_u8(buf);
   1a43e:	f00a fd67 	bl	24f10 <net_buf_simple_pull_u8>
   1a442:	4606      	mov	r6, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   1a444:	4620      	mov	r0, r4
   1a446:	f00a fd6b 	bl	24f20 <net_buf_simple_pull_le16>
   1a44a:	4607      	mov	r7, r0
	identity = net_buf_simple_pull_u8(buf);
   1a44c:	4620      	mov	r0, r4
   1a44e:	f00a fd5f 	bl	24f10 <net_buf_simple_pull_u8>

	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_IDENTITY_STATUS, ctx->addr,
   1a452:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1a4b0 <node_identity_status+0x7c>
   1a456:	88aa      	ldrh	r2, [r5, #4]
	identity = net_buf_simple_pull_u8(buf);
   1a458:	4604      	mov	r4, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_IDENTITY_STATUS, ctx->addr,
   1a45a:	f8d8 0000 	ldr.w	r0, [r8]
   1a45e:	ab03      	add	r3, sp, #12
   1a460:	f248 0148 	movw	r1, #32840	; 0x8048
   1a464:	3008      	adds	r0, #8
   1a466:	f008 fe54 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a46a:	b170      	cbz	r0, 1a48a <node_identity_status+0x56>
				      (void **)&param)) {
		if (param && param->status) {
   1a46c:	9b03      	ldr	r3, [sp, #12]
   1a46e:	b113      	cbz	r3, 1a476 <node_identity_status+0x42>
   1a470:	681b      	ldr	r3, [r3, #0]
   1a472:	b103      	cbz	r3, 1a476 <node_identity_status+0x42>
			*param->status = status;
   1a474:	701e      	strb	r6, [r3, #0]
		}

		if (param && param->identity) {
   1a476:	9b03      	ldr	r3, [sp, #12]
   1a478:	b113      	cbz	r3, 1a480 <node_identity_status+0x4c>
   1a47a:	689b      	ldr	r3, [r3, #8]
   1a47c:	b103      	cbz	r3, 1a480 <node_identity_status+0x4c>
			*param->identity = identity;
   1a47e:	701c      	strb	r4, [r3, #0]
   1a480:	f8d8 0000 	ldr.w	r0, [r8]
   1a484:	3008      	adds	r0, #8
   1a486:	f00a fab3 	bl	249f0 <k_sem_give>
		}

		bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);
	}

	if (cli->cb && cli->cb->node_identity_status) {
   1a48a:	f8d8 0000 	ldr.w	r0, [r8]
   1a48e:	6843      	ldr	r3, [r0, #4]
   1a490:	b153      	cbz	r3, 1a4a8 <node_identity_status+0x74>
   1a492:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   1a496:	f1b8 0f00 	cmp.w	r8, #0
   1a49a:	d005      	beq.n	1a4a8 <node_identity_status+0x74>
		cli->cb->node_identity_status(cli, ctx->addr, status,
   1a49c:	88a9      	ldrh	r1, [r5, #4]
   1a49e:	9400      	str	r4, [sp, #0]
   1a4a0:	f3c7 030b 	ubfx	r3, r7, #0, #12
   1a4a4:	4632      	mov	r2, r6
   1a4a6:	47c0      	blx	r8
					      net_idx, identity);
	}

	return 0;
}
   1a4a8:	2000      	movs	r0, #0
   1a4aa:	b004      	add	sp, #16
   1a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4b0:	200028cc 	.word	0x200028cc

0001a4b4 <node_reset_status>:
{
   1a4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_RESET_STATUS,
   1a4b6:	4d0f      	ldr	r5, [pc, #60]	; (1a4f4 <node_reset_status+0x40>)
   1a4b8:	888a      	ldrh	r2, [r1, #4]
   1a4ba:	6828      	ldr	r0, [r5, #0]
	bool *param = NULL;
   1a4bc:	2300      	movs	r3, #0
{
   1a4be:	460c      	mov	r4, r1
	bool *param = NULL;
   1a4c0:	9301      	str	r3, [sp, #4]
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_RESET_STATUS,
   1a4c2:	f248 014a 	movw	r1, #32842	; 0x804a
   1a4c6:	ab01      	add	r3, sp, #4
   1a4c8:	3008      	adds	r0, #8
   1a4ca:	f008 fe22 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a4ce:	b138      	cbz	r0, 1a4e0 <node_reset_status+0x2c>
		if (param) {
   1a4d0:	9b01      	ldr	r3, [sp, #4]
   1a4d2:	b10b      	cbz	r3, 1a4d8 <node_reset_status+0x24>
			*param = true;
   1a4d4:	2201      	movs	r2, #1
   1a4d6:	701a      	strb	r2, [r3, #0]
   1a4d8:	6828      	ldr	r0, [r5, #0]
   1a4da:	3008      	adds	r0, #8
   1a4dc:	f00a fa88 	bl	249f0 <k_sem_give>
	if (cli->cb && cli->cb->node_reset_status) {
   1a4e0:	6828      	ldr	r0, [r5, #0]
   1a4e2:	6843      	ldr	r3, [r0, #4]
   1a4e4:	b11b      	cbz	r3, 1a4ee <node_reset_status+0x3a>
   1a4e6:	685b      	ldr	r3, [r3, #4]
   1a4e8:	b10b      	cbz	r3, 1a4ee <node_reset_status+0x3a>
		cli->cb->node_reset_status(cli, ctx->addr);
   1a4ea:	88a1      	ldrh	r1, [r4, #4]
   1a4ec:	4798      	blx	r3
}
   1a4ee:	2000      	movs	r0, #0
   1a4f0:	b003      	add	sp, #12
   1a4f2:	bd30      	pop	{r4, r5, pc}
   1a4f4:	200028cc 	.word	0x200028cc

0001a4f8 <hb_pub_status>:
{
   1a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4fc:	b085      	sub	sp, #20
	status = net_buf_simple_pull_u8(buf);
   1a4fe:	4610      	mov	r0, r2
{
   1a500:	4614      	mov	r4, r2
   1a502:	9101      	str	r1, [sp, #4]
	status = net_buf_simple_pull_u8(buf);
   1a504:	f00a fd04 	bl	24f10 <net_buf_simple_pull_u8>
   1a508:	4682      	mov	sl, r0
	pub.dst = net_buf_simple_pull_le16(buf);
   1a50a:	4620      	mov	r0, r4
   1a50c:	f00a fd08 	bl	24f20 <net_buf_simple_pull_le16>
   1a510:	4681      	mov	r9, r0
	pub.count = net_buf_simple_pull_u8(buf);
   1a512:	4620      	mov	r0, r4
   1a514:	f00a fcfc 	bl	24f10 <net_buf_simple_pull_u8>
   1a518:	4680      	mov	r8, r0
	pub.period = net_buf_simple_pull_u8(buf);
   1a51a:	4620      	mov	r0, r4
   1a51c:	f00a fcf8 	bl	24f10 <net_buf_simple_pull_u8>
   1a520:	4607      	mov	r7, r0
	pub.ttl = net_buf_simple_pull_u8(buf);
   1a522:	4620      	mov	r0, r4
   1a524:	f00a fcf4 	bl	24f10 <net_buf_simple_pull_u8>
   1a528:	4606      	mov	r6, r0
	pub.feat = net_buf_simple_pull_u8(buf);
   1a52a:	4620      	mov	r0, r4
   1a52c:	f00a fcf0 	bl	24f10 <net_buf_simple_pull_u8>
   1a530:	4605      	mov	r5, r0
	pub.net_idx = net_buf_simple_pull_u8(buf);
   1a532:	4620      	mov	r0, r4
   1a534:	f00a fcec 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_PUB_STATUS,
   1a538:	f8df b048 	ldr.w	fp, [pc, #72]	; 1a584 <hb_pub_status+0x8c>
   1a53c:	9901      	ldr	r1, [sp, #4]
	pub.net_idx = net_buf_simple_pull_u8(buf);
   1a53e:	4604      	mov	r4, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_PUB_STATUS,
   1a540:	f8db 0000 	ldr.w	r0, [fp]
   1a544:	888a      	ldrh	r2, [r1, #4]
   1a546:	ab03      	add	r3, sp, #12
   1a548:	2106      	movs	r1, #6
   1a54a:	3008      	adds	r0, #8
   1a54c:	f008 fde1 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a550:	b1a0      	cbz	r0, 1a57c <hb_pub_status+0x84>
		if (param->status) {
   1a552:	9b03      	ldr	r3, [sp, #12]
   1a554:	681b      	ldr	r3, [r3, #0]
   1a556:	b10b      	cbz	r3, 1a55c <hb_pub_status+0x64>
			*param->status = status;
   1a558:	f883 a000 	strb.w	sl, [r3]
		if (param->pub) {
   1a55c:	9b03      	ldr	r3, [sp, #12]
   1a55e:	685b      	ldr	r3, [r3, #4]
   1a560:	b13b      	cbz	r3, 1a572 <hb_pub_status+0x7a>
			*param->pub = pub;
   1a562:	f8a3 9000 	strh.w	r9, [r3]
   1a566:	f883 8002 	strb.w	r8, [r3, #2]
   1a56a:	70df      	strb	r7, [r3, #3]
   1a56c:	711e      	strb	r6, [r3, #4]
	pub.feat = net_buf_simple_pull_u8(buf);
   1a56e:	80dd      	strh	r5, [r3, #6]
	pub.net_idx = net_buf_simple_pull_u8(buf);
   1a570:	811c      	strh	r4, [r3, #8]
   1a572:	f8db 0000 	ldr.w	r0, [fp]
   1a576:	3008      	adds	r0, #8
   1a578:	f00a fa3a 	bl	249f0 <k_sem_give>
}
   1a57c:	2000      	movs	r0, #0
   1a57e:	b005      	add	sp, #20
   1a580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a584:	200028cc 	.word	0x200028cc

0001a588 <hb_sub_status>:
{
   1a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a58c:	b085      	sub	sp, #20
	status = net_buf_simple_pull_u8(buf);
   1a58e:	4610      	mov	r0, r2
{
   1a590:	4614      	mov	r4, r2
   1a592:	9101      	str	r1, [sp, #4]
	status = net_buf_simple_pull_u8(buf);
   1a594:	f00a fcbc 	bl	24f10 <net_buf_simple_pull_u8>
   1a598:	4682      	mov	sl, r0
	sub.src = net_buf_simple_pull_le16(buf);
   1a59a:	4620      	mov	r0, r4
   1a59c:	f00a fcc0 	bl	24f20 <net_buf_simple_pull_le16>
   1a5a0:	4681      	mov	r9, r0
	sub.dst = net_buf_simple_pull_le16(buf);
   1a5a2:	4620      	mov	r0, r4
   1a5a4:	f00a fcbc 	bl	24f20 <net_buf_simple_pull_le16>
   1a5a8:	4680      	mov	r8, r0
	sub.period = net_buf_simple_pull_u8(buf);
   1a5aa:	4620      	mov	r0, r4
   1a5ac:	f00a fcb0 	bl	24f10 <net_buf_simple_pull_u8>
   1a5b0:	4607      	mov	r7, r0
	sub.count = net_buf_simple_pull_u8(buf);
   1a5b2:	4620      	mov	r0, r4
   1a5b4:	f00a fcac 	bl	24f10 <net_buf_simple_pull_u8>
   1a5b8:	4606      	mov	r6, r0
	sub.min = net_buf_simple_pull_u8(buf);
   1a5ba:	4620      	mov	r0, r4
   1a5bc:	f00a fca8 	bl	24f10 <net_buf_simple_pull_u8>
   1a5c0:	4605      	mov	r5, r0
	sub.max = net_buf_simple_pull_u8(buf);
   1a5c2:	4620      	mov	r0, r4
   1a5c4:	f00a fca4 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_SUB_STATUS,
   1a5c8:	f8df b04c 	ldr.w	fp, [pc, #76]	; 1a618 <hb_sub_status+0x90>
   1a5cc:	9901      	ldr	r1, [sp, #4]
	sub.max = net_buf_simple_pull_u8(buf);
   1a5ce:	4604      	mov	r4, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_SUB_STATUS,
   1a5d0:	f8db 0000 	ldr.w	r0, [fp]
   1a5d4:	888a      	ldrh	r2, [r1, #4]
   1a5d6:	ab03      	add	r3, sp, #12
   1a5d8:	f248 013c 	movw	r1, #32828	; 0x803c
   1a5dc:	3008      	adds	r0, #8
   1a5de:	f008 fd98 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a5e2:	b1a0      	cbz	r0, 1a60e <hb_sub_status+0x86>
		if (param->status) {
   1a5e4:	9b03      	ldr	r3, [sp, #12]
   1a5e6:	681b      	ldr	r3, [r3, #0]
   1a5e8:	b10b      	cbz	r3, 1a5ee <hb_sub_status+0x66>
			*param->status = status;
   1a5ea:	f883 a000 	strb.w	sl, [r3]
		if (param->sub) {
   1a5ee:	9b03      	ldr	r3, [sp, #12]
   1a5f0:	685b      	ldr	r3, [r3, #4]
   1a5f2:	b13b      	cbz	r3, 1a604 <hb_sub_status+0x7c>
			*param->sub = sub;
   1a5f4:	f8a3 9000 	strh.w	r9, [r3]
   1a5f8:	f8a3 8002 	strh.w	r8, [r3, #2]
   1a5fc:	711f      	strb	r7, [r3, #4]
   1a5fe:	715e      	strb	r6, [r3, #5]
   1a600:	719d      	strb	r5, [r3, #6]
   1a602:	71dc      	strb	r4, [r3, #7]
   1a604:	f8db 0000 	ldr.w	r0, [fp]
   1a608:	3008      	adds	r0, #8
   1a60a:	f00a f9f1 	bl	249f0 <k_sem_give>
}
   1a60e:	2000      	movs	r0, #0
   1a610:	b005      	add	sp, #20
   1a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a616:	bf00      	nop
   1a618:	200028cc 	.word	0x200028cc

0001a61c <mod_member_list_handle>:
{
   1a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a620:	4691      	mov	r9, r2
   1a622:	b085      	sub	sp, #20
	if ((vnd && buf->len < 7U) || (buf->len < 5U)) {
   1a624:	888a      	ldrh	r2, [r1, #4]
{
   1a626:	4682      	mov	sl, r0
   1a628:	460c      	mov	r4, r1
   1a62a:	2600      	movs	r6, #0
	if ((vnd && buf->len < 7U) || (buf->len < 5U)) {
   1a62c:	461d      	mov	r5, r3
   1a62e:	b133      	cbz	r3, 1a63e <mod_member_list_handle+0x22>
   1a630:	2a06      	cmp	r2, #6
   1a632:	d806      	bhi.n	1a642 <mod_member_list_handle+0x26>
		return -EMSGSIZE;
   1a634:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a638:	b005      	add	sp, #20
   1a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((vnd && buf->len < 7U) || (buf->len < 5U)) {
   1a63e:	2a04      	cmp	r2, #4
   1a640:	e7f7      	b.n	1a632 <mod_member_list_handle+0x16>
	status = net_buf_simple_pull_u8(buf);
   1a642:	4620      	mov	r0, r4
   1a644:	f00a fc64 	bl	24f10 <net_buf_simple_pull_u8>
   1a648:	9001      	str	r0, [sp, #4]
	elem_addr = net_buf_simple_pull_le16(buf);
   1a64a:	4620      	mov	r0, r4
   1a64c:	f00a fc68 	bl	24f20 <net_buf_simple_pull_le16>
   1a650:	4680      	mov	r8, r0
	if (vnd) {
   1a652:	b11d      	cbz	r5, 1a65c <mod_member_list_handle+0x40>
		cid = net_buf_simple_pull_le16(buf);
   1a654:	4620      	mov	r0, r4
   1a656:	f00a fc63 	bl	24f20 <net_buf_simple_pull_le16>
   1a65a:	4606      	mov	r6, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1a65c:	4620      	mov	r0, r4
   1a65e:	f00a fc5f 	bl	24f20 <net_buf_simple_pull_le16>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, op, ctx->addr,
   1a662:	f8df b080 	ldr.w	fp, [pc, #128]	; 1a6e4 <mod_member_list_handle+0xc8>
   1a666:	f8ba 2004 	ldrh.w	r2, [sl, #4]
	mod_id = net_buf_simple_pull_le16(buf);
   1a66a:	4607      	mov	r7, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, op, ctx->addr,
   1a66c:	f8db 0000 	ldr.w	r0, [fp]
   1a670:	ab03      	add	r3, sp, #12
   1a672:	4649      	mov	r1, r9
   1a674:	3008      	adds	r0, #8
   1a676:	f008 fd4c 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a67a:	2800      	cmp	r0, #0
   1a67c:	d0dc      	beq.n	1a638 <mod_member_list_handle+0x1c>
		if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   1a67e:	9b03      	ldr	r3, [sp, #12]
   1a680:	889a      	ldrh	r2, [r3, #4]
   1a682:	4542      	cmp	r2, r8
   1a684:	d12b      	bne.n	1a6de <mod_member_list_handle+0xc2>
   1a686:	88da      	ldrh	r2, [r3, #6]
   1a688:	42ba      	cmp	r2, r7
   1a68a:	d128      	bne.n	1a6de <mod_member_list_handle+0xc2>
   1a68c:	b115      	cbz	r5, 1a694 <mod_member_list_handle+0x78>
				(vnd && param->cid != cid)) {
   1a68e:	891a      	ldrh	r2, [r3, #8]
   1a690:	42b2      	cmp	r2, r6
   1a692:	d124      	bne.n	1a6de <mod_member_list_handle+0xc2>
		if (buf->len % 2) {
   1a694:	88a5      	ldrh	r5, [r4, #4]
   1a696:	f015 0501 	ands.w	r5, r5, #1
   1a69a:	d1cb      	bne.n	1a634 <mod_member_list_handle+0x18>
		if (param->member_cnt && param->members) {
   1a69c:	691a      	ldr	r2, [r3, #16]
   1a69e:	b10a      	cbz	r2, 1a6a4 <mod_member_list_handle+0x88>
   1a6a0:	68db      	ldr	r3, [r3, #12]
   1a6a2:	b993      	cbnz	r3, 1a6ca <mod_member_list_handle+0xae>
		if (param->status) {
   1a6a4:	9b03      	ldr	r3, [sp, #12]
   1a6a6:	681b      	ldr	r3, [r3, #0]
   1a6a8:	b10b      	cbz	r3, 1a6ae <mod_member_list_handle+0x92>
			*param->status = status;
   1a6aa:	9a01      	ldr	r2, [sp, #4]
   1a6ac:	701a      	strb	r2, [r3, #0]
   1a6ae:	f8db 0000 	ldr.w	r0, [fp]
   1a6b2:	3008      	adds	r0, #8
   1a6b4:	f00a f99c 	bl	249f0 <k_sem_give>
	return 0;
   1a6b8:	2000      	movs	r0, #0
}
   1a6ba:	e7bd      	b.n	1a638 <mod_member_list_handle+0x1c>
				param->members[i] = net_buf_simple_pull_le16(buf);
   1a6bc:	4620      	mov	r0, r4
   1a6be:	68d6      	ldr	r6, [r2, #12]
   1a6c0:	f00a fc2e 	bl	24f20 <net_buf_simple_pull_le16>
   1a6c4:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
			for (i = 0; i < *param->member_cnt && buf->len; i++) {
   1a6c8:	3501      	adds	r5, #1
   1a6ca:	9a03      	ldr	r2, [sp, #12]
   1a6cc:	6913      	ldr	r3, [r2, #16]
   1a6ce:	6819      	ldr	r1, [r3, #0]
   1a6d0:	42a9      	cmp	r1, r5
   1a6d2:	d902      	bls.n	1a6da <mod_member_list_handle+0xbe>
   1a6d4:	88a1      	ldrh	r1, [r4, #4]
   1a6d6:	2900      	cmp	r1, #0
   1a6d8:	d1f0      	bne.n	1a6bc <mod_member_list_handle+0xa0>
			*param->member_cnt = i;
   1a6da:	601d      	str	r5, [r3, #0]
   1a6dc:	e7e2      	b.n	1a6a4 <mod_member_list_handle+0x88>
			return -ENOENT;
   1a6de:	f06f 0001 	mvn.w	r0, #1
   1a6e2:	e7a9      	b.n	1a638 <mod_member_list_handle+0x1c>
   1a6e4:	200028cc 	.word	0x200028cc

0001a6e8 <mod_sub_status>:
{
   1a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 7U) && (buf->len != 9U)) {
   1a6ec:	8893      	ldrh	r3, [r2, #4]
   1a6ee:	2b07      	cmp	r3, #7
{
   1a6f0:	b085      	sub	sp, #20
   1a6f2:	4688      	mov	r8, r1
   1a6f4:	4614      	mov	r4, r2
	if ((buf->len != 7U) && (buf->len != 9U)) {
   1a6f6:	d001      	beq.n	1a6fc <mod_sub_status+0x14>
   1a6f8:	2b09      	cmp	r3, #9
   1a6fa:	d15c      	bne.n	1a7b6 <mod_sub_status+0xce>
	status = net_buf_simple_pull_u8(buf);
   1a6fc:	4620      	mov	r0, r4
   1a6fe:	f00a fc07 	bl	24f10 <net_buf_simple_pull_u8>
   1a702:	4681      	mov	r9, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a704:	4620      	mov	r0, r4
   1a706:	f00a fc0b 	bl	24f20 <net_buf_simple_pull_le16>
   1a70a:	4682      	mov	sl, r0
	sub_addr = net_buf_simple_pull_le16(buf);
   1a70c:	4620      	mov	r0, r4
   1a70e:	f00a fc07 	bl	24f20 <net_buf_simple_pull_le16>
	if (buf->len >= 4U) {
   1a712:	88a3      	ldrh	r3, [r4, #4]
   1a714:	2b03      	cmp	r3, #3
	sub_addr = net_buf_simple_pull_le16(buf);
   1a716:	4606      	mov	r6, r0
	if (buf->len >= 4U) {
   1a718:	d947      	bls.n	1a7aa <mod_sub_status+0xc2>
		cid = net_buf_simple_pull_le16(buf);
   1a71a:	4620      	mov	r0, r4
   1a71c:	f00a fc00 	bl	24f20 <net_buf_simple_pull_le16>
   1a720:	4607      	mov	r7, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1a722:	4620      	mov	r0, r4
   1a724:	f00a fbfc 	bl	24f20 <net_buf_simple_pull_le16>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_STATUS,
   1a728:	f8df b090 	ldr.w	fp, [pc, #144]	; 1a7bc <mod_sub_status+0xd4>
   1a72c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
	mod_id = net_buf_simple_pull_le16(buf);
   1a730:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_STATUS,
   1a732:	f8db 0000 	ldr.w	r0, [fp]
   1a736:	ab03      	add	r3, sp, #12
   1a738:	f248 011f 	movw	r1, #32799	; 0x801f
   1a73c:	3008      	adds	r0, #8
   1a73e:	f008 fce8 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a742:	4604      	mov	r4, r0
   1a744:	b1d8      	cbz	r0, 1a77e <mod_sub_status+0x96>
		if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   1a746:	9b03      	ldr	r3, [sp, #12]
   1a748:	889a      	ldrh	r2, [r3, #4]
   1a74a:	4552      	cmp	r2, sl
   1a74c:	d130      	bne.n	1a7b0 <mod_sub_status+0xc8>
   1a74e:	8a1a      	ldrh	r2, [r3, #16]
   1a750:	42aa      	cmp	r2, r5
   1a752:	d12d      	bne.n	1a7b0 <mod_sub_status+0xc8>
		    (param->expect_sub && *param->expect_sub != sub_addr) ||
   1a754:	68da      	ldr	r2, [r3, #12]
		if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   1a756:	b112      	cbz	r2, 1a75e <mod_sub_status+0x76>
		    (param->expect_sub && *param->expect_sub != sub_addr) ||
   1a758:	8812      	ldrh	r2, [r2, #0]
   1a75a:	42b2      	cmp	r2, r6
   1a75c:	d128      	bne.n	1a7b0 <mod_sub_status+0xc8>
   1a75e:	8a5a      	ldrh	r2, [r3, #18]
   1a760:	42ba      	cmp	r2, r7
   1a762:	d125      	bne.n	1a7b0 <mod_sub_status+0xc8>
		if (param->sub_addr) {
   1a764:	689a      	ldr	r2, [r3, #8]
   1a766:	b102      	cbz	r2, 1a76a <mod_sub_status+0x82>
			*param->sub_addr = sub_addr;
   1a768:	8016      	strh	r6, [r2, #0]
		if (param->status) {
   1a76a:	681b      	ldr	r3, [r3, #0]
   1a76c:	b10b      	cbz	r3, 1a772 <mod_sub_status+0x8a>
			*param->status = status;
   1a76e:	f883 9000 	strb.w	r9, [r3]
	k_sem_give(&ack->sem);
   1a772:	f8db 0000 	ldr.w	r0, [fp]
   1a776:	3008      	adds	r0, #8
   1a778:	f00a f93a 	bl	249f0 <k_sem_give>
	int err = 0;
   1a77c:	2400      	movs	r4, #0
	if (cli->cb && cli->cb->mod_sub_status) {
   1a77e:	f8db 0000 	ldr.w	r0, [fp]
   1a782:	6843      	ldr	r3, [r0, #4]
   1a784:	b16b      	cbz	r3, 1a7a2 <mod_sub_status+0xba>
   1a786:	f8d3 b000 	ldr.w	fp, [r3]
   1a78a:	f1bb 0f00 	cmp.w	fp, #0
   1a78e:	d008      	beq.n	1a7a2 <mod_sub_status+0xba>
				sub_addr, (cid << 16) | mod_id);
   1a790:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
		cli->cb->mod_sub_status(cli, ctx->addr, status, elem_addr,
   1a794:	e9cd 6500 	strd	r6, r5, [sp]
   1a798:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1a79c:	4653      	mov	r3, sl
   1a79e:	464a      	mov	r2, r9
   1a7a0:	47d8      	blx	fp
}
   1a7a2:	4620      	mov	r0, r4
   1a7a4:	b005      	add	sp, #20
   1a7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cid = CID_NVAL;
   1a7aa:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1a7ae:	e7b8      	b.n	1a722 <mod_sub_status+0x3a>
			err = -ENOENT;
   1a7b0:	f06f 0401 	mvn.w	r4, #1
   1a7b4:	e7e3      	b.n	1a77e <mod_sub_status+0x96>
		return -EINVAL;
   1a7b6:	f06f 0415 	mvn.w	r4, #21
   1a7ba:	e7f2      	b.n	1a7a2 <mod_sub_status+0xba>
   1a7bc:	200028cc 	.word	0x200028cc

0001a7c0 <mod_pub_status>:
{
   1a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 12U) && (buf->len != 14U)) {
   1a7c4:	8893      	ldrh	r3, [r2, #4]
   1a7c6:	f023 0302 	bic.w	r3, r3, #2
   1a7ca:	b29b      	uxth	r3, r3
   1a7cc:	2b0c      	cmp	r3, #12
{
   1a7ce:	b087      	sub	sp, #28
   1a7d0:	468a      	mov	sl, r1
   1a7d2:	4615      	mov	r5, r2
	if ((buf->len != 12U) && (buf->len != 14U)) {
   1a7d4:	d160      	bne.n	1a898 <mod_pub_status+0xd8>
	status = net_buf_simple_pull_u8(buf);
   1a7d6:	4610      	mov	r0, r2
   1a7d8:	f00a fb9a 	bl	24f10 <net_buf_simple_pull_u8>
   1a7dc:	4680      	mov	r8, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a7de:	4628      	mov	r0, r5
   1a7e0:	f00a fb9e 	bl	24f20 <net_buf_simple_pull_le16>
   1a7e4:	4681      	mov	r9, r0
	pub.addr = net_buf_simple_pull_le16(buf);
   1a7e6:	4628      	mov	r0, r5
   1a7e8:	f00a fb9a 	bl	24f20 <net_buf_simple_pull_le16>
   1a7ec:	4607      	mov	r7, r0
	pub.app_idx = net_buf_simple_pull_le16(buf);
   1a7ee:	4628      	mov	r0, r5
   1a7f0:	f00a fb96 	bl	24f20 <net_buf_simple_pull_le16>
   1a7f4:	4604      	mov	r4, r0
	pub.ttl = net_buf_simple_pull_u8(buf);
   1a7f6:	4628      	mov	r0, r5
   1a7f8:	f00a fb8a 	bl	24f10 <net_buf_simple_pull_u8>
   1a7fc:	9001      	str	r0, [sp, #4]
	pub.period = net_buf_simple_pull_u8(buf);
   1a7fe:	4628      	mov	r0, r5
   1a800:	f00a fb86 	bl	24f10 <net_buf_simple_pull_u8>
   1a804:	9002      	str	r0, [sp, #8]
	pub.transmit = net_buf_simple_pull_u8(buf);
   1a806:	4628      	mov	r0, r5
   1a808:	f00a fb82 	bl	24f10 <net_buf_simple_pull_u8>
	if (buf->len == 4U) {
   1a80c:	88ab      	ldrh	r3, [r5, #4]
	pub.transmit = net_buf_simple_pull_u8(buf);
   1a80e:	9003      	str	r0, [sp, #12]
	if (buf->len == 4U) {
   1a810:	2b04      	cmp	r3, #4
		cid = net_buf_simple_pull_le16(buf);
   1a812:	4628      	mov	r0, r5
	if (buf->len == 4U) {
   1a814:	d13a      	bne.n	1a88c <mod_pub_status+0xcc>
		cid = net_buf_simple_pull_le16(buf);
   1a816:	f00a fb83 	bl	24f20 <net_buf_simple_pull_le16>
   1a81a:	4606      	mov	r6, r0
		mod_id = net_buf_simple_pull_le16(buf);
   1a81c:	4628      	mov	r0, r5
   1a81e:	f00a fb7f 	bl	24f20 <net_buf_simple_pull_le16>
   1a822:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_PUB_STATUS, ctx->addr,
   1a824:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1a8a4 <mod_pub_status+0xe4>
   1a828:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   1a82c:	f8db 0000 	ldr.w	r0, [fp]
   1a830:	ab05      	add	r3, sp, #20
   1a832:	f248 0119 	movw	r1, #32793	; 0x8019
   1a836:	3008      	adds	r0, #8
   1a838:	f008 fc6b 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a83c:	b318      	cbz	r0, 1a886 <mod_pub_status+0xc6>
		if (mod_id != param->mod_id || cid != param->cid) {
   1a83e:	9b05      	ldr	r3, [sp, #20]
   1a840:	881a      	ldrh	r2, [r3, #0]
   1a842:	42aa      	cmp	r2, r5
   1a844:	d12b      	bne.n	1a89e <mod_pub_status+0xde>
   1a846:	885a      	ldrh	r2, [r3, #2]
   1a848:	42b2      	cmp	r2, r6
   1a84a:	d128      	bne.n	1a89e <mod_pub_status+0xde>
		if (elem_addr != param->elem_addr) {
   1a84c:	889a      	ldrh	r2, [r3, #4]
   1a84e:	454a      	cmp	r2, r9
   1a850:	d125      	bne.n	1a89e <mod_pub_status+0xde>
		if (param->status) {
   1a852:	689b      	ldr	r3, [r3, #8]
   1a854:	b10b      	cbz	r3, 1a85a <mod_pub_status+0x9a>
			*param->status = status;
   1a856:	f883 8000 	strb.w	r8, [r3]
		if (param->pub) {
   1a85a:	9b05      	ldr	r3, [sp, #20]
   1a85c:	68db      	ldr	r3, [r3, #12]
   1a85e:	b163      	cbz	r3, 1a87a <mod_pub_status+0xba>
	pub.app_idx &= BIT_MASK(12);
   1a860:	f3c4 020b 	ubfx	r2, r4, #0, #12
			*param->pub = pub;
   1a864:	811a      	strh	r2, [r3, #8]
   1a866:	9a01      	ldr	r2, [sp, #4]
   1a868:	72da      	strb	r2, [r3, #11]
   1a86a:	9a02      	ldr	r2, [sp, #8]
   1a86c:	731a      	strb	r2, [r3, #12]
	pub.cred_flag = (pub.app_idx & BIT(12));
   1a86e:	f3c4 3400 	ubfx	r4, r4, #12, #1
			*param->pub = pub;
   1a872:	9a03      	ldr	r2, [sp, #12]
   1a874:	801f      	strh	r7, [r3, #0]
   1a876:	729c      	strb	r4, [r3, #10]
   1a878:	735a      	strb	r2, [r3, #13]
   1a87a:	f8db 0000 	ldr.w	r0, [fp]
   1a87e:	3008      	adds	r0, #8
   1a880:	f00a f8b6 	bl	249f0 <k_sem_give>
	return 0;
   1a884:	2000      	movs	r0, #0
}
   1a886:	b007      	add	sp, #28
   1a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mod_id = net_buf_simple_pull_le16(buf);
   1a88c:	f00a fb48 	bl	24f20 <net_buf_simple_pull_le16>
		cid = CID_NVAL;
   1a890:	f64f 76ff 	movw	r6, #65535	; 0xffff
		mod_id = net_buf_simple_pull_le16(buf);
   1a894:	4605      	mov	r5, r0
   1a896:	e7c5      	b.n	1a824 <mod_pub_status+0x64>
		return -EINVAL;
   1a898:	f06f 0015 	mvn.w	r0, #21
   1a89c:	e7f3      	b.n	1a886 <mod_pub_status+0xc6>
			return -ENOENT;
   1a89e:	f06f 0001 	mvn.w	r0, #1
   1a8a2:	e7f0      	b.n	1a886 <mod_pub_status+0xc6>
   1a8a4:	200028cc 	.word	0x200028cc

0001a8a8 <mod_app_status>:
{
   1a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 7U) && (buf->len != 9U)) {
   1a8ac:	8893      	ldrh	r3, [r2, #4]
   1a8ae:	2b07      	cmp	r3, #7
{
   1a8b0:	b085      	sub	sp, #20
   1a8b2:	460f      	mov	r7, r1
   1a8b4:	4614      	mov	r4, r2
	if ((buf->len != 7U) && (buf->len != 9U)) {
   1a8b6:	d001      	beq.n	1a8bc <mod_app_status+0x14>
   1a8b8:	2b09      	cmp	r3, #9
   1a8ba:	d155      	bne.n	1a968 <mod_app_status+0xc0>
	status = net_buf_simple_pull_u8(buf);
   1a8bc:	4620      	mov	r0, r4
   1a8be:	f00a fb27 	bl	24f10 <net_buf_simple_pull_u8>
   1a8c2:	4680      	mov	r8, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a8c4:	4620      	mov	r0, r4
   1a8c6:	f00a fb2b 	bl	24f20 <net_buf_simple_pull_le16>
   1a8ca:	4681      	mov	r9, r0
	mod_app_idx = net_buf_simple_pull_le16(buf);
   1a8cc:	4620      	mov	r0, r4
   1a8ce:	f00a fb27 	bl	24f20 <net_buf_simple_pull_le16>
	if (buf->len >= 4U) {
   1a8d2:	88a3      	ldrh	r3, [r4, #4]
   1a8d4:	2b03      	cmp	r3, #3
	mod_app_idx = net_buf_simple_pull_le16(buf);
   1a8d6:	4682      	mov	sl, r0
	if (buf->len >= 4U) {
   1a8d8:	d940      	bls.n	1a95c <mod_app_status+0xb4>
		cid = net_buf_simple_pull_le16(buf);
   1a8da:	4620      	mov	r0, r4
   1a8dc:	f00a fb20 	bl	24f20 <net_buf_simple_pull_le16>
   1a8e0:	4606      	mov	r6, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1a8e2:	4620      	mov	r0, r4
   1a8e4:	f00a fb1c 	bl	24f20 <net_buf_simple_pull_le16>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_APP_STATUS, ctx->addr,
   1a8e8:	f8df b084 	ldr.w	fp, [pc, #132]	; 1a970 <mod_app_status+0xc8>
   1a8ec:	88ba      	ldrh	r2, [r7, #4]
	mod_id = net_buf_simple_pull_le16(buf);
   1a8ee:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_APP_STATUS, ctx->addr,
   1a8f0:	f8db 0000 	ldr.w	r0, [fp]
   1a8f4:	ab03      	add	r3, sp, #12
   1a8f6:	f248 013e 	movw	r1, #32830	; 0x803e
   1a8fa:	3008      	adds	r0, #8
   1a8fc:	f008 fc09 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a900:	4604      	mov	r4, r0
   1a902:	b1b0      	cbz	r0, 1a932 <mod_app_status+0x8a>
		if (param->elem_addr != elem_addr ||
   1a904:	9b03      	ldr	r3, [sp, #12]
   1a906:	889a      	ldrh	r2, [r3, #4]
   1a908:	454a      	cmp	r2, r9
   1a90a:	d12a      	bne.n	1a962 <mod_app_status+0xba>
   1a90c:	88da      	ldrh	r2, [r3, #6]
   1a90e:	4552      	cmp	r2, sl
   1a910:	d127      	bne.n	1a962 <mod_app_status+0xba>
		    param->mod_app_idx != mod_app_idx ||
   1a912:	891a      	ldrh	r2, [r3, #8]
   1a914:	42aa      	cmp	r2, r5
   1a916:	d124      	bne.n	1a962 <mod_app_status+0xba>
		    param->mod_id != mod_id || param->cid != cid) {
   1a918:	895a      	ldrh	r2, [r3, #10]
   1a91a:	42b2      	cmp	r2, r6
   1a91c:	d121      	bne.n	1a962 <mod_app_status+0xba>
		if (param->status) {
   1a91e:	681b      	ldr	r3, [r3, #0]
   1a920:	b10b      	cbz	r3, 1a926 <mod_app_status+0x7e>
			*param->status = status;
   1a922:	f883 8000 	strb.w	r8, [r3]
   1a926:	f8db 0000 	ldr.w	r0, [fp]
   1a92a:	3008      	adds	r0, #8
   1a92c:	f00a f860 	bl	249f0 <k_sem_give>
	err = 0;
   1a930:	2400      	movs	r4, #0
	if (cli->cb && cli->cb->mod_app_status) {
   1a932:	f8db 0000 	ldr.w	r0, [fp]
   1a936:	6843      	ldr	r3, [r0, #4]
   1a938:	b163      	cbz	r3, 1a954 <mod_app_status+0xac>
   1a93a:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
   1a93e:	f1bb 0f00 	cmp.w	fp, #0
   1a942:	d007      	beq.n	1a954 <mod_app_status+0xac>
					mod_app_idx, (cid << 16) | mod_id);
   1a944:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
		cli->cb->mod_app_status(cli, ctx->addr, status, elem_addr,
   1a948:	e9cd a500 	strd	sl, r5, [sp]
   1a94c:	88b9      	ldrh	r1, [r7, #4]
   1a94e:	464b      	mov	r3, r9
   1a950:	4642      	mov	r2, r8
   1a952:	47d8      	blx	fp
}
   1a954:	4620      	mov	r0, r4
   1a956:	b005      	add	sp, #20
   1a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cid = CID_NVAL;
   1a95c:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1a960:	e7bf      	b.n	1a8e2 <mod_app_status+0x3a>
			err = -ENOENT;
   1a962:	f06f 0401 	mvn.w	r4, #1
   1a966:	e7e4      	b.n	1a932 <mod_app_status+0x8a>
		return -EMSGSIZE;
   1a968:	f06f 0479 	mvn.w	r4, #121	; 0x79
   1a96c:	e7f2      	b.n	1a954 <mod_app_status+0xac>
   1a96e:	bf00      	nop
   1a970:	200028cc 	.word	0x200028cc

0001a974 <net_key_status>:
{
   1a974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	status = net_buf_simple_pull_u8(buf);
   1a978:	4610      	mov	r0, r2
{
   1a97a:	4614      	mov	r4, r2
   1a97c:	460d      	mov	r5, r1
	status = net_buf_simple_pull_u8(buf);
   1a97e:	f00a fac7 	bl	24f10 <net_buf_simple_pull_u8>
   1a982:	4606      	mov	r6, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   1a984:	4620      	mov	r0, r4
   1a986:	f00a facb 	bl	24f20 <net_buf_simple_pull_le16>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_STATUS, ctx->addr,
   1a98a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1a9ec <net_key_status+0x78>
   1a98e:	88aa      	ldrh	r2, [r5, #4]
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   1a990:	f3c0 070b 	ubfx	r7, r0, #0, #12
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_STATUS, ctx->addr,
   1a994:	f8d8 0000 	ldr.w	r0, [r8]
   1a998:	ab01      	add	r3, sp, #4
   1a99a:	f248 0144 	movw	r1, #32836	; 0x8044
   1a99e:	3008      	adds	r0, #8
   1a9a0:	f008 fbb7 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1a9a4:	4604      	mov	r4, r0
   1a9a6:	b160      	cbz	r0, 1a9c2 <net_key_status+0x4e>
		if (param->net_idx != net_idx) {
   1a9a8:	9b01      	ldr	r3, [sp, #4]
   1a9aa:	889a      	ldrh	r2, [r3, #4]
   1a9ac:	42ba      	cmp	r2, r7
   1a9ae:	d119      	bne.n	1a9e4 <net_key_status+0x70>
		if (param->status) {
   1a9b0:	681b      	ldr	r3, [r3, #0]
   1a9b2:	b103      	cbz	r3, 1a9b6 <net_key_status+0x42>
			*param->status = status;
   1a9b4:	701e      	strb	r6, [r3, #0]
   1a9b6:	f8d8 0000 	ldr.w	r0, [r8]
   1a9ba:	3008      	adds	r0, #8
   1a9bc:	f00a f818 	bl	249f0 <k_sem_give>
	err = 0;
   1a9c0:	2400      	movs	r4, #0
	if (cli->cb && cli->cb->net_key_status) {
   1a9c2:	f8d8 0000 	ldr.w	r0, [r8]
   1a9c6:	6843      	ldr	r3, [r0, #4]
   1a9c8:	b143      	cbz	r3, 1a9dc <net_key_status+0x68>
   1a9ca:	f8d3 8020 	ldr.w	r8, [r3, #32]
   1a9ce:	f1b8 0f00 	cmp.w	r8, #0
   1a9d2:	d003      	beq.n	1a9dc <net_key_status+0x68>
		cli->cb->net_key_status(cli, ctx->addr, status, net_idx);
   1a9d4:	88a9      	ldrh	r1, [r5, #4]
   1a9d6:	463b      	mov	r3, r7
   1a9d8:	4632      	mov	r2, r6
   1a9da:	47c0      	blx	r8
}
   1a9dc:	4620      	mov	r0, r4
   1a9de:	b002      	add	sp, #8
   1a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = -ENOENT;
   1a9e4:	f06f 0401 	mvn.w	r4, #1
   1a9e8:	e7eb      	b.n	1a9c2 <net_key_status+0x4e>
   1a9ea:	bf00      	nop
   1a9ec:	200028cc 	.word	0x200028cc

0001a9f0 <relay_status>:
{
   1a9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	status = net_buf_simple_pull_u8(buf);
   1a9f2:	4610      	mov	r0, r2
{
   1a9f4:	4616      	mov	r6, r2
   1a9f6:	460c      	mov	r4, r1
	status = net_buf_simple_pull_u8(buf);
   1a9f8:	f00a fa8a 	bl	24f10 <net_buf_simple_pull_u8>
   1a9fc:	4605      	mov	r5, r0
	transmit = net_buf_simple_pull_u8(buf);
   1a9fe:	4630      	mov	r0, r6
   1aa00:	f00a fa86 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_RELAY_STATUS, ctx->addr,
   1aa04:	4f11      	ldr	r7, [pc, #68]	; (1aa4c <relay_status+0x5c>)
   1aa06:	88a2      	ldrh	r2, [r4, #4]
	transmit = net_buf_simple_pull_u8(buf);
   1aa08:	4606      	mov	r6, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_RELAY_STATUS, ctx->addr,
   1aa0a:	6838      	ldr	r0, [r7, #0]
   1aa0c:	ab01      	add	r3, sp, #4
   1aa0e:	f248 0128 	movw	r1, #32808	; 0x8028
   1aa12:	3008      	adds	r0, #8
   1aa14:	f008 fb7d 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1aa18:	b158      	cbz	r0, 1aa32 <relay_status+0x42>
		if (param->status) {
   1aa1a:	9b01      	ldr	r3, [sp, #4]
   1aa1c:	681b      	ldr	r3, [r3, #0]
   1aa1e:	b103      	cbz	r3, 1aa22 <relay_status+0x32>
			*param->status = status;
   1aa20:	701d      	strb	r5, [r3, #0]
		if (param->transmit) {
   1aa22:	9b01      	ldr	r3, [sp, #4]
   1aa24:	685b      	ldr	r3, [r3, #4]
   1aa26:	b103      	cbz	r3, 1aa2a <relay_status+0x3a>
			*param->transmit = transmit;
   1aa28:	701e      	strb	r6, [r3, #0]
   1aa2a:	6838      	ldr	r0, [r7, #0]
   1aa2c:	3008      	adds	r0, #8
   1aa2e:	f009 ffdf 	bl	249f0 <k_sem_give>
	if (cli->cb && cli->cb->relay_status) {
   1aa32:	6838      	ldr	r0, [r7, #0]
   1aa34:	6843      	ldr	r3, [r0, #4]
   1aa36:	b12b      	cbz	r3, 1aa44 <relay_status+0x54>
   1aa38:	69df      	ldr	r7, [r3, #28]
   1aa3a:	b11f      	cbz	r7, 1aa44 <relay_status+0x54>
		cli->cb->relay_status(cli, ctx->addr, status, transmit);
   1aa3c:	88a1      	ldrh	r1, [r4, #4]
   1aa3e:	4633      	mov	r3, r6
   1aa40:	462a      	mov	r2, r5
   1aa42:	47b8      	blx	r7
}
   1aa44:	2000      	movs	r0, #0
   1aa46:	b003      	add	sp, #12
   1aa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa4a:	bf00      	nop
   1aa4c:	200028cc 	.word	0x200028cc

0001aa50 <lpn_timeout_status>:
	int32_t *polltimeout;
};

static int lpn_timeout_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   1aa50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	unicast_addr = net_buf_simple_pull_le16(buf);
   1aa54:	4610      	mov	r0, r2
{
   1aa56:	4614      	mov	r4, r2
   1aa58:	460d      	mov	r5, r1
	unicast_addr = net_buf_simple_pull_le16(buf);
   1aa5a:	f00a fa61 	bl	24f20 <net_buf_simple_pull_le16>
   1aa5e:	4606      	mov	r6, r0
	polltimeout = net_buf_simple_pull_le24(buf);
   1aa60:	4620      	mov	r0, r4
   1aa62:	f00a fa6f 	bl	24f44 <net_buf_simple_pull_le24>

	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_LPN_TIMEOUT_STATUS, ctx->addr,
   1aa66:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1aac4 <lpn_timeout_status+0x74>
   1aa6a:	88aa      	ldrh	r2, [r5, #4]
	polltimeout = net_buf_simple_pull_le24(buf);
   1aa6c:	4607      	mov	r7, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_LPN_TIMEOUT_STATUS, ctx->addr,
   1aa6e:	f8d8 0000 	ldr.w	r0, [r8]
   1aa72:	ab01      	add	r3, sp, #4
   1aa74:	f248 012e 	movw	r1, #32814	; 0x802e
   1aa78:	3008      	adds	r0, #8
   1aa7a:	f008 fb4a 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1aa7e:	4604      	mov	r4, r0
   1aa80:	b160      	cbz	r0, 1aa9c <lpn_timeout_status+0x4c>
				       (void **)&param)) {
		if (param->unicast_addr != unicast_addr) {
   1aa82:	9b01      	ldr	r3, [sp, #4]
   1aa84:	881a      	ldrh	r2, [r3, #0]
   1aa86:	42b2      	cmp	r2, r6
   1aa88:	d119      	bne.n	1aabe <lpn_timeout_status+0x6e>
			err = -ENOENT;
			goto done;
		}

		if (param->polltimeout) {
   1aa8a:	685b      	ldr	r3, [r3, #4]
   1aa8c:	b103      	cbz	r3, 1aa90 <lpn_timeout_status+0x40>
			*param->polltimeout = polltimeout;
   1aa8e:	601f      	str	r7, [r3, #0]
   1aa90:	f8d8 0000 	ldr.w	r0, [r8]
   1aa94:	3008      	adds	r0, #8
   1aa96:	f009 ffab 	bl	249f0 <k_sem_give>
		}

		bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);
	}

	err = 0;
   1aa9a:	2400      	movs	r4, #0

done:
	if (cli->cb && cli->cb->lpn_timeout_status) {
   1aa9c:	f8d8 0000 	ldr.w	r0, [r8]
   1aaa0:	6843      	ldr	r3, [r0, #4]
   1aaa2:	b143      	cbz	r3, 1aab6 <lpn_timeout_status+0x66>
   1aaa4:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   1aaa8:	f1b8 0f00 	cmp.w	r8, #0
   1aaac:	d003      	beq.n	1aab6 <lpn_timeout_status+0x66>
		cli->cb->lpn_timeout_status(cli, ctx->addr, unicast_addr,
   1aaae:	88a9      	ldrh	r1, [r5, #4]
   1aab0:	463b      	mov	r3, r7
   1aab2:	4632      	mov	r2, r6
   1aab4:	47c0      	blx	r8
					    polltimeout);
	}

	return err;
}
   1aab6:	4620      	mov	r0, r4
   1aab8:	b002      	add	sp, #8
   1aaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = -ENOENT;
   1aabe:	f06f 0401 	mvn.w	r4, #1
   1aac2:	e7eb      	b.n	1aa9c <lpn_timeout_status+0x4c>
   1aac4:	200028cc 	.word	0x200028cc

0001aac8 <app_key_list>:
{
   1aac8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	status = net_buf_simple_pull_u8(buf);
   1aacc:	4610      	mov	r0, r2
{
   1aace:	4688      	mov	r8, r1
   1aad0:	4614      	mov	r4, r2
	status = net_buf_simple_pull_u8(buf);
   1aad2:	f00a fa1d 	bl	24f10 <net_buf_simple_pull_u8>
   1aad6:	4606      	mov	r6, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   1aad8:	4620      	mov	r0, r4
   1aada:	f00a fa21 	bl	24f20 <net_buf_simple_pull_le16>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_LIST, ctx->addr,
   1aade:	4f1f      	ldr	r7, [pc, #124]	; (1ab5c <app_key_list+0x94>)
   1aae0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   1aae4:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_LIST, ctx->addr,
   1aae6:	6838      	ldr	r0, [r7, #0]
   1aae8:	ab01      	add	r3, sp, #4
   1aaea:	f248 0102 	movw	r1, #32770	; 0x8002
   1aaee:	3008      	adds	r0, #8
   1aaf0:	f008 fb0f 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1aaf4:	b190      	cbz	r0, 1ab1c <app_key_list+0x54>
		if (param->net_idx != net_idx) {
   1aaf6:	9b01      	ldr	r3, [sp, #4]
   1aaf8:	881a      	ldrh	r2, [r3, #0]
   1aafa:	f3c5 050b 	ubfx	r5, r5, #0, #12
   1aafe:	42aa      	cmp	r2, r5
   1ab00:	d125      	bne.n	1ab4e <app_key_list+0x86>
		if (param->keys && param->key_cnt) {
   1ab02:	689a      	ldr	r2, [r3, #8]
   1ab04:	b10a      	cbz	r2, 1ab0a <app_key_list+0x42>
   1ab06:	68db      	ldr	r3, [r3, #12]
   1ab08:	b9fb      	cbnz	r3, 1ab4a <app_key_list+0x82>
		if (param->status) {
   1ab0a:	9b01      	ldr	r3, [sp, #4]
   1ab0c:	685b      	ldr	r3, [r3, #4]
   1ab0e:	b103      	cbz	r3, 1ab12 <app_key_list+0x4a>
			*param->status = status;
   1ab10:	701e      	strb	r6, [r3, #0]
   1ab12:	6838      	ldr	r0, [r7, #0]
   1ab14:	3008      	adds	r0, #8
   1ab16:	f009 ff6b 	bl	249f0 <k_sem_give>
	return 0;
   1ab1a:	2000      	movs	r0, #0
}
   1ab1c:	b002      	add	sp, #8
   1ab1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				key_idx_unpack(buf, &param->keys[i],
   1ab22:	006b      	lsls	r3, r5, #1
   1ab24:	6889      	ldr	r1, [r1, #8]
						&param->keys[i + 1]);
   1ab26:	1c9a      	adds	r2, r3, #2
				key_idx_unpack(buf, &param->keys[i],
   1ab28:	440a      	add	r2, r1
   1ab2a:	4620      	mov	r0, r4
   1ab2c:	4419      	add	r1, r3
   1ab2e:	f009 ff7d 	bl	24a2c <key_idx_unpack>
			for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   1ab32:	3502      	adds	r5, #2
   1ab34:	9901      	ldr	r1, [sp, #4]
   1ab36:	88a2      	ldrh	r2, [r4, #4]
   1ab38:	68cb      	ldr	r3, [r1, #12]
   1ab3a:	6818      	ldr	r0, [r3, #0]
   1ab3c:	42a8      	cmp	r0, r5
   1ab3e:	d901      	bls.n	1ab44 <app_key_list+0x7c>
   1ab40:	2a02      	cmp	r2, #2
   1ab42:	d8ee      	bhi.n	1ab22 <app_key_list+0x5a>
			if (buf->len > 0U) {
   1ab44:	b932      	cbnz	r2, 1ab54 <app_key_list+0x8c>
			*param->key_cnt = i;
   1ab46:	601d      	str	r5, [r3, #0]
   1ab48:	e7df      	b.n	1ab0a <app_key_list+0x42>
			for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   1ab4a:	2500      	movs	r5, #0
   1ab4c:	e7f2      	b.n	1ab34 <app_key_list+0x6c>
			return -ENOENT;
   1ab4e:	f06f 0001 	mvn.w	r0, #1
   1ab52:	e7e3      	b.n	1ab1c <app_key_list+0x54>
				return -EMSGSIZE;
   1ab54:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ab58:	e7e0      	b.n	1ab1c <app_key_list+0x54>
   1ab5a:	bf00      	nop
   1ab5c:	200028cc 	.word	0x200028cc

0001ab60 <app_key_status>:
{
   1ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
	status = net_buf_simple_pull_u8(buf);
   1ab62:	4610      	mov	r0, r2
{
   1ab64:	b085      	sub	sp, #20
   1ab66:	4614      	mov	r4, r2
   1ab68:	460d      	mov	r5, r1
	status = net_buf_simple_pull_u8(buf);
   1ab6a:	f00a f9d1 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_STATUS, ctx->addr,
   1ab6e:	4f1c      	ldr	r7, [pc, #112]	; (1abe0 <app_key_status+0x80>)
	key_idx_unpack(buf, &net_idx, &app_idx);
   1ab70:	f10d 020a 	add.w	r2, sp, #10
   1ab74:	a902      	add	r1, sp, #8
	status = net_buf_simple_pull_u8(buf);
   1ab76:	4606      	mov	r6, r0
	key_idx_unpack(buf, &net_idx, &app_idx);
   1ab78:	4620      	mov	r0, r4
   1ab7a:	f009 ff57 	bl	24a2c <key_idx_unpack>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_STATUS, ctx->addr,
   1ab7e:	6838      	ldr	r0, [r7, #0]
   1ab80:	88aa      	ldrh	r2, [r5, #4]
   1ab82:	ab03      	add	r3, sp, #12
   1ab84:	f248 0103 	movw	r1, #32771	; 0x8003
   1ab88:	3008      	adds	r0, #8
   1ab8a:	f008 fac2 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1ab8e:	4604      	mov	r4, r0
   1ab90:	b190      	cbz	r0, 1abb8 <app_key_status+0x58>
		if (param->net_idx != net_idx || param->app_idx != app_idx) {
   1ab92:	9b03      	ldr	r3, [sp, #12]
   1ab94:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1ab98:	8899      	ldrh	r1, [r3, #4]
   1ab9a:	4291      	cmp	r1, r2
   1ab9c:	d11c      	bne.n	1abd8 <app_key_status+0x78>
   1ab9e:	88d9      	ldrh	r1, [r3, #6]
   1aba0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1aba4:	4291      	cmp	r1, r2
   1aba6:	d117      	bne.n	1abd8 <app_key_status+0x78>
		if (param->status) {
   1aba8:	681b      	ldr	r3, [r3, #0]
   1abaa:	b103      	cbz	r3, 1abae <app_key_status+0x4e>
			*param->status = status;
   1abac:	701e      	strb	r6, [r3, #0]
   1abae:	6838      	ldr	r0, [r7, #0]
   1abb0:	3008      	adds	r0, #8
   1abb2:	f009 ff1d 	bl	249f0 <k_sem_give>
	err = 0;
   1abb6:	2400      	movs	r4, #0
	if (cli->cb && cli->cb->app_key_status) {
   1abb8:	6838      	ldr	r0, [r7, #0]
   1abba:	6843      	ldr	r3, [r0, #4]
   1abbc:	b14b      	cbz	r3, 1abd2 <app_key_status+0x72>
   1abbe:	6a5f      	ldr	r7, [r3, #36]	; 0x24
   1abc0:	b13f      	cbz	r7, 1abd2 <app_key_status+0x72>
		cli->cb->app_key_status(cli, ctx->addr, status, net_idx,
   1abc2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1abc6:	9300      	str	r3, [sp, #0]
   1abc8:	88a9      	ldrh	r1, [r5, #4]
   1abca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1abce:	4632      	mov	r2, r6
   1abd0:	47b8      	blx	r7
}
   1abd2:	4620      	mov	r0, r4
   1abd4:	b005      	add	sp, #20
   1abd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = -ENOENT;
   1abd8:	f06f 0401 	mvn.w	r4, #1
   1abdc:	e7ec      	b.n	1abb8 <app_key_status+0x58>
   1abde:	bf00      	nop
   1abe0:	200028cc 	.word	0x200028cc

0001abe4 <net_key_list>:
{
   1abe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_LIST, ctx->addr,
   1abe6:	4e1f      	ldr	r6, [pc, #124]	; (1ac64 <net_key_list+0x80>)
   1abe8:	6830      	ldr	r0, [r6, #0]
{
   1abea:	4615      	mov	r5, r2
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_LIST, ctx->addr,
   1abec:	ab01      	add	r3, sp, #4
   1abee:	888a      	ldrh	r2, [r1, #4]
   1abf0:	3008      	adds	r0, #8
   1abf2:	f248 0143 	movw	r1, #32835	; 0x8043
   1abf6:	f008 fa8c 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1abfa:	b148      	cbz	r0, 1ac10 <net_key_list+0x2c>
		if (param->keys && param->key_cnt) {
   1abfc:	9b01      	ldr	r3, [sp, #4]
   1abfe:	681a      	ldr	r2, [r3, #0]
   1ac00:	b10a      	cbz	r2, 1ac06 <net_key_list+0x22>
   1ac02:	685b      	ldr	r3, [r3, #4]
   1ac04:	bb4b      	cbnz	r3, 1ac5a <net_key_list+0x76>
   1ac06:	6830      	ldr	r0, [r6, #0]
   1ac08:	3008      	adds	r0, #8
   1ac0a:	f009 fef1 	bl	249f0 <k_sem_give>
	return 0;
   1ac0e:	2000      	movs	r0, #0
}
   1ac10:	b003      	add	sp, #12
   1ac12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				key_idx_unpack(buf, &param->keys[i],
   1ac14:	6819      	ldr	r1, [r3, #0]
   1ac16:	0063      	lsls	r3, r4, #1
						&param->keys[i + 1]);
   1ac18:	1c9a      	adds	r2, r3, #2
				key_idx_unpack(buf, &param->keys[i],
   1ac1a:	440a      	add	r2, r1
   1ac1c:	4628      	mov	r0, r5
   1ac1e:	4419      	add	r1, r3
   1ac20:	f009 ff04 	bl	24a2c <key_idx_unpack>
			for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   1ac24:	3402      	adds	r4, #2
   1ac26:	9b01      	ldr	r3, [sp, #4]
   1ac28:	88aa      	ldrh	r2, [r5, #4]
   1ac2a:	6859      	ldr	r1, [r3, #4]
   1ac2c:	6809      	ldr	r1, [r1, #0]
   1ac2e:	428c      	cmp	r4, r1
   1ac30:	4627      	mov	r7, r4
   1ac32:	d20c      	bcs.n	1ac4e <net_key_list+0x6a>
   1ac34:	2a02      	cmp	r2, #2
   1ac36:	d8ed      	bhi.n	1ac14 <net_key_list+0x30>
			if (i < *param->key_cnt && buf->len >= 2) {
   1ac38:	d109      	bne.n	1ac4e <net_key_list+0x6a>
					net_buf_simple_pull_le16(buf) & 0xfff;
   1ac3a:	4628      	mov	r0, r5
   1ac3c:	f00a f970 	bl	24f20 <net_buf_simple_pull_le16>
				param->keys[i++] =
   1ac40:	9b01      	ldr	r3, [sp, #4]
   1ac42:	681b      	ldr	r3, [r3, #0]
					net_buf_simple_pull_le16(buf) & 0xfff;
   1ac44:	f3c0 000b 	ubfx	r0, r0, #0, #12
				param->keys[i++] =
   1ac48:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
   1ac4c:	3401      	adds	r4, #1
			if (buf->len > 0) {
   1ac4e:	88ab      	ldrh	r3, [r5, #4]
   1ac50:	b92b      	cbnz	r3, 1ac5e <net_key_list+0x7a>
			*param->key_cnt = i;
   1ac52:	9b01      	ldr	r3, [sp, #4]
   1ac54:	685b      	ldr	r3, [r3, #4]
   1ac56:	601c      	str	r4, [r3, #0]
   1ac58:	e7d5      	b.n	1ac06 <net_key_list+0x22>
			for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   1ac5a:	2400      	movs	r4, #0
   1ac5c:	e7e3      	b.n	1ac26 <net_key_list+0x42>
				return -EMSGSIZE;
   1ac5e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ac62:	e7d5      	b.n	1ac10 <net_key_list+0x2c>
   1ac64:	200028cc 	.word	0x200028cc

0001ac68 <comp_data_status>:
{
   1ac68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	page = net_buf_simple_pull_u8(buf);
   1ac6a:	4610      	mov	r0, r2
{
   1ac6c:	460e      	mov	r6, r1
   1ac6e:	4614      	mov	r4, r2
	page = net_buf_simple_pull_u8(buf);
   1ac70:	f00a f94e 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_DEV_COMP_DATA_STATUS, ctx->addr,
   1ac74:	4f13      	ldr	r7, [pc, #76]	; (1acc4 <comp_data_status+0x5c>)
   1ac76:	88b2      	ldrh	r2, [r6, #4]
	page = net_buf_simple_pull_u8(buf);
   1ac78:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_DEV_COMP_DATA_STATUS, ctx->addr,
   1ac7a:	6838      	ldr	r0, [r7, #0]
   1ac7c:	ab01      	add	r3, sp, #4
   1ac7e:	2102      	movs	r1, #2
   1ac80:	3008      	adds	r0, #8
   1ac82:	f008 fa46 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1ac86:	b1c8      	cbz	r0, 1acbc <comp_data_status+0x54>
		if (param->page) {
   1ac88:	9b01      	ldr	r3, [sp, #4]
   1ac8a:	681b      	ldr	r3, [r3, #0]
   1ac8c:	b103      	cbz	r3, 1ac90 <comp_data_status+0x28>
			*(param->page) = page;
   1ac8e:	701d      	strb	r5, [r3, #0]
		if (param->comp) {
   1ac90:	9b01      	ldr	r3, [sp, #4]
   1ac92:	6858      	ldr	r0, [r3, #4]
   1ac94:	b170      	cbz	r0, 1acb4 <comp_data_status+0x4c>
			to_copy = MIN(net_buf_simple_tailroom(param->comp), buf->len);
   1ac96:	f00a f970 	bl	24f7a <net_buf_simple_tailroom>
   1ac9a:	88a2      	ldrh	r2, [r4, #4]
   1ac9c:	4290      	cmp	r0, r2
   1ac9e:	d204      	bcs.n	1acaa <comp_data_status+0x42>
   1aca0:	9b01      	ldr	r3, [sp, #4]
   1aca2:	6858      	ldr	r0, [r3, #4]
   1aca4:	f00a f969 	bl	24f7a <net_buf_simple_tailroom>
   1aca8:	4602      	mov	r2, r0
			net_buf_simple_add_mem(param->comp, buf->data, to_copy);
   1acaa:	9b01      	ldr	r3, [sp, #4]
   1acac:	6821      	ldr	r1, [r4, #0]
   1acae:	6858      	ldr	r0, [r3, #4]
   1acb0:	f00a f8bc 	bl	24e2c <net_buf_simple_add_mem>
   1acb4:	6838      	ldr	r0, [r7, #0]
   1acb6:	3008      	adds	r0, #8
   1acb8:	f009 fe9a 	bl	249f0 <k_sem_give>
}
   1acbc:	2000      	movs	r0, #0
   1acbe:	b003      	add	sp, #12
   1acc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1acc2:	bf00      	nop
   1acc4:	200028cc 	.word	0x200028cc

0001acc8 <cli_prepare>:
const struct bt_mesh_model_cb bt_mesh_cfg_cli_cb = {
	.init = cfg_cli_init,
};

static int cli_prepare(void *param, uint32_t op, uint16_t addr)
{
   1acc8:	4603      	mov	r3, r0
	if (!cli) {
   1acca:	4804      	ldr	r0, [pc, #16]	; (1acdc <cli_prepare+0x14>)
   1accc:	6800      	ldr	r0, [r0, #0]
   1acce:	b110      	cbz	r0, 1acd6 <cli_prepare+0xe>
		BT_ERR("No available Configuration Client context!");
		return -EINVAL;
	}

	return bt_mesh_msg_ack_ctx_prepare(&cli->ack_ctx, op, addr, param);
   1acd0:	3008      	adds	r0, #8
   1acd2:	f008 ba05 	b.w	230e0 <bt_mesh_msg_ack_ctx_prepare>
}
   1acd6:	f06f 0015 	mvn.w	r0, #21
   1acda:	4770      	bx	lr
   1acdc:	200028cc 	.word	0x200028cc

0001ace0 <mod_app_bind>:
}

static int mod_app_bind(uint16_t net_idx, uint16_t addr, uint16_t elem_addr,
			uint16_t mod_app_idx, uint16_t mod_id, uint16_t cid,
			uint8_t *status)
{
   1ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ace4:	b091      	sub	sp, #68	; 0x44
   1ace6:	4616      	mov	r6, r2
   1ace8:	461d      	mov	r5, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_BIND, 8);
   1acea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
   1acee:	ab0c      	add	r3, sp, #48	; 0x30
   1acf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1acf4:	9303      	str	r3, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
   1acf6:	2300      	movs	r3, #0
   1acf8:	f8cd 301e 	str.w	r3, [sp, #30]
   1acfc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1ad00:	f64f 73fd 	movw	r3, #65533	; 0xfffd
{
   1ad04:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
   1ad08:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
   1ad0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
	struct bt_mesh_msg_ctx ctx = {
   1ad10:	f8ad 0018 	strh.w	r0, [sp, #24]
   1ad14:	f8ad 301a 	strh.w	r3, [sp, #26]
   1ad18:	f8ad 101c 	strh.w	r1, [sp, #28]
   1ad1c:	23ff      	movs	r3, #255	; 0xff
		.mod_id = mod_id,
		.cid = cid,
	};
	int err;

	err = cli_prepare(&param, OP_MOD_APP_STATUS, addr);
   1ad1e:	460a      	mov	r2, r1
   1ad20:	a809      	add	r0, sp, #36	; 0x24
   1ad22:	f248 013e 	movw	r1, #32830	; 0x803e
	struct bt_mesh_msg_ctx ctx = {
   1ad26:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	struct mod_app_param param = {
   1ad2a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1ad2e:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
   1ad32:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
   1ad36:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
   1ad3a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
	err = cli_prepare(&param, OP_MOD_APP_STATUS, addr);
   1ad3e:	f7ff ffc3 	bl	1acc8 <cli_prepare>
	if (err) {
   1ad42:	4604      	mov	r4, r0
   1ad44:	bb38      	cbnz	r0, 1ad96 <mod_app_bind+0xb6>
		return err;
	}

	bt_mesh_model_msg_init(&msg, OP_MOD_APP_BIND);
   1ad46:	f248 013d 	movw	r1, #32829	; 0x803d
   1ad4a:	a803      	add	r0, sp, #12
   1ad4c:	f008 f99a 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, elem_addr);
   1ad50:	4631      	mov	r1, r6
   1ad52:	a803      	add	r0, sp, #12
   1ad54:	f00a f87b 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, mod_app_idx);
   1ad58:	4629      	mov	r1, r5
   1ad5a:	a803      	add	r0, sp, #12
   1ad5c:	f00a f877 	bl	24e4e <net_buf_simple_add_le16>

	if (cid != CID_NVAL) {
   1ad60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad64:	429f      	cmp	r7, r3
   1ad66:	d003      	beq.n	1ad70 <mod_app_bind+0x90>
		net_buf_simple_add_le16(&msg, cid);
   1ad68:	4639      	mov	r1, r7
   1ad6a:	a803      	add	r0, sp, #12
   1ad6c:	f00a f86f 	bl	24e4e <net_buf_simple_add_le16>
	}

	net_buf_simple_add_le16(&msg, mod_id);

	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   1ad70:	4d1a      	ldr	r5, [pc, #104]	; (1addc <mod_app_bind+0xfc>)
	net_buf_simple_add_le16(&msg, mod_id);
   1ad72:	4649      	mov	r1, r9
   1ad74:	a803      	add	r0, sp, #12
   1ad76:	f00a f86a 	bl	24e4e <net_buf_simple_add_le16>
	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   1ad7a:	6828      	ldr	r0, [r5, #0]
   1ad7c:	2300      	movs	r3, #0
   1ad7e:	9300      	str	r3, [sp, #0]
   1ad80:	6800      	ldr	r0, [r0, #0]
   1ad82:	aa03      	add	r2, sp, #12
   1ad84:	a906      	add	r1, sp, #24
   1ad86:	f008 f924 	bl	22fd2 <bt_mesh_model_send>
	if (err) {
   1ad8a:	4604      	mov	r4, r0
   1ad8c:	b138      	cbz	r0, 1ad9e <mod_app_bind+0xbe>
		BT_ERR("model_send() failed (err %d)", err);
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1ad8e:	6828      	ldr	r0, [r5, #0]
   1ad90:	3008      	adds	r0, #8
		return err;
	}

	if (!status) {
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1ad92:	f008 f9a0 	bl	230d6 <bt_mesh_msg_ack_ctx_clear>
		return 0;
	}

	return bt_mesh_msg_ack_ctx_wait(&cli->ack_ctx, K_MSEC(msg_timeout));
}
   1ad96:	4620      	mov	r0, r4
   1ad98:	b011      	add	sp, #68	; 0x44
   1ad9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1ad9e:	682d      	ldr	r5, [r5, #0]
   1ada0:	3508      	adds	r5, #8
	if (!status) {
   1ada2:	f1b8 0f00 	cmp.w	r8, #0
   1ada6:	d101      	bne.n	1adac <mod_app_bind+0xcc>
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1ada8:	4628      	mov	r0, r5
   1adaa:	e7f2      	b.n	1ad92 <mod_app_bind+0xb2>
	return bt_mesh_msg_ack_ctx_wait(&cli->ack_ctx, K_MSEC(msg_timeout));
   1adac:	4b0c      	ldr	r3, [pc, #48]	; (1ade0 <mod_app_bind+0x100>)
   1adae:	681e      	ldr	r6, [r3, #0]
   1adb0:	4621      	mov	r1, r4
   1adb2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1adb6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1adba:	f240 30e7 	movw	r0, #999	; 0x3e7
   1adbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1adc2:	2300      	movs	r3, #0
   1adc4:	fbc6 0107 	smlal	r0, r1, r6, r7
   1adc8:	f7e5 f99a 	bl	100 <__aeabi_uldivmod>
   1adcc:	4602      	mov	r2, r0
   1adce:	460b      	mov	r3, r1
   1add0:	4628      	mov	r0, r5
   1add2:	f008 f990 	bl	230f6 <bt_mesh_msg_ack_ctx_wait>
   1add6:	4604      	mov	r4, r0
   1add8:	e7dd      	b.n	1ad96 <mod_app_bind+0xb6>
   1adda:	bf00      	nop
   1addc:	200028cc 	.word	0x200028cc
   1ade0:	200028d0 	.word	0x200028d0

0001ade4 <state_status_u8.constprop.0>:
static uint8_t state_status_u8(struct bt_mesh_model *model,
   1ade4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ade6:	4606      	mov	r6, r0
	status = net_buf_simple_pull_u8(buf);
   1ade8:	4608      	mov	r0, r1
static uint8_t state_status_u8(struct bt_mesh_model *model,
   1adea:	4615      	mov	r5, r2
	status = net_buf_simple_pull_u8(buf);
   1adec:	f00a f890 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, expect_status, ctx->addr,
   1adf0:	4f09      	ldr	r7, [pc, #36]	; (1ae18 <state_status_u8.constprop.0+0x34>)
   1adf2:	88b2      	ldrh	r2, [r6, #4]
	status = net_buf_simple_pull_u8(buf);
   1adf4:	4604      	mov	r4, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, expect_status, ctx->addr,
   1adf6:	6838      	ldr	r0, [r7, #0]
   1adf8:	ab01      	add	r3, sp, #4
   1adfa:	4629      	mov	r1, r5
   1adfc:	3008      	adds	r0, #8
   1adfe:	f008 f988 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   1ae02:	b130      	cbz	r0, 1ae12 <state_status_u8.constprop.0+0x2e>
		if (param) {
   1ae04:	9b01      	ldr	r3, [sp, #4]
   1ae06:	b103      	cbz	r3, 1ae0a <state_status_u8.constprop.0+0x26>
			*param = status;
   1ae08:	701c      	strb	r4, [r3, #0]
   1ae0a:	6838      	ldr	r0, [r7, #0]
   1ae0c:	3008      	adds	r0, #8
   1ae0e:	f009 fdef 	bl	249f0 <k_sem_give>
}
   1ae12:	4620      	mov	r0, r4
   1ae14:	b003      	add	sp, #12
   1ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae18:	200028cc 	.word	0x200028cc

0001ae1c <beacon_status>:
{
   1ae1c:	b510      	push	{r4, lr}
   1ae1e:	460c      	mov	r4, r1
	status = state_status_u8(model, ctx, buf, OP_BEACON_STATUS);
   1ae20:	4620      	mov	r0, r4
{
   1ae22:	4611      	mov	r1, r2
	status = state_status_u8(model, ctx, buf, OP_BEACON_STATUS);
   1ae24:	f248 020b 	movw	r2, #32779	; 0x800b
   1ae28:	f7ff ffdc 	bl	1ade4 <state_status_u8.constprop.0>
	if (cli->cb && cli->cb->beacon_status) {
   1ae2c:	4b05      	ldr	r3, [pc, #20]	; (1ae44 <beacon_status+0x28>)
	status = state_status_u8(model, ctx, buf, OP_BEACON_STATUS);
   1ae2e:	4602      	mov	r2, r0
	if (cli->cb && cli->cb->beacon_status) {
   1ae30:	6818      	ldr	r0, [r3, #0]
   1ae32:	6843      	ldr	r3, [r0, #4]
   1ae34:	b11b      	cbz	r3, 1ae3e <beacon_status+0x22>
   1ae36:	689b      	ldr	r3, [r3, #8]
   1ae38:	b10b      	cbz	r3, 1ae3e <beacon_status+0x22>
		cli->cb->beacon_status(cli, ctx->addr, status);
   1ae3a:	88a1      	ldrh	r1, [r4, #4]
   1ae3c:	4798      	blx	r3
}
   1ae3e:	2000      	movs	r0, #0
   1ae40:	bd10      	pop	{r4, pc}
   1ae42:	bf00      	nop
   1ae44:	200028cc 	.word	0x200028cc

0001ae48 <ttl_status>:
{
   1ae48:	b510      	push	{r4, lr}
   1ae4a:	460c      	mov	r4, r1
	status = state_status_u8(model, ctx, buf, OP_DEFAULT_TTL_STATUS);
   1ae4c:	4620      	mov	r0, r4
{
   1ae4e:	4611      	mov	r1, r2
	status = state_status_u8(model, ctx, buf, OP_DEFAULT_TTL_STATUS);
   1ae50:	f248 020e 	movw	r2, #32782	; 0x800e
   1ae54:	f7ff ffc6 	bl	1ade4 <state_status_u8.constprop.0>
	if (cli->cb && cli->cb->ttl_status) {
   1ae58:	4b05      	ldr	r3, [pc, #20]	; (1ae70 <ttl_status+0x28>)
	status = state_status_u8(model, ctx, buf, OP_DEFAULT_TTL_STATUS);
   1ae5a:	4602      	mov	r2, r0
	if (cli->cb && cli->cb->ttl_status) {
   1ae5c:	6818      	ldr	r0, [r3, #0]
   1ae5e:	6843      	ldr	r3, [r0, #4]
   1ae60:	b11b      	cbz	r3, 1ae6a <ttl_status+0x22>
   1ae62:	68db      	ldr	r3, [r3, #12]
   1ae64:	b10b      	cbz	r3, 1ae6a <ttl_status+0x22>
		cli->cb->ttl_status(cli, ctx->addr, status);
   1ae66:	88a1      	ldrh	r1, [r4, #4]
   1ae68:	4798      	blx	r3
}
   1ae6a:	2000      	movs	r0, #0
   1ae6c:	bd10      	pop	{r4, pc}
   1ae6e:	bf00      	nop
   1ae70:	200028cc 	.word	0x200028cc

0001ae74 <friend_status>:
{
   1ae74:	b510      	push	{r4, lr}
   1ae76:	460c      	mov	r4, r1
	status = state_status_u8(model, ctx, buf, OP_FRIEND_STATUS);
   1ae78:	4620      	mov	r0, r4
{
   1ae7a:	4611      	mov	r1, r2
	status = state_status_u8(model, ctx, buf, OP_FRIEND_STATUS);
   1ae7c:	f248 0211 	movw	r2, #32785	; 0x8011
   1ae80:	f7ff ffb0 	bl	1ade4 <state_status_u8.constprop.0>
	if (cli->cb && cli->cb->friend_status) {
   1ae84:	4b05      	ldr	r3, [pc, #20]	; (1ae9c <friend_status+0x28>)
	status = state_status_u8(model, ctx, buf, OP_FRIEND_STATUS);
   1ae86:	4602      	mov	r2, r0
	if (cli->cb && cli->cb->friend_status) {
   1ae88:	6818      	ldr	r0, [r3, #0]
   1ae8a:	6843      	ldr	r3, [r0, #4]
   1ae8c:	b11b      	cbz	r3, 1ae96 <friend_status+0x22>
   1ae8e:	691b      	ldr	r3, [r3, #16]
   1ae90:	b10b      	cbz	r3, 1ae96 <friend_status+0x22>
		cli->cb->friend_status(cli, ctx->addr, status);
   1ae92:	88a1      	ldrh	r1, [r4, #4]
   1ae94:	4798      	blx	r3
}
   1ae96:	2000      	movs	r0, #0
   1ae98:	bd10      	pop	{r4, pc}
   1ae9a:	bf00      	nop
   1ae9c:	200028cc 	.word	0x200028cc

0001aea0 <gatt_proxy_status>:
{
   1aea0:	b510      	push	{r4, lr}
   1aea2:	460c      	mov	r4, r1
	status = state_status_u8(model, ctx, buf, OP_GATT_PROXY_STATUS);
   1aea4:	4620      	mov	r0, r4
{
   1aea6:	4611      	mov	r1, r2
	status = state_status_u8(model, ctx, buf, OP_GATT_PROXY_STATUS);
   1aea8:	f248 0214 	movw	r2, #32788	; 0x8014
   1aeac:	f7ff ff9a 	bl	1ade4 <state_status_u8.constprop.0>
	if (cli->cb && cli->cb->gatt_proxy_status) {
   1aeb0:	4b05      	ldr	r3, [pc, #20]	; (1aec8 <gatt_proxy_status+0x28>)
	status = state_status_u8(model, ctx, buf, OP_GATT_PROXY_STATUS);
   1aeb2:	4602      	mov	r2, r0
	if (cli->cb && cli->cb->gatt_proxy_status) {
   1aeb4:	6818      	ldr	r0, [r3, #0]
   1aeb6:	6843      	ldr	r3, [r0, #4]
   1aeb8:	b11b      	cbz	r3, 1aec2 <gatt_proxy_status+0x22>
   1aeba:	695b      	ldr	r3, [r3, #20]
   1aebc:	b10b      	cbz	r3, 1aec2 <gatt_proxy_status+0x22>
		cli->cb->gatt_proxy_status(cli, ctx->addr, status);
   1aebe:	88a1      	ldrh	r1, [r4, #4]
   1aec0:	4798      	blx	r3
}
   1aec2:	2000      	movs	r0, #0
   1aec4:	bd10      	pop	{r4, pc}
   1aec6:	bf00      	nop
   1aec8:	200028cc 	.word	0x200028cc

0001aecc <net_transmit_status>:
{
   1aecc:	b510      	push	{r4, lr}
   1aece:	460c      	mov	r4, r1
	status = state_status_u8(model, ctx, buf, OP_NET_TRANSMIT_STATUS);
   1aed0:	4620      	mov	r0, r4
{
   1aed2:	4611      	mov	r1, r2
	status = state_status_u8(model, ctx, buf, OP_NET_TRANSMIT_STATUS);
   1aed4:	f248 0225 	movw	r2, #32805	; 0x8025
   1aed8:	f7ff ff84 	bl	1ade4 <state_status_u8.constprop.0>
	if (cli->cb && cli->cb->network_transmit_status) {
   1aedc:	4b05      	ldr	r3, [pc, #20]	; (1aef4 <net_transmit_status+0x28>)
	status = state_status_u8(model, ctx, buf, OP_NET_TRANSMIT_STATUS);
   1aede:	4602      	mov	r2, r0
	if (cli->cb && cli->cb->network_transmit_status) {
   1aee0:	6818      	ldr	r0, [r3, #0]
   1aee2:	6843      	ldr	r3, [r0, #4]
   1aee4:	b11b      	cbz	r3, 1aeee <net_transmit_status+0x22>
   1aee6:	699b      	ldr	r3, [r3, #24]
   1aee8:	b10b      	cbz	r3, 1aeee <net_transmit_status+0x22>
		cli->cb->network_transmit_status(cli, ctx->addr, status);
   1aeea:	88a1      	ldrh	r1, [r4, #4]
   1aeec:	4798      	blx	r3
}
   1aeee:	2000      	movs	r0, #0
   1aef0:	bd10      	pop	{r4, pc}
   1aef2:	bf00      	nop
   1aef4:	200028cc 	.word	0x200028cc

0001aef8 <cfg_cli_init>:
{
   1aef8:	b510      	push	{r4, lr}
	if (!bt_mesh_model_in_primary(model)) {
   1aefa:	7904      	ldrb	r4, [r0, #4]
{
   1aefc:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   1aefe:	b994      	cbnz	r4, 1af26 <cfg_cli_init+0x2e>
	if (!model->user_data) {
   1af00:	69c0      	ldr	r0, [r0, #28]
   1af02:	b180      	cbz	r0, 1af26 <cfg_cli_init+0x2e>
	cli = model->user_data;
   1af04:	4a09      	ldr	r2, [pc, #36]	; (1af2c <cfg_cli_init+0x34>)
   1af06:	6010      	str	r0, [r2, #0]
	msg_timeout = CONFIG_BT_MESH_CFG_CLI_TIMEOUT;
   1af08:	4a09      	ldr	r2, [pc, #36]	; (1af30 <cfg_cli_init+0x38>)
	cli->model = model;
   1af0a:	f840 3b08 	str.w	r3, [r0], #8
	msg_timeout = CONFIG_BT_MESH_CFG_CLI_TIMEOUT;
   1af0e:	f241 3188 	movw	r1, #5000	; 0x1388
   1af12:	6011      	str	r1, [r2, #0]
	model->keys[0] = BT_MESH_KEY_DEV_ANY;
   1af14:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   1af18:	819a      	strh	r2, [r3, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1af1a:	2201      	movs	r2, #1
   1af1c:	4621      	mov	r1, r4
   1af1e:	f00a fd87 	bl	25a30 <z_impl_k_sem_init>
	return 0;
   1af22:	4620      	mov	r0, r4
}
   1af24:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1af26:	f06f 0015 	mvn.w	r0, #21
   1af2a:	e7fb      	b.n	1af24 <cfg_cli_init+0x2c>
   1af2c:	200028cc 	.word	0x200028cc
   1af30:	200028d0 	.word	0x200028d0

0001af34 <bt_mesh_cfg_comp_data_get>:
{
   1af34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af36:	b08d      	sub	sp, #52	; 0x34
   1af38:	461e      	mov	r6, r3
   1af3a:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEV_COMP_DATA_GET, 1);
   1af3c:	ab02      	add	r3, sp, #8
   1af3e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1af42:	e9cd 2307 	strd	r2, r3, [sp, #28]
   1af46:	9306      	str	r3, [sp, #24]
	struct bt_mesh_msg_ctx ctx = {
   1af48:	2300      	movs	r3, #0
{
   1af4a:	9f12      	ldr	r7, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   1af4c:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
   1af50:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   1af54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   1af58:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
   1af5c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1af60:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
   1af64:	23ff      	movs	r3, #255	; 0xff
	err = cli_prepare(&param, OP_DEV_COMP_DATA_STATUS, addr);
   1af66:	460a      	mov	r2, r1
   1af68:	a804      	add	r0, sp, #16
   1af6a:	2102      	movs	r1, #2
	struct comp_data param = {
   1af6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
   1af70:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	err = cli_prepare(&param, OP_DEV_COMP_DATA_STATUS, addr);
   1af74:	f7ff fea8 	bl	1acc8 <cli_prepare>
	if (err) {
   1af78:	4604      	mov	r4, r0
   1af7a:	b9b8      	cbnz	r0, 1afac <bt_mesh_cfg_comp_data_get+0x78>
	bt_mesh_model_msg_init(&msg, OP_DEV_COMP_DATA_GET);
   1af7c:	f248 0108 	movw	r1, #32776	; 0x8008
   1af80:	a806      	add	r0, sp, #24
   1af82:	f008 f87f 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, page);
   1af86:	4629      	mov	r1, r5
	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   1af88:	4d18      	ldr	r5, [pc, #96]	; (1afec <bt_mesh_cfg_comp_data_get+0xb8>)
	net_buf_simple_add_u8(&msg, page);
   1af8a:	a806      	add	r0, sp, #24
   1af8c:	f009 ff57 	bl	24e3e <net_buf_simple_add_u8>
	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   1af90:	6828      	ldr	r0, [r5, #0]
   1af92:	9400      	str	r4, [sp, #0]
   1af94:	4623      	mov	r3, r4
   1af96:	6800      	ldr	r0, [r0, #0]
   1af98:	aa06      	add	r2, sp, #24
   1af9a:	a909      	add	r1, sp, #36	; 0x24
   1af9c:	f008 f819 	bl	22fd2 <bt_mesh_model_send>
	if (err) {
   1afa0:	4604      	mov	r4, r0
   1afa2:	b130      	cbz	r0, 1afb2 <bt_mesh_cfg_comp_data_get+0x7e>
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1afa4:	6828      	ldr	r0, [r5, #0]
   1afa6:	3008      	adds	r0, #8
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1afa8:	f008 f895 	bl	230d6 <bt_mesh_msg_ack_ctx_clear>
}
   1afac:	4620      	mov	r0, r4
   1afae:	b00d      	add	sp, #52	; 0x34
   1afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1afb2:	682d      	ldr	r5, [r5, #0]
   1afb4:	3508      	adds	r5, #8
	if (!rsp && !comp) {
   1afb6:	b916      	cbnz	r6, 1afbe <bt_mesh_cfg_comp_data_get+0x8a>
   1afb8:	b90f      	cbnz	r7, 1afbe <bt_mesh_cfg_comp_data_get+0x8a>
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1afba:	4628      	mov	r0, r5
   1afbc:	e7f4      	b.n	1afa8 <bt_mesh_cfg_comp_data_get+0x74>
	return bt_mesh_msg_ack_ctx_wait(&cli->ack_ctx, K_MSEC(msg_timeout));
   1afbe:	4b0c      	ldr	r3, [pc, #48]	; (1aff0 <bt_mesh_cfg_comp_data_get+0xbc>)
   1afc0:	681c      	ldr	r4, [r3, #0]
   1afc2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1afc6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1afca:	f240 30e7 	movw	r0, #999	; 0x3e7
   1afce:	2100      	movs	r1, #0
   1afd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1afd4:	2300      	movs	r3, #0
   1afd6:	fbc4 0106 	smlal	r0, r1, r4, r6
   1afda:	f7e5 f891 	bl	100 <__aeabi_uldivmod>
   1afde:	4602      	mov	r2, r0
   1afe0:	460b      	mov	r3, r1
   1afe2:	4628      	mov	r0, r5
   1afe4:	f008 f887 	bl	230f6 <bt_mesh_msg_ack_ctx_wait>
   1afe8:	4604      	mov	r4, r0
   1afea:	e7df      	b.n	1afac <bt_mesh_cfg_comp_data_get+0x78>
   1afec:	200028cc 	.word	0x200028cc
   1aff0:	200028d0 	.word	0x200028d0

0001aff4 <bt_mesh_cfg_app_key_add>:
{
   1aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aff6:	b091      	sub	sp, #68	; 0x44
   1aff8:	4615      	mov	r5, r2
   1affa:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_ADD, 19);
   1affc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   1b000:	ab0a      	add	r3, sp, #40	; 0x28
   1b002:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1b006:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
   1b008:	2300      	movs	r3, #0
   1b00a:	f8cd 3022 	str.w	r3, [sp, #34]	; 0x22
   1b00e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1b012:	f64f 73fd 	movw	r3, #65533	; 0xfffd
{
   1b016:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	struct bt_mesh_msg_ctx ctx = {
   1b018:	f8ad 001c 	strh.w	r0, [sp, #28]
   1b01c:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b020:	f8ad 1020 	strh.w	r1, [sp, #32]
   1b024:	23ff      	movs	r3, #255	; 0xff
	err = cli_prepare(&param, OP_APP_KEY_STATUS, addr);
   1b026:	460a      	mov	r2, r1
   1b028:	a802      	add	r0, sp, #8
   1b02a:	f248 0103 	movw	r1, #32771	; 0x8003
	struct bt_mesh_msg_ctx ctx = {
   1b02e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	struct app_key_param param = {
   1b032:	9702      	str	r7, [sp, #8]
   1b034:	f8ad 500c 	strh.w	r5, [sp, #12]
   1b038:	f8ad 600e 	strh.w	r6, [sp, #14]
	err = cli_prepare(&param, OP_APP_KEY_STATUS, addr);
   1b03c:	f7ff fe44 	bl	1acc8 <cli_prepare>
	if (err) {
   1b040:	4604      	mov	r4, r0
   1b042:	b9e8      	cbnz	r0, 1b080 <bt_mesh_cfg_app_key_add+0x8c>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_ADD);
   1b044:	4601      	mov	r1, r0
   1b046:	a804      	add	r0, sp, #16
   1b048:	f008 f81c 	bl	23084 <bt_mesh_model_msg_init>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   1b04c:	4629      	mov	r1, r5
   1b04e:	4632      	mov	r2, r6
   1b050:	a804      	add	r0, sp, #16
   1b052:	f009 fcf9 	bl	24a48 <key_idx_pack>
	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   1b056:	4d1a      	ldr	r5, [pc, #104]	; (1b0c0 <bt_mesh_cfg_app_key_add+0xcc>)
	net_buf_simple_add_mem(&msg, app_key, 16);
   1b058:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b05a:	2210      	movs	r2, #16
   1b05c:	eb0d 0002 	add.w	r0, sp, r2
   1b060:	f009 fee4 	bl	24e2c <net_buf_simple_add_mem>
	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   1b064:	6828      	ldr	r0, [r5, #0]
   1b066:	9400      	str	r4, [sp, #0]
   1b068:	4623      	mov	r3, r4
   1b06a:	6800      	ldr	r0, [r0, #0]
   1b06c:	aa04      	add	r2, sp, #16
   1b06e:	a907      	add	r1, sp, #28
   1b070:	f007 ffaf 	bl	22fd2 <bt_mesh_model_send>
	if (err) {
   1b074:	4604      	mov	r4, r0
   1b076:	b130      	cbz	r0, 1b086 <bt_mesh_cfg_app_key_add+0x92>
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1b078:	6828      	ldr	r0, [r5, #0]
   1b07a:	3008      	adds	r0, #8
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1b07c:	f008 f82b 	bl	230d6 <bt_mesh_msg_ack_ctx_clear>
}
   1b080:	4620      	mov	r0, r4
   1b082:	b011      	add	sp, #68	; 0x44
   1b084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1b086:	682d      	ldr	r5, [r5, #0]
   1b088:	3508      	adds	r5, #8
	if (!status) {
   1b08a:	b90f      	cbnz	r7, 1b090 <bt_mesh_cfg_app_key_add+0x9c>
		bt_mesh_msg_ack_ctx_clear(&cli->ack_ctx);
   1b08c:	4628      	mov	r0, r5
   1b08e:	e7f5      	b.n	1b07c <bt_mesh_cfg_app_key_add+0x88>
	return bt_mesh_msg_ack_ctx_wait(&cli->ack_ctx, K_MSEC(msg_timeout));
   1b090:	4b0c      	ldr	r3, [pc, #48]	; (1b0c4 <bt_mesh_cfg_app_key_add+0xd0>)
   1b092:	681e      	ldr	r6, [r3, #0]
   1b094:	4621      	mov	r1, r4
   1b096:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1b09a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b09e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b0a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0a6:	2300      	movs	r3, #0
   1b0a8:	fbc6 0107 	smlal	r0, r1, r6, r7
   1b0ac:	f7e5 f828 	bl	100 <__aeabi_uldivmod>
   1b0b0:	4602      	mov	r2, r0
   1b0b2:	460b      	mov	r3, r1
   1b0b4:	4628      	mov	r0, r5
   1b0b6:	f008 f81e 	bl	230f6 <bt_mesh_msg_ack_ctx_wait>
   1b0ba:	4604      	mov	r4, r0
   1b0bc:	e7e0      	b.n	1b080 <bt_mesh_cfg_app_key_add+0x8c>
   1b0be:	bf00      	nop
   1b0c0:	200028cc 	.word	0x200028cc
   1b0c4:	200028d0 	.word	0x200028d0

0001b0c8 <health_cli_init>:

	return 0;
}

static int health_cli_init(struct bt_mesh_model *model)
{
   1b0c8:	b510      	push	{r4, lr}
	struct bt_mesh_health_cli *cli = model->user_data;
   1b0ca:	69c4      	ldr	r4, [r0, #28]

	BT_DBG("primary %u", bt_mesh_model_in_primary(model));

	if (!cli) {
   1b0cc:	b1b4      	cbz	r4, 1b0fc <health_cli_init+0x34>
		BT_ERR("No Health Client context provided");
		return -EINVAL;
	}

	cli->model = model;
	health_cli = cli;
   1b0ce:	4b0d      	ldr	r3, [pc, #52]	; (1b104 <health_cli_init+0x3c>)
	cli->model = model;
   1b0d0:	6020      	str	r0, [r4, #0]
	health_cli = cli;
   1b0d2:	601c      	str	r4, [r3, #0]
	msg_timeout = CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT;
   1b0d4:	4b0c      	ldr	r3, [pc, #48]	; (1b108 <health_cli_init+0x40>)

	cli->pub.msg = &cli->pub_buf;
   1b0d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
	msg_timeout = CONFIG_BT_MESH_HEALTH_CLI_TIMEOUT;
   1b0da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   1b0de:	601a      	str	r2, [r3, #0]
	cli->pub.msg = &cli->pub_buf;
   1b0e0:	61a0      	str	r0, [r4, #24]
	net_buf_simple_init_with_data(&cli->pub_buf, cli->pub_data, sizeof(cli->pub_data));
   1b0e2:	2209      	movs	r2, #9
   1b0e4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   1b0e8:	f009 fe36 	bl	24d58 <net_buf_simple_init_with_data>
   1b0ec:	2201      	movs	r2, #1
   1b0ee:	2100      	movs	r1, #0
   1b0f0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b0f4:	f00a fc9c 	bl	25a30 <z_impl_k_sem_init>

	bt_mesh_msg_ack_ctx_init(&cli->ack_ctx);
	return 0;
   1b0f8:	2000      	movs	r0, #0
}
   1b0fa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b0fc:	f06f 0015 	mvn.w	r0, #21
   1b100:	e7fb      	b.n	1b0fa <health_cli_init+0x32>
   1b102:	bf00      	nop
   1b104:	200028d4 	.word	0x200028d4
   1b108:	200028d8 	.word	0x200028d8

0001b10c <addr_is_free>:
 * Check if an address range from addr_start for addr_start + num_elem - 1 is
 * free for use. When a conflict is found, next will be set to the next address
 * available after the conflicting range and -EAGAIN will be returned.
 */
static int addr_is_free(uint16_t addr_start, uint8_t num_elem, uint16_t *next)
{
   1b10c:	b570      	push	{r4, r5, r6, lr}
	uint16_t addr_end = addr_start + num_elem - 1;
	uint16_t other_start, other_end;
	int i;

	if (!BT_MESH_ADDR_IS_UNICAST(addr_start) ||
   1b10e:	b203      	sxth	r3, r0
	uint16_t addr_end = addr_start + num_elem - 1;
   1b110:	1e44      	subs	r4, r0, #1
   1b112:	440c      	add	r4, r1
	if (!BT_MESH_ADDR_IS_UNICAST(addr_start) ||
   1b114:	2b00      	cmp	r3, #0
	uint16_t addr_end = addr_start + num_elem - 1;
   1b116:	b2a4      	uxth	r4, r4
	if (!BT_MESH_ADDR_IS_UNICAST(addr_start) ||
   1b118:	dd1c      	ble.n	1b154 <addr_is_free+0x48>
   1b11a:	b223      	sxth	r3, r4
   1b11c:	2b00      	cmp	r3, #0
   1b11e:	dd19      	ble.n	1b154 <addr_is_free+0x48>
	    !BT_MESH_ADDR_IS_UNICAST(addr_end) ||
   1b120:	b1c1      	cbz	r1, 1b154 <addr_is_free+0x48>
   1b122:	490e      	ldr	r1, [pc, #56]	; (1b15c <addr_is_free+0x50>)
	    num_elem == 0) {
		return -EINVAL;
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   1b124:	2500      	movs	r5, #0
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];

		if (node->addr == BT_MESH_ADDR_UNASSIGNED) {
   1b126:	8b0b      	ldrh	r3, [r1, #24]
   1b128:	b16b      	cbz	r3, 1b146 <addr_is_free+0x3a>
		}

		other_start = node->addr;
		other_end = other_start + node->num_elem - 1;

		if (!(addr_end < other_start || addr_start > other_end)) {
   1b12a:	42a3      	cmp	r3, r4
   1b12c:	d80b      	bhi.n	1b146 <addr_is_free+0x3a>
		other_end = other_start + node->num_elem - 1;
   1b12e:	7f0e      	ldrb	r6, [r1, #28]
   1b130:	4433      	add	r3, r6
   1b132:	b29b      	uxth	r3, r3
   1b134:	1e5e      	subs	r6, r3, #1
		if (!(addr_end < other_start || addr_start > other_end)) {
   1b136:	b2b6      	uxth	r6, r6
   1b138:	42b0      	cmp	r0, r6
   1b13a:	d804      	bhi.n	1b146 <addr_is_free+0x3a>
			if (next) {
   1b13c:	b102      	cbz	r2, 1b140 <addr_is_free+0x34>
				*next = other_end + 1;
   1b13e:	8013      	strh	r3, [r2, #0]
			}

			return -EAGAIN;
   1b140:	f06f 000a 	mvn.w	r0, #10
   1b144:	e005      	b.n	1b152 <addr_is_free+0x46>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   1b146:	3501      	adds	r5, #1
   1b148:	2d10      	cmp	r5, #16
   1b14a:	f101 012c 	add.w	r1, r1, #44	; 0x2c
   1b14e:	d1ea      	bne.n	1b126 <addr_is_free+0x1a>
		}
	}

	return 0;
   1b150:	2000      	movs	r0, #0
}
   1b152:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1b154:	f06f 0015 	mvn.w	r0, #21
   1b158:	e7fb      	b.n	1b152 <addr_is_free+0x46>
   1b15a:	bf00      	nop
   1b15c:	2000066c 	.word	0x2000066c

0001b160 <cdb_key_update_find>:
	schedule_cdb_store(BT_MESH_CDB_NODES_PENDING);
}

static struct key_update *cdb_key_update_find(bool app_key, uint16_t key_idx,
					      struct key_update **free_slot)
{
   1b160:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b162:	4c0f      	ldr	r4, [pc, #60]	; (1b1a0 <cdb_key_update_find+0x40>)
	struct key_update *match;
	int i;

	match = NULL;
	*free_slot = NULL;
   1b164:	2300      	movs	r3, #0
{
   1b166:	4606      	mov	r6, r0
	*free_slot = NULL;
   1b168:	6013      	str	r3, [r2, #0]
	match = NULL;
   1b16a:	4618      	mov	r0, r3
   1b16c:	4627      	mov	r7, r4

	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
		struct key_update *update = &cdb_key_updates[i];

		if (!update->valid) {
   1b16e:	eb07 0543 	add.w	r5, r7, r3, lsl #1
   1b172:	786d      	ldrb	r5, [r5, #1]
   1b174:	f015 0f10 	tst.w	r5, #16
   1b178:	d106      	bne.n	1b188 <cdb_key_update_find+0x28>
			*free_slot = update;
   1b17a:	6014      	str	r4, [r2, #0]
	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
   1b17c:	3301      	adds	r3, #1
   1b17e:	2b06      	cmp	r3, #6
   1b180:	f104 0402 	add.w	r4, r4, #2
   1b184:	d1f3      	bne.n	1b16e <cdb_key_update_find+0xe>
			match = update;
		}
	}

	return match;
}
   1b186:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (update->app_key != app_key) {
   1b188:	f3c5 1540 	ubfx	r5, r5, #5, #1
   1b18c:	42b5      	cmp	r5, r6
   1b18e:	d1f5      	bne.n	1b17c <cdb_key_update_find+0x1c>
		if (update->key_idx == key_idx) {
   1b190:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
   1b194:	f3c5 050b 	ubfx	r5, r5, #0, #12
			match = update;
   1b198:	428d      	cmp	r5, r1
   1b19a:	bf08      	it	eq
   1b19c:	4620      	moveq	r0, r4
   1b19e:	e7ed      	b.n	1b17c <cdb_key_update_find+0x1c>
   1b1a0:	20002b6e 	.word	0x20002b6e

0001b1a4 <store_cdb_subnet>:
{
   1b1a4:	b510      	push	{r4, lr}
   1b1a6:	b092      	sub	sp, #72	; 0x48
   1b1a8:	4604      	mov	r4, r0
	memcpy(&key.val[0], sub->keys[0].net_key, 16);
   1b1aa:	1cc1      	adds	r1, r0, #3
   1b1ac:	2210      	movs	r2, #16
   1b1ae:	f10d 0025 	add.w	r0, sp, #37	; 0x25
   1b1b2:	f006 fc21 	bl	219f8 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net_key, 16);
   1b1b6:	f104 0113 	add.w	r1, r4, #19
   1b1ba:	2210      	movs	r2, #16
   1b1bc:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1b1c0:	f006 fc1a 	bl	219f8 <memcpy>
	key.kr_flag = 0U; /* Deprecated */
   1b1c4:	78a3      	ldrb	r3, [r4, #2]
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", sub->net_idx);
   1b1c6:	4a08      	ldr	r2, [pc, #32]	; (1b1e8 <store_cdb_subnet+0x44>)
	key.kr_flag = 0U; /* Deprecated */
   1b1c8:	005b      	lsls	r3, r3, #1
   1b1ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", sub->net_idx);
   1b1ce:	211e      	movs	r1, #30
   1b1d0:	8823      	ldrh	r3, [r4, #0]
   1b1d2:	a801      	add	r0, sp, #4
   1b1d4:	f004 fb5e 	bl	1f894 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   1b1d8:	2221      	movs	r2, #33	; 0x21
   1b1da:	a909      	add	r1, sp, #36	; 0x24
   1b1dc:	a801      	add	r0, sp, #4
   1b1de:	f7f6 fd9d 	bl	11d1c <settings_save_one>
}
   1b1e2:	b012      	add	sp, #72	; 0x48
   1b1e4:	bd10      	pop	{r4, pc}
   1b1e6:	bf00      	nop
   1b1e8:	000277eb 	.word	0x000277eb

0001b1ec <store_cdb_app_key>:
{
   1b1ec:	b510      	push	{r4, lr}
	key.net_idx = app->net_idx;
   1b1ee:	4601      	mov	r1, r0
{
   1b1f0:	b092      	sub	sp, #72	; 0x48
	key.net_idx = app->net_idx;
   1b1f2:	f831 3b04 	ldrh.w	r3, [r1], #4
   1b1f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
{
   1b1fa:	4604      	mov	r4, r0
	key.updated = false;
   1b1fc:	2300      	movs	r3, #0
	memcpy(key.val[0], app->keys[0].app_key, 16);
   1b1fe:	2210      	movs	r2, #16
   1b200:	f10d 0027 	add.w	r0, sp, #39	; 0x27
	key.updated = false;
   1b204:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	memcpy(key.val[0], app->keys[0].app_key, 16);
   1b208:	f006 fbf6 	bl	219f8 <memcpy>
	memcpy(key.val[1], app->keys[1].app_key, 16);
   1b20c:	f104 0114 	add.w	r1, r4, #20
   1b210:	2210      	movs	r2, #16
   1b212:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1b216:	f006 fbef 	bl	219f8 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/cdb/AppKey/%x", app->app_idx);
   1b21a:	8863      	ldrh	r3, [r4, #2]
   1b21c:	4a05      	ldr	r2, [pc, #20]	; (1b234 <store_cdb_app_key+0x48>)
   1b21e:	211e      	movs	r1, #30
   1b220:	a801      	add	r0, sp, #4
   1b222:	f004 fb37 	bl	1f894 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   1b226:	2223      	movs	r2, #35	; 0x23
   1b228:	a909      	add	r1, sp, #36	; 0x24
   1b22a:	a801      	add	r0, sp, #4
   1b22c:	f7f6 fd76 	bl	11d1c <settings_save_one>
}
   1b230:	b012      	add	sp, #72	; 0x48
   1b232:	bd10      	pop	{r4, pc}
   1b234:	00027801 	.word	0x00027801

0001b238 <schedule_cdb_store>:
{
   1b238:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b23a:	2101      	movs	r1, #1
   1b23c:	4081      	lsls	r1, r0
   1b23e:	4804      	ldr	r0, [pc, #16]	; (1b250 <schedule_cdb_store+0x18>)
   1b240:	f009 fd18 	bl	24c74 <atomic_or>
}
   1b244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CDB_PENDING);
   1b248:	200a      	movs	r0, #10
   1b24a:	f7fd bbe1 	b.w	18a10 <bt_mesh_settings_store_schedule>
   1b24e:	bf00      	nop
   1b250:	20000670 	.word	0x20000670

0001b254 <update_cdb_subnet_settings>:

static void update_cdb_subnet_settings(const struct bt_mesh_cdb_subnet *sub,
				       bool store)
{
   1b254:	b570      	push	{r4, r5, r6, lr}
   1b256:	b08a      	sub	sp, #40	; 0x28
   1b258:	4604      	mov	r4, r0
   1b25a:	460d      	mov	r5, r1
	struct key_update *update, *free_slot;
	uint8_t clear = store ? 0U : 1U;
   1b25c:	f081 0601 	eor.w	r6, r1, #1

	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);

	update = cdb_key_update_find(false, sub->net_idx, &free_slot);
   1b260:	aa01      	add	r2, sp, #4
   1b262:	8801      	ldrh	r1, [r0, #0]
   1b264:	2000      	movs	r0, #0
   1b266:	f7ff ff7b 	bl	1b160 <cdb_key_update_find>
	if (update) {
   1b26a:	b138      	cbz	r0, 1b27c <update_cdb_subnet_settings+0x28>
		update->clear = clear;
   1b26c:	7843      	ldrb	r3, [r0, #1]
   1b26e:	f366 1386 	bfi	r3, r6, #6, #1
   1b272:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = sub->net_idx;
	free_slot->app_key = 0U;
	free_slot->clear = clear;

	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
   1b274:	2002      	movs	r0, #2
   1b276:	f7ff ffdf 	bl	1b238 <schedule_cdb_store>
   1b27a:	e005      	b.n	1b288 <update_cdb_subnet_settings+0x34>
	if (!free_slot) {
   1b27c:	9901      	ldr	r1, [sp, #4]
   1b27e:	b979      	cbnz	r1, 1b2a0 <update_cdb_subnet_settings+0x4c>
		if (store) {
   1b280:	b125      	cbz	r5, 1b28c <update_cdb_subnet_settings+0x38>
			store_cdb_subnet(sub);
   1b282:	4620      	mov	r0, r4
   1b284:	f7ff ff8e 	bl	1b1a4 <store_cdb_subnet>
}
   1b288:	b00a      	add	sp, #40	; 0x28
   1b28a:	bd70      	pop	{r4, r5, r6, pc}
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   1b28c:	8823      	ldrh	r3, [r4, #0]
   1b28e:	4a0d      	ldr	r2, [pc, #52]	; (1b2c4 <update_cdb_subnet_settings+0x70>)
   1b290:	211e      	movs	r1, #30
   1b292:	a802      	add	r0, sp, #8
   1b294:	f004 fafe 	bl	1f894 <snprintk>
	err = settings_delete(path);
   1b298:	a802      	add	r0, sp, #8
   1b29a:	f005 f8b0 	bl	203fe <settings_delete>
}
   1b29e:	e7f3      	b.n	1b288 <update_cdb_subnet_settings+0x34>
	free_slot->key_idx = sub->net_idx;
   1b2a0:	8823      	ldrh	r3, [r4, #0]
   1b2a2:	880a      	ldrh	r2, [r1, #0]
   1b2a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1b2a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b2ac:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
   1b2b0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   1b2b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1b2b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1b2bc:	4313      	orrs	r3, r2
   1b2be:	800b      	strh	r3, [r1, #0]
   1b2c0:	e7d8      	b.n	1b274 <update_cdb_subnet_settings+0x20>
   1b2c2:	bf00      	nop
   1b2c4:	000277eb 	.word	0x000277eb

0001b2c8 <update_cdb_app_key_settings>:

static void update_cdb_app_key_settings(const struct bt_mesh_cdb_app_key *key,
					bool store)
{
   1b2c8:	b570      	push	{r4, r5, r6, lr}
   1b2ca:	b08a      	sub	sp, #40	; 0x28
   1b2cc:	4604      	mov	r4, r0
   1b2ce:	460d      	mov	r5, r1
	struct key_update *update, *free_slot;
	uint8_t clear = store ? 0U : 1U;
   1b2d0:	f081 0601 	eor.w	r6, r1, #1

	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);

	update = cdb_key_update_find(true, key->app_idx, &free_slot);
   1b2d4:	aa01      	add	r2, sp, #4
   1b2d6:	8841      	ldrh	r1, [r0, #2]
   1b2d8:	2001      	movs	r0, #1
   1b2da:	f7ff ff41 	bl	1b160 <cdb_key_update_find>
	if (update) {
   1b2de:	b138      	cbz	r0, 1b2f0 <update_cdb_app_key_settings+0x28>
		update->clear = clear;
   1b2e0:	7843      	ldrb	r3, [r0, #1]
   1b2e2:	f366 1386 	bfi	r3, r6, #6, #1
   1b2e6:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = key->app_idx;
	free_slot->app_key = 1U;
	free_slot->clear = clear;

	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
   1b2e8:	2002      	movs	r0, #2
   1b2ea:	f7ff ffa5 	bl	1b238 <schedule_cdb_store>
   1b2ee:	e005      	b.n	1b2fc <update_cdb_app_key_settings+0x34>
	if (!free_slot) {
   1b2f0:	9901      	ldr	r1, [sp, #4]
   1b2f2:	b979      	cbnz	r1, 1b314 <update_cdb_app_key_settings+0x4c>
		if (store) {
   1b2f4:	b125      	cbz	r5, 1b300 <update_cdb_app_key_settings+0x38>
			store_cdb_app_key(key);
   1b2f6:	4620      	mov	r0, r4
   1b2f8:	f7ff ff78 	bl	1b1ec <store_cdb_app_key>
}
   1b2fc:	b00a      	add	sp, #40	; 0x28
   1b2fe:	bd70      	pop	{r4, r5, r6, pc}
	snprintk(path, sizeof(path), "bt/mesh/cdb/AppKey/%x", app_idx);
   1b300:	8863      	ldrh	r3, [r4, #2]
   1b302:	4a0d      	ldr	r2, [pc, #52]	; (1b338 <update_cdb_app_key_settings+0x70>)
   1b304:	211e      	movs	r1, #30
   1b306:	a802      	add	r0, sp, #8
   1b308:	f004 fac4 	bl	1f894 <snprintk>
	err = settings_delete(path);
   1b30c:	a802      	add	r0, sp, #8
   1b30e:	f005 f876 	bl	203fe <settings_delete>
}
   1b312:	e7f3      	b.n	1b2fc <update_cdb_app_key_settings+0x34>
	free_slot->key_idx = key->app_idx;
   1b314:	8863      	ldrh	r3, [r4, #2]
   1b316:	880a      	ldrh	r2, [r1, #0]
   1b318:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1b31c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   1b320:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
   1b324:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   1b328:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1b32c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1b330:	4313      	orrs	r3, r2
   1b332:	800b      	strh	r3, [r1, #0]
   1b334:	e7d8      	b.n	1b2e8 <update_cdb_app_key_settings+0x20>
   1b336:	bf00      	nop
   1b338:	00027801 	.word	0x00027801

0001b33c <store_cdb_node>:
{
   1b33c:	b510      	push	{r4, lr}
   1b33e:	b092      	sub	sp, #72	; 0x48
	val.net_idx = node->net_idx;
   1b340:	8a43      	ldrh	r3, [r0, #18]
   1b342:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	val.num_elem = node->num_elem;
   1b346:	7d03      	ldrb	r3, [r0, #20]
   1b348:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	val.flags = 0;
   1b34c:	2300      	movs	r3, #0
   1b34e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b352:	f3bf 8f5b 	dmb	ish
   1b356:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1b358:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(node->flags, BT_MESH_CDB_NODE_CONFIGURED)) {
   1b35c:	07db      	lsls	r3, r3, #31
		val.flags |= F_NODE_CONFIGURED;
   1b35e:	bf48      	it	mi
   1b360:	f89d 3027 	ldrbmi.w	r3, [sp, #39]	; 0x27
{
   1b364:	4604      	mov	r4, r0
		val.flags |= F_NODE_CONFIGURED;
   1b366:	bf48      	it	mi
   1b368:	f043 0301 	orrmi.w	r3, r3, #1
	memcpy(val.uuid, node->uuid, 16);
   1b36c:	4601      	mov	r1, r0
   1b36e:	f04f 0210 	mov.w	r2, #16
   1b372:	a80a      	add	r0, sp, #40	; 0x28
		val.flags |= F_NODE_CONFIGURED;
   1b374:	bf48      	it	mi
   1b376:	f88d 3027 	strbmi.w	r3, [sp, #39]	; 0x27
	memcpy(val.uuid, node->uuid, 16);
   1b37a:	f006 fb3d 	bl	219f8 <memcpy>
	memcpy(val.dev_key, node->dev_key, 16);
   1b37e:	f104 0115 	add.w	r1, r4, #21
   1b382:	2210      	movs	r2, #16
   1b384:	a80e      	add	r0, sp, #56	; 0x38
   1b386:	f006 fb37 	bl	219f8 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", node->addr);
   1b38a:	8a23      	ldrh	r3, [r4, #16]
   1b38c:	4a06      	ldr	r2, [pc, #24]	; (1b3a8 <store_cdb_node+0x6c>)
   1b38e:	211e      	movs	r1, #30
   1b390:	a801      	add	r0, sp, #4
   1b392:	f004 fa7f 	bl	1f894 <snprintk>
	err = settings_save_one(path, &val, sizeof(val));
   1b396:	2224      	movs	r2, #36	; 0x24
   1b398:	eb0d 0102 	add.w	r1, sp, r2
   1b39c:	a801      	add	r0, sp, #4
   1b39e:	f7f6 fcbd 	bl	11d1c <settings_save_one>
}
   1b3a2:	b012      	add	sp, #72	; 0x48
   1b3a4:	bd10      	pop	{r4, pc}
   1b3a6:	bf00      	nop
   1b3a8:	00027817 	.word	0x00027817

0001b3ac <update_cdb_node_settings>:
{
   1b3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	*free_slot = NULL;
   1b3ae:	2200      	movs	r2, #0
	update = cdb_node_update_find(node->addr, &free_slot);
   1b3b0:	8a03      	ldrh	r3, [r0, #16]
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); i++) {
   1b3b2:	4c18      	ldr	r4, [pc, #96]	; (1b414 <update_cdb_node_settings+0x68>)
{
   1b3b4:	b089      	sub	sp, #36	; 0x24
	match = NULL;
   1b3b6:	4615      	mov	r5, r2
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); i++) {
   1b3b8:	4616      	mov	r6, r2
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   1b3ba:	8827      	ldrh	r7, [r4, #0]
   1b3bc:	b18f      	cbz	r7, 1b3e2 <update_cdb_node_settings+0x36>
		if (update->addr == addr) {
   1b3be:	42bb      	cmp	r3, r7
   1b3c0:	bf08      	it	eq
   1b3c2:	4625      	moveq	r5, r4
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); i++) {
   1b3c4:	3601      	adds	r6, #1
   1b3c6:	2e10      	cmp	r6, #16
   1b3c8:	f104 0404 	add.w	r4, r4, #4
   1b3cc:	d1f5      	bne.n	1b3ba <update_cdb_node_settings+0xe>
	if (update) {
   1b3ce:	b155      	cbz	r5, 1b3e6 <update_cdb_node_settings+0x3a>
		update->clear = !store;
   1b3d0:	f081 0101 	eor.w	r1, r1, #1
   1b3d4:	70a9      	strb	r1, [r5, #2]
	schedule_cdb_store(BT_MESH_CDB_NODES_PENDING);
   1b3d6:	2003      	movs	r0, #3
}
   1b3d8:	b009      	add	sp, #36	; 0x24
   1b3da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	schedule_cdb_store(BT_MESH_CDB_NODES_PENDING);
   1b3de:	f7ff bf2b 	b.w	1b238 <schedule_cdb_store>
   1b3e2:	4622      	mov	r2, r4
   1b3e4:	e7ee      	b.n	1b3c4 <update_cdb_node_settings+0x18>
	if (!free_slot) {
   1b3e6:	b97a      	cbnz	r2, 1b408 <update_cdb_node_settings+0x5c>
		if (store) {
   1b3e8:	b121      	cbz	r1, 1b3f4 <update_cdb_node_settings+0x48>
}
   1b3ea:	b009      	add	sp, #36	; 0x24
   1b3ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			store_cdb_node(node);
   1b3f0:	f7ff bfa4 	b.w	1b33c <store_cdb_node>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", addr);
   1b3f4:	4a08      	ldr	r2, [pc, #32]	; (1b418 <update_cdb_node_settings+0x6c>)
   1b3f6:	211e      	movs	r1, #30
   1b3f8:	4668      	mov	r0, sp
   1b3fa:	f004 fa4b 	bl	1f894 <snprintk>
	err = settings_delete(path);
   1b3fe:	4668      	mov	r0, sp
   1b400:	f004 fffd 	bl	203fe <settings_delete>
}
   1b404:	b009      	add	sp, #36	; 0x24
   1b406:	bdf0      	pop	{r4, r5, r6, r7, pc}
	free_slot->clear = !store;
   1b408:	f081 0101 	eor.w	r1, r1, #1
	free_slot->addr = node->addr;
   1b40c:	8013      	strh	r3, [r2, #0]
	free_slot->clear = !store;
   1b40e:	7091      	strb	r1, [r2, #2]
   1b410:	e7e1      	b.n	1b3d6 <update_cdb_node_settings+0x2a>
   1b412:	bf00      	nop
   1b414:	20002b7a 	.word	0x20002b7a
   1b418:	00027817 	.word	0x00027817

0001b41c <bt_mesh_cdb_iv_update>:
		bt_mesh_settings_store_pending();
	}
}

void bt_mesh_cdb_iv_update(uint32_t iv_index, bool iv_update)
{
   1b41c:	b508      	push	{r3, lr}
	BT_DBG("Updating IV index to %d\n", iv_index);

	bt_mesh_cdb.iv_index = iv_index;
   1b41e:	4b0d      	ldr	r3, [pc, #52]	; (1b454 <bt_mesh_cdb_iv_update+0x38>)
   1b420:	f843 0b04 	str.w	r0, [r3], #4
	if (val) {
   1b424:	b141      	cbz	r1, 1b438 <bt_mesh_cdb_iv_update+0x1c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b426:	2110      	movs	r1, #16
   1b428:	4618      	mov	r0, r3
   1b42a:	f009 fc23 	bl	24c74 <atomic_or>
			  iv_update);

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		update_cdb_net_settings();
	}
}
   1b42e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	schedule_cdb_store(BT_MESH_CDB_SUBNET_PENDING);
   1b432:	2001      	movs	r0, #1
   1b434:	f7ff bf00 	b.w	1b238 <schedule_cdb_store>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b438:	f3bf 8f5b 	dmb	ish
   1b43c:	e853 2f00 	ldrex	r2, [r3]
   1b440:	f022 0210 	bic.w	r2, r2, #16
   1b444:	e843 2100 	strex	r1, r2, [r3]
   1b448:	2900      	cmp	r1, #0
   1b44a:	d1f7      	bne.n	1b43c <bt_mesh_cdb_iv_update+0x20>
   1b44c:	f3bf 8f5b 	dmb	ish
   1b450:	e7ed      	b.n	1b42e <bt_mesh_cdb_iv_update+0x12>
   1b452:	bf00      	nop
   1b454:	2000066c 	.word	0x2000066c

0001b458 <bt_mesh_cdb_subnet_get>:
struct bt_mesh_cdb_subnet *bt_mesh_cdb_subnet_get(uint16_t net_idx)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
		if (bt_mesh_cdb.subnets[i].net_idx == net_idx) {
   1b458:	4b0c      	ldr	r3, [pc, #48]	; (1b48c <bt_mesh_cdb_subnet_get+0x34>)
   1b45a:	f8b3 22c8 	ldrh.w	r2, [r3, #712]	; 0x2c8
   1b45e:	4282      	cmp	r2, r0
   1b460:	d00e      	beq.n	1b480 <bt_mesh_cdb_subnet_get+0x28>
   1b462:	f8b3 22ec 	ldrh.w	r2, [r3, #748]	; 0x2ec
   1b466:	4282      	cmp	r2, r0
   1b468:	d00c      	beq.n	1b484 <bt_mesh_cdb_subnet_get+0x2c>
   1b46a:	f8b3 2310 	ldrh.w	r2, [r3, #784]	; 0x310
   1b46e:	4282      	cmp	r2, r0
   1b470:	d10a      	bne.n	1b488 <bt_mesh_cdb_subnet_get+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   1b472:	2002      	movs	r0, #2
			return &bt_mesh_cdb.subnets[i];
   1b474:	2224      	movs	r2, #36	; 0x24
   1b476:	fb02 3000 	mla	r0, r2, r0, r3
   1b47a:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
   1b47e:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   1b480:	2000      	movs	r0, #0
   1b482:	e7f7      	b.n	1b474 <bt_mesh_cdb_subnet_get+0x1c>
   1b484:	2001      	movs	r0, #1
   1b486:	e7f5      	b.n	1b474 <bt_mesh_cdb_subnet_get+0x1c>
		}
	}

	return NULL;
   1b488:	2000      	movs	r0, #0
}
   1b48a:	4770      	bx	lr
   1b48c:	2000066c 	.word	0x2000066c

0001b490 <bt_mesh_cdb_subnet_alloc>:
{
   1b490:	b538      	push	{r3, r4, r5, lr}
   1b492:	4601      	mov	r1, r0
	if (bt_mesh_cdb_subnet_get(net_idx) != NULL) {
   1b494:	f7ff ffe0 	bl	1b458 <bt_mesh_cdb_subnet_get>
   1b498:	4602      	mov	r2, r0
   1b49a:	b9f8      	cbnz	r0, 1b4dc <bt_mesh_cdb_subnet_alloc+0x4c>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1b49c:	4b10      	ldr	r3, [pc, #64]	; (1b4e0 <bt_mesh_cdb_subnet_alloc+0x50>)
   1b49e:	f8b3 52c8 	ldrh.w	r5, [r3, #712]	; 0x2c8
   1b4a2:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1b4a6:	42a5      	cmp	r5, r4
   1b4a8:	d011      	beq.n	1b4ce <bt_mesh_cdb_subnet_alloc+0x3e>
   1b4aa:	f8b3 02ec 	ldrh.w	r0, [r3, #748]	; 0x2ec
   1b4ae:	42a0      	cmp	r0, r4
   1b4b0:	d010      	beq.n	1b4d4 <bt_mesh_cdb_subnet_alloc+0x44>
   1b4b2:	f8b3 0310 	ldrh.w	r0, [r3, #784]	; 0x310
   1b4b6:	42a0      	cmp	r0, r4
   1b4b8:	d107      	bne.n	1b4ca <bt_mesh_cdb_subnet_alloc+0x3a>
		sub = &bt_mesh_cdb.subnets[i];
   1b4ba:	f503 7244 	add.w	r2, r3, #784	; 0x310
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   1b4be:	2002      	movs	r0, #2
		sub->net_idx = net_idx;
   1b4c0:	2424      	movs	r4, #36	; 0x24
   1b4c2:	fb04 3300 	mla	r3, r4, r0, r3
   1b4c6:	f8a3 12c8 	strh.w	r1, [r3, #712]	; 0x2c8
}
   1b4ca:	4610      	mov	r0, r2
   1b4cc:	bd38      	pop	{r3, r4, r5, pc}
		sub = &bt_mesh_cdb.subnets[i];
   1b4ce:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
   1b4d2:	e7f5      	b.n	1b4c0 <bt_mesh_cdb_subnet_alloc+0x30>
   1b4d4:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   1b4d8:	2001      	movs	r0, #1
   1b4da:	e7f1      	b.n	1b4c0 <bt_mesh_cdb_subnet_alloc+0x30>
		return NULL;
   1b4dc:	2200      	movs	r2, #0
   1b4de:	e7f4      	b.n	1b4ca <bt_mesh_cdb_subnet_alloc+0x3a>
   1b4e0:	2000066c 	.word	0x2000066c

0001b4e4 <bt_mesh_cdb_create>:
{
   1b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b4e6:	4f11      	ldr	r7, [pc, #68]	; (1b52c <bt_mesh_cdb_create+0x48>)
   1b4e8:	2101      	movs	r1, #1
   1b4ea:	4606      	mov	r6, r0
   1b4ec:	1d38      	adds	r0, r7, #4
   1b4ee:	f009 fbc1 	bl	24c74 <atomic_or>
	if (atomic_test_and_set_bit(bt_mesh_cdb.flags,
   1b4f2:	ea10 0401 	ands.w	r4, r0, r1
   1b4f6:	d113      	bne.n	1b520 <bt_mesh_cdb_create+0x3c>
	sub = bt_mesh_cdb_subnet_alloc(BT_MESH_KEY_PRIMARY);
   1b4f8:	4620      	mov	r0, r4
   1b4fa:	f7ff ffc9 	bl	1b490 <bt_mesh_cdb_subnet_alloc>
	if (sub == NULL) {
   1b4fe:	4605      	mov	r5, r0
   1b500:	b188      	cbz	r0, 1b526 <bt_mesh_cdb_create+0x42>
	memcpy(sub->keys[0].net_key, key, 16);
   1b502:	4631      	mov	r1, r6
   1b504:	2210      	movs	r2, #16
   1b506:	3003      	adds	r0, #3
   1b508:	f006 fa76 	bl	219f8 <memcpy>
	schedule_cdb_store(BT_MESH_CDB_SUBNET_PENDING);
   1b50c:	2001      	movs	r0, #1
	bt_mesh_cdb.iv_index = 0;
   1b50e:	603c      	str	r4, [r7, #0]
	schedule_cdb_store(BT_MESH_CDB_SUBNET_PENDING);
   1b510:	f7ff fe92 	bl	1b238 <schedule_cdb_store>
		update_cdb_subnet_settings(sub, true);
   1b514:	2101      	movs	r1, #1
   1b516:	4628      	mov	r0, r5
   1b518:	f7ff fe9c 	bl	1b254 <update_cdb_subnet_settings>
}
   1b51c:	4620      	mov	r0, r4
   1b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EALREADY;
   1b520:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1b524:	e7fa      	b.n	1b51c <bt_mesh_cdb_create+0x38>
		return -ENOMEM;
   1b526:	f06f 040b 	mvn.w	r4, #11
   1b52a:	e7f7      	b.n	1b51c <bt_mesh_cdb_create+0x38>
   1b52c:	2000066c 	.word	0x2000066c

0001b530 <bt_mesh_cdb_subnet_flags>:

uint8_t bt_mesh_cdb_subnet_flags(const struct bt_mesh_cdb_subnet *sub)
{
	uint8_t flags = 0x00;

	if (sub && SUBNET_KEY_TX_IDX(sub)) {
   1b530:	b118      	cbz	r0, 1b53a <bt_mesh_cdb_subnet_flags+0xa>
   1b532:	7880      	ldrb	r0, [r0, #2]
	uint8_t flags = 0x00;
   1b534:	1e82      	subs	r2, r0, #2
   1b536:	4250      	negs	r0, r2
   1b538:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b53a:	4b05      	ldr	r3, [pc, #20]	; (1b550 <bt_mesh_cdb_subnet_flags+0x20>)
   1b53c:	f3bf 8f5b 	dmb	ish
   1b540:	685b      	ldr	r3, [r3, #4]
   1b542:	f3bf 8f5b 	dmb	ish
		flags |= BT_MESH_NET_FLAG_KR;
	}

	if (atomic_test_bit(bt_mesh_cdb.flags, BT_MESH_CDB_IVU_IN_PROGRESS)) {
   1b546:	06db      	lsls	r3, r3, #27
		flags |= BT_MESH_NET_FLAG_IVU;
   1b548:	bf48      	it	mi
   1b54a:	f040 0002 	orrmi.w	r0, r0, #2
	}

	return flags;
}
   1b54e:	4770      	bx	lr
   1b550:	2000066c 	.word	0x2000066c

0001b554 <bt_mesh_cdb_node_alloc>:

struct bt_mesh_cdb_node *bt_mesh_cdb_node_alloc(const uint8_t uuid[16], uint16_t addr,
						uint8_t num_elem, uint16_t net_idx)
{
   1b554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b558:	4682      	mov	sl, r0
   1b55a:	4617      	mov	r7, r2
   1b55c:	4698      	mov	r8, r3
	int i;

	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1b55e:	460d      	mov	r5, r1
   1b560:	b989      	cbnz	r1, 1b586 <bt_mesh_cdb_node_alloc+0x32>
   1b562:	2412      	movs	r4, #18
	uint16_t addr = 1, next;
   1b564:	2501      	movs	r5, #1
		err = addr_is_free(addr, num_elem, &next);
   1b566:	f10d 0206 	add.w	r2, sp, #6
   1b56a:	4639      	mov	r1, r7
   1b56c:	4628      	mov	r0, r5
   1b56e:	f7ff fdcd 	bl	1b10c <addr_is_free>
		if (err == 0) {
   1b572:	b128      	cbz	r0, 1b580 <bt_mesh_cdb_node_alloc+0x2c>
		} else if (err != -EAGAIN) {
   1b574:	300b      	adds	r0, #11
   1b576:	d104      	bne.n	1b582 <bt_mesh_cdb_node_alloc+0x2e>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes) + 2; ++i) {
   1b578:	3c01      	subs	r4, #1
		addr = next;
   1b57a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes) + 2; ++i) {
   1b57e:	d1f2      	bne.n	1b566 <bt_mesh_cdb_node_alloc+0x12>
		addr = find_lowest_free_addr(num_elem);
		if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1b580:	b945      	cbnz	r5, 1b594 <bt_mesh_cdb_node_alloc+0x40>
			return NULL;
   1b582:	2600      	movs	r6, #0
   1b584:	e02a      	b.n	1b5dc <bt_mesh_cdb_node_alloc+0x88>
		}
	} else if (addr_is_free(addr, num_elem, NULL) < 0) {
   1b586:	2200      	movs	r2, #0
   1b588:	4639      	mov	r1, r7
   1b58a:	4628      	mov	r0, r5
   1b58c:	f7ff fdbe 	bl	1b10c <addr_is_free>
   1b590:	4290      	cmp	r0, r2
   1b592:	dbf6      	blt.n	1b582 <bt_mesh_cdb_node_alloc+0x2e>
		BT_DBG("Address range 0x%04x-0x%04x is not free", addr,
		       addr + num_elem - 1);
		return NULL;
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   1b594:	4b16      	ldr	r3, [pc, #88]	; (1b5f0 <bt_mesh_cdb_node_alloc+0x9c>)
   1b596:	2400      	movs	r4, #0
   1b598:	469b      	mov	fp, r3
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];

		if (node->addr == BT_MESH_ADDR_UNASSIGNED) {
   1b59a:	f8b3 9018 	ldrh.w	r9, [r3, #24]
   1b59e:	f1b9 0f00 	cmp.w	r9, #0
   1b5a2:	d11f      	bne.n	1b5e4 <bt_mesh_cdb_node_alloc+0x90>
   1b5a4:	232c      	movs	r3, #44	; 0x2c
   1b5a6:	435c      	muls	r4, r3
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];
   1b5a8:	f104 0608 	add.w	r6, r4, #8
   1b5ac:	445e      	add	r6, fp
			memcpy(node->uuid, uuid, 16);
			node->addr = addr;
   1b5ae:	445c      	add	r4, fp
			memcpy(node->uuid, uuid, 16);
   1b5b0:	2210      	movs	r2, #16
   1b5b2:	4651      	mov	r1, sl
   1b5b4:	4630      	mov	r0, r6
   1b5b6:	f006 fa1f 	bl	219f8 <memcpy>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b5ba:	3430      	adds	r4, #48	; 0x30
			node->addr = addr;
   1b5bc:	f824 5c18 	strh.w	r5, [r4, #-24]
			node->num_elem = num_elem;
   1b5c0:	f804 7c14 	strb.w	r7, [r4, #-20]
			node->net_idx = net_idx;
   1b5c4:	f824 8c16 	strh.w	r8, [r4, #-22]
   1b5c8:	f3bf 8f5b 	dmb	ish
   1b5cc:	e854 3f00 	ldrex	r3, [r4]
   1b5d0:	e844 9200 	strex	r2, r9, [r4]
   1b5d4:	2a00      	cmp	r2, #0
   1b5d6:	d1f9      	bne.n	1b5cc <bt_mesh_cdb_node_alloc+0x78>
   1b5d8:	f3bf 8f5b 	dmb	ish
			return node;
		}
	}

	return NULL;
}
   1b5dc:	4630      	mov	r0, r6
   1b5de:	b003      	add	sp, #12
   1b5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   1b5e4:	3401      	adds	r4, #1
   1b5e6:	2c10      	cmp	r4, #16
   1b5e8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   1b5ec:	d1d5      	bne.n	1b59a <bt_mesh_cdb_node_alloc+0x46>
   1b5ee:	e7c8      	b.n	1b582 <bt_mesh_cdb_node_alloc+0x2e>
   1b5f0:	2000066c 	.word	0x2000066c

0001b5f4 <bt_mesh_cdb_node_get>:
	node->addr = BT_MESH_ADDR_UNASSIGNED;
	memset(node->dev_key, 0, sizeof(node->dev_key));
}

struct bt_mesh_cdb_node *bt_mesh_cdb_node_get(uint16_t addr)
{
   1b5f4:	b530      	push	{r4, r5, lr}
   1b5f6:	4a0b      	ldr	r2, [pc, #44]	; (1b624 <bt_mesh_cdb_node_get+0x30>)
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   1b5f8:	2100      	movs	r1, #0
   1b5fa:	4613      	mov	r3, r2
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];

		if (addr >= node->addr &&
   1b5fc:	8b15      	ldrh	r5, [r2, #24]
   1b5fe:	4285      	cmp	r5, r0
   1b600:	d803      	bhi.n	1b60a <bt_mesh_cdb_node_get+0x16>
		    addr <= node->addr + node->num_elem - 1) {
   1b602:	7f14      	ldrb	r4, [r2, #28]
   1b604:	442c      	add	r4, r5
		if (addr >= node->addr &&
   1b606:	4284      	cmp	r4, r0
   1b608:	dc06      	bgt.n	1b618 <bt_mesh_cdb_node_get+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   1b60a:	3101      	adds	r1, #1
   1b60c:	2910      	cmp	r1, #16
   1b60e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   1b612:	d1f3      	bne.n	1b5fc <bt_mesh_cdb_node_get+0x8>
			return node;
		}
	}

	return NULL;
   1b614:	2000      	movs	r0, #0
}
   1b616:	bd30      	pop	{r4, r5, pc}
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];
   1b618:	202c      	movs	r0, #44	; 0x2c
   1b61a:	fb00 3001 	mla	r0, r0, r1, r3
   1b61e:	3008      	adds	r0, #8
   1b620:	e7f9      	b.n	1b616 <bt_mesh_cdb_node_get+0x22>
   1b622:	bf00      	nop
   1b624:	2000066c 	.word	0x2000066c

0001b628 <bt_mesh_cdb_node_foreach>:
		update_cdb_node_settings(node, true);
	}
}

void bt_mesh_cdb_node_foreach(bt_mesh_cdb_node_func_t func, void *user_data)
{
   1b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b62a:	4c09      	ldr	r4, [pc, #36]	; (1b650 <bt_mesh_cdb_node_foreach+0x28>)
   1b62c:	4605      	mov	r5, r0
   1b62e:	460e      	mov	r6, r1
   1b630:	2710      	movs	r7, #16
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); ++i) {
		if (bt_mesh_cdb.nodes[i].addr == BT_MESH_ADDR_UNASSIGNED) {
   1b632:	8b23      	ldrh	r3, [r4, #24]
   1b634:	b923      	cbnz	r3, 1b640 <bt_mesh_cdb_node_foreach+0x18>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); ++i) {
   1b636:	3f01      	subs	r7, #1
   1b638:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   1b63c:	d1f9      	bne.n	1b632 <bt_mesh_cdb_node_foreach+0xa>
		if (func(&bt_mesh_cdb.nodes[i], user_data) ==
		    BT_MESH_CDB_ITER_STOP) {
			break;
		}
	}
}
   1b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (func(&bt_mesh_cdb.nodes[i], user_data) ==
   1b640:	4631      	mov	r1, r6
   1b642:	f104 0008 	add.w	r0, r4, #8
   1b646:	47a8      	blx	r5
   1b648:	2800      	cmp	r0, #0
   1b64a:	d1f4      	bne.n	1b636 <bt_mesh_cdb_node_foreach+0xe>
   1b64c:	e7f7      	b.n	1b63e <bt_mesh_cdb_node_foreach+0x16>
   1b64e:	bf00      	nop
   1b650:	2000066c 	.word	0x2000066c

0001b654 <bt_mesh_cdb_app_key_alloc>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
		key = &bt_mesh_cdb.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED) {
   1b654:	4b12      	ldr	r3, [pc, #72]	; (1b6a0 <bt_mesh_cdb_app_key_alloc+0x4c>)
{
   1b656:	b530      	push	{r4, r5, lr}
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
   1b658:	f8b3 4334 	ldrh.w	r4, [r3, #820]	; 0x334
{
   1b65c:	4602      	mov	r2, r0
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
   1b65e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1b662:	4284      	cmp	r4, r0
   1b664:	d012      	beq.n	1b68c <bt_mesh_cdb_app_key_alloc+0x38>
   1b666:	f8b3 4358 	ldrh.w	r4, [r3, #856]	; 0x358
   1b66a:	4284      	cmp	r4, r0
   1b66c:	d012      	beq.n	1b694 <bt_mesh_cdb_app_key_alloc+0x40>
   1b66e:	f8b3 437c 	ldrh.w	r4, [r3, #892]	; 0x37c
   1b672:	4284      	cmp	r4, r0
   1b674:	d112      	bne.n	1b69c <bt_mesh_cdb_app_key_alloc+0x48>
		key = &bt_mesh_cdb.app_keys[i];
   1b676:	f503 705f 	add.w	r0, r3, #892	; 0x37c
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
   1b67a:	2402      	movs	r4, #2
			continue;
		}

		key->net_idx = net_idx;
   1b67c:	2524      	movs	r5, #36	; 0x24
   1b67e:	fb05 3304 	mla	r3, r5, r4, r3
   1b682:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
		key->app_idx = app_idx;
   1b686:	f8a3 1336 	strh.w	r1, [r3, #822]	; 0x336

		return key;
	}

	return NULL;
}
   1b68a:	bd30      	pop	{r4, r5, pc}
		key = &bt_mesh_cdb.app_keys[i];
   1b68c:	f503 704d 	add.w	r0, r3, #820	; 0x334
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
   1b690:	2400      	movs	r4, #0
   1b692:	e7f3      	b.n	1b67c <bt_mesh_cdb_app_key_alloc+0x28>
		key = &bt_mesh_cdb.app_keys[i];
   1b694:	f503 7056 	add.w	r0, r3, #856	; 0x358
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
   1b698:	2401      	movs	r4, #1
   1b69a:	e7ef      	b.n	1b67c <bt_mesh_cdb_app_key_alloc+0x28>
	return NULL;
   1b69c:	2000      	movs	r0, #0
   1b69e:	e7f4      	b.n	1b68a <bt_mesh_cdb_app_key_alloc+0x36>
   1b6a0:	2000066c 	.word	0x2000066c

0001b6a4 <bt_mesh_cdb_app_key_get>:

struct bt_mesh_cdb_app_key *bt_mesh_cdb_app_key_get(uint16_t app_idx)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); i++) {
   1b6a4:	4a0d      	ldr	r2, [pc, #52]	; (1b6dc <bt_mesh_cdb_app_key_get+0x38>)
{
   1b6a6:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); i++) {
   1b6a8:	2100      	movs	r1, #0
   1b6aa:	4613      	mov	r3, r2
		struct bt_mesh_cdb_app_key *key = &bt_mesh_cdb.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
   1b6ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1b6b0:	f8b2 5334 	ldrh.w	r5, [r2, #820]	; 0x334
   1b6b4:	42a5      	cmp	r5, r4
   1b6b6:	d003      	beq.n	1b6c0 <bt_mesh_cdb_app_key_get+0x1c>
   1b6b8:	f8b2 5336 	ldrh.w	r5, [r2, #822]	; 0x336
   1b6bc:	4285      	cmp	r5, r0
   1b6be:	d006      	beq.n	1b6ce <bt_mesh_cdb_app_key_get+0x2a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); i++) {
   1b6c0:	3101      	adds	r1, #1
   1b6c2:	2903      	cmp	r1, #3
   1b6c4:	f102 0224 	add.w	r2, r2, #36	; 0x24
   1b6c8:	d1f2      	bne.n	1b6b0 <bt_mesh_cdb_app_key_get+0xc>
		    key->app_idx == app_idx) {
			return key;
		}
	}

	return NULL;
   1b6ca:	2000      	movs	r0, #0
}
   1b6cc:	bd30      	pop	{r4, r5, pc}
		struct bt_mesh_cdb_app_key *key = &bt_mesh_cdb.app_keys[i];
   1b6ce:	2024      	movs	r0, #36	; 0x24
   1b6d0:	fb00 3001 	mla	r0, r0, r1, r3
   1b6d4:	f500 704d 	add.w	r0, r0, #820	; 0x334
   1b6d8:	e7f8      	b.n	1b6cc <bt_mesh_cdb_app_key_get+0x28>
   1b6da:	bf00      	nop
   1b6dc:	2000066c 	.word	0x2000066c

0001b6e0 <cdb_set>:
{
   1b6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b6e4:	4688      	mov	r8, r1
   1b6e6:	b08b      	sub	sp, #44	; 0x2c
   1b6e8:	4616      	mov	r6, r2
   1b6ea:	461f      	mov	r7, r3
	if (!name) {
   1b6ec:	4605      	mov	r5, r0
   1b6ee:	b340      	cbz	r0, 1b742 <cdb_set+0x62>
	if (!strcmp(name, "Net")) {
   1b6f0:	497e      	ldr	r1, [pc, #504]	; (1b8ec <cdb_set+0x20c>)
   1b6f2:	f006 f953 	bl	2199c <strcmp>
   1b6f6:	4604      	mov	r4, r0
   1b6f8:	b9e0      	cbnz	r0, 1b734 <cdb_set+0x54>
	if (len_rd == 0) {
   1b6fa:	f1b8 0f00 	cmp.w	r8, #0
   1b6fe:	d015      	beq.n	1b72c <cdb_set+0x4c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
   1b700:	2305      	movs	r3, #5
   1b702:	aa01      	add	r2, sp, #4
   1b704:	4639      	mov	r1, r7
   1b706:	4630      	mov	r0, r6
   1b708:	f009 f8f2 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1b70c:	4604      	mov	r4, r0
   1b70e:	b968      	cbnz	r0, 1b72c <cdb_set+0x4c>
	bt_mesh_cdb.iv_index = net.iv_index;
   1b710:	4877      	ldr	r0, [pc, #476]	; (1b8f0 <cdb_set+0x210>)
   1b712:	9b01      	ldr	r3, [sp, #4]
   1b714:	6003      	str	r3, [r0, #0]
	if (net.iv_update) {
   1b716:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b71a:	b11b      	cbz	r3, 1b724 <cdb_set+0x44>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b71c:	2110      	movs	r1, #16
   1b71e:	3004      	adds	r0, #4
   1b720:	f009 faa8 	bl	24c74 <atomic_or>
   1b724:	4873      	ldr	r0, [pc, #460]	; (1b8f4 <cdb_set+0x214>)
   1b726:	2101      	movs	r1, #1
   1b728:	f009 faa4 	bl	24c74 <atomic_or>
}
   1b72c:	4620      	mov	r0, r4
   1b72e:	b00b      	add	sp, #44	; 0x2c
   1b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	len = settings_name_next(name, &next);
   1b734:	4669      	mov	r1, sp
   1b736:	4628      	mov	r0, r5
   1b738:	f004 fe88 	bl	2044c <settings_name_next>
	if (!next) {
   1b73c:	9b00      	ldr	r3, [sp, #0]
	len = settings_name_next(name, &next);
   1b73e:	4681      	mov	r9, r0
	if (!next) {
   1b740:	b913      	cbnz	r3, 1b748 <cdb_set+0x68>
		return -ENOENT;
   1b742:	f06f 0401 	mvn.w	r4, #1
   1b746:	e7f1      	b.n	1b72c <cdb_set+0x4c>
	if (!strncmp(name, "Node", len)) {
   1b748:	4602      	mov	r2, r0
   1b74a:	496b      	ldr	r1, [pc, #428]	; (1b8f8 <cdb_set+0x218>)
   1b74c:	4628      	mov	r0, r5
   1b74e:	f006 f931 	bl	219b4 <strncmp>
   1b752:	4604      	mov	r4, r0
   1b754:	2800      	cmp	r0, #0
   1b756:	d142      	bne.n	1b7de <cdb_set+0xfe>
		return cdb_node_set(next, len_rd, read_cb, cb_arg);
   1b758:	9800      	ldr	r0, [sp, #0]
	if (!name) {
   1b75a:	2800      	cmp	r0, #0
   1b75c:	d0f1      	beq.n	1b742 <cdb_set+0x62>
	addr = strtol(name, NULL, 16);
   1b75e:	2210      	movs	r2, #16
   1b760:	4621      	mov	r1, r4
   1b762:	f006 f88d 	bl	21880 <strtol>
   1b766:	fa1f f980 	uxth.w	r9, r0
	if (len_rd == 0) {
   1b76a:	f1b8 0f00 	cmp.w	r8, #0
   1b76e:	d108      	bne.n	1b782 <cdb_set+0xa2>
		node = bt_mesh_cdb_node_get(addr);
   1b770:	4648      	mov	r0, r9
   1b772:	f7ff ff3f 	bl	1b5f4 <bt_mesh_cdb_node_get>
		if (node) {
   1b776:	2800      	cmp	r0, #0
   1b778:	d0d8      	beq.n	1b72c <cdb_set+0x4c>
			bt_mesh_cdb_node_del(node, false);
   1b77a:	4621      	mov	r1, r4
   1b77c:	f009 fa9d 	bl	24cba <bt_mesh_cdb_node_del>
   1b780:	e7d4      	b.n	1b72c <cdb_set+0x4c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &val, sizeof(val));
   1b782:	2324      	movs	r3, #36	; 0x24
   1b784:	aa01      	add	r2, sp, #4
   1b786:	4639      	mov	r1, r7
   1b788:	4630      	mov	r0, r6
   1b78a:	f009 f8b1 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1b78e:	4604      	mov	r4, r0
   1b790:	2800      	cmp	r0, #0
   1b792:	d1cb      	bne.n	1b72c <cdb_set+0x4c>
	node = bt_mesh_cdb_node_get(addr);
   1b794:	4648      	mov	r0, r9
   1b796:	f7ff ff2d 	bl	1b5f4 <bt_mesh_cdb_node_get>
	if (!node) {
   1b79a:	4605      	mov	r5, r0
   1b79c:	b950      	cbnz	r0, 1b7b4 <cdb_set+0xd4>
		node = bt_mesh_cdb_node_alloc(val.uuid, addr, val.num_elem,
   1b79e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1b7a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1b7a6:	4649      	mov	r1, r9
   1b7a8:	a802      	add	r0, sp, #8
   1b7aa:	f7ff fed3 	bl	1b554 <bt_mesh_cdb_node_alloc>
	if (!node) {
   1b7ae:	4605      	mov	r5, r0
   1b7b0:	2800      	cmp	r0, #0
   1b7b2:	d054      	beq.n	1b85e <cdb_set+0x17e>
	if (val.flags & F_NODE_CONFIGURED) {
   1b7b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b7b8:	07db      	lsls	r3, r3, #31
   1b7ba:	d504      	bpl.n	1b7c6 <cdb_set+0xe6>
   1b7bc:	2101      	movs	r1, #1
   1b7be:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1b7c2:	f009 fa57 	bl	24c74 <atomic_or>
	memcpy(node->uuid, val.uuid, 16);
   1b7c6:	2210      	movs	r2, #16
   1b7c8:	a902      	add	r1, sp, #8
   1b7ca:	4628      	mov	r0, r5
   1b7cc:	f006 f914 	bl	219f8 <memcpy>
	memcpy(node->dev_key, val.dev_key, 16);
   1b7d0:	2210      	movs	r2, #16
   1b7d2:	a906      	add	r1, sp, #24
   1b7d4:	f105 0015 	add.w	r0, r5, #21
	memcpy(app->keys[1].app_key, key.val[1], 16);
   1b7d8:	f006 f90e 	bl	219f8 <memcpy>
	return 0;
   1b7dc:	e7a6      	b.n	1b72c <cdb_set+0x4c>
	if (!strncmp(name, "Subnet", len)) {
   1b7de:	4947      	ldr	r1, [pc, #284]	; (1b8fc <cdb_set+0x21c>)
   1b7e0:	464a      	mov	r2, r9
   1b7e2:	4628      	mov	r0, r5
   1b7e4:	f006 f8e6 	bl	219b4 <strncmp>
   1b7e8:	4604      	mov	r4, r0
   1b7ea:	2800      	cmp	r0, #0
   1b7ec:	d13a      	bne.n	1b864 <cdb_set+0x184>
		return cdb_subnet_set(next, len_rd, read_cb, cb_arg);
   1b7ee:	9800      	ldr	r0, [sp, #0]
	if (!name) {
   1b7f0:	2800      	cmp	r0, #0
   1b7f2:	d0a6      	beq.n	1b742 <cdb_set+0x62>
	net_idx = strtol(name, NULL, 16);
   1b7f4:	2210      	movs	r2, #16
   1b7f6:	4621      	mov	r1, r4
   1b7f8:	f006 f842 	bl	21880 <strtol>
   1b7fc:	fa1f f980 	uxth.w	r9, r0
	sub = bt_mesh_cdb_subnet_get(net_idx);
   1b800:	4648      	mov	r0, r9
   1b802:	f7ff fe29 	bl	1b458 <bt_mesh_cdb_subnet_get>
   1b806:	4605      	mov	r5, r0
	if (len_rd == 0) {
   1b808:	f1b8 0f00 	cmp.w	r8, #0
   1b80c:	d105      	bne.n	1b81a <cdb_set+0x13a>
		if (!sub) {
   1b80e:	2800      	cmp	r0, #0
   1b810:	d097      	beq.n	1b742 <cdb_set+0x62>
		bt_mesh_cdb_subnet_del(sub, false);
   1b812:	4621      	mov	r1, r4
   1b814:	f009 fa3d 	bl	24c92 <bt_mesh_cdb_subnet_del>
		return 0;
   1b818:	e788      	b.n	1b72c <cdb_set+0x4c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   1b81a:	2321      	movs	r3, #33	; 0x21
   1b81c:	aa01      	add	r2, sp, #4
   1b81e:	4639      	mov	r1, r7
   1b820:	4630      	mov	r0, r6
   1b822:	f009 f865 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1b826:	4604      	mov	r4, r0
   1b828:	2800      	cmp	r0, #0
   1b82a:	f47f af7f 	bne.w	1b72c <cdb_set+0x4c>
	if (sub) {
   1b82e:	b185      	cbz	r5, 1b852 <cdb_set+0x172>
	sub->kr_phase = key.kr_phase;
   1b830:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b834:	f3c3 0346 	ubfx	r3, r3, #1, #7
	memcpy(sub->keys[0].net_key, &key.val[0], 16);
   1b838:	2210      	movs	r2, #16
   1b83a:	f10d 0105 	add.w	r1, sp, #5
	sub->kr_phase = key.kr_phase;
   1b83e:	70ab      	strb	r3, [r5, #2]
	memcpy(sub->keys[0].net_key, &key.val[0], 16);
   1b840:	1ce8      	adds	r0, r5, #3
   1b842:	f006 f8d9 	bl	219f8 <memcpy>
	memcpy(sub->keys[1].net_key, &key.val[1], 16);
   1b846:	2210      	movs	r2, #16
   1b848:	f10d 0115 	add.w	r1, sp, #21
   1b84c:	f105 0013 	add.w	r0, r5, #19
   1b850:	e7c2      	b.n	1b7d8 <cdb_set+0xf8>
	sub = bt_mesh_cdb_subnet_alloc(net_idx);
   1b852:	4648      	mov	r0, r9
   1b854:	f7ff fe1c 	bl	1b490 <bt_mesh_cdb_subnet_alloc>
	if (!sub) {
   1b858:	4605      	mov	r5, r0
   1b85a:	2800      	cmp	r0, #0
   1b85c:	d1e8      	bne.n	1b830 <cdb_set+0x150>
		return -ENOMEM;
   1b85e:	f06f 040b 	mvn.w	r4, #11
		return cdb_app_key_set(next, len_rd, read_cb, cb_arg);
   1b862:	e763      	b.n	1b72c <cdb_set+0x4c>
	if (!strncmp(name, "AppKey", len)) {
   1b864:	4926      	ldr	r1, [pc, #152]	; (1b900 <cdb_set+0x220>)
   1b866:	464a      	mov	r2, r9
   1b868:	4628      	mov	r0, r5
   1b86a:	f006 f8a3 	bl	219b4 <strncmp>
   1b86e:	4604      	mov	r4, r0
   1b870:	2800      	cmp	r0, #0
   1b872:	f47f af66 	bne.w	1b742 <cdb_set+0x62>
		return cdb_app_key_set(next, len_rd, read_cb, cb_arg);
   1b876:	9800      	ldr	r0, [sp, #0]
	if (!name) {
   1b878:	2800      	cmp	r0, #0
   1b87a:	f43f af62 	beq.w	1b742 <cdb_set+0x62>
	app_idx = strtol(name, NULL, 16);
   1b87e:	2210      	movs	r2, #16
   1b880:	4621      	mov	r1, r4
   1b882:	f005 fffd 	bl	21880 <strtol>
   1b886:	fa1f f980 	uxth.w	r9, r0
	if (len_rd == 0) {
   1b88a:	f1b8 0f00 	cmp.w	r8, #0
   1b88e:	d109      	bne.n	1b8a4 <cdb_set+0x1c4>
		app = bt_mesh_cdb_app_key_get(app_idx);
   1b890:	4648      	mov	r0, r9
   1b892:	f7ff ff07 	bl	1b6a4 <bt_mesh_cdb_app_key_get>
		if (app) {
   1b896:	2800      	cmp	r0, #0
   1b898:	f43f af48 	beq.w	1b72c <cdb_set+0x4c>
			bt_mesh_cdb_app_key_del(app, false);
   1b89c:	4621      	mov	r1, r4
   1b89e:	f009 fa1e 	bl	24cde <bt_mesh_cdb_app_key_del>
   1b8a2:	e743      	b.n	1b72c <cdb_set+0x4c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   1b8a4:	2323      	movs	r3, #35	; 0x23
   1b8a6:	aa01      	add	r2, sp, #4
   1b8a8:	4639      	mov	r1, r7
   1b8aa:	4630      	mov	r0, r6
   1b8ac:	f009 f820 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   1b8b0:	4604      	mov	r4, r0
   1b8b2:	2800      	cmp	r0, #0
   1b8b4:	f47f af3a 	bne.w	1b72c <cdb_set+0x4c>
	app = bt_mesh_cdb_app_key_get(app_idx);
   1b8b8:	4648      	mov	r0, r9
   1b8ba:	f7ff fef3 	bl	1b6a4 <bt_mesh_cdb_app_key_get>
	if (!app) {
   1b8be:	4605      	mov	r5, r0
   1b8c0:	b938      	cbnz	r0, 1b8d2 <cdb_set+0x1f2>
		app = bt_mesh_cdb_app_key_alloc(key.net_idx, app_idx);
   1b8c2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1b8c6:	4649      	mov	r1, r9
   1b8c8:	f7ff fec4 	bl	1b654 <bt_mesh_cdb_app_key_alloc>
	if (!app) {
   1b8cc:	4605      	mov	r5, r0
   1b8ce:	2800      	cmp	r0, #0
   1b8d0:	d0c5      	beq.n	1b85e <cdb_set+0x17e>
	memcpy(app->keys[0].app_key, key.val[0], 16);
   1b8d2:	2210      	movs	r2, #16
   1b8d4:	f10d 0107 	add.w	r1, sp, #7
   1b8d8:	1d28      	adds	r0, r5, #4
   1b8da:	f006 f88d 	bl	219f8 <memcpy>
	memcpy(app->keys[1].app_key, key.val[1], 16);
   1b8de:	2210      	movs	r2, #16
   1b8e0:	f10d 0117 	add.w	r1, sp, #23
   1b8e4:	f105 0014 	add.w	r0, r5, #20
   1b8e8:	e776      	b.n	1b7d8 <cdb_set+0xf8>
   1b8ea:	bf00      	nop
   1b8ec:	00027843 	.word	0x00027843
   1b8f0:	2000066c 	.word	0x2000066c
   1b8f4:	20000670 	.word	0x20000670
   1b8f8:	0002782b 	.word	0x0002782b
   1b8fc:	00027830 	.word	0x00027830
   1b900:	000275fa 	.word	0x000275fa

0001b904 <bt_mesh_cdb_pending_store>:
		update->valid = 0U;
	}
}

void bt_mesh_cdb_pending_store(void)
{
   1b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b908:	4b4f      	ldr	r3, [pc, #316]	; (1ba48 <bt_mesh_cdb_pending_store+0x144>)
   1b90a:	f3bf 8f5b 	dmb	ish
   1b90e:	b088      	sub	sp, #32
   1b910:	1d1c      	adds	r4, r3, #4
   1b912:	e854 2f00 	ldrex	r2, [r4]
   1b916:	f022 0102 	bic.w	r1, r2, #2
   1b91a:	e844 1000 	strex	r0, r1, [r4]
   1b91e:	2800      	cmp	r0, #0
   1b920:	d1f7      	bne.n	1b912 <bt_mesh_cdb_pending_store+0xe>
   1b922:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_cdb.flags,
   1b926:	0797      	lsls	r7, r2, #30
   1b928:	d516      	bpl.n	1b958 <bt_mesh_cdb_pending_store+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b92a:	f3bf 8f5b 	dmb	ish
   1b92e:	685a      	ldr	r2, [r3, #4]
   1b930:	f3bf 8f5b 	dmb	ish
				      BT_MESH_CDB_SUBNET_PENDING)) {
		if (atomic_test_bit(bt_mesh_cdb.flags,
   1b934:	07d6      	lsls	r6, r2, #31
   1b936:	d551      	bpl.n	1b9dc <bt_mesh_cdb_pending_store+0xd8>
	net.iv_index = bt_mesh_cdb.iv_index;
   1b938:	681a      	ldr	r2, [r3, #0]
   1b93a:	9200      	str	r2, [sp, #0]
   1b93c:	f3bf 8f5b 	dmb	ish
   1b940:	685b      	ldr	r3, [r3, #4]
	err = settings_save_one("bt/mesh/cdb/Net", &net, sizeof(net));
   1b942:	4842      	ldr	r0, [pc, #264]	; (1ba4c <bt_mesh_cdb_pending_store+0x148>)
   1b944:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b948:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1b94c:	2205      	movs	r2, #5
   1b94e:	4669      	mov	r1, sp
   1b950:	f88d 3004 	strb.w	r3, [sp, #4]
   1b954:	f7f6 f9e2 	bl	11d1c <settings_save_one>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b958:	f3bf 8f5b 	dmb	ish
   1b95c:	e854 3f00 	ldrex	r3, [r4]
   1b960:	f023 0208 	bic.w	r2, r3, #8
   1b964:	e844 2100 	strex	r1, r2, [r4]
   1b968:	2900      	cmp	r1, #0
   1b96a:	d1f7      	bne.n	1b95c <bt_mesh_cdb_pending_store+0x58>
   1b96c:	f3bf 8f5b 	dmb	ish
		} else {
			clear_cdb_net();
		}
	}

	if (atomic_test_and_clear_bit(bt_mesh_cdb.flags,
   1b970:	071d      	lsls	r5, r3, #28
   1b972:	d437      	bmi.n	1b9e4 <bt_mesh_cdb_pending_store+0xe0>
   1b974:	f3bf 8f5b 	dmb	ish
   1b978:	e854 3f00 	ldrex	r3, [r4]
   1b97c:	f023 0204 	bic.w	r2, r3, #4
   1b980:	e844 2100 	strex	r1, r2, [r4]
   1b984:	2900      	cmp	r1, #0
   1b986:	d1f7      	bne.n	1b978 <bt_mesh_cdb_pending_store+0x74>
   1b988:	f3bf 8f5b 	dmb	ish
				      BT_MESH_CDB_NODES_PENDING)) {
		store_cdb_pending_nodes();
	}

	if (atomic_test_and_clear_bit(bt_mesh_cdb.flags,
   1b98c:	0758      	lsls	r0, r3, #29
   1b98e:	d522      	bpl.n	1b9d6 <bt_mesh_cdb_pending_store+0xd2>
		if (!update->valid) {
   1b990:	4e2f      	ldr	r6, [pc, #188]	; (1ba50 <bt_mesh_cdb_pending_store+0x14c>)
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   1b992:	4f30      	ldr	r7, [pc, #192]	; (1ba54 <bt_mesh_cdb_pending_store+0x150>)
	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
   1b994:	2400      	movs	r4, #0
		if (!update->valid) {
   1b996:	eb06 0344 	add.w	r3, r6, r4, lsl #1
   1b99a:	0065      	lsls	r5, r4, #1
   1b99c:	785a      	ldrb	r2, [r3, #1]
   1b99e:	06d1      	lsls	r1, r2, #27
   1b9a0:	d516      	bpl.n	1b9d0 <bt_mesh_cdb_pending_store+0xcc>
				clear_cdb_app_key(update->key_idx);
   1b9a2:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
			if (update->app_key) {
   1b9a6:	f002 0120 	and.w	r1, r2, #32
		if (update->clear) {
   1b9aa:	0652      	lsls	r2, r2, #25
				clear_cdb_app_key(update->key_idx);
   1b9ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
		if (update->clear) {
   1b9b0:	d53a      	bpl.n	1ba28 <bt_mesh_cdb_pending_store+0x124>
			if (update->app_key) {
   1b9b2:	2900      	cmp	r1, #0
   1b9b4:	d036      	beq.n	1ba24 <bt_mesh_cdb_pending_store+0x120>
	snprintk(path, sizeof(path), "bt/mesh/cdb/AppKey/%x", app_idx);
   1b9b6:	4a28      	ldr	r2, [pc, #160]	; (1ba58 <bt_mesh_cdb_pending_store+0x154>)
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   1b9b8:	211e      	movs	r1, #30
   1b9ba:	4668      	mov	r0, sp
   1b9bc:	f003 ff6a 	bl	1f894 <snprintk>
	err = settings_delete(path);
   1b9c0:	4668      	mov	r0, sp
   1b9c2:	f004 fd1c 	bl	203fe <settings_delete>
		update->valid = 0U;
   1b9c6:	1973      	adds	r3, r6, r5
   1b9c8:	785a      	ldrb	r2, [r3, #1]
   1b9ca:	f36f 1204 	bfc	r2, #4, #1
   1b9ce:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
   1b9d0:	3401      	adds	r4, #1
   1b9d2:	2c06      	cmp	r4, #6
   1b9d4:	d1df      	bne.n	1b996 <bt_mesh_cdb_pending_store+0x92>
				      BT_MESH_CDB_KEYS_PENDING)) {
		store_cdb_pending_keys();
	}
}
   1b9d6:	b008      	add	sp, #32
   1b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = settings_delete("bt/mesh/cdb/Net");
   1b9dc:	481b      	ldr	r0, [pc, #108]	; (1ba4c <bt_mesh_cdb_pending_store+0x148>)
   1b9de:	f004 fd0e 	bl	203fe <settings_delete>
}
   1b9e2:	e7b9      	b.n	1b958 <bt_mesh_cdb_pending_store+0x54>
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); ++i) {
   1b9e4:	2600      	movs	r6, #0
   1b9e6:	4d1d      	ldr	r5, [pc, #116]	; (1ba5c <bt_mesh_cdb_pending_store+0x158>)
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", addr);
   1b9e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1ba60 <bt_mesh_cdb_pending_store+0x15c>
		update->addr = BT_MESH_ADDR_UNASSIGNED;
   1b9ec:	4637      	mov	r7, r6
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   1b9ee:	882b      	ldrh	r3, [r5, #0]
   1b9f0:	b153      	cbz	r3, 1ba08 <bt_mesh_cdb_pending_store+0x104>
		if (update->clear) {
   1b9f2:	78aa      	ldrb	r2, [r5, #2]
   1b9f4:	b172      	cbz	r2, 1ba14 <bt_mesh_cdb_pending_store+0x110>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", addr);
   1b9f6:	4642      	mov	r2, r8
   1b9f8:	211e      	movs	r1, #30
   1b9fa:	4668      	mov	r0, sp
   1b9fc:	f003 ff4a 	bl	1f894 <snprintk>
	err = settings_delete(path);
   1ba00:	4668      	mov	r0, sp
   1ba02:	f004 fcfc 	bl	203fe <settings_delete>
		update->addr = BT_MESH_ADDR_UNASSIGNED;
   1ba06:	802f      	strh	r7, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); ++i) {
   1ba08:	3601      	adds	r6, #1
   1ba0a:	2e10      	cmp	r6, #16
   1ba0c:	f105 0504 	add.w	r5, r5, #4
   1ba10:	d1ed      	bne.n	1b9ee <bt_mesh_cdb_pending_store+0xea>
   1ba12:	e7af      	b.n	1b974 <bt_mesh_cdb_pending_store+0x70>
			node = bt_mesh_cdb_node_get(update->addr);
   1ba14:	4618      	mov	r0, r3
   1ba16:	f7ff fded 	bl	1b5f4 <bt_mesh_cdb_node_get>
			if (node) {
   1ba1a:	2800      	cmp	r0, #0
   1ba1c:	d0f3      	beq.n	1ba06 <bt_mesh_cdb_pending_store+0x102>
				store_cdb_node(node);
   1ba1e:	f7ff fc8d 	bl	1b33c <store_cdb_node>
   1ba22:	e7f0      	b.n	1ba06 <bt_mesh_cdb_pending_store+0x102>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   1ba24:	463a      	mov	r2, r7
   1ba26:	e7c7      	b.n	1b9b8 <bt_mesh_cdb_pending_store+0xb4>
				key = bt_mesh_cdb_app_key_get(update->key_idx);
   1ba28:	4618      	mov	r0, r3
			if (update->app_key) {
   1ba2a:	b131      	cbz	r1, 1ba3a <bt_mesh_cdb_pending_store+0x136>
				key = bt_mesh_cdb_app_key_get(update->key_idx);
   1ba2c:	f7ff fe3a 	bl	1b6a4 <bt_mesh_cdb_app_key_get>
				if (key) {
   1ba30:	2800      	cmp	r0, #0
   1ba32:	d0c8      	beq.n	1b9c6 <bt_mesh_cdb_pending_store+0xc2>
					store_cdb_app_key(key);
   1ba34:	f7ff fbda 	bl	1b1ec <store_cdb_app_key>
   1ba38:	e7c5      	b.n	1b9c6 <bt_mesh_cdb_pending_store+0xc2>
				sub = bt_mesh_cdb_subnet_get(update->key_idx);
   1ba3a:	f7ff fd0d 	bl	1b458 <bt_mesh_cdb_subnet_get>
				if (sub) {
   1ba3e:	2800      	cmp	r0, #0
   1ba40:	d0c1      	beq.n	1b9c6 <bt_mesh_cdb_pending_store+0xc2>
					store_cdb_subnet(sub);
   1ba42:	f7ff fbaf 	bl	1b1a4 <store_cdb_subnet>
   1ba46:	e7be      	b.n	1b9c6 <bt_mesh_cdb_pending_store+0xc2>
   1ba48:	2000066c 	.word	0x2000066c
   1ba4c:	00027837 	.word	0x00027837
   1ba50:	20002b6e 	.word	0x20002b6e
   1ba54:	000277eb 	.word	0x000277eb
   1ba58:	00027801 	.word	0x00027801
   1ba5c:	20002b7a 	.word	0x20002b7a
   1ba60:	00027817 	.word	0x00027817

0001ba64 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ba64:	4b02      	ldr	r3, [pc, #8]	; (1ba70 <net_buf_pool_get+0xc>)
   1ba66:	222c      	movs	r2, #44	; 0x2c
   1ba68:	fb02 3000 	mla	r0, r2, r0, r3
   1ba6c:	4770      	bx	lr
   1ba6e:	bf00      	nop
   1ba70:	20000bbc 	.word	0x20000bbc

0001ba74 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ba74:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ba76:	4b06      	ldr	r3, [pc, #24]	; (1ba90 <net_buf_id+0x1c>)
   1ba78:	212c      	movs	r1, #44	; 0x2c
   1ba7a:	fb01 3302 	mla	r3, r1, r2, r3
   1ba7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ba80:	7f1b      	ldrb	r3, [r3, #28]
   1ba82:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ba84:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ba86:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ba8a:	fbb0 f0f3 	udiv	r0, r0, r3
   1ba8e:	4770      	bx	lr
   1ba90:	20000bbc 	.word	0x20000bbc

0001ba94 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ba94:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ba96:	4b0a      	ldr	r3, [pc, #40]	; (1bac0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ba98:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ba9a:	242c      	movs	r4, #44	; 0x2c
   1ba9c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1baa0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1baa4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1baa6:	6823      	ldr	r3, [r4, #0]
   1baa8:	429a      	cmp	r2, r3
   1baaa:	bf94      	ite	ls
   1baac:	600a      	strls	r2, [r1, #0]
   1baae:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1bab0:	f7ff ffe0 	bl	1ba74 <net_buf_id>
   1bab4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1bab8:	fb02 3000 	mla	r0, r2, r0, r3
   1babc:	bd10      	pop	{r4, pc}
   1babe:	bf00      	nop
   1bac0:	20000bbc 	.word	0x20000bbc

0001bac4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1bac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bac8:	4605      	mov	r5, r0
   1baca:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bacc:	4610      	mov	r0, r2
   1bace:	4619      	mov	r1, r3
{
   1bad0:	4691      	mov	r9, r2
   1bad2:	4698      	mov	r8, r3
   1bad4:	4617      	mov	r7, r2
   1bad6:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bad8:	f00a f9d6 	bl	25e88 <sys_clock_timeout_end_calc>
   1badc:	4682      	mov	sl, r0
   1bade:	468b      	mov	fp, r1
	__asm__ volatile(
   1bae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bae4:	f3ef 8111 	mrs	r1, BASEPRI
   1bae8:	f383 8812 	msr	BASEPRI_MAX, r3
   1baec:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1baf0:	8b6b      	ldrh	r3, [r5, #26]
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d05a      	beq.n	1bbac <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1baf6:	8b2a      	ldrh	r2, [r5, #24]
   1baf8:	429a      	cmp	r2, r3
   1bafa:	d93e      	bls.n	1bb7a <net_buf_alloc_len+0xb6>
   1bafc:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1bafe:	2200      	movs	r2, #0
   1bb00:	2300      	movs	r3, #0
   1bb02:	4628      	mov	r0, r5
   1bb04:	f002 fe66 	bl	1e7d4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1bb08:	9900      	ldr	r1, [sp, #0]
   1bb0a:	4604      	mov	r4, r0
   1bb0c:	2800      	cmp	r0, #0
   1bb0e:	d034      	beq.n	1bb7a <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1bb10:	f381 8811 	msr	BASEPRI, r1
   1bb14:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1bb18:	9b01      	ldr	r3, [sp, #4]
   1bb1a:	2b00      	cmp	r3, #0
   1bb1c:	d056      	beq.n	1bbcc <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bb1e:	ea58 0309 	orrs.w	r3, r8, r9
   1bb22:	d00f      	beq.n	1bb44 <net_buf_alloc_len+0x80>
   1bb24:	f1b8 3fff 	cmp.w	r8, #4294967295
   1bb28:	bf08      	it	eq
   1bb2a:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1bb2e:	d009      	beq.n	1bb44 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1bb30:	f003 fd46 	bl	1f5c0 <sys_clock_tick_get>
   1bb34:	ebba 0700 	subs.w	r7, sl, r0
   1bb38:	eb6b 0601 	sbc.w	r6, fp, r1
   1bb3c:	2e00      	cmp	r6, #0
   1bb3e:	bfbc      	itt	lt
   1bb40:	2700      	movlt	r7, #0
   1bb42:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bb44:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bb46:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1bbe4 <net_buf_alloc_len+0x120>
   1bb4a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1bb4e:	fb09 8303 	mla	r3, r9, r3, r8
   1bb52:	463a      	mov	r2, r7
   1bb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bb56:	681b      	ldr	r3, [r3, #0]
   1bb58:	a901      	add	r1, sp, #4
   1bb5a:	681d      	ldr	r5, [r3, #0]
   1bb5c:	4620      	mov	r0, r4
   1bb5e:	4633      	mov	r3, r6
   1bb60:	47a8      	blx	r5
   1bb62:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1bb64:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1bb66:	2800      	cmp	r0, #0
   1bb68:	d131      	bne.n	1bbce <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1bb6a:	79a0      	ldrb	r0, [r4, #6]
   1bb6c:	4621      	mov	r1, r4
   1bb6e:	fb00 8009 	mla	r0, r0, r9, r8
   1bb72:	f009 ff17 	bl	259a4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1bb76:	462c      	mov	r4, r5
}
   1bb78:	e024      	b.n	1bbc4 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1bb7a:	8b68      	ldrh	r0, [r5, #26]
   1bb7c:	1e43      	subs	r3, r0, #1
   1bb7e:	836b      	strh	r3, [r5, #26]
   1bb80:	f381 8811 	msr	BASEPRI, r1
   1bb84:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bb88:	7f2a      	ldrb	r2, [r5, #28]
   1bb8a:	f102 0417 	add.w	r4, r2, #23
   1bb8e:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bb92:	8b2c      	ldrh	r4, [r5, #24]
   1bb94:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bb96:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1bb98:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1bb9c:	4811      	ldr	r0, [pc, #68]	; (1bbe4 <net_buf_alloc_len+0x120>)
   1bb9e:	4b12      	ldr	r3, [pc, #72]	; (1bbe8 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1bba0:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1bba2:	1a2d      	subs	r5, r5, r0
   1bba4:	10ad      	asrs	r5, r5, #2
   1bba6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1bba8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1bbaa:	e7b5      	b.n	1bb18 <net_buf_alloc_len+0x54>
   1bbac:	f381 8811 	msr	BASEPRI, r1
   1bbb0:	f3bf 8f6f 	isb	sy
   1bbb4:	464a      	mov	r2, r9
   1bbb6:	4643      	mov	r3, r8
   1bbb8:	4628      	mov	r0, r5
   1bbba:	f002 fe0b 	bl	1e7d4 <z_impl_k_queue_get>
	if (!buf) {
   1bbbe:	4604      	mov	r4, r0
   1bbc0:	2800      	cmp	r0, #0
   1bbc2:	d1a9      	bne.n	1bb18 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1bbc4:	4620      	mov	r0, r4
   1bbc6:	b003      	add	sp, #12
   1bbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1bbcc:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1bbce:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1bbd0:	2201      	movs	r2, #1
	buf->frags = NULL;
   1bbd2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1bbd4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1bbd6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1bbd8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1bbda:	6923      	ldr	r3, [r4, #16]
   1bbdc:	81e2      	strh	r2, [r4, #14]
   1bbde:	60a3      	str	r3, [r4, #8]
	return buf;
   1bbe0:	e7f0      	b.n	1bbc4 <net_buf_alloc_len+0x100>
   1bbe2:	bf00      	nop
   1bbe4:	20000bbc 	.word	0x20000bbc
   1bbe8:	ba2e8ba3 	.word	0xba2e8ba3

0001bbec <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbf0:	4d16      	ldr	r5, [pc, #88]	; (1bc4c <net_buf_unref+0x60>)
   1bbf2:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bbf4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1bbf6:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1bbf8:	b90c      	cbnz	r4, 1bbfe <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1bbfe:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1bc00:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1bc04:	3b01      	subs	r3, #1
   1bc06:	b2db      	uxtb	r3, r3
   1bc08:	7123      	strb	r3, [r4, #4]
   1bc0a:	2b00      	cmp	r3, #0
   1bc0c:	d1f5      	bne.n	1bbfa <net_buf_unref+0xe>
		if (buf->__buf) {
   1bc0e:	6921      	ldr	r1, [r4, #16]
   1bc10:	b159      	cbz	r1, 1bc2a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bc12:	7963      	ldrb	r3, [r4, #5]
   1bc14:	079b      	lsls	r3, r3, #30
   1bc16:	d407      	bmi.n	1bc28 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bc18:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1bc1a:	fb07 5303 	mla	r3, r7, r3, r5
   1bc1e:	4620      	mov	r0, r4
   1bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bc22:	681b      	ldr	r3, [r3, #0]
   1bc24:	689b      	ldr	r3, [r3, #8]
   1bc26:	4798      	blx	r3
			buf->__buf = NULL;
   1bc28:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1bc2a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1bc2c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1bc2e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1bc32:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1bc34:	6a1b      	ldr	r3, [r3, #32]
   1bc36:	b11b      	cbz	r3, 1bc40 <net_buf_unref+0x54>
			pool->destroy(buf);
   1bc38:	4620      	mov	r0, r4
   1bc3a:	4798      	blx	r3
{
   1bc3c:	4644      	mov	r4, r8
   1bc3e:	e7db      	b.n	1bbf8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1bc40:	4621      	mov	r1, r4
   1bc42:	fb00 5007 	mla	r0, r0, r7, r5
   1bc46:	f009 fead 	bl	259a4 <k_queue_prepend>
}
   1bc4a:	e7f7      	b.n	1bc3c <net_buf_unref+0x50>
   1bc4c:	20000bbc 	.word	0x20000bbc

0001bc50 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1bc50:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1bc52:	4b05      	ldr	r3, [pc, #20]	; (1bc68 <xoshiro128_initialize+0x18>)
   1bc54:	4805      	ldr	r0, [pc, #20]	; (1bc6c <xoshiro128_initialize+0x1c>)
   1bc56:	6018      	str	r0, [r3, #0]
   1bc58:	f009 fd4f 	bl	256fa <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1bc5c:	2800      	cmp	r0, #0
	}
	return 0;
}
   1bc5e:	bf0c      	ite	eq
   1bc60:	f06f 0012 	mvneq.w	r0, #18
   1bc64:	2000      	movne	r0, #0
   1bc66:	bd08      	pop	{r3, pc}
   1bc68:	200028dc 	.word	0x200028dc
   1bc6c:	00026258 	.word	0x00026258

0001bc70 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1bc70:	4b08      	ldr	r3, [pc, #32]	; (1bc94 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bc72:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1bc74:	1ac3      	subs	r3, r0, r3
{
   1bc76:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bc78:	4907      	ldr	r1, [pc, #28]	; (1bc98 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1bc7a:	109b      	asrs	r3, r3, #2
{
   1bc7c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bc7e:	4359      	muls	r1, r3
   1bc80:	4806      	ldr	r0, [pc, #24]	; (1bc9c <onoff_stop+0x2c>)
   1bc82:	2240      	movs	r2, #64	; 0x40
   1bc84:	f009 f99d 	bl	24fc2 <stop>
	notify(mgr, res);
   1bc88:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bc8a:	4601      	mov	r1, r0
	notify(mgr, res);
   1bc8c:	4620      	mov	r0, r4
}
   1bc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1bc92:	4718      	bx	r3
   1bc94:	200028f0 	.word	0x200028f0
   1bc98:	b6db6db7 	.word	0xb6db6db7
   1bc9c:	00026210 	.word	0x00026210

0001bca0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1bca2:	4c0c      	ldr	r4, [pc, #48]	; (1bcd4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bca4:	4a0c      	ldr	r2, [pc, #48]	; (1bcd8 <onoff_start+0x38>)
   1bca6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1bca8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcaa:	9300      	str	r3, [sp, #0]
{
   1bcac:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcae:	460b      	mov	r3, r1
   1bcb0:	490a      	ldr	r1, [pc, #40]	; (1bcdc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1bcb2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcb4:	4361      	muls	r1, r4
{
   1bcb6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcb8:	4809      	ldr	r0, [pc, #36]	; (1bce0 <onoff_start+0x40>)
   1bcba:	f009 f9ae 	bl	2501a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1bcbe:	1e01      	subs	r1, r0, #0
   1bcc0:	da05      	bge.n	1bcce <onoff_start+0x2e>
		notify(mgr, err);
   1bcc2:	4630      	mov	r0, r6
   1bcc4:	462b      	mov	r3, r5
	}
}
   1bcc6:	b002      	add	sp, #8
   1bcc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1bccc:	4718      	bx	r3
}
   1bcce:	b002      	add	sp, #8
   1bcd0:	bd70      	pop	{r4, r5, r6, pc}
   1bcd2:	bf00      	nop
   1bcd4:	200028f0 	.word	0x200028f0
   1bcd8:	0002508b 	.word	0x0002508b
   1bcdc:	b6db6db7 	.word	0xb6db6db7
   1bce0:	00026210 	.word	0x00026210

0001bce4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bce4:	2200      	movs	r2, #0
{
   1bce6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bce8:	2101      	movs	r1, #1
{
   1bcea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bcec:	4610      	mov	r0, r2
   1bcee:	f7f6 fc67 	bl	125c0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1bcf2:	480f      	ldr	r0, [pc, #60]	; (1bd30 <clk_init+0x4c>)
   1bcf4:	f001 fce4 	bl	1d6c0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1bcf8:	4b0e      	ldr	r3, [pc, #56]	; (1bd34 <clk_init+0x50>)
   1bcfa:	4298      	cmp	r0, r3
   1bcfc:	d115      	bne.n	1bd2a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1bcfe:	f009 fc87 	bl	25610 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1bd02:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bd04:	490c      	ldr	r1, [pc, #48]	; (1bd38 <clk_init+0x54>)
   1bd06:	4630      	mov	r0, r6
   1bd08:	f003 fe20 	bl	1f94c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1bd0c:	2800      	cmp	r0, #0
   1bd0e:	db0b      	blt.n	1bd28 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1bd10:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bd12:	4909      	ldr	r1, [pc, #36]	; (1bd38 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bd14:	2501      	movs	r5, #1
   1bd16:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bd18:	f104 001c 	add.w	r0, r4, #28
   1bd1c:	f003 fe16 	bl	1f94c <onoff_manager_init>
		if (err < 0) {
   1bd20:	2800      	cmp	r0, #0
   1bd22:	db01      	blt.n	1bd28 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bd24:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1bd26:	2000      	movs	r0, #0
}
   1bd28:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1bd2a:	f06f 0004 	mvn.w	r0, #4
   1bd2e:	e7fb      	b.n	1bd28 <clk_init+0x44>
   1bd30:	0001bd71 	.word	0x0001bd71
   1bd34:	0bad0000 	.word	0x0bad0000
   1bd38:	00026da0 	.word	0x00026da0

0001bd3c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1bd3c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1bd3e:	230c      	movs	r3, #12
   1bd40:	4809      	ldr	r0, [pc, #36]	; (1bd68 <clkstarted_handle.constprop.0+0x2c>)
   1bd42:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1bd44:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1bd46:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1bd48:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1bd4c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1bd4e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1bd50:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1bd52:	4418      	add	r0, r3
   1bd54:	f009 f922 	bl	24f9c <set_on_state>
	if (callback) {
   1bd58:	b12d      	cbz	r5, 1bd66 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1bd5a:	4632      	mov	r2, r6
   1bd5c:	462b      	mov	r3, r5
   1bd5e:	4803      	ldr	r0, [pc, #12]	; (1bd6c <clkstarted_handle.constprop.0+0x30>)
}
   1bd60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1bd64:	4718      	bx	r3
}
   1bd66:	bd70      	pop	{r4, r5, r6, pc}
   1bd68:	200028f0 	.word	0x200028f0
   1bd6c:	00026210 	.word	0x00026210

0001bd70 <clock_event_handler>:
	switch (event) {
   1bd70:	b110      	cbz	r0, 1bd78 <clock_event_handler+0x8>
   1bd72:	2801      	cmp	r0, #1
   1bd74:	d004      	beq.n	1bd80 <clock_event_handler+0x10>
   1bd76:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1bd78:	4b03      	ldr	r3, [pc, #12]	; (1bd88 <clock_event_handler+0x18>)
   1bd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bd7c:	075b      	lsls	r3, r3, #29
   1bd7e:	d101      	bne.n	1bd84 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1bd80:	f7ff bfdc 	b.w	1bd3c <clkstarted_handle.constprop.0>
}
   1bd84:	4770      	bx	lr
   1bd86:	bf00      	nop
   1bd88:	200028f0 	.word	0x200028f0

0001bd8c <generic_hfclk_start>:
{
   1bd8c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1bd8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd92:	f3ef 8111 	mrs	r1, BASEPRI
   1bd96:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1bd9e:	4a12      	ldr	r2, [pc, #72]	; (1bde8 <generic_hfclk_start+0x5c>)
   1bda0:	6813      	ldr	r3, [r2, #0]
   1bda2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1bda6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1bdaa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1bdac:	d00c      	beq.n	1bdc8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bdae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bdb2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bdb6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1bdba:	f013 0301 	ands.w	r3, r3, #1
   1bdbe:	d003      	beq.n	1bdc8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1bdc0:	480a      	ldr	r0, [pc, #40]	; (1bdec <generic_hfclk_start+0x60>)
   1bdc2:	f009 f8eb 	bl	24f9c <set_on_state>
			already_started = true;
   1bdc6:	2301      	movs	r3, #1
	__asm__ volatile(
   1bdc8:	f381 8811 	msr	BASEPRI, r1
   1bdcc:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1bdd0:	b123      	cbz	r3, 1bddc <generic_hfclk_start+0x50>
}
   1bdd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1bdd6:	2000      	movs	r0, #0
   1bdd8:	f7ff bfb0 	b.w	1bd3c <clkstarted_handle.constprop.0>
}
   1bddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bde0:	2001      	movs	r0, #1
   1bde2:	f001 bc5d 	b.w	1d6a0 <nrfx_clock_start>
   1bde6:	bf00      	nop
   1bde8:	20002940 	.word	0x20002940
   1bdec:	20002930 	.word	0x20002930

0001bdf0 <api_blocking_start>:
{
   1bdf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bdf2:	2200      	movs	r2, #0
   1bdf4:	2301      	movs	r3, #1
   1bdf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bdfa:	ab04      	add	r3, sp, #16
   1bdfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1be00:	4a09      	ldr	r2, [pc, #36]	; (1be28 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1be02:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1be06:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1be08:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1be0c:	f009 f936 	bl	2507c <api_start>
	if (err < 0) {
   1be10:	2800      	cmp	r0, #0
   1be12:	db05      	blt.n	1be20 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1be14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1be18:	2300      	movs	r3, #0
   1be1a:	4668      	mov	r0, sp
   1be1c:	f002 fd34 	bl	1e888 <z_impl_k_sem_take>
}
   1be20:	b007      	add	sp, #28
   1be22:	f85d fb04 	ldr.w	pc, [sp], #4
   1be26:	bf00      	nop
   1be28:	000250a9 	.word	0x000250a9

0001be2c <generic_hfclk_stop>:
   1be2c:	4b09      	ldr	r3, [pc, #36]	; (1be54 <generic_hfclk_stop+0x28>)
   1be2e:	f3bf 8f5b 	dmb	ish
   1be32:	e853 2f00 	ldrex	r2, [r3]
   1be36:	f022 0102 	bic.w	r1, r2, #2
   1be3a:	e843 1000 	strex	r0, r1, [r3]
   1be3e:	2800      	cmp	r0, #0
   1be40:	d1f7      	bne.n	1be32 <generic_hfclk_stop+0x6>
   1be42:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1be46:	07d3      	lsls	r3, r2, #31
   1be48:	d402      	bmi.n	1be50 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1be4a:	2001      	movs	r0, #1
   1be4c:	f009 bbdb 	b.w	25606 <nrfx_clock_stop>
}
   1be50:	4770      	bx	lr
   1be52:	bf00      	nop
   1be54:	20002940 	.word	0x20002940

0001be58 <z_nrf_clock_control_lf_on>:
{
   1be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1be5c:	4939      	ldr	r1, [pc, #228]	; (1bf44 <z_nrf_clock_control_lf_on+0xec>)
   1be5e:	f3bf 8f5b 	dmb	ish
   1be62:	4607      	mov	r7, r0
   1be64:	2201      	movs	r2, #1
   1be66:	e851 3f00 	ldrex	r3, [r1]
   1be6a:	e841 2000 	strex	r0, r2, [r1]
   1be6e:	2800      	cmp	r0, #0
   1be70:	d1f9      	bne.n	1be66 <z_nrf_clock_control_lf_on+0xe>
   1be72:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1be76:	b933      	cbnz	r3, 1be86 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1be78:	4933      	ldr	r1, [pc, #204]	; (1bf48 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   1be7a:	4834      	ldr	r0, [pc, #208]	; (1bf4c <z_nrf_clock_control_lf_on+0xf4>)
   1be7c:	604b      	str	r3, [r1, #4]
   1be7e:	60cb      	str	r3, [r1, #12]
   1be80:	608a      	str	r2, [r1, #8]
   1be82:	f003 fd76 	bl	1f972 <onoff_request>
	switch (start_mode) {
   1be86:	1e7b      	subs	r3, r7, #1
   1be88:	2b01      	cmp	r3, #1
   1be8a:	d82f      	bhi.n	1beec <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1be8c:	2f01      	cmp	r7, #1
   1be8e:	d107      	bne.n	1bea0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1be90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1be94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1be98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1be9c:	2b01      	cmp	r3, #1
   1be9e:	d025      	beq.n	1beec <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1bea0:	f009 fce3 	bl	2586a <k_is_in_isr>
   1bea4:	4604      	mov	r4, r0
   1bea6:	b918      	cbnz	r0, 1beb0 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   1bea8:	4b29      	ldr	r3, [pc, #164]	; (1bf50 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   1beaa:	781b      	ldrb	r3, [r3, #0]
   1beac:	2b00      	cmp	r3, #0
   1beae:	d141      	bne.n	1bf34 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   1beb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1beb4:	f3ef 8611 	mrs	r6, BASEPRI
   1beb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bebc:	f3bf 8f6f 	isb	sy
   1bec0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bec2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bf54 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bec6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1beca:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bece:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1bed2:	03d2      	lsls	r2, r2, #15
   1bed4:	d50c      	bpl.n	1bef0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1bed6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1beda:	2b01      	cmp	r3, #1
   1bedc:	d001      	beq.n	1bee2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1bede:	2f01      	cmp	r7, #1
   1bee0:	d106      	bne.n	1bef0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   1bee2:	b30c      	cbz	r4, 1bf28 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1bee4:	f386 8811 	msr	BASEPRI, r6
   1bee8:	f3bf 8f6f 	isb	sy
}
   1beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1bef0:	b1ac      	cbz	r4, 1bf1e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1bef2:	4630      	mov	r0, r6
   1bef4:	f7f6 fb28 	bl	12548 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1bef8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1befc:	2b00      	cmp	r3, #0
   1befe:	d1e4      	bne.n	1beca <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bf00:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1bf04:	2a00      	cmp	r2, #0
   1bf06:	d0e0      	beq.n	1beca <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf08:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1bf0c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bf10:	2301      	movs	r3, #1
   1bf12:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1bf16:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf1a:	60ab      	str	r3, [r5, #8]
}
   1bf1c:	e7d5      	b.n	1beca <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   1bf1e:	2100      	movs	r1, #0
   1bf20:	2021      	movs	r0, #33	; 0x21
   1bf22:	f003 f95b 	bl	1f1dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1bf26:	e7e7      	b.n	1bef8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   1bf28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf2c:	2202      	movs	r2, #2
   1bf2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1bf32:	e7db      	b.n	1beec <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1bf34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf38:	2202      	movs	r2, #2
   1bf3a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1bf3e:	4606      	mov	r6, r0
}
   1bf40:	e7bf      	b.n	1bec2 <z_nrf_clock_control_lf_on+0x6a>
   1bf42:	bf00      	nop
   1bf44:	20002944 	.word	0x20002944
   1bf48:	200028e0 	.word	0x200028e0
   1bf4c:	2000290c 	.word	0x2000290c
   1bf50:	20003482 	.word	0x20003482
   1bf54:	e000e100 	.word	0xe000e100

0001bf58 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1bf58:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1bf5a:	4b08      	ldr	r3, [pc, #32]	; (1bf7c <uart_console_init+0x24>)
   1bf5c:	4808      	ldr	r0, [pc, #32]	; (1bf80 <uart_console_init+0x28>)
   1bf5e:	6018      	str	r0, [r3, #0]
   1bf60:	f009 fbcb 	bl	256fa <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1bf64:	b138      	cbz	r0, 1bf76 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1bf66:	4807      	ldr	r0, [pc, #28]	; (1bf84 <uart_console_init+0x2c>)
   1bf68:	f7f6 fe92 	bl	12c90 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1bf6c:	4805      	ldr	r0, [pc, #20]	; (1bf84 <uart_console_init+0x2c>)
   1bf6e:	f7f4 ff5f 	bl	10e30 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1bf72:	2000      	movs	r0, #0
}
   1bf74:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1bf76:	f06f 0012 	mvn.w	r0, #18
   1bf7a:	e7fb      	b.n	1bf74 <uart_console_init+0x1c>
   1bf7c:	20002948 	.word	0x20002948
   1bf80:	000262a0 	.word	0x000262a0
   1bf84:	0001bf89 	.word	0x0001bf89

0001bf88 <console_out>:
	if ('\n' == c) {
   1bf88:	280a      	cmp	r0, #10
{
   1bf8a:	b538      	push	{r3, r4, r5, lr}
   1bf8c:	4d07      	ldr	r5, [pc, #28]	; (1bfac <console_out+0x24>)
   1bf8e:	4604      	mov	r4, r0
	if ('\n' == c) {
   1bf90:	d104      	bne.n	1bf9c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1bf92:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1bf94:	6883      	ldr	r3, [r0, #8]
   1bf96:	210d      	movs	r1, #13
   1bf98:	685b      	ldr	r3, [r3, #4]
   1bf9a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1bf9c:	6828      	ldr	r0, [r5, #0]
   1bf9e:	6883      	ldr	r3, [r0, #8]
   1bfa0:	b2e1      	uxtb	r1, r4
   1bfa2:	685b      	ldr	r3, [r3, #4]
   1bfa4:	4798      	blx	r3
}
   1bfa6:	4620      	mov	r0, r4
   1bfa8:	bd38      	pop	{r3, r4, r5, pc}
   1bfaa:	bf00      	nop
   1bfac:	20002948 	.word	0x20002948

0001bfb0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1bfb0:	b530      	push	{r4, r5, lr}
	return port->config;
   1bfb2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bfb4:	7b04      	ldrb	r4, [r0, #12]
   1bfb6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1bfba:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bfbe:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1bfc2:	b085      	sub	sp, #20
   1bfc4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1bfc8:	d105      	bne.n	1bfd6 <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
   1bfca:	4628      	mov	r0, r5
   1bfcc:	f001 ff8c 	bl	1dee8 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1bfd0:	2000      	movs	r0, #0
}
   1bfd2:	b005      	add	sp, #20
   1bfd4:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bfd6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bfda:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bfde:	d134      	bne.n	1c04a <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1bfe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1bfe4:	bf0c      	ite	eq
   1bfe6:	2304      	moveq	r3, #4
   1bfe8:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bfea:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1bfee:	6883      	ldr	r3, [r0, #8]
   1bff0:	fa23 f101 	lsr.w	r1, r3, r1
   1bff4:	07c9      	lsls	r1, r1, #31
   1bff6:	d41a      	bmi.n	1c02e <gpio_nrfx_pin_interrupt_configure+0x7e>
   1bff8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1bffc:	d117      	bne.n	1c02e <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1bffe:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1c000:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1c002:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1c006:	4a1c      	ldr	r2, [pc, #112]	; (1c078 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c008:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1c00c:	bf18      	it	ne
   1c00e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c016:	07db      	lsls	r3, r3, #31
   1c018:	d409      	bmi.n	1c02e <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c01a:	f10d 0407 	add.w	r4, sp, #7
   1c01e:	4621      	mov	r1, r4
   1c020:	4628      	mov	r0, r5
   1c022:	f001 fec5 	bl	1ddb0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c026:	4b15      	ldr	r3, [pc, #84]	; (1c07c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1c028:	4298      	cmp	r0, r3
   1c02a:	d019      	beq.n	1c060 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1c02c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c02e:	2300      	movs	r3, #0
   1c030:	4619      	mov	r1, r3
   1c032:	aa02      	add	r2, sp, #8
   1c034:	4628      	mov	r0, r5
   1c036:	f001 fd95 	bl	1db64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c03a:	4b11      	ldr	r3, [pc, #68]	; (1c080 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1c03c:	4298      	cmp	r0, r3
   1c03e:	d118      	bne.n	1c072 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c040:	2101      	movs	r1, #1
   1c042:	4628      	mov	r0, r5
   1c044:	f001 ff08 	bl	1de58 <nrfx_gpiote_trigger_enable>
   1c048:	e7c2      	b.n	1bfd0 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c04a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c04e:	d005      	beq.n	1c05c <gpio_nrfx_pin_interrupt_configure+0xac>
   1c050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c054:	bf0c      	ite	eq
   1c056:	2302      	moveq	r3, #2
   1c058:	2301      	movne	r3, #1
   1c05a:	e7c6      	b.n	1bfea <gpio_nrfx_pin_interrupt_configure+0x3a>
   1c05c:	2303      	movs	r3, #3
   1c05e:	e7c4      	b.n	1bfea <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c060:	4620      	mov	r0, r4
   1c062:	f001 fef3 	bl	1de4c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c066:	4b06      	ldr	r3, [pc, #24]	; (1c080 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1c068:	4298      	cmp	r0, r3
   1c06a:	d0df      	beq.n	1c02c <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
   1c06c:	f06f 000b 	mvn.w	r0, #11
   1c070:	e7af      	b.n	1bfd2 <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
   1c072:	f06f 0015 	mvn.w	r0, #21
   1c076:	e7ac      	b.n	1bfd2 <gpio_nrfx_pin_interrupt_configure+0x22>
   1c078:	50000300 	.word	0x50000300
   1c07c:	0bad0004 	.word	0x0bad0004
   1c080:	0bad0000 	.word	0x0bad0000

0001c084 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c084:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c086:	f001 fed1 	bl	1de2c <nrfx_gpiote_is_init>
   1c08a:	4604      	mov	r4, r0
   1c08c:	b968      	cbnz	r0, 1c0aa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c08e:	f001 fea5 	bl	1dddc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c092:	4b08      	ldr	r3, [pc, #32]	; (1c0b4 <gpio_nrfx_init+0x30>)
   1c094:	4298      	cmp	r0, r3
   1c096:	d10a      	bne.n	1c0ae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c098:	4807      	ldr	r0, [pc, #28]	; (1c0b8 <gpio_nrfx_init+0x34>)
   1c09a:	4621      	mov	r1, r4
   1c09c:	f001 fe82 	bl	1dda4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c0a0:	4622      	mov	r2, r4
   1c0a2:	2105      	movs	r1, #5
   1c0a4:	2006      	movs	r0, #6
   1c0a6:	f7f6 fa8b 	bl	125c0 <z_arm_irq_priority_set>
		return 0;
   1c0aa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c0ac:	bd10      	pop	{r4, pc}
		return -EIO;
   1c0ae:	f06f 0004 	mvn.w	r0, #4
   1c0b2:	e7fb      	b.n	1c0ac <gpio_nrfx_init+0x28>
   1c0b4:	0bad0000 	.word	0x0bad0000
   1c0b8:	0001c0bd 	.word	0x0001c0bd

0001c0bc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c0bc:	0942      	lsrs	r2, r0, #5
{
   1c0be:	b570      	push	{r4, r5, r6, lr}
   1c0c0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c0c2:	d002      	beq.n	1c0ca <nrfx_gpio_handler+0xe>
   1c0c4:	2a01      	cmp	r2, #1
   1c0c6:	d015      	beq.n	1c0f4 <nrfx_gpio_handler+0x38>
}
   1c0c8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c0ca:	4e0b      	ldr	r6, [pc, #44]	; (1c0f8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c0cc:	6932      	ldr	r2, [r6, #16]
   1c0ce:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c0d0:	2900      	cmp	r1, #0
   1c0d2:	d0f9      	beq.n	1c0c8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1c0d4:	f003 031f 	and.w	r3, r3, #31
   1c0d8:	2501      	movs	r5, #1
	return node->next;
   1c0da:	680c      	ldr	r4, [r1, #0]
   1c0dc:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1c0de:	688a      	ldr	r2, [r1, #8]
   1c0e0:	402a      	ands	r2, r5
   1c0e2:	d002      	beq.n	1c0ea <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c0e4:	684b      	ldr	r3, [r1, #4]
   1c0e6:	4630      	mov	r0, r6
   1c0e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c0ea:	2c00      	cmp	r4, #0
   1c0ec:	d0ec      	beq.n	1c0c8 <nrfx_gpio_handler+0xc>
   1c0ee:	4621      	mov	r1, r4
   1c0f0:	6824      	ldr	r4, [r4, #0]
   1c0f2:	e7f4      	b.n	1c0de <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c0f4:	4e01      	ldr	r6, [pc, #4]	; (1c0fc <nrfx_gpio_handler+0x40>)
   1c0f6:	e7e9      	b.n	1c0cc <nrfx_gpio_handler+0x10>
   1c0f8:	00026228 	.word	0x00026228
   1c0fc:	00026240 	.word	0x00026240

0001c100 <gpio_nrfx_pin_configure>:
{
   1c100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1c104:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c108:	f898 300c 	ldrb.w	r3, [r8, #12]
   1c10c:	f001 061f 	and.w	r6, r1, #31
{
   1c110:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c112:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1c116:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c118:	4630      	mov	r0, r6
   1c11a:	f10d 0103 	add.w	r1, sp, #3
{
   1c11e:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c120:	f001 fe46 	bl	1ddb0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c124:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c128:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c12a:	d10b      	bne.n	1c144 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c12c:	4630      	mov	r0, r6
   1c12e:	f001 ff03 	bl	1df38 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c132:	4b43      	ldr	r3, [pc, #268]	; (1c240 <gpio_nrfx_pin_configure+0x140>)
   1c134:	4599      	cmp	r9, r3
   1c136:	d103      	bne.n	1c140 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
   1c138:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c13c:	f001 fe80 	bl	1de40 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c140:	2000      	movs	r0, #0
   1c142:	e057      	b.n	1c1f4 <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c144:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c146:	4619      	mov	r1, r3
   1c148:	aa02      	add	r2, sp, #8
   1c14a:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c14c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c150:	f001 fd08 	bl	1db64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c154:	4b3a      	ldr	r3, [pc, #232]	; (1c240 <gpio_nrfx_pin_configure+0x140>)
   1c156:	4298      	cmp	r0, r3
   1c158:	d002      	beq.n	1c160 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c15a:	f06f 0015 	mvn.w	r0, #21
   1c15e:	e049      	b.n	1c1f4 <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
   1c160:	4581      	cmp	r9, r0
   1c162:	d103      	bne.n	1c16c <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
   1c164:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c168:	f001 fe6a 	bl	1de40 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1c16c:	03a5      	lsls	r5, r4, #14
   1c16e:	d554      	bpl.n	1c21a <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c170:	f240 3306 	movw	r3, #774	; 0x306
   1c174:	4023      	ands	r3, r4
   1c176:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c17a:	d03e      	beq.n	1c1fa <gpio_nrfx_pin_configure+0xfa>
   1c17c:	d80c      	bhi.n	1c198 <gpio_nrfx_pin_configure+0x98>
   1c17e:	2b06      	cmp	r3, #6
   1c180:	d015      	beq.n	1c1ae <gpio_nrfx_pin_configure+0xae>
   1c182:	d804      	bhi.n	1c18e <gpio_nrfx_pin_configure+0x8e>
   1c184:	b19b      	cbz	r3, 1c1ae <gpio_nrfx_pin_configure+0xae>
   1c186:	2b02      	cmp	r3, #2
   1c188:	d1e7      	bne.n	1c15a <gpio_nrfx_pin_configure+0x5a>
   1c18a:	2304      	movs	r3, #4
   1c18c:	e00f      	b.n	1c1ae <gpio_nrfx_pin_configure+0xae>
   1c18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c192:	d1e2      	bne.n	1c15a <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
   1c194:	2301      	movs	r3, #1
   1c196:	e00a      	b.n	1c1ae <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c198:	f240 2202 	movw	r2, #514	; 0x202
   1c19c:	4293      	cmp	r3, r2
   1c19e:	d02e      	beq.n	1c1fe <gpio_nrfx_pin_configure+0xfe>
   1c1a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c1a4:	d02d      	beq.n	1c202 <gpio_nrfx_pin_configure+0x102>
   1c1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c1aa:	d1d6      	bne.n	1c15a <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
   1c1ac:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1c1ae:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c1b2:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c1b6:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c1ba:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c1bc:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1c1c0:	bf54      	ite	pl
   1c1c2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c1c6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c1c8:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c1ca:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c1ce:	d51a      	bpl.n	1c206 <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c1d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c1d4:	2101      	movs	r1, #1
   1c1d6:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
   1c1da:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c1de:	2200      	movs	r2, #0
   1c1e0:	a901      	add	r1, sp, #4
   1c1e2:	4630      	mov	r0, r6
   1c1e4:	f001 fd6c 	bl	1dcc0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c1e8:	4b15      	ldr	r3, [pc, #84]	; (1c240 <gpio_nrfx_pin_configure+0x140>)
   1c1ea:	4298      	cmp	r0, r3
   1c1ec:	bf14      	ite	ne
   1c1ee:	f06f 0015 	mvnne.w	r0, #21
   1c1f2:	2000      	moveq	r0, #0
}
   1c1f4:	b005      	add	sp, #20
   1c1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1c1fa:	2307      	movs	r3, #7
   1c1fc:	e7d7      	b.n	1c1ae <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
   1c1fe:	2305      	movs	r3, #5
   1c200:	e7d5      	b.n	1c1ae <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
   1c202:	2303      	movs	r3, #3
   1c204:	e7d3      	b.n	1c1ae <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c206:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c208:	bf41      	itttt	mi
   1c20a:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
   1c20e:	2101      	movmi	r1, #1
   1c210:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
   1c214:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
   1c218:	e7e1      	b.n	1c1de <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
   1c21a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c21c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1c220:	bf54      	ite	pl
   1c222:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1c226:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c228:	461a      	mov	r2, r3
   1c22a:	a901      	add	r1, sp, #4
   1c22c:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1c22e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c232:	f001 fc97 	bl	1db64 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c236:	4b02      	ldr	r3, [pc, #8]	; (1c240 <gpio_nrfx_pin_configure+0x140>)
   1c238:	4298      	cmp	r0, r3
   1c23a:	d081      	beq.n	1c140 <gpio_nrfx_pin_configure+0x40>
   1c23c:	e78d      	b.n	1c15a <gpio_nrfx_pin_configure+0x5a>
   1c23e:	bf00      	nop
   1c240:	0bad0000 	.word	0x0bad0000

0001c244 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1c244:	4b02      	ldr	r3, [pc, #8]	; (1c250 <flash_nrf_pages_layout+0xc>)
   1c246:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c248:	2301      	movs	r3, #1
   1c24a:	6013      	str	r3, [r2, #0]
}
   1c24c:	4770      	bx	lr
   1c24e:	bf00      	nop
   1c250:	20002964 	.word	0x20002964

0001c254 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1c254:	4800      	ldr	r0, [pc, #0]	; (1c258 <flash_nrf_get_parameters+0x4>)
   1c256:	4770      	bx	lr
   1c258:	00026e04 	.word	0x00026e04

0001c25c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1c25c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c25e:	2201      	movs	r2, #1
   1c260:	4611      	mov	r1, r2
   1c262:	4807      	ldr	r0, [pc, #28]	; (1c280 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c264:	4c07      	ldr	r4, [pc, #28]	; (1c284 <nrf_flash_init+0x28>)
   1c266:	f009 fbe3 	bl	25a30 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1c26a:	f001 fa71 	bl	1d750 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c26e:	f009 fa38 	bl	256e2 <nrfx_nvmc_flash_page_count_get>
   1c272:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1c274:	f009 fa31 	bl	256da <nrfx_nvmc_flash_page_size_get>
   1c278:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1c27a:	2000      	movs	r0, #0
   1c27c:	bd10      	pop	{r4, pc}
   1c27e:	bf00      	nop
   1c280:	2000296c 	.word	0x2000296c
   1c284:	20002964 	.word	0x20002964

0001c288 <flash_nrf_erase>:
{
   1c288:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c28a:	b087      	sub	sp, #28
   1c28c:	460e      	mov	r6, r1
   1c28e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c290:	f009 fa23 	bl	256da <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1c294:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c296:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1c298:	4630      	mov	r0, r6
   1c29a:	f008 ff82 	bl	251a2 <is_regular_addr_valid>
   1c29e:	b3c8      	cbz	r0, 1c314 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1c2a0:	fbb6 f3f7 	udiv	r3, r6, r7
   1c2a4:	fb07 6313 	mls	r3, r7, r3, r6
   1c2a8:	bba3      	cbnz	r3, 1c314 <flash_nrf_erase+0x8c>
   1c2aa:	fbb5 f4f7 	udiv	r4, r5, r7
   1c2ae:	fb07 5414 	mls	r4, r7, r4, r5
   1c2b2:	bb7c      	cbnz	r4, 1c314 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   1c2b4:	42bd      	cmp	r5, r7
   1c2b6:	d322      	bcc.n	1c2fe <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   1c2b8:	f04f 32ff 	mov.w	r2, #4294967295
   1c2bc:	f04f 33ff 	mov.w	r3, #4294967295
   1c2c0:	4816      	ldr	r0, [pc, #88]	; (1c31c <flash_nrf_erase+0x94>)
   1c2c2:	f002 fae1 	bl	1e888 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c2c6:	f009 f9a6 	bl	25616 <nrf_flash_sync_is_required>
   1c2ca:	ab02      	add	r3, sp, #8
   1c2cc:	4601      	mov	r1, r0

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1c2ce:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   1c2d0:	b1c0      	cbz	r0, 1c304 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   1c2d2:	4621      	mov	r1, r4
   1c2d4:	4618      	mov	r0, r3
   1c2d6:	f005 fb9a 	bl	21a0e <memset>
   1c2da:	2201      	movs	r2, #1
   1c2dc:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   1c2e0:	4a0f      	ldr	r2, [pc, #60]	; (1c320 <flash_nrf_erase+0x98>)
   1c2e2:	e9cd 2000 	strd	r2, r0, [sp]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c2e6:	480f      	ldr	r0, [pc, #60]	; (1c324 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   1c2e8:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c2ec:	f001 fa38 	bl	1d760 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c2f0:	4668      	mov	r0, sp
   1c2f2:	f001 fa3b 	bl	1d76c <nrf_flash_sync_exe>
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1c2f6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c2f8:	4808      	ldr	r0, [pc, #32]	; (1c31c <flash_nrf_erase+0x94>)
   1c2fa:	f002 fa9f 	bl	1e83c <z_impl_k_sem_give>
}
   1c2fe:	4620      	mov	r0, r4
   1c300:	b007      	add	sp, #28
   1c302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1c304:	4618      	mov	r0, r3
   1c306:	f005 fb82 	bl	21a0e <memset>
   1c30a:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1c30e:	f008 ff24 	bl	2515a <erase_op>
   1c312:	e7f0      	b.n	1c2f6 <flash_nrf_erase+0x6e>
		return -EINVAL;
   1c314:	f06f 0415 	mvn.w	r4, #21
   1c318:	e7f1      	b.n	1c2fe <flash_nrf_erase+0x76>
   1c31a:	bf00      	nop
   1c31c:	2000296c 	.word	0x2000296c
   1c320:	0002515b 	.word	0x0002515b
   1c324:	00015e64 	.word	0x00015e64

0001c328 <write_op>:
{
   1c328:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1c32a:	7b03      	ldrb	r3, [r0, #12]
{
   1c32c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1c32e:	b10b      	cbz	r3, 1c334 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1c330:	f009 f973 	bl	2561a <nrf_flash_sync_get_timestamp_begin>
{
   1c334:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1c336:	68a3      	ldr	r3, [r4, #8]
   1c338:	2b03      	cmp	r3, #3
   1c33a:	d806      	bhi.n	1c34a <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c33c:	4a12      	ldr	r2, [pc, #72]	; (1c388 <write_op+0x60>)
   1c33e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c342:	07db      	lsls	r3, r3, #31
   1c344:	d5fb      	bpl.n	1c33e <write_op+0x16>
	return FLASH_OP_DONE;
   1c346:	2000      	movs	r0, #0
}
   1c348:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1c34a:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1c34c:	6860      	ldr	r0, [r4, #4]
   1c34e:	6819      	ldr	r1, [r3, #0]
   1c350:	f001 ff18 	bl	1e184 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1c354:	6863      	ldr	r3, [r4, #4]
   1c356:	3304      	adds	r3, #4
   1c358:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1c35a:	6823      	ldr	r3, [r4, #0]
   1c35c:	3304      	adds	r3, #4
   1c35e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1c360:	68a3      	ldr	r3, [r4, #8]
   1c362:	3b04      	subs	r3, #4
   1c364:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1c366:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1c368:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1c36a:	2b00      	cmp	r3, #0
   1c36c:	d0e3      	beq.n	1c336 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1c36e:	4628      	mov	r0, r5
   1c370:	f001 fa6a 	bl	1d848 <nrf_flash_sync_check_time_limit>
   1c374:	2800      	cmp	r0, #0
   1c376:	d0de      	beq.n	1c336 <write_op+0xe>
   1c378:	4a03      	ldr	r2, [pc, #12]	; (1c388 <write_op+0x60>)
   1c37a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c37e:	07d9      	lsls	r1, r3, #31
   1c380:	d5fb      	bpl.n	1c37a <write_op+0x52>
				return FLASH_OP_ONGOING;
   1c382:	2001      	movs	r0, #1
   1c384:	e7e0      	b.n	1c348 <write_op+0x20>
   1c386:	bf00      	nop
   1c388:	4001e000 	.word	0x4001e000

0001c38c <flash_nrf_write>:
{
   1c38c:	b570      	push	{r4, r5, r6, lr}
   1c38e:	460d      	mov	r5, r1
   1c390:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1c392:	4619      	mov	r1, r3
   1c394:	4628      	mov	r0, r5
{
   1c396:	4616      	mov	r6, r2
   1c398:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c39a:	f008 ff02 	bl	251a2 <is_regular_addr_valid>
   1c39e:	b360      	cbz	r0, 1c3fa <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1c3a0:	ea45 0304 	orr.w	r3, r5, r4
   1c3a4:	079b      	lsls	r3, r3, #30
   1c3a6:	d128      	bne.n	1c3fa <flash_nrf_write+0x6e>
	if (!len) {
   1c3a8:	b1fc      	cbz	r4, 1c3ea <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   1c3aa:	f04f 33ff 	mov.w	r3, #4294967295
   1c3ae:	f04f 32ff 	mov.w	r2, #4294967295
   1c3b2:	4813      	ldr	r0, [pc, #76]	; (1c400 <flash_nrf_write+0x74>)
   1c3b4:	f002 fa68 	bl	1e888 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c3b8:	f009 f92d 	bl	25616 <nrf_flash_sync_is_required>
   1c3bc:	4603      	mov	r3, r0
	struct flash_context context = {
   1c3be:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1c3c2:	a802      	add	r0, sp, #8
   1c3c4:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1c3c6:	b19b      	cbz	r3, 1c3f0 <flash_nrf_write+0x64>
	struct flash_context context = {
   1c3c8:	2301      	movs	r3, #1
   1c3ca:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c3ce:	4b0d      	ldr	r3, [pc, #52]	; (1c404 <flash_nrf_write+0x78>)
   1c3d0:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1c3d4:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1c3d8:	f001 f9c2 	bl	1d760 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c3dc:	4668      	mov	r0, sp
   1c3de:	f001 f9c5 	bl	1d76c <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1c3e2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c3e4:	4806      	ldr	r0, [pc, #24]	; (1c400 <flash_nrf_write+0x74>)
   1c3e6:	f002 fa29 	bl	1e83c <z_impl_k_sem_give>
}
   1c3ea:	4620      	mov	r0, r4
   1c3ec:	b006      	add	sp, #24
   1c3ee:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   1c3f0:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1c3f4:	f7ff ff98 	bl	1c328 <write_op>
   1c3f8:	e7f3      	b.n	1c3e2 <flash_nrf_write+0x56>
		return -EINVAL;
   1c3fa:	f06f 0415 	mvn.w	r4, #21
   1c3fe:	e7f4      	b.n	1c3ea <flash_nrf_write+0x5e>
   1c400:	2000296c 	.word	0x2000296c
   1c404:	0001c329 	.word	0x0001c329

0001c408 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1c408:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1c40a:	794b      	ldrb	r3, [r1, #5]
   1c40c:	2b01      	cmp	r3, #1
   1c40e:	d028      	beq.n	1c462 <uarte_nrfx_configure+0x5a>
   1c410:	2b03      	cmp	r3, #3
   1c412:	d123      	bne.n	1c45c <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c414:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c416:	798b      	ldrb	r3, [r1, #6]
   1c418:	2b03      	cmp	r3, #3
   1c41a:	d11f      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1c41c:	79cd      	ldrb	r5, [r1, #7]
   1c41e:	b10d      	cbz	r5, 1c424 <uarte_nrfx_configure+0x1c>
   1c420:	2d01      	cmp	r5, #1
   1c422:	d11b      	bne.n	1c45c <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1c424:	790a      	ldrb	r2, [r1, #4]
   1c426:	2a01      	cmp	r2, #1
   1c428:	d01d      	beq.n	1c466 <uarte_nrfx_configure+0x5e>
   1c42a:	2a02      	cmp	r2, #2
   1c42c:	d01f      	beq.n	1c46e <uarte_nrfx_configure+0x66>
   1c42e:	b9aa      	cbnz	r2, 1c45c <uarte_nrfx_configure+0x54>
   1c430:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c432:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c434:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1c436:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c43a:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   1c43c:	d06e      	beq.n	1c51c <uarte_nrfx_configure+0x114>
   1c43e:	d833      	bhi.n	1c4a8 <uarte_nrfx_configure+0xa0>
   1c440:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c444:	d06d      	beq.n	1c522 <uarte_nrfx_configure+0x11a>
   1c446:	d81c      	bhi.n	1c482 <uarte_nrfx_configure+0x7a>
   1c448:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c44c:	d06b      	beq.n	1c526 <uarte_nrfx_configure+0x11e>
   1c44e:	d810      	bhi.n	1c472 <uarte_nrfx_configure+0x6a>
   1c450:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c454:	d06a      	beq.n	1c52c <uarte_nrfx_configure+0x124>
   1c456:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c45a:	d06a      	beq.n	1c532 <uarte_nrfx_configure+0x12a>
   1c45c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c460:	e05b      	b.n	1c51a <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
   1c462:	2700      	movs	r7, #0
   1c464:	e7d7      	b.n	1c416 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1c466:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c46a:	220e      	movs	r2, #14
   1c46c:	e7e1      	b.n	1c432 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1c46e:	2400      	movs	r4, #0
   1c470:	e7fb      	b.n	1c46a <uarte_nrfx_configure+0x62>
	switch (baudrate) {
   1c472:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c476:	d05f      	beq.n	1c538 <uarte_nrfx_configure+0x130>
   1c478:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c47c:	d1ee      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c47e:	4b39      	ldr	r3, [pc, #228]	; (1c564 <uarte_nrfx_configure+0x15c>)
   1c480:	e03e      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c482:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c486:	d05a      	beq.n	1c53e <uarte_nrfx_configure+0x136>
   1c488:	d807      	bhi.n	1c49a <uarte_nrfx_configure+0x92>
   1c48a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c48e:	d058      	beq.n	1c542 <uarte_nrfx_configure+0x13a>
   1c490:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c494:	d1e2      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c496:	4b34      	ldr	r3, [pc, #208]	; (1c568 <uarte_nrfx_configure+0x160>)
   1c498:	e032      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c49a:	f647 2c12 	movw	ip, #31250	; 0x7a12
   1c49e:	4563      	cmp	r3, ip
   1c4a0:	d1dc      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c4a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c4a6:	e02b      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c4a8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c4ac:	d04b      	beq.n	1c546 <uarte_nrfx_configure+0x13e>
   1c4ae:	d813      	bhi.n	1c4d8 <uarte_nrfx_configure+0xd0>
   1c4b0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c4b4:	d04a      	beq.n	1c54c <uarte_nrfx_configure+0x144>
   1c4b6:	d809      	bhi.n	1c4cc <uarte_nrfx_configure+0xc4>
   1c4b8:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   1c4bc:	4563      	cmp	r3, ip
   1c4be:	d047      	beq.n	1c550 <uarte_nrfx_configure+0x148>
   1c4c0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c4c4:	d1ca      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c4c6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c4ca:	e019      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c4cc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c4d0:	d1c4      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c4d2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c4d6:	e013      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c4d8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c4dc:	d03b      	beq.n	1c556 <uarte_nrfx_configure+0x14e>
   1c4de:	d809      	bhi.n	1c4f4 <uarte_nrfx_configure+0xec>
   1c4e0:	f8df c088 	ldr.w	ip, [pc, #136]	; 1c56c <uarte_nrfx_configure+0x164>
   1c4e4:	4563      	cmp	r3, ip
   1c4e6:	d039      	beq.n	1c55c <uarte_nrfx_configure+0x154>
   1c4e8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c4ec:	d1b6      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c4ee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c4f2:	e005      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c4f4:	f8df c078 	ldr.w	ip, [pc, #120]	; 1c570 <uarte_nrfx_configure+0x168>
   1c4f8:	4563      	cmp	r3, ip
   1c4fa:	d1af      	bne.n	1c45c <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c4fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1c500:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c502:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1c506:	1d03      	adds	r3, r0, #4
   1c508:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1c50a:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1c50c:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   1c50e:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c510:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   1c514:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1c518:	2000      	movs	r0, #0
}
   1c51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c51c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c520:	e7ee      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c522:	4b14      	ldr	r3, [pc, #80]	; (1c574 <uarte_nrfx_configure+0x16c>)
   1c524:	e7ec      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c526:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c52a:	e7e9      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
   1c52c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c530:	e7e6      	b.n	1c500 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   1c532:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c536:	e7e3      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c538:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c53c:	e7e0      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c53e:	4b0e      	ldr	r3, [pc, #56]	; (1c578 <uarte_nrfx_configure+0x170>)
   1c540:	e7de      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c542:	4b0e      	ldr	r3, [pc, #56]	; (1c57c <uarte_nrfx_configure+0x174>)
   1c544:	e7dc      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c546:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c54a:	e7d9      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c54c:	4b0c      	ldr	r3, [pc, #48]	; (1c580 <uarte_nrfx_configure+0x178>)
   1c54e:	e7d7      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c550:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c554:	e7d4      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c556:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c55a:	e7d1      	b.n	1c500 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c55c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c560:	e7ce      	b.n	1c500 <uarte_nrfx_configure+0xf8>
   1c562:	bf00      	nop
   1c564:	0013b000 	.word	0x0013b000
   1c568:	004ea000 	.word	0x004ea000
   1c56c:	0003d090 	.word	0x0003d090
   1c570:	000f4240 	.word	0x000f4240
   1c574:	00275000 	.word	0x00275000
   1c578:	0075c000 	.word	0x0075c000
   1c57c:	003af000 	.word	0x003af000
   1c580:	013a9000 	.word	0x013a9000

0001c584 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1c584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1c588:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1c58c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1c58e:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c592:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c596:	2100      	movs	r1, #0
   1c598:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   1c59c:	4607      	mov	r7, r0
	data->dev = dev;
   1c59e:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c5a0:	aa01      	add	r2, sp, #4
   1c5a2:	4648      	mov	r0, r9
   1c5a4:	f008 ff28 	bl	253f8 <pinctrl_lookup_state>
	if (ret < 0) {
   1c5a8:	1e05      	subs	r5, r0, #0
   1c5aa:	db55      	blt.n	1c658 <uarte_instance_init.constprop.0+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c5ac:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c5ae:	f8d9 2000 	ldr.w	r2, [r9]
   1c5b2:	7919      	ldrb	r1, [r3, #4]
   1c5b4:	6818      	ldr	r0, [r3, #0]
   1c5b6:	f008 ff3c 	bl	25432 <pinctrl_configure_pins>
	if (err < 0) {
   1c5ba:	1e05      	subs	r5, r0, #0
   1c5bc:	db4c      	blt.n	1c658 <uarte_instance_init.constprop.0+0xd4>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1c5be:	1d31      	adds	r1, r6, #4
   1c5c0:	4638      	mov	r0, r7
   1c5c2:	f7ff ff21 	bl	1c408 <uarte_nrfx_configure>
	if (err) {
   1c5c6:	4605      	mov	r5, r0
   1c5c8:	2800      	cmp	r0, #0
   1c5ca:	d145      	bne.n	1c658 <uarte_instance_init.constprop.0+0xd4>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1c5cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1c5d0:	0799      	lsls	r1, r3, #30
   1c5d2:	d519      	bpl.n	1c608 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1c5d4:	f106 0018 	add.w	r0, r6, #24
   1c5d8:	f001 fde2 	bl	1e1a0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1c5dc:	4b22      	ldr	r3, [pc, #136]	; (1c668 <uarte_instance_init.constprop.0+0xe4>)
   1c5de:	4298      	cmp	r0, r3
   1c5e0:	d13e      	bne.n	1c660 <uarte_instance_init.constprop.0+0xdc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1c5e2:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1c5e4:	00c3      	lsls	r3, r0, #3
   1c5e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c5ea:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1c5ee:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1c5f2:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c5f6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c5fa:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1c5fe:	4a1b      	ldr	r2, [pc, #108]	; (1c66c <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1c600:	2301      	movs	r3, #1
   1c602:	4083      	lsls	r3, r0
   1c604:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c608:	2308      	movs	r3, #8
   1c60a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1c60e:	f898 3008 	ldrb.w	r3, [r8, #8]
   1c612:	b953      	cbnz	r3, 1c62a <uarte_instance_init.constprop.0+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c614:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1c618:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c61c:	6973      	ldr	r3, [r6, #20]
   1c61e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c622:	2301      	movs	r3, #1
   1c624:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c628:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1c62a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c62e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1c630:	bf5c      	itt	pl
   1c632:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1c636:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c63a:	06db      	lsls	r3, r3, #27
   1c63c:	bf44      	itt	mi
   1c63e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1c642:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c646:	6933      	ldr	r3, [r6, #16]
   1c648:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c64c:	2300      	movs	r3, #0
   1c64e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c652:	2301      	movs	r3, #1
   1c654:	60a3      	str	r3, [r4, #8]
   1c656:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1c658:	4628      	mov	r0, r5
   1c65a:	b003      	add	sp, #12
   1c65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1c660:	f06f 0504 	mvn.w	r5, #4
   1c664:	e7f8      	b.n	1c658 <uarte_instance_init.constprop.0+0xd4>
   1c666:	bf00      	nop
   1c668:	0bad0000 	.word	0x0bad0000
   1c66c:	4001f000 	.word	0x4001f000

0001c670 <uarte_nrfx_poll_out>:
{
   1c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1c672:	6907      	ldr	r7, [r0, #16]
{
   1c674:	4604      	mov	r4, r0
   1c676:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c678:	f009 f8f7 	bl	2586a <k_is_in_isr>
   1c67c:	b910      	cbnz	r0, 1c684 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1c67e:	4b2d      	ldr	r3, [pc, #180]	; (1c734 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
   1c680:	781b      	ldrb	r3, [r3, #0]
   1c682:	b98b      	cbnz	r3, 1c6a8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1c684:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c688:	f3ef 8611 	mrs	r6, BASEPRI
   1c68c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c690:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1c694:	6860      	ldr	r0, [r4, #4]
   1c696:	4631      	mov	r1, r6
   1c698:	f008 fe35 	bl	25306 <is_tx_ready.isra.0>
   1c69c:	bb30      	cbnz	r0, 1c6ec <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1c69e:	f386 8811 	msr	BASEPRI, r6
   1c6a2:	f3bf 8f6f 	isb	sy
}
   1c6a6:	e7ed      	b.n	1c684 <uarte_nrfx_poll_out+0x14>
{
   1c6a8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1c6aa:	6860      	ldr	r0, [r4, #4]
   1c6ac:	f008 fe2b 	bl	25306 <is_tx_ready.isra.0>
   1c6b0:	b970      	cbnz	r0, 1c6d0 <uarte_nrfx_poll_out+0x60>
   1c6b2:	2001      	movs	r0, #1
   1c6b4:	f008 ffb3 	bl	2561e <nrfx_busy_wait>
   1c6b8:	3e01      	subs	r6, #1
   1c6ba:	d1f6      	bne.n	1c6aa <uarte_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1c6bc:	2100      	movs	r1, #0
   1c6be:	2021      	movs	r0, #33	; 0x21
   1c6c0:	f002 fd8c 	bl	1f1dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c6c4:	e7f0      	b.n	1c6a8 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1c6c6:	f386 8811 	msr	BASEPRI, r6
   1c6ca:	f3bf 8f6f 	isb	sy
}
   1c6ce:	e7f5      	b.n	1c6bc <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
   1c6d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6d4:	f3ef 8611 	mrs	r6, BASEPRI
   1c6d8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1c6e0:	6860      	ldr	r0, [r4, #4]
   1c6e2:	4631      	mov	r1, r6
   1c6e4:	f008 fe0f 	bl	25306 <is_tx_ready.isra.0>
   1c6e8:	2800      	cmp	r0, #0
   1c6ea:	d0ec      	beq.n	1c6c6 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
   1c6ec:	693b      	ldr	r3, [r7, #16]
   1c6ee:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1c6f0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c6f2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1c6f4:	6813      	ldr	r3, [r2, #0]
   1c6f6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c6fa:	2001      	movs	r0, #1
   1c6fc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c700:	2000      	movs	r0, #0
   1c702:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1c706:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
   1c70a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c70e:	6852      	ldr	r2, [r2, #4]
   1c710:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1c714:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c716:	bf41      	itttt	mi
   1c718:	2208      	movmi	r2, #8
   1c71a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1c71e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1c722:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c726:	2201      	movs	r2, #1
   1c728:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1c72a:	f381 8811 	msr	BASEPRI, r1
   1c72e:	f3bf 8f6f 	isb	sy
}
   1c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c734:	20003482 	.word	0x20003482

0001c738 <random_byte_get>:
	__asm__ volatile(
   1c738:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c73c:	f3ef 8211 	mrs	r2, BASEPRI
   1c740:	f383 8812 	msr	BASEPRI_MAX, r3
   1c744:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c748:	4b09      	ldr	r3, [pc, #36]	; (1c770 <random_byte_get+0x38>)
   1c74a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c74e:	b161      	cbz	r1, 1c76a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c750:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c752:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c756:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1c75a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c75e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c760:	f382 8811 	msr	BASEPRI, r2
   1c764:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c768:	4770      	bx	lr
	int retval = -EAGAIN;
   1c76a:	f06f 000a 	mvn.w	r0, #10
   1c76e:	e7f7      	b.n	1c760 <random_byte_get+0x28>
   1c770:	4000d000 	.word	0x4000d000

0001c774 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c774:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c776:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c778:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c77a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c77c:	f04f 0040 	mov.w	r0, #64	; 0x40
   1c780:	f3ef 8e11 	mrs	lr, BASEPRI
   1c784:	f380 8812 	msr	BASEPRI_MAX, r0
   1c788:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c78c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c78e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1c792:	1ba4      	subs	r4, r4, r6
   1c794:	403c      	ands	r4, r7
	if (available < len) {
   1c796:	42a2      	cmp	r2, r4
		len = available;
   1c798:	bf88      	it	hi
   1c79a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c79c:	18b0      	adds	r0, r6, r2
   1c79e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1c7a0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1c7a2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1c7a4:	f38e 8811 	msr	BASEPRI, lr
   1c7a8:	f3bf 8f6f 	isb	sy
   1c7ac:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1c7ae:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1c7b0:	4290      	cmp	r0, r2
   1c7b2:	d119      	bne.n	1c7e8 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c7b4:	4566      	cmp	r6, ip
   1c7b6:	d10d      	bne.n	1c7d4 <rng_pool_get+0x60>
	__asm__ volatile(
   1c7b8:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c7bc:	f3ef 8011 	mrs	r0, BASEPRI
   1c7c0:	f385 8812 	msr	BASEPRI_MAX, r5
   1c7c4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c7c8:	781d      	ldrb	r5, [r3, #0]
   1c7ca:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1c7cc:	f380 8811 	msr	BASEPRI, r0
   1c7d0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1c7d4:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1c7d6:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1c7d8:	b290      	uxth	r0, r2
	available = available - len;
   1c7da:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1c7dc:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c7de:	bf22      	ittt	cs
   1c7e0:	4b06      	ldrcs	r3, [pc, #24]	; (1c7fc <rng_pool_get+0x88>)
   1c7e2:	2201      	movcs	r2, #1
   1c7e4:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c7e8:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1c7ec:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c7ee:	f89e e005 	ldrb.w	lr, [lr, #5]
   1c7f2:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1c7f6:	403d      	ands	r5, r7
   1c7f8:	e7da      	b.n	1c7b0 <rng_pool_get+0x3c>
   1c7fa:	bf00      	nop
   1c7fc:	4000d000 	.word	0x4000d000

0001c800 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c800:	43db      	mvns	r3, r3
{
   1c802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c806:	f013 0501 	ands.w	r5, r3, #1
{
   1c80a:	460e      	mov	r6, r1
   1c80c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c80e:	d004      	beq.n	1c81a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c810:	4821      	ldr	r0, [pc, #132]	; (1c898 <entropy_nrf5_get_entropy_isr+0x98>)
   1c812:	f7ff ffaf 	bl	1c774 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c81a:	b3a2      	cbz	r2, 1c886 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1c81c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c820:	f3ef 8811 	mrs	r8, BASEPRI
   1c824:	f383 8812 	msr	BASEPRI_MAX, r3
   1c828:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c82c:	200d      	movs	r0, #13
   1c82e:	f7f5 feb9 	bl	125a4 <arch_irq_is_enabled>
   1c832:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c834:	200d      	movs	r0, #13
   1c836:	f7f5 fea1 	bl	1257c <arch_irq_disable>
	__asm__ volatile(
   1c83a:	f388 8811 	msr	BASEPRI, r8
   1c83e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c842:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1c89c <entropy_nrf5_get_entropy_isr+0x9c>
   1c846:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1c8a0 <entropy_nrf5_get_entropy_isr+0xa0>
   1c84a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1c84e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1c852:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c856:	2301      	movs	r3, #1
   1c858:	f8c8 3000 	str.w	r3, [r8]
   1c85c:	4625      	mov	r5, r4
   1c85e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c862:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1c866:	b183      	cbz	r3, 1c88a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1c868:	f7ff ff66 	bl	1c738 <random_byte_get>
			if (byte < 0) {
   1c86c:	1e03      	subs	r3, r0, #0
   1c86e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1c872:	dbf6      	blt.n	1c862 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1c874:	3d01      	subs	r5, #1
   1c876:	b2ad      	uxth	r5, r5
   1c878:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c87a:	2d00      	cmp	r5, #0
   1c87c:	d1f1      	bne.n	1c862 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1c87e:	b117      	cbz	r7, 1c886 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1c880:	200d      	movs	r0, #13
   1c882:	f7f5 fe6b 	bl	1255c <arch_irq_enable>
	return cnt;
   1c886:	4620      	mov	r0, r4
   1c888:	e7c5      	b.n	1c816 <entropy_nrf5_get_entropy_isr+0x16>
   1c88a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1c88e:	bf20      	wfe
				__SEV();
   1c890:	bf40      	sev
				__WFE();
   1c892:	bf20      	wfe
   1c894:	e7e5      	b.n	1c862 <entropy_nrf5_get_entropy_isr+0x62>
   1c896:	bf00      	nop
   1c898:	200029b4 	.word	0x200029b4
   1c89c:	4000d000 	.word	0x4000d000
   1c8a0:	e000e100 	.word	0xe000e100

0001c8a4 <entropy_nrf5_get_entropy>:
{
   1c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c8a8:	4f13      	ldr	r7, [pc, #76]	; (1c8f8 <entropy_nrf5_get_entropy+0x54>)
   1c8aa:	460d      	mov	r5, r1
   1c8ac:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c8ae:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1c8b2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1c8b6:	b914      	cbnz	r4, 1c8be <entropy_nrf5_get_entropy+0x1a>
}
   1c8b8:	4620      	mov	r0, r4
   1c8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c8be:	f04f 33ff 	mov.w	r3, #4294967295
   1c8c2:	f04f 32ff 	mov.w	r2, #4294967295
   1c8c6:	4638      	mov	r0, r7
   1c8c8:	f001 ffde 	bl	1e888 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c8cc:	4622      	mov	r2, r4
   1c8ce:	4629      	mov	r1, r5
   1c8d0:	4640      	mov	r0, r8
   1c8d2:	f7ff ff4f 	bl	1c774 <rng_pool_get>
   1c8d6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c8d8:	4638      	mov	r0, r7
   1c8da:	f001 ffaf 	bl	1e83c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c8de:	b93e      	cbnz	r6, 1c8f0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1c8e0:	f04f 32ff 	mov.w	r2, #4294967295
   1c8e4:	f04f 33ff 	mov.w	r3, #4294967295
   1c8e8:	4648      	mov	r0, r9
   1c8ea:	f001 ffcd 	bl	1e888 <z_impl_k_sem_take>
			continue;
   1c8ee:	e7e2      	b.n	1c8b6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1c8f0:	1ba4      	subs	r4, r4, r6
   1c8f2:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c8f4:	4435      	add	r5, r6
   1c8f6:	e7de      	b.n	1c8b6 <entropy_nrf5_get_entropy+0x12>
   1c8f8:	20002984 	.word	0x20002984

0001c8fc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1c8fc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c8fe:	4c19      	ldr	r4, [pc, #100]	; (1c964 <entropy_nrf5_init+0x68>)
   1c900:	2201      	movs	r2, #1
   1c902:	4611      	mov	r1, r2
   1c904:	4620      	mov	r0, r4
   1c906:	f009 f893 	bl	25a30 <z_impl_k_sem_init>
   1c90a:	2201      	movs	r2, #1
   1c90c:	2100      	movs	r1, #0
   1c90e:	f104 0018 	add.w	r0, r4, #24
   1c912:	f009 f88d 	bl	25a30 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c916:	f240 4307 	movw	r3, #1031	; 0x407
   1c91a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c91e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c922:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c924:	230c      	movs	r3, #12
   1c926:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c92a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1c92c:	4b0e      	ldr	r3, [pc, #56]	; (1c968 <entropy_nrf5_init+0x6c>)
   1c92e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c932:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c936:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c93a:	f022 0201 	bic.w	r2, r2, #1
   1c93e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1c942:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c944:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1c948:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1c94c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c950:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c952:	6019      	str	r1, [r3, #0]
   1c954:	200d      	movs	r0, #13
   1c956:	f7f5 fe33 	bl	125c0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c95a:	200d      	movs	r0, #13
   1c95c:	f7f5 fdfe 	bl	1255c <arch_irq_enable>

	return 0;
}
   1c960:	4628      	mov	r0, r5
   1c962:	bd38      	pop	{r3, r4, r5, pc}
   1c964:	20002984 	.word	0x20002984
   1c968:	4000d000 	.word	0x4000d000

0001c96c <isr>:
{
   1c96c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c96e:	f7ff fee3 	bl	1c738 <random_byte_get>
	if (byte < 0) {
   1c972:	2800      	cmp	r0, #0
   1c974:	db20      	blt.n	1c9b8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c976:	4b17      	ldr	r3, [pc, #92]	; (1c9d4 <isr+0x68>)
   1c978:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c97c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c980:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c984:	1a51      	subs	r1, r2, r1
   1c986:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c98a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c98c:	d10d      	bne.n	1c9aa <isr+0x3e>
	uint8_t last  = rngp->last;
   1c98e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c992:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c996:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c99a:	1a51      	subs	r1, r2, r1
   1c99c:	ea34 0101 	bics.w	r1, r4, r1
   1c9a0:	d10b      	bne.n	1c9ba <isr+0x4e>
   1c9a2:	4b0d      	ldr	r3, [pc, #52]	; (1c9d8 <isr+0x6c>)
   1c9a4:	2201      	movs	r2, #1
   1c9a6:	605a      	str	r2, [r3, #4]
}
   1c9a8:	e00e      	b.n	1c9c8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c9aa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c9ac:	3201      	adds	r2, #1
   1c9ae:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c9b0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c9b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1c9b8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c9ba:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c9bc:	3201      	adds	r2, #1
   1c9be:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c9c0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c9c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c9c8:	4804      	ldr	r0, [pc, #16]	; (1c9dc <isr+0x70>)
}
   1c9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c9ce:	f001 bf35 	b.w	1e83c <z_impl_k_sem_give>
   1c9d2:	bf00      	nop
   1c9d4:	20002984 	.word	0x20002984
   1c9d8:	4000d000 	.word	0x4000d000
   1c9dc:	2000299c 	.word	0x2000299c

0001c9e0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1c9e0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1c9e2:	2301      	movs	r3, #1
   1c9e4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c9e6:	4a11      	ldr	r2, [pc, #68]	; (1ca2c <compare_int_lock+0x4c>)
   1c9e8:	f3bf 8f5b 	dmb	ish
   1c9ec:	43dc      	mvns	r4, r3
   1c9ee:	e852 1f00 	ldrex	r1, [r2]
   1c9f2:	ea01 0c04 	and.w	ip, r1, r4
   1c9f6:	e842 ce00 	strex	lr, ip, [r2]
   1c9fa:	f1be 0f00 	cmp.w	lr, #0
   1c9fe:	d1f6      	bne.n	1c9ee <compare_int_lock+0xe>
   1ca00:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ca04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ca08:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ca0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ca10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1ca14:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ca18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ca1c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ca20:	420b      	tst	r3, r1
}
   1ca22:	bf14      	ite	ne
   1ca24:	2001      	movne	r0, #1
   1ca26:	2000      	moveq	r0, #0
   1ca28:	bd10      	pop	{r4, pc}
   1ca2a:	bf00      	nop
   1ca2c:	200029dc 	.word	0x200029dc

0001ca30 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ca30:	4919      	ldr	r1, [pc, #100]	; (1ca98 <sys_clock_timeout_handler+0x68>)
{
   1ca32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca34:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1ca36:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ca3a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1ca3c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1ca40:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ca44:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1ca46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1ca4a:	d222      	bcs.n	1ca92 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1ca4c:	4b13      	ldr	r3, [pc, #76]	; (1ca9c <sys_clock_timeout_handler+0x6c>)
   1ca4e:	681b      	ldr	r3, [r3, #0]
   1ca50:	0a1a      	lsrs	r2, r3, #8
   1ca52:	061b      	lsls	r3, r3, #24
   1ca54:	195e      	adds	r6, r3, r5
   1ca56:	4b12      	ldr	r3, [pc, #72]	; (1caa0 <sys_clock_timeout_handler+0x70>)
   1ca58:	f142 0700 	adc.w	r7, r2, #0
   1ca5c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1ca60:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1ca62:	f002 fd51 	bl	1f508 <sys_clock_announce>
    return p_reg->CC[ch];
   1ca66:	00a3      	lsls	r3, r4, #2
   1ca68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ca6c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1ca70:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1ca74:	42aa      	cmp	r2, r5
   1ca76:	d10b      	bne.n	1ca90 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1ca78:	b91e      	cbnz	r6, 1ca82 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1ca7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1ca7e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ca82:	4b08      	ldr	r3, [pc, #32]	; (1caa4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ca84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1ca88:	fa00 f404 	lsl.w	r4, r0, r4
   1ca8c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1ca92:	2600      	movs	r6, #0
   1ca94:	e7e5      	b.n	1ca62 <sys_clock_timeout_handler+0x32>
   1ca96:	bf00      	nop
   1ca98:	20002118 	.word	0x20002118
   1ca9c:	200029e0 	.word	0x200029e0
   1caa0:	20002100 	.word	0x20002100
   1caa4:	40011000 	.word	0x40011000

0001caa8 <compare_int_unlock>:
	if (key) {
   1caa8:	b319      	cbz	r1, 1caf2 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1caaa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1caae:	2301      	movs	r3, #1
   1cab0:	4a10      	ldr	r2, [pc, #64]	; (1caf4 <compare_int_unlock+0x4c>)
   1cab2:	4083      	lsls	r3, r0
   1cab4:	e852 1f00 	ldrex	r1, [r2]
   1cab8:	4319      	orrs	r1, r3
   1caba:	e842 1c00 	strex	ip, r1, [r2]
   1cabe:	f1bc 0f00 	cmp.w	ip, #0
   1cac2:	d1f7      	bne.n	1cab4 <compare_int_unlock+0xc>
   1cac4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1cac8:	4a0b      	ldr	r2, [pc, #44]	; (1caf8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1caca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cace:	4083      	lsls	r3, r0
   1cad0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cad4:	4b09      	ldr	r3, [pc, #36]	; (1cafc <compare_int_unlock+0x54>)
   1cad6:	f3bf 8f5b 	dmb	ish
   1cada:	681b      	ldr	r3, [r3, #0]
   1cadc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1cae0:	fa23 f000 	lsr.w	r0, r3, r0
   1cae4:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cae6:	bf42      	ittt	mi
   1cae8:	4b05      	ldrmi	r3, [pc, #20]	; (1cb00 <compare_int_unlock+0x58>)
   1caea:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1caee:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1caf2:	4770      	bx	lr
   1caf4:	200029dc 	.word	0x200029dc
   1caf8:	40011000 	.word	0x40011000
   1cafc:	200029d8 	.word	0x200029d8
   1cb00:	e000e100 	.word	0xe000e100

0001cb04 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1cb04:	4b0d      	ldr	r3, [pc, #52]	; (1cb3c <z_nrf_rtc_timer_read+0x38>)
   1cb06:	6818      	ldr	r0, [r3, #0]
   1cb08:	0a01      	lsrs	r1, r0, #8
   1cb0a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1cb0c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1cb10:	4b0b      	ldr	r3, [pc, #44]	; (1cb40 <z_nrf_rtc_timer_read+0x3c>)
   1cb12:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1cb16:	1818      	adds	r0, r3, r0
   1cb18:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1cb1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1cb20:	d20a      	bcs.n	1cb38 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1cb22:	4b08      	ldr	r3, [pc, #32]	; (1cb44 <z_nrf_rtc_timer_read+0x40>)
   1cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb28:	4290      	cmp	r0, r2
   1cb2a:	eb71 0303 	sbcs.w	r3, r1, r3
   1cb2e:	d203      	bcs.n	1cb38 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1cb30:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1cb34:	f141 0100 	adc.w	r1, r1, #0
}
   1cb38:	4770      	bx	lr
   1cb3a:	bf00      	nop
   1cb3c:	200029e0 	.word	0x200029e0
   1cb40:	40011000 	.word	0x40011000
   1cb44:	20002100 	.word	0x20002100

0001cb48 <compare_set>:
{
   1cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb4c:	b085      	sub	sp, #20
   1cb4e:	4616      	mov	r6, r2
   1cb50:	4698      	mov	r8, r3
   1cb52:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1cb54:	f7ff ff44 	bl	1c9e0 <compare_int_lock>
   1cb58:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1cb5a:	f7ff ffd3 	bl	1cb04 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1cb5e:	42b0      	cmp	r0, r6
   1cb60:	eb71 0308 	sbcs.w	r3, r1, r8
   1cb64:	d278      	bcs.n	1cc58 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1cb66:	4b46      	ldr	r3, [pc, #280]	; (1cc80 <compare_set+0x138>)
   1cb68:	1a30      	subs	r0, r6, r0
   1cb6a:	eb68 0101 	sbc.w	r1, r8, r1
   1cb6e:	4298      	cmp	r0, r3
   1cb70:	f171 0300 	sbcs.w	r3, r1, #0
   1cb74:	f080 8081 	bcs.w	1cc7a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1cb78:	4b42      	ldr	r3, [pc, #264]	; (1cc84 <compare_set+0x13c>)
   1cb7a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1cb7e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1cb82:	45d8      	cmp	r8, fp
   1cb84:	bf08      	it	eq
   1cb86:	4556      	cmpeq	r6, sl
   1cb88:	d051      	beq.n	1cc2e <compare_set+0xe6>
   1cb8a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1cb8e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1cb92:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1cb96:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1cb9a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cb9c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1cba0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cba4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1cba6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1cbaa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cbae:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1cbb0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1cbb4:	4b34      	ldr	r3, [pc, #208]	; (1cc88 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cbb6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1cbba:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1cbbc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cbc0:	1a40      	subs	r0, r0, r1
   1cbc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1cbc6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1cbca:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1cbcc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1cbd0:	d107      	bne.n	1cbe2 <compare_set+0x9a>
   1cbd2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1cbd6:	2013      	movs	r0, #19
   1cbd8:	f009 f952 	bl	25e80 <z_impl_k_busy_wait>
   1cbdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1cbe0:	4b29      	ldr	r3, [pc, #164]	; (1cc88 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1cbe2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1cbe6:	eba4 000c 	sub.w	r0, r4, ip
   1cbea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1cbee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cbf2:	bf88      	it	hi
   1cbf4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cbf6:	2000      	movs	r0, #0
   1cbf8:	6038      	str	r0, [r7, #0]
   1cbfa:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1cbfc:	9801      	ldr	r0, [sp, #4]
   1cbfe:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1cc02:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1cc06:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1cc0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1cc0e:	4281      	cmp	r1, r0
   1cc10:	d006      	beq.n	1cc20 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1cc12:	1a20      	subs	r0, r4, r0
   1cc14:	3802      	subs	r0, #2
   1cc16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1cc1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cc1e:	d819      	bhi.n	1cc54 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1cc20:	1aa4      	subs	r4, r4, r2
   1cc22:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1cc26:	eb14 0a06 	adds.w	sl, r4, r6
   1cc2a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1cc2e:	4915      	ldr	r1, [pc, #84]	; (1cc84 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1cc30:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1cc32:	012b      	lsls	r3, r5, #4
   1cc34:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1cc38:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1cc3c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1cc3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cc40:	6053      	str	r3, [r2, #4]
	return ret;
   1cc42:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1cc44:	4628      	mov	r0, r5
   1cc46:	9900      	ldr	r1, [sp, #0]
   1cc48:	f7ff ff2e 	bl	1caa8 <compare_int_unlock>
}
   1cc4c:	4620      	mov	r0, r4
   1cc4e:	b005      	add	sp, #20
   1cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc54:	4620      	mov	r0, r4
   1cc56:	e7b1      	b.n	1cbbc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1cc58:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cc5a:	4a0c      	ldr	r2, [pc, #48]	; (1cc8c <compare_set+0x144>)
   1cc5c:	f3bf 8f5b 	dmb	ish
   1cc60:	40ab      	lsls	r3, r5
   1cc62:	e852 1f00 	ldrex	r1, [r2]
   1cc66:	4319      	orrs	r1, r3
   1cc68:	e842 1000 	strex	r0, r1, [r2]
   1cc6c:	2800      	cmp	r0, #0
   1cc6e:	d1f8      	bne.n	1cc62 <compare_set+0x11a>
   1cc70:	f3bf 8f5b 	dmb	ish
   1cc74:	46b2      	mov	sl, r6
   1cc76:	46c3      	mov	fp, r8
   1cc78:	e7d9      	b.n	1cc2e <compare_set+0xe6>
			return -EINVAL;
   1cc7a:	f06f 0415 	mvn.w	r4, #21
   1cc7e:	e7e1      	b.n	1cc44 <compare_set+0xfc>
   1cc80:	01000001 	.word	0x01000001
   1cc84:	20002108 	.word	0x20002108
   1cc88:	40011000 	.word	0x40011000
   1cc8c:	200029d8 	.word	0x200029d8

0001cc90 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1cc90:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1cc92:	4b19      	ldr	r3, [pc, #100]	; (1ccf8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1cc94:	4d19      	ldr	r5, [pc, #100]	; (1ccfc <sys_clock_driver_init+0x6c>)
   1cc96:	2400      	movs	r4, #0
   1cc98:	f04f 30ff 	mov.w	r0, #4294967295
   1cc9c:	f04f 31ff 	mov.w	r1, #4294967295
   1cca0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1cca4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1cca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ccac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ccb0:	4b13      	ldr	r3, [pc, #76]	; (1cd00 <sys_clock_driver_init+0x70>)
   1ccb2:	2602      	movs	r6, #2
   1ccb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1ccb8:	2101      	movs	r1, #1
   1ccba:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1ccbe:	2011      	movs	r0, #17
   1ccc0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ccc4:	4622      	mov	r2, r4
   1ccc6:	f7f5 fc7b 	bl	125c0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1ccca:	2011      	movs	r0, #17
   1cccc:	f7f5 fc46 	bl	1255c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ccd0:	4a0c      	ldr	r2, [pc, #48]	; (1cd04 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ccd2:	2301      	movs	r3, #1
   1ccd4:	60ab      	str	r3, [r5, #8]
   1ccd6:	602b      	str	r3, [r5, #0]
   1ccd8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ccda:	4b0b      	ldr	r3, [pc, #44]	; (1cd08 <sys_clock_driver_init+0x78>)
   1ccdc:	4a0b      	ldr	r2, [pc, #44]	; (1cd0c <sys_clock_driver_init+0x7c>)
   1ccde:	9300      	str	r3, [sp, #0]
   1cce0:	9401      	str	r4, [sp, #4]
   1cce2:	2300      	movs	r3, #0
   1cce4:	4620      	mov	r0, r4
   1cce6:	f7ff ff2f 	bl	1cb48 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ccea:	4630      	mov	r0, r6
   1ccec:	f7ff f8b4 	bl	1be58 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ccf0:	4620      	mov	r0, r4
   1ccf2:	b002      	add	sp, #8
   1ccf4:	bd70      	pop	{r4, r5, r6, pc}
   1ccf6:	bf00      	nop
   1ccf8:	20002108 	.word	0x20002108
   1ccfc:	40011000 	.word	0x40011000
   1cd00:	e000e100 	.word	0xe000e100
   1cd04:	200029dc 	.word	0x200029dc
   1cd08:	0001ca31 	.word	0x0001ca31
   1cd0c:	007fffff 	.word	0x007fffff

0001cd10 <rtc_nrf_isr>:
{
   1cd10:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1cd14:	4c2c      	ldr	r4, [pc, #176]	; (1cdc8 <rtc_nrf_isr+0xb8>)
   1cd16:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1cd1a:	0799      	lsls	r1, r3, #30
   1cd1c:	d50b      	bpl.n	1cd36 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd1e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1cd22:	b143      	cbz	r3, 1cd36 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1cd24:	4a29      	ldr	r2, [pc, #164]	; (1cdcc <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cd26:	2300      	movs	r3, #0
   1cd28:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1cd2c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1cd30:	6813      	ldr	r3, [r2, #0]
   1cd32:	3301      	adds	r3, #1
   1cd34:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1cd36:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cd3a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1cd3c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1cd40:	03d2      	lsls	r2, r2, #15
   1cd42:	d52d      	bpl.n	1cda0 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cd44:	f3bf 8f5b 	dmb	ish
   1cd48:	4a21      	ldr	r2, [pc, #132]	; (1cdd0 <rtc_nrf_isr+0xc0>)
   1cd4a:	e852 1f00 	ldrex	r1, [r2]
   1cd4e:	f021 0001 	bic.w	r0, r1, #1
   1cd52:	e842 0500 	strex	r5, r0, [r2]
   1cd56:	2d00      	cmp	r5, #0
   1cd58:	d1f7      	bne.n	1cd4a <rtc_nrf_isr+0x3a>
   1cd5a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1cd5e:	b911      	cbnz	r1, 1cd66 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd60:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1cd64:	b1e2      	cbz	r2, 1cda0 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cd66:	2500      	movs	r5, #0
   1cd68:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1cd6c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1cd70:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1cd74:	f7ff fec6 	bl	1cb04 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1cd78:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cd7c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1cd7e:	4b15      	ldr	r3, [pc, #84]	; (1cdd4 <rtc_nrf_isr+0xc4>)
   1cd80:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1cd84:	42b0      	cmp	r0, r6
   1cd86:	41b9      	sbcs	r1, r7
   1cd88:	d20f      	bcs.n	1cdaa <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1cd8a:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1cd8c:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1cd90:	b141      	cbz	r1, 1cda4 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1cd92:	f8cd 8000 	str.w	r8, [sp]
   1cd96:	4632      	mov	r2, r6
   1cd98:	463b      	mov	r3, r7
   1cd9a:	2000      	movs	r0, #0
   1cd9c:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1cd9e:	e001      	b.n	1cda4 <rtc_nrf_isr+0x94>
   1cda0:	f383 8810 	msr	PRIMASK, r3
}
   1cda4:	b002      	add	sp, #8
   1cda6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1cdaa:	f04f 3aff 	mov.w	sl, #4294967295
   1cdae:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1cdb2:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1cdb6:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1cdba:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1cdbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cdc0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1cdc4:	e7e2      	b.n	1cd8c <rtc_nrf_isr+0x7c>
   1cdc6:	bf00      	nop
   1cdc8:	40011000 	.word	0x40011000
   1cdcc:	200029e0 	.word	0x200029e0
   1cdd0:	200029d8 	.word	0x200029d8
   1cdd4:	20002108 	.word	0x20002108

0001cdd8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1cdd8:	1c43      	adds	r3, r0, #1
{
   1cdda:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1cddc:	d021      	beq.n	1ce22 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1cdde:	2801      	cmp	r0, #1
   1cde0:	dd21      	ble.n	1ce26 <sys_clock_set_timeout+0x4e>
   1cde2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cde6:	da20      	bge.n	1ce2a <sys_clock_set_timeout+0x52>
   1cde8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1cdea:	f7ff fe8b 	bl	1cb04 <z_nrf_rtc_timer_read>
   1cdee:	4b10      	ldr	r3, [pc, #64]	; (1ce30 <sys_clock_set_timeout+0x58>)
   1cdf0:	e9d3 1300 	ldrd	r1, r3, [r3]
   1cdf4:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1cdf6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cdfa:	bf28      	it	cs
   1cdfc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1cdfe:	3001      	adds	r0, #1
   1ce00:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1ce02:	480c      	ldr	r0, [pc, #48]	; (1ce34 <sys_clock_set_timeout+0x5c>)
   1ce04:	4282      	cmp	r2, r0
   1ce06:	bf28      	it	cs
   1ce08:	4602      	movcs	r2, r0
   1ce0a:	1852      	adds	r2, r2, r1
   1ce0c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ce10:	4909      	ldr	r1, [pc, #36]	; (1ce38 <sys_clock_set_timeout+0x60>)
   1ce12:	9001      	str	r0, [sp, #4]
   1ce14:	9100      	str	r1, [sp, #0]
   1ce16:	f143 0300 	adc.w	r3, r3, #0
   1ce1a:	f7ff fe95 	bl	1cb48 <compare_set>
}
   1ce1e:	b002      	add	sp, #8
   1ce20:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ce22:	4804      	ldr	r0, [pc, #16]	; (1ce34 <sys_clock_set_timeout+0x5c>)
   1ce24:	e7e0      	b.n	1cde8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1ce26:	2400      	movs	r4, #0
   1ce28:	e7df      	b.n	1cdea <sys_clock_set_timeout+0x12>
   1ce2a:	4c02      	ldr	r4, [pc, #8]	; (1ce34 <sys_clock_set_timeout+0x5c>)
   1ce2c:	e7dd      	b.n	1cdea <sys_clock_set_timeout+0x12>
   1ce2e:	bf00      	nop
   1ce30:	20002118 	.word	0x20002118
   1ce34:	007fffff 	.word	0x007fffff
   1ce38:	0001ca31 	.word	0x0001ca31

0001ce3c <sys_clock_elapsed>:
{
   1ce3c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ce3e:	f7ff fe61 	bl	1cb04 <z_nrf_rtc_timer_read>
   1ce42:	4b02      	ldr	r3, [pc, #8]	; (1ce4c <sys_clock_elapsed+0x10>)
   1ce44:	681b      	ldr	r3, [r3, #0]
}
   1ce46:	1ac0      	subs	r0, r0, r3
   1ce48:	bd08      	pop	{r3, pc}
   1ce4a:	bf00      	nop
   1ce4c:	20002118 	.word	0x20002118

0001ce50 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   1ce50:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1ce54:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1ce56:	2801      	cmp	r0, #1
   1ce58:	4b04      	ldr	r3, [pc, #16]	; (1ce6c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ce5a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1ce5e:	bf18      	it	ne
   1ce60:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ce64:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1ce66:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1ce6a:	4770      	bx	lr
   1ce6c:	50000300 	.word	0x50000300

0001ce70 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   1ce70:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   1ce72:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ce76:	2c00      	cmp	r4, #0
   1ce78:	bf08      	it	eq
   1ce7a:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1ce7c:	ea4f 2303 	mov.w	r3, r3, lsl #8
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   1ce80:	f3c0 1281 	ubfx	r2, r0, #6, #2
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ce84:	bf1c      	itt	ne
   1ce86:	2501      	movne	r5, #1
   1ce88:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
   1ce8a:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
   1ce8e:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ce92:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
        case 1: return NRF_P1;
   1ce96:	4806      	ldr	r0, [pc, #24]	; (1ceb0 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ce98:	ea42 0201 	orr.w	r2, r2, r1
        case 1: return NRF_P1;
   1ce9c:	bf08      	it	eq
   1ce9e:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1cea2:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1cea6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1ceaa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   1ceae:	bd30      	pop	{r4, r5, pc}
   1ceb0:	50000300 	.word	0x50000300

0001ceb4 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1ceb4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1ceb8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1ceba:	2801      	cmp	r0, #1
   1cebc:	4b04      	ldr	r3, [pc, #16]	; (1ced0 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1cebe:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1cec2:	bf18      	it	ne
   1cec4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1cec8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1ceca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1cece:	4770      	bx	lr
   1ced0:	50000300 	.word	0x50000300

0001ced4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1ced4:	4602      	mov	r2, r0
   1ced6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1ced8:	4801      	ldr	r0, [pc, #4]	; (1cee0 <multithreading_lock_acquire+0xc>)
   1ceda:	f001 bbc7 	b.w	1e66c <z_impl_k_mutex_lock>
   1cede:	bf00      	nop
   1cee0:	20000b4c 	.word	0x20000b4c

0001cee4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1cee4:	4801      	ldr	r0, [pc, #4]	; (1ceec <multithreading_lock_release+0x8>)
   1cee6:	f001 bc39 	b.w	1e75c <z_impl_k_mutex_unlock>
   1ceea:	bf00      	nop
   1ceec:	20000b4c 	.word	0x20000b4c

0001cef0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1cef0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1cef2:	4804      	ldr	r0, [pc, #16]	; (1cf04 <hci_driver_init+0x14>)
   1cef4:	f7f6 fc5c 	bl	137b0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1cef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1cefc:	4802      	ldr	r0, [pc, #8]	; (1cf08 <hci_driver_init+0x18>)
   1cefe:	f7e7 b89d 	b.w	403c <sdc_init>
   1cf02:	bf00      	nop
   1cf04:	00026e90 	.word	0x00026e90
   1cf08:	00025547 	.word	0x00025547

0001cf0c <hci_driver_open>:
{
   1cf0c:	b530      	push	{r4, r5, lr}
   1cf0e:	b089      	sub	sp, #36	; 0x24
	sdc_build_revision_get(build_revision);
   1cf10:	a803      	add	r0, sp, #12
   1cf12:	f7e6 fff3 	bl	3efc <sdc_build_revision_get>
			err = sdc_support_adv();
   1cf16:	f7e7 f90f 	bl	4138 <sdc_support_adv>
			if (err) {
   1cf1a:	b118      	cbz	r0, 1cf24 <hci_driver_open+0x18>
				return -ENOTSUP;
   1cf1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1cf20:	b009      	add	sp, #36	; 0x24
   1cf22:	bd30      	pop	{r4, r5, pc}
				err = sdc_support_scan();
   1cf24:	f7e7 f918 	bl	4158 <sdc_support_scan>
				if (err) {
   1cf28:	4605      	mov	r5, r0
   1cf2a:	2800      	cmp	r0, #0
   1cf2c:	d1f6      	bne.n	1cf1c <hci_driver_open+0x10>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf2e:	466c      	mov	r4, sp
   1cf30:	4622      	mov	r2, r4
   1cf32:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1cf34:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf38:	f7e6 ffee 	bl	3f18 <sdc_cfg_set>
	if (required_memory < 0) {
   1cf3c:	2800      	cmp	r0, #0
   1cf3e:	dbef      	blt.n	1cf20 <hci_driver_open+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf40:	4622      	mov	r2, r4
   1cf42:	2102      	movs	r1, #2
   1cf44:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1cf46:	f88d 5000 	strb.w	r5, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf4a:	f7e6 ffe5 	bl	3f18 <sdc_cfg_set>
	if (required_memory < 0) {
   1cf4e:	2800      	cmp	r0, #0
   1cf50:	dbe6      	blt.n	1cf20 <hci_driver_open+0x14>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1cf52:	4b33      	ldr	r3, [pc, #204]	; (1d020 <hci_driver_open+0x114>)
   1cf54:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf56:	4622      	mov	r2, r4
   1cf58:	2103      	movs	r1, #3
   1cf5a:	4628      	mov	r0, r5
   1cf5c:	f7e6 ffdc 	bl	3f18 <sdc_cfg_set>
	if (required_memory < 0) {
   1cf60:	2800      	cmp	r0, #0
   1cf62:	dbdd      	blt.n	1cf20 <hci_driver_open+0x14>
	cfg.event_length.event_length_us =
   1cf64:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf68:	4622      	mov	r2, r4
   1cf6a:	2104      	movs	r1, #4
   1cf6c:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1cf6e:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf70:	f7e6 ffd2 	bl	3f18 <sdc_cfg_set>
	if (required_memory < 0) {
   1cf74:	2800      	cmp	r0, #0
   1cf76:	dbd3      	blt.n	1cf20 <hci_driver_open+0x14>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1cf78:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf7a:	4622      	mov	r2, r4
   1cf7c:	2105      	movs	r1, #5
   1cf7e:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1cf80:	f88d 3000 	strb.w	r3, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf84:	f7e6 ffc8 	bl	3f18 <sdc_cfg_set>
	if (required_memory < 0) {
   1cf88:	2800      	cmp	r0, #0
   1cf8a:	dbc9      	blt.n	1cf20 <hci_driver_open+0x14>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1cf8c:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf8e:	4622      	mov	r2, r4
   1cf90:	2107      	movs	r1, #7
   1cf92:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1cf94:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf98:	f7e6 ffbe 	bl	3f18 <sdc_cfg_set>
		if (required_memory < 0) {
   1cf9c:	2800      	cmp	r0, #0
   1cf9e:	dbbf      	blt.n	1cf20 <hci_driver_open+0x14>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1cfa0:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfa2:	4622      	mov	r2, r4
   1cfa4:	2106      	movs	r1, #6
   1cfa6:	4628      	mov	r0, r5
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1cfa8:	f88d 3000 	strb.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfac:	f7e6 ffb4 	bl	3f18 <sdc_cfg_set>
		if (required_memory < 0) {
   1cfb0:	2800      	cmp	r0, #0
   1cfb2:	dbb5      	blt.n	1cf20 <hci_driver_open+0x14>
	if (required_memory > sizeof(sdc_mempool)) {
   1cfb4:	f5b0 7f5d 	cmp.w	r0, #884	; 0x374
   1cfb8:	db08      	blt.n	1cfcc <hci_driver_open+0xc0>
		k_panic();
   1cfba:	4040      	eors	r0, r0
   1cfbc:	f380 8811 	msr	BASEPRI, r0
   1cfc0:	f04f 0004 	mov.w	r0, #4
   1cfc4:	df02      	svc	2
		return -ENOMEM;
   1cfc6:	f06f 000b 	mvn.w	r0, #11
   1cfca:	e7a9      	b.n	1cf20 <hci_driver_open+0x14>
   1cfcc:	4815      	ldr	r0, [pc, #84]	; (1d024 <hci_driver_open+0x118>)
   1cfce:	f008 fb94 	bl	256fa <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1cfd2:	b308      	cbz	r0, 1d018 <hci_driver_open+0x10c>
	sdc_rand_source_t rand_functions = {
   1cfd4:	4b14      	ldr	r3, [pc, #80]	; (1d028 <hci_driver_open+0x11c>)
   1cfd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1cfda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1cfde:	4620      	mov	r0, r4
   1cfe0:	f7e7 f91c 	bl	421c <sdc_rand_source_register>
	if (err) {
   1cfe4:	b9a8      	cbnz	r0, 1d012 <hci_driver_open+0x106>
	k_work_init(&receive_work, receive_work_handler);
   1cfe6:	4911      	ldr	r1, [pc, #68]	; (1d02c <hci_driver_open+0x120>)
   1cfe8:	4811      	ldr	r0, [pc, #68]	; (1d030 <hci_driver_open+0x124>)
   1cfea:	f008 fda1 	bl	25b30 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1cfee:	f04f 30ff 	mov.w	r0, #4294967295
   1cff2:	f04f 31ff 	mov.w	r1, #4294967295
   1cff6:	f7ff ff6d 	bl	1ced4 <multithreading_lock_acquire>
	if (!err) {
   1cffa:	4604      	mov	r4, r0
   1cffc:	b930      	cbnz	r0, 1d00c <hci_driver_open+0x100>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1cffe:	490d      	ldr	r1, [pc, #52]	; (1d034 <hci_driver_open+0x128>)
   1d000:	480d      	ldr	r0, [pc, #52]	; (1d038 <hci_driver_open+0x12c>)
   1d002:	f7e6 fff3 	bl	3fec <sdc_enable>
   1d006:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d008:	f7ff ff6c 	bl	1cee4 <multithreading_lock_release>
	if (err < 0) {
   1d00c:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1d010:	e786      	b.n	1cf20 <hci_driver_open+0x14>
		return -EINVAL;
   1d012:	f06f 0015 	mvn.w	r0, #21
   1d016:	e783      	b.n	1cf20 <hci_driver_open+0x14>
		return -ENODEV;
   1d018:	f06f 0012 	mvn.w	r0, #18
   1d01c:	e780      	b.n	1cf20 <hci_driver_open+0x14>
   1d01e:	bf00      	nop
   1d020:	02031b1b 	.word	0x02031b1b
   1d024:	00026258 	.word	0x00026258
   1d028:	000265dc 	.word	0x000265dc
   1d02c:	00025559 	.word	0x00025559
   1d030:	200029e4 	.word	0x200029e4
   1d034:	20002cb8 	.word	0x20002cb8
   1d038:	0001d119 	.word	0x0001d119

0001d03c <rand_prio_low_vector_get>:
{
   1d03c:	b538      	push	{r3, r4, r5, lr}
   1d03e:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1d040:	4807      	ldr	r0, [pc, #28]	; (1d060 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1d042:	6883      	ldr	r3, [r0, #8]
   1d044:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1d046:	460a      	mov	r2, r1
   1d048:	b135      	cbz	r5, 1d058 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1d04a:	2300      	movs	r3, #0
   1d04c:	4621      	mov	r1, r4
   1d04e:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1d050:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1d054:	b2c0      	uxtb	r0, r0
   1d056:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1d058:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d05c:	e7f8      	b.n	1d050 <rand_prio_low_vector_get+0x14>
   1d05e:	bf00      	nop
   1d060:	00026258 	.word	0x00026258

0001d064 <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1d064:	b538      	push	{r3, r4, r5, lr}
	switch (hdr->evt) {
   1d066:	4d12      	ldr	r5, [pc, #72]	; (1d0b0 <event_packet_process.constprop.0+0x4c>)
   1d068:	7828      	ldrb	r0, [r5, #0]
   1d06a:	283e      	cmp	r0, #62	; 0x3e
   1d06c:	d015      	beq.n	1d09a <event_packet_process.constprop.0+0x36>
   1d06e:	28ff      	cmp	r0, #255	; 0xff
   1d070:	d01a      	beq.n	1d0a8 <event_packet_process.constprop.0+0x44>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d072:	f04f 32ff 	mov.w	r2, #4294967295
   1d076:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   1d07a:	2100      	movs	r1, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d07c:	f7f6 f896 	bl	131ac <bt_buf_get_evt>
	if (!evt_buf) {
   1d080:	4604      	mov	r4, r0
   1d082:	b1a0      	cbz	r0, 1d0ae <event_packet_process.constprop.0+0x4a>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1d084:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d086:	490a      	ldr	r1, [pc, #40]	; (1d0b0 <event_packet_process.constprop.0+0x4c>)
   1d088:	3202      	adds	r2, #2
   1d08a:	3008      	adds	r0, #8
   1d08c:	f007 fece 	bl	24e2c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1d090:	4620      	mov	r0, r4
}
   1d092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_recv(evt_buf);
   1d096:	f7f6 bb5f 	b.w	13758 <bt_recv>
		switch (me->subevent) {
   1d09a:	78ab      	ldrb	r3, [r5, #2]
   1d09c:	2b02      	cmp	r3, #2
		switch (subevent) {
   1d09e:	d1e8      	bne.n	1d072 <event_packet_process.constprop.0+0xe>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d0a0:	2200      	movs	r2, #0
   1d0a2:	2300      	movs	r3, #0
		switch (subevent) {
   1d0a4:	2101      	movs	r1, #1
   1d0a6:	e7e9      	b.n	1d07c <event_packet_process.constprop.0+0x18>
   1d0a8:	78ab      	ldrb	r3, [r5, #2]
   1d0aa:	2b80      	cmp	r3, #128	; 0x80
   1d0ac:	e7f7      	b.n	1d09e <event_packet_process.constprop.0+0x3a>
}
   1d0ae:	bd38      	pop	{r3, r4, r5, pc}
   1d0b0:	20002c72 	.word	0x20002c72

0001d0b4 <hci_driver_send>:
{
   1d0b4:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1d0b6:	8983      	ldrh	r3, [r0, #12]
{
   1d0b8:	4605      	mov	r5, r0
	if (!buf->len) {
   1d0ba:	b1cb      	cbz	r3, 1d0f0 <hci_driver_send+0x3c>
	switch (type) {
   1d0bc:	7d03      	ldrb	r3, [r0, #20]
   1d0be:	b9bb      	cbnz	r3, 1d0f0 <hci_driver_send+0x3c>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d0c0:	f04f 30ff 	mov.w	r0, #4294967295
   1d0c4:	f04f 31ff 	mov.w	r1, #4294967295
   1d0c8:	f7ff ff04 	bl	1ced4 <multithreading_lock_acquire>
	if (!errcode) {
   1d0cc:	4604      	mov	r4, r0
   1d0ce:	b968      	cbnz	r0, 1d0ec <hci_driver_send+0x38>
		errcode = hci_internal_cmd_put(cmd->data);
   1d0d0:	68a8      	ldr	r0, [r5, #8]
   1d0d2:	f000 f875 	bl	1d1c0 <hci_internal_cmd_put>
   1d0d6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d0d8:	f7ff ff04 	bl	1cee4 <multithreading_lock_release>
	if (errcode) {
   1d0dc:	b934      	cbnz	r4, 1d0ec <hci_driver_send+0x38>
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1d0de:	4906      	ldr	r1, [pc, #24]	; (1d0f8 <hci_driver_send+0x44>)
   1d0e0:	4806      	ldr	r0, [pc, #24]	; (1d0fc <hci_driver_send+0x48>)
   1d0e2:	f008 fd52 	bl	25b8a <k_work_submit_to_queue>
		net_buf_unref(buf);
   1d0e6:	4628      	mov	r0, r5
   1d0e8:	f7fe fd80 	bl	1bbec <net_buf_unref>
}
   1d0ec:	4620      	mov	r0, r4
   1d0ee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d0f0:	f06f 0415 	mvn.w	r4, #21
   1d0f4:	e7fa      	b.n	1d0ec <hci_driver_send+0x38>
   1d0f6:	bf00      	nop
   1d0f8:	200029e4 	.word	0x200029e4
   1d0fc:	20002120 	.word	0x20002120

0001d100 <rand_prio_low_vector_get_blocking>:
{
   1d100:	b410      	push	{r4}
   1d102:	4603      	mov	r3, r0
   1d104:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1d106:	4803      	ldr	r0, [pc, #12]	; (1d114 <rand_prio_low_vector_get_blocking+0x14>)
   1d108:	6881      	ldr	r1, [r0, #8]
   1d10a:	680c      	ldr	r4, [r1, #0]
   1d10c:	4619      	mov	r1, r3
   1d10e:	4623      	mov	r3, r4
}
   1d110:	bc10      	pop	{r4}
   1d112:	4718      	bx	r3
   1d114:	00026258 	.word	0x00026258

0001d118 <hci_driver_receive_process>:
{
   1d118:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d11a:	f04f 30ff 	mov.w	r0, #4294967295
   1d11e:	f04f 31ff 	mov.w	r1, #4294967295
   1d122:	f7ff fed7 	bl	1ced4 <multithreading_lock_acquire>
	if (!errcode) {
   1d126:	b1f8      	cbz	r0, 1d168 <hci_driver_receive_process+0x50>
		return false;
   1d128:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d12a:	f04f 30ff 	mov.w	r0, #4294967295
   1d12e:	f04f 31ff 	mov.w	r1, #4294967295
   1d132:	f7ff fecf 	bl	1ced4 <multithreading_lock_acquire>
	if (!errcode) {
   1d136:	2800      	cmp	r0, #0
   1d138:	d138      	bne.n	1d1ac <hci_driver_receive_process+0x94>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1d13a:	4d1e      	ldr	r5, [pc, #120]	; (1d1b4 <hci_driver_receive_process+0x9c>)
   1d13c:	f10d 0107 	add.w	r1, sp, #7
   1d140:	4628      	mov	r0, r5
   1d142:	f000 fa1d 	bl	1d580 <hci_internal_msg_get>
   1d146:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d148:	f7ff fecc 	bl	1cee4 <multithreading_lock_release>
	if (errcode) {
   1d14c:	bb74      	cbnz	r4, 1d1ac <hci_driver_receive_process+0x94>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1d14e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d152:	2b04      	cmp	r3, #4
   1d154:	d114      	bne.n	1d180 <hci_driver_receive_process+0x68>
		event_packet_process(p_hci_buffer);
   1d156:	f7ff ff85 	bl	1d064 <event_packet_process.constprop.0>
   1d15a:	4917      	ldr	r1, [pc, #92]	; (1d1b8 <hci_driver_receive_process+0xa0>)
   1d15c:	4817      	ldr	r0, [pc, #92]	; (1d1bc <hci_driver_receive_process+0xa4>)
}
   1d15e:	b002      	add	sp, #8
   1d160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d164:	f008 bd11 	b.w	25b8a <k_work_submit_to_queue>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1d168:	4812      	ldr	r0, [pc, #72]	; (1d1b4 <hci_driver_receive_process+0x9c>)
   1d16a:	f000 f9f7 	bl	1d55c <hci_internal_evt_get>
   1d16e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d170:	f7ff feb8 	bl	1cee4 <multithreading_lock_release>
	if (errcode) {
   1d174:	2c00      	cmp	r4, #0
   1d176:	d1d7      	bne.n	1d128 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1d178:	f7ff ff74 	bl	1d064 <event_packet_process.constprop.0>
	return true;
   1d17c:	2601      	movs	r6, #1
   1d17e:	e7d4      	b.n	1d12a <hci_driver_receive_process+0x12>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1d180:	2b02      	cmp	r3, #2
   1d182:	d113      	bne.n	1d1ac <hci_driver_receive_process+0x94>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1d184:	f04f 32ff 	mov.w	r2, #4294967295
   1d188:	f04f 33ff 	mov.w	r3, #4294967295
   1d18c:	2003      	movs	r0, #3
   1d18e:	f7f5 ffe3 	bl	13158 <bt_buf_get_rx>
	if (!data_buf) {
   1d192:	4604      	mov	r4, r0
   1d194:	2800      	cmp	r0, #0
   1d196:	d0e0      	beq.n	1d15a <hci_driver_receive_process+0x42>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1d198:	886a      	ldrh	r2, [r5, #2]
   1d19a:	4629      	mov	r1, r5
   1d19c:	3204      	adds	r2, #4
   1d19e:	3008      	adds	r0, #8
   1d1a0:	f007 fe44 	bl	24e2c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	f7f6 fad7 	bl	13758 <bt_recv>
	if (received_evt || received_data || received_msg) {
   1d1aa:	e7d6      	b.n	1d15a <hci_driver_receive_process+0x42>
   1d1ac:	2e00      	cmp	r6, #0
   1d1ae:	d1d4      	bne.n	1d15a <hci_driver_receive_process+0x42>
}
   1d1b0:	b002      	add	sp, #8
   1d1b2:	bd70      	pop	{r4, r5, r6, pc}
   1d1b4:	20002c72 	.word	0x20002c72
   1d1b8:	200029e4 	.word	0x200029e4
   1d1bc:	20002120 	.word	0x20002120

0001d1c0 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1d1c0:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1d1c2:	4ccd      	ldr	r4, [pc, #820]	; (1d4f8 <hci_internal_cmd_put+0x338>)
   1d1c4:	7823      	ldrb	r3, [r4, #0]
   1d1c6:	2b00      	cmp	r3, #0
   1d1c8:	f040 81c2 	bne.w	1d550 <hci_internal_cmd_put+0x390>
	return ((uint16_t)src[1] << 8) | src[0];
   1d1cc:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1d1ce:	0aaa      	lsrs	r2, r5, #10
   1d1d0:	2a08      	cmp	r2, #8
   1d1d2:	b22b      	sxth	r3, r5
   1d1d4:	f000 80c0 	beq.w	1d358 <hci_internal_cmd_put+0x198>
   1d1d8:	d810      	bhi.n	1d1fc <hci_internal_cmd_put+0x3c>
   1d1da:	2a03      	cmp	r2, #3
   1d1dc:	d036      	beq.n	1d24c <hci_internal_cmd_put+0x8c>
   1d1de:	2a04      	cmp	r2, #4
   1d1e0:	d044      	beq.n	1d26c <hci_internal_cmd_put+0xac>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d1e2:	230f      	movs	r3, #15
   1d1e4:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d1e6:	2304      	movs	r3, #4
   1d1e8:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d1ea:	2301      	movs	r3, #1
   1d1ec:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1d1ee:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1d1f0:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1d1f4:	2301      	movs	r3, #1
   1d1f6:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1d1f8:	2000      	movs	r0, #0
}
   1d1fa:	bd38      	pop	{r3, r4, r5, pc}
	switch (BT_OGF(opcode)) {
   1d1fc:	2a3f      	cmp	r2, #63	; 0x3f
   1d1fe:	d1f0      	bne.n	1d1e2 <hci_internal_cmd_put+0x22>
	switch (opcode)	{
   1d200:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1d204:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d206:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1d20a:	f200 814e 	bhi.w	1d4aa <hci_internal_cmd_put+0x2ea>
   1d20e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1d212:	d0e6      	beq.n	1d1e2 <hci_internal_cmd_put+0x22>
   1d214:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1d218:	3b01      	subs	r3, #1
   1d21a:	2b09      	cmp	r3, #9
   1d21c:	d8e1      	bhi.n	1d1e2 <hci_internal_cmd_put+0x22>
   1d21e:	a201      	add	r2, pc, #4	; (adr r2, 1d224 <hci_internal_cmd_put+0x64>)
   1d220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d224:	0001d4cb 	.word	0x0001d4cb
   1d228:	0001d4d5 	.word	0x0001d4d5
   1d22c:	0001d1e3 	.word	0x0001d1e3
   1d230:	0001d1e3 	.word	0x0001d1e3
   1d234:	0001d1e3 	.word	0x0001d1e3
   1d238:	0001d515 	.word	0x0001d515
   1d23c:	0001d1e3 	.word	0x0001d1e3
   1d240:	0001d1e3 	.word	0x0001d1e3
   1d244:	0001d501 	.word	0x0001d501
   1d248:	0001d50b 	.word	0x0001d50b
	switch (opcode)	{
   1d24c:	f640 4201 	movw	r2, #3073	; 0xc01
   1d250:	4293      	cmp	r3, r2
   1d252:	d006      	beq.n	1d262 <hci_internal_cmd_put+0xa2>
   1d254:	f640 4203 	movw	r2, #3075	; 0xc03
   1d258:	4293      	cmp	r3, r2
   1d25a:	d1c2      	bne.n	1d1e2 <hci_internal_cmd_put+0x22>
		return sdc_hci_cmd_cb_reset();
   1d25c:	f7e7 f8e6 	bl	442c <sdc_hci_cmd_cb_reset>
   1d260:	e002      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1d262:	3003      	adds	r0, #3
   1d264:	f7f0 fb8d 	bl	d982 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1d268:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1d26a:	e071      	b.n	1d350 <hci_internal_cmd_put+0x190>
	switch (opcode)	{
   1d26c:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1d270:	3b01      	subs	r3, #1
   1d272:	2b08      	cmp	r3, #8
   1d274:	d8b5      	bhi.n	1d1e2 <hci_internal_cmd_put+0x22>
   1d276:	a201      	add	r2, pc, #4	; (adr r2, 1d27c <hci_internal_cmd_put+0xbc>)
   1d278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d27c:	0001d2a1 	.word	0x0001d2a1
   1d280:	0001d2ab 	.word	0x0001d2ab
   1d284:	0001d32d 	.word	0x0001d32d
   1d288:	0001d1e3 	.word	0x0001d1e3
   1d28c:	0001d1e3 	.word	0x0001d1e3
   1d290:	0001d1e3 	.word	0x0001d1e3
   1d294:	0001d1e3 	.word	0x0001d1e3
   1d298:	0001d1e3 	.word	0x0001d1e3
   1d29c:	0001d349 	.word	0x0001d349
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d2a0:	4896      	ldr	r0, [pc, #600]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d2a2:	f7f0 fc54 	bl	db4e <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1d2a6:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1d2a8:	e052      	b.n	1d350 <hci_internal_cmd_put+0x190>
	memset(cmds, 0, sizeof(*cmds));
   1d2aa:	4894      	ldr	r0, [pc, #592]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d2ac:	222f      	movs	r2, #47	; 0x2f
   1d2ae:	2100      	movs	r1, #0
   1d2b0:	f004 fbad 	bl	21a0e <memset>
	cmds->hci_set_event_mask = 1;
   1d2b4:	7b23      	ldrb	r3, [r4, #12]
   1d2b6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d2ba:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
   1d2bc:	7d63      	ldrb	r3, [r4, #21]
   1d2be:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1d2c2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1d2c6:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1d2c8:	7da3      	ldrb	r3, [r4, #22]
   1d2ca:	f043 0302 	orr.w	r3, r3, #2
   1d2ce:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   1d2d0:	f894 3020 	ldrb.w	r3, [r4, #32]
   1d2d4:	f063 0308 	orn	r3, r3, #8
   1d2d8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1d2dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1d2e0:	f063 0330 	orn	r3, r3, #48	; 0x30
   1d2e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1d2e8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1d2ec:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1d2f0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
   1d2f4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d2f8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   1d2fc:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   1d300:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   1d304:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1d308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d30c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1d310:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1d314:	f043 0301 	orr.w	r3, r3, #1
   1d318:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1d31c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1d320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d324:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		return 0;
   1d328:	2344      	movs	r3, #68	; 0x44
   1d32a:	e00b      	b.n	1d344 <hci_internal_cmd_put+0x184>
	memset(features, 0, sizeof(*features));
   1d32c:	4873      	ldr	r0, [pc, #460]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d32e:	2208      	movs	r2, #8
   1d330:	2100      	movs	r1, #0
   1d332:	f004 fb6c 	bl	21a0e <memset>
	features->bdedr_not_supported = 1;
   1d336:	7ae3      	ldrb	r3, [r4, #11]
   1d338:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1d33c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1d340:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1d342:	230c      	movs	r3, #12
		return 0;
   1d344:	2000      	movs	r0, #0
   1d346:	e0a8      	b.n	1d49a <hci_internal_cmd_put+0x2da>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d348:	486c      	ldr	r0, [pc, #432]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d34a:	f7f0 fbfe 	bl	db4a <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d34e:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1d350:	2801      	cmp	r0, #1
   1d352:	f040 80a2 	bne.w	1d49a <hci_internal_cmd_put+0x2da>
   1d356:	e744      	b.n	1d1e2 <hci_internal_cmd_put+0x22>
	switch (opcode)	{
   1d358:	f242 021c 	movw	r2, #8220	; 0x201c
   1d35c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d35e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1d362:	dc45      	bgt.n	1d3f0 <hci_internal_cmd_put+0x230>
   1d364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1d368:	f77f af3b 	ble.w	1d1e2 <hci_internal_cmd_put+0x22>
   1d36c:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1d370:	3b01      	subs	r3, #1
   1d372:	2b1b      	cmp	r3, #27
   1d374:	f63f af35 	bhi.w	1d1e2 <hci_internal_cmd_put+0x22>
   1d378:	a201      	add	r2, pc, #4	; (adr r2, 1d380 <hci_internal_cmd_put+0x1c0>)
   1d37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d37e:	bf00      	nop
   1d380:	0001d405 	.word	0x0001d405
   1d384:	0001d40b 	.word	0x0001d40b
   1d388:	0001d415 	.word	0x0001d415
   1d38c:	0001d1e3 	.word	0x0001d1e3
   1d390:	0001d431 	.word	0x0001d431
   1d394:	0001d437 	.word	0x0001d437
   1d398:	0001d43d 	.word	0x0001d43d
   1d39c:	0001d447 	.word	0x0001d447
   1d3a0:	0001d44d 	.word	0x0001d44d
   1d3a4:	0001d453 	.word	0x0001d453
   1d3a8:	0001d459 	.word	0x0001d459
   1d3ac:	0001d45f 	.word	0x0001d45f
   1d3b0:	0001d1e3 	.word	0x0001d1e3
   1d3b4:	0001d1e3 	.word	0x0001d1e3
   1d3b8:	0001d465 	.word	0x0001d465
   1d3bc:	0001d46d 	.word	0x0001d46d
   1d3c0:	0001d473 	.word	0x0001d473
   1d3c4:	0001d479 	.word	0x0001d479
   1d3c8:	0001d1e3 	.word	0x0001d1e3
   1d3cc:	0001d1e3 	.word	0x0001d1e3
   1d3d0:	0001d1e3 	.word	0x0001d1e3
   1d3d4:	0001d1e3 	.word	0x0001d1e3
   1d3d8:	0001d47f 	.word	0x0001d47f
   1d3dc:	0001d489 	.word	0x0001d489
   1d3e0:	0001d1e3 	.word	0x0001d1e3
   1d3e4:	0001d1e3 	.word	0x0001d1e3
   1d3e8:	0001d1e3 	.word	0x0001d1e3
   1d3ec:	0001d491 	.word	0x0001d491
   1d3f0:	f242 024b 	movw	r2, #8267	; 0x204b
   1d3f4:	4293      	cmp	r3, r2
   1d3f6:	f47f aef4 	bne.w	1d1e2 <hci_internal_cmd_put+0x22>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d3fa:	1de0      	adds	r0, r4, #7
   1d3fc:	f7f0 fbbb 	bl	db76 <sdc_hci_cmd_le_read_transmit_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1d400:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d402:	e7a5      	b.n	1d350 <hci_internal_cmd_put+0x190>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1d404:	f7f0 fbc1 	bl	db8a <sdc_hci_cmd_le_set_event_mask>
   1d408:	e72e      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d40a:	483c      	ldr	r0, [pc, #240]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d40c:	f7f0 fbaf 	bl	db6e <sdc_hci_cmd_le_read_buffer_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1d410:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d412:	e79d      	b.n	1d350 <hci_internal_cmd_put+0x190>
	memset(features, 0, sizeof(*features));
   1d414:	4839      	ldr	r0, [pc, #228]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d416:	2205      	movs	r2, #5
   1d418:	2100      	movs	r1, #0
   1d41a:	f004 faf8 	bl	21a0e <memset>
	features->le_encryption = 1;
   1d41e:	79e3      	ldrb	r3, [r4, #7]
   1d420:	f063 0362 	orn	r3, r3, #98	; 0x62
   1d424:	71e3      	strb	r3, [r4, #7]
	features->channel_selection_algorithm_2 = 1;
   1d426:	7a23      	ldrb	r3, [r4, #8]
   1d428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d42c:	7223      	strb	r3, [r4, #8]
   1d42e:	e788      	b.n	1d342 <hci_internal_cmd_put+0x182>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1d430:	f7f0 fbb0 	bl	db94 <sdc_hci_cmd_le_set_random_address>
   1d434:	e718      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1d436:	f7f0 fba6 	bl	db86 <sdc_hci_cmd_le_set_adv_params>
   1d43a:	e715      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1d43c:	482f      	ldr	r0, [pc, #188]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d43e:	f7f0 fb94 	bl	db6a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1d442:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1d444:	e784      	b.n	1d350 <hci_internal_cmd_put+0x190>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1d446:	f7f0 fb9a 	bl	db7e <sdc_hci_cmd_le_set_adv_data>
   1d44a:	e70d      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1d44c:	f7f0 fba8 	bl	dba0 <sdc_hci_cmd_le_set_scan_response_data>
   1d450:	e70a      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1d452:	f7f0 fb96 	bl	db82 <sdc_hci_cmd_le_set_adv_enable>
   1d456:	e707      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1d458:	f7f0 fba0 	bl	db9c <sdc_hci_cmd_le_set_scan_params>
   1d45c:	e704      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1d45e:	f7f0 fb9b 	bl	db98 <sdc_hci_cmd_le_set_scan_enable>
   1d462:	e701      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1d464:	4825      	ldr	r0, [pc, #148]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d466:	f7f0 fb84 	bl	db72 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1d46a:	e7ea      	b.n	1d442 <hci_internal_cmd_put+0x282>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1d46c:	f7f0 fb73 	bl	db56 <sdc_hci_cmd_le_clear_filter_accept_list>
   1d470:	e6fa      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1d472:	f7f0 fb6e 	bl	db52 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1d476:	e6f7      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1d478:	f7f0 fb7f 	bl	db7a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1d47c:	e6f4      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d47e:	491f      	ldr	r1, [pc, #124]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d480:	f7f0 fb6b 	bl	db5a <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1d484:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d486:	e763      	b.n	1d350 <hci_internal_cmd_put+0x190>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1d488:	481c      	ldr	r0, [pc, #112]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d48a:	f7f0 fb6c 	bl	db66 <sdc_hci_cmd_le_rand>
   1d48e:	e70a      	b.n	1d2a6 <hci_internal_cmd_put+0xe6>
	*buf = states1;
   1d490:	2333      	movs	r3, #51	; 0x33
	*(buf + 4) = states2;
   1d492:	2000      	movs	r0, #0
	*buf = states1;
   1d494:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1d496:	72e0      	strb	r0, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1d498:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d49a:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1d49c:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1d49e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d4a0:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1d4a2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1d4a4:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d4a6:	71a0      	strb	r0, [r4, #6]
}
   1d4a8:	e6a4      	b.n	1d1f4 <hci_internal_cmd_put+0x34>
	switch (opcode)	{
   1d4aa:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1d4ae:	b29b      	uxth	r3, r3
   1d4b0:	2b05      	cmp	r3, #5
   1d4b2:	f63f ae96 	bhi.w	1d1e2 <hci_internal_cmd_put+0x22>
   1d4b6:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1d4ba:	2b05      	cmp	r3, #5
   1d4bc:	f63f ae91 	bhi.w	1d1e2 <hci_internal_cmd_put+0x22>
   1d4c0:	e8df f003 	tbb	[pc, r3]
   1d4c4:	3d3a372b 	.word	0x3d3a372b
   1d4c8:	4340      	.short	0x4340
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1d4ca:	480c      	ldr	r0, [pc, #48]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d4cc:	f7e6 ffc6 	bl	445c <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1d4d0:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1d4d2:	e73d      	b.n	1d350 <hci_internal_cmd_put+0x190>
	memset(cmds, 0, sizeof(*cmds));
   1d4d4:	4809      	ldr	r0, [pc, #36]	; (1d4fc <hci_internal_cmd_put+0x33c>)
   1d4d6:	2202      	movs	r2, #2
   1d4d8:	2100      	movs	r1, #0
   1d4da:	f004 fa98 	bl	21a0e <memset>
	cmds->read_version_info = 1;
   1d4de:	79e3      	ldrb	r3, [r4, #7]
   1d4e0:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1d4e4:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1d4e8:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1d4ea:	7a23      	ldrb	r3, [r4, #8]
   1d4ec:	f023 0307 	bic.w	r3, r3, #7
   1d4f0:	f043 0307 	orr.w	r3, r3, #7
   1d4f4:	7223      	strb	r3, [r4, #8]
}
   1d4f6:	e717      	b.n	1d328 <hci_internal_cmd_put+0x168>
   1d4f8:	2000302b 	.word	0x2000302b
   1d4fc:	20003032 	.word	0x20003032
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1d500:	4815      	ldr	r0, [pc, #84]	; (1d558 <hci_internal_cmd_put+0x398>)
   1d502:	f7f0 fad1 	bl	daa8 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1d506:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1d508:	e722      	b.n	1d350 <hci_internal_cmd_put+0x190>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1d50a:	4813      	ldr	r0, [pc, #76]	; (1d558 <hci_internal_cmd_put+0x398>)
   1d50c:	f7f0 fa7f 	bl	da0e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1d510:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1d512:	e71d      	b.n	1d350 <hci_internal_cmd_put+0x190>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1d514:	f7f0 fb17 	bl	db46 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1d518:	e6a6      	b.n	1d268 <hci_internal_cmd_put+0xa8>
	memset(cmds, 0, sizeof(*cmds));
   1d51a:	480f      	ldr	r0, [pc, #60]	; (1d558 <hci_internal_cmd_put+0x398>)
   1d51c:	2202      	movs	r2, #2
   1d51e:	2100      	movs	r1, #0
   1d520:	f004 fa75 	bl	21a0e <memset>
	cmds->read_supported_vs_commands = 1;
   1d524:	79e3      	ldrb	r3, [r4, #7]
   1d526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1d52a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1d52e:	71e3      	strb	r3, [r4, #7]
}
   1d530:	e6fa      	b.n	1d328 <hci_internal_cmd_put+0x168>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1d532:	f7f0 fa5f 	bl	d9f4 <sdc_hci_cmd_vs_llpm_mode_set>
   1d536:	e697      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1d538:	f7f0 fa30 	bl	d99c <sdc_hci_cmd_vs_conn_update>
   1d53c:	e694      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1d53e:	f7f0 fa25 	bl	d98c <sdc_hci_cmd_vs_conn_event_extend>
   1d542:	e691      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1d544:	f7f0 fa5e 	bl	da04 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1d548:	e68e      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1d54a:	f7f0 fa51 	bl	d9f0 <sdc_hci_cmd_vs_event_length_set>
   1d54e:	e68b      	b.n	1d268 <hci_internal_cmd_put+0xa8>
		return -NRF_EPERM;
   1d550:	f04f 30ff 	mov.w	r0, #4294967295
   1d554:	e651      	b.n	1d1fa <hci_internal_cmd_put+0x3a>
   1d556:	bf00      	nop
   1d558:	20003032 	.word	0x20003032

0001d55c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1d55c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1d55e:	4c07      	ldr	r4, [pc, #28]	; (1d57c <hci_internal_evt_get+0x20>)
   1d560:	7823      	ldrb	r3, [r4, #0]
   1d562:	b91b      	cbnz	r3, 1d56c <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1d564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1d568:	f7f0 b9f6 	b.w	d958 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1d56c:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1d56e:	1c61      	adds	r1, r4, #1
   1d570:	3202      	adds	r2, #2
   1d572:	f004 fa41 	bl	219f8 <memcpy>
		cmd_complete_or_status.occurred = false;
   1d576:	2000      	movs	r0, #0
   1d578:	7020      	strb	r0, [r4, #0]
}
   1d57a:	bd10      	pop	{r4, pc}
   1d57c:	2000302b 	.word	0x2000302b

0001d580 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1d580:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1d582:	4c09      	ldr	r4, [pc, #36]	; (1d5a8 <hci_internal_msg_get+0x28>)
   1d584:	7823      	ldrb	r3, [r4, #0]
{
   1d586:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1d588:	b91b      	cbnz	r3, 1d592 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1d58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1d58e:	f7f0 b9f0 	b.w	d972 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1d592:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1d594:	1c61      	adds	r1, r4, #1
   1d596:	3202      	adds	r2, #2
   1d598:	f004 fa2e 	bl	219f8 <memcpy>
		cmd_complete_or_status.occurred = false;
   1d59c:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1d59e:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1d5a0:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1d5a2:	702b      	strb	r3, [r5, #0]
}
   1d5a4:	bd38      	pop	{r3, r4, r5, pc}
   1d5a6:	bf00      	nop
   1d5a8:	2000302b 	.word	0x2000302b

0001d5ac <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1d5ac:	b570      	push	{r4, r5, r6, lr}
   1d5ae:	4605      	mov	r5, r0
   1d5b0:	460e      	mov	r6, r1
   1d5b2:	4c08      	ldr	r4, [pc, #32]	; (1d5d4 <bt_rand+0x28>)
   1d5b4:	4620      	mov	r0, r4
   1d5b6:	f008 f8a0 	bl	256fa <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1d5ba:	b138      	cbz	r0, 1d5cc <bt_rand+0x20>
   1d5bc:	68a3      	ldr	r3, [r4, #8]
   1d5be:	b2b2      	uxth	r2, r6
   1d5c0:	4629      	mov	r1, r5
   1d5c2:	4620      	mov	r0, r4
   1d5c4:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1d5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d5ca:	4718      	bx	r3
   1d5cc:	f06f 0012 	mvn.w	r0, #18
   1d5d0:	bd70      	pop	{r4, r5, r6, pc}
   1d5d2:	bf00      	nop
   1d5d4:	00026258 	.word	0x00026258

0001d5d8 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1d5d8:	4901      	ldr	r1, [pc, #4]	; (1d5e0 <mpsl_low_prio_irq_handler+0x8>)
   1d5da:	4802      	ldr	r0, [pc, #8]	; (1d5e4 <mpsl_low_prio_irq_handler+0xc>)
   1d5dc:	f008 bad5 	b.w	25b8a <k_work_submit_to_queue>
   1d5e0:	200029f4 	.word	0x200029f4
   1d5e4:	20002120 	.word	0x20002120

0001d5e8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1d5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1d5ea:	2332      	movs	r3, #50	; 0x32
   1d5ec:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1d5f0:	4a13      	ldr	r2, [pc, #76]	; (1d640 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1d5f2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1d5f4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1d5f6:	2119      	movs	r1, #25
   1d5f8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1d5fa:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1d5fe:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1d602:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1d606:	f7e6 f98b 	bl	3920 <mpsl_init>
	if (err) {
   1d60a:	4604      	mov	r4, r0
   1d60c:	b9a0      	cbnz	r0, 1d638 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1d60e:	480d      	ldr	r0, [pc, #52]	; (1d644 <mpsl_lib_init+0x5c>)
   1d610:	4629      	mov	r1, r5
   1d612:	f7ef fba3 	bl	cd5c <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1d616:	4604      	mov	r4, r0
   1d618:	b970      	cbnz	r0, 1d638 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d61a:	4601      	mov	r1, r0
   1d61c:	462a      	mov	r2, r5
   1d61e:	2008      	movs	r0, #8
   1d620:	f7f4 ffce 	bl	125c0 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d624:	462a      	mov	r2, r5
   1d626:	4621      	mov	r1, r4
   1d628:	200b      	movs	r0, #11
   1d62a:	f7f4 ffc9 	bl	125c0 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d62e:	462a      	mov	r2, r5
   1d630:	4621      	mov	r1, r4
   1d632:	4628      	mov	r0, r5
   1d634:	f7f4 ffc4 	bl	125c0 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1d638:	4620      	mov	r0, r4
   1d63a:	b003      	add	sp, #12
   1d63c:	bd30      	pop	{r4, r5, pc}
   1d63e:	bf00      	nop
   1d640:	00025589 	.word	0x00025589
   1d644:	20002a04 	.word	0x20002a04

0001d648 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1d648:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1d64a:	4d0d      	ldr	r5, [pc, #52]	; (1d680 <mpsl_low_prio_init+0x38>)
   1d64c:	490d      	ldr	r1, [pc, #52]	; (1d684 <mpsl_low_prio_init+0x3c>)
   1d64e:	2400      	movs	r4, #0
   1d650:	9400      	str	r4, [sp, #0]
   1d652:	f06f 0309 	mvn.w	r3, #9
   1d656:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d65a:	4628      	mov	r0, r5
   1d65c:	f001 fa4a 	bl	1eaf4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1d660:	4909      	ldr	r1, [pc, #36]	; (1d688 <mpsl_low_prio_init+0x40>)
   1d662:	4628      	mov	r0, r5
   1d664:	f008 f907 	bl	25876 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1d668:	4908      	ldr	r1, [pc, #32]	; (1d68c <mpsl_low_prio_init+0x44>)
   1d66a:	4809      	ldr	r0, [pc, #36]	; (1d690 <mpsl_low_prio_init+0x48>)
   1d66c:	f008 fa60 	bl	25b30 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1d670:	4622      	mov	r2, r4
   1d672:	2104      	movs	r1, #4
   1d674:	2019      	movs	r0, #25
   1d676:	f7f4 ffa3 	bl	125c0 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1d67a:	4620      	mov	r0, r4
   1d67c:	b003      	add	sp, #12
   1d67e:	bd30      	pop	{r4, r5, pc}
   1d680:	20002120 	.word	0x20002120
   1d684:	20004b40 	.word	0x20004b40
   1d688:	000278e9 	.word	0x000278e9
   1d68c:	000255b5 	.word	0x000255b5
   1d690:	200029f4 	.word	0x200029f4

0001d694 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1d694:	4b01      	ldr	r3, [pc, #4]	; (1d69c <mpsl_hfclk_callback+0x8>)
   1d696:	2000      	movs	r0, #0
   1d698:	681b      	ldr	r3, [r3, #0]
   1d69a:	4718      	bx	r3
   1d69c:	20002a34 	.word	0x20002a34

0001d6a0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1d6a0:	b120      	cbz	r0, 1d6ac <nrfx_clock_start+0xc>
   1d6a2:	2801      	cmp	r0, #1
   1d6a4:	d106      	bne.n	1d6b4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1d6a6:	4804      	ldr	r0, [pc, #16]	; (1d6b8 <nrfx_clock_start+0x18>)
   1d6a8:	f7e5 bfce 	b.w	3648 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1d6ac:	4b03      	ldr	r3, [pc, #12]	; (1d6bc <nrfx_clock_start+0x1c>)
   1d6ae:	2001      	movs	r0, #1
   1d6b0:	681b      	ldr	r3, [r3, #0]
   1d6b2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1d6b4:	4770      	bx	lr
   1d6b6:	bf00      	nop
   1d6b8:	0001d695 	.word	0x0001d695
   1d6bc:	20002a34 	.word	0x20002a34

0001d6c0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1d6c0:	4b01      	ldr	r3, [pc, #4]	; (1d6c8 <nrfx_clock_init+0x8>)
   1d6c2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1d6c4:	4801      	ldr	r0, [pc, #4]	; (1d6cc <nrfx_clock_init+0xc>)
   1d6c6:	4770      	bx	lr
   1d6c8:	20002a34 	.word	0x20002a34
   1d6cc:	0bad0000 	.word	0x0bad0000

0001d6d0 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1d6d0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d6d2:	4d1d      	ldr	r5, [pc, #116]	; (1d748 <timeslot_callback+0x78>)
   1d6d4:	f3bf 8f5b 	dmb	ish
   1d6d8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   1d6da:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1d6de:	bb84      	cbnz	r4, 1d742 <timeslot_callback+0x72>
		return NULL;
	}

	switch (signal) {
   1d6e0:	2906      	cmp	r1, #6
   1d6e2:	d804      	bhi.n	1d6ee <timeslot_callback+0x1e>
   1d6e4:	2904      	cmp	r1, #4
   1d6e6:	d822      	bhi.n	1d72e <timeslot_callback+0x5e>
   1d6e8:	b139      	cbz	r1, 1d6fa <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1d6ea:	4620      	mov	r0, r4
   1d6ec:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   1d6ee:	2907      	cmp	r1, #7
   1d6f0:	d1fb      	bne.n	1d6ea <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   1d6f2:	4628      	mov	r0, r5
   1d6f4:	f001 f8a2 	bl	1e83c <z_impl_k_sem_give>
}
   1d6f8:	e7f7      	b.n	1d6ea <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   1d6fa:	6a2b      	ldr	r3, [r5, #32]
   1d6fc:	e9d3 2000 	ldrd	r2, r0, [r3]
   1d700:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1d702:	2801      	cmp	r0, #1
   1d704:	d005      	beq.n	1d712 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   1d706:	462c      	mov	r4, r5
   1d708:	2302      	movs	r3, #2
   1d70a:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1d70e:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1d710:	e7eb      	b.n	1d6ea <timeslot_callback+0x1a>
			_context.timeslot_request.params.earliest.timeout_us =
   1d712:	f247 5330 	movw	r3, #30000	; 0x7530
   1d716:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   1d718:	2303      	movs	r3, #3
   1d71a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1d71e:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   1d722:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1d726:	63ab      	str	r3, [r5, #56]	; 0x38
   1d728:	f105 0434 	add.w	r4, r5, #52	; 0x34
   1d72c:	e7dd      	b.n	1d6ea <timeslot_callback+0x1a>
	_context.timeslot_request.params.earliest.timeout_us =
   1d72e:	4b07      	ldr	r3, [pc, #28]	; (1d74c <timeslot_callback+0x7c>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1d730:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1d732:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1d736:	f105 0124 	add.w	r1, r5, #36	; 0x24
	_context.timeslot_request.params.earliest.timeout_us =
   1d73a:	632b      	str	r3, [r5, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1d73c:	f7ef fab2 	bl	cca4 <mpsl_timeslot_request>
}
   1d740:	e7d3      	b.n	1d6ea <timeslot_callback+0x1a>
		return NULL;
   1d742:	2400      	movs	r4, #0
   1d744:	e7d1      	b.n	1d6ea <timeslot_callback+0x1a>
   1d746:	bf00      	nop
   1d748:	20002a38 	.word	0x20002a38
   1d74c:	0f423fff 	.word	0x0f423fff

0001d750 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d750:	4802      	ldr	r0, [pc, #8]	; (1d75c <nrf_flash_sync_init+0xc>)
   1d752:	2201      	movs	r2, #1
   1d754:	2100      	movs	r1, #0
   1d756:	f008 b96b 	b.w	25a30 <z_impl_k_sem_init>
   1d75a:	bf00      	nop
   1d75c:	20002a38 	.word	0x20002a38

0001d760 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1d760:	4b01      	ldr	r3, [pc, #4]	; (1d768 <nrf_flash_sync_set_context+0x8>)
   1d762:	61d8      	str	r0, [r3, #28]
}
   1d764:	4770      	bx	lr
   1d766:	bf00      	nop
   1d768:	20002a38 	.word	0x20002a38

0001d76c <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1d76c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1d76e:	4c33      	ldr	r4, [pc, #204]	; (1d83c <nrf_flash_sync_exe+0xd0>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d770:	f04f 31ff 	mov.w	r1, #4294967295
{
   1d774:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d776:	f04f 30ff 	mov.w	r0, #4294967295
   1d77a:	f7ff fbab 	bl	1ced4 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1d77e:	f104 0118 	add.w	r1, r4, #24
   1d782:	482f      	ldr	r0, [pc, #188]	; (1d840 <nrf_flash_sync_exe+0xd4>)
   1d784:	f7e2 fd78 	bl	278 <mpsl_timeslot_session_open>
   1d788:	4606      	mov	r6, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1d78a:	f7ff fbab 	bl	1cee4 <multithreading_lock_release>

	if (ret < 0) {
   1d78e:	2e00      	cmp	r6, #0
   1d790:	db50      	blt.n	1d834 <nrf_flash_sync_exe+0xc8>
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1d792:	f240 1301 	movw	r3, #257	; 0x101
   1d796:	8523      	strh	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1d798:	69e3      	ldr	r3, [r4, #28]
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;

	_context.op_desc = op_desc;
   1d79a:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1d79c:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1d79e:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   1d7a0:	f247 5330 	movw	r3, #30000	; 0x7530
   1d7a4:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1d7a6:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1d7a8:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1d7ac:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1d7b0:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d7b2:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1d7b6:	f3bf 8f5b 	dmb	ish
   1d7ba:	e855 3f00 	ldrex	r3, [r5]
   1d7be:	e845 2100 	strex	r1, r2, [r5]
   1d7c2:	2900      	cmp	r1, #0
   1d7c4:	d1f9      	bne.n	1d7ba <nrf_flash_sync_exe+0x4e>
   1d7c6:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d7ca:	f04f 31ff 	mov.w	r1, #4294967295
   1d7ce:	f04f 30ff 	mov.w	r0, #4294967295
   1d7d2:	f7ff fb7f 	bl	1ced4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   1d7d6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1d7da:	7e20      	ldrb	r0, [r4, #24]
   1d7dc:	f7ef fa62 	bl	cca4 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   1d7e0:	f7ff fb80 	bl	1cee4 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1d7e4:	4a17      	ldr	r2, [pc, #92]	; (1d844 <nrf_flash_sync_exe+0xd8>)
   1d7e6:	2300      	movs	r3, #0
   1d7e8:	4620      	mov	r0, r4
   1d7ea:	f001 f84d 	bl	1e888 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1d7ee:	2800      	cmp	r0, #0
   1d7f0:	da0a      	bge.n	1d808 <nrf_flash_sync_exe+0x9c>
   1d7f2:	f3bf 8f5b 	dmb	ish
   1d7f6:	2301      	movs	r3, #1
   1d7f8:	e855 2f00 	ldrex	r2, [r5]
   1d7fc:	e845 3100 	strex	r1, r3, [r5]
   1d800:	2900      	cmp	r1, #0
   1d802:	d1f9      	bne.n	1d7f8 <nrf_flash_sync_exe+0x8c>
   1d804:	f3bf 8f5b 	dmb	ish
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d808:	f04f 31ff 	mov.w	r1, #4294967295
   1d80c:	f04f 30ff 	mov.w	r0, #4294967295
   1d810:	f7ff fb60 	bl	1ced4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   1d814:	7e20      	ldrb	r0, [r4, #24]
   1d816:	f7ef fa80 	bl	cd1a <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1d81a:	f7ff fb63 	bl	1cee4 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d81e:	f3bf 8f5b 	dmb	ish
   1d822:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d824:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   1d828:	b113      	cbz	r3, 1d830 <nrf_flash_sync_exe+0xc4>
	z_impl_k_sem_reset(sem);
   1d82a:	4804      	ldr	r0, [pc, #16]	; (1d83c <nrf_flash_sync_exe+0xd0>)
   1d82c:	f001 f854 	bl	1e8d8 <z_impl_k_sem_reset>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   1d830:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   1d832:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1d834:	f06f 000b 	mvn.w	r0, #11
   1d838:	e7fb      	b.n	1d832 <nrf_flash_sync_exe+0xc6>
   1d83a:	bf00      	nop
   1d83c:	20002a38 	.word	0x20002a38
   1d840:	0001d6d1 	.word	0x0001d6d1
   1d844:	000b7b44 	.word	0x000b7b44

0001d848 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d848:	4b07      	ldr	r3, [pc, #28]	; (1d868 <nrf_flash_sync_check_time_limit+0x20>)
   1d84a:	2201      	movs	r2, #1
   1d84c:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1d84e:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1d852:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1d856:	4418      	add	r0, r3
   1d858:	4b04      	ldr	r3, [pc, #16]	; (1d86c <nrf_flash_sync_check_time_limit+0x24>)
   1d85a:	69db      	ldr	r3, [r3, #28]
}
   1d85c:	4298      	cmp	r0, r3
   1d85e:	bf34      	ite	cc
   1d860:	2000      	movcc	r0, #0
   1d862:	2001      	movcs	r0, #1
   1d864:	4770      	bx	lr
   1d866:	bf00      	nop
   1d868:	40008000 	.word	0x40008000
   1d86c:	20002a38 	.word	0x20002a38

0001d870 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1d870:	4a02      	ldr	r2, [pc, #8]	; (1d87c <nvmc_wait+0xc>)
   1d872:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1d876:	2b00      	cmp	r3, #0
   1d878:	d0fb      	beq.n	1d872 <nvmc_wait+0x2>
}
   1d87a:	4770      	bx	lr
   1d87c:	4001e000 	.word	0x4001e000

0001d880 <SystemInit>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1d884:	b510      	push	{r4, lr}
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1d886:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1d88a:	2a0d      	cmp	r2, #13
   1d88c:	d155      	bne.n	1d93a <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1d88e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1d892:	2200      	movs	r2, #0
   1d894:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1d898:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1d89c:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1d8a0:	4a48      	ldr	r2, [pc, #288]	; (1d9c4 <SystemInit+0x144>)
   1d8a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
   1d8a6:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1d8aa:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
   1d8ae:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1d8b2:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   1d8b6:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1d8ba:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   1d8be:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1d8c2:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
   1d8c6:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1d8ca:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
   1d8ce:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1d8d2:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
   1d8d6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1d8da:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
   1d8de:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1d8e2:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
   1d8e6:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1d8ea:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
   1d8ee:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1d8f2:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
   1d8f6:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1d8fa:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
   1d8fe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1d902:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
   1d906:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1d90a:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
   1d90e:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1d912:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
   1d916:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1d91a:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
   1d91e:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1d922:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1d926:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1d92a:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1d92e:	07db      	lsls	r3, r3, #31
   1d930:	d509      	bpl.n	1d946 <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1d932:	f06f 0301 	mvn.w	r3, #1
   1d936:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d93a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1d93e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1d942:	2b0d      	cmp	r3, #13
   1d944:	d10c      	bne.n	1d960 <SystemInit+0xe0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d946:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            {
                switch(var2)
   1d94a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1d94e:	b13b      	cbz	r3, 1d960 <SystemInit+0xe0>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1d950:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1d954:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1d958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d95c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1d960:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1d964:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1d968:	2a00      	cmp	r2, #0
   1d96a:	db03      	blt.n	1d974 <SystemInit+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1d96c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1d970:	2b00      	cmp	r3, #0
   1d972:	da22      	bge.n	1d9ba <SystemInit+0x13a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1d974:	4914      	ldr	r1, [pc, #80]	; (1d9c8 <SystemInit+0x148>)
   1d976:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1d978:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1d97c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1d980:	2412      	movs	r4, #18
    nvmc_wait();
   1d982:	f7ff ff75 	bl	1d870 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1d986:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1d98a:	f7ff ff71 	bl	1d870 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1d98e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1d992:	f7ff ff6d 	bl	1d870 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1d996:	2300      	movs	r3, #0
   1d998:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1d99c:	f7ff ff68 	bl	1d870 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1d9a0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1d9a4:	4909      	ldr	r1, [pc, #36]	; (1d9cc <SystemInit+0x14c>)
   1d9a6:	4b0a      	ldr	r3, [pc, #40]	; (1d9d0 <SystemInit+0x150>)
   1d9a8:	68ca      	ldr	r2, [r1, #12]
   1d9aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d9ae:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1d9b0:	60cb      	str	r3, [r1, #12]
   1d9b2:	f3bf 8f4f 	dsb	sy
    __NOP();
   1d9b6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1d9b8:	e7fd      	b.n	1d9b6 <SystemInit+0x136>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1d9ba:	4b06      	ldr	r3, [pc, #24]	; (1d9d4 <SystemInit+0x154>)
   1d9bc:	4a06      	ldr	r2, [pc, #24]	; (1d9d8 <SystemInit+0x158>)
   1d9be:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1d9c0:	bd10      	pop	{r4, pc}
   1d9c2:	bf00      	nop
   1d9c4:	4000c000 	.word	0x4000c000
   1d9c8:	4001e000 	.word	0x4001e000
   1d9cc:	e000ed00 	.word	0xe000ed00
   1d9d0:	05fa0004 	.word	0x05fa0004
   1d9d4:	20000a44 	.word	0x20000a44
   1d9d8:	03d09000 	.word	0x03d09000

0001d9dc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1d9dc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d9de:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1d9e0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1d9e2:	fab2 f382 	clz	r3, r2
   1d9e6:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1d9ea:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1d9ec:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1d9ee:	d014      	beq.n	1da1a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d9f0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d9f4:	fa05 f303 	lsl.w	r3, r5, r3
   1d9f8:	ea22 0303 	bic.w	r3, r2, r3
   1d9fc:	e850 6f00 	ldrex	r6, [r0]
   1da00:	4296      	cmp	r6, r2
   1da02:	d104      	bne.n	1da0e <nrfx_flag32_alloc+0x32>
   1da04:	e840 3c00 	strex	ip, r3, [r0]
   1da08:	f1bc 0f00 	cmp.w	ip, #0
   1da0c:	d1f6      	bne.n	1d9fc <nrfx_flag32_alloc+0x20>
   1da0e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1da12:	d1e5      	bne.n	1d9e0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1da14:	4802      	ldr	r0, [pc, #8]	; (1da20 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1da16:	700c      	strb	r4, [r1, #0]
}
   1da18:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1da1a:	4802      	ldr	r0, [pc, #8]	; (1da24 <nrfx_flag32_alloc+0x48>)
   1da1c:	e7fc      	b.n	1da18 <nrfx_flag32_alloc+0x3c>
   1da1e:	bf00      	nop
   1da20:	0bad0000 	.word	0x0bad0000
   1da24:	0bad0002 	.word	0x0bad0002

0001da28 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1da28:	6803      	ldr	r3, [r0, #0]
   1da2a:	40cb      	lsrs	r3, r1
   1da2c:	07db      	lsls	r3, r3, #31
{
   1da2e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1da30:	d415      	bmi.n	1da5e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1da32:	2301      	movs	r3, #1
   1da34:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1da38:	6803      	ldr	r3, [r0, #0]
   1da3a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1da3e:	ea41 0203 	orr.w	r2, r1, r3
   1da42:	e850 4f00 	ldrex	r4, [r0]
   1da46:	429c      	cmp	r4, r3
   1da48:	d104      	bne.n	1da54 <nrfx_flag32_free+0x2c>
   1da4a:	e840 2c00 	strex	ip, r2, [r0]
   1da4e:	f1bc 0f00 	cmp.w	ip, #0
   1da52:	d1f6      	bne.n	1da42 <nrfx_flag32_free+0x1a>
   1da54:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1da58:	d1ee      	bne.n	1da38 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1da5a:	4802      	ldr	r0, [pc, #8]	; (1da64 <nrfx_flag32_free+0x3c>)
}
   1da5c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1da5e:	4802      	ldr	r0, [pc, #8]	; (1da68 <nrfx_flag32_free+0x40>)
   1da60:	e7fc      	b.n	1da5c <nrfx_flag32_free+0x34>
   1da62:	bf00      	nop
   1da64:	0bad0000 	.word	0x0bad0000
   1da68:	0bad0004 	.word	0x0bad0004

0001da6c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1da6c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1da6e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1da72:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1da74:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1da76:	6002      	str	r2, [r0, #0]
}
   1da78:	4802      	ldr	r0, [pc, #8]	; (1da84 <nrf_gpio_pin_port_decode+0x18>)
   1da7a:	bf18      	it	ne
   1da7c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1da80:	4770      	bx	lr
   1da82:	bf00      	nop
   1da84:	50000300 	.word	0x50000300

0001da88 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1da88:	4b03      	ldr	r3, [pc, #12]	; (1da98 <pin_in_use_by_te+0x10>)
   1da8a:	3008      	adds	r0, #8
   1da8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1da90:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1da94:	4770      	bx	lr
   1da96:	bf00      	nop
   1da98:	20000a48 	.word	0x20000a48

0001da9c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1da9c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1da9e:	f100 0308 	add.w	r3, r0, #8
   1daa2:	4c0c      	ldr	r4, [pc, #48]	; (1dad4 <call_handler+0x38>)
   1daa4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1daa8:	05da      	lsls	r2, r3, #23
{
   1daaa:	4605      	mov	r5, r0
   1daac:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1daae:	d507      	bpl.n	1dac0 <call_handler+0x24>
   1dab0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1dab4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1dab8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1dabc:	6852      	ldr	r2, [r2, #4]
   1dabe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1dac0:	68a3      	ldr	r3, [r4, #8]
   1dac2:	b12b      	cbz	r3, 1dad0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1dac4:	68e2      	ldr	r2, [r4, #12]
   1dac6:	4631      	mov	r1, r6
   1dac8:	4628      	mov	r0, r5
    }
}
   1daca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1dace:	4718      	bx	r3
}
   1dad0:	bd70      	pop	{r4, r5, r6, pc}
   1dad2:	bf00      	nop
   1dad4:	20000a48 	.word	0x20000a48

0001dad8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1dad8:	4a12      	ldr	r2, [pc, #72]	; (1db24 <release_handler+0x4c>)
   1dada:	3008      	adds	r0, #8
{
   1dadc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1dade:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1dae2:	05d9      	lsls	r1, r3, #23
   1dae4:	d51b      	bpl.n	1db1e <release_handler+0x46>
   1dae6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1daea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1daee:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1daf2:	f102 0410 	add.w	r4, r2, #16
   1daf6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1daf8:	f834 3b02 	ldrh.w	r3, [r4], #2
   1dafc:	f413 7f80 	tst.w	r3, #256	; 0x100
   1db00:	d003      	beq.n	1db0a <release_handler+0x32>
   1db02:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1db06:	4299      	cmp	r1, r3
   1db08:	d009      	beq.n	1db1e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1db0a:	3001      	adds	r0, #1
   1db0c:	282a      	cmp	r0, #42	; 0x2a
   1db0e:	d1f3      	bne.n	1daf8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1db10:	2300      	movs	r3, #0
   1db12:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1db16:	4804      	ldr	r0, [pc, #16]	; (1db28 <release_handler+0x50>)
}
   1db18:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1db1a:	f7ff bf85 	b.w	1da28 <nrfx_flag32_free>
}
   1db1e:	bc10      	pop	{r4}
   1db20:	4770      	bx	lr
   1db22:	bf00      	nop
   1db24:	20000a48 	.word	0x20000a48
   1db28:	20000ab0 	.word	0x20000ab0

0001db2c <pin_handler_trigger_uninit>:
{
   1db2c:	b538      	push	{r3, r4, r5, lr}
   1db2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1db30:	f7ff ffaa 	bl	1da88 <pin_in_use_by_te>
   1db34:	4c09      	ldr	r4, [pc, #36]	; (1db5c <pin_handler_trigger_uninit+0x30>)
   1db36:	f102 0508 	add.w	r5, r2, #8
   1db3a:	b140      	cbz	r0, 1db4e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1db3c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1db40:	4907      	ldr	r1, [pc, #28]	; (1db60 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1db42:	0b5b      	lsrs	r3, r3, #13
   1db44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1db48:	2000      	movs	r0, #0
   1db4a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1db4e:	4610      	mov	r0, r2
   1db50:	f7ff ffc2 	bl	1dad8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1db54:	2300      	movs	r3, #0
   1db56:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1db5a:	bd38      	pop	{r3, r4, r5, pc}
   1db5c:	20000a48 	.word	0x20000a48
   1db60:	40006000 	.word	0x40006000

0001db64 <nrfx_gpiote_input_configure>:
{
   1db64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1db68:	4604      	mov	r4, r0
   1db6a:	4617      	mov	r7, r2
   1db6c:	461d      	mov	r5, r3
    if (p_input_config)
   1db6e:	b321      	cbz	r1, 1dbba <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1db70:	4e4e      	ldr	r6, [pc, #312]	; (1dcac <nrfx_gpiote_input_configure+0x148>)
   1db72:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1db76:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1db7a:	079b      	lsls	r3, r3, #30
   1db7c:	d506      	bpl.n	1db8c <nrfx_gpiote_input_configure+0x28>
   1db7e:	f7ff ff83 	bl	1da88 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   1db82:	b118      	cbz	r0, 1db8c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   1db84:	484a      	ldr	r0, [pc, #296]	; (1dcb0 <nrfx_gpiote_input_configure+0x14c>)
}
   1db86:	b004      	add	sp, #16
   1db88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1db8c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1db8e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1db92:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1db96:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1db9a:	f10d 020f 	add.w	r2, sp, #15
   1db9e:	460b      	mov	r3, r1
   1dba0:	4620      	mov	r0, r4
   1dba2:	f10d 010e 	add.w	r1, sp, #14
   1dba6:	f007 fd3c 	bl	25622 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1dbaa:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1dbae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1dbb2:	f043 0301 	orr.w	r3, r3, #1
   1dbb6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   1dbba:	b197      	cbz	r7, 1dbe2 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1dbbc:	4b3b      	ldr	r3, [pc, #236]	; (1dcac <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1dbbe:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1dbc0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1dbc2:	f104 0008 	add.w	r0, r4, #8
   1dbc6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   1dbca:	078f      	lsls	r7, r1, #30
   1dbcc:	d50c      	bpl.n	1dbe8 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   1dbce:	2a00      	cmp	r2, #0
   1dbd0:	d1d8      	bne.n	1db84 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1dbd2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1dbd6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1dbda:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1dbde:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   1dbe2:	bbcd      	cbnz	r5, 1dc58 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   1dbe4:	4833      	ldr	r0, [pc, #204]	; (1dcb4 <nrfx_gpiote_input_configure+0x150>)
   1dbe6:	e7ce      	b.n	1db86 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1dbe8:	f021 0120 	bic.w	r1, r1, #32
   1dbec:	04c9      	lsls	r1, r1, #19
   1dbee:	0cc9      	lsrs	r1, r1, #19
   1dbf0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   1dbf4:	2a00      	cmp	r2, #0
   1dbf6:	d0ec      	beq.n	1dbd2 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   1dbf8:	2e03      	cmp	r6, #3
   1dbfa:	d8c3      	bhi.n	1db84 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1dbfc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1dbfe:	b92e      	cbnz	r6, 1dc0c <nrfx_gpiote_input_configure+0xa8>
   1dc00:	4a2d      	ldr	r2, [pc, #180]	; (1dcb8 <nrfx_gpiote_input_configure+0x154>)
   1dc02:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1dc06:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1dc0a:	e7e2      	b.n	1dbd2 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1dc0c:	00ba      	lsls	r2, r7, #2
   1dc0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1dc12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1dc16:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1dc1a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1dc1e:	f02c 0c03 	bic.w	ip, ip, #3
   1dc22:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1dc26:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1dc2a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1dc2e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1dc32:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dc36:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1dc3a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1dc3e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   1dc42:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1dc46:	ea4c 0c0e 	orr.w	ip, ip, lr
   1dc4a:	f041 0120 	orr.w	r1, r1, #32
   1dc4e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1dc52:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1dc56:	e7bc      	b.n	1dbd2 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1dc58:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1dc5c:	4620      	mov	r0, r4
   1dc5e:	f7ff ff3b 	bl	1dad8 <release_handler>
    if (!handler)
   1dc62:	2e00      	cmp	r6, #0
   1dc64:	d0be      	beq.n	1dbe4 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1dc66:	4d11      	ldr	r5, [pc, #68]	; (1dcac <nrfx_gpiote_input_configure+0x148>)
   1dc68:	682b      	ldr	r3, [r5, #0]
   1dc6a:	429e      	cmp	r6, r3
   1dc6c:	d104      	bne.n	1dc78 <nrfx_gpiote_input_configure+0x114>
   1dc6e:	686b      	ldr	r3, [r5, #4]
   1dc70:	429f      	cmp	r7, r3
   1dc72:	d101      	bne.n	1dc78 <nrfx_gpiote_input_configure+0x114>
   1dc74:	2200      	movs	r2, #0
   1dc76:	e00a      	b.n	1dc8e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1dc78:	4810      	ldr	r0, [pc, #64]	; (1dcbc <nrfx_gpiote_input_configure+0x158>)
   1dc7a:	f10d 010f 	add.w	r1, sp, #15
   1dc7e:	f7ff fead 	bl	1d9dc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1dc82:	4b0c      	ldr	r3, [pc, #48]	; (1dcb4 <nrfx_gpiote_input_configure+0x150>)
   1dc84:	4298      	cmp	r0, r3
   1dc86:	f47f af7e 	bne.w	1db86 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   1dc8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1dc8e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1dc92:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1dc96:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1dc98:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1dc9a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1dc9e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1dca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1dca6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1dcaa:	e79b      	b.n	1dbe4 <nrfx_gpiote_input_configure+0x80>
   1dcac:	20000a48 	.word	0x20000a48
   1dcb0:	0bad0004 	.word	0x0bad0004
   1dcb4:	0bad0000 	.word	0x0bad0000
   1dcb8:	40006000 	.word	0x40006000
   1dcbc:	20000ab0 	.word	0x20000ab0

0001dcc0 <nrfx_gpiote_output_configure>:
{
   1dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcc2:	4604      	mov	r4, r0
   1dcc4:	b085      	sub	sp, #20
   1dcc6:	4615      	mov	r5, r2
    if (p_config)
   1dcc8:	b319      	cbz	r1, 1dd12 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1dcca:	4e33      	ldr	r6, [pc, #204]	; (1dd98 <nrfx_gpiote_output_configure+0xd8>)
   1dccc:	f100 0708 	add.w	r7, r0, #8
   1dcd0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1dcd4:	0793      	lsls	r3, r2, #30
   1dcd6:	d403      	bmi.n	1dce0 <nrfx_gpiote_output_configure+0x20>
   1dcd8:	f7ff fed6 	bl	1da88 <pin_in_use_by_te>
   1dcdc:	2800      	cmp	r0, #0
   1dcde:	d158      	bne.n	1dd92 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1dce0:	f012 0f1c 	tst.w	r2, #28
   1dce4:	d002      	beq.n	1dcec <nrfx_gpiote_output_configure+0x2c>
   1dce6:	784b      	ldrb	r3, [r1, #1]
   1dce8:	2b01      	cmp	r3, #1
   1dcea:	d052      	beq.n	1dd92 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1dcec:	2301      	movs	r3, #1
   1dcee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1dcf2:	2300      	movs	r3, #0
   1dcf4:	e9cd 1300 	strd	r1, r3, [sp]
   1dcf8:	1c4a      	adds	r2, r1, #1
   1dcfa:	1c8b      	adds	r3, r1, #2
   1dcfc:	4620      	mov	r0, r4
   1dcfe:	f10d 010f 	add.w	r1, sp, #15
   1dd02:	f007 fc8e 	bl	25622 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1dd06:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1dd0a:	f043 0303 	orr.w	r3, r3, #3
   1dd0e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1dd12:	b915      	cbnz	r5, 1dd1a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1dd14:	4821      	ldr	r0, [pc, #132]	; (1dd9c <nrfx_gpiote_output_configure+0xdc>)
}
   1dd16:	b005      	add	sp, #20
   1dd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1dd1a:	4e1f      	ldr	r6, [pc, #124]	; (1dd98 <nrfx_gpiote_output_configure+0xd8>)
   1dd1c:	f104 0708 	add.w	r7, r4, #8
   1dd20:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1dd24:	0783      	lsls	r3, r0, #30
   1dd26:	d534      	bpl.n	1dd92 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1dd28:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1dd2c:	4661      	mov	r1, ip
   1dd2e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1dd30:	f020 0020 	bic.w	r0, r0, #32
   1dd34:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1dd38:	04c0      	lsls	r0, r0, #19
   1dd3a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1dd3e:	0cc0      	lsrs	r0, r0, #19
   1dd40:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1dd44:	2300      	movs	r3, #0
   1dd46:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1dd4a:	786a      	ldrb	r2, [r5, #1]
   1dd4c:	2a00      	cmp	r2, #0
   1dd4e:	d0e1      	beq.n	1dd14 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1dd50:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1dd54:	78ad      	ldrb	r5, [r5, #2]
   1dd56:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1dd5a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1dd5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dd62:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1dd66:	0223      	lsls	r3, r4, #8
   1dd68:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1dd6c:	0412      	lsls	r2, r2, #16
   1dd6e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dd72:	ea43 030e 	orr.w	r3, r3, lr
   1dd76:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1dd78:	052a      	lsls	r2, r5, #20
   1dd7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1dd7e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dd82:	4313      	orrs	r3, r2
   1dd84:	f040 0020 	orr.w	r0, r0, #32
   1dd88:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1dd8c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1dd90:	e7c0      	b.n	1dd14 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   1dd92:	4803      	ldr	r0, [pc, #12]	; (1dda0 <nrfx_gpiote_output_configure+0xe0>)
   1dd94:	e7bf      	b.n	1dd16 <nrfx_gpiote_output_configure+0x56>
   1dd96:	bf00      	nop
   1dd98:	20000a48 	.word	0x20000a48
   1dd9c:	0bad0000 	.word	0x0bad0000
   1dda0:	0bad0004 	.word	0x0bad0004

0001dda4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1dda4:	4b01      	ldr	r3, [pc, #4]	; (1ddac <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1dda6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1ddaa:	4770      	bx	lr
   1ddac:	20000a48 	.word	0x20000a48

0001ddb0 <nrfx_gpiote_channel_get>:
{
   1ddb0:	b508      	push	{r3, lr}
   1ddb2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1ddb4:	f7ff fe68 	bl	1da88 <pin_in_use_by_te>
   1ddb8:	b138      	cbz	r0, 1ddca <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ddba:	4b05      	ldr	r3, [pc, #20]	; (1ddd0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1ddbc:	4805      	ldr	r0, [pc, #20]	; (1ddd4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ddbe:	3208      	adds	r2, #8
   1ddc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1ddc4:	0b5b      	lsrs	r3, r3, #13
   1ddc6:	700b      	strb	r3, [r1, #0]
}
   1ddc8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ddca:	4803      	ldr	r0, [pc, #12]	; (1ddd8 <nrfx_gpiote_channel_get+0x28>)
   1ddcc:	e7fc      	b.n	1ddc8 <nrfx_gpiote_channel_get+0x18>
   1ddce:	bf00      	nop
   1ddd0:	20000a48 	.word	0x20000a48
   1ddd4:	0bad0000 	.word	0x0bad0000
   1ddd8:	0bad0004 	.word	0x0bad0004

0001dddc <nrfx_gpiote_init>:
{
   1dddc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ddde:	4c0f      	ldr	r4, [pc, #60]	; (1de1c <nrfx_gpiote_init+0x40>)
   1dde0:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
   1dde4:	b9bd      	cbnz	r5, 1de16 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1dde6:	2254      	movs	r2, #84	; 0x54
   1dde8:	4629      	mov	r1, r5
   1ddea:	f104 0010 	add.w	r0, r4, #16
   1ddee:	f003 fe0e 	bl	21a0e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ddf2:	2006      	movs	r0, #6
   1ddf4:	f7f4 fbb2 	bl	1255c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ddf8:	4b09      	ldr	r3, [pc, #36]	; (1de20 <nrfx_gpiote_init+0x44>)
    return err_code;
   1ddfa:	480a      	ldr	r0, [pc, #40]	; (1de24 <nrfx_gpiote_init+0x48>)
   1ddfc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1de00:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1de04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1de08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1de0c:	2301      	movs	r3, #1
   1de0e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1de12:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1de14:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1de16:	4804      	ldr	r0, [pc, #16]	; (1de28 <nrfx_gpiote_init+0x4c>)
   1de18:	e7fc      	b.n	1de14 <nrfx_gpiote_init+0x38>
   1de1a:	bf00      	nop
   1de1c:	20000a48 	.word	0x20000a48
   1de20:	40006000 	.word	0x40006000
   1de24:	0bad0000 	.word	0x0bad0000
   1de28:	0bad0005 	.word	0x0bad0005

0001de2c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1de2c:	4b03      	ldr	r3, [pc, #12]	; (1de3c <nrfx_gpiote_is_init+0x10>)
   1de2e:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   1de32:	3800      	subs	r0, #0
   1de34:	bf18      	it	ne
   1de36:	2001      	movne	r0, #1
   1de38:	4770      	bx	lr
   1de3a:	bf00      	nop
   1de3c:	20000a48 	.word	0x20000a48

0001de40 <nrfx_gpiote_channel_free>:
{
   1de40:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1de42:	4801      	ldr	r0, [pc, #4]	; (1de48 <nrfx_gpiote_channel_free+0x8>)
   1de44:	f7ff bdf0 	b.w	1da28 <nrfx_flag32_free>
   1de48:	20000aac 	.word	0x20000aac

0001de4c <nrfx_gpiote_channel_alloc>:
{
   1de4c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1de4e:	4801      	ldr	r0, [pc, #4]	; (1de54 <nrfx_gpiote_channel_alloc+0x8>)
   1de50:	f7ff bdc4 	b.w	1d9dc <nrfx_flag32_alloc>
   1de54:	20000aac 	.word	0x20000aac

0001de58 <nrfx_gpiote_trigger_enable>:
{
   1de58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1de5a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1de5c:	f7ff fe14 	bl	1da88 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1de60:	f104 0208 	add.w	r2, r4, #8
   1de64:	4b1e      	ldr	r3, [pc, #120]	; (1dee0 <nrfx_gpiote_trigger_enable+0x88>)
   1de66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1de6a:	b1e8      	cbz	r0, 1dea8 <nrfx_gpiote_trigger_enable+0x50>
   1de6c:	f013 0502 	ands.w	r5, r3, #2
   1de70:	d11a      	bne.n	1dea8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1de72:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1de74:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1de76:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1de7a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1de7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1de82:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1de86:	6005      	str	r5, [r0, #0]
   1de88:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1de8a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1de8e:	f040 0001 	orr.w	r0, r0, #1
   1de92:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1de96:	b129      	cbz	r1, 1dea4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1de98:	2201      	movs	r2, #1
   1de9a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1de9e:	4a11      	ldr	r2, [pc, #68]	; (1dee4 <nrfx_gpiote_trigger_enable+0x8c>)
   1dea0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1dea4:	b003      	add	sp, #12
   1dea6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1dea8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1deac:	2b04      	cmp	r3, #4
   1deae:	d012      	beq.n	1ded6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1deb0:	2b05      	cmp	r3, #5
   1deb2:	d012      	beq.n	1deda <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1deb4:	a801      	add	r0, sp, #4
   1deb6:	9401      	str	r4, [sp, #4]
   1deb8:	f7ff fdd8 	bl	1da6c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1debc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1debe:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1dec2:	40d9      	lsrs	r1, r3
   1dec4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1dec8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1deca:	4620      	mov	r0, r4
}
   1decc:	b003      	add	sp, #12
   1dece:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1ded2:	f007 bbed 	b.w	256b0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1ded6:	2103      	movs	r1, #3
   1ded8:	e7f7      	b.n	1deca <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1deda:	2102      	movs	r1, #2
   1dedc:	e7f5      	b.n	1deca <nrfx_gpiote_trigger_enable+0x72>
   1dede:	bf00      	nop
   1dee0:	20000a48 	.word	0x20000a48
   1dee4:	40006000 	.word	0x40006000

0001dee8 <nrfx_gpiote_trigger_disable>:
{
   1dee8:	b508      	push	{r3, lr}
   1deea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1deec:	f7ff fdcc 	bl	1da88 <pin_in_use_by_te>
   1def0:	b1c0      	cbz	r0, 1df24 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1def2:	f102 0108 	add.w	r1, r2, #8
   1def6:	4b0e      	ldr	r3, [pc, #56]	; (1df30 <nrfx_gpiote_trigger_disable+0x48>)
   1def8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1defc:	0799      	lsls	r1, r3, #30
   1defe:	d411      	bmi.n	1df24 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1df00:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1df02:	2201      	movs	r2, #1
   1df04:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1df06:	009b      	lsls	r3, r3, #2
   1df08:	490a      	ldr	r1, [pc, #40]	; (1df34 <nrfx_gpiote_trigger_disable+0x4c>)
   1df0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1df0e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1df12:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1df16:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1df1a:	f022 0203 	bic.w	r2, r2, #3
   1df1e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1df22:	bd08      	pop	{r3, pc}
   1df24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1df28:	2100      	movs	r1, #0
   1df2a:	4610      	mov	r0, r2
   1df2c:	f007 bbc0 	b.w	256b0 <nrf_gpio_cfg_sense_set>
   1df30:	20000a48 	.word	0x20000a48
   1df34:	40006000 	.word	0x40006000

0001df38 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1df38:	4b0e      	ldr	r3, [pc, #56]	; (1df74 <nrfx_gpiote_pin_uninit+0x3c>)
   1df3a:	f100 0208 	add.w	r2, r0, #8
{
   1df3e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1df40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1df44:	07db      	lsls	r3, r3, #31
{
   1df46:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1df48:	d511      	bpl.n	1df6e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1df4a:	f7ff ffcd 	bl	1dee8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1df4e:	4620      	mov	r0, r4
   1df50:	f7ff fdec 	bl	1db2c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1df54:	a801      	add	r0, sp, #4
   1df56:	9401      	str	r4, [sp, #4]
   1df58:	f7ff fd88 	bl	1da6c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1df5c:	9b01      	ldr	r3, [sp, #4]
   1df5e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1df62:	2202      	movs	r2, #2
   1df64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1df68:	4803      	ldr	r0, [pc, #12]	; (1df78 <nrfx_gpiote_pin_uninit+0x40>)
}
   1df6a:	b002      	add	sp, #8
   1df6c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1df6e:	4803      	ldr	r0, [pc, #12]	; (1df7c <nrfx_gpiote_pin_uninit+0x44>)
   1df70:	e7fb      	b.n	1df6a <nrfx_gpiote_pin_uninit+0x32>
   1df72:	bf00      	nop
   1df74:	20000a48 	.word	0x20000a48
   1df78:	0bad0000 	.word	0x0bad0000
   1df7c:	0bad0004 	.word	0x0bad0004

0001df80 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df84:	4b64      	ldr	r3, [pc, #400]	; (1e118 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1df86:	4865      	ldr	r0, [pc, #404]	; (1e11c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1df88:	4965      	ldr	r1, [pc, #404]	; (1e120 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   1df8a:	2600      	movs	r6, #0
{
   1df8c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1df8e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1df90:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df92:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1df94:	b135      	cbz	r5, 1dfa4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1df96:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1df9a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1df9c:	bf1e      	ittt	ne
   1df9e:	601c      	strne	r4, [r3, #0]
   1dfa0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1dfa2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1dfa4:	3304      	adds	r3, #4
   1dfa6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1dfa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1dfac:	d1f1      	bne.n	1df92 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dfae:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1e11c <nrfx_gpiote_irq_handler+0x19c>
   1dfb2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1dfb6:	2b00      	cmp	r3, #0
   1dfb8:	f000 8091 	beq.w	1e0de <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   1dfbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1dfc0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1dfc4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1dfc6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1dfca:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1dfce:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1dfd0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1dfd4:	2700      	movs	r7, #0
            while (latch[i])
   1dfd6:	f10d 0910 	add.w	r9, sp, #16
   1dfda:	017b      	lsls	r3, r7, #5
   1dfdc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1dfde:	f04f 0a01 	mov.w	sl, #1
   1dfe2:	e049      	b.n	1e078 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   1dfe4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1dfe6:	4a4f      	ldr	r2, [pc, #316]	; (1e124 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1dfe8:	fa94 f4a4 	rbit	r4, r4
   1dfec:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1dff0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1dff2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1dff6:	08e0      	lsrs	r0, r4, #3
   1dff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1dffc:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1dffe:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1e002:	fa0a fc02 	lsl.w	ip, sl, r2
   1e006:	f819 2000 	ldrb.w	r2, [r9, r0]
   1e00a:	ea22 020c 	bic.w	r2, r2, ip
   1e00e:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e012:	a803      	add	r0, sp, #12
   1e014:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1e018:	0899      	lsrs	r1, r3, #2
   1e01a:	f7ff fd27 	bl	1da6c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e01e:	9a03      	ldr	r2, [sp, #12]
   1e020:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   1e024:	074b      	lsls	r3, r1, #29
   1e026:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e02a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1e02c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1e030:	d529      	bpl.n	1e086 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1e032:	4620      	mov	r0, r4
   1e034:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e036:	b2d5      	uxtb	r5, r2
   1e038:	f7ff fd30 	bl	1da9c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e03c:	a803      	add	r0, sp, #12
   1e03e:	9403      	str	r4, [sp, #12]
   1e040:	f7ff fd14 	bl	1da6c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e044:	9b03      	ldr	r3, [sp, #12]
   1e046:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e04a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1e04e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1e052:	429d      	cmp	r5, r3
   1e054:	d107      	bne.n	1e066 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e056:	2100      	movs	r1, #0
   1e058:	4620      	mov	r0, r4
   1e05a:	f007 fb29 	bl	256b0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1e05e:	4629      	mov	r1, r5
   1e060:	4620      	mov	r0, r4
   1e062:	f007 fb25 	bl	256b0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e066:	a803      	add	r0, sp, #12
   1e068:	9403      	str	r4, [sp, #12]
   1e06a:	f7ff fcff 	bl	1da6c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1e06e:	9b03      	ldr	r3, [sp, #12]
   1e070:	fa0a f303 	lsl.w	r3, sl, r3
   1e074:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1e078:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   1e07c:	2c00      	cmp	r4, #0
   1e07e:	d1b1      	bne.n	1dfe4 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1e080:	b9cf      	cbnz	r7, 1e0b6 <nrfx_gpiote_irq_handler+0x136>
   1e082:	2701      	movs	r7, #1
   1e084:	e7a9      	b.n	1dfda <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1e086:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1e088:	bf0c      	ite	eq
   1e08a:	2103      	moveq	r1, #3
   1e08c:	2102      	movne	r1, #2
   1e08e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1e090:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1e092:	f007 fb0d 	bl	256b0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1e096:	2d03      	cmp	r5, #3
   1e098:	d004      	beq.n	1e0a4 <nrfx_gpiote_irq_handler+0x124>
   1e09a:	9a01      	ldr	r2, [sp, #4]
   1e09c:	2a02      	cmp	r2, #2
   1e09e:	d106      	bne.n	1e0ae <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1e0a0:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1e0a2:	d1e0      	bne.n	1e066 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1e0a4:	4659      	mov	r1, fp
   1e0a6:	4620      	mov	r0, r4
   1e0a8:	f7ff fcf8 	bl	1da9c <call_handler>
   1e0ac:	e7db      	b.n	1e066 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1e0ae:	2a03      	cmp	r2, #3
   1e0b0:	d1d9      	bne.n	1e066 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1e0b2:	2d02      	cmp	r5, #2
   1e0b4:	e7f5      	b.n	1e0a2 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e0b6:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1e0ba:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1e0be:	491a      	ldr	r1, [pc, #104]	; (1e128 <nrfx_gpiote_irq_handler+0x1a8>)
   1e0c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e0c4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1e0c8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1e0ca:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1e0ce:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1e0d2:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1e0d4:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1e0d8:	4313      	orrs	r3, r2
   1e0da:	f47f af7b 	bne.w	1dfd4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1e0de:	2401      	movs	r4, #1
    while (mask)
   1e0e0:	b916      	cbnz	r6, 1e0e8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1e0e2:	b007      	add	sp, #28
   1e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1e0e8:	fa96 f3a6 	rbit	r3, r6
   1e0ec:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1e0f0:	fa04 f203 	lsl.w	r2, r4, r3
   1e0f4:	009b      	lsls	r3, r3, #2
   1e0f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e0fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1e0fe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e102:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1e106:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1e10a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1e10e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1e112:	f7ff fcc3 	bl	1da9c <call_handler>
   1e116:	e7e3      	b.n	1e0e0 <nrfx_gpiote_irq_handler+0x160>
   1e118:	40006100 	.word	0x40006100
   1e11c:	40006000 	.word	0x40006000
   1e120:	40006120 	.word	0x40006120
   1e124:	20000a48 	.word	0x20000a48
   1e128:	50000300 	.word	0x50000300

0001e12c <nvmc_word_write>:
   1e12c:	4a04      	ldr	r2, [pc, #16]	; (1e140 <nvmc_word_write+0x14>)
   1e12e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e132:	07db      	lsls	r3, r3, #31
   1e134:	d5fb      	bpl.n	1e12e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1e136:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1e138:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1e13c:	4770      	bx	lr
   1e13e:	bf00      	nop
   1e140:	4001e000 	.word	0x4001e000

0001e144 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1e144:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e148:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1e14a:	fbb0 f3f2 	udiv	r3, r0, r2
   1e14e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1e152:	b973      	cbnz	r3, 1e172 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1e154:	4b08      	ldr	r3, [pc, #32]	; (1e178 <nrfx_nvmc_page_erase+0x34>)
   1e156:	2202      	movs	r2, #2
   1e158:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1e15c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e160:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e164:	07d2      	lsls	r2, r2, #31
   1e166:	d5fb      	bpl.n	1e160 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1e168:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1e16a:	4804      	ldr	r0, [pc, #16]	; (1e17c <nrfx_nvmc_page_erase+0x38>)
   1e16c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1e170:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1e172:	4803      	ldr	r0, [pc, #12]	; (1e180 <nrfx_nvmc_page_erase+0x3c>)
}
   1e174:	4770      	bx	lr
   1e176:	bf00      	nop
   1e178:	4001e000 	.word	0x4001e000
   1e17c:	0bad0000 	.word	0x0bad0000
   1e180:	0bad000a 	.word	0x0bad000a

0001e184 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1e184:	b510      	push	{r4, lr}
   1e186:	4c05      	ldr	r4, [pc, #20]	; (1e19c <nrfx_nvmc_word_write+0x18>)
   1e188:	2301      	movs	r3, #1
   1e18a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1e18e:	f7ff ffcd 	bl	1e12c <nvmc_word_write>
   1e192:	2300      	movs	r3, #0
   1e194:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1e198:	bd10      	pop	{r4, pc}
   1e19a:	bf00      	nop
   1e19c:	4001e000 	.word	0x4001e000

0001e1a0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1e1a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1e1a2:	4801      	ldr	r0, [pc, #4]	; (1e1a8 <nrfx_ppi_channel_alloc+0x8>)
   1e1a4:	f7ff bc1a 	b.w	1d9dc <nrfx_flag32_alloc>
   1e1a8:	20000ab8 	.word	0x20000ab8

0001e1ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1e1ac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1e1ae:	4c14      	ldr	r4, [pc, #80]	; (1e200 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1e1b0:	4a14      	ldr	r2, [pc, #80]	; (1e204 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1e1b2:	4915      	ldr	r1, [pc, #84]	; (1e208 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1e1b4:	2303      	movs	r3, #3
   1e1b6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1e1b8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1e1ba:	4b14      	ldr	r3, [pc, #80]	; (1e20c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1e1bc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1e1be:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1e1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e1c4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1e1c6:	2300      	movs	r3, #0
   1e1c8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1e1ca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1e1cc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1e1ce:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1e1d0:	4a0f      	ldr	r2, [pc, #60]	; (1e210 <_DoInit+0x64>)
   1e1d2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1e1d4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1e1d6:	2210      	movs	r2, #16
   1e1d8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1e1da:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1e1dc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1e1de:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1e1e0:	f003 fbc2 	bl	21968 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1e1e4:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1e1e8:	490a      	ldr	r1, [pc, #40]	; (1e214 <_DoInit+0x68>)
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	f003 fbbc 	bl	21968 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1e1f0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1e1f4:	2320      	movs	r3, #32
   1e1f6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1e1f8:	f3bf 8f5f 	dmb	sy
}
   1e1fc:	bd10      	pop	{r4, pc}
   1e1fe:	bf00      	nop
   1e200:	20002a7c 	.word	0x20002a7c
   1e204:	000278f3 	.word	0x000278f3
   1e208:	000278fc 	.word	0x000278fc
   1e20c:	20003082 	.word	0x20003082
   1e210:	20003072 	.word	0x20003072
   1e214:	00027900 	.word	0x00027900

0001e218 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e218:	4b0e      	ldr	r3, [pc, #56]	; (1e254 <z_sys_init_run_level+0x3c>)
{
   1e21a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e21c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1e220:	3001      	adds	r0, #1
   1e222:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1e226:	42a6      	cmp	r6, r4
   1e228:	d800      	bhi.n	1e22c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1e22a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1e22c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1e230:	4628      	mov	r0, r5
   1e232:	4798      	blx	r3
		if (dev != NULL) {
   1e234:	b165      	cbz	r5, 1e250 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1e236:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1e238:	b130      	cbz	r0, 1e248 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1e23a:	2800      	cmp	r0, #0
   1e23c:	bfb8      	it	lt
   1e23e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1e240:	28ff      	cmp	r0, #255	; 0xff
   1e242:	bfa8      	it	ge
   1e244:	20ff      	movge	r0, #255	; 0xff
   1e246:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1e248:	785a      	ldrb	r2, [r3, #1]
   1e24a:	f042 0201 	orr.w	r2, r2, #1
   1e24e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e250:	3408      	adds	r4, #8
   1e252:	e7e8      	b.n	1e226 <z_sys_init_run_level+0xe>
   1e254:	00026ea8 	.word	0x00026ea8

0001e258 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1e258:	4b01      	ldr	r3, [pc, #4]	; (1e260 <z_impl_z_errno+0x8>)
   1e25a:	6898      	ldr	r0, [r3, #8]
}
   1e25c:	3064      	adds	r0, #100	; 0x64
   1e25e:	4770      	bx	lr
   1e260:	20002b24 	.word	0x20002b24

0001e264 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1e264:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1e266:	4b0a      	ldr	r3, [pc, #40]	; (1e290 <bg_thread_main+0x2c>)
   1e268:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e26a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1e26c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e26e:	f7ff ffd3 	bl	1e218 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1e272:	f001 fa63 	bl	1f73c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1e276:	2003      	movs	r0, #3
   1e278:	f7ff ffce 	bl	1e218 <z_sys_init_run_level>

	z_init_static_threads();
   1e27c:	f000 f97e 	bl	1e57c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1e280:	f7f2 fcdc 	bl	10c3c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1e284:	4a03      	ldr	r2, [pc, #12]	; (1e294 <bg_thread_main+0x30>)
   1e286:	7b13      	ldrb	r3, [r2, #12]
   1e288:	f023 0301 	bic.w	r3, r3, #1
   1e28c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1e28e:	bd08      	pop	{r3, pc}
   1e290:	20003482 	.word	0x20003482
   1e294:	20002240 	.word	0x20002240

0001e298 <z_bss_zero>:
{
   1e298:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1e29a:	4803      	ldr	r0, [pc, #12]	; (1e2a8 <z_bss_zero+0x10>)
   1e29c:	4a03      	ldr	r2, [pc, #12]	; (1e2ac <z_bss_zero+0x14>)
   1e29e:	2100      	movs	r1, #0
   1e2a0:	1a12      	subs	r2, r2, r0
   1e2a2:	f007 fa4f 	bl	25744 <z_early_memset>
}
   1e2a6:	bd08      	pop	{r3, pc}
   1e2a8:	20000c98 	.word	0x20000c98
   1e2ac:	20003484 	.word	0x20003484

0001e2b0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1e2b0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1e2b2:	2300      	movs	r3, #0
{
   1e2b4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1e2b6:	2201      	movs	r2, #1
   1e2b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1e2bc:	4e13      	ldr	r6, [pc, #76]	; (1e30c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1e2be:	4d14      	ldr	r5, [pc, #80]	; (1e310 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1e2c0:	9301      	str	r3, [sp, #4]
   1e2c2:	220f      	movs	r2, #15
   1e2c4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e2c8:	4912      	ldr	r1, [pc, #72]	; (1e314 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1e2ca:	2318      	movs	r3, #24
   1e2cc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1e2d0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1e2d4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1e2d6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1e2da:	fb00 1104 	mla	r1, r0, r4, r1
   1e2de:	4b0e      	ldr	r3, [pc, #56]	; (1e318 <z_init_cpu+0x68>)
   1e2e0:	9500      	str	r5, [sp, #0]
   1e2e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1e2e6:	4630      	mov	r0, r6
   1e2e8:	f000 f8ea 	bl	1e4c0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e2ec:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1e2ee:	480b      	ldr	r0, [pc, #44]	; (1e31c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1e2f0:	752c      	strb	r4, [r5, #20]
   1e2f2:	f023 0304 	bic.w	r3, r3, #4
   1e2f6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1e2f8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1e2fc:	fb03 0404 	mla	r4, r3, r4, r0
   1e300:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1e302:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1e304:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1e306:	b006      	add	sp, #24
   1e308:	bd70      	pop	{r4, r5, r6, pc}
   1e30a:	bf00      	nop
   1e30c:	200021c0 	.word	0x200021c0
   1e310:	20002b24 	.word	0x20002b24
   1e314:	20005540 	.word	0x20005540
   1e318:	0001e635 	.word	0x0001e635
   1e31c:	200056c0 	.word	0x200056c0

0001e320 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1e320:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1e322:	4b2f      	ldr	r3, [pc, #188]	; (1e3e0 <z_cstart+0xc0>)
   1e324:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e326:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1e32a:	4d2e      	ldr	r5, [pc, #184]	; (1e3e4 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1e32c:	4e2e      	ldr	r6, [pc, #184]	; (1e3e8 <z_cstart+0xc8>)
   1e32e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e330:	4f2e      	ldr	r7, [pc, #184]	; (1e3ec <z_cstart+0xcc>)
   1e332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1e336:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e338:	23e0      	movs	r3, #224	; 0xe0
   1e33a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1e33e:	2400      	movs	r4, #0
   1e340:	2320      	movs	r3, #32
   1e342:	77eb      	strb	r3, [r5, #31]
   1e344:	762c      	strb	r4, [r5, #24]
   1e346:	766c      	strb	r4, [r5, #25]
   1e348:	76ac      	strb	r4, [r5, #26]
   1e34a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e34e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e350:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e354:	626b      	str	r3, [r5, #36]	; 0x24
   1e356:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e35a:	f7f4 fb31 	bl	129c0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e35e:	f7f4 f8df 	bl	12520 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e362:	f04f 33ff 	mov.w	r3, #4294967295
   1e366:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e368:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1e36a:	f7f4 fc61 	bl	12c30 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1e36e:	f7f4 fbc9 	bl	12b04 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e372:	f240 1301 	movw	r3, #257	; 0x101
   1e376:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1e37a:	ab06      	add	r3, sp, #24
   1e37c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1e37e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1e382:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1e384:	f007 f9b8 	bl	256f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e388:	4620      	mov	r0, r4
   1e38a:	f7ff ff45 	bl	1e218 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e38e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1e390:	4d17      	ldr	r5, [pc, #92]	; (1e3f0 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e392:	f7ff ff41 	bl	1e218 <z_sys_init_run_level>
	z_sched_init();
   1e396:	f000 fe8d 	bl	1f0b4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e39a:	4b16      	ldr	r3, [pc, #88]	; (1e3f4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1e39c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e39e:	2201      	movs	r2, #1
   1e3a0:	9305      	str	r3, [sp, #20]
   1e3a2:	f06f 0301 	mvn.w	r3, #1
   1e3a6:	4914      	ldr	r1, [pc, #80]	; (1e3f8 <z_cstart+0xd8>)
   1e3a8:	9400      	str	r4, [sp, #0]
   1e3aa:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1e3ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e3b2:	463b      	mov	r3, r7
   1e3b4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
   1e3b8:	4628      	mov	r0, r5
   1e3ba:	f000 f881 	bl	1e4c0 <z_setup_new_thread>
   1e3be:	7b6a      	ldrb	r2, [r5, #13]
   1e3c0:	4606      	mov	r6, r0
   1e3c2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1e3c6:	4628      	mov	r0, r5
   1e3c8:	736a      	strb	r2, [r5, #13]
   1e3ca:	f007 fc62 	bl	25c92 <z_ready_thread>
	z_init_cpu(0);
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	f7ff ff6e 	bl	1e2b0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e3d4:	463a      	mov	r2, r7
   1e3d6:	4631      	mov	r1, r6
   1e3d8:	4628      	mov	r0, r5
   1e3da:	f7f4 f9bf 	bl	1275c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e3de:	bf00      	nop
   1e3e0:	20005f00 	.word	0x20005f00
   1e3e4:	e000ed00 	.word	0xe000ed00
   1e3e8:	20002b24 	.word	0x20002b24
   1e3ec:	0001e265 	.word	0x0001e265
   1e3f0:	20002240 	.word	0x20002240
   1e3f4:	00027907 	.word	0x00027907
   1e3f8:	20004f80 	.word	0x20004f80

0001e3fc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1e3fc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e3fe:	4c06      	ldr	r4, [pc, #24]	; (1e418 <statics_init+0x1c>)
   1e400:	4d06      	ldr	r5, [pc, #24]	; (1e41c <statics_init+0x20>)
   1e402:	42ac      	cmp	r4, r5
   1e404:	d301      	bcc.n	1e40a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1e406:	2000      	movs	r0, #0
   1e408:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e40a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1e40e:	4620      	mov	r0, r4
   1e410:	f007 f99c 	bl	2574c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e414:	3414      	adds	r4, #20
   1e416:	e7f4      	b.n	1e402 <statics_init+0x6>
   1e418:	20000b4c 	.word	0x20000b4c
   1e41c:	20000b4c 	.word	0x20000b4c

0001e420 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1e420:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e422:	4b0e      	ldr	r3, [pc, #56]	; (1e45c <init_mem_slab_module+0x3c>)
   1e424:	4c0e      	ldr	r4, [pc, #56]	; (1e460 <init_mem_slab_module+0x40>)
   1e426:	42a3      	cmp	r3, r4
   1e428:	d301      	bcc.n	1e42e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1e42a:	2000      	movs	r0, #0
	return rc;
}
   1e42c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e42e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1e432:	ea41 0200 	orr.w	r2, r1, r0
   1e436:	f012 0203 	ands.w	r2, r2, #3
   1e43a:	d10b      	bne.n	1e454 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1e43c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1e43e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e440:	42aa      	cmp	r2, r5
   1e442:	d101      	bne.n	1e448 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e444:	331c      	adds	r3, #28
   1e446:	e7ee      	b.n	1e426 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1e448:	695e      	ldr	r6, [r3, #20]
   1e44a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e44c:	3201      	adds	r2, #1
		slab->free_list = p;
   1e44e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1e450:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1e452:	e7f5      	b.n	1e440 <init_mem_slab_module+0x20>
	return rc;
   1e454:	f06f 0015 	mvn.w	r0, #21
   1e458:	e7e8      	b.n	1e42c <init_mem_slab_module+0xc>
   1e45a:	bf00      	nop
   1e45c:	20000b14 	.word	0x20000b14
   1e460:	20000b4c 	.word	0x20000b4c

0001e464 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e464:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e466:	460c      	mov	r4, r1
	__asm__ volatile(
   1e468:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e46c:	f3ef 8111 	mrs	r1, BASEPRI
   1e470:	f385 8812 	msr	BASEPRI_MAX, r5
   1e474:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1e478:	6945      	ldr	r5, [r0, #20]
   1e47a:	b15d      	cbz	r5, 1e494 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1e47c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e47e:	682b      	ldr	r3, [r5, #0]
   1e480:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1e482:	6983      	ldr	r3, [r0, #24]
   1e484:	3301      	adds	r3, #1
   1e486:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e488:	2000      	movs	r0, #0
	__asm__ volatile(
   1e48a:	f381 8811 	msr	BASEPRI, r1
   1e48e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1e492:	e011      	b.n	1e4b8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1e494:	ea52 0c03 	orrs.w	ip, r2, r3
   1e498:	d103      	bne.n	1e4a2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1e49a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1e49c:	f06f 000b 	mvn.w	r0, #11
   1e4a0:	e7f3      	b.n	1e48a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1e4a2:	e9cd 2300 	strd	r2, r3, [sp]
   1e4a6:	4602      	mov	r2, r0
   1e4a8:	3008      	adds	r0, #8
   1e4aa:	f000 fd59 	bl	1ef60 <z_pend_curr>
		if (result == 0) {
   1e4ae:	b918      	cbnz	r0, 1e4b8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1e4b0:	4b02      	ldr	r3, [pc, #8]	; (1e4bc <k_mem_slab_alloc+0x58>)
   1e4b2:	689b      	ldr	r3, [r3, #8]
   1e4b4:	695b      	ldr	r3, [r3, #20]
   1e4b6:	6023      	str	r3, [r4, #0]
}
   1e4b8:	b003      	add	sp, #12
   1e4ba:	bd30      	pop	{r4, r5, pc}
   1e4bc:	20002b24 	.word	0x20002b24

0001e4c0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1e4c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1e4c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e4c6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1e4c8:	2604      	movs	r6, #4
   1e4ca:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1e4cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1e4ce:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1e4d0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1e4d4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e4d6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1e4d8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e4dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1e4de:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e4e0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1e4e4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1e4e6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1e4ea:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1e4ee:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1e4f0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1e4f2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e4f4:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e4f8:	9202      	str	r2, [sp, #8]
   1e4fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e4fc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1e4fe:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e502:	9200      	str	r2, [sp, #0]
   1e504:	4642      	mov	r2, r8
{
   1e506:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e508:	f7f4 f8f6 	bl	126f8 <arch_new_thread>
	if (!_current) {
   1e50c:	4b04      	ldr	r3, [pc, #16]	; (1e520 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1e50e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1e510:	689b      	ldr	r3, [r3, #8]
   1e512:	b103      	cbz	r3, 1e516 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1e514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1e516:	6763      	str	r3, [r4, #116]	; 0x74
}
   1e518:	4640      	mov	r0, r8
   1e51a:	b004      	add	sp, #16
   1e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e520:	20002b24 	.word	0x20002b24

0001e524 <z_impl_k_thread_create>:
{
   1e524:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e526:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e528:	2700      	movs	r7, #0
   1e52a:	9705      	str	r7, [sp, #20]
   1e52c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1e52e:	9704      	str	r7, [sp, #16]
   1e530:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1e532:	9703      	str	r7, [sp, #12]
   1e534:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1e536:	9702      	str	r7, [sp, #8]
{
   1e538:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e53c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1e53e:	9701      	str	r7, [sp, #4]
   1e540:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1e542:	9700      	str	r7, [sp, #0]
{
   1e544:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e546:	f7ff ffbb 	bl	1e4c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1e54a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1e54e:	bf08      	it	eq
   1e550:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1e554:	d005      	beq.n	1e562 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e556:	ea55 0306 	orrs.w	r3, r5, r6
   1e55a:	d105      	bne.n	1e568 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1e55c:	4620      	mov	r0, r4
   1e55e:	f000 fca3 	bl	1eea8 <z_sched_start>
}
   1e562:	4620      	mov	r0, r4
   1e564:	b007      	add	sp, #28
   1e566:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e568:	4903      	ldr	r1, [pc, #12]	; (1e578 <z_impl_k_thread_create+0x54>)
   1e56a:	4632      	mov	r2, r6
   1e56c:	462b      	mov	r3, r5
   1e56e:	f104 0018 	add.w	r0, r4, #24
   1e572:	f000 ff4f 	bl	1f414 <z_add_timeout>
   1e576:	e7f4      	b.n	1e562 <z_impl_k_thread_create+0x3e>
   1e578:	00025cb3 	.word	0x00025cb3

0001e57c <z_init_static_threads>:
{
   1e57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e580:	4c29      	ldr	r4, [pc, #164]	; (1e628 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1e582:	4d2a      	ldr	r5, [pc, #168]	; (1e62c <z_init_static_threads+0xb0>)
{
   1e584:	b087      	sub	sp, #28
   1e586:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1e588:	42ae      	cmp	r6, r5
   1e58a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1e58e:	d30f      	bcc.n	1e5b0 <z_init_static_threads+0x34>
	k_sched_lock();
   1e590:	f000 fba4 	bl	1ecdc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e594:	4c24      	ldr	r4, [pc, #144]	; (1e628 <z_init_static_threads+0xac>)
   1e596:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1e630 <z_init_static_threads+0xb4>
   1e59a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1e59e:	f240 37e7 	movw	r7, #999	; 0x3e7
   1e5a2:	42ac      	cmp	r4, r5
   1e5a4:	d320      	bcc.n	1e5e8 <z_init_static_threads+0x6c>
}
   1e5a6:	b007      	add	sp, #28
   1e5a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1e5ac:	f000 bd66 	b.w	1f07c <k_sched_unlock>
		z_setup_new_thread(
   1e5b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e5b4:	9305      	str	r3, [sp, #20]
   1e5b6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e5ba:	9304      	str	r3, [sp, #16]
   1e5bc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1e5c0:	9303      	str	r3, [sp, #12]
   1e5c2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1e5c6:	9302      	str	r3, [sp, #8]
   1e5c8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1e5cc:	9301      	str	r3, [sp, #4]
   1e5ce:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1e5d2:	9300      	str	r3, [sp, #0]
   1e5d4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1e5d8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1e5dc:	f7ff ff70 	bl	1e4c0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e5e0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1e5e4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1e5e6:	e7ce      	b.n	1e586 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1e5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e5ea:	1c5a      	adds	r2, r3, #1
   1e5ec:	d00d      	beq.n	1e60a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1e5ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e5f2:	2100      	movs	r1, #0
   1e5f4:	4638      	mov	r0, r7
   1e5f6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e5fa:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1e5fe:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e602:	d104      	bne.n	1e60e <z_init_static_threads+0x92>
	z_sched_start(thread);
   1e604:	4640      	mov	r0, r8
   1e606:	f000 fc4f 	bl	1eea8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e60a:	3430      	adds	r4, #48	; 0x30
   1e60c:	e7c9      	b.n	1e5a2 <z_init_static_threads+0x26>
   1e60e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e612:	2300      	movs	r3, #0
   1e614:	f7e1 fd74 	bl	100 <__aeabi_uldivmod>
   1e618:	4602      	mov	r2, r0
   1e61a:	460b      	mov	r3, r1
   1e61c:	f108 0018 	add.w	r0, r8, #24
   1e620:	4649      	mov	r1, r9
   1e622:	f000 fef7 	bl	1f414 <z_add_timeout>
   1e626:	e7f0      	b.n	1e60a <z_init_static_threads+0x8e>
   1e628:	20000b14 	.word	0x20000b14
   1e62c:	20000b14 	.word	0x20000b14
   1e630:	00025cb3 	.word	0x00025cb3

0001e634 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1e634:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1e636:	4c0b      	ldr	r4, [pc, #44]	; (1e664 <idle+0x30>)
	return !z_sys_post_kernel;
   1e638:	4d0b      	ldr	r5, [pc, #44]	; (1e668 <idle+0x34>)
	__asm__ volatile(
   1e63a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e63e:	f3ef 8311 	mrs	r3, BASEPRI
   1e642:	f382 8812 	msr	BASEPRI_MAX, r2
   1e646:	f3bf 8f6f 	isb	sy
   1e64a:	f007 fbe9 	bl	25e20 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1e64e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1e650:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1e652:	b913      	cbnz	r3, 1e65a <idle+0x26>
	arch_cpu_idle();
   1e654:	f7f3 ff6a 	bl	1252c <arch_cpu_idle>
}
   1e658:	e7ef      	b.n	1e63a <idle+0x6>
   1e65a:	f7f3 fd71 	bl	12140 <pm_system_suspend>
   1e65e:	2800      	cmp	r0, #0
   1e660:	d1eb      	bne.n	1e63a <idle+0x6>
   1e662:	e7f7      	b.n	1e654 <idle+0x20>
   1e664:	20002b24 	.word	0x20002b24
   1e668:	20003482 	.word	0x20003482

0001e66c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e66c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e670:	4604      	mov	r4, r0
   1e672:	4617      	mov	r7, r2
   1e674:	461e      	mov	r6, r3
   1e676:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e67a:	f3ef 8811 	mrs	r8, BASEPRI
   1e67e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e682:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e686:	68c3      	ldr	r3, [r0, #12]
   1e688:	4a32      	ldr	r2, [pc, #200]	; (1e754 <z_impl_k_mutex_lock+0xe8>)
   1e68a:	b16b      	cbz	r3, 1e6a8 <z_impl_k_mutex_lock+0x3c>
   1e68c:	6880      	ldr	r0, [r0, #8]
   1e68e:	6891      	ldr	r1, [r2, #8]
   1e690:	4288      	cmp	r0, r1
   1e692:	d019      	beq.n	1e6c8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e694:	ea57 0306 	orrs.w	r3, r7, r6
   1e698:	d118      	bne.n	1e6cc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1e69a:	f388 8811 	msr	BASEPRI, r8
   1e69e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1e6a2:	f06f 000f 	mvn.w	r0, #15
   1e6a6:	e00c      	b.n	1e6c2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1e6a8:	6891      	ldr	r1, [r2, #8]
   1e6aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e6ae:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1e6b0:	3301      	adds	r3, #1
   1e6b2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e6b4:	6893      	ldr	r3, [r2, #8]
   1e6b6:	60a3      	str	r3, [r4, #8]
   1e6b8:	f388 8811 	msr	BASEPRI, r8
   1e6bc:	f3bf 8f6f 	isb	sy
		return 0;
   1e6c0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1e6c2:	b002      	add	sp, #8
   1e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e6c8:	6921      	ldr	r1, [r4, #16]
   1e6ca:	e7f0      	b.n	1e6ae <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e6cc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e6d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1e6d4:	4299      	cmp	r1, r3
   1e6d6:	bfa8      	it	ge
   1e6d8:	4619      	movge	r1, r3
   1e6da:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1e6de:	4291      	cmp	r1, r2
   1e6e0:	bfb8      	it	lt
   1e6e2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e6e4:	428b      	cmp	r3, r1
   1e6e6:	dd2e      	ble.n	1e746 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1e6e8:	f007 f8d1 	bl	2588e <adjust_owner_prio.isra.0>
   1e6ec:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e6ee:	e9cd 7600 	strd	r7, r6, [sp]
   1e6f2:	4819      	ldr	r0, [pc, #100]	; (1e758 <z_impl_k_mutex_lock+0xec>)
   1e6f4:	4622      	mov	r2, r4
   1e6f6:	4641      	mov	r1, r8
   1e6f8:	f000 fc32 	bl	1ef60 <z_pend_curr>
	if (got_mutex == 0) {
   1e6fc:	2800      	cmp	r0, #0
   1e6fe:	d0e0      	beq.n	1e6c2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1e700:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e704:	f3ef 8611 	mrs	r6, BASEPRI
   1e708:	f383 8812 	msr	BASEPRI_MAX, r3
   1e70c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e710:	6823      	ldr	r3, [r4, #0]
   1e712:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e714:	429c      	cmp	r4, r3
   1e716:	d00a      	beq.n	1e72e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e718:	b14b      	cbz	r3, 1e72e <z_impl_k_mutex_lock+0xc2>
   1e71a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e71e:	4299      	cmp	r1, r3
   1e720:	bfa8      	it	ge
   1e722:	4619      	movge	r1, r3
   1e724:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1e728:	4299      	cmp	r1, r3
   1e72a:	bfb8      	it	lt
   1e72c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e72e:	68a0      	ldr	r0, [r4, #8]
   1e730:	f007 f8ad 	bl	2588e <adjust_owner_prio.isra.0>
   1e734:	b900      	cbnz	r0, 1e738 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1e736:	b145      	cbz	r5, 1e74a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1e738:	4807      	ldr	r0, [pc, #28]	; (1e758 <z_impl_k_mutex_lock+0xec>)
   1e73a:	4631      	mov	r1, r6
   1e73c:	f000 fabc 	bl	1ecb8 <z_reschedule>
	return -EAGAIN;
   1e740:	f06f 000a 	mvn.w	r0, #10
   1e744:	e7bd      	b.n	1e6c2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1e746:	2500      	movs	r5, #0
   1e748:	e7d1      	b.n	1e6ee <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1e74a:	f386 8811 	msr	BASEPRI, r6
   1e74e:	f3bf 8f6f 	isb	sy
   1e752:	e7f5      	b.n	1e740 <z_impl_k_mutex_lock+0xd4>
   1e754:	20002b24 	.word	0x20002b24
   1e758:	20003483 	.word	0x20003483

0001e75c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1e75c:	6883      	ldr	r3, [r0, #8]
{
   1e75e:	b570      	push	{r4, r5, r6, lr}
   1e760:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1e762:	b36b      	cbz	r3, 1e7c0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e764:	4a19      	ldr	r2, [pc, #100]	; (1e7cc <z_impl_k_mutex_unlock+0x70>)
   1e766:	6892      	ldr	r2, [r2, #8]
   1e768:	4293      	cmp	r3, r2
   1e76a:	d12c      	bne.n	1e7c6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1e76c:	68c3      	ldr	r3, [r0, #12]
   1e76e:	2b01      	cmp	r3, #1
   1e770:	d903      	bls.n	1e77a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1e772:	3b01      	subs	r3, #1
   1e774:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1e776:	2000      	movs	r0, #0
}
   1e778:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1e77a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e77e:	f3ef 8511 	mrs	r5, BASEPRI
   1e782:	f383 8812 	msr	BASEPRI_MAX, r3
   1e786:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e78a:	6901      	ldr	r1, [r0, #16]
   1e78c:	6880      	ldr	r0, [r0, #8]
   1e78e:	f007 f87e 	bl	2588e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e792:	4620      	mov	r0, r4
   1e794:	f007 fad9 	bl	25d4a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e798:	2600      	movs	r6, #0
   1e79a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e79c:	b150      	cbz	r0, 1e7b4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e79e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e7a2:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e7a4:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1e7a6:	f007 fa74 	bl	25c92 <z_ready_thread>
		z_reschedule(&lock, key);
   1e7aa:	4809      	ldr	r0, [pc, #36]	; (1e7d0 <z_impl_k_mutex_unlock+0x74>)
   1e7ac:	4629      	mov	r1, r5
   1e7ae:	f000 fa83 	bl	1ecb8 <z_reschedule>
   1e7b2:	e7e0      	b.n	1e776 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1e7b4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1e7b6:	f385 8811 	msr	BASEPRI, r5
   1e7ba:	f3bf 8f6f 	isb	sy
   1e7be:	e7da      	b.n	1e776 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1e7c0:	f06f 0015 	mvn.w	r0, #21
   1e7c4:	e7d8      	b.n	1e778 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1e7c6:	f04f 30ff 	mov.w	r0, #4294967295
   1e7ca:	e7d5      	b.n	1e778 <z_impl_k_mutex_unlock+0x1c>
   1e7cc:	20002b24 	.word	0x20002b24
   1e7d0:	20003483 	.word	0x20003483

0001e7d4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1e7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e7d6:	4611      	mov	r1, r2
	__asm__ volatile(
   1e7d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e7dc:	f3ef 8511 	mrs	r5, BASEPRI
   1e7e0:	f382 8812 	msr	BASEPRI_MAX, r2
   1e7e4:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1e7e8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e7ea:	b19c      	cbz	r4, 1e814 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e7ec:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e7ee:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e7f0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e7f4:	4294      	cmp	r4, r2
	list->head = node;
   1e7f6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1e7f8:	bf08      	it	eq
   1e7fa:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e7fc:	2101      	movs	r1, #1
   1e7fe:	4620      	mov	r0, r4
   1e800:	f007 f8b8 	bl	25974 <z_queue_node_peek>
   1e804:	4604      	mov	r4, r0
	__asm__ volatile(
   1e806:	f385 8811 	msr	BASEPRI, r5
   1e80a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1e80e:	4620      	mov	r0, r4
   1e810:	b003      	add	sp, #12
   1e812:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e814:	ea51 0203 	orrs.w	r2, r1, r3
   1e818:	d0f5      	beq.n	1e806 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e81a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1e81e:	e9cd 1300 	strd	r1, r3, [sp]
   1e822:	4610      	mov	r0, r2
   1e824:	4629      	mov	r1, r5
   1e826:	f000 fb9b 	bl	1ef60 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1e82a:	2800      	cmp	r0, #0
   1e82c:	d1ef      	bne.n	1e80e <z_impl_k_queue_get+0x3a>
   1e82e:	4b02      	ldr	r3, [pc, #8]	; (1e838 <z_impl_k_queue_get+0x64>)
   1e830:	689b      	ldr	r3, [r3, #8]
   1e832:	695c      	ldr	r4, [r3, #20]
   1e834:	e7eb      	b.n	1e80e <z_impl_k_queue_get+0x3a>
   1e836:	bf00      	nop
   1e838:	20002b24 	.word	0x20002b24

0001e83c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1e83c:	b538      	push	{r3, r4, r5, lr}
   1e83e:	4604      	mov	r4, r0
	__asm__ volatile(
   1e840:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e844:	f3ef 8511 	mrs	r5, BASEPRI
   1e848:	f383 8812 	msr	BASEPRI_MAX, r3
   1e84c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1e850:	f007 fa7b 	bl	25d4a <z_unpend_first_thread>

	if (thread != NULL) {
   1e854:	b148      	cbz	r0, 1e86a <z_impl_k_sem_give+0x2e>
   1e856:	2200      	movs	r2, #0
   1e858:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1e85a:	f007 fa1a 	bl	25c92 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1e85e:	4629      	mov	r1, r5
   1e860:	4808      	ldr	r0, [pc, #32]	; (1e884 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1e862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1e866:	f000 ba27 	b.w	1ecb8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1e86a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1e86e:	429a      	cmp	r2, r3
   1e870:	bf18      	it	ne
   1e872:	3301      	addne	r3, #1
   1e874:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e876:	2102      	movs	r1, #2
   1e878:	f104 0010 	add.w	r0, r4, #16
   1e87c:	f007 fc5e 	bl	2613c <z_handle_obj_poll_events>
}
   1e880:	e7ed      	b.n	1e85e <z_impl_k_sem_give+0x22>
   1e882:	bf00      	nop
   1e884:	20003483 	.word	0x20003483

0001e888 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1e888:	b513      	push	{r0, r1, r4, lr}
   1e88a:	f04f 0440 	mov.w	r4, #64	; 0x40
   1e88e:	f3ef 8111 	mrs	r1, BASEPRI
   1e892:	f384 8812 	msr	BASEPRI_MAX, r4
   1e896:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1e89a:	6884      	ldr	r4, [r0, #8]
   1e89c:	b144      	cbz	r4, 1e8b0 <z_impl_k_sem_take+0x28>
		sem->count--;
   1e89e:	3c01      	subs	r4, #1
   1e8a0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1e8a2:	f381 8811 	msr	BASEPRI, r1
   1e8a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1e8aa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1e8ac:	b002      	add	sp, #8
   1e8ae:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e8b0:	ea52 0403 	orrs.w	r4, r2, r3
   1e8b4:	d106      	bne.n	1e8c4 <z_impl_k_sem_take+0x3c>
   1e8b6:	f381 8811 	msr	BASEPRI, r1
   1e8ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1e8be:	f06f 000f 	mvn.w	r0, #15
   1e8c2:	e7f3      	b.n	1e8ac <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1e8c4:	e9cd 2300 	strd	r2, r3, [sp]
   1e8c8:	4602      	mov	r2, r0
   1e8ca:	4802      	ldr	r0, [pc, #8]	; (1e8d4 <z_impl_k_sem_take+0x4c>)
   1e8cc:	f000 fb48 	bl	1ef60 <z_pend_curr>
	return ret;
   1e8d0:	e7ec      	b.n	1e8ac <z_impl_k_sem_take+0x24>
   1e8d2:	bf00      	nop
   1e8d4:	20003483 	.word	0x20003483

0001e8d8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   1e8d8:	b570      	push	{r4, r5, r6, lr}
   1e8da:	4604      	mov	r4, r0
	__asm__ volatile(
   1e8dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e8e0:	f3ef 8511 	mrs	r5, BASEPRI
   1e8e4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8e8:	f3bf 8f6f 	isb	sy
   1e8ec:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   1e8f0:	4620      	mov	r0, r4
   1e8f2:	f007 fa2a 	bl	25d4a <z_unpend_first_thread>
		if (thread == NULL) {
   1e8f6:	b118      	cbz	r0, 1e900 <z_impl_k_sem_reset+0x28>
   1e8f8:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   1e8fa:	f007 f9ca 	bl	25c92 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   1e8fe:	e7f7      	b.n	1e8f0 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   1e900:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e902:	2102      	movs	r1, #2
   1e904:	f104 0010 	add.w	r0, r4, #16
   1e908:	f007 fc18 	bl	2613c <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   1e90c:	4629      	mov	r1, r5
   1e90e:	4802      	ldr	r0, [pc, #8]	; (1e918 <z_impl_k_sem_reset+0x40>)
}
   1e910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1e914:	f000 b9d0 	b.w	1ecb8 <z_reschedule>
   1e918:	20003483 	.word	0x20003483

0001e91c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1e920:	4e47      	ldr	r6, [pc, #284]	; (1ea40 <work_queue_main+0x124>)
   1e922:	b085      	sub	sp, #20
   1e924:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1e926:	f04f 38ff 	mov.w	r8, #4294967295
   1e92a:	f04f 39ff 	mov.w	r9, #4294967295
   1e92e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e932:	f3ef 8711 	mrs	r7, BASEPRI
   1e936:	f383 8812 	msr	BASEPRI_MAX, r3
   1e93a:	f3bf 8f6f 	isb	sy
   1e93e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1e942:	b98d      	cbnz	r5, 1e968 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1e944:	2102      	movs	r1, #2
   1e946:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1e94a:	f007 f881 	bl	25a50 <flag_test_and_clear>
   1e94e:	2800      	cmp	r0, #0
   1e950:	d135      	bne.n	1e9be <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1e952:	2300      	movs	r3, #0
   1e954:	e9cd 8900 	strd	r8, r9, [sp]
   1e958:	9302      	str	r3, [sp, #8]
   1e95a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1e95e:	4639      	mov	r1, r7
   1e960:	4838      	ldr	r0, [pc, #224]	; (1ea44 <work_queue_main+0x128>)
   1e962:	f000 fcbb 	bl	1f2dc <z_sched_wait>
			continue;
   1e966:	e7e2      	b.n	1e92e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e968:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1e96c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1e96e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e972:	4295      	cmp	r5, r2
   1e974:	d101      	bne.n	1e97a <work_queue_main+0x5e>
	list->tail = node;
   1e976:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1e97a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e97e:	f043 0302 	orr.w	r3, r3, #2
   1e982:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1e986:	68eb      	ldr	r3, [r5, #12]
   1e988:	f023 0304 	bic.w	r3, r3, #4
   1e98c:	f043 0301 	orr.w	r3, r3, #1
   1e990:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1e992:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1e994:	f387 8811 	msr	BASEPRI, r7
   1e998:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1e99c:	4628      	mov	r0, r5
   1e99e:	4798      	blx	r3
	__asm__ volatile(
   1e9a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e9a4:	f3ef 8b11 	mrs	fp, BASEPRI
   1e9a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9ac:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1e9b0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e9b2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1e9b4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e9b8:	d40b      	bmi.n	1e9d2 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1e9ba:	60ea      	str	r2, [r5, #12]
   1e9bc:	e00e      	b.n	1e9dc <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1e9be:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1e9c2:	2200      	movs	r2, #0
   1e9c4:	2101      	movs	r1, #1
   1e9c6:	4628      	mov	r0, r5
   1e9c8:	f007 f9e7 	bl	25d9a <z_sched_wake>
   1e9cc:	2800      	cmp	r0, #0
   1e9ce:	d1f8      	bne.n	1e9c2 <work_queue_main+0xa6>
   1e9d0:	e7bf      	b.n	1e952 <work_queue_main+0x36>
	return list->head;
   1e9d2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1e9d4:	f023 0303 	bic.w	r3, r3, #3
   1e9d8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e9da:	b970      	cbnz	r0, 1e9fa <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1e9dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e9e0:	f023 0302 	bic.w	r3, r3, #2
   1e9e4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1e9e8:	f38b 8811 	msr	BASEPRI, fp
   1e9ec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1e9f0:	05d8      	lsls	r0, r3, #23
   1e9f2:	d49c      	bmi.n	1e92e <work_queue_main+0x12>
	z_impl_k_yield();
   1e9f4:	f000 fb6a 	bl	1f0cc <z_impl_k_yield>
}
   1e9f8:	e799      	b.n	1e92e <work_queue_main+0x12>
	return node->next;
   1e9fa:	2700      	movs	r7, #0
   1e9fc:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1ea00:	463b      	mov	r3, r7
		if (wc->work == work) {
   1ea02:	6842      	ldr	r2, [r0, #4]
   1ea04:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1ea06:	4601      	mov	r1, r0
		if (wc->work == work) {
   1ea08:	d10c      	bne.n	1ea24 <work_queue_main+0x108>
	return node->next;
   1ea0a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1ea0c:	b997      	cbnz	r7, 1ea34 <work_queue_main+0x118>
   1ea0e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1ea10:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ea12:	4282      	cmp	r2, r0
   1ea14:	d100      	bne.n	1ea18 <work_queue_main+0xfc>
	list->tail = node;
   1ea16:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1ea18:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1ea1c:	f7ff ff0e 	bl	1e83c <z_impl_k_sem_give>
}
   1ea20:	4639      	mov	r1, r7
   1ea22:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ea24:	f1ba 0f00 	cmp.w	sl, #0
   1ea28:	d0d8      	beq.n	1e9dc <work_queue_main+0xc0>
	return node->next;
   1ea2a:	4650      	mov	r0, sl
   1ea2c:	460f      	mov	r7, r1
   1ea2e:	f8da a000 	ldr.w	sl, [sl]
   1ea32:	e7e6      	b.n	1ea02 <work_queue_main+0xe6>
	return list->tail;
   1ea34:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1ea36:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ea38:	4290      	cmp	r0, r2
	list->tail = node;
   1ea3a:	bf08      	it	eq
   1ea3c:	6077      	streq	r7, [r6, #4]
}
   1ea3e:	e7eb      	b.n	1ea18 <work_queue_main+0xfc>
   1ea40:	20002b4c 	.word	0x20002b4c
   1ea44:	20003483 	.word	0x20003483

0001ea48 <submit_to_queue_locked>:
{
   1ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ea4a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ea4c:	079a      	lsls	r2, r3, #30
{
   1ea4e:	4604      	mov	r4, r0
   1ea50:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ea52:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1ea56:	d41f      	bmi.n	1ea98 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1ea58:	075f      	lsls	r7, r3, #29
   1ea5a:	d41f      	bmi.n	1ea9c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1ea5c:	680a      	ldr	r2, [r1, #0]
   1ea5e:	b90a      	cbnz	r2, 1ea64 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1ea60:	6882      	ldr	r2, [r0, #8]
   1ea62:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1ea64:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1ea66:	bf44      	itt	mi
   1ea68:	68a3      	ldrmi	r3, [r4, #8]
   1ea6a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1ea6c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1ea6e:	bf4c      	ite	mi
   1ea70:	2502      	movmi	r5, #2
		ret = 1;
   1ea72:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1ea74:	b37f      	cbz	r7, 1ead6 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ea76:	4b1b      	ldr	r3, [pc, #108]	; (1eae4 <submit_to_queue_locked+0x9c>)
   1ea78:	689b      	ldr	r3, [r3, #8]
   1ea7a:	42bb      	cmp	r3, r7
   1ea7c:	d111      	bne.n	1eaa2 <submit_to_queue_locked+0x5a>
   1ea7e:	f006 fef4 	bl	2586a <k_is_in_isr>
   1ea82:	f080 0001 	eor.w	r0, r0, #1
   1ea86:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1ea88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ea8c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1ea8e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ea92:	d523      	bpl.n	1eadc <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1ea94:	b13a      	cbz	r2, 1eaa6 <submit_to_queue_locked+0x5e>
   1ea96:	b940      	cbnz	r0, 1eaaa <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1ea98:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1ea9c:	2300      	movs	r3, #0
   1ea9e:	6033      	str	r3, [r6, #0]
	return ret;
   1eaa0:	e013      	b.n	1eaca <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1eaa2:	2000      	movs	r0, #0
   1eaa4:	e7f0      	b.n	1ea88 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1eaa6:	071b      	lsls	r3, r3, #28
   1eaa8:	d4f6      	bmi.n	1ea98 <submit_to_queue_locked+0x50>
	parent->next = child;
   1eaaa:	2300      	movs	r3, #0
   1eaac:	6023      	str	r3, [r4, #0]
	return list->tail;
   1eaae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1eab2:	b963      	cbnz	r3, 1eace <submit_to_queue_locked+0x86>
	list->head = node;
   1eab4:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1eab8:	4638      	mov	r0, r7
   1eaba:	f006 ffe2 	bl	25a82 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1eabe:	68e3      	ldr	r3, [r4, #12]
   1eac0:	f043 0304 	orr.w	r3, r3, #4
   1eac4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1eac6:	6833      	ldr	r3, [r6, #0]
   1eac8:	60a3      	str	r3, [r4, #8]
}
   1eaca:	4628      	mov	r0, r5
   1eacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1eace:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ead0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1ead4:	e7f0      	b.n	1eab8 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1ead6:	f06f 0515 	mvn.w	r5, #21
   1eada:	e7df      	b.n	1ea9c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1eadc:	f06f 0512 	mvn.w	r5, #18
   1eae0:	e7dc      	b.n	1ea9c <submit_to_queue_locked+0x54>
   1eae2:	bf00      	nop
   1eae4:	20002b24 	.word	0x20002b24

0001eae8 <k_work_submit>:
{
   1eae8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1eaea:	4801      	ldr	r0, [pc, #4]	; (1eaf0 <k_work_submit+0x8>)
   1eaec:	f007 b84d 	b.w	25b8a <k_work_submit_to_queue>
   1eaf0:	200022c8 	.word	0x200022c8

0001eaf4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eaf6:	b089      	sub	sp, #36	; 0x24
   1eaf8:	4604      	mov	r4, r0
	list->head = NULL;
   1eafa:	2000      	movs	r0, #0
	list->tail = NULL;
   1eafc:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1eb00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1eb02:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1eb06:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1eb0a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1eb0e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1eb12:	b31d      	cbz	r5, 1eb5c <k_work_queue_start+0x68>
   1eb14:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1eb16:	2800      	cmp	r0, #0
   1eb18:	f240 1001 	movw	r0, #257	; 0x101
   1eb1c:	bf08      	it	eq
   1eb1e:	2001      	moveq	r0, #1
	*flagp = flags;
   1eb20:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1eb24:	2000      	movs	r0, #0
   1eb26:	f04f 36ff 	mov.w	r6, #4294967295
   1eb2a:	f04f 37ff 	mov.w	r7, #4294967295
   1eb2e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1eb32:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1eb36:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1eb3a:	4b09      	ldr	r3, [pc, #36]	; (1eb60 <k_work_queue_start+0x6c>)
   1eb3c:	9400      	str	r4, [sp, #0]
   1eb3e:	4620      	mov	r0, r4
   1eb40:	f7ff fcf0 	bl	1e524 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1eb44:	b125      	cbz	r5, 1eb50 <k_work_queue_start+0x5c>
   1eb46:	6829      	ldr	r1, [r5, #0]
   1eb48:	b111      	cbz	r1, 1eb50 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1eb4a:	4620      	mov	r0, r4
   1eb4c:	f006 fe93 	bl	25876 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1eb50:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1eb52:	b009      	add	sp, #36	; 0x24
   1eb54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1eb58:	f006 be90 	b.w	2587c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1eb5c:	2001      	movs	r0, #1
   1eb5e:	e7df      	b.n	1eb20 <k_work_queue_start+0x2c>
   1eb60:	0001e91d 	.word	0x0001e91d

0001eb64 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1eb64:	b513      	push	{r0, r1, r4, lr}
   1eb66:	9001      	str	r0, [sp, #4]
   1eb68:	4608      	mov	r0, r1
	__asm__ volatile(
   1eb6a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1eb6e:	f3ef 8411 	mrs	r4, BASEPRI
   1eb72:	f381 8812 	msr	BASEPRI_MAX, r1
   1eb76:	f3bf 8f6f 	isb	sy
	return *flagp;
   1eb7a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1eb7c:	f011 0f0e 	tst.w	r1, #14
   1eb80:	d116      	bne.n	1ebb0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1eb82:	ea53 0c02 	orrs.w	ip, r3, r2
   1eb86:	d108      	bne.n	1eb9a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1eb88:	a901      	add	r1, sp, #4
   1eb8a:	f7ff ff5d 	bl	1ea48 <submit_to_queue_locked>
	__asm__ volatile(
   1eb8e:	f384 8811 	msr	BASEPRI, r4
   1eb92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1eb96:	b002      	add	sp, #8
   1eb98:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1eb9a:	f041 0108 	orr.w	r1, r1, #8
   1eb9e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1eba0:	9901      	ldr	r1, [sp, #4]
   1eba2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1eba4:	3010      	adds	r0, #16
   1eba6:	4903      	ldr	r1, [pc, #12]	; (1ebb4 <k_work_schedule_for_queue+0x50>)
   1eba8:	f000 fc34 	bl	1f414 <z_add_timeout>
	return ret;
   1ebac:	2001      	movs	r0, #1
   1ebae:	e7ee      	b.n	1eb8e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1ebb0:	2000      	movs	r0, #0
   1ebb2:	e7ec      	b.n	1eb8e <k_work_schedule_for_queue+0x2a>
   1ebb4:	00025af3 	.word	0x00025af3

0001ebb8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1ebb8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1ebba:	4801      	ldr	r0, [pc, #4]	; (1ebc0 <k_work_schedule+0x8>)
   1ebbc:	f7ff bfd2 	b.w	1eb64 <k_work_schedule_for_queue>
   1ebc0:	200022c8 	.word	0x200022c8

0001ebc4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1ebc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ebc6:	460c      	mov	r4, r1
   1ebc8:	9001      	str	r0, [sp, #4]
   1ebca:	4616      	mov	r6, r2
   1ebcc:	461d      	mov	r5, r3
	__asm__ volatile(
   1ebce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebd2:	f3ef 8711 	mrs	r7, BASEPRI
   1ebd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebda:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1ebde:	4608      	mov	r0, r1
   1ebe0:	f006 ff41 	bl	25a66 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ebe4:	ea55 0306 	orrs.w	r3, r5, r6
   1ebe8:	d109      	bne.n	1ebfe <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1ebea:	a901      	add	r1, sp, #4
   1ebec:	4620      	mov	r0, r4
   1ebee:	f7ff ff2b 	bl	1ea48 <submit_to_queue_locked>
	__asm__ volatile(
   1ebf2:	f387 8811 	msr	BASEPRI, r7
   1ebf6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1ebfa:	b003      	add	sp, #12
   1ebfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1ebfe:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ec00:	4906      	ldr	r1, [pc, #24]	; (1ec1c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1ec02:	f043 0308 	orr.w	r3, r3, #8
   1ec06:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1ec08:	9b01      	ldr	r3, [sp, #4]
   1ec0a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ec0c:	f104 0010 	add.w	r0, r4, #16
   1ec10:	4632      	mov	r2, r6
   1ec12:	462b      	mov	r3, r5
   1ec14:	f000 fbfe 	bl	1f414 <z_add_timeout>
	return ret;
   1ec18:	2001      	movs	r0, #1
   1ec1a:	e7ea      	b.n	1ebf2 <k_work_reschedule_for_queue+0x2e>
   1ec1c:	00025af3 	.word	0x00025af3

0001ec20 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1ec20:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1ec22:	4801      	ldr	r0, [pc, #4]	; (1ec28 <k_work_reschedule+0x8>)
   1ec24:	f7ff bfce 	b.w	1ebc4 <k_work_reschedule_for_queue>
   1ec28:	200022c8 	.word	0x200022c8

0001ec2c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1ec2c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1ec2e:	4d07      	ldr	r5, [pc, #28]	; (1ec4c <z_reset_time_slice+0x20>)
   1ec30:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1ec32:	b154      	cbz	r4, 1ec4a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1ec34:	f7fe f902 	bl	1ce3c <sys_clock_elapsed>
   1ec38:	4b05      	ldr	r3, [pc, #20]	; (1ec50 <z_reset_time_slice+0x24>)
   1ec3a:	4404      	add	r4, r0
   1ec3c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1ec3e:	6828      	ldr	r0, [r5, #0]
   1ec40:	2100      	movs	r1, #0
	}
}
   1ec42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1ec46:	f007 b8fb 	b.w	25e40 <z_set_timeout_expiry>
}
   1ec4a:	bd38      	pop	{r3, r4, r5, pc}
   1ec4c:	20002b5c 	.word	0x20002b5c
   1ec50:	20002b24 	.word	0x20002b24

0001ec54 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec56:	4604      	mov	r4, r0
   1ec58:	460d      	mov	r5, r1
	__asm__ volatile(
   1ec5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec5e:	f3ef 8711 	mrs	r7, BASEPRI
   1ec62:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec66:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1ec6a:	4e10      	ldr	r6, [pc, #64]	; (1ecac <k_sched_time_slice_set+0x58>)
   1ec6c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ec6e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1ec72:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ec76:	6131      	str	r1, [r6, #16]
   1ec78:	2300      	movs	r3, #0
   1ec7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ec7e:	fbe4 010c 	umlal	r0, r1, r4, ip
   1ec82:	f7e1 fa3d 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1ec86:	2c00      	cmp	r4, #0
   1ec88:	4b09      	ldr	r3, [pc, #36]	; (1ecb0 <k_sched_time_slice_set+0x5c>)
   1ec8a:	dc0a      	bgt.n	1eca2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   1ec8c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1ec8e:	4b09      	ldr	r3, [pc, #36]	; (1ecb4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1ec90:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   1ec92:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   1ec94:	f7ff ffca 	bl	1ec2c <z_reset_time_slice>
	__asm__ volatile(
   1ec98:	f387 8811 	msr	BASEPRI, r7
   1ec9c:	f3bf 8f6f 	isb	sy
	}
}
   1eca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   1eca2:	2802      	cmp	r0, #2
   1eca4:	bfb8      	it	lt
   1eca6:	2002      	movlt	r0, #2
   1eca8:	e7f0      	b.n	1ec8c <k_sched_time_slice_set+0x38>
   1ecaa:	bf00      	nop
   1ecac:	20002b24 	.word	0x20002b24
   1ecb0:	20002b5c 	.word	0x20002b5c
   1ecb4:	20002b58 	.word	0x20002b58

0001ecb8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ecb8:	b949      	cbnz	r1, 1ecce <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ecba:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1ecbe:	b930      	cbnz	r0, 1ecce <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1ecc0:	4b05      	ldr	r3, [pc, #20]	; (1ecd8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1ecc2:	69da      	ldr	r2, [r3, #28]
   1ecc4:	689b      	ldr	r3, [r3, #8]
   1ecc6:	429a      	cmp	r2, r3
   1ecc8:	d001      	beq.n	1ecce <z_reschedule+0x16>
	ret = arch_swap(key);
   1ecca:	f7f3 bcc1 	b.w	12650 <arch_swap>
   1ecce:	f381 8811 	msr	BASEPRI, r1
   1ecd2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   1ecd6:	4770      	bx	lr
   1ecd8:	20002b24 	.word	0x20002b24

0001ecdc <k_sched_lock>:
	__asm__ volatile(
   1ecdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ece0:	f3ef 8111 	mrs	r1, BASEPRI
   1ece4:	f383 8812 	msr	BASEPRI_MAX, r3
   1ece8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1ecec:	4b04      	ldr	r3, [pc, #16]	; (1ed00 <k_sched_lock+0x24>)
   1ecee:	689a      	ldr	r2, [r3, #8]
   1ecf0:	7bd3      	ldrb	r3, [r2, #15]
   1ecf2:	3b01      	subs	r3, #1
   1ecf4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1ecf6:	f381 8811 	msr	BASEPRI, r1
   1ecfa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1ecfe:	4770      	bx	lr
   1ed00:	20002b24 	.word	0x20002b24

0001ed04 <update_cache>:
{
   1ed04:	b538      	push	{r3, r4, r5, lr}
   1ed06:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1ed08:	480c      	ldr	r0, [pc, #48]	; (1ed3c <update_cache+0x38>)
   1ed0a:	4d0d      	ldr	r5, [pc, #52]	; (1ed40 <update_cache+0x3c>)
   1ed0c:	f006 ffbb 	bl	25c86 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1ed10:	4604      	mov	r4, r0
   1ed12:	b900      	cbnz	r0, 1ed16 <update_cache+0x12>
   1ed14:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1ed16:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1ed18:	b94a      	cbnz	r2, 1ed2e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1ed1a:	7b5a      	ldrb	r2, [r3, #13]
   1ed1c:	06d2      	lsls	r2, r2, #27
   1ed1e:	d106      	bne.n	1ed2e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ed20:	69a2      	ldr	r2, [r4, #24]
   1ed22:	b922      	cbnz	r2, 1ed2e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ed24:	89da      	ldrh	r2, [r3, #14]
   1ed26:	2a7f      	cmp	r2, #127	; 0x7f
   1ed28:	d901      	bls.n	1ed2e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1ed2a:	61eb      	str	r3, [r5, #28]
}
   1ed2c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1ed2e:	429c      	cmp	r4, r3
   1ed30:	d002      	beq.n	1ed38 <update_cache+0x34>
			z_reset_time_slice(thread);
   1ed32:	4620      	mov	r0, r4
   1ed34:	f7ff ff7a 	bl	1ec2c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ed38:	61ec      	str	r4, [r5, #28]
}
   1ed3a:	e7f7      	b.n	1ed2c <update_cache+0x28>
   1ed3c:	20002b44 	.word	0x20002b44
   1ed40:	20002b24 	.word	0x20002b24

0001ed44 <move_thread_to_end_of_prio_q>:
{
   1ed44:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ed46:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ed4a:	7b43      	ldrb	r3, [r0, #13]
   1ed4c:	2a00      	cmp	r2, #0
{
   1ed4e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ed50:	da04      	bge.n	1ed5c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ed52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ed56:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ed58:	f006 ff50 	bl	25bfc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ed5c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1ed5e:	4a15      	ldr	r2, [pc, #84]	; (1edb4 <move_thread_to_end_of_prio_q+0x70>)
   1ed60:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ed64:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ed66:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ed6a:	f102 0520 	add.w	r5, r2, #32
   1ed6e:	42ab      	cmp	r3, r5
   1ed70:	d01b      	beq.n	1edaa <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ed72:	b1d3      	cbz	r3, 1edaa <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1ed74:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1ed78:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1ed7c:	4286      	cmp	r6, r0
   1ed7e:	d00f      	beq.n	1eda0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1ed80:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ed82:	2800      	cmp	r0, #0
   1ed84:	dd0c      	ble.n	1eda0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1ed86:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1ed88:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1ed8c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1ed8e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1ed90:	6890      	ldr	r0, [r2, #8]
   1ed92:	1a43      	subs	r3, r0, r1
   1ed94:	4258      	negs	r0, r3
}
   1ed96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ed9a:	4158      	adcs	r0, r3
   1ed9c:	f7ff bfb2 	b.w	1ed04 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1eda0:	42a3      	cmp	r3, r4
   1eda2:	d002      	beq.n	1edaa <move_thread_to_end_of_prio_q+0x66>
   1eda4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1eda6:	2b00      	cmp	r3, #0
   1eda8:	d1e6      	bne.n	1ed78 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1edaa:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1edae:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1edb0:	6251      	str	r1, [r2, #36]	; 0x24
}
   1edb2:	e7ed      	b.n	1ed90 <move_thread_to_end_of_prio_q+0x4c>
   1edb4:	20002b24 	.word	0x20002b24

0001edb8 <z_time_slice>:
{
   1edb8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1edba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edbe:	f3ef 8511 	mrs	r5, BASEPRI
   1edc2:	f383 8812 	msr	BASEPRI_MAX, r3
   1edc6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1edca:	4b17      	ldr	r3, [pc, #92]	; (1ee28 <z_time_slice+0x70>)
   1edcc:	4a17      	ldr	r2, [pc, #92]	; (1ee2c <z_time_slice+0x74>)
   1edce:	689c      	ldr	r4, [r3, #8]
   1edd0:	6811      	ldr	r1, [r2, #0]
   1edd2:	428c      	cmp	r4, r1
   1edd4:	d107      	bne.n	1ede6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1edd6:	4620      	mov	r0, r4
   1edd8:	f7ff ff28 	bl	1ec2c <z_reset_time_slice>
	__asm__ volatile(
   1eddc:	f385 8811 	msr	BASEPRI, r5
   1ede0:	f3bf 8f6f 	isb	sy
}
   1ede4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1ede6:	2100      	movs	r1, #0
   1ede8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1edea:	4a11      	ldr	r2, [pc, #68]	; (1ee30 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1edec:	6812      	ldr	r2, [r2, #0]
   1edee:	b1c2      	cbz	r2, 1ee22 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1edf0:	89e2      	ldrh	r2, [r4, #14]
   1edf2:	2a7f      	cmp	r2, #127	; 0x7f
   1edf4:	d815      	bhi.n	1ee22 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1edf6:	7b62      	ldrb	r2, [r4, #13]
   1edf8:	06d2      	lsls	r2, r2, #27
   1edfa:	d112      	bne.n	1ee22 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1edfc:	4a0d      	ldr	r2, [pc, #52]	; (1ee34 <z_time_slice+0x7c>)
   1edfe:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1ee02:	6812      	ldr	r2, [r2, #0]
   1ee04:	4291      	cmp	r1, r2
   1ee06:	db0c      	blt.n	1ee22 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   1ee08:	4a0b      	ldr	r2, [pc, #44]	; (1ee38 <z_time_slice+0x80>)
   1ee0a:	4294      	cmp	r4, r2
   1ee0c:	d009      	beq.n	1ee22 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1ee0e:	691a      	ldr	r2, [r3, #16]
   1ee10:	4282      	cmp	r2, r0
   1ee12:	dc03      	bgt.n	1ee1c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1ee14:	4620      	mov	r0, r4
   1ee16:	f7ff ff95 	bl	1ed44 <move_thread_to_end_of_prio_q>
   1ee1a:	e7dc      	b.n	1edd6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1ee1c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1ee1e:	611a      	str	r2, [r3, #16]
   1ee20:	e7dc      	b.n	1eddc <z_time_slice+0x24>
   1ee22:	2200      	movs	r2, #0
   1ee24:	e7fb      	b.n	1ee1e <z_time_slice+0x66>
   1ee26:	bf00      	nop
   1ee28:	20002b24 	.word	0x20002b24
   1ee2c:	20002b54 	.word	0x20002b54
   1ee30:	20002b5c 	.word	0x20002b5c
   1ee34:	20002b58 	.word	0x20002b58
   1ee38:	200021c0 	.word	0x200021c0

0001ee3c <ready_thread>:
{
   1ee3c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ee3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1ee42:	7b43      	ldrb	r3, [r0, #13]
   1ee44:	2a00      	cmp	r2, #0
   1ee46:	db2a      	blt.n	1ee9e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ee48:	06da      	lsls	r2, r3, #27
   1ee4a:	d128      	bne.n	1ee9e <ready_thread+0x62>
   1ee4c:	6982      	ldr	r2, [r0, #24]
   1ee4e:	bb32      	cbnz	r2, 1ee9e <ready_thread+0x62>
	return list->head == list;
   1ee50:	4a14      	ldr	r2, [pc, #80]	; (1eea4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1ee52:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ee56:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1ee58:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee5c:	f102 0520 	add.w	r5, r2, #32
   1ee60:	42ab      	cmp	r3, r5
   1ee62:	d017      	beq.n	1ee94 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ee64:	b1b3      	cbz	r3, 1ee94 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1ee66:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1ee6a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1ee6e:	428e      	cmp	r6, r1
   1ee70:	d00b      	beq.n	1ee8a <ready_thread+0x4e>
		return b2 - b1;
   1ee72:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ee74:	2900      	cmp	r1, #0
   1ee76:	dd08      	ble.n	1ee8a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1ee78:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ee7a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1ee7e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ee80:	6058      	str	r0, [r3, #4]
}
   1ee82:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1ee84:	2000      	movs	r0, #0
   1ee86:	f7ff bf3d 	b.w	1ed04 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ee8a:	42a3      	cmp	r3, r4
   1ee8c:	d002      	beq.n	1ee94 <ready_thread+0x58>
   1ee8e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ee90:	2b00      	cmp	r3, #0
   1ee92:	d1ea      	bne.n	1ee6a <ready_thread+0x2e>
	node->prev = tail;
   1ee94:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1ee98:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1ee9a:	6250      	str	r0, [r2, #36]	; 0x24
}
   1ee9c:	e7f1      	b.n	1ee82 <ready_thread+0x46>
}
   1ee9e:	bc70      	pop	{r4, r5, r6}
   1eea0:	4770      	bx	lr
   1eea2:	bf00      	nop
   1eea4:	20002b24 	.word	0x20002b24

0001eea8 <z_sched_start>:
{
   1eea8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eeaa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1eeae:	f3ef 8411 	mrs	r4, BASEPRI
   1eeb2:	f382 8812 	msr	BASEPRI_MAX, r2
   1eeb6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1eeba:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1eebc:	0751      	lsls	r1, r2, #29
   1eebe:	d404      	bmi.n	1eeca <z_sched_start+0x22>
	__asm__ volatile(
   1eec0:	f384 8811 	msr	BASEPRI, r4
   1eec4:	f3bf 8f6f 	isb	sy
}
   1eec8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1eeca:	f022 0204 	bic.w	r2, r2, #4
   1eece:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1eed0:	f7ff ffb4 	bl	1ee3c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1eed4:	4621      	mov	r1, r4
   1eed6:	4802      	ldr	r0, [pc, #8]	; (1eee0 <z_sched_start+0x38>)
}
   1eed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1eedc:	f7ff beec 	b.w	1ecb8 <z_reschedule>
   1eee0:	20003483 	.word	0x20003483

0001eee4 <unready_thread>:
{
   1eee4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1eee6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1eeea:	7b43      	ldrb	r3, [r0, #13]
   1eeec:	2a00      	cmp	r2, #0
{
   1eeee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1eef0:	da04      	bge.n	1eefc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1eef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1eef6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1eef8:	f006 fe80 	bl	25bfc <sys_dlist_remove>
	update_cache(thread == _current);
   1eefc:	4b04      	ldr	r3, [pc, #16]	; (1ef10 <unready_thread+0x2c>)
   1eefe:	6898      	ldr	r0, [r3, #8]
   1ef00:	1a43      	subs	r3, r0, r1
   1ef02:	4258      	negs	r0, r3
   1ef04:	4158      	adcs	r0, r3
}
   1ef06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ef0a:	f7ff befb 	b.w	1ed04 <update_cache>
   1ef0e:	bf00      	nop
   1ef10:	20002b24 	.word	0x20002b24

0001ef14 <pend>:
{
   1ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef18:	4606      	mov	r6, r0
   1ef1a:	4615      	mov	r5, r2
   1ef1c:	461c      	mov	r4, r3
	__asm__ volatile(
   1ef1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef22:	f3ef 8711 	mrs	r7, BASEPRI
   1ef26:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef2a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ef2e:	f006 fee2 	bl	25cf6 <add_to_waitq_locked>
	__asm__ volatile(
   1ef32:	f387 8811 	msr	BASEPRI, r7
   1ef36:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ef3a:	f1b4 3fff 	cmp.w	r4, #4294967295
   1ef3e:	bf08      	it	eq
   1ef40:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1ef44:	d008      	beq.n	1ef58 <pend+0x44>
   1ef46:	462a      	mov	r2, r5
   1ef48:	4623      	mov	r3, r4
   1ef4a:	f106 0018 	add.w	r0, r6, #24
   1ef4e:	4903      	ldr	r1, [pc, #12]	; (1ef5c <pend+0x48>)
}
   1ef50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ef54:	f000 ba5e 	b.w	1f414 <z_add_timeout>
   1ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef5c:	00025cb3 	.word	0x00025cb3

0001ef60 <z_pend_curr>:
{
   1ef60:	b510      	push	{r4, lr}
	pending_current = _current;
   1ef62:	4b07      	ldr	r3, [pc, #28]	; (1ef80 <z_pend_curr+0x20>)
   1ef64:	6898      	ldr	r0, [r3, #8]
   1ef66:	4b07      	ldr	r3, [pc, #28]	; (1ef84 <z_pend_curr+0x24>)
{
   1ef68:	460c      	mov	r4, r1
	pending_current = _current;
   1ef6a:	6018      	str	r0, [r3, #0]
{
   1ef6c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ef6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ef72:	f7ff ffcf 	bl	1ef14 <pend>
   1ef76:	4620      	mov	r0, r4
}
   1ef78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ef7c:	f7f3 bb68 	b.w	12650 <arch_swap>
   1ef80:	20002b24 	.word	0x20002b24
   1ef84:	20002b54 	.word	0x20002b54

0001ef88 <z_set_prio>:
{
   1ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef8a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ef8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef90:	f3ef 8611 	mrs	r6, BASEPRI
   1ef94:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef98:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1ef9c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ef9e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1efa0:	b249      	sxtb	r1, r1
   1efa2:	d133      	bne.n	1f00c <z_set_prio+0x84>
		if (need_sched) {
   1efa4:	6982      	ldr	r2, [r0, #24]
   1efa6:	bb8a      	cbnz	r2, 1f00c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1efa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1efac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1efae:	f006 fe25 	bl	25bfc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1efb2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1efb4:	4a17      	ldr	r2, [pc, #92]	; (1f014 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1efb6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1efb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1efbc:	7343      	strb	r3, [r0, #13]
   1efbe:	4610      	mov	r0, r2
   1efc0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1efc4:	4283      	cmp	r3, r0
   1efc6:	d01b      	beq.n	1f000 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1efc8:	b1d3      	cbz	r3, 1f000 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1efca:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   1efcc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1efd0:	42a9      	cmp	r1, r5
   1efd2:	d010      	beq.n	1eff6 <z_set_prio+0x6e>
		return b2 - b1;
   1efd4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1efd6:	2d00      	cmp	r5, #0
   1efd8:	dd0d      	ble.n	1eff6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1efda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1efdc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1efe0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1efe2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1efe4:	2001      	movs	r0, #1
   1efe6:	f7ff fe8d 	bl	1ed04 <update_cache>
   1efea:	2001      	movs	r0, #1
	__asm__ volatile(
   1efec:	f386 8811 	msr	BASEPRI, r6
   1eff0:	f3bf 8f6f 	isb	sy
}
   1eff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1eff6:	42bb      	cmp	r3, r7
   1eff8:	d002      	beq.n	1f000 <z_set_prio+0x78>
   1effa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1effc:	2b00      	cmp	r3, #0
   1effe:	d1e5      	bne.n	1efcc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1f000:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   1f002:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1f006:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f008:	6254      	str	r4, [r2, #36]	; 0x24
}
   1f00a:	e7eb      	b.n	1efe4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1f00c:	73a1      	strb	r1, [r4, #14]
   1f00e:	2000      	movs	r0, #0
   1f010:	e7ec      	b.n	1efec <z_set_prio+0x64>
   1f012:	bf00      	nop
   1f014:	20002b24 	.word	0x20002b24

0001f018 <z_impl_k_thread_suspend>:
{
   1f018:	b570      	push	{r4, r5, r6, lr}
   1f01a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1f01c:	3018      	adds	r0, #24
   1f01e:	f006 fed9 	bl	25dd4 <z_abort_timeout>
	__asm__ volatile(
   1f022:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f026:	f3ef 8611 	mrs	r6, BASEPRI
   1f02a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f02e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1f032:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1f036:	7b63      	ldrb	r3, [r4, #13]
   1f038:	2a00      	cmp	r2, #0
   1f03a:	da05      	bge.n	1f048 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f040:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f042:	4620      	mov	r0, r4
   1f044:	f006 fdda 	bl	25bfc <sys_dlist_remove>
		update_cache(thread == _current);
   1f048:	4d0b      	ldr	r5, [pc, #44]	; (1f078 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1f04a:	7b63      	ldrb	r3, [r4, #13]
   1f04c:	68a8      	ldr	r0, [r5, #8]
   1f04e:	f043 0310 	orr.w	r3, r3, #16
   1f052:	7363      	strb	r3, [r4, #13]
   1f054:	1b03      	subs	r3, r0, r4
   1f056:	4258      	negs	r0, r3
   1f058:	4158      	adcs	r0, r3
   1f05a:	f7ff fe53 	bl	1ed04 <update_cache>
	__asm__ volatile(
   1f05e:	f386 8811 	msr	BASEPRI, r6
   1f062:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1f066:	68ab      	ldr	r3, [r5, #8]
   1f068:	42a3      	cmp	r3, r4
   1f06a:	d103      	bne.n	1f074 <z_impl_k_thread_suspend+0x5c>
}
   1f06c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1f070:	f006 bdff 	b.w	25c72 <z_reschedule_unlocked>
}
   1f074:	bd70      	pop	{r4, r5, r6, pc}
   1f076:	bf00      	nop
   1f078:	20002b24 	.word	0x20002b24

0001f07c <k_sched_unlock>:
{
   1f07c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f07e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f082:	f3ef 8411 	mrs	r4, BASEPRI
   1f086:	f383 8812 	msr	BASEPRI_MAX, r3
   1f08a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1f08e:	4b08      	ldr	r3, [pc, #32]	; (1f0b0 <k_sched_unlock+0x34>)
   1f090:	689a      	ldr	r2, [r3, #8]
   1f092:	7bd3      	ldrb	r3, [r2, #15]
   1f094:	3301      	adds	r3, #1
   1f096:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1f098:	2000      	movs	r0, #0
   1f09a:	f7ff fe33 	bl	1ed04 <update_cache>
	__asm__ volatile(
   1f09e:	f384 8811 	msr	BASEPRI, r4
   1f0a2:	f3bf 8f6f 	isb	sy
}
   1f0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1f0aa:	f006 bde2 	b.w	25c72 <z_reschedule_unlocked>
   1f0ae:	bf00      	nop
   1f0b0:	20002b24 	.word	0x20002b24

0001f0b4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1f0b4:	4b04      	ldr	r3, [pc, #16]	; (1f0c8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1f0b6:	2100      	movs	r1, #0
   1f0b8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1f0bc:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1f0c0:	4608      	mov	r0, r1
   1f0c2:	f7ff bdc7 	b.w	1ec54 <k_sched_time_slice_set>
   1f0c6:	bf00      	nop
   1f0c8:	20002b24 	.word	0x20002b24

0001f0cc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1f0ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f0d2:	f3ef 8511 	mrs	r5, BASEPRI
   1f0d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1f0de:	491a      	ldr	r1, [pc, #104]	; (1f148 <z_impl_k_yield+0x7c>)
   1f0e0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f0e2:	7b43      	ldrb	r3, [r0, #13]
   1f0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f0e8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f0ea:	f006 fd87 	bl	25bfc <sys_dlist_remove>
	}
	queue_thread(_current);
   1f0ee:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1f0f0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1f0f2:	4608      	mov	r0, r1
   1f0f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1f0f8:	735a      	strb	r2, [r3, #13]
   1f0fa:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f0fe:	4282      	cmp	r2, r0
   1f100:	d01c      	beq.n	1f13c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f102:	b1da      	cbz	r2, 1f13c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1f104:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1f106:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1f10a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1f10e:	42a6      	cmp	r6, r4
   1f110:	d00f      	beq.n	1f132 <z_impl_k_yield+0x66>
		return b2 - b1;
   1f112:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f114:	2c00      	cmp	r4, #0
   1f116:	dd0c      	ble.n	1f132 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1f118:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1f11a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1f11e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1f120:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1f122:	2001      	movs	r0, #1
   1f124:	f7ff fdee 	bl	1ed04 <update_cache>
   1f128:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1f12a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f12e:	f7f3 ba8f 	b.w	12650 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1f132:	42ba      	cmp	r2, r7
   1f134:	d002      	beq.n	1f13c <z_impl_k_yield+0x70>
   1f136:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f138:	2a00      	cmp	r2, #0
   1f13a:	d1e6      	bne.n	1f10a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1f13c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1f13e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1f142:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f144:	624b      	str	r3, [r1, #36]	; 0x24
}
   1f146:	e7ec      	b.n	1f122 <z_impl_k_yield+0x56>
   1f148:	20002b24 	.word	0x20002b24

0001f14c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1f14c:	ea50 0301 	orrs.w	r3, r0, r1
{
   1f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f154:	4605      	mov	r5, r0
   1f156:	460e      	mov	r6, r1
	if (ticks == 0) {
   1f158:	d103      	bne.n	1f162 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1f15a:	f7ff ffb7 	bl	1f0cc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1f15e:	2000      	movs	r0, #0
   1f160:	e033      	b.n	1f1ca <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1f162:	f06f 0401 	mvn.w	r4, #1
   1f166:	1a24      	subs	r4, r4, r0
   1f168:	f04f 33ff 	mov.w	r3, #4294967295
   1f16c:	eb63 0301 	sbc.w	r3, r3, r1
   1f170:	2c01      	cmp	r4, #1
   1f172:	f173 0300 	sbcs.w	r3, r3, #0
   1f176:	da02      	bge.n	1f17e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1f178:	f006 fe7c 	bl	25e74 <sys_clock_tick_get_32>
   1f17c:	1944      	adds	r4, r0, r5
   1f17e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f182:	f3ef 8811 	mrs	r8, BASEPRI
   1f186:	f383 8812 	msr	BASEPRI_MAX, r3
   1f18a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1f18e:	4f10      	ldr	r7, [pc, #64]	; (1f1d0 <z_tick_sleep+0x84>)
   1f190:	4b10      	ldr	r3, [pc, #64]	; (1f1d4 <z_tick_sleep+0x88>)
   1f192:	68b8      	ldr	r0, [r7, #8]
   1f194:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1f196:	f7ff fea5 	bl	1eee4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1f19a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f19c:	490e      	ldr	r1, [pc, #56]	; (1f1d8 <z_tick_sleep+0x8c>)
   1f19e:	462a      	mov	r2, r5
   1f1a0:	4633      	mov	r3, r6
   1f1a2:	3018      	adds	r0, #24
   1f1a4:	f000 f936 	bl	1f414 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1f1a8:	68ba      	ldr	r2, [r7, #8]
   1f1aa:	7b53      	ldrb	r3, [r2, #13]
   1f1ac:	f043 0310 	orr.w	r3, r3, #16
   1f1b0:	7353      	strb	r3, [r2, #13]
   1f1b2:	4640      	mov	r0, r8
   1f1b4:	f7f3 fa4c 	bl	12650 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1f1b8:	f006 fe5c 	bl	25e74 <sys_clock_tick_get_32>
   1f1bc:	1a20      	subs	r0, r4, r0
   1f1be:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1f1c2:	2801      	cmp	r0, #1
   1f1c4:	f173 0300 	sbcs.w	r3, r3, #0
   1f1c8:	dbc9      	blt.n	1f15e <z_tick_sleep+0x12>
}
   1f1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f1ce:	bf00      	nop
   1f1d0:	20002b24 	.word	0x20002b24
   1f1d4:	20002b54 	.word	0x20002b54
   1f1d8:	00025cb3 	.word	0x00025cb3

0001f1dc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f1dc:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f1e0:	bf08      	it	eq
   1f1e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f1e6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f1e8:	d106      	bne.n	1f1f8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1f1ea:	4b08      	ldr	r3, [pc, #32]	; (1f20c <z_impl_k_sleep+0x30>)
   1f1ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1f1ee:	f7ff ff13 	bl	1f018 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1f1f2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1f1f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1f1f8:	f7ff ffa8 	bl	1f14c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1f1fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f200:	fb80 0303 	smull	r0, r3, r0, r3
   1f204:	0bc0      	lsrs	r0, r0, #15
   1f206:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1f20a:	e7f4      	b.n	1f1f6 <z_impl_k_sleep+0x1a>
   1f20c:	20002b24 	.word	0x20002b24

0001f210 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1f210:	4b01      	ldr	r3, [pc, #4]	; (1f218 <z_impl_z_current_get+0x8>)
   1f212:	6898      	ldr	r0, [r3, #8]
   1f214:	4770      	bx	lr
   1f216:	bf00      	nop
   1f218:	20002b24 	.word	0x20002b24

0001f21c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1f21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f220:	4604      	mov	r4, r0
   1f222:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f226:	f3ef 8611 	mrs	r6, BASEPRI
   1f22a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f22e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1f232:	7b03      	ldrb	r3, [r0, #12]
   1f234:	07d9      	lsls	r1, r3, #31
   1f236:	d50b      	bpl.n	1f250 <z_thread_abort+0x34>
	__asm__ volatile(
   1f238:	f386 8811 	msr	BASEPRI, r6
   1f23c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1f240:	4040      	eors	r0, r0
   1f242:	f380 8811 	msr	BASEPRI, r0
   1f246:	f04f 0004 	mov.w	r0, #4
   1f24a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1f24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1f250:	7b43      	ldrb	r3, [r0, #13]
   1f252:	071a      	lsls	r2, r3, #28
   1f254:	d504      	bpl.n	1f260 <z_thread_abort+0x44>
   1f256:	f386 8811 	msr	BASEPRI, r6
   1f25a:	f3bf 8f6f 	isb	sy
   1f25e:	e7f5      	b.n	1f24c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1f260:	f023 0220 	bic.w	r2, r3, #32
   1f264:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1f268:	09d2      	lsrs	r2, r2, #7
   1f26a:	d120      	bne.n	1f2ae <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1f26c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1f26e:	68a3      	ldr	r3, [r4, #8]
   1f270:	b113      	cbz	r3, 1f278 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1f272:	4620      	mov	r0, r4
   1f274:	f006 fcca 	bl	25c0c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1f278:	f104 0018 	add.w	r0, r4, #24
   1f27c:	f006 fdaa 	bl	25dd4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f280:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1f284:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1f288:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f28a:	42bd      	cmp	r5, r7
   1f28c:	d000      	beq.n	1f290 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f28e:	b9b5      	cbnz	r5, 1f2be <z_thread_abort+0xa2>
		update_cache(1);
   1f290:	2001      	movs	r0, #1
   1f292:	f7ff fd37 	bl	1ed04 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1f296:	4b10      	ldr	r3, [pc, #64]	; (1f2d8 <z_thread_abort+0xbc>)
   1f298:	689b      	ldr	r3, [r3, #8]
   1f29a:	42a3      	cmp	r3, r4
   1f29c:	d1db      	bne.n	1f256 <z_thread_abort+0x3a>
   1f29e:	f3ef 8305 	mrs	r3, IPSR
   1f2a2:	2b00      	cmp	r3, #0
   1f2a4:	d1d7      	bne.n	1f256 <z_thread_abort+0x3a>
   1f2a6:	4630      	mov	r0, r6
   1f2a8:	f7f3 f9d2 	bl	12650 <arch_swap>
	return ret;
   1f2ac:	e7d3      	b.n	1f256 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f2ae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1f2b2:	f043 0308 	orr.w	r3, r3, #8
   1f2b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f2b8:	f006 fca0 	bl	25bfc <sys_dlist_remove>
}
   1f2bc:	e7d7      	b.n	1f26e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1f2be:	4628      	mov	r0, r5
   1f2c0:	f006 fca4 	bl	25c0c <unpend_thread_no_timeout>
   1f2c4:	f105 0018 	add.w	r0, r5, #24
   1f2c8:	f006 fd84 	bl	25dd4 <z_abort_timeout>
   1f2cc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1f2d0:	4628      	mov	r0, r5
   1f2d2:	f7ff fdb3 	bl	1ee3c <ready_thread>
   1f2d6:	e7d7      	b.n	1f288 <z_thread_abort+0x6c>
   1f2d8:	20002b24 	.word	0x20002b24

0001f2dc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1f2dc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1f2de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1f2e2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1f2e4:	e9cd 6700 	strd	r6, r7, [sp]
   1f2e8:	f7ff fe3a 	bl	1ef60 <z_pend_curr>

	if (data != NULL) {
   1f2ec:	b11c      	cbz	r4, 1f2f6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1f2ee:	4b03      	ldr	r3, [pc, #12]	; (1f2fc <z_sched_wait+0x20>)
   1f2f0:	689b      	ldr	r3, [r3, #8]
   1f2f2:	695b      	ldr	r3, [r3, #20]
   1f2f4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1f2f6:	b002      	add	sp, #8
   1f2f8:	bdd0      	pop	{r4, r6, r7, pc}
   1f2fa:	bf00      	nop
   1f2fc:	20002b24 	.word	0x20002b24

0001f300 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1f300:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1f302:	4806      	ldr	r0, [pc, #24]	; (1f31c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1f304:	4a06      	ldr	r2, [pc, #24]	; (1f320 <z_data_copy+0x20>)
   1f306:	4907      	ldr	r1, [pc, #28]	; (1f324 <z_data_copy+0x24>)
   1f308:	1a12      	subs	r2, r2, r0
   1f30a:	f006 fa1d 	bl	25748 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f30e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1f312:	4a05      	ldr	r2, [pc, #20]	; (1f328 <z_data_copy+0x28>)
   1f314:	4905      	ldr	r1, [pc, #20]	; (1f32c <z_data_copy+0x2c>)
   1f316:	4806      	ldr	r0, [pc, #24]	; (1f330 <z_data_copy+0x30>)
   1f318:	f006 ba16 	b.w	25748 <z_early_memcpy>
   1f31c:	20000000 	.word	0x20000000
   1f320:	20000c98 	.word	0x20000c98
   1f324:	0002794c 	.word	0x0002794c
   1f328:	00000000 	.word	0x00000000
   1f32c:	0002794c 	.word	0x0002794c
   1f330:	20000000 	.word	0x20000000

0001f334 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1f334:	4b03      	ldr	r3, [pc, #12]	; (1f344 <elapsed+0x10>)
   1f336:	681b      	ldr	r3, [r3, #0]
   1f338:	b90b      	cbnz	r3, 1f33e <elapsed+0xa>
   1f33a:	f7fd bd7f 	b.w	1ce3c <sys_clock_elapsed>
}
   1f33e:	2000      	movs	r0, #0
   1f340:	4770      	bx	lr
   1f342:	bf00      	nop
   1f344:	20002b60 	.word	0x20002b60

0001f348 <next_timeout>:
	return list->head == list;
   1f348:	4b10      	ldr	r3, [pc, #64]	; (1f38c <__kernel_ram_size+0x24>)

static int32_t next_timeout(void)
{
   1f34a:	b510      	push	{r4, lr}
   1f34c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f34e:	429c      	cmp	r4, r3
   1f350:	bf08      	it	eq
   1f352:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1f354:	f7ff ffee 	bl	1f334 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1f358:	b1a4      	cbz	r4, 1f384 <__kernel_ram_size+0x1c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1f35a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1f35e:	1a1b      	subs	r3, r3, r0
   1f360:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1f364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1f368:	f170 0200 	sbcs.w	r2, r0, #0
   1f36c:	da0a      	bge.n	1f384 <__kernel_ram_size+0x1c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1f36e:	2800      	cmp	r0, #0
   1f370:	bfac      	ite	ge
   1f372:	4618      	movge	r0, r3
   1f374:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1f376:	4b06      	ldr	r3, [pc, #24]	; (1f390 <__kernel_ram_size+0x28>)
   1f378:	691b      	ldr	r3, [r3, #16]
   1f37a:	b113      	cbz	r3, 1f382 <__kernel_ram_size+0x1a>
   1f37c:	4298      	cmp	r0, r3
   1f37e:	bfa8      	it	ge
   1f380:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1f382:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1f384:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f388:	e7f5      	b.n	1f376 <__kernel_ram_size+0xe>
   1f38a:	bf00      	nop
   1f38c:	20000abc 	.word	0x20000abc
   1f390:	20002b24 	.word	0x20002b24

0001f394 <remove_timeout>:
{
   1f394:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1f396:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f398:	b168      	cbz	r0, 1f3b6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1f39a:	4a0a      	ldr	r2, [pc, #40]	; (1f3c4 <remove_timeout+0x30>)
   1f39c:	6852      	ldr	r2, [r2, #4]
   1f39e:	4290      	cmp	r0, r2
   1f3a0:	d009      	beq.n	1f3b6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1f3a2:	b143      	cbz	r3, 1f3b6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1f3a4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1f3a8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1f3ac:	1912      	adds	r2, r2, r4
   1f3ae:	eb41 0105 	adc.w	r1, r1, r5
   1f3b2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1f3b6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1f3b8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f3ba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f3bc:	2300      	movs	r3, #0
	node->prev = NULL;
   1f3be:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f3c2:	bd30      	pop	{r4, r5, pc}
   1f3c4:	20000abc 	.word	0x20000abc

0001f3c8 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   1f3c8:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1f3ca:	6804      	ldr	r4, [r0, #0]
   1f3cc:	b1e4      	cbz	r4, 1f408 <timeout_rem+0x40>
	return list->head == list;
   1f3ce:	4a10      	ldr	r2, [pc, #64]	; (1f410 <timeout_rem+0x48>)
   1f3d0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f3d2:	4293      	cmp	r3, r2
   1f3d4:	d015      	beq.n	1f402 <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   1f3d6:	2400      	movs	r4, #0
   1f3d8:	6851      	ldr	r1, [r2, #4]
   1f3da:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1f3dc:	b933      	cbnz	r3, 1f3ec <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1f3de:	f7ff ffa9 	bl	1f334 <elapsed>
   1f3e2:	4601      	mov	r1, r0
   1f3e4:	1a20      	subs	r0, r4, r0
   1f3e6:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   1f3ea:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   1f3ec:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   1f3f0:	18a4      	adds	r4, r4, r2
   1f3f2:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   1f3f6:	4283      	cmp	r3, r0
   1f3f8:	d0f1      	beq.n	1f3de <timeout_rem+0x16>
   1f3fa:	428b      	cmp	r3, r1
   1f3fc:	d0ef      	beq.n	1f3de <timeout_rem+0x16>
   1f3fe:	681b      	ldr	r3, [r3, #0]
   1f400:	e7ec      	b.n	1f3dc <timeout_rem+0x14>
   1f402:	2400      	movs	r4, #0
   1f404:	4625      	mov	r5, r4
   1f406:	e7ea      	b.n	1f3de <timeout_rem+0x16>
		return 0;
   1f408:	4620      	mov	r0, r4
   1f40a:	4621      	mov	r1, r4
   1f40c:	e7ed      	b.n	1f3ea <timeout_rem+0x22>
   1f40e:	bf00      	nop
   1f410:	20000abc 	.word	0x20000abc

0001f414 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f414:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f418:	bf08      	it	eq
   1f41a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1f41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f420:	4604      	mov	r4, r0
   1f422:	461f      	mov	r7, r3
   1f424:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f426:	d067      	beq.n	1f4f8 <z_add_timeout+0xe4>
	to->fn = fn;
   1f428:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1f42a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f42e:	f3ef 8611 	mrs	r6, BASEPRI
   1f432:	f383 8812 	msr	BASEPRI_MAX, r3
   1f436:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1f43a:	f06f 0201 	mvn.w	r2, #1
   1f43e:	1b53      	subs	r3, r2, r5
   1f440:	f04f 3cff 	mov.w	ip, #4294967295
   1f444:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1f448:	2b00      	cmp	r3, #0
   1f44a:	db1b      	blt.n	1f484 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1f44c:	4b2b      	ldr	r3, [pc, #172]	; (1f4fc <z_add_timeout+0xe8>)
   1f44e:	e9d3 1300 	ldrd	r1, r3, [r3]
   1f452:	1a52      	subs	r2, r2, r1
   1f454:	eb6c 0303 	sbc.w	r3, ip, r3
   1f458:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   1f45a:	eb63 0307 	sbc.w	r3, r3, r7
   1f45e:	2d01      	cmp	r5, #1
   1f460:	f173 0200 	sbcs.w	r2, r3, #0
   1f464:	bfbc      	itt	lt
   1f466:	2501      	movlt	r5, #1
   1f468:	2300      	movlt	r3, #0
   1f46a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1f46e:	4824      	ldr	r0, [pc, #144]	; (1f500 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1f470:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f474:	4283      	cmp	r3, r0
   1f476:	d118      	bne.n	1f4aa <z_add_timeout+0x96>
	node->prev = tail;
   1f478:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1f47c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1f480:	6044      	str	r4, [r0, #4]
}
   1f482:	e026      	b.n	1f4d2 <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   1f484:	f7ff ff56 	bl	1f334 <elapsed>
   1f488:	3501      	adds	r5, #1
   1f48a:	f147 0700 	adc.w	r7, r7, #0
   1f48e:	182d      	adds	r5, r5, r0
   1f490:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1f494:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1f498:	e7e9      	b.n	1f46e <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   1f49a:	1a52      	subs	r2, r2, r1
   1f49c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1f4a0:	459c      	cmp	ip, r3
   1f4a2:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1f4a6:	d0e7      	beq.n	1f478 <z_add_timeout+0x64>
   1f4a8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1f4aa:	2b00      	cmp	r3, #0
   1f4ac:	d0e4      	beq.n	1f478 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1f4ae:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1f4b2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1f4b6:	428a      	cmp	r2, r1
   1f4b8:	eb75 0e07 	sbcs.w	lr, r5, r7
   1f4bc:	daed      	bge.n	1f49a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1f4be:	1a8a      	subs	r2, r1, r2
   1f4c0:	eb67 0505 	sbc.w	r5, r7, r5
   1f4c4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1f4c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f4ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1f4ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f4d0:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1f4d2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f4d4:	4283      	cmp	r3, r0
   1f4d6:	d00b      	beq.n	1f4f0 <z_add_timeout+0xdc>
		if (to == first()) {
   1f4d8:	429c      	cmp	r4, r3
   1f4da:	d109      	bne.n	1f4f0 <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   1f4dc:	f7ff ff34 	bl	1f348 <next_timeout>
			if (next_time == 0 ||
   1f4e0:	b118      	cbz	r0, 1f4ea <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1f4e2:	4b08      	ldr	r3, [pc, #32]	; (1f504 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1f4e4:	691b      	ldr	r3, [r3, #16]
   1f4e6:	4283      	cmp	r3, r0
   1f4e8:	d002      	beq.n	1f4f0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1f4ea:	2100      	movs	r1, #0
   1f4ec:	f7fd fc74 	bl	1cdd8 <sys_clock_set_timeout>
	__asm__ volatile(
   1f4f0:	f386 8811 	msr	BASEPRI, r6
   1f4f4:	f3bf 8f6f 	isb	sy
}
   1f4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4fa:	bf00      	nop
   1f4fc:	200022c0 	.word	0x200022c0
   1f500:	20000abc 	.word	0x20000abc
   1f504:	20002b24 	.word	0x20002b24

0001f508 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1f508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f50c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1f50e:	f7ff fc53 	bl	1edb8 <z_time_slice>
	__asm__ volatile(
   1f512:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f516:	f3ef 8511 	mrs	r5, BASEPRI
   1f51a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f51e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1f522:	4f24      	ldr	r7, [pc, #144]	; (1f5b4 <sys_clock_announce+0xac>)
	return list->head == list;
   1f524:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1f5b8 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1f528:	4e24      	ldr	r6, [pc, #144]	; (1f5bc <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
   1f52a:	603c      	str	r4, [r7, #0]
   1f52c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f530:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f532:	4540      	cmp	r0, r8
		curr_tick += dt;
   1f534:	e9d6 2e00 	ldrd	r2, lr, [r6]
   1f538:	ea4f 71e3 	mov.w	r1, r3, asr #31
   1f53c:	d00b      	beq.n	1f556 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f53e:	b150      	cbz	r0, 1f556 <sys_clock_announce+0x4e>
   1f540:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   1f544:	42a3      	cmp	r3, r4
   1f546:	eb71 090c 	sbcs.w	r9, r1, ip
   1f54a:	da16      	bge.n	1f57a <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1f54c:	1ae4      	subs	r4, r4, r3
   1f54e:	eb6c 0c01 	sbc.w	ip, ip, r1
   1f552:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1f556:	189b      	adds	r3, r3, r2
   1f558:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1f55c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1f55e:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   1f562:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1f564:	f7ff fef0 	bl	1f348 <next_timeout>
   1f568:	4621      	mov	r1, r4
   1f56a:	f7fd fc35 	bl	1cdd8 <sys_clock_set_timeout>
	__asm__ volatile(
   1f56e:	f385 8811 	msr	BASEPRI, r5
   1f572:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1f576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1f57a:	18a2      	adds	r2, r4, r2
   1f57c:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
   1f580:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   1f584:	2300      	movs	r3, #0
   1f586:	2200      	movs	r2, #0
   1f588:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1f58c:	f7ff ff02 	bl	1f394 <remove_timeout>
   1f590:	f385 8811 	msr	BASEPRI, r5
   1f594:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1f598:	6883      	ldr	r3, [r0, #8]
   1f59a:	4798      	blx	r3
	__asm__ volatile(
   1f59c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f5a0:	f3ef 8511 	mrs	r5, BASEPRI
   1f5a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f5a8:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1f5ac:	683b      	ldr	r3, [r7, #0]
   1f5ae:	1b1b      	subs	r3, r3, r4
   1f5b0:	603b      	str	r3, [r7, #0]
   1f5b2:	e7bb      	b.n	1f52c <sys_clock_announce+0x24>
   1f5b4:	20002b60 	.word	0x20002b60
   1f5b8:	20000abc 	.word	0x20000abc
   1f5bc:	200022c0 	.word	0x200022c0

0001f5c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1f5c0:	b510      	push	{r4, lr}
   1f5c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f5c6:	f3ef 8411 	mrs	r4, BASEPRI
   1f5ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1f5ce:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1f5d2:	f7ff feaf 	bl	1f334 <elapsed>
   1f5d6:	4b06      	ldr	r3, [pc, #24]	; (1f5f0 <sys_clock_tick_get+0x30>)
   1f5d8:	4601      	mov	r1, r0
   1f5da:	e9d3 0300 	ldrd	r0, r3, [r3]
   1f5de:	1808      	adds	r0, r1, r0
   1f5e0:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   1f5e4:	f384 8811 	msr	BASEPRI, r4
   1f5e8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1f5ec:	bd10      	pop	{r4, pc}
   1f5ee:	bf00      	nop
   1f5f0:	200022c0 	.word	0x200022c0

0001f5f4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1f5f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f5f8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1f5fa:	4b29      	ldr	r3, [pc, #164]	; (1f6a0 <z_impl_k_poll+0xac>)
   1f5fc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1f5fe:	2301      	movs	r3, #1
   1f600:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1f604:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1f608:	ea52 0305 	orrs.w	r3, r2, r5
{
   1f60c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1f60e:	bf0c      	ite	eq
   1f610:	2301      	moveq	r3, #1
   1f612:	2300      	movne	r3, #0
   1f614:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1f618:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1f61a:	f006 fc8f 	bl	25f3c <register_events>
   1f61e:	4681      	mov	r9, r0
	__asm__ volatile(
   1f620:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f624:	f3ef 8a11 	mrs	sl, BASEPRI
   1f628:	f383 8812 	msr	BASEPRI_MAX, r3
   1f62c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1f630:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1f634:	b964      	cbnz	r4, 1f650 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1f636:	4601      	mov	r1, r0
   1f638:	4652      	mov	r2, sl
   1f63a:	4640      	mov	r0, r8
   1f63c:	f006 fd4f 	bl	260de <clear_event_registrations>
	__asm__ volatile(
   1f640:	f38a 8811 	msr	BASEPRI, sl
   1f644:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1f648:	4620      	mov	r0, r4
   1f64a:	b002      	add	sp, #8
   1f64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1f650:	2300      	movs	r3, #0
   1f652:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f656:	ea56 0305 	orrs.w	r3, r6, r5
   1f65a:	d106      	bne.n	1f66a <z_impl_k_poll+0x76>
   1f65c:	f38a 8811 	msr	BASEPRI, sl
   1f660:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f664:	f06f 040a 	mvn.w	r4, #10
   1f668:	e7ee      	b.n	1f648 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f66a:	e9cd 6500 	strd	r6, r5, [sp]
   1f66e:	4a0d      	ldr	r2, [pc, #52]	; (1f6a4 <z_impl_k_poll+0xb0>)
   1f670:	480d      	ldr	r0, [pc, #52]	; (1f6a8 <z_impl_k_poll+0xb4>)
   1f672:	4651      	mov	r1, sl
   1f674:	f7ff fc74 	bl	1ef60 <z_pend_curr>
   1f678:	4604      	mov	r4, r0
	__asm__ volatile(
   1f67a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f67e:	f3ef 8511 	mrs	r5, BASEPRI
   1f682:	f383 8812 	msr	BASEPRI_MAX, r3
   1f686:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1f68a:	462a      	mov	r2, r5
   1f68c:	4649      	mov	r1, r9
   1f68e:	4640      	mov	r0, r8
   1f690:	f006 fd25 	bl	260de <clear_event_registrations>
	__asm__ volatile(
   1f694:	f385 8811 	msr	BASEPRI, r5
   1f698:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f69c:	e7d4      	b.n	1f648 <z_impl_k_poll+0x54>
   1f69e:	bf00      	nop
   1f6a0:	20002b24 	.word	0x20002b24
   1f6a4:	20000ac4 	.word	0x20000ac4
   1f6a8:	20003483 	.word	0x20003483

0001f6ac <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1f6ac:	b538      	push	{r3, r4, r5, lr}
   1f6ae:	4603      	mov	r3, r0
	__asm__ volatile(
   1f6b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f6b4:	f3ef 8511 	mrs	r5, BASEPRI
   1f6b8:	f382 8812 	msr	BASEPRI_MAX, r2
   1f6bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1f6c0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1f6c2:	2101      	movs	r1, #1
   1f6c4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1f6c6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f6c8:	4283      	cmp	r3, r0
   1f6ca:	d106      	bne.n	1f6da <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1f6cc:	f385 8811 	msr	BASEPRI, r5
   1f6d0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1f6d4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1f6d6:	4620      	mov	r0, r4
   1f6d8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1f6da:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f6de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f6e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f6e2:	2300      	movs	r3, #0
	node->prev = NULL;
   1f6e4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f6e8:	f006 fc9f 	bl	2602a <signal_poll_event>
	z_reschedule(&lock, key);
   1f6ec:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f6ee:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f6f0:	4801      	ldr	r0, [pc, #4]	; (1f6f8 <z_impl_k_poll_signal_raise+0x4c>)
   1f6f2:	f7ff fae1 	bl	1ecb8 <z_reschedule>
	return rc;
   1f6f6:	e7ee      	b.n	1f6d6 <z_impl_k_poll_signal_raise+0x2a>
   1f6f8:	20003483 	.word	0x20003483

0001f6fc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1f6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f6fe:	4606      	mov	r6, r0
   1f700:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1f702:	f006 f8b2 	bl	2586a <k_is_in_isr>
   1f706:	b978      	cbnz	r0, 1f728 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1f708:	4b0b      	ldr	r3, [pc, #44]	; (1f738 <z_thread_aligned_alloc+0x3c>)
   1f70a:	689b      	ldr	r3, [r3, #8]
   1f70c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1f70e:	b17c      	cbz	r4, 1f730 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f710:	1d2a      	adds	r2, r5, #4
   1f712:	d209      	bcs.n	1f728 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1f714:	2000      	movs	r0, #0
   1f716:	2100      	movs	r1, #0
   1f718:	e9cd 0100 	strd	r0, r1, [sp]
   1f71c:	f046 0104 	orr.w	r1, r6, #4
   1f720:	4620      	mov	r0, r4
   1f722:	f006 f81b 	bl	2575c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1f726:	b908      	cbnz	r0, 1f72c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1f728:	2400      	movs	r4, #0
	}

	return ret;
   1f72a:	e001      	b.n	1f730 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1f72c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1f72e:	1d04      	adds	r4, r0, #4
}
   1f730:	4620      	mov	r0, r4
   1f732:	b002      	add	sp, #8
   1f734:	bd70      	pop	{r4, r5, r6, pc}
   1f736:	bf00      	nop
   1f738:	20002b24 	.word	0x20002b24

0001f73c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1f73c:	4a02      	ldr	r2, [pc, #8]	; (1f748 <boot_banner+0xc>)
   1f73e:	4903      	ldr	r1, [pc, #12]	; (1f74c <boot_banner+0x10>)
   1f740:	4803      	ldr	r0, [pc, #12]	; (1f750 <boot_banner+0x14>)
   1f742:	f000 b89a 	b.w	1f87a <printk>
   1f746:	bf00      	nop
   1f748:	0002761e 	.word	0x0002761e
   1f74c:	0002790c 	.word	0x0002790c
   1f750:	0002791b 	.word	0x0002791b

0001f754 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1f754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1f756:	4b09      	ldr	r3, [pc, #36]	; (1f77c <k_sys_work_q_init+0x28>)
   1f758:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1f75a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1f75c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1f75e:	9300      	str	r3, [sp, #0]
   1f760:	4907      	ldr	r1, [pc, #28]	; (1f780 <k_sys_work_q_init+0x2c>)
   1f762:	4808      	ldr	r0, [pc, #32]	; (1f784 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1f764:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1f768:	f04f 33ff 	mov.w	r3, #4294967295
   1f76c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f770:	f7ff f9c0 	bl	1eaf4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1f774:	4620      	mov	r0, r4
   1f776:	b004      	add	sp, #16
   1f778:	bd10      	pop	{r4, pc}
   1f77a:	bf00      	nop
   1f77c:	00027942 	.word	0x00027942
   1f780:	20005f00 	.word	0x20005f00
   1f784:	200022c8 	.word	0x200022c8

0001f788 <hex2char>:
	return 0;
}

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   1f788:	2809      	cmp	r0, #9
   1f78a:	d803      	bhi.n	1f794 <hex2char+0xc>
		*c = x + '0';
   1f78c:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   1f78e:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   1f790:	2000      	movs	r0, #0
   1f792:	4770      	bx	lr
	} else  if (x <= 15) {
   1f794:	280f      	cmp	r0, #15
   1f796:	d801      	bhi.n	1f79c <hex2char+0x14>
		*c = x - 10 + 'a';
   1f798:	3057      	adds	r0, #87	; 0x57
   1f79a:	e7f8      	b.n	1f78e <hex2char+0x6>
		return -EINVAL;
   1f79c:	f06f 0015 	mvn.w	r0, #21
}
   1f7a0:	4770      	bx	lr

0001f7a2 <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
   1f7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (hexlen < (buflen * 2 + 1)) {
   1f7a6:	004e      	lsls	r6, r1, #1
{
   1f7a8:	460c      	mov	r4, r1
	if (hexlen < (buflen * 2 + 1)) {
   1f7aa:	1c71      	adds	r1, r6, #1
   1f7ac:	4299      	cmp	r1, r3
   1f7ae:	d903      	bls.n	1f7b8 <bin2hex+0x16>
		return 0;
   1f7b0:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   1f7b2:	4630      	mov	r0, r6
   1f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f7b8:	4603      	mov	r3, r0
   1f7ba:	1c55      	adds	r5, r2, #1
   1f7bc:	1907      	adds	r7, r0, r4
	for (size_t i = 0; i < buflen; i++) {
   1f7be:	42bb      	cmp	r3, r7
   1f7c0:	d103      	bne.n	1f7ca <bin2hex+0x28>
	hex[2 * buflen] = '\0';
   1f7c2:	2300      	movs	r3, #0
   1f7c4:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   1f7c8:	e7f3      	b.n	1f7b2 <bin2hex+0x10>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   1f7ca:	7818      	ldrb	r0, [r3, #0]
   1f7cc:	1e69      	subs	r1, r5, #1
   1f7ce:	0900      	lsrs	r0, r0, #4
   1f7d0:	f7ff ffda 	bl	1f788 <hex2char>
   1f7d4:	2800      	cmp	r0, #0
   1f7d6:	4698      	mov	r8, r3
   1f7d8:	dbea      	blt.n	1f7b0 <bin2hex+0xe>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   1f7da:	f898 0000 	ldrb.w	r0, [r8]
   1f7de:	4629      	mov	r1, r5
   1f7e0:	f000 000f 	and.w	r0, r0, #15
   1f7e4:	f7ff ffd0 	bl	1f788 <hex2char>
   1f7e8:	2800      	cmp	r0, #0
   1f7ea:	f103 0301 	add.w	r3, r3, #1
   1f7ee:	f105 0502 	add.w	r5, r5, #2
   1f7f2:	dae4      	bge.n	1f7be <bin2hex+0x1c>
   1f7f4:	e7dc      	b.n	1f7b0 <bin2hex+0xe>

0001f7f6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f7f6:	4603      	mov	r3, r0
   1f7f8:	b140      	cbz	r0, 1f80c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f7fa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f7fc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f800:	2a02      	cmp	r2, #2
   1f802:	d006      	beq.n	1f812 <sys_notify_validate+0x1c>
   1f804:	2a03      	cmp	r2, #3
   1f806:	d004      	beq.n	1f812 <sys_notify_validate+0x1c>
   1f808:	2a01      	cmp	r2, #1
   1f80a:	d005      	beq.n	1f818 <sys_notify_validate+0x22>
		return -EINVAL;
   1f80c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f810:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f812:	681a      	ldr	r2, [r3, #0]
   1f814:	2a00      	cmp	r2, #0
   1f816:	d0f9      	beq.n	1f80c <sys_notify_validate+0x16>
		notify->result = 0;
   1f818:	2000      	movs	r0, #0
   1f81a:	6098      	str	r0, [r3, #8]
   1f81c:	4770      	bx	lr

0001f81e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f81e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f820:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f824:	2a02      	cmp	r2, #2
{
   1f826:	b510      	push	{r4, lr}
   1f828:	4603      	mov	r3, r0
	notify->result = res;
   1f82a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f82c:	d00a      	beq.n	1f844 <sys_notify_finalize+0x26>
   1f82e:	2a03      	cmp	r2, #3
   1f830:	d10b      	bne.n	1f84a <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f832:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f834:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f836:	2200      	movs	r2, #0
   1f838:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f83a:	b108      	cbz	r0, 1f840 <sys_notify_finalize+0x22>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1f83c:	f7ff ff36 	bl	1f6ac <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f840:	4620      	mov	r0, r4
   1f842:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f844:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f846:	2400      	movs	r4, #0
		break;
   1f848:	e7f5      	b.n	1f836 <sys_notify_finalize+0x18>
	switch (method) {
   1f84a:	2400      	movs	r4, #0
   1f84c:	4620      	mov	r0, r4
   1f84e:	e7f2      	b.n	1f836 <sys_notify_finalize+0x18>

0001f850 <arch_printk_char_out>:
}
   1f850:	2000      	movs	r0, #0
   1f852:	4770      	bx	lr

0001f854 <str_out>:
{
   1f854:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f856:	688a      	ldr	r2, [r1, #8]
   1f858:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1f85a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f85c:	b114      	cbz	r4, 1f864 <str_out+0x10>
   1f85e:	684b      	ldr	r3, [r1, #4]
   1f860:	4293      	cmp	r3, r2
   1f862:	dc01      	bgt.n	1f868 <str_out+0x14>
		ctx->count++;
   1f864:	608d      	str	r5, [r1, #8]
}
   1f866:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f868:	3b01      	subs	r3, #1
   1f86a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f86c:	bf08      	it	eq
   1f86e:	2200      	moveq	r2, #0
   1f870:	608d      	str	r5, [r1, #8]
   1f872:	bf0c      	ite	eq
   1f874:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f876:	54a0      	strbne	r0, [r4, r2]
   1f878:	e7f5      	b.n	1f866 <str_out+0x12>

0001f87a <printk>:
{
   1f87a:	b40f      	push	{r0, r1, r2, r3}
   1f87c:	b507      	push	{r0, r1, r2, lr}
   1f87e:	a904      	add	r1, sp, #16
   1f880:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f884:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1f886:	f7f1 fad9 	bl	10e3c <vprintk>
}
   1f88a:	b003      	add	sp, #12
   1f88c:	f85d eb04 	ldr.w	lr, [sp], #4
   1f890:	b004      	add	sp, #16
   1f892:	4770      	bx	lr

0001f894 <snprintk>:
{
   1f894:	b40c      	push	{r2, r3}
   1f896:	b507      	push	{r0, r1, r2, lr}
   1f898:	ab04      	add	r3, sp, #16
   1f89a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f89e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f8a0:	f7f1 fada 	bl	10e58 <vsnprintk>
}
   1f8a4:	b003      	add	sp, #12
   1f8a6:	f85d eb04 	ldr.w	lr, [sp], #4
   1f8aa:	b002      	add	sp, #8
   1f8ac:	4770      	bx	lr

0001f8ae <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f8ae:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f8b0:	f013 0307 	ands.w	r3, r3, #7
   1f8b4:	d105      	bne.n	1f8c2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f8b6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1f8b8:	2b00      	cmp	r3, #0
   1f8ba:	bf0c      	ite	eq
   1f8bc:	2000      	moveq	r0, #0
   1f8be:	2003      	movne	r0, #3
   1f8c0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f8c2:	2b02      	cmp	r3, #2
   1f8c4:	d105      	bne.n	1f8d2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f8c6:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1f8c8:	2b00      	cmp	r3, #0
   1f8ca:	bf14      	ite	ne
   1f8cc:	2000      	movne	r0, #0
   1f8ce:	2004      	moveq	r0, #4
   1f8d0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f8d2:	2b01      	cmp	r3, #1
   1f8d4:	d105      	bne.n	1f8e2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f8d6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1f8d8:	2b00      	cmp	r3, #0
   1f8da:	bf0c      	ite	eq
   1f8dc:	2000      	moveq	r0, #0
   1f8de:	2005      	movne	r0, #5
   1f8e0:	4770      	bx	lr
	int evt = EVT_NOP;
   1f8e2:	2000      	movs	r0, #0
}
   1f8e4:	4770      	bx	lr

0001f8e6 <notify_one>:
{
   1f8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8ea:	460d      	mov	r5, r1
   1f8ec:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f8ee:	4619      	mov	r1, r3
   1f8f0:	1d28      	adds	r0, r5, #4
{
   1f8f2:	4690      	mov	r8, r2
   1f8f4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f8f6:	f7ff ff92 	bl	1f81e <sys_notify_finalize>
	if (cb) {
   1f8fa:	4604      	mov	r4, r0
   1f8fc:	b138      	cbz	r0, 1f90e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f8fe:	4633      	mov	r3, r6
   1f900:	4642      	mov	r2, r8
   1f902:	4629      	mov	r1, r5
   1f904:	4638      	mov	r0, r7
   1f906:	46a4      	mov	ip, r4
}
   1f908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f90c:	4760      	bx	ip
}
   1f90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f912 <transition_complete>:
{
   1f912:	b410      	push	{r4}
	__asm__ volatile(
   1f914:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f918:	f3ef 8211 	mrs	r2, BASEPRI
   1f91c:	f384 8812 	msr	BASEPRI_MAX, r4
   1f920:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f924:	6141      	str	r1, [r0, #20]
}
   1f926:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f928:	2101      	movs	r1, #1
   1f92a:	f7f1 baab 	b.w	10e84 <process_event>

0001f92e <validate_args>:
{
   1f92e:	b510      	push	{r4, lr}
   1f930:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f932:	b140      	cbz	r0, 1f946 <validate_args+0x18>
   1f934:	b139      	cbz	r1, 1f946 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f936:	1d08      	adds	r0, r1, #4
   1f938:	f7ff ff5d 	bl	1f7f6 <sys_notify_validate>
	if ((rv == 0)
   1f93c:	b928      	cbnz	r0, 1f94a <validate_args+0x1c>
	    && ((cli->notify.flags
   1f93e:	68a3      	ldr	r3, [r4, #8]
   1f940:	f033 0303 	bics.w	r3, r3, #3
   1f944:	d001      	beq.n	1f94a <validate_args+0x1c>
		rv = -EINVAL;
   1f946:	f06f 0015 	mvn.w	r0, #21
}
   1f94a:	bd10      	pop	{r4, pc}

0001f94c <onoff_manager_init>:
{
   1f94c:	b538      	push	{r3, r4, r5, lr}
   1f94e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f950:	4605      	mov	r5, r0
   1f952:	b158      	cbz	r0, 1f96c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f954:	b151      	cbz	r1, 1f96c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f956:	680b      	ldr	r3, [r1, #0]
   1f958:	b143      	cbz	r3, 1f96c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f95a:	684b      	ldr	r3, [r1, #4]
   1f95c:	b133      	cbz	r3, 1f96c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f95e:	221c      	movs	r2, #28
   1f960:	2100      	movs	r1, #0
   1f962:	f002 f854 	bl	21a0e <memset>
   1f966:	612c      	str	r4, [r5, #16]
	return 0;
   1f968:	2000      	movs	r0, #0
}
   1f96a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f96c:	f06f 0015 	mvn.w	r0, #21
   1f970:	e7fb      	b.n	1f96a <onoff_manager_init+0x1e>

0001f972 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f972:	b570      	push	{r4, r5, r6, lr}
   1f974:	4604      	mov	r4, r0
   1f976:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f978:	f7ff ffd9 	bl	1f92e <validate_args>

	if (rv < 0) {
   1f97c:	1e05      	subs	r5, r0, #0
   1f97e:	db31      	blt.n	1f9e4 <onoff_request+0x72>
   1f980:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f984:	f3ef 8111 	mrs	r1, BASEPRI
   1f988:	f383 8812 	msr	BASEPRI_MAX, r3
   1f98c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f990:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f992:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f994:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f998:	42ab      	cmp	r3, r5
   1f99a:	f000 0207 	and.w	r2, r0, #7
   1f99e:	d02e      	beq.n	1f9fe <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f9a0:	2a02      	cmp	r2, #2
   1f9a2:	d10e      	bne.n	1f9c2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f9a4:	3301      	adds	r3, #1
   1f9a6:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f9a8:	4615      	mov	r5, r2
		notify = true;
   1f9aa:	2301      	movs	r3, #1
	__asm__ volatile(
   1f9ac:	f381 8811 	msr	BASEPRI, r1
   1f9b0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f9b4:	b1b3      	cbz	r3, 1f9e4 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f9b6:	2300      	movs	r3, #0
   1f9b8:	4631      	mov	r1, r6
   1f9ba:	4620      	mov	r0, r4
   1f9bc:	f7ff ff93 	bl	1f8e6 <notify_one>
   1f9c0:	e010      	b.n	1f9e4 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f9c2:	0783      	lsls	r3, r0, #30
   1f9c4:	d001      	beq.n	1f9ca <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f9c6:	2a06      	cmp	r2, #6
   1f9c8:	d10e      	bne.n	1f9e8 <onoff_request+0x76>
	parent->next = child;
   1f9ca:	2300      	movs	r3, #0
   1f9cc:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f9ce:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1f9d0:	b993      	cbnz	r3, 1f9f8 <onoff_request+0x86>
	list->head = node;
   1f9d2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f9d6:	4615      	mov	r5, r2
   1f9d8:	b962      	cbnz	r2, 1f9f4 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f9da:	460a      	mov	r2, r1
   1f9dc:	4620      	mov	r0, r4
   1f9de:	2102      	movs	r1, #2
   1f9e0:	f7f1 fa50 	bl	10e84 <process_event>
		}
	}

	return rv;
}
   1f9e4:	4628      	mov	r0, r5
   1f9e6:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f9e8:	2a05      	cmp	r2, #5
   1f9ea:	bf0c      	ite	eq
   1f9ec:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1f9f0:	f06f 0504 	mvnne.w	r5, #4
   1f9f4:	2300      	movs	r3, #0
   1f9f6:	e7d9      	b.n	1f9ac <onoff_request+0x3a>
	parent->next = child;
   1f9f8:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f9fa:	6066      	str	r6, [r4, #4]
}
   1f9fc:	e7eb      	b.n	1f9d6 <onoff_request+0x64>
		rv = -EAGAIN;
   1f9fe:	f06f 050a 	mvn.w	r5, #10
   1fa02:	e7f7      	b.n	1f9f4 <onoff_request+0x82>

0001fa04 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fa04:	4604      	mov	r4, r0
   1fa06:	b508      	push	{r3, lr}
   1fa08:	4608      	mov	r0, r1
   1fa0a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1fa0c:	461a      	mov	r2, r3
   1fa0e:	47a0      	blx	r4
	return z_impl_z_current_get();
   1fa10:	f7ff fbfe 	bl	1f210 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1fa14:	f7f3 f860 	bl	12ad8 <z_impl_k_thread_abort>

0001fa18 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1fa18:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1fa1c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1fa1e:	0840      	lsrs	r0, r0, #1
   1fa20:	4770      	bx	lr

0001fa22 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1fa22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa24:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fa26:	f7ff fff7 	bl	1fa18 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1fa2a:	fab0 f080 	clz	r0, r0
   1fa2e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1fa32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1fa36:	00ca      	lsls	r2, r1, #3
   1fa38:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1fa3c:	1d17      	adds	r7, r2, #4
{
   1fa3e:	460c      	mov	r4, r1
   1fa40:	3206      	adds	r2, #6
   1fa42:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1fa44:	b956      	cbnz	r6, 1fa5c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1fa46:	2101      	movs	r1, #1
   1fa48:	fa01 f000 	lsl.w	r0, r1, r0
   1fa4c:	68d9      	ldr	r1, [r3, #12]
   1fa4e:	4301      	orrs	r1, r0
   1fa50:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1fa52:	f8cc 4010 	str.w	r4, [ip, #16]
   1fa56:	53dd      	strh	r5, [r3, r7]
   1fa58:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1fa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1fa5c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1fa5e:	3104      	adds	r1, #4
   1fa60:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1fa62:	53d8      	strh	r0, [r3, r7]
   1fa64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1fa68:	529e      	strh	r6, [r3, r2]
   1fa6a:	80c5      	strh	r5, [r0, #6]
   1fa6c:	525d      	strh	r5, [r3, r1]
   1fa6e:	e7f4      	b.n	1fa5a <free_list_add+0x38>

0001fa70 <free_list_remove_bidx>:
{
   1fa70:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1fa72:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1fa76:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1fa78:	4299      	cmp	r1, r3
   1fa7a:	f102 0104 	add.w	r1, r2, #4
   1fa7e:	d10a      	bne.n	1fa96 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1fa80:	2301      	movs	r3, #1
   1fa82:	fa03 f202 	lsl.w	r2, r3, r2
   1fa86:	68c3      	ldr	r3, [r0, #12]
   1fa88:	ea23 0302 	bic.w	r3, r3, r2
   1fa8c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1fa8e:	2300      	movs	r3, #0
   1fa90:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1fa94:	bd10      	pop	{r4, pc}
   1fa96:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1fa98:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1fa9c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1faa0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1faa4:	80cb      	strh	r3, [r1, #6]
   1faa6:	8082      	strh	r2, [r0, #4]
}
   1faa8:	e7f4      	b.n	1fa94 <free_list_remove_bidx+0x24>

0001faaa <free_list_remove>:
{
   1faaa:	b508      	push	{r3, lr}
   1faac:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1faae:	f7ff ffb3 	bl	1fa18 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1fab2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1fab6:	f1c2 021f 	rsb	r2, r2, #31
   1faba:	4618      	mov	r0, r3
}
   1fabc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1fac0:	f7ff bfd6 	b.w	1fa70 <free_list_remove_bidx>

0001fac4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1fac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fac8:	fab1 f581 	clz	r5, r1
   1facc:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fad0:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1fad4:	4603      	mov	r3, r0
	if (b->next) {
   1fad6:	693a      	ldr	r2, [r7, #16]
{
   1fad8:	460e      	mov	r6, r1
	if (b->next) {
   1fada:	b1c2      	cbz	r2, 1fb0e <alloc_chunk+0x4a>
   1fadc:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1fae0:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1fae2:	4618      	mov	r0, r3
   1fae4:	4621      	mov	r1, r4
   1fae6:	f7ff ff97 	bl	1fa18 <chunk_size>
   1faea:	42b0      	cmp	r0, r6
   1faec:	d306      	bcc.n	1fafc <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1faee:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1faf0:	4618      	mov	r0, r3
   1faf2:	f7ff ffbd 	bl	1fa70 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1faf6:	4620      	mov	r0, r4
   1faf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1fafc:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1fb00:	f1b8 0801 	subs.w	r8, r8, #1
   1fb04:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1fb06:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1fb08:	d001      	beq.n	1fb0e <alloc_chunk+0x4a>
   1fb0a:	4282      	cmp	r2, r0
   1fb0c:	d1e8      	bne.n	1fae0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1fb0e:	f1c5 0220 	rsb	r2, r5, #32
   1fb12:	f04f 34ff 	mov.w	r4, #4294967295
   1fb16:	4094      	lsls	r4, r2
   1fb18:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1fb1a:	4014      	ands	r4, r2
   1fb1c:	d0eb      	beq.n	1faf6 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1fb1e:	fa94 f2a4 	rbit	r2, r4
   1fb22:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1fb26:	1d11      	adds	r1, r2, #4
   1fb28:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1fb2c:	4621      	mov	r1, r4
   1fb2e:	e7df      	b.n	1faf0 <alloc_chunk+0x2c>

0001fb30 <merge_chunks>:
{
   1fb30:	b538      	push	{r3, r4, r5, lr}
   1fb32:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fb34:	f7ff ff70 	bl	1fa18 <chunk_size>
{
   1fb38:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fb3a:	4604      	mov	r4, r0
   1fb3c:	4611      	mov	r1, r2
   1fb3e:	4618      	mov	r0, r3
   1fb40:	f7ff ff6a 	bl	1fa18 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1fb44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1fb48:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fb4a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1fb4c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1fb4e:	4618      	mov	r0, r3
   1fb50:	f7ff ff62 	bl	1fa18 <chunk_size>
	void *cmem = &buf[c];
   1fb54:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fb56:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1fb5a:	bd38      	pop	{r3, r4, r5, pc}

0001fb5c <split_chunks>:
{
   1fb5c:	b538      	push	{r3, r4, r5, lr}
   1fb5e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1fb60:	f7ff ff5a 	bl	1fa18 <chunk_size>
{
   1fb64:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1fb66:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1fb68:	1a51      	subs	r1, r2, r1
   1fb6a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1fb6e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fb70:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1fb72:	8060      	strh	r0, [r4, #2]
   1fb74:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fb78:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1fb7a:	8044      	strh	r4, [r0, #2]
   1fb7c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1fb80:	4618      	mov	r0, r3
   1fb82:	4611      	mov	r1, r2
   1fb84:	f7ff ff48 	bl	1fa18 <chunk_size>
	void *cmem = &buf[c];
   1fb88:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fb8a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1fb8e:	bd38      	pop	{r3, r4, r5, pc}

0001fb90 <free_chunk>:
{
   1fb90:	b538      	push	{r3, r4, r5, lr}
   1fb92:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1fb94:	f7ff ff40 	bl	1fa18 <chunk_size>
   1fb98:	460c      	mov	r4, r1
   1fb9a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1fb9c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fba0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1fba2:	07da      	lsls	r2, r3, #31
   1fba4:	d40a      	bmi.n	1fbbc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1fba6:	4628      	mov	r0, r5
   1fba8:	f7ff ff7f 	bl	1faaa <free_list_remove>
	return c + chunk_size(h, c);
   1fbac:	4621      	mov	r1, r4
   1fbae:	4628      	mov	r0, r5
   1fbb0:	f7ff ff32 	bl	1fa18 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1fbb4:	1822      	adds	r2, r4, r0
   1fbb6:	4628      	mov	r0, r5
   1fbb8:	f7ff ffba 	bl	1fb30 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1fbbc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fbc0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1fbc2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fbc6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1fbc8:	07db      	lsls	r3, r3, #31
   1fbca:	d40c      	bmi.n	1fbe6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1fbcc:	4628      	mov	r0, r5
   1fbce:	f7ff ff6c 	bl	1faaa <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1fbd2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1fbd6:	4622      	mov	r2, r4
   1fbd8:	1a61      	subs	r1, r4, r1
   1fbda:	4628      	mov	r0, r5
   1fbdc:	f7ff ffa8 	bl	1fb30 <merge_chunks>
   1fbe0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fbe4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1fbe6:	4621      	mov	r1, r4
   1fbe8:	4628      	mov	r0, r5
}
   1fbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1fbee:	f7ff bf18 	b.w	1fa22 <free_list_add>

0001fbf2 <sys_heap_free>:
	if (mem == NULL) {
   1fbf2:	b161      	cbz	r1, 1fc0e <sys_heap_free+0x1c>
   1fbf4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fbf6:	3904      	subs	r1, #4
   1fbf8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1fbfa:	f021 0307 	bic.w	r3, r1, #7
   1fbfe:	4403      	add	r3, r0
	free_chunk(h, c);
   1fc00:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fc02:	885a      	ldrh	r2, [r3, #2]
   1fc04:	f022 0201 	bic.w	r2, r2, #1
   1fc08:	805a      	strh	r2, [r3, #2]
   1fc0a:	f7ff bfc1 	b.w	1fb90 <free_chunk>
}
   1fc0e:	4770      	bx	lr

0001fc10 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fc10:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1fc12:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fc14:	b909      	cbnz	r1, 1fc1a <sys_heap_alloc+0xa>
		return NULL;
   1fc16:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fc18:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1fc1a:	68ab      	ldr	r3, [r5, #8]
   1fc1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1fc20:	d9f9      	bls.n	1fc16 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fc22:	310b      	adds	r1, #11
   1fc24:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fc26:	4621      	mov	r1, r4
   1fc28:	4628      	mov	r0, r5
   1fc2a:	f7ff ff4b 	bl	1fac4 <alloc_chunk>
	if (c == 0U) {
   1fc2e:	4606      	mov	r6, r0
   1fc30:	2800      	cmp	r0, #0
   1fc32:	d0f0      	beq.n	1fc16 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1fc34:	4601      	mov	r1, r0
   1fc36:	4628      	mov	r0, r5
   1fc38:	f7ff feee 	bl	1fa18 <chunk_size>
   1fc3c:	42a0      	cmp	r0, r4
   1fc3e:	d907      	bls.n	1fc50 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1fc40:	1932      	adds	r2, r6, r4
   1fc42:	4628      	mov	r0, r5
   1fc44:	f7ff ff8a 	bl	1fb5c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fc48:	4611      	mov	r1, r2
   1fc4a:	4628      	mov	r0, r5
   1fc4c:	f7ff fee9 	bl	1fa22 <free_list_add>
	void *cmem = &buf[c];
   1fc50:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fc54:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fc56:	8853      	ldrh	r3, [r2, #2]
   1fc58:	f043 0301 	orr.w	r3, r3, #1
   1fc5c:	8053      	strh	r3, [r2, #2]
   1fc5e:	3004      	adds	r0, #4
	return mem;
   1fc60:	e7da      	b.n	1fc18 <sys_heap_alloc+0x8>

0001fc62 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fc62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fc66:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1fc68:	424a      	negs	r2, r1
   1fc6a:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1fc6e:	ea31 0202 	bics.w	r2, r1, r2
{
   1fc72:	4603      	mov	r3, r0
	if (align != rew) {
   1fc74:	d00a      	beq.n	1fc8c <sys_heap_aligned_alloc+0x2a>
		return false;
   1fc76:	2f04      	cmp	r7, #4
   1fc78:	463a      	mov	r2, r7
   1fc7a:	46b9      	mov	r9, r7
   1fc7c:	bf28      	it	cs
   1fc7e:	2204      	movcs	r2, #4
		align -= rew;
   1fc80:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fc82:	b974      	cbnz	r4, 1fca2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1fc84:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fc86:	4628      	mov	r0, r5
   1fc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1fc8c:	2904      	cmp	r1, #4
   1fc8e:	d804      	bhi.n	1fc9a <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1fc90:	4621      	mov	r1, r4
}
   1fc92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1fc96:	f7ff bfbb 	b.w	1fc10 <sys_heap_alloc>
		rew = 0;
   1fc9a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1fc9e:	2204      	movs	r2, #4
   1fca0:	e7ef      	b.n	1fc82 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1fca2:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fca4:	68b3      	ldr	r3, [r6, #8]
   1fca6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fcaa:	d9eb      	bls.n	1fc84 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fcac:	f104 010b 	add.w	r1, r4, #11
   1fcb0:	4439      	add	r1, r7
   1fcb2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fcb4:	08c9      	lsrs	r1, r1, #3
   1fcb6:	4630      	mov	r0, r6
   1fcb8:	f7ff ff04 	bl	1fac4 <alloc_chunk>
	if (c0 == 0) {
   1fcbc:	4680      	mov	r8, r0
   1fcbe:	2800      	cmp	r0, #0
   1fcc0:	d0e0      	beq.n	1fc84 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1fcc2:	f109 0504 	add.w	r5, r9, #4
   1fcc6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1fcca:	1e7b      	subs	r3, r7, #1
   1fccc:	4435      	add	r5, r6
   1fcce:	441d      	add	r5, r3
   1fcd0:	427f      	negs	r7, r7
   1fcd2:	403d      	ands	r5, r7
   1fcd4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fcd8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fcda:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fcdc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fcde:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fce0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fce4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1fce6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fcea:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fcee:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1fcf2:	d208      	bcs.n	1fd06 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1fcf4:	4601      	mov	r1, r0
   1fcf6:	463a      	mov	r2, r7
   1fcf8:	4630      	mov	r0, r6
   1fcfa:	f7ff ff2f 	bl	1fb5c <split_chunks>
		free_list_add(h, c0);
   1fcfe:	4641      	mov	r1, r8
   1fd00:	4630      	mov	r0, r6
   1fd02:	f7ff fe8e 	bl	1fa22 <free_list_add>
	return c + chunk_size(h, c);
   1fd06:	4639      	mov	r1, r7
   1fd08:	4630      	mov	r0, r6
   1fd0a:	f7ff fe85 	bl	1fa18 <chunk_size>
   1fd0e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fd10:	4284      	cmp	r4, r0
   1fd12:	d207      	bcs.n	1fd24 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1fd14:	4630      	mov	r0, r6
   1fd16:	4622      	mov	r2, r4
   1fd18:	f7ff ff20 	bl	1fb5c <split_chunks>
		free_list_add(h, c_end);
   1fd1c:	4621      	mov	r1, r4
   1fd1e:	4630      	mov	r0, r6
   1fd20:	f7ff fe7f 	bl	1fa22 <free_list_add>
	void *cmem = &buf[c];
   1fd24:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fd28:	8873      	ldrh	r3, [r6, #2]
   1fd2a:	f043 0301 	orr.w	r3, r3, #1
   1fd2e:	8073      	strh	r3, [r6, #2]
   1fd30:	e7a9      	b.n	1fc86 <sys_heap_aligned_alloc+0x24>

0001fd32 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fd32:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fd34:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fd36:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fd38:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fd3c:	f021 0107 	bic.w	r1, r1, #7
{
   1fd40:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fd42:	1acd      	subs	r5, r1, r3
   1fd44:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1fd46:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1fd48:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fd4c:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1fd50:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fd52:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1fd54:	2600      	movs	r6, #0
   1fd56:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1fd58:	f1c0 0020 	rsb	r0, r0, #32
   1fd5c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1fd60:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1fd62:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1fd64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fd68:	4284      	cmp	r4, r0
   1fd6a:	d118      	bne.n	1fd9e <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fd6c:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fd6e:	f040 0001 	orr.w	r0, r0, #1
   1fd72:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1fd74:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1fd78:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fd7a:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1fd7c:	801e      	strh	r6, [r3, #0]
   1fd7e:	8067      	strh	r7, [r4, #2]
   1fd80:	195c      	adds	r4, r3, r5
   1fd82:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1fd86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fd8a:	8066      	strh	r6, [r4, #2]
   1fd8c:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fd8e:	8850      	ldrh	r0, [r2, #2]
   1fd90:	f040 0001 	orr.w	r0, r0, #1
   1fd94:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1fd96:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1fd98:	4618      	mov	r0, r3
   1fd9a:	f7ff be42 	b.w	1fa22 <free_list_add>
		h->buckets[i].next = 0;
   1fd9e:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fda2:	e7e1      	b.n	1fd68 <sys_heap_init+0x36>

0001fda4 <encode_uint>:
{
   1fda4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fda8:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1fdaa:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1fdac:	2b6f      	cmp	r3, #111	; 0x6f
{
   1fdae:	4680      	mov	r8, r0
   1fdb0:	460f      	mov	r7, r1
   1fdb2:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1fdb4:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1fdb8:	d029      	beq.n	1fe0e <encode_uint+0x6a>
   1fdba:	d824      	bhi.n	1fe06 <encode_uint+0x62>
		return 16;
   1fdbc:	2b58      	cmp	r3, #88	; 0x58
   1fdbe:	bf14      	ite	ne
   1fdc0:	260a      	movne	r6, #10
   1fdc2:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1fdc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1fdc8:	4632      	mov	r2, r6
   1fdca:	2300      	movs	r3, #0
   1fdcc:	4640      	mov	r0, r8
   1fdce:	4639      	mov	r1, r7
   1fdd0:	f7e0 f996 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fdd4:	2a09      	cmp	r2, #9
   1fdd6:	b2d4      	uxtb	r4, r2
   1fdd8:	d81e      	bhi.n	1fe18 <encode_uint+0x74>
   1fdda:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1fddc:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fdde:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1fde0:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fde4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1fde8:	d301      	bcc.n	1fdee <encode_uint+0x4a>
   1fdea:	45d1      	cmp	r9, sl
   1fdec:	d811      	bhi.n	1fe12 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1fdee:	782b      	ldrb	r3, [r5, #0]
   1fdf0:	069b      	lsls	r3, r3, #26
   1fdf2:	d505      	bpl.n	1fe00 <encode_uint+0x5c>
		if (radix == 8) {
   1fdf4:	2e08      	cmp	r6, #8
   1fdf6:	d115      	bne.n	1fe24 <encode_uint+0x80>
			conv->altform_0 = true;
   1fdf8:	78ab      	ldrb	r3, [r5, #2]
   1fdfa:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1fdfe:	70ab      	strb	r3, [r5, #2]
}
   1fe00:	4648      	mov	r0, r9
   1fe02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1fe06:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1fe0a:	2b70      	cmp	r3, #112	; 0x70
   1fe0c:	e7d7      	b.n	1fdbe <encode_uint+0x1a>
	switch (specifier) {
   1fe0e:	2608      	movs	r6, #8
   1fe10:	e7d8      	b.n	1fdc4 <encode_uint+0x20>
		value /= radix;
   1fe12:	4680      	mov	r8, r0
   1fe14:	460f      	mov	r7, r1
   1fe16:	e7d7      	b.n	1fdc8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fe18:	f1bb 0f19 	cmp.w	fp, #25
   1fe1c:	bf94      	ite	ls
   1fe1e:	3437      	addls	r4, #55	; 0x37
   1fe20:	3457      	addhi	r4, #87	; 0x57
   1fe22:	e7db      	b.n	1fddc <encode_uint+0x38>
		} else if (radix == 16) {
   1fe24:	2e10      	cmp	r6, #16
   1fe26:	d1eb      	bne.n	1fe00 <encode_uint+0x5c>
			conv->altform_0c = true;
   1fe28:	78ab      	ldrb	r3, [r5, #2]
   1fe2a:	f043 0310 	orr.w	r3, r3, #16
   1fe2e:	e7e6      	b.n	1fdfe <encode_uint+0x5a>

0001fe30 <outs>:
{
   1fe30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe34:	4607      	mov	r7, r0
   1fe36:	4688      	mov	r8, r1
   1fe38:	4615      	mov	r5, r2
   1fe3a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1fe3c:	4614      	mov	r4, r2
   1fe3e:	42b4      	cmp	r4, r6
   1fe40:	eba4 0005 	sub.w	r0, r4, r5
   1fe44:	d302      	bcc.n	1fe4c <outs+0x1c>
   1fe46:	b93e      	cbnz	r6, 1fe58 <outs+0x28>
   1fe48:	7823      	ldrb	r3, [r4, #0]
   1fe4a:	b12b      	cbz	r3, 1fe58 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1fe4c:	f814 0b01 	ldrb.w	r0, [r4], #1
   1fe50:	4641      	mov	r1, r8
   1fe52:	47b8      	blx	r7
		if (rc < 0) {
   1fe54:	2800      	cmp	r0, #0
   1fe56:	daf2      	bge.n	1fe3e <outs+0xe>
}
   1fe58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fe5c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1fe5c:	b40f      	push	{r0, r1, r2, r3}
   1fe5e:	b507      	push	{r0, r1, r2, lr}
   1fe60:	a904      	add	r1, sp, #16
   1fe62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1fe66:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1fe68:	f7f0 ffe8 	bl	10e3c <vprintk>

	va_end(ap);
}
   1fe6c:	b003      	add	sp, #12
   1fe6e:	f85d eb04 	ldr.w	lr, [sp], #4
   1fe72:	b004      	add	sp, #16
   1fe74:	4770      	bx	lr

0001fe76 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1fe76:	4770      	bx	lr

0001fe78 <nvs_flash_rd>:
{
   1fe78:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1fe7a:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fe7c:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1fe7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fe80:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1fe82:	fa16 f181 	uxtah	r1, r6, r1
   1fe86:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1fe8a:	6884      	ldr	r4, [r0, #8]
   1fe8c:	6824      	ldr	r4, [r4, #0]
   1fe8e:	46a4      	mov	ip, r4
}
   1fe90:	bc70      	pop	{r4, r5, r6}
   1fe92:	4760      	bx	ip

0001fe94 <nvs_flash_block_cmp>:
{
   1fe94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fe98:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1fe9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1fe9c:	681d      	ldr	r5, [r3, #0]
   1fe9e:	426d      	negs	r5, r5
{
   1fea0:	b089      	sub	sp, #36	; 0x24
   1fea2:	4681      	mov	r9, r0
   1fea4:	460e      	mov	r6, r1
   1fea6:	4617      	mov	r7, r2
	block_size =
   1fea8:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1feac:	b91c      	cbnz	r4, 1feb6 <nvs_flash_block_cmp+0x22>
	return 0;
   1feae:	4620      	mov	r0, r4
}
   1feb0:	b009      	add	sp, #36	; 0x24
   1feb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1feb6:	42ac      	cmp	r4, r5
   1feb8:	46a0      	mov	r8, r4
   1feba:	bf28      	it	cs
   1febc:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1febe:	4643      	mov	r3, r8
   1fec0:	466a      	mov	r2, sp
   1fec2:	4631      	mov	r1, r6
   1fec4:	4648      	mov	r0, r9
   1fec6:	f7ff ffd7 	bl	1fe78 <nvs_flash_rd>
		if (rc) {
   1feca:	2800      	cmp	r0, #0
   1fecc:	d1f0      	bne.n	1feb0 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1fece:	4642      	mov	r2, r8
   1fed0:	4669      	mov	r1, sp
   1fed2:	4638      	mov	r0, r7
   1fed4:	f001 fd7f 	bl	219d6 <memcmp>
		if (rc) {
   1fed8:	b920      	cbnz	r0, 1fee4 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1feda:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1fede:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1fee0:	4447      	add	r7, r8
   1fee2:	e7e3      	b.n	1feac <nvs_flash_block_cmp+0x18>
			return 1;
   1fee4:	2001      	movs	r0, #1
   1fee6:	e7e3      	b.n	1feb0 <nvs_flash_block_cmp+0x1c>

0001fee8 <nvs_flash_cmp_const>:
{
   1fee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1feec:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1feee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1fef0:	681d      	ldr	r5, [r3, #0]
   1fef2:	426d      	negs	r5, r5
{
   1fef4:	b088      	sub	sp, #32
	block_size =
   1fef6:	f005 0520 	and.w	r5, r5, #32
{
   1fefa:	4607      	mov	r7, r0
   1fefc:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1fefe:	4668      	mov	r0, sp
{
   1ff00:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1ff02:	462a      	mov	r2, r5
   1ff04:	f001 fd83 	bl	21a0e <memset>
	while (len) {
   1ff08:	b91c      	cbnz	r4, 1ff12 <nvs_flash_cmp_const+0x2a>
	return 0;
   1ff0a:	4620      	mov	r0, r4
}
   1ff0c:	b008      	add	sp, #32
   1ff0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1ff12:	42ac      	cmp	r4, r5
   1ff14:	46a0      	mov	r8, r4
   1ff16:	bf28      	it	cs
   1ff18:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1ff1a:	4643      	mov	r3, r8
   1ff1c:	466a      	mov	r2, sp
   1ff1e:	4631      	mov	r1, r6
   1ff20:	4638      	mov	r0, r7
   1ff22:	f7ff ffb7 	bl	1fe94 <nvs_flash_block_cmp>
		if (rc) {
   1ff26:	2800      	cmp	r0, #0
   1ff28:	d1f0      	bne.n	1ff0c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1ff2a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1ff2e:	4446      	add	r6, r8
   1ff30:	e7ea      	b.n	1ff08 <nvs_flash_cmp_const+0x20>

0001ff32 <nvs_flash_erase_sector>:
{
   1ff32:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ff34:	8982      	ldrh	r2, [r0, #12]
   1ff36:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   1ff38:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ff3a:	0c09      	lsrs	r1, r1, #16
{
   1ff3c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   1ff3e:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1ff40:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ff42:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   1ff46:	6883      	ldr	r3, [r0, #8]
   1ff48:	689b      	ldr	r3, [r3, #8]
   1ff4a:	4798      	blx	r3
	if (rc) {
   1ff4c:	b950      	cbnz	r0, 1ff64 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1ff4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1ff50:	89a3      	ldrh	r3, [r4, #12]
   1ff52:	7912      	ldrb	r2, [r2, #4]
   1ff54:	4629      	mov	r1, r5
   1ff56:	4620      	mov	r0, r4
   1ff58:	f7ff ffc6 	bl	1fee8 <nvs_flash_cmp_const>
		rc = -ENXIO;
   1ff5c:	2800      	cmp	r0, #0
   1ff5e:	bf18      	it	ne
   1ff60:	f06f 0005 	mvnne.w	r0, #5
}
   1ff64:	bd38      	pop	{r3, r4, r5, pc}

0001ff66 <nvs_ate_crc8_update>:
{
   1ff66:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ff68:	4601      	mov	r1, r0
{
   1ff6a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ff6c:	2207      	movs	r2, #7
   1ff6e:	20ff      	movs	r0, #255	; 0xff
   1ff70:	f7f0 ff40 	bl	10df4 <crc8_ccitt>
	entry->crc8 = crc8;
   1ff74:	71e0      	strb	r0, [r4, #7]
}
   1ff76:	bd10      	pop	{r4, pc}

0001ff78 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1ff78:	680b      	ldr	r3, [r1, #0]
   1ff7a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1ff7e:	0c1a      	lsrs	r2, r3, #16
   1ff80:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1ff84:	bf08      	it	eq
   1ff86:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1ff8a:	600b      	str	r3, [r1, #0]
}
   1ff8c:	4770      	bx	lr

0001ff8e <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1ff8e:	7803      	ldrb	r3, [r0, #0]
   1ff90:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ff92:	bf81      	itttt	hi
   1ff94:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1ff98:	18c9      	addhi	r1, r1, r3
   1ff9a:	425b      	neghi	r3, r3
   1ff9c:	4019      	andhi	r1, r3
}
   1ff9e:	4608      	mov	r0, r1
   1ffa0:	4770      	bx	lr

0001ffa2 <nvs_ate_valid>:
{
   1ffa2:	b570      	push	{r4, r5, r6, lr}
   1ffa4:	460c      	mov	r4, r1
   1ffa6:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ffa8:	2108      	movs	r1, #8
   1ffaa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1ffac:	f7ff ffef 	bl	1ff8e <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ffb0:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ffb2:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ffb4:	4621      	mov	r1, r4
   1ffb6:	20ff      	movs	r0, #255	; 0xff
   1ffb8:	f7f0 ff1c 	bl	10df4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1ffbc:	79e3      	ldrb	r3, [r4, #7]
   1ffbe:	4283      	cmp	r3, r0
   1ffc0:	d107      	bne.n	1ffd2 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   1ffc2:	89a8      	ldrh	r0, [r5, #12]
   1ffc4:	8863      	ldrh	r3, [r4, #2]
   1ffc6:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   1ffc8:	4283      	cmp	r3, r0
   1ffca:	bf2c      	ite	cs
   1ffcc:	2000      	movcs	r0, #0
   1ffce:	2001      	movcc	r0, #1
}
   1ffd0:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1ffd2:	2000      	movs	r0, #0
   1ffd4:	e7fc      	b.n	1ffd0 <nvs_ate_valid+0x2e>

0001ffd6 <nvs_close_ate_valid>:
{
   1ffd6:	b538      	push	{r3, r4, r5, lr}
   1ffd8:	4605      	mov	r5, r0
   1ffda:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1ffdc:	f7ff ffe1 	bl	1ffa2 <nvs_ate_valid>
   1ffe0:	b1a0      	cbz	r0, 2000c <CONFIG_PM_SRAM_SIZE+0xc>
   1ffe2:	88a0      	ldrh	r0, [r4, #4]
   1ffe4:	b998      	cbnz	r0, 2000e <CONFIG_PM_SRAM_SIZE+0xe>
   1ffe6:	8822      	ldrh	r2, [r4, #0]
   1ffe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ffec:	429a      	cmp	r2, r3
   1ffee:	d10d      	bne.n	2000c <CONFIG_PM_SRAM_SIZE+0xc>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fff0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1fff2:	2108      	movs	r1, #8
   1fff4:	f7ff ffcb 	bl	1ff8e <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   1fff8:	8862      	ldrh	r2, [r4, #2]
   1fffa:	89ab      	ldrh	r3, [r5, #12]
   1fffc:	1a9b      	subs	r3, r3, r2
   1fffe:	fbb3 f2f0 	udiv	r2, r3, r0
   20002:	fb02 3010 	mls	r0, r2, r0, r3
   20006:	fab0 f080 	clz	r0, r0
   2000a:	0940      	lsrs	r0, r0, #5
}
   2000c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2000e:	2000      	movs	r0, #0
   20010:	e7fc      	b.n	2000c <CONFIG_PM_SRAM_SIZE+0xc>

00020012 <nvs_prev_ate>:
{
   20012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20014:	4605      	mov	r5, r0
   20016:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20018:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2001a:	2108      	movs	r1, #8
   2001c:	f7ff ffb7 	bl	1ff8e <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20020:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20022:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20024:	2308      	movs	r3, #8
   20026:	4628      	mov	r0, r5
   20028:	f7ff ff26 	bl	1fe78 <nvs_flash_rd>
	if (rc) {
   2002c:	4604      	mov	r4, r0
   2002e:	2800      	cmp	r0, #0
   20030:	d138      	bne.n	200a4 <nvs_prev_ate+0x92>
	*addr += ate_size;
   20032:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20034:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   20036:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20038:	b29a      	uxth	r2, r3
   2003a:	1bc7      	subs	r7, r0, r7
   2003c:	42ba      	cmp	r2, r7
	*addr += ate_size;
   2003e:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20040:	d130      	bne.n	200a4 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   20042:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   20044:	bf03      	ittte	eq
   20046:	89e9      	ldrheq	r1, [r5, #14]
   20048:	f101 31ff 	addeq.w	r1, r1, #4294967295
   2004c:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   20050:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   20054:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20056:	2308      	movs	r3, #8
   20058:	466a      	mov	r2, sp
   2005a:	4628      	mov	r0, r5
   2005c:	f7ff ff0c 	bl	1fe78 <nvs_flash_rd>
	if (rc) {
   20060:	4604      	mov	r4, r0
   20062:	b9f8      	cbnz	r0, 200a4 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   20064:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20066:	466a      	mov	r2, sp
   20068:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2006a:	4603      	mov	r3, r0
		if (data8[i] != value) {
   2006c:	f812 0b01 	ldrb.w	r0, [r2], #1
   20070:	4281      	cmp	r1, r0
   20072:	d10c      	bne.n	2008e <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20074:	3301      	adds	r3, #1
   20076:	2b08      	cmp	r3, #8
   20078:	d1f8      	bne.n	2006c <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   2007a:	686b      	ldr	r3, [r5, #4]
   2007c:	e005      	b.n	2008a <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   2007e:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   20080:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   20084:	0c1b      	lsrs	r3, r3, #16
   20086:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   20088:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2008a:	6033      	str	r3, [r6, #0]
		return 0;
   2008c:	e00a      	b.n	200a4 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2008e:	4669      	mov	r1, sp
   20090:	4628      	mov	r0, r5
   20092:	f7ff ffa0 	bl	1ffd6 <nvs_close_ate_valid>
   20096:	2800      	cmp	r0, #0
   20098:	d1f1      	bne.n	2007e <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   2009a:	4631      	mov	r1, r6
   2009c:	4628      	mov	r0, r5
   2009e:	f7f1 fb99 	bl	117d4 <nvs_recover_last_ate>
   200a2:	4604      	mov	r4, r0
}
   200a4:	4620      	mov	r0, r4
   200a6:	b003      	add	sp, #12
   200a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000200aa <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   200aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   200ae:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   200b0:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   200b2:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   200b4:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   200b6:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   200b8:	fa10 f181 	uxtah	r1, r0, r1
   200bc:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   200c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   200c2:	681e      	ldr	r6, [r3, #0]
   200c4:	4276      	negs	r6, r6
	if (blen > 0) {
   200c6:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   200c8:	b089      	sub	sp, #36	; 0x24
   200ca:	4690      	mov	r8, r2
	if (blen > 0) {
   200cc:	d00a      	beq.n	200e4 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   200ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   200d0:	6883      	ldr	r3, [r0, #8]
   200d2:	4629      	mov	r1, r5
   200d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
   200d8:	4633      	mov	r3, r6
   200da:	47c8      	blx	r9
		if (rc) {
   200dc:	b9c0      	cbnz	r0, 20110 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   200de:	1ba4      	subs	r4, r4, r6
		offset += blen;
   200e0:	4435      	add	r5, r6
		data8 += blen;
   200e2:	44b0      	add	r8, r6
	if (len) {
   200e4:	b1bc      	cbz	r4, 20116 <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   200e6:	4622      	mov	r2, r4
   200e8:	4641      	mov	r1, r8
   200ea:	4668      	mov	r0, sp
   200ec:	f001 fc84 	bl	219f8 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   200f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   200f2:	681a      	ldr	r2, [r3, #0]
   200f4:	7919      	ldrb	r1, [r3, #4]
   200f6:	1b12      	subs	r2, r2, r4
   200f8:	eb0d 0004 	add.w	r0, sp, r4
   200fc:	f001 fc87 	bl	21a0e <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   20100:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   20104:	681b      	ldr	r3, [r3, #0]
   20106:	6882      	ldr	r2, [r0, #8]
   20108:	4629      	mov	r1, r5
   2010a:	6854      	ldr	r4, [r2, #4]
   2010c:	466a      	mov	r2, sp
   2010e:	47a0      	blx	r4
}
   20110:	b009      	add	sp, #36	; 0x24
   20112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   20116:	4620      	mov	r0, r4
   20118:	e7fa      	b.n	20110 <nvs_flash_al_wrt.part.0+0x66>

0002011a <nvs_flash_data_wrt>:
{
   2011a:	b538      	push	{r3, r4, r5, lr}
   2011c:	4604      	mov	r4, r0
	if (!len) {
   2011e:	4615      	mov	r5, r2
   20120:	b12a      	cbz	r2, 2012e <nvs_flash_data_wrt+0x14>
   20122:	4613      	mov	r3, r2
   20124:	460a      	mov	r2, r1
   20126:	6881      	ldr	r1, [r0, #8]
   20128:	f7ff ffbf 	bl	200aa <nvs_flash_al_wrt.part.0>
   2012c:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2012e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20130:	4629      	mov	r1, r5
   20132:	f7ff ff2c 	bl	1ff8e <nvs_al_size.isra.0>
   20136:	68a3      	ldr	r3, [r4, #8]
   20138:	4403      	add	r3, r0
   2013a:	60a3      	str	r3, [r4, #8]
}
   2013c:	4610      	mov	r0, r2
   2013e:	bd38      	pop	{r3, r4, r5, pc}

00020140 <nvs_flash_ate_wrt>:
{
   20140:	b510      	push	{r4, lr}
   20142:	460a      	mov	r2, r1
	if (!len) {
   20144:	2308      	movs	r3, #8
   20146:	6841      	ldr	r1, [r0, #4]
{
   20148:	4604      	mov	r4, r0
   2014a:	f7ff ffae 	bl	200aa <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2014e:	2108      	movs	r1, #8
   20150:	4602      	mov	r2, r0
   20152:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20154:	f7ff ff1b 	bl	1ff8e <nvs_al_size.isra.0>
   20158:	6863      	ldr	r3, [r4, #4]
   2015a:	1a1b      	subs	r3, r3, r0
   2015c:	6063      	str	r3, [r4, #4]
}
   2015e:	4610      	mov	r0, r2
   20160:	bd10      	pop	{r4, pc}

00020162 <nvs_add_gc_done_ate>:
{
   20162:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   20164:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20168:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2016c:	2300      	movs	r3, #0
{
   2016e:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   20170:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   20174:	6883      	ldr	r3, [r0, #8]
   20176:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2017a:	4668      	mov	r0, sp
   2017c:	f7ff fef3 	bl	1ff66 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   20180:	4669      	mov	r1, sp
   20182:	4620      	mov	r0, r4
   20184:	f7ff ffdc 	bl	20140 <nvs_flash_ate_wrt>
}
   20188:	b002      	add	sp, #8
   2018a:	bd10      	pop	{r4, pc}

0002018c <nvs_gc>:
{
   2018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20190:	4604      	mov	r4, r0
   20192:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20194:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   20196:	2108      	movs	r1, #8
   20198:	f7ff fef9 	bl	1ff8e <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2019c:	6863      	ldr	r3, [r4, #4]
   2019e:	0c1b      	lsrs	r3, r3, #16
   201a0:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   201a2:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   201a4:	a901      	add	r1, sp, #4
   201a6:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   201a8:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   201aa:	f7ff fee5 	bl	1ff78 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   201ae:	9b01      	ldr	r3, [sp, #4]
   201b0:	89a1      	ldrh	r1, [r4, #12]
   201b2:	4419      	add	r1, r3
   201b4:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   201b6:	2308      	movs	r3, #8
   201b8:	aa04      	add	r2, sp, #16
   201ba:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   201bc:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   201be:	f7ff fe5b 	bl	1fe78 <nvs_flash_rd>
	if (rc < 0) {
   201c2:	2800      	cmp	r0, #0
   201c4:	f2c0 8094 	blt.w	202f0 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   201c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   201ca:	aa04      	add	r2, sp, #16
   201cc:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   201ce:	2300      	movs	r3, #0
		if (data8[i] != value) {
   201d0:	f812 0b01 	ldrb.w	r0, [r2], #1
   201d4:	4281      	cmp	r1, r0
   201d6:	d17c      	bne.n	202d2 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   201d8:	3301      	adds	r3, #1
   201da:	2b08      	cmp	r3, #8
   201dc:	d1f8      	bne.n	201d0 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   201de:	68a0      	ldr	r0, [r4, #8]
   201e0:	6863      	ldr	r3, [r4, #4]
   201e2:	4428      	add	r0, r5
   201e4:	4283      	cmp	r3, r0
   201e6:	d26e      	bcs.n	202c6 <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   201e8:	9901      	ldr	r1, [sp, #4]
   201ea:	4620      	mov	r0, r4
   201ec:	f7ff fea1 	bl	1ff32 <nvs_flash_erase_sector>
	if (rc) {
   201f0:	e07e      	b.n	202f0 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   201f2:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   201f4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   201f8:	0c1b      	lsrs	r3, r3, #16
   201fa:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   201fc:	4413      	add	r3, r2
   201fe:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   20200:	aa06      	add	r2, sp, #24
   20202:	a902      	add	r1, sp, #8
   20204:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   20206:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2020a:	f7ff ff02 	bl	20012 <nvs_prev_ate>
		if (rc) {
   2020e:	2800      	cmp	r0, #0
   20210:	d16e      	bne.n	202f0 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   20212:	a906      	add	r1, sp, #24
   20214:	4620      	mov	r0, r4
   20216:	f7ff fec4 	bl	1ffa2 <nvs_ate_valid>
   2021a:	2800      	cmp	r0, #0
   2021c:	d034      	beq.n	20288 <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   2021e:	6863      	ldr	r3, [r4, #4]
   20220:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   20222:	aa08      	add	r2, sp, #32
   20224:	a903      	add	r1, sp, #12
   20226:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   20228:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2022a:	f7ff fef2 	bl	20012 <nvs_prev_ate>
			if (rc) {
   2022e:	2800      	cmp	r0, #0
   20230:	d15e      	bne.n	202f0 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   20232:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   20236:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2023a:	429a      	cmp	r2, r3
   2023c:	d027      	beq.n	2028e <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   2023e:	6862      	ldr	r2, [r4, #4]
   20240:	9b03      	ldr	r3, [sp, #12]
   20242:	429a      	cmp	r2, r3
   20244:	d1ed      	bne.n	20222 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   20246:	4556      	cmp	r6, sl
   20248:	d11e      	bne.n	20288 <nvs_gc+0xfc>
   2024a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2024e:	b1db      	cbz	r3, 20288 <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   20250:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   20254:	ea4f 471a 	mov.w	r7, sl, lsr #16
   20258:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   2025a:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2025c:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2025e:	68a3      	ldr	r3, [r4, #8]
   20260:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   20264:	f7ff fe7f 	bl	1ff66 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2026a:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2026e:	681e      	ldr	r6, [r3, #0]
   20270:	4276      	negs	r6, r6
	block_size =
   20272:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   20276:	f1b8 0f00 	cmp.w	r8, #0
   2027a:	d10f      	bne.n	2029c <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2027c:	a906      	add	r1, sp, #24
   2027e:	4620      	mov	r0, r4
   20280:	f7ff ff5e 	bl	20140 <nvs_flash_ate_wrt>
			if (rc) {
   20284:	2800      	cmp	r0, #0
   20286:	d133      	bne.n	202f0 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   20288:	45ca      	cmp	sl, r9
   2028a:	d1b9      	bne.n	20200 <nvs_gc+0x74>
gc_done:
   2028c:	e7a7      	b.n	201de <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2028e:	a908      	add	r1, sp, #32
   20290:	4620      	mov	r0, r4
   20292:	f7ff fe86 	bl	1ffa2 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   20296:	2800      	cmp	r0, #0
   20298:	d0d1      	beq.n	2023e <nvs_gc+0xb2>
   2029a:	e7d4      	b.n	20246 <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   2029c:	4546      	cmp	r6, r8
   2029e:	46b3      	mov	fp, r6
   202a0:	bf28      	it	cs
   202a2:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   202a4:	465b      	mov	r3, fp
   202a6:	aa0a      	add	r2, sp, #40	; 0x28
   202a8:	4639      	mov	r1, r7
   202aa:	4620      	mov	r0, r4
   202ac:	f7ff fde4 	bl	1fe78 <nvs_flash_rd>
		if (rc) {
   202b0:	b9f0      	cbnz	r0, 202f0 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   202b2:	465a      	mov	r2, fp
   202b4:	a90a      	add	r1, sp, #40	; 0x28
   202b6:	4620      	mov	r0, r4
   202b8:	f7ff ff2f 	bl	2011a <nvs_flash_data_wrt>
		if (rc) {
   202bc:	b9c0      	cbnz	r0, 202f0 <nvs_gc+0x164>
		len -= bytes_to_copy;
   202be:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   202c2:	445f      	add	r7, fp
   202c4:	e7d7      	b.n	20276 <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   202c6:	4620      	mov	r0, r4
   202c8:	f7ff ff4b 	bl	20162 <nvs_add_gc_done_ate>
		if (rc) {
   202cc:	2800      	cmp	r0, #0
   202ce:	d08b      	beq.n	201e8 <nvs_gc+0x5c>
   202d0:	e00e      	b.n	202f0 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   202d2:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   202d4:	a904      	add	r1, sp, #16
   202d6:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   202d8:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   202dc:	f7ff fe7b 	bl	1ffd6 <nvs_close_ate_valid>
   202e0:	2800      	cmp	r0, #0
   202e2:	d186      	bne.n	201f2 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   202e4:	a902      	add	r1, sp, #8
   202e6:	4620      	mov	r0, r4
   202e8:	f7f1 fa74 	bl	117d4 <nvs_recover_last_ate>
		if (rc) {
   202ec:	2800      	cmp	r0, #0
   202ee:	d087      	beq.n	20200 <nvs_gc+0x74>
}
   202f0:	b013      	add	sp, #76	; 0x4c
   202f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000202f6 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   202f6:	2300      	movs	r3, #0
   202f8:	461a      	mov	r2, r3
   202fa:	f7f1 bbf1 	b.w	11ae0 <nvs_write>

000202fe <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   202fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   20302:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   20304:	7c03      	ldrb	r3, [r0, #16]
{
   20306:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   2030a:	4604      	mov	r4, r0
   2030c:	460f      	mov	r7, r1
   2030e:	4690      	mov	r8, r2
	if (!fs->ready) {
   20310:	2b00      	cmp	r3, #0
   20312:	d045      	beq.n	203a0 <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   20314:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   20316:	2108      	movs	r1, #8
   20318:	f7ff fe39 	bl	1ff8e <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   2031c:	89a3      	ldrh	r3, [r4, #12]
   2031e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   20322:	429e      	cmp	r6, r3
   20324:	d83f      	bhi.n	203a6 <nvs_read_hist+0xa8>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
   20326:	6863      	ldr	r3, [r4, #4]
   20328:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   2032a:	f04f 0a00 	mov.w	sl, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2032e:	aa02      	add	r2, sp, #8
   20330:	a901      	add	r1, sp, #4
   20332:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   20334:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   20336:	f7ff fe6c 	bl	20012 <nvs_prev_ate>
		if (rc) {
   2033a:	bb38      	cbnz	r0, 2038c <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   2033c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   20340:	42bb      	cmp	r3, r7
   20342:	d108      	bne.n	20356 <nvs_read_hist+0x58>
   20344:	a902      	add	r1, sp, #8
   20346:	4620      	mov	r0, r4
   20348:	f7ff fe2b 	bl	1ffa2 <nvs_ate_valid>
   2034c:	b118      	cbz	r0, 20356 <nvs_read_hist+0x58>
			cnt_his++;
   2034e:	f10a 0a01 	add.w	sl, sl, #1
   20352:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   20356:	6862      	ldr	r2, [r4, #4]
   20358:	9b01      	ldr	r3, [sp, #4]
   2035a:	429a      	cmp	r2, r3
   2035c:	d019      	beq.n	20392 <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   2035e:	45d1      	cmp	r9, sl
   20360:	d2e5      	bcs.n	2032e <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   20362:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   20366:	b1c3      	cbz	r3, 2039a <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   20368:	45d1      	cmp	r9, sl
   2036a:	d816      	bhi.n	2039a <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   2036c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   20370:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   20372:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   20374:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   20378:	bf28      	it	cs
   2037a:	4633      	movcs	r3, r6
   2037c:	4642      	mov	r2, r8
   2037e:	4429      	add	r1, r5
   20380:	4620      	mov	r0, r4
   20382:	f7ff fd79 	bl	1fe78 <nvs_flash_rd>
	if (rc) {
   20386:	b908      	cbnz	r0, 2038c <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   20388:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   2038c:	b004      	add	sp, #16
   2038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   20392:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   20396:	42bb      	cmp	r3, r7
   20398:	d0e3      	beq.n	20362 <nvs_read_hist+0x64>
		return -ENOENT;
   2039a:	f06f 0001 	mvn.w	r0, #1
   2039e:	e7f5      	b.n	2038c <nvs_read_hist+0x8e>
		return -EACCES;
   203a0:	f06f 000c 	mvn.w	r0, #12
   203a4:	e7f2      	b.n	2038c <nvs_read_hist+0x8e>
		return -EINVAL;
   203a6:	f06f 0015 	mvn.w	r0, #21
   203aa:	e7ef      	b.n	2038c <nvs_read_hist+0x8e>

000203ac <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   203ac:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   203ae:	2400      	movs	r4, #0
   203b0:	9400      	str	r4, [sp, #0]
   203b2:	f7ff ffa4 	bl	202fe <nvs_read_hist>
	return rc;
}
   203b6:	b002      	add	sp, #8
   203b8:	bd10      	pop	{r4, pc}

000203ba <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   203ba:	4770      	bx	lr

000203bc <get_sectors_cb>:
{
   203bc:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   203be:	6802      	ldr	r2, [r0, #0]
   203c0:	684c      	ldr	r4, [r1, #4]
   203c2:	42a2      	cmp	r2, r4
   203c4:	d316      	bcc.n	203f4 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   203c6:	688b      	ldr	r3, [r1, #8]
   203c8:	4423      	add	r3, r4
   203ca:	429a      	cmp	r2, r3
   203cc:	d206      	bcs.n	203dc <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   203ce:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   203d2:	42ab      	cmp	r3, r5
   203d4:	d304      	bcc.n	203e0 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   203d6:	f06f 030b 	mvn.w	r3, #11
   203da:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   203dc:	2000      	movs	r0, #0
   203de:	e00a      	b.n	203f6 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   203e0:	68cd      	ldr	r5, [r1, #12]
   203e2:	1b12      	subs	r2, r2, r4
   203e4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   203e8:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   203ec:	6842      	ldr	r2, [r0, #4]
   203ee:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   203f0:	3301      	adds	r3, #1
   203f2:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   203f4:	2001      	movs	r0, #1
}
   203f6:	bd70      	pop	{r4, r5, r6, pc}

000203f8 <settings_load>:
	return settings_load_subtree(NULL);
   203f8:	2000      	movs	r0, #0
   203fa:	f7f1 bcc9 	b.w	11d90 <settings_load_subtree>

000203fe <settings_delete>:
	return settings_save_one(name, NULL, 0);
   203fe:	2200      	movs	r2, #0
   20400:	4611      	mov	r1, r2
   20402:	f7f1 bc8b 	b.w	11d1c <settings_save_one>

00020406 <settings_name_steq>:
{
   20406:	4603      	mov	r3, r0
   20408:	b530      	push	{r4, r5, lr}
   2040a:	4608      	mov	r0, r1
	if (next) {
   2040c:	b10a      	cbz	r2, 20412 <settings_name_steq+0xc>
		*next = NULL;
   2040e:	2100      	movs	r1, #0
   20410:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   20412:	b163      	cbz	r3, 2042e <settings_name_steq+0x28>
   20414:	b190      	cbz	r0, 2043c <settings_name_steq+0x36>
   20416:	1e41      	subs	r1, r0, #1
   20418:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   2041a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   2041e:	4604      	mov	r4, r0
   20420:	f810 3b01 	ldrb.w	r3, [r0], #1
   20424:	b15d      	cbz	r5, 2043e <settings_name_steq+0x38>
   20426:	429d      	cmp	r5, r3
   20428:	d101      	bne.n	2042e <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2042a:	2d3d      	cmp	r5, #61	; 0x3d
   2042c:	d1f5      	bne.n	2041a <settings_name_steq+0x14>
	return 0;
   2042e:	2000      	movs	r0, #0
   20430:	e004      	b.n	2043c <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   20432:	2b3d      	cmp	r3, #61	; 0x3d
   20434:	d008      	beq.n	20448 <settings_name_steq+0x42>
   20436:	fab3 f083 	clz	r0, r3
   2043a:	0940      	lsrs	r0, r0, #5
}
   2043c:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2043e:	2b2f      	cmp	r3, #47	; 0x2f
   20440:	d1f7      	bne.n	20432 <settings_name_steq+0x2c>
		if (next) {
   20442:	b10a      	cbz	r2, 20448 <settings_name_steq+0x42>
			*next = name + 1;
   20444:	3401      	adds	r4, #1
   20446:	6014      	str	r4, [r2, #0]
		return 1;
   20448:	2001      	movs	r0, #1
   2044a:	e7f7      	b.n	2043c <settings_name_steq+0x36>

0002044c <settings_name_next>:
{
   2044c:	b530      	push	{r4, r5, lr}
   2044e:	4603      	mov	r3, r0
	if (next) {
   20450:	b109      	cbz	r1, 20456 <settings_name_next+0xa>
		*next = NULL;
   20452:	2200      	movs	r2, #0
   20454:	600a      	str	r2, [r1, #0]
	if (!name) {
   20456:	b16b      	cbz	r3, 20474 <settings_name_next+0x28>
   20458:	461a      	mov	r2, r3
   2045a:	4614      	mov	r4, r2
   2045c:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2045e:	f812 5b01 	ldrb.w	r5, [r2], #1
   20462:	b135      	cbz	r5, 20472 <settings_name_next+0x26>
   20464:	2d3d      	cmp	r5, #61	; 0x3d
   20466:	d004      	beq.n	20472 <settings_name_next+0x26>
   20468:	2d2f      	cmp	r5, #47	; 0x2f
   2046a:	d1f6      	bne.n	2045a <settings_name_next+0xe>
		if (next) {
   2046c:	b109      	cbz	r1, 20472 <settings_name_next+0x26>
			*next = name + 1;
   2046e:	3401      	adds	r4, #1
   20470:	600c      	str	r4, [r1, #0]
}
   20472:	bd30      	pop	{r4, r5, pc}
		return 0;
   20474:	4618      	mov	r0, r3
   20476:	e7fc      	b.n	20472 <settings_name_next+0x26>

00020478 <settings_call_set_handler>:
{
   20478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2047c:	b085      	sub	sp, #20
   2047e:	4604      	mov	r4, r0
   20480:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const char *name_key = name;
   20484:	9003      	str	r0, [sp, #12]
{
   20486:	460d      	mov	r5, r1
   20488:	4616      	mov	r6, r2
   2048a:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   2048c:	f1b8 0f00 	cmp.w	r8, #0
   20490:	d018      	beq.n	204c4 <settings_call_set_handler+0x4c>
   20492:	f8d8 1000 	ldr.w	r1, [r8]
   20496:	b181      	cbz	r1, 204ba <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   20498:	aa03      	add	r2, sp, #12
   2049a:	f7ff ffb4 	bl	20406 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2049e:	b960      	cbnz	r0, 204ba <settings_call_set_handler+0x42>
			rc = 0;
   204a0:	2000      	movs	r0, #0
   204a2:	e007      	b.n	204b4 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   204a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   204a8:	9300      	str	r3, [sp, #0]
   204aa:	9803      	ldr	r0, [sp, #12]
   204ac:	463b      	mov	r3, r7
   204ae:	4632      	mov	r2, r6
   204b0:	4629      	mov	r1, r5
   204b2:	47c8      	blx	r9
}
   204b4:	b005      	add	sp, #20
   204b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   204ba:	f8d8 9004 	ldr.w	r9, [r8, #4]
   204be:	f1b9 0f00 	cmp.w	r9, #0
   204c2:	d1ef      	bne.n	204a4 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   204c4:	a903      	add	r1, sp, #12
   204c6:	4620      	mov	r0, r4
   204c8:	f7f1 fc98 	bl	11dfc <settings_parse_and_lookup>
		if (!ch) {
   204cc:	2800      	cmp	r0, #0
   204ce:	d0e7      	beq.n	204a0 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   204d0:	6884      	ldr	r4, [r0, #8]
   204d2:	9803      	ldr	r0, [sp, #12]
   204d4:	463b      	mov	r3, r7
   204d6:	4632      	mov	r2, r6
   204d8:	4629      	mov	r1, r5
   204da:	47a0      	blx	r4
   204dc:	e7e0      	b.n	204a0 <settings_call_set_handler+0x28>

000204de <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   204de:	3008      	adds	r0, #8
   204e0:	4770      	bx	lr

000204e2 <settings_nvs_read_fn>:
{
   204e2:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   204e4:	4613      	mov	r3, r2
{
   204e6:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   204e8:	460a      	mov	r2, r1
   204ea:	8881      	ldrh	r1, [r0, #4]
   204ec:	6800      	ldr	r0, [r0, #0]
   204ee:	f7ff ff5d 	bl	203ac <nvs_read>
}
   204f2:	42a0      	cmp	r0, r4
   204f4:	bfa8      	it	ge
   204f6:	4620      	movge	r0, r4
   204f8:	bd10      	pop	{r4, pc}

000204fa <settings_nvs_save>:
{
   204fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204fe:	b097      	sub	sp, #92	; 0x5c
   20500:	4604      	mov	r4, r0
   20502:	9201      	str	r2, [sp, #4]
   20504:	469b      	mov	fp, r3
	if (!name) {
   20506:	4689      	mov	r9, r1
   20508:	2900      	cmp	r1, #0
   2050a:	d069      	beq.n	205e0 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   2050c:	b1da      	cbz	r2, 20546 <settings_nvs_save+0x4c>
   2050e:	fabb f78b 	clz	r7, fp
   20512:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   20514:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   20516:	3501      	adds	r5, #1
   20518:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2051a:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2051c:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   20520:	1e6e      	subs	r6, r5, #1
   20522:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   20524:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   20528:	d02e      	beq.n	20588 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2052a:	234a      	movs	r3, #74	; 0x4a
   2052c:	aa03      	add	r2, sp, #12
   2052e:	4631      	mov	r1, r6
   20530:	4650      	mov	r0, sl
   20532:	f7ff ff3b 	bl	203ac <nvs_read>
		if (rc < 0) {
   20536:	2800      	cmp	r0, #0
   20538:	da07      	bge.n	2054a <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   2053a:	f110 0f02 	cmn.w	r0, #2
   2053e:	bf08      	it	eq
   20540:	46b0      	moveq	r8, r6
   20542:	4635      	mov	r5, r6
   20544:	e7ec      	b.n	20520 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   20546:	2701      	movs	r7, #1
   20548:	e7e4      	b.n	20514 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2054a:	ab16      	add	r3, sp, #88	; 0x58
   2054c:	4418      	add	r0, r3
   2054e:	2300      	movs	r3, #0
   20550:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   20554:	a903      	add	r1, sp, #12
   20556:	4648      	mov	r0, r9
   20558:	f001 fa20 	bl	2199c <strcmp>
   2055c:	2800      	cmp	r0, #0
   2055e:	d1f0      	bne.n	20542 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   20560:	2f00      	cmp	r7, #0
   20562:	d03b      	beq.n	205dc <settings_nvs_save+0xe2>
   20564:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   20566:	42b3      	cmp	r3, r6
   20568:	d142      	bne.n	205f0 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   2056a:	4622      	mov	r2, r4
   2056c:	1e73      	subs	r3, r6, #1
   2056e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   20572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20576:	2302      	movs	r3, #2
   20578:	4650      	mov	r0, sl
   2057a:	f7f1 fab1 	bl	11ae0 <nvs_write>
			if (rc < 0) {
   2057e:	2800      	cmp	r0, #0
   20580:	da36      	bge.n	205f0 <settings_nvs_save+0xf6>
}
   20582:	b017      	add	sp, #92	; 0x5c
   20584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   20588:	bb6f      	cbnz	r7, 205e6 <settings_nvs_save+0xec>
	write_name = true;
   2058a:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2058c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   20590:	d02b      	beq.n	205ea <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   20592:	f104 0508 	add.w	r5, r4, #8
   20596:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2059a:	9a01      	ldr	r2, [sp, #4]
   2059c:	465b      	mov	r3, fp
   2059e:	b289      	uxth	r1, r1
   205a0:	4628      	mov	r0, r5
   205a2:	f7f1 fa9d 	bl	11ae0 <nvs_write>
	if (rc < 0) {
   205a6:	2800      	cmp	r0, #0
   205a8:	dbeb      	blt.n	20582 <settings_nvs_save+0x88>
	if (write_name) {
   205aa:	b157      	cbz	r7, 205c2 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   205ac:	4648      	mov	r0, r9
   205ae:	f001 f9e5 	bl	2197c <strlen>
   205b2:	464a      	mov	r2, r9
   205b4:	4603      	mov	r3, r0
   205b6:	4641      	mov	r1, r8
   205b8:	4628      	mov	r0, r5
   205ba:	f7f1 fa91 	bl	11ae0 <nvs_write>
		if (rc < 0) {
   205be:	2800      	cmp	r0, #0
   205c0:	dbdf      	blt.n	20582 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   205c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   205c4:	4543      	cmp	r3, r8
   205c6:	d220      	bcs.n	2060a <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   205c8:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   205ca:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   205cc:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   205d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   205d4:	4628      	mov	r0, r5
   205d6:	f7f1 fa83 	bl	11ae0 <nvs_write>
   205da:	e016      	b.n	2060a <settings_nvs_save+0x110>
   205dc:	46b0      	mov	r8, r6
   205de:	e7d5      	b.n	2058c <settings_nvs_save+0x92>
		return -EINVAL;
   205e0:	f06f 0015 	mvn.w	r0, #21
   205e4:	e7cd      	b.n	20582 <settings_nvs_save+0x88>
		return 0;
   205e6:	2000      	movs	r0, #0
   205e8:	e7cb      	b.n	20582 <settings_nvs_save+0x88>
		return -ENOMEM;
   205ea:	f06f 000b 	mvn.w	r0, #11
   205ee:	e7c8      	b.n	20582 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   205f0:	4631      	mov	r1, r6
   205f2:	4650      	mov	r0, sl
   205f4:	f7ff fe7f 	bl	202f6 <nvs_delete>
			if (rc >= 0) {
   205f8:	2800      	cmp	r0, #0
   205fa:	dbc2      	blt.n	20582 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   205fc:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   20600:	313f      	adds	r1, #63	; 0x3f
   20602:	b289      	uxth	r1, r1
   20604:	4650      	mov	r0, sl
   20606:	f7ff fe76 	bl	202f6 <nvs_delete>
	if (rc < 0) {
   2060a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2060e:	e7b8      	b.n	20582 <settings_nvs_save+0x88>

00020610 <settings_nvs_backend_init>:
	cf->cf_nvs.flash_device = cf->flash_dev;
   20610:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   20612:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20614:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   20616:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   20618:	b1c3      	cbz	r3, 2064c <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2061a:	f100 0608 	add.w	r6, r0, #8
   2061e:	4630      	mov	r0, r6
   20620:	f7f1 f90a 	bl	11838 <nvs_mount>
	if (rc) {
   20624:	4605      	mov	r5, r0
   20626:	b970      	cbnz	r0, 20646 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   20628:	2302      	movs	r3, #2
   2062a:	f10d 0206 	add.w	r2, sp, #6
   2062e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20632:	4630      	mov	r0, r6
   20634:	f7ff feba 	bl	203ac <nvs_read>
	if (rc < 0) {
   20638:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2063a:	bfac      	ite	ge
   2063c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   20640:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   20644:	8723      	strh	r3, [r4, #56]	; 0x38
}
   20646:	4628      	mov	r0, r5
   20648:	b002      	add	sp, #8
   2064a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2064c:	f06f 0512 	mvn.w	r5, #18
   20650:	e7f9      	b.n	20646 <settings_nvs_backend_init+0x36>

00020652 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   20652:	b538      	push	{r3, r4, r5, lr}
   20654:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   20656:	42ab      	cmp	r3, r5
{
   20658:	4611      	mov	r1, r2
   2065a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2065c:	d804      	bhi.n	20668 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2065e:	461a      	mov	r2, r3
   20660:	f001 f9ca 	bl	219f8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   20664:	4620      	mov	r0, r4
   20666:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20668:	2400      	movs	r4, #0
   2066a:	e7fb      	b.n	20664 <_copy+0x12>

0002066c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2066c:	f001 b9cf 	b.w	21a0e <memset>

00020670 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   20670:	09c3      	lsrs	r3, r0, #7
   20672:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20676:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2067a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2067e:	b2c0      	uxtb	r0, r0
   20680:	4770      	bx	lr

00020682 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   20682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20686:	4606      	mov	r6, r0
   20688:	b0a9      	sub	sp, #164	; 0xa4
   2068a:	4688      	mov	r8, r1
   2068c:	4614      	mov	r4, r2
   2068e:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   20690:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   20694:	f7f1 fe1c 	bl	122d0 <uECC_get_rng>
		if (!rng_function ||
   20698:	4603      	mov	r3, r0
   2069a:	2800      	cmp	r0, #0
   2069c:	d03e      	beq.n	2071c <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2069e:	2140      	movs	r1, #64	; 0x40
   206a0:	a808      	add	r0, sp, #32
   206a2:	4798      	blx	r3
		if (!rng_function ||
   206a4:	b3d0      	cbz	r0, 2071c <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   206a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   206aa:	f112 031f 	adds.w	r3, r2, #31
   206ae:	bf48      	it	mi
   206b0:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   206b4:	466d      	mov	r5, sp
   206b6:	464a      	mov	r2, r9
   206b8:	a908      	add	r1, sp, #32
   206ba:	4628      	mov	r0, r5
   206bc:	f343 1347 	sbfx	r3, r3, #5, #8
   206c0:	f000 f9ee 	bl	20aa0 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   206c4:	4622      	mov	r2, r4
   206c6:	4629      	mov	r1, r5
   206c8:	a818      	add	r0, sp, #96	; 0x60
   206ca:	f000 fe03 	bl	212d4 <EccPoint_compute_public_key>
   206ce:	b318      	cbz	r0, 20718 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   206d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   206d4:	1dd9      	adds	r1, r3, #7
   206d6:	bf48      	it	mi
   206d8:	f103 010e 	addmi.w	r1, r3, #14
   206dc:	462a      	mov	r2, r5
   206de:	4640      	mov	r0, r8
   206e0:	10c9      	asrs	r1, r1, #3
   206e2:	f000 fe1f 	bl	21324 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   206e6:	f994 1001 	ldrsb.w	r1, [r4, #1]
   206ea:	aa18      	add	r2, sp, #96	; 0x60
   206ec:	4630      	mov	r0, r6
   206ee:	f000 fe19 	bl	21324 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   206f2:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   206f6:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   206fa:	ab18      	add	r3, sp, #96	; 0x60
   206fc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20700:	1870      	adds	r0, r6, r1
   20702:	f000 fe0f 	bl	21324 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   20706:	2220      	movs	r2, #32
   20708:	2100      	movs	r1, #0
   2070a:	4628      	mov	r0, r5
   2070c:	f001 f97f 	bl	21a0e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   20710:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   20712:	b029      	add	sp, #164	; 0xa4
   20714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   20718:	3f01      	subs	r7, #1
   2071a:	d1bb      	bne.n	20694 <uECC_make_key+0x12>
        		return 0;
   2071c:	2000      	movs	r0, #0
   2071e:	e7f8      	b.n	20712 <uECC_make_key+0x90>

00020720 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   20720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20724:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   20726:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   2072a:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2072e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   20732:	b0a4      	sub	sp, #144	; 0x90
   20734:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   20736:	1dda      	adds	r2, r3, #7
   20738:	bf48      	it	mi
   2073a:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2073e:	ad04      	add	r5, sp, #16
{
   20740:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   20742:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   20744:	4628      	mov	r0, r5
   20746:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   20748:	9502      	str	r5, [sp, #8]
   2074a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2074c:	f000 fdfe 	bl	2134c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   20750:	463a      	mov	r2, r7
   20752:	4649      	mov	r1, r9
   20754:	a814      	add	r0, sp, #80	; 0x50
   20756:	f000 fdf9 	bl	2134c <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2075a:	ab14      	add	r3, sp, #80	; 0x50
   2075c:	eb09 0107 	add.w	r1, r9, r7
   20760:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   20764:	463a      	mov	r2, r7
   20766:	f000 fdf1 	bl	2134c <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2076a:	4623      	mov	r3, r4
   2076c:	4632      	mov	r2, r6
   2076e:	4629      	mov	r1, r5
   20770:	4628      	mov	r0, r5
   20772:	f000 fd83 	bl	2127c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   20776:	fab0 f380 	clz	r3, r0
   2077a:	9401      	str	r4, [sp, #4]
   2077c:	aa24      	add	r2, sp, #144	; 0x90
   2077e:	095b      	lsrs	r3, r3, #5
   20780:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   20784:	8863      	ldrh	r3, [r4, #2]
   20786:	3301      	adds	r3, #1
   20788:	b21b      	sxth	r3, r3
   2078a:	9300      	str	r3, [sp, #0]
   2078c:	f851 2c88 	ldr.w	r2, [r1, #-136]
   20790:	a914      	add	r1, sp, #80	; 0x50
   20792:	2300      	movs	r3, #0
   20794:	4608      	mov	r0, r1
   20796:	f000 fca4 	bl	210e2 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2079a:	aa14      	add	r2, sp, #80	; 0x50
   2079c:	4639      	mov	r1, r7
   2079e:	4640      	mov	r0, r8
   207a0:	f000 fdc0 	bl	21324 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   207a4:	4621      	mov	r1, r4
   207a6:	a814      	add	r0, sp, #80	; 0x50
   207a8:	f000 fc10 	bl	20fcc <EccPoint_isZero>
   207ac:	af02      	add	r7, sp, #8
   207ae:	4604      	mov	r4, r0
   207b0:	2208      	movs	r2, #8
   207b2:	2100      	movs	r1, #0
   207b4:	4638      	mov	r0, r7
   207b6:	f001 f92a 	bl	21a0e <memset>
   207ba:	2220      	movs	r2, #32
   207bc:	2100      	movs	r1, #0
   207be:	4630      	mov	r0, r6
   207c0:	f001 f925 	bl	21a0e <memset>
   207c4:	2220      	movs	r2, #32
   207c6:	2100      	movs	r1, #0
   207c8:	4628      	mov	r0, r5
   207ca:	f001 f920 	bl	21a0e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   207ce:	fab4 f084 	clz	r0, r4
   207d2:	0940      	lsrs	r0, r0, #5
   207d4:	b024      	add	sp, #144	; 0x90
   207d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000207da <uECC_vli_add>:
{
   207da:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   207dc:	2400      	movs	r4, #0
{
   207de:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   207e0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   207e2:	b265      	sxtb	r5, r4
   207e4:	42ab      	cmp	r3, r5
   207e6:	dc00      	bgt.n	207ea <uECC_vli_add+0x10>
}
   207e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   207ea:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   207ee:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   207f2:	443d      	add	r5, r7
   207f4:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   207f6:	42af      	cmp	r7, r5
   207f8:	f000 0001 	and.w	r0, r0, #1
   207fc:	bf18      	it	ne
   207fe:	2000      	movne	r0, #0
		result[i] = sum;
   20800:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   20804:	bf88      	it	hi
   20806:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2080a:	3401      	adds	r4, #1
   2080c:	e7e9      	b.n	207e2 <uECC_vli_add+0x8>

0002080e <uECC_vli_rshift1>:
	vli += num_words;
   2080e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   20812:	2300      	movs	r3, #0
	while (vli-- > end) {
   20814:	4288      	cmp	r0, r1
   20816:	d300      	bcc.n	2081a <uECC_vli_rshift1+0xc>
}
   20818:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2081a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   2081e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   20822:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   20824:	07d3      	lsls	r3, r2, #31
   20826:	e7f5      	b.n	20814 <uECC_vli_rshift1+0x6>

00020828 <vli_modInv_update>:
	if (!EVEN(uv)) {
   20828:	6803      	ldr	r3, [r0, #0]
{
   2082a:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   2082c:	f013 0601 	ands.w	r6, r3, #1
{
   20830:	4605      	mov	r5, r0
   20832:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   20834:	d005      	beq.n	20842 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   20836:	4613      	mov	r3, r2
   20838:	460a      	mov	r2, r1
   2083a:	4601      	mov	r1, r0
   2083c:	f7ff ffcd 	bl	207da <uECC_vli_add>
   20840:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   20842:	4621      	mov	r1, r4
   20844:	4628      	mov	r0, r5
   20846:	f7ff ffe2 	bl	2080e <uECC_vli_rshift1>
	if (carry) {
   2084a:	b146      	cbz	r6, 2085e <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   2084c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   20850:	3a01      	subs	r2, #1
   20852:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   20856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2085a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2085e:	bd70      	pop	{r4, r5, r6, pc}

00020860 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   20860:	f04f 0c00 	mov.w	ip, #0
{
   20864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   20868:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   2086a:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   2086c:	fa4f f98c 	sxtb.w	r9, ip
   20870:	454b      	cmp	r3, r9
   20872:	dc16      	bgt.n	208a2 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   20874:	f04f 36ff 	mov.w	r6, #4294967295
   20878:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   2087c:	9601      	str	r6, [sp, #4]
   2087e:	f04f 0800 	mov.w	r8, #0
   20882:	9f01      	ldr	r7, [sp, #4]
   20884:	fa53 fe88 	uxtab	lr, r3, r8
   20888:	fa4f fe8e 	sxtb.w	lr, lr
   2088c:	45be      	cmp	lr, r7
   2088e:	fa5f f688 	uxtb.w	r6, r8
   20892:	db26      	blt.n	208e2 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   20894:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   20898:	f840 4c04 	str.w	r4, [r0, #-4]
}
   2089c:	b003      	add	sp, #12
   2089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   208a2:	f04f 0e00 	mov.w	lr, #0
   208a6:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   208aa:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   208ac:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   208b0:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   208b4:	fba6 6707 	umull	r6, r7, r6, r7
   208b8:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   208ba:	f10e 0e01 	add.w	lr, lr, #1
   208be:	417d      	adcs	r5, r7
   208c0:	fa4f f68e 	sxtb.w	r6, lr
   208c4:	f04f 0b00 	mov.w	fp, #0
   208c8:	bf28      	it	cs
   208ca:	f04f 0b01 	movcs.w	fp, #1
   208ce:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   208d0:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   208d2:	ddeb      	ble.n	208ac <uECC_vli_mult+0x4c>
		result[k] = r0;
   208d4:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   208d8:	462c      	mov	r4, r5
   208da:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   208de:	4645      	mov	r5, r8
   208e0:	e7c4      	b.n	2086c <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   208e2:	3601      	adds	r6, #1
   208e4:	46a9      	mov	r9, r5
   208e6:	b276      	sxtb	r6, r6
   208e8:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   208ec:	2500      	movs	r5, #0
   208ee:	b277      	sxtb	r7, r6
   208f0:	42bb      	cmp	r3, r7
   208f2:	dc05      	bgt.n	20900 <uECC_vli_mult+0xa0>
		result[k] = r0;
   208f4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   208f8:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   208fc:	464c      	mov	r4, r9
   208fe:	e7c0      	b.n	20882 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   20900:	f06f 0703 	mvn.w	r7, #3
   20904:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   20906:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   2090a:	f85a 7007 	ldr.w	r7, [sl, r7]
   2090e:	fba7 7c0c 	umull	r7, ip, r7, ip
   20912:	193c      	adds	r4, r7, r4
   20914:	eb5c 0909 	adcs.w	r9, ip, r9
   20918:	f04f 0b00 	mov.w	fp, #0
   2091c:	bf28      	it	cs
   2091e:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   20922:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   20924:	3601      	adds	r6, #1
   20926:	e7e2      	b.n	208ee <uECC_vli_mult+0x8e>

00020928 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   20928:	2300      	movs	r3, #0
{
   2092a:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2092c:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2092e:	b25a      	sxtb	r2, r3
   20930:	4291      	cmp	r1, r2
   20932:	dc00      	bgt.n	20936 <uECC_vli_clear+0xe>
}
   20934:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   20936:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2093a:	3301      	adds	r3, #1
   2093c:	e7f7      	b.n	2092e <uECC_vli_clear+0x6>

0002093e <uECC_vli_isZero>:
{
   2093e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   20940:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   20942:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   20944:	b25c      	sxtb	r4, r3
   20946:	42a1      	cmp	r1, r4
   20948:	dc03      	bgt.n	20952 <uECC_vli_isZero+0x14>
}
   2094a:	fab2 f082 	clz	r0, r2
   2094e:	0940      	lsrs	r0, r0, #5
   20950:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   20952:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   20956:	3301      	adds	r3, #1
   20958:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2095a:	e7f3      	b.n	20944 <uECC_vli_isZero+0x6>

0002095c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2095c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2095e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20960:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   20964:	f001 011f 	and.w	r1, r1, #31
   20968:	fa03 f101 	lsl.w	r1, r3, r1
}
   2096c:	4008      	ands	r0, r1
   2096e:	4770      	bx	lr

00020970 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   20970:	3901      	subs	r1, #1
{
   20972:	b510      	push	{r4, lr}
   20974:	4602      	mov	r2, r0
   20976:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   20978:	1d04      	adds	r4, r0, #4
   2097a:	0608      	lsls	r0, r1, #24
   2097c:	b2cb      	uxtb	r3, r1
   2097e:	d404      	bmi.n	2098a <uECC_vli_numBits+0x1a>
   20980:	3901      	subs	r1, #1
   20982:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   20986:	2800      	cmp	r0, #0
   20988:	d0f7      	beq.n	2097a <uECC_vli_numBits+0xa>
	return (i + 1);
   2098a:	3301      	adds	r3, #1
   2098c:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   2098e:	b150      	cbz	r0, 209a6 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   20990:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   20994:	3b01      	subs	r3, #1
   20996:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   2099a:	2300      	movs	r3, #0
   2099c:	b922      	cbnz	r2, 209a8 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2099e:	3801      	subs	r0, #1
   209a0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   209a4:	b200      	sxth	r0, r0
}
   209a6:	bd10      	pop	{r4, pc}
		digit >>= 1;
   209a8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   209aa:	3301      	adds	r3, #1
   209ac:	e7f6      	b.n	2099c <uECC_vli_numBits+0x2c>

000209ae <uECC_vli_set>:
{
   209ae:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   209b0:	2300      	movs	r3, #0
   209b2:	b25c      	sxtb	r4, r3
   209b4:	42a2      	cmp	r2, r4
   209b6:	dc00      	bgt.n	209ba <uECC_vli_set+0xc>
}
   209b8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   209ba:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   209be:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   209c2:	3301      	adds	r3, #1
   209c4:	e7f5      	b.n	209b2 <uECC_vli_set+0x4>

000209c6 <uECC_vli_cmp_unsafe>:
{
   209c6:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   209c8:	3a01      	subs	r2, #1
   209ca:	b252      	sxtb	r2, r2
   209cc:	0613      	lsls	r3, r2, #24
   209ce:	d501      	bpl.n	209d4 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   209d0:	2000      	movs	r0, #0
}
   209d2:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   209d4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   209d8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   209dc:	429c      	cmp	r4, r3
   209de:	d805      	bhi.n	209ec <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   209e0:	f102 32ff 	add.w	r2, r2, #4294967295
   209e4:	d2f2      	bcs.n	209cc <uECC_vli_cmp_unsafe+0x6>
			return -1;
   209e6:	f04f 30ff 	mov.w	r0, #4294967295
   209ea:	e7f2      	b.n	209d2 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   209ec:	2001      	movs	r0, #1
   209ee:	e7f0      	b.n	209d2 <uECC_vli_cmp_unsafe+0xc>

000209f0 <uECC_vli_equal>:
{
   209f0:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   209f2:	3a01      	subs	r2, #1
   209f4:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   209f6:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   209f8:	0614      	lsls	r4, r2, #24
   209fa:	d503      	bpl.n	20a04 <uECC_vli_equal+0x14>
}
   209fc:	1e18      	subs	r0, r3, #0
   209fe:	bf18      	it	ne
   20a00:	2001      	movne	r0, #1
   20a02:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   20a04:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   20a08:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   20a0c:	406c      	eors	r4, r5
   20a0e:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   20a10:	3a01      	subs	r2, #1
   20a12:	e7f1      	b.n	209f8 <uECC_vli_equal+0x8>

00020a14 <uECC_vli_sub>:
{
   20a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   20a16:	2400      	movs	r4, #0
{
   20a18:	4606      	mov	r6, r0
   20a1a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   20a1c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   20a1e:	b265      	sxtb	r5, r4
   20a20:	4565      	cmp	r5, ip
   20a22:	db00      	blt.n	20a26 <uECC_vli_sub+0x12>
}
   20a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   20a26:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   20a2a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   20a2e:	1a3d      	subs	r5, r7, r0
   20a30:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   20a32:	42af      	cmp	r7, r5
   20a34:	f000 0001 	and.w	r0, r0, #1
   20a38:	bf18      	it	ne
   20a3a:	2000      	movne	r0, #0
		result[i] = diff;
   20a3c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   20a40:	bf38      	it	cc
   20a42:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   20a46:	3401      	adds	r4, #1
   20a48:	e7e9      	b.n	20a1e <uECC_vli_sub+0xa>

00020a4a <uECC_vli_modAdd>:
{
   20a4a:	b570      	push	{r4, r5, r6, lr}
   20a4c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   20a50:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   20a52:	4633      	mov	r3, r6
{
   20a54:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   20a56:	f7ff fec0 	bl	207da <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   20a5a:	b930      	cbnz	r0, 20a6a <uECC_vli_modAdd+0x20>
   20a5c:	4632      	mov	r2, r6
   20a5e:	4621      	mov	r1, r4
   20a60:	4628      	mov	r0, r5
   20a62:	f7ff ffb0 	bl	209c6 <uECC_vli_cmp_unsafe>
   20a66:	2801      	cmp	r0, #1
   20a68:	d007      	beq.n	20a7a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   20a6a:	4633      	mov	r3, r6
   20a6c:	462a      	mov	r2, r5
   20a6e:	4621      	mov	r1, r4
   20a70:	4620      	mov	r0, r4
}
   20a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   20a76:	f7ff bfcd 	b.w	20a14 <uECC_vli_sub>
}
   20a7a:	bd70      	pop	{r4, r5, r6, pc}

00020a7c <uECC_vli_modSub>:
{
   20a7c:	b570      	push	{r4, r5, r6, lr}
   20a7e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   20a82:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   20a84:	4633      	mov	r3, r6
{
   20a86:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   20a88:	f7ff ffc4 	bl	20a14 <uECC_vli_sub>
	if (l_borrow) {
   20a8c:	b138      	cbz	r0, 20a9e <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   20a8e:	4633      	mov	r3, r6
   20a90:	462a      	mov	r2, r5
   20a92:	4621      	mov	r1, r4
   20a94:	4620      	mov	r0, r4
}
   20a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   20a9a:	f7ff be9e 	b.w	207da <uECC_vli_add>
}
   20a9e:	bd70      	pop	{r4, r5, r6, pc}

00020aa0 <uECC_vli_mmod>:
{
   20aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20aa4:	b0a5      	sub	sp, #148	; 0x94
   20aa6:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   20aa8:	ab14      	add	r3, sp, #80	; 0x50
   20aaa:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   20aae:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   20ab0:	4629      	mov	r1, r5
   20ab2:	4610      	mov	r0, r2
{
   20ab4:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   20ab6:	f7ff ff5b 	bl	20970 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   20aba:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   20abe:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   20ac0:	2c00      	cmp	r4, #0
   20ac2:	4621      	mov	r1, r4
   20ac4:	bfb8      	it	lt
   20ac6:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20aca:	4263      	negs	r3, r4
   20acc:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   20ad0:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20ad4:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   20ad8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20ada:	bf58      	it	pl
   20adc:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   20ade:	f7ff ff23 	bl	20928 <uECC_vli_clear>
	if (bit_shift > 0) {
   20ae2:	2e00      	cmp	r6, #0
   20ae4:	b208      	sxth	r0, r1
   20ae6:	dd2b      	ble.n	20b40 <uECC_vli_mmod+0xa0>
   20ae8:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   20aea:	2200      	movs	r2, #0
   20aec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   20af0:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20af4:	4613      	mov	r3, r2
   20af6:	429d      	cmp	r5, r3
   20af8:	d817      	bhi.n	20b2a <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   20afa:	006b      	lsls	r3, r5, #1
   20afc:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20afe:	ab04      	add	r3, sp, #16
   20b00:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b04:	1e6f      	subs	r7, r5, #1
   20b06:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20b08:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   20b0e:	2c00      	cmp	r4, #0
   20b10:	da54      	bge.n	20bbc <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   20b12:	ab24      	add	r3, sp, #144	; 0x90
   20b14:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20b18:	462a      	mov	r2, r5
   20b1a:	f856 1c88 	ldr.w	r1, [r6, #-136]
   20b1e:	4640      	mov	r0, r8
   20b20:	f7ff ff45 	bl	209ae <uECC_vli_set>
}
   20b24:	b025      	add	sp, #148	; 0x94
   20b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   20b2a:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   20b2e:	fa0c f106 	lsl.w	r1, ip, r6
   20b32:	430a      	orrs	r2, r1
   20b34:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20b38:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   20b3a:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20b3e:	e7da      	b.n	20af6 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   20b40:	ab04      	add	r3, sp, #16
   20b42:	462a      	mov	r2, r5
   20b44:	4639      	mov	r1, r7
   20b46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   20b4a:	f7ff ff30 	bl	209ae <uECC_vli_set>
   20b4e:	e7d4      	b.n	20afa <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20b50:	fa0f fe82 	sxth.w	lr, r2
   20b54:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   20b58:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   20b5c:	ab24      	add	r3, sp, #144	; 0x90
   20b5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20b62:	3001      	adds	r0, #1
   20b64:	f852 3c80 	ldr.w	r3, [r2, #-128]
   20b68:	440b      	add	r3, r1
   20b6a:	ebbb 0303 	subs.w	r3, fp, r3
   20b6e:	bf34      	ite	cc
   20b70:	2201      	movcc	r2, #1
   20b72:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   20b74:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   20b76:	bf18      	it	ne
   20b78:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   20b7a:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   20b7e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   20b82:	9b01      	ldr	r3, [sp, #4]
   20b84:	b242      	sxtb	r2, r0
   20b86:	429a      	cmp	r2, r3
   20b88:	dbe2      	blt.n	20b50 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   20b8a:	1a73      	subs	r3, r6, r1
   20b8c:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   20b8e:	4629      	mov	r1, r5
   20b90:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   20b92:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   20b94:	f7ff fe3b 	bl	2080e <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b98:	ab24      	add	r3, sp, #144	; 0x90
   20b9a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20b9e:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20ba0:	f853 2c80 	ldr.w	r2, [r3, #-128]
   20ba4:	f857 3c80 	ldr.w	r3, [r7, #-128]
   20ba8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   20bac:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20bb0:	4648      	mov	r0, r9
   20bb2:	3c01      	subs	r4, #1
   20bb4:	f7ff fe2b 	bl	2080e <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   20bb8:	b224      	sxth	r4, r4
   20bba:	e7a8      	b.n	20b0e <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20bbc:	ab24      	add	r3, sp, #144	; 0x90
   20bbe:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   20bc0:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   20bc4:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20bc6:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   20bca:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   20bce:	e7d8      	b.n	20b82 <uECC_vli_mmod+0xe2>

00020bd0 <uECC_vli_modMult_fast>:
{
   20bd0:	b530      	push	{r4, r5, lr}
   20bd2:	461c      	mov	r4, r3
   20bd4:	b091      	sub	sp, #68	; 0x44
   20bd6:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   20bd8:	f993 3000 	ldrsb.w	r3, [r3]
   20bdc:	4668      	mov	r0, sp
   20bde:	f7ff fe3f 	bl	20860 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   20be2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   20be6:	4669      	mov	r1, sp
   20be8:	4628      	mov	r0, r5
   20bea:	4798      	blx	r3
}
   20bec:	b011      	add	sp, #68	; 0x44
   20bee:	bd30      	pop	{r4, r5, pc}

00020bf0 <uECC_vli_modSquare_fast>:
{
   20bf0:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   20bf2:	460a      	mov	r2, r1
   20bf4:	f7ff bfec 	b.w	20bd0 <uECC_vli_modMult_fast>

00020bf8 <double_jacobian_default>:
{
   20bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   20bfc:	f993 6000 	ldrsb.w	r6, [r3]
{
   20c00:	b092      	sub	sp, #72	; 0x48
   20c02:	4604      	mov	r4, r0
   20c04:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   20c06:	4610      	mov	r0, r2
   20c08:	4631      	mov	r1, r6
{
   20c0a:	4615      	mov	r5, r2
   20c0c:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   20c0e:	f7ff fe96 	bl	2093e <uECC_vli_isZero>
   20c12:	2800      	cmp	r0, #0
   20c14:	f040 8091 	bne.w	20d3a <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   20c18:	463a      	mov	r2, r7
   20c1a:	4649      	mov	r1, r9
   20c1c:	a802      	add	r0, sp, #8
   20c1e:	f7ff ffe7 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   20c22:	463b      	mov	r3, r7
   20c24:	aa02      	add	r2, sp, #8
   20c26:	4621      	mov	r1, r4
   20c28:	a80a      	add	r0, sp, #40	; 0x28
   20c2a:	f7ff ffd1 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   20c2e:	a902      	add	r1, sp, #8
   20c30:	4608      	mov	r0, r1
   20c32:	463a      	mov	r2, r7
   20c34:	f7ff ffdc 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   20c38:	463b      	mov	r3, r7
   20c3a:	462a      	mov	r2, r5
   20c3c:	4649      	mov	r1, r9
   20c3e:	4648      	mov	r0, r9
   20c40:	f7ff ffc6 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20c44:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   20c48:	463a      	mov	r2, r7
   20c4a:	4629      	mov	r1, r5
   20c4c:	4628      	mov	r0, r5
   20c4e:	f7ff ffcf 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20c52:	4643      	mov	r3, r8
   20c54:	462a      	mov	r2, r5
   20c56:	4621      	mov	r1, r4
   20c58:	4620      	mov	r0, r4
   20c5a:	9600      	str	r6, [sp, #0]
   20c5c:	f7ff fef5 	bl	20a4a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   20c60:	4643      	mov	r3, r8
   20c62:	462a      	mov	r2, r5
   20c64:	4629      	mov	r1, r5
   20c66:	4628      	mov	r0, r5
   20c68:	9600      	str	r6, [sp, #0]
   20c6a:	f7ff feee 	bl	20a4a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   20c6e:	4643      	mov	r3, r8
   20c70:	462a      	mov	r2, r5
   20c72:	4621      	mov	r1, r4
   20c74:	4628      	mov	r0, r5
   20c76:	9600      	str	r6, [sp, #0]
   20c78:	f7ff ff00 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   20c7c:	463b      	mov	r3, r7
   20c7e:	462a      	mov	r2, r5
   20c80:	4621      	mov	r1, r4
   20c82:	4620      	mov	r0, r4
   20c84:	f7ff ffa4 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   20c88:	4643      	mov	r3, r8
   20c8a:	4622      	mov	r2, r4
   20c8c:	4621      	mov	r1, r4
   20c8e:	4628      	mov	r0, r5
   20c90:	9600      	str	r6, [sp, #0]
   20c92:	f7ff feda 	bl	20a4a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   20c96:	4643      	mov	r3, r8
   20c98:	9600      	str	r6, [sp, #0]
   20c9a:	462a      	mov	r2, r5
   20c9c:	4621      	mov	r1, r4
   20c9e:	4620      	mov	r0, r4
   20ca0:	f7ff fed3 	bl	20a4a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20ca4:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   20ca6:	07db      	lsls	r3, r3, #31
   20ca8:	d54a      	bpl.n	20d40 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20caa:	4633      	mov	r3, r6
   20cac:	4642      	mov	r2, r8
   20cae:	4621      	mov	r1, r4
   20cb0:	4620      	mov	r0, r4
   20cb2:	f7ff fd92 	bl	207da <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   20cb6:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20cb8:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   20cba:	4620      	mov	r0, r4
   20cbc:	f7ff fda7 	bl	2080e <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   20cc0:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   20cc4:	3b01      	subs	r3, #1
   20cc6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   20cca:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   20cce:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   20cd2:	463a      	mov	r2, r7
   20cd4:	4621      	mov	r1, r4
   20cd6:	4628      	mov	r0, r5
   20cd8:	f7ff ff8a 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   20cdc:	4643      	mov	r3, r8
   20cde:	aa0a      	add	r2, sp, #40	; 0x28
   20ce0:	4629      	mov	r1, r5
   20ce2:	4628      	mov	r0, r5
   20ce4:	9600      	str	r6, [sp, #0]
   20ce6:	f7ff fec9 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   20cea:	4643      	mov	r3, r8
   20cec:	aa0a      	add	r2, sp, #40	; 0x28
   20cee:	4629      	mov	r1, r5
   20cf0:	4628      	mov	r0, r5
   20cf2:	9600      	str	r6, [sp, #0]
   20cf4:	f7ff fec2 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   20cf8:	a90a      	add	r1, sp, #40	; 0x28
   20cfa:	4608      	mov	r0, r1
   20cfc:	4643      	mov	r3, r8
   20cfe:	462a      	mov	r2, r5
   20d00:	9600      	str	r6, [sp, #0]
   20d02:	f7ff febb 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   20d06:	463b      	mov	r3, r7
   20d08:	aa0a      	add	r2, sp, #40	; 0x28
   20d0a:	4621      	mov	r1, r4
   20d0c:	4620      	mov	r0, r4
   20d0e:	f7ff ff5f 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   20d12:	aa02      	add	r2, sp, #8
   20d14:	4643      	mov	r3, r8
   20d16:	4610      	mov	r0, r2
   20d18:	4621      	mov	r1, r4
   20d1a:	9600      	str	r6, [sp, #0]
   20d1c:	f7ff feae 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   20d20:	4632      	mov	r2, r6
   20d22:	4629      	mov	r1, r5
   20d24:	4620      	mov	r0, r4
   20d26:	f7ff fe42 	bl	209ae <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   20d2a:	4649      	mov	r1, r9
   20d2c:	4628      	mov	r0, r5
   20d2e:	f7ff fe3e 	bl	209ae <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   20d32:	a902      	add	r1, sp, #8
   20d34:	4648      	mov	r0, r9
   20d36:	f7ff fe3a 	bl	209ae <uECC_vli_set>
}
   20d3a:	b012      	add	sp, #72	; 0x48
   20d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   20d40:	4631      	mov	r1, r6
   20d42:	4620      	mov	r0, r4
   20d44:	f7ff fd63 	bl	2080e <uECC_vli_rshift1>
   20d48:	e7c3      	b.n	20cd2 <double_jacobian_default+0xda>

00020d4a <x_side_default>:
{
   20d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d4e:	4615      	mov	r5, r2
   20d50:	b08a      	sub	sp, #40	; 0x28
   20d52:	4604      	mov	r4, r0
   20d54:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20d56:	221c      	movs	r2, #28
   20d58:	2100      	movs	r1, #0
   20d5a:	a803      	add	r0, sp, #12
   20d5c:	f000 fe57 	bl	21a0e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20d60:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   20d62:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20d66:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20d68:	462a      	mov	r2, r5
   20d6a:	4631      	mov	r1, r6
   20d6c:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20d6e:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20d70:	f7ff ff3e 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20d74:	463b      	mov	r3, r7
   20d76:	aa02      	add	r2, sp, #8
   20d78:	4621      	mov	r1, r4
   20d7a:	4620      	mov	r0, r4
   20d7c:	f8cd 8000 	str.w	r8, [sp]
   20d80:	f7ff fe7c 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   20d84:	462b      	mov	r3, r5
   20d86:	4632      	mov	r2, r6
   20d88:	4621      	mov	r1, r4
   20d8a:	4620      	mov	r0, r4
   20d8c:	f7ff ff20 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   20d90:	f8cd 8000 	str.w	r8, [sp]
   20d94:	463b      	mov	r3, r7
   20d96:	f105 0284 	add.w	r2, r5, #132	; 0x84
   20d9a:	4621      	mov	r1, r4
   20d9c:	4620      	mov	r0, r4
   20d9e:	f7ff fe54 	bl	20a4a <uECC_vli_modAdd>
}
   20da2:	b00a      	add	sp, #40	; 0x28
   20da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020da8 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   20da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20dac:	b09a      	sub	sp, #104	; 0x68
   20dae:	4616      	mov	r6, r2
   20db0:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   20db4:	4644      	mov	r4, r8
{
   20db6:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   20db8:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20dbc:	9500      	str	r5, [sp, #0]
{
   20dbe:	4607      	mov	r7, r0
   20dc0:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20dc2:	4623      	mov	r3, r4
   20dc4:	4602      	mov	r2, r0
   20dc6:	4631      	mov	r1, r6
   20dc8:	a802      	add	r0, sp, #8
   20dca:	f7ff fe57 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20dce:	a902      	add	r1, sp, #8
   20dd0:	4642      	mov	r2, r8
   20dd2:	4608      	mov	r0, r1
   20dd4:	f7ff ff0c 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20dd8:	4643      	mov	r3, r8
   20dda:	aa02      	add	r2, sp, #8
   20ddc:	4639      	mov	r1, r7
   20dde:	4638      	mov	r0, r7
   20de0:	f7ff fef6 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20de4:	4643      	mov	r3, r8
   20de6:	aa02      	add	r2, sp, #8
   20de8:	4631      	mov	r1, r6
   20dea:	4630      	mov	r0, r6
   20dec:	f7ff fef0 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   20df0:	4623      	mov	r3, r4
   20df2:	4652      	mov	r2, sl
   20df4:	4649      	mov	r1, r9
   20df6:	a802      	add	r0, sp, #8
   20df8:	9500      	str	r5, [sp, #0]
   20dfa:	f7ff fe26 	bl	20a4a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20dfe:	4623      	mov	r3, r4
   20e00:	4652      	mov	r2, sl
   20e02:	4649      	mov	r1, r9
   20e04:	4648      	mov	r0, r9
   20e06:	9500      	str	r5, [sp, #0]
   20e08:	f7ff fe38 	bl	20a7c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   20e0c:	4623      	mov	r3, r4
   20e0e:	463a      	mov	r2, r7
   20e10:	4631      	mov	r1, r6
   20e12:	a80a      	add	r0, sp, #40	; 0x28
   20e14:	9500      	str	r5, [sp, #0]
   20e16:	f7ff fe31 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   20e1a:	4643      	mov	r3, r8
   20e1c:	aa0a      	add	r2, sp, #40	; 0x28
   20e1e:	4651      	mov	r1, sl
   20e20:	4650      	mov	r0, sl
   20e22:	f7ff fed5 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   20e26:	4623      	mov	r3, r4
   20e28:	4632      	mov	r2, r6
   20e2a:	4639      	mov	r1, r7
   20e2c:	a80a      	add	r0, sp, #40	; 0x28
   20e2e:	9500      	str	r5, [sp, #0]
   20e30:	f7ff fe0b 	bl	20a4a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   20e34:	4642      	mov	r2, r8
   20e36:	4649      	mov	r1, r9
   20e38:	4630      	mov	r0, r6
   20e3a:	f7ff fed9 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   20e3e:	4623      	mov	r3, r4
   20e40:	aa0a      	add	r2, sp, #40	; 0x28
   20e42:	4631      	mov	r1, r6
   20e44:	4630      	mov	r0, r6
   20e46:	9500      	str	r5, [sp, #0]
   20e48:	f7ff fe18 	bl	20a7c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   20e4c:	4623      	mov	r3, r4
   20e4e:	4632      	mov	r2, r6
   20e50:	4639      	mov	r1, r7
   20e52:	a812      	add	r0, sp, #72	; 0x48
   20e54:	9500      	str	r5, [sp, #0]
   20e56:	f7ff fe11 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   20e5a:	4643      	mov	r3, r8
   20e5c:	aa12      	add	r2, sp, #72	; 0x48
   20e5e:	4649      	mov	r1, r9
   20e60:	4648      	mov	r0, r9
   20e62:	f7ff feb5 	bl	20bd0 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   20e66:	4623      	mov	r3, r4
   20e68:	4652      	mov	r2, sl
   20e6a:	4649      	mov	r1, r9
   20e6c:	4648      	mov	r0, r9
   20e6e:	9500      	str	r5, [sp, #0]
   20e70:	f7ff fe04 	bl	20a7c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   20e74:	4642      	mov	r2, r8
   20e76:	a902      	add	r1, sp, #8
   20e78:	a812      	add	r0, sp, #72	; 0x48
   20e7a:	f7ff feb9 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   20e7e:	a912      	add	r1, sp, #72	; 0x48
   20e80:	4623      	mov	r3, r4
   20e82:	aa0a      	add	r2, sp, #40	; 0x28
   20e84:	4608      	mov	r0, r1
   20e86:	9500      	str	r5, [sp, #0]
   20e88:	f7ff fdf8 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   20e8c:	4623      	mov	r3, r4
   20e8e:	463a      	mov	r2, r7
   20e90:	a912      	add	r1, sp, #72	; 0x48
   20e92:	a80a      	add	r0, sp, #40	; 0x28
   20e94:	9500      	str	r5, [sp, #0]
   20e96:	f7ff fdf1 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   20e9a:	a90a      	add	r1, sp, #40	; 0x28
   20e9c:	4643      	mov	r3, r8
   20e9e:	aa02      	add	r2, sp, #8
   20ea0:	4608      	mov	r0, r1
   20ea2:	f7ff fe95 	bl	20bd0 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   20ea6:	4623      	mov	r3, r4
   20ea8:	4652      	mov	r2, sl
   20eaa:	a90a      	add	r1, sp, #40	; 0x28
   20eac:	4650      	mov	r0, sl
   20eae:	9500      	str	r5, [sp, #0]
   20eb0:	f7ff fde4 	bl	20a7c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   20eb4:	462a      	mov	r2, r5
   20eb6:	a912      	add	r1, sp, #72	; 0x48
   20eb8:	4638      	mov	r0, r7
   20eba:	f7ff fd78 	bl	209ae <uECC_vli_set>
}
   20ebe:	b01a      	add	sp, #104	; 0x68
   20ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020ec4 <uECC_vli_modInv>:
{
   20ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ec6:	460f      	mov	r7, r1
   20ec8:	b0a1      	sub	sp, #132	; 0x84
   20eca:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   20ecc:	4619      	mov	r1, r3
   20ece:	4638      	mov	r0, r7
{
   20ed0:	4615      	mov	r5, r2
   20ed2:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   20ed4:	f7ff fd33 	bl	2093e <uECC_vli_isZero>
   20ed8:	b128      	cbz	r0, 20ee6 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   20eda:	4630      	mov	r0, r6
}
   20edc:	b021      	add	sp, #132	; 0x84
   20ede:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   20ee2:	f7ff bd21 	b.w	20928 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   20ee6:	4622      	mov	r2, r4
   20ee8:	4639      	mov	r1, r7
   20eea:	4668      	mov	r0, sp
   20eec:	f7ff fd5f 	bl	209ae <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   20ef0:	4629      	mov	r1, r5
   20ef2:	a808      	add	r0, sp, #32
   20ef4:	f7ff fd5b 	bl	209ae <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   20ef8:	a810      	add	r0, sp, #64	; 0x40
   20efa:	4621      	mov	r1, r4
   20efc:	f7ff fd14 	bl	20928 <uECC_vli_clear>
	u[0] = 1;
   20f00:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   20f02:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   20f04:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   20f06:	f7ff fd0f 	bl	20928 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   20f0a:	4622      	mov	r2, r4
   20f0c:	a908      	add	r1, sp, #32
   20f0e:	4668      	mov	r0, sp
   20f10:	f7ff fd59 	bl	209c6 <uECC_vli_cmp_unsafe>
   20f14:	b930      	cbnz	r0, 20f24 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   20f16:	4622      	mov	r2, r4
   20f18:	a910      	add	r1, sp, #64	; 0x40
   20f1a:	4630      	mov	r0, r6
   20f1c:	f7ff fd47 	bl	209ae <uECC_vli_set>
}
   20f20:	b021      	add	sp, #132	; 0x84
   20f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   20f24:	9b00      	ldr	r3, [sp, #0]
   20f26:	07da      	lsls	r2, r3, #31
   20f28:	d409      	bmi.n	20f3e <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   20f2a:	4621      	mov	r1, r4
   20f2c:	4668      	mov	r0, sp
   20f2e:	f7ff fc6e 	bl	2080e <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   20f32:	4622      	mov	r2, r4
   20f34:	4629      	mov	r1, r5
   20f36:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   20f38:	f7ff fc76 	bl	20828 <vli_modInv_update>
   20f3c:	e7e5      	b.n	20f0a <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   20f3e:	9b08      	ldr	r3, [sp, #32]
   20f40:	07db      	lsls	r3, r3, #31
   20f42:	d407      	bmi.n	20f54 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   20f44:	4621      	mov	r1, r4
   20f46:	a808      	add	r0, sp, #32
   20f48:	f7ff fc61 	bl	2080e <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   20f4c:	4622      	mov	r2, r4
   20f4e:	4629      	mov	r1, r5
   20f50:	a818      	add	r0, sp, #96	; 0x60
   20f52:	e7f1      	b.n	20f38 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   20f54:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   20f56:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   20f58:	dd1c      	ble.n	20f94 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   20f5a:	aa08      	add	r2, sp, #32
   20f5c:	4669      	mov	r1, sp
   20f5e:	4668      	mov	r0, sp
   20f60:	f7ff fd58 	bl	20a14 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   20f64:	4621      	mov	r1, r4
   20f66:	4668      	mov	r0, sp
   20f68:	f7ff fc51 	bl	2080e <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   20f6c:	4622      	mov	r2, r4
   20f6e:	a918      	add	r1, sp, #96	; 0x60
   20f70:	a810      	add	r0, sp, #64	; 0x40
   20f72:	f7ff fd28 	bl	209c6 <uECC_vli_cmp_unsafe>
   20f76:	2800      	cmp	r0, #0
   20f78:	da05      	bge.n	20f86 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   20f7a:	a910      	add	r1, sp, #64	; 0x40
   20f7c:	4623      	mov	r3, r4
   20f7e:	462a      	mov	r2, r5
   20f80:	4608      	mov	r0, r1
   20f82:	f7ff fc2a 	bl	207da <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   20f86:	a910      	add	r1, sp, #64	; 0x40
   20f88:	4623      	mov	r3, r4
   20f8a:	aa18      	add	r2, sp, #96	; 0x60
   20f8c:	4608      	mov	r0, r1
   20f8e:	f7ff fd41 	bl	20a14 <uECC_vli_sub>
   20f92:	e7ce      	b.n	20f32 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   20f94:	466a      	mov	r2, sp
   20f96:	a808      	add	r0, sp, #32
   20f98:	f7ff fd3c 	bl	20a14 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   20f9c:	4621      	mov	r1, r4
   20f9e:	a808      	add	r0, sp, #32
   20fa0:	f7ff fc35 	bl	2080e <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   20fa4:	4622      	mov	r2, r4
   20fa6:	a910      	add	r1, sp, #64	; 0x40
   20fa8:	a818      	add	r0, sp, #96	; 0x60
   20faa:	f7ff fd0c 	bl	209c6 <uECC_vli_cmp_unsafe>
   20fae:	2800      	cmp	r0, #0
   20fb0:	da05      	bge.n	20fbe <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   20fb2:	a918      	add	r1, sp, #96	; 0x60
   20fb4:	4623      	mov	r3, r4
   20fb6:	462a      	mov	r2, r5
   20fb8:	4608      	mov	r0, r1
   20fba:	f7ff fc0e 	bl	207da <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   20fbe:	a918      	add	r1, sp, #96	; 0x60
   20fc0:	4623      	mov	r3, r4
   20fc2:	aa10      	add	r2, sp, #64	; 0x40
   20fc4:	4608      	mov	r0, r1
   20fc6:	f7ff fd25 	bl	20a14 <uECC_vli_sub>
   20fca:	e7bf      	b.n	20f4c <uECC_vli_modInv+0x88>

00020fcc <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   20fcc:	7809      	ldrb	r1, [r1, #0]
   20fce:	0049      	lsls	r1, r1, #1
   20fd0:	b249      	sxtb	r1, r1
   20fd2:	f7ff bcb4 	b.w	2093e <uECC_vli_isZero>

00020fd6 <apply_z>:
{
   20fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   20fd8:	4615      	mov	r5, r2
   20fda:	b089      	sub	sp, #36	; 0x24
   20fdc:	461c      	mov	r4, r3
   20fde:	4607      	mov	r7, r0
   20fe0:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   20fe2:	461a      	mov	r2, r3
   20fe4:	4629      	mov	r1, r5
   20fe6:	4668      	mov	r0, sp
   20fe8:	f7ff fe02 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   20fec:	4623      	mov	r3, r4
   20fee:	466a      	mov	r2, sp
   20ff0:	4639      	mov	r1, r7
   20ff2:	4638      	mov	r0, r7
   20ff4:	f7ff fdec 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   20ff8:	4623      	mov	r3, r4
   20ffa:	462a      	mov	r2, r5
   20ffc:	4669      	mov	r1, sp
   20ffe:	4668      	mov	r0, sp
   21000:	f7ff fde6 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   21004:	4623      	mov	r3, r4
   21006:	466a      	mov	r2, sp
   21008:	4631      	mov	r1, r6
   2100a:	4630      	mov	r0, r6
   2100c:	f7ff fde0 	bl	20bd0 <uECC_vli_modMult_fast>
}
   21010:	b009      	add	sp, #36	; 0x24
   21012:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021014 <XYcZ_add>:
{
   21014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21018:	b08a      	sub	sp, #40	; 0x28
   2101a:	4614      	mov	r4, r2
   2101c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   21020:	4655      	mov	r5, sl
{
   21022:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   21024:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21028:	9600      	str	r6, [sp, #0]
{
   2102a:	4680      	mov	r8, r0
   2102c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2102e:	462b      	mov	r3, r5
   21030:	4602      	mov	r2, r0
   21032:	4621      	mov	r1, r4
   21034:	a802      	add	r0, sp, #8
   21036:	f7ff fd21 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2103a:	a902      	add	r1, sp, #8
   2103c:	4652      	mov	r2, sl
   2103e:	4608      	mov	r0, r1
   21040:	f7ff fdd6 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   21044:	4653      	mov	r3, sl
   21046:	aa02      	add	r2, sp, #8
   21048:	4641      	mov	r1, r8
   2104a:	4640      	mov	r0, r8
   2104c:	f7ff fdc0 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   21050:	4653      	mov	r3, sl
   21052:	aa02      	add	r2, sp, #8
   21054:	4621      	mov	r1, r4
   21056:	4620      	mov	r0, r4
   21058:	f7ff fdba 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2105c:	462b      	mov	r3, r5
   2105e:	464a      	mov	r2, r9
   21060:	4639      	mov	r1, r7
   21062:	4638      	mov	r0, r7
   21064:	9600      	str	r6, [sp, #0]
   21066:	f7ff fd09 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2106a:	4652      	mov	r2, sl
   2106c:	4639      	mov	r1, r7
   2106e:	a802      	add	r0, sp, #8
   21070:	f7ff fdbe 	bl	20bf0 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   21074:	a902      	add	r1, sp, #8
   21076:	462b      	mov	r3, r5
   21078:	4642      	mov	r2, r8
   2107a:	4608      	mov	r0, r1
   2107c:	9600      	str	r6, [sp, #0]
   2107e:	f7ff fcfd 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   21082:	a902      	add	r1, sp, #8
   21084:	462b      	mov	r3, r5
   21086:	4622      	mov	r2, r4
   21088:	4608      	mov	r0, r1
   2108a:	9600      	str	r6, [sp, #0]
   2108c:	f7ff fcf6 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   21090:	462b      	mov	r3, r5
   21092:	4642      	mov	r2, r8
   21094:	4621      	mov	r1, r4
   21096:	4620      	mov	r0, r4
   21098:	9600      	str	r6, [sp, #0]
   2109a:	f7ff fcef 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2109e:	4653      	mov	r3, sl
   210a0:	4622      	mov	r2, r4
   210a2:	4649      	mov	r1, r9
   210a4:	4648      	mov	r0, r9
   210a6:	f7ff fd93 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   210aa:	462b      	mov	r3, r5
   210ac:	aa02      	add	r2, sp, #8
   210ae:	4641      	mov	r1, r8
   210b0:	4620      	mov	r0, r4
   210b2:	9600      	str	r6, [sp, #0]
   210b4:	f7ff fce2 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   210b8:	4653      	mov	r3, sl
   210ba:	4622      	mov	r2, r4
   210bc:	4639      	mov	r1, r7
   210be:	4638      	mov	r0, r7
   210c0:	f7ff fd86 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   210c4:	462b      	mov	r3, r5
   210c6:	464a      	mov	r2, r9
   210c8:	4639      	mov	r1, r7
   210ca:	4638      	mov	r0, r7
   210cc:	9600      	str	r6, [sp, #0]
   210ce:	f7ff fcd5 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   210d2:	4632      	mov	r2, r6
   210d4:	a902      	add	r1, sp, #8
   210d6:	4620      	mov	r0, r4
   210d8:	f7ff fc69 	bl	209ae <uECC_vli_set>
}
   210dc:	b00a      	add	sp, #40	; 0x28
   210de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000210e2 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   210e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210e6:	b0b1      	sub	sp, #196	; 0xc4
   210e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   210ec:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   210ee:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   210f2:	a818      	add	r0, sp, #96	; 0x60
{
   210f4:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   210f6:	463a      	mov	r2, r7
{
   210f8:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   210fa:	f7ff fc58 	bl	209ae <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   210fe:	00bb      	lsls	r3, r7, #2
   21100:	9305      	str	r3, [sp, #20]
   21102:	9b04      	ldr	r3, [sp, #16]
   21104:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   21108:	4619      	mov	r1, r3
   2110a:	a828      	add	r0, sp, #160	; 0xa0
   2110c:	9302      	str	r3, [sp, #8]
   2110e:	f7ff fc4e 	bl	209ae <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   21112:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   21116:	2d00      	cmp	r5, #0
   21118:	f000 8086 	beq.w	21228 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   2111c:	4632      	mov	r2, r6
   2111e:	4629      	mov	r1, r5
   21120:	a808      	add	r0, sp, #32
   21122:	f7ff fc44 	bl	209ae <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   21126:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2112a:	4632      	mov	r2, r6
   2112c:	a918      	add	r1, sp, #96	; 0x60
   2112e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   21130:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   21134:	f7ff fc3b 	bl	209ae <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   21138:	a928      	add	r1, sp, #160	; 0xa0
   2113a:	4648      	mov	r0, r9
   2113c:	f7ff fc37 	bl	209ae <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   21140:	4623      	mov	r3, r4
   21142:	aa08      	add	r2, sp, #32
   21144:	a818      	add	r0, sp, #96	; 0x60
   21146:	f7ff ff46 	bl	20fd6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2114a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2114e:	4623      	mov	r3, r4
   21150:	aa08      	add	r2, sp, #32
   21152:	a928      	add	r1, sp, #160	; 0xa0
   21154:	a818      	add	r0, sp, #96	; 0x60
   21156:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   21158:	4623      	mov	r3, r4
   2115a:	aa08      	add	r2, sp, #32
   2115c:	4649      	mov	r1, r9
   2115e:	4640      	mov	r0, r8
   21160:	f7ff ff39 	bl	20fd6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   21164:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   21168:	3d02      	subs	r5, #2
   2116a:	b22d      	sxth	r5, r5
   2116c:	2d00      	cmp	r5, #0
   2116e:	dc62      	bgt.n	21236 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21170:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21174:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21176:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2117a:	ab10      	add	r3, sp, #64	; 0x40
   2117c:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   21180:	43ed      	mvns	r5, r5
   21182:	ab20      	add	r3, sp, #128	; 0x80
   21184:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   21188:	f005 0501 	and.w	r5, r5, #1
   2118c:	ab10      	add	r3, sp, #64	; 0x40
   2118e:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   21192:	ab20      	add	r3, sp, #128	; 0x80
   21194:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   21198:	462b      	mov	r3, r5
   2119a:	464a      	mov	r2, r9
   2119c:	4631      	mov	r1, r6
   2119e:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   211a0:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   211a4:	f7ff fe00 	bl	20da8 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   211a8:	4653      	mov	r3, sl
   211aa:	aa10      	add	r2, sp, #64	; 0x40
   211ac:	a918      	add	r1, sp, #96	; 0x60
   211ae:	a808      	add	r0, sp, #32
   211b0:	9700      	str	r7, [sp, #0]
   211b2:	f7ff fc63 	bl	20a7c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   211b6:	a908      	add	r1, sp, #32
   211b8:	4623      	mov	r3, r4
   211ba:	4632      	mov	r2, r6
   211bc:	4608      	mov	r0, r1
   211be:	f7ff fd07 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   211c2:	a908      	add	r1, sp, #32
   211c4:	9a04      	ldr	r2, [sp, #16]
   211c6:	4623      	mov	r3, r4
   211c8:	4608      	mov	r0, r1
   211ca:	f7ff fd01 	bl	20bd0 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   211ce:	a908      	add	r1, sp, #32
   211d0:	463b      	mov	r3, r7
   211d2:	4652      	mov	r2, sl
   211d4:	4608      	mov	r0, r1
   211d6:	f7ff fe75 	bl	20ec4 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   211da:	a908      	add	r1, sp, #32
   211dc:	9a02      	ldr	r2, [sp, #8]
   211de:	4623      	mov	r3, r4
   211e0:	4608      	mov	r0, r1
   211e2:	f7ff fcf5 	bl	20bd0 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   211e6:	a908      	add	r1, sp, #32
   211e8:	4623      	mov	r3, r4
   211ea:	4642      	mov	r2, r8
   211ec:	4608      	mov	r0, r1
   211ee:	f7ff fcef 	bl	20bd0 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   211f2:	4633      	mov	r3, r6
   211f4:	4642      	mov	r2, r8
   211f6:	4629      	mov	r1, r5
   211f8:	4648      	mov	r0, r9
   211fa:	9400      	str	r4, [sp, #0]
   211fc:	f7ff ff0a 	bl	21014 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   21200:	4623      	mov	r3, r4
   21202:	aa08      	add	r2, sp, #32
   21204:	a920      	add	r1, sp, #128	; 0x80
   21206:	a810      	add	r0, sp, #64	; 0x40
   21208:	f7ff fee5 	bl	20fd6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2120c:	9803      	ldr	r0, [sp, #12]
   2120e:	463a      	mov	r2, r7
   21210:	a910      	add	r1, sp, #64	; 0x40
   21212:	f7ff fbcc 	bl	209ae <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   21216:	9803      	ldr	r0, [sp, #12]
   21218:	9b05      	ldr	r3, [sp, #20]
   2121a:	a920      	add	r1, sp, #128	; 0x80
   2121c:	4418      	add	r0, r3
   2121e:	f7ff fbc6 	bl	209ae <uECC_vli_set>
}
   21222:	b031      	add	sp, #196	; 0xc4
   21224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   21228:	4631      	mov	r1, r6
   2122a:	a808      	add	r0, sp, #32
   2122c:	f7ff fb7c 	bl	20928 <uECC_vli_clear>
		z[0] = 1;
   21230:	2301      	movs	r3, #1
   21232:	9308      	str	r3, [sp, #32]
   21234:	e777      	b.n	21126 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   21236:	4629      	mov	r1, r5
   21238:	4650      	mov	r0, sl
   2123a:	f7ff fb8f 	bl	2095c <uECC_vli_testBit>
   2123e:	fab0 f680 	clz	r6, r0
   21242:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21244:	f1c6 0101 	rsb	r1, r6, #1
   21248:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2124c:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   21250:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   21254:	4633      	mov	r3, r6
   21256:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   2125a:	465a      	mov	r2, fp
   2125c:	9400      	str	r4, [sp, #0]
   2125e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   21262:	f7ff fda1 	bl	20da8 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   21266:	9907      	ldr	r1, [sp, #28]
   21268:	9806      	ldr	r0, [sp, #24]
   2126a:	9400      	str	r4, [sp, #0]
   2126c:	460b      	mov	r3, r1
   2126e:	4602      	mov	r2, r0
   21270:	4631      	mov	r1, r6
   21272:	4658      	mov	r0, fp
   21274:	f7ff fece 	bl	21014 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   21278:	3d01      	subs	r5, #1
   2127a:	e776      	b.n	2116a <EccPoint_mult+0x88>

0002127c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21280:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   21284:	f119 081f 	adds.w	r8, r9, #31
{
   21288:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2128a:	bf48      	it	mi
   2128c:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   21290:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21292:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21296:	3524      	adds	r5, #36	; 0x24
   21298:	4601      	mov	r1, r0
{
   2129a:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2129c:	4643      	mov	r3, r8
   2129e:	462a      	mov	r2, r5
   212a0:	4630      	mov	r0, r6
   212a2:	f7ff fa9a 	bl	207da <uECC_vli_add>
   212a6:	4604      	mov	r4, r0
   212a8:	b990      	cbnz	r0, 212d0 <regularize_k+0x54>
   212aa:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   212ae:	da06      	bge.n	212be <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   212b0:	4649      	mov	r1, r9
   212b2:	4630      	mov	r0, r6
   212b4:	f7ff fb52 	bl	2095c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   212b8:	1e04      	subs	r4, r0, #0
   212ba:	bf18      	it	ne
   212bc:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   212be:	4643      	mov	r3, r8
   212c0:	462a      	mov	r2, r5
   212c2:	4631      	mov	r1, r6
   212c4:	4638      	mov	r0, r7
   212c6:	f7ff fa88 	bl	207da <uECC_vli_add>

	return carry;
}
   212ca:	4620      	mov	r0, r4
   212cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   212d0:	2401      	movs	r4, #1
   212d2:	e7f4      	b.n	212be <regularize_k+0x42>

000212d4 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   212d4:	b530      	push	{r4, r5, lr}
   212d6:	4614      	mov	r4, r2
   212d8:	b095      	sub	sp, #84	; 0x54
   212da:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   212dc:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   212de:	4623      	mov	r3, r4
{
   212e0:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   212e2:	a904      	add	r1, sp, #16
   212e4:	9102      	str	r1, [sp, #8]
   212e6:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   212e8:	f7ff ffc8 	bl	2127c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   212ec:	fab0 f380 	clz	r3, r0
   212f0:	095b      	lsrs	r3, r3, #5
   212f2:	aa14      	add	r2, sp, #80	; 0x50
   212f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   212f8:	8863      	ldrh	r3, [r4, #2]
   212fa:	9401      	str	r4, [sp, #4]
   212fc:	3301      	adds	r3, #1
   212fe:	b21b      	sxth	r3, r3
   21300:	9300      	str	r3, [sp, #0]
   21302:	f852 2c48 	ldr.w	r2, [r2, #-72]
   21306:	2300      	movs	r3, #0
   21308:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2130c:	4628      	mov	r0, r5
   2130e:	f7ff fee8 	bl	210e2 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   21312:	4621      	mov	r1, r4
   21314:	4628      	mov	r0, r5
   21316:	f7ff fe59 	bl	20fcc <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2131a:	fab0 f080 	clz	r0, r0
   2131e:	0940      	lsrs	r0, r0, #5
   21320:	b015      	add	sp, #84	; 0x54
   21322:	bd30      	pop	{r4, r5, pc}

00021324 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   21324:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   21326:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   21328:	1e4f      	subs	r7, r1, #1
   2132a:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2132c:	428c      	cmp	r4, r1
   2132e:	f105 0501 	add.w	r5, r5, #1
   21332:	db00      	blt.n	21336 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   21334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   21336:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   21338:	f023 0603 	bic.w	r6, r3, #3
   2133c:	f003 0303 	and.w	r3, r3, #3
   21340:	5996      	ldr	r6, [r2, r6]
   21342:	00db      	lsls	r3, r3, #3
   21344:	fa26 f303 	lsr.w	r3, r6, r3
   21348:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2134a:	e7ee      	b.n	2132a <uECC_vli_nativeToBytes+0x6>

0002134c <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2134e:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   21350:	1cd1      	adds	r1, r2, #3
   21352:	bf48      	it	mi
   21354:	1d91      	addmi	r1, r2, #6
   21356:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2135a:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2135c:	f7ff fae4 	bl	20928 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   21360:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   21362:	1e67      	subs	r7, r4, #1
   21364:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   21366:	42a2      	cmp	r2, r4
   21368:	f105 0501 	add.w	r5, r5, #1
   2136c:	db00      	blt.n	21370 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   21370:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   21372:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   21376:	5cb2      	ldrb	r2, [r6, r2]
   21378:	f003 0303 	and.w	r3, r3, #3
   2137c:	00db      	lsls	r3, r3, #3
   2137e:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   21382:	5842      	ldr	r2, [r0, r1]
   21384:	431a      	orrs	r2, r3
   21386:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   21388:	e7ec      	b.n	21364 <uECC_vli_bytesToNative+0x18>

0002138a <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2138a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2138c:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2138e:	f991 6000 	ldrsb.w	r6, [r1]
{
   21392:	4605      	mov	r5, r0
   21394:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   21396:	f7ff fe19 	bl	20fcc <EccPoint_isZero>
   2139a:	bb28      	cbnz	r0, 213e8 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2139c:	1d27      	adds	r7, r4, #4
   2139e:	4632      	mov	r2, r6
   213a0:	4629      	mov	r1, r5
   213a2:	4638      	mov	r0, r7
   213a4:	f7ff fb0f 	bl	209c6 <uECC_vli_cmp_unsafe>
   213a8:	2801      	cmp	r0, #1
   213aa:	d120      	bne.n	213ee <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   213ac:	4632      	mov	r2, r6
   213ae:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   213b2:	4638      	mov	r0, r7
   213b4:	f7ff fb07 	bl	209c6 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   213b8:	2801      	cmp	r0, #1
   213ba:	d118      	bne.n	213ee <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   213bc:	4622      	mov	r2, r4
   213be:	4668      	mov	r0, sp
   213c0:	f7ff fc16 	bl	20bf0 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   213c4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   213c8:	4622      	mov	r2, r4
   213ca:	4629      	mov	r1, r5
   213cc:	a808      	add	r0, sp, #32
   213ce:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   213d0:	4632      	mov	r2, r6
   213d2:	a908      	add	r1, sp, #32
   213d4:	4668      	mov	r0, sp
   213d6:	f7ff fb0b 	bl	209f0 <uECC_vli_equal>
		return -3;
   213da:	2800      	cmp	r0, #0
   213dc:	bf0c      	ite	eq
   213de:	2000      	moveq	r0, #0
   213e0:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   213e4:	b011      	add	sp, #68	; 0x44
   213e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   213e8:	f04f 30ff 	mov.w	r0, #4294967295
   213ec:	e7fa      	b.n	213e4 <uECC_valid_point+0x5a>
		return -2;
   213ee:	f06f 0001 	mvn.w	r0, #1
   213f2:	e7f7      	b.n	213e4 <uECC_valid_point+0x5a>

000213f4 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   213f4:	b570      	push	{r4, r5, r6, lr}
   213f6:	460c      	mov	r4, r1
   213f8:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   213fa:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   213fc:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   21400:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21402:	4601      	mov	r1, r0
   21404:	4668      	mov	r0, sp
   21406:	f7ff ffa1 	bl	2134c <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2140a:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2140e:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   21412:	18a9      	adds	r1, r5, r2
   21414:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   21418:	f7ff ff98 	bl	2134c <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2141c:	2210      	movs	r2, #16
   2141e:	4631      	mov	r1, r6
   21420:	4668      	mov	r0, sp
   21422:	f7ff fad0 	bl	209c6 <uECC_vli_cmp_unsafe>
   21426:	b128      	cbz	r0, 21434 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   21428:	4621      	mov	r1, r4
   2142a:	4668      	mov	r0, sp
   2142c:	f7ff ffad 	bl	2138a <uECC_valid_point>
}
   21430:	b010      	add	sp, #64	; 0x40
   21432:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   21434:	f06f 0003 	mvn.w	r0, #3
   21438:	e7fa      	b.n	21430 <uECC_valid_public_key+0x3c>

0002143a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2143a:	78cb      	ldrb	r3, [r1, #3]
   2143c:	7802      	ldrb	r2, [r0, #0]
   2143e:	4053      	eors	r3, r2
   21440:	7003      	strb	r3, [r0, #0]
   21442:	884b      	ldrh	r3, [r1, #2]
   21444:	7842      	ldrb	r2, [r0, #1]
   21446:	4053      	eors	r3, r2
   21448:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2144a:	680a      	ldr	r2, [r1, #0]
   2144c:	7883      	ldrb	r3, [r0, #2]
   2144e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21452:	7083      	strb	r3, [r0, #2]
   21454:	680a      	ldr	r2, [r1, #0]
   21456:	78c3      	ldrb	r3, [r0, #3]
   21458:	4053      	eors	r3, r2
   2145a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2145c:	79cb      	ldrb	r3, [r1, #7]
   2145e:	7902      	ldrb	r2, [r0, #4]
   21460:	4053      	eors	r3, r2
   21462:	7103      	strb	r3, [r0, #4]
   21464:	88cb      	ldrh	r3, [r1, #6]
   21466:	7942      	ldrb	r2, [r0, #5]
   21468:	4053      	eors	r3, r2
   2146a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2146c:	684a      	ldr	r2, [r1, #4]
   2146e:	7983      	ldrb	r3, [r0, #6]
   21470:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21474:	7183      	strb	r3, [r0, #6]
   21476:	684a      	ldr	r2, [r1, #4]
   21478:	79c3      	ldrb	r3, [r0, #7]
   2147a:	4053      	eors	r3, r2
   2147c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2147e:	7acb      	ldrb	r3, [r1, #11]
   21480:	7a02      	ldrb	r2, [r0, #8]
   21482:	4053      	eors	r3, r2
   21484:	7203      	strb	r3, [r0, #8]
   21486:	7a42      	ldrb	r2, [r0, #9]
   21488:	894b      	ldrh	r3, [r1, #10]
   2148a:	4053      	eors	r3, r2
   2148c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2148e:	688a      	ldr	r2, [r1, #8]
   21490:	7a83      	ldrb	r3, [r0, #10]
   21492:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21496:	7283      	strb	r3, [r0, #10]
   21498:	688a      	ldr	r2, [r1, #8]
   2149a:	7ac3      	ldrb	r3, [r0, #11]
   2149c:	4053      	eors	r3, r2
   2149e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   214a0:	7bcb      	ldrb	r3, [r1, #15]
   214a2:	7b02      	ldrb	r2, [r0, #12]
   214a4:	4053      	eors	r3, r2
   214a6:	7303      	strb	r3, [r0, #12]
   214a8:	89cb      	ldrh	r3, [r1, #14]
   214aa:	7b42      	ldrb	r2, [r0, #13]
   214ac:	4053      	eors	r3, r2
   214ae:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   214b0:	68ca      	ldr	r2, [r1, #12]
   214b2:	7b83      	ldrb	r3, [r0, #14]
   214b4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   214b8:	7383      	strb	r3, [r0, #14]
   214ba:	68ca      	ldr	r2, [r1, #12]
   214bc:	7bc3      	ldrb	r3, [r0, #15]
   214be:	4053      	eors	r3, r2
   214c0:	73c3      	strb	r3, [r0, #15]
}
   214c2:	4770      	bx	lr

000214c4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   214c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   214c6:	7802      	ldrb	r2, [r0, #0]
   214c8:	f88d 2000 	strb.w	r2, [sp]
   214cc:	7942      	ldrb	r2, [r0, #5]
   214ce:	f88d 2001 	strb.w	r2, [sp, #1]
   214d2:	7a82      	ldrb	r2, [r0, #10]
   214d4:	f88d 2002 	strb.w	r2, [sp, #2]
   214d8:	7bc2      	ldrb	r2, [r0, #15]
   214da:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   214de:	7902      	ldrb	r2, [r0, #4]
   214e0:	f88d 2004 	strb.w	r2, [sp, #4]
   214e4:	7a42      	ldrb	r2, [r0, #9]
   214e6:	f88d 2005 	strb.w	r2, [sp, #5]
   214ea:	7b82      	ldrb	r2, [r0, #14]
   214ec:	f88d 2006 	strb.w	r2, [sp, #6]
   214f0:	78c2      	ldrb	r2, [r0, #3]
   214f2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   214f6:	7a02      	ldrb	r2, [r0, #8]
   214f8:	f88d 2008 	strb.w	r2, [sp, #8]
   214fc:	7b42      	ldrb	r2, [r0, #13]
   214fe:	f88d 2009 	strb.w	r2, [sp, #9]
   21502:	7882      	ldrb	r2, [r0, #2]
   21504:	f88d 200a 	strb.w	r2, [sp, #10]
   21508:	79c2      	ldrb	r2, [r0, #7]
   2150a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2150e:	7b02      	ldrb	r2, [r0, #12]
   21510:	f88d 200c 	strb.w	r2, [sp, #12]
   21514:	7842      	ldrb	r2, [r0, #1]
   21516:	7ac3      	ldrb	r3, [r0, #11]
   21518:	f88d 200d 	strb.w	r2, [sp, #13]
   2151c:	7982      	ldrb	r2, [r0, #6]
   2151e:	f88d 200e 	strb.w	r2, [sp, #14]
   21522:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   21526:	2310      	movs	r3, #16
   21528:	466a      	mov	r2, sp
   2152a:	4619      	mov	r1, r3
   2152c:	f7ff f891 	bl	20652 <_copy>
}
   21530:	b005      	add	sp, #20
   21532:	f85d fb04 	ldr.w	pc, [sp], #4

00021536 <mult_row_column>:
{
   21536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21538:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2153a:	7808      	ldrb	r0, [r1, #0]
{
   2153c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2153e:	f7ff f897 	bl	20670 <_double_byte>
   21542:	4605      	mov	r5, r0
   21544:	7860      	ldrb	r0, [r4, #1]
   21546:	f7ff f893 	bl	20670 <_double_byte>
   2154a:	78a2      	ldrb	r2, [r4, #2]
   2154c:	7863      	ldrb	r3, [r4, #1]
   2154e:	4053      	eors	r3, r2
   21550:	78e2      	ldrb	r2, [r4, #3]
   21552:	4053      	eors	r3, r2
   21554:	405d      	eors	r5, r3
   21556:	4045      	eors	r5, r0
   21558:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2155a:	7860      	ldrb	r0, [r4, #1]
   2155c:	7827      	ldrb	r7, [r4, #0]
   2155e:	f7ff f887 	bl	20670 <_double_byte>
   21562:	4605      	mov	r5, r0
   21564:	78a0      	ldrb	r0, [r4, #2]
   21566:	f7ff f883 	bl	20670 <_double_byte>
   2156a:	78a3      	ldrb	r3, [r4, #2]
   2156c:	405f      	eors	r7, r3
   2156e:	78e3      	ldrb	r3, [r4, #3]
   21570:	405f      	eors	r7, r3
   21572:	407d      	eors	r5, r7
   21574:	4045      	eors	r5, r0
   21576:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   21578:	78a0      	ldrb	r0, [r4, #2]
   2157a:	7865      	ldrb	r5, [r4, #1]
   2157c:	7827      	ldrb	r7, [r4, #0]
   2157e:	f7ff f877 	bl	20670 <_double_byte>
   21582:	406f      	eors	r7, r5
   21584:	4605      	mov	r5, r0
   21586:	78e0      	ldrb	r0, [r4, #3]
   21588:	f7ff f872 	bl	20670 <_double_byte>
   2158c:	78e3      	ldrb	r3, [r4, #3]
   2158e:	405f      	eors	r7, r3
   21590:	407d      	eors	r5, r7
   21592:	4045      	eors	r5, r0
   21594:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   21596:	7820      	ldrb	r0, [r4, #0]
   21598:	f7ff f86a 	bl	20670 <_double_byte>
   2159c:	7863      	ldrb	r3, [r4, #1]
   2159e:	7825      	ldrb	r5, [r4, #0]
   215a0:	405d      	eors	r5, r3
   215a2:	78a3      	ldrb	r3, [r4, #2]
   215a4:	405d      	eors	r5, r3
   215a6:	4045      	eors	r5, r0
   215a8:	78e0      	ldrb	r0, [r4, #3]
   215aa:	f7ff f861 	bl	20670 <_double_byte>
   215ae:	b2ed      	uxtb	r5, r5
   215b0:	4045      	eors	r5, r0
   215b2:	70f5      	strb	r5, [r6, #3]
}
   215b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000215b6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   215b6:	b570      	push	{r4, r5, r6, lr}
   215b8:	4614      	mov	r4, r2
   215ba:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   215bc:	4605      	mov	r5, r0
   215be:	2800      	cmp	r0, #0
   215c0:	d049      	beq.n	21656 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   215c2:	2900      	cmp	r1, #0
   215c4:	d049      	beq.n	2165a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   215c6:	2a00      	cmp	r2, #0
   215c8:	d049      	beq.n	2165e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   215ca:	2310      	movs	r3, #16
   215cc:	460a      	mov	r2, r1
   215ce:	4668      	mov	r0, sp
   215d0:	4619      	mov	r1, r3
   215d2:	f7ff f83e 	bl	20652 <_copy>
	add_round_key(state, s->words);
   215d6:	4621      	mov	r1, r4
   215d8:	4668      	mov	r0, sp
   215da:	f7ff ff2e 	bl	2143a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   215de:	3410      	adds	r4, #16
   215e0:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   215e4:	4668      	mov	r0, sp
   215e6:	f7f0 ff3d 	bl	12464 <sub_bytes>
		shift_rows(state);
   215ea:	4668      	mov	r0, sp
   215ec:	f7ff ff6a 	bl	214c4 <shift_rows>
	mult_row_column(t, s);
   215f0:	4669      	mov	r1, sp
   215f2:	a804      	add	r0, sp, #16
   215f4:	f7ff ff9f 	bl	21536 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   215f8:	a901      	add	r1, sp, #4
   215fa:	a805      	add	r0, sp, #20
   215fc:	f7ff ff9b 	bl	21536 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   21600:	a902      	add	r1, sp, #8
   21602:	a806      	add	r0, sp, #24
   21604:	f7ff ff97 	bl	21536 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   21608:	a903      	add	r1, sp, #12
   2160a:	a807      	add	r0, sp, #28
   2160c:	f7ff ff93 	bl	21536 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   21610:	2310      	movs	r3, #16
   21612:	4619      	mov	r1, r3
   21614:	eb0d 0203 	add.w	r2, sp, r3
   21618:	4668      	mov	r0, sp
   2161a:	f7ff f81a 	bl	20652 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2161e:	4621      	mov	r1, r4
   21620:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   21622:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   21624:	f7ff ff09 	bl	2143a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   21628:	42a6      	cmp	r6, r4
   2162a:	d1db      	bne.n	215e4 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2162c:	f7f0 ff1a 	bl	12464 <sub_bytes>
	shift_rows(state);
   21630:	4668      	mov	r0, sp
   21632:	f7ff ff47 	bl	214c4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   21636:	4631      	mov	r1, r6
   21638:	4668      	mov	r0, sp
   2163a:	f7ff fefe 	bl	2143a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2163e:	2310      	movs	r3, #16
   21640:	4619      	mov	r1, r3
   21642:	466a      	mov	r2, sp
   21644:	4628      	mov	r0, r5
   21646:	f7ff f804 	bl	20652 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2164a:	4668      	mov	r0, sp
   2164c:	2210      	movs	r2, #16
   2164e:	2100      	movs	r1, #0
   21650:	f7ff f80c 	bl	2066c <_set>

	return TC_CRYPTO_SUCCESS;
   21654:	2001      	movs	r0, #1
}
   21656:	b008      	add	sp, #32
   21658:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2165a:	4608      	mov	r0, r1
   2165c:	e7fb      	b.n	21656 <tc_aes_encrypt+0xa0>
   2165e:	4610      	mov	r0, r2
   21660:	e7f9      	b.n	21656 <tc_aes_encrypt+0xa0>

00021662 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   21662:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21664:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   21666:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21668:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2166c:	2b00      	cmp	r3, #0
   2166e:	bfb4      	ite	lt
   21670:	2387      	movlt	r3, #135	; 0x87
   21672:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   21674:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21678:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2167c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2167e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   21682:	d002      	beq.n	2168a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   21684:	7813      	ldrb	r3, [r2, #0]
   21686:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   21688:	e7f4      	b.n	21674 <gf_double+0x12>
	}
}
   2168a:	bd10      	pop	{r4, pc}

0002168c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2168c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2168e:	b120      	cbz	r0, 2169a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   21690:	2258      	movs	r2, #88	; 0x58
   21692:	2100      	movs	r1, #0
   21694:	f7fe ffea 	bl	2066c <_set>
   21698:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2169a:	bd08      	pop	{r3, pc}

0002169c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2169c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2169e:	4604      	mov	r4, r0
   216a0:	b188      	cbz	r0, 216c6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   216a2:	2210      	movs	r2, #16
   216a4:	2100      	movs	r1, #0
   216a6:	f7fe ffe1 	bl	2066c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   216aa:	2210      	movs	r2, #16
   216ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   216b0:	2100      	movs	r1, #0
   216b2:	f7fe ffdb 	bl	2066c <_set>
	s->leftover_offset = 0;
   216b6:	2300      	movs	r3, #0
   216b8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   216ba:	2200      	movs	r2, #0
   216bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   216c0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   216c4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   216c6:	bd10      	pop	{r4, pc}

000216c8 <tc_cmac_setup>:
{
   216c8:	b570      	push	{r4, r5, r6, lr}
   216ca:	460d      	mov	r5, r1
   216cc:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   216ce:	4604      	mov	r4, r0
   216d0:	b310      	cbz	r0, 21718 <tc_cmac_setup+0x50>
   216d2:	b311      	cbz	r1, 2171a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   216d4:	2258      	movs	r2, #88	; 0x58
   216d6:	2100      	movs	r1, #0
   216d8:	f7fe ffc8 	bl	2066c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   216dc:	4629      	mov	r1, r5
	s->sched = sched;
   216de:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   216e0:	4630      	mov	r0, r6
   216e2:	f7f0 fecb 	bl	1247c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   216e6:	2210      	movs	r2, #16
   216e8:	2100      	movs	r1, #0
   216ea:	4620      	mov	r0, r4
   216ec:	f7fe ffbe 	bl	2066c <_set>
	gf_double (s->K1, s->iv);
   216f0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   216f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   216f6:	4621      	mov	r1, r4
   216f8:	4620      	mov	r0, r4
   216fa:	f7ff ff5c 	bl	215b6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   216fe:	4621      	mov	r1, r4
   21700:	4628      	mov	r0, r5
   21702:	f7ff ffae 	bl	21662 <gf_double>
	gf_double (s->K2, s->K1);
   21706:	4629      	mov	r1, r5
   21708:	f104 0020 	add.w	r0, r4, #32
   2170c:	f7ff ffa9 	bl	21662 <gf_double>
	tc_cmac_init(s);
   21710:	4620      	mov	r0, r4
   21712:	f7ff ffc3 	bl	2169c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   21716:	2001      	movs	r0, #1
}
   21718:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2171a:	4608      	mov	r0, r1
   2171c:	e7fc      	b.n	21718 <tc_cmac_setup+0x50>

0002171e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2171e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21722:	460d      	mov	r5, r1
   21724:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21726:	4604      	mov	r4, r0
   21728:	2800      	cmp	r0, #0
   2172a:	d061      	beq.n	217f0 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2172c:	b912      	cbnz	r2, 21734 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2172e:	2001      	movs	r0, #1
}
   21730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   21734:	2900      	cmp	r1, #0
   21736:	d05b      	beq.n	217f0 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   21738:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2173c:	ea53 0102 	orrs.w	r1, r3, r2
   21740:	d056      	beq.n	217f0 <tc_cmac_update+0xd2>
	s->countdown--;
   21742:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   21744:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   21748:	f142 32ff 	adc.w	r2, r2, #4294967295
   2174c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   21750:	f1b8 0f00 	cmp.w	r8, #0
   21754:	d02a      	beq.n	217ac <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   21756:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2175a:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2175e:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   21760:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   21762:	d208      	bcs.n	21776 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   21764:	462a      	mov	r2, r5
   21766:	4633      	mov	r3, r6
   21768:	4631      	mov	r1, r6
   2176a:	f7fe ff72 	bl	20652 <_copy>
			s->leftover_offset += data_length;
   2176e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   21770:	4432      	add	r2, r6
   21772:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   21774:	e7db      	b.n	2172e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   21776:	463b      	mov	r3, r7
   21778:	462a      	mov	r2, r5
   2177a:	4639      	mov	r1, r7
   2177c:	f7fe ff69 	bl	20652 <_copy>
		data_length -= remaining_space;
   21780:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   21782:	2300      	movs	r3, #0
   21784:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   21786:	4446      	add	r6, r8
		data += remaining_space;
   21788:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2178a:	1e63      	subs	r3, r4, #1
   2178c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   21790:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21794:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21798:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2179a:	ea82 0200 	eor.w	r2, r2, r0
   2179e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   217a0:	d1f6      	bne.n	21790 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   217a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   217a4:	4621      	mov	r1, r4
   217a6:	4620      	mov	r0, r4
   217a8:	f7ff ff05 	bl	215b6 <tc_aes_encrypt>
   217ac:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   217b0:	2e10      	cmp	r6, #16
   217b2:	d80a      	bhi.n	217ca <tc_cmac_update+0xac>
	if (data_length > 0) {
   217b4:	2e00      	cmp	r6, #0
   217b6:	d0ba      	beq.n	2172e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   217b8:	4633      	mov	r3, r6
   217ba:	462a      	mov	r2, r5
   217bc:	4631      	mov	r1, r6
   217be:	f104 0030 	add.w	r0, r4, #48	; 0x30
   217c2:	f7fe ff46 	bl	20652 <_copy>
		s->leftover_offset = data_length;
   217c6:	6466      	str	r6, [r4, #68]	; 0x44
   217c8:	e7b1      	b.n	2172e <tc_cmac_update+0x10>
   217ca:	1e63      	subs	r3, r4, #1
   217cc:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   217ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   217d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   217d6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   217d8:	ea82 0200 	eor.w	r2, r2, r0
   217dc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   217de:	d1f6      	bne.n	217ce <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   217e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   217e2:	4621      	mov	r1, r4
   217e4:	4620      	mov	r0, r4
   217e6:	f7ff fee6 	bl	215b6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   217ea:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   217ec:	3e10      	subs	r6, #16
   217ee:	e7df      	b.n	217b0 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   217f0:	2000      	movs	r0, #0
   217f2:	e79d      	b.n	21730 <tc_cmac_update+0x12>

000217f4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   217f4:	b570      	push	{r4, r5, r6, lr}
   217f6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   217f8:	4605      	mov	r5, r0
   217fa:	b1e8      	cbz	r0, 21838 <tc_cmac_final+0x44>
   217fc:	b369      	cbz	r1, 2185a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   217fe:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   21800:	2a10      	cmp	r2, #16
   21802:	d11a      	bne.n	2183a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   21804:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21806:	1e63      	subs	r3, r4, #1
   21808:	3901      	subs	r1, #1
   2180a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2180e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21812:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   21816:	4072      	eors	r2, r6
   21818:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2181c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2181e:	ea82 0206 	eor.w	r2, r2, r6
   21822:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21824:	d1f3      	bne.n	2180e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   21826:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21828:	4621      	mov	r1, r4
   2182a:	4628      	mov	r0, r5
   2182c:	f7ff fec3 	bl	215b6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   21830:	4620      	mov	r0, r4
   21832:	f7ff ff2b 	bl	2168c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   21836:	2001      	movs	r0, #1
}
   21838:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2183a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2183e:	2100      	movs	r1, #0
   21840:	f1c2 0210 	rsb	r2, r2, #16
   21844:	4420      	add	r0, r4
   21846:	f7fe ff11 	bl	2066c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2184a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2184c:	4423      	add	r3, r4
   2184e:	2280      	movs	r2, #128	; 0x80
   21850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   21854:	f104 0120 	add.w	r1, r4, #32
   21858:	e7d5      	b.n	21806 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2185a:	4608      	mov	r0, r1
   2185c:	e7ec      	b.n	21838 <tc_cmac_final+0x44>

0002185e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2185e:	f003 bf56 	b.w	2570e <z_fatal_error>

00021862 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   21862:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   21864:	6800      	ldr	r0, [r0, #0]
   21866:	f003 bf52 	b.w	2570e <z_fatal_error>

0002186a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2186a:	2100      	movs	r1, #0
   2186c:	2001      	movs	r0, #1
   2186e:	f7ff bff6 	b.w	2185e <z_arm_fatal_error>

00021872 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   21872:	b508      	push	{r3, lr}
	handler();
   21874:	f7f0 fecc 	bl	12610 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   21878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2187c:	f7f0 bfa4 	b.w	127c8 <z_arm_exc_exit>

00021880 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   21880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21884:	4684      	mov	ip, r0
   21886:	4688      	mov	r8, r1
	register const char *s = nptr;
   21888:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2188a:	4621      	mov	r1, r4
   2188c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   21890:	2b20      	cmp	r3, #32
   21892:	d0fa      	beq.n	2188a <strtol+0xa>
   21894:	f1a3 0009 	sub.w	r0, r3, #9
   21898:	2804      	cmp	r0, #4
   2189a:	d9f6      	bls.n	2188a <strtol+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   2189c:	2b2d      	cmp	r3, #45	; 0x2d
   2189e:	d12d      	bne.n	218fc <strtol+0x7c>
		neg = 1;
		c = *s++;
   218a0:	784b      	ldrb	r3, [r1, #1]
   218a2:	1c8c      	adds	r4, r1, #2
		neg = 1;
   218a4:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   218a6:	2a00      	cmp	r2, #0
   218a8:	d05a      	beq.n	21960 <strtol+0xe0>
   218aa:	2a10      	cmp	r2, #16
   218ac:	d109      	bne.n	218c2 <strtol+0x42>
   218ae:	2b30      	cmp	r3, #48	; 0x30
   218b0:	d107      	bne.n	218c2 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   218b2:	7823      	ldrb	r3, [r4, #0]
   218b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   218b8:	2b58      	cmp	r3, #88	; 0x58
   218ba:	d14c      	bne.n	21956 <strtol+0xd6>
		c = s[1];
   218bc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   218be:	2210      	movs	r2, #16
		s += 2;
   218c0:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   218c2:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   218c6:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   218c8:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   218ca:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   218ce:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   218d0:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   218d4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   218d8:	2d09      	cmp	r5, #9
   218da:	d815      	bhi.n	21908 <strtol+0x88>
			c -= '0';
   218dc:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   218de:	429a      	cmp	r2, r3
   218e0:	dd22      	ble.n	21928 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   218e2:	1c75      	adds	r5, r6, #1
   218e4:	d007      	beq.n	218f6 <strtol+0x76>
   218e6:	4570      	cmp	r0, lr
   218e8:	d81b      	bhi.n	21922 <strtol+0xa2>
   218ea:	d101      	bne.n	218f0 <strtol+0x70>
   218ec:	454b      	cmp	r3, r9
   218ee:	dc18      	bgt.n	21922 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   218f0:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   218f4:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   218f6:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   218fa:	e7eb      	b.n	218d4 <strtol+0x54>
	} else if (c == '+') {
   218fc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   218fe:	bf04      	itt	eq
   21900:	784b      	ldrbeq	r3, [r1, #1]
   21902:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   21904:	2100      	movs	r1, #0
   21906:	e7ce      	b.n	218a6 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   21908:	f043 0520 	orr.w	r5, r3, #32
   2190c:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   2190e:	2d19      	cmp	r5, #25
   21910:	d80a      	bhi.n	21928 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21912:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   21916:	2d1a      	cmp	r5, #26
   21918:	bf34      	ite	cc
   2191a:	2537      	movcc	r5, #55	; 0x37
   2191c:	2557      	movcs	r5, #87	; 0x57
   2191e:	1b5b      	subs	r3, r3, r5
   21920:	e7dd      	b.n	218de <strtol+0x5e>
			any = -1;
   21922:	f04f 36ff 	mov.w	r6, #4294967295
   21926:	e7e6      	b.n	218f6 <strtol+0x76>
		}
	}

	if (any < 0) {
   21928:	1c73      	adds	r3, r6, #1
   2192a:	d109      	bne.n	21940 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2192c:	f7fc fc94 	bl	1e258 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   21930:	2322      	movs	r3, #34	; 0x22
   21932:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   21934:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   21936:	f1b8 0f00 	cmp.w	r8, #0
   2193a:	d107      	bne.n	2194c <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2193c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   21940:	b101      	cbz	r1, 21944 <strtol+0xc4>
		acc = -acc;
   21942:	4240      	negs	r0, r0
	if (endptr != NULL) {
   21944:	f1b8 0f00 	cmp.w	r8, #0
   21948:	d0f8      	beq.n	2193c <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   2194a:	b10e      	cbz	r6, 21950 <strtol+0xd0>
   2194c:	f104 3cff 	add.w	ip, r4, #4294967295
   21950:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   21954:	e7f2      	b.n	2193c <strtol+0xbc>
	if (base == 0) {
   21956:	2330      	movs	r3, #48	; 0x30
   21958:	2a00      	cmp	r2, #0
   2195a:	d1b2      	bne.n	218c2 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   2195c:	2208      	movs	r2, #8
   2195e:	e7b0      	b.n	218c2 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   21960:	2b30      	cmp	r3, #48	; 0x30
   21962:	d0a6      	beq.n	218b2 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   21964:	220a      	movs	r2, #10
   21966:	e7ac      	b.n	218c2 <strtol+0x42>

00021968 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   21968:	3901      	subs	r1, #1
   2196a:	4603      	mov	r3, r0
   2196c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   21970:	b90a      	cbnz	r2, 21976 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   21972:	701a      	strb	r2, [r3, #0]

	return dest;
}
   21974:	4770      	bx	lr
		*d = *s;
   21976:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2197a:	e7f7      	b.n	2196c <strcpy+0x4>

0002197c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2197c:	4603      	mov	r3, r0
	size_t n = 0;
   2197e:	2000      	movs	r0, #0

	while (*s != '\0') {
   21980:	5c1a      	ldrb	r2, [r3, r0]
   21982:	b902      	cbnz	r2, 21986 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   21984:	4770      	bx	lr
		n++;
   21986:	3001      	adds	r0, #1
   21988:	e7fa      	b.n	21980 <strlen+0x4>

0002198a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2198a:	4603      	mov	r3, r0
	size_t n = 0;
   2198c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2198e:	5c1a      	ldrb	r2, [r3, r0]
   21990:	b10a      	cbz	r2, 21996 <strnlen+0xc>
   21992:	4288      	cmp	r0, r1
   21994:	d100      	bne.n	21998 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   21996:	4770      	bx	lr
		n++;
   21998:	3001      	adds	r0, #1
   2199a:	e7f8      	b.n	2198e <strnlen+0x4>

0002199c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2199c:	1e43      	subs	r3, r0, #1
   2199e:	3901      	subs	r1, #1
   219a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   219a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   219a8:	4282      	cmp	r2, r0
   219aa:	d101      	bne.n	219b0 <strcmp+0x14>
   219ac:	2a00      	cmp	r2, #0
   219ae:	d1f7      	bne.n	219a0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   219b0:	1a10      	subs	r0, r2, r0
   219b2:	4770      	bx	lr

000219b4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   219b4:	b510      	push	{r4, lr}
   219b6:	3901      	subs	r1, #1
   219b8:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   219ba:	4282      	cmp	r2, r0
   219bc:	d009      	beq.n	219d2 <strncmp+0x1e>
   219be:	7803      	ldrb	r3, [r0, #0]
   219c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   219c4:	42a3      	cmp	r3, r4
   219c6:	d100      	bne.n	219ca <strncmp+0x16>
   219c8:	b90b      	cbnz	r3, 219ce <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   219ca:	1b18      	subs	r0, r3, r4
   219cc:	e002      	b.n	219d4 <strncmp+0x20>
		s1++;
   219ce:	3001      	adds	r0, #1
		n--;
   219d0:	e7f3      	b.n	219ba <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   219d2:	2000      	movs	r0, #0
}
   219d4:	bd10      	pop	{r4, pc}

000219d6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   219d6:	b510      	push	{r4, lr}
   219d8:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   219da:	b15a      	cbz	r2, 219f4 <memcmp+0x1e>
   219dc:	3901      	subs	r1, #1
   219de:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   219e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   219e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   219e8:	42a3      	cmp	r3, r4
   219ea:	d001      	beq.n	219f0 <memcmp+0x1a>
   219ec:	4290      	cmp	r0, r2
   219ee:	d0f7      	beq.n	219e0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   219f0:	1a80      	subs	r0, r0, r2
}
   219f2:	bd10      	pop	{r4, pc}
		return 0;
   219f4:	4610      	mov	r0, r2
   219f6:	e7fc      	b.n	219f2 <memcmp+0x1c>

000219f8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   219f8:	b510      	push	{r4, lr}
   219fa:	1e43      	subs	r3, r0, #1
   219fc:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   219fe:	4291      	cmp	r1, r2
   21a00:	d100      	bne.n	21a04 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   21a02:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   21a04:	f811 4b01 	ldrb.w	r4, [r1], #1
   21a08:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   21a0c:	e7f7      	b.n	219fe <memcpy+0x6>

00021a0e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   21a0e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   21a10:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   21a12:	4603      	mov	r3, r0
	while (n > 0) {
   21a14:	4293      	cmp	r3, r2
   21a16:	d100      	bne.n	21a1a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   21a18:	4770      	bx	lr
		*(d_byte++) = c_byte;
   21a1a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21a1e:	e7f9      	b.n	21a14 <memset+0x6>

00021a20 <_stdout_hook_default>:
}
   21a20:	f04f 30ff 	mov.w	r0, #4294967295
   21a24:	4770      	bx	lr

00021a26 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   21a26:	2806      	cmp	r0, #6
   21a28:	d108      	bne.n	21a3c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   21a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21a2e:	2201      	movs	r2, #1
   21a30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   21a34:	f3bf 8f4f 	dsb	sy
        __WFE();
   21a38:	bf20      	wfe
    while (true)
   21a3a:	e7fd      	b.n	21a38 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   21a3c:	4770      	bx	lr

00021a3e <pm_state_exit_post_ops>:
   21a3e:	2300      	movs	r3, #0
   21a40:	f383 8811 	msr	BASEPRI, r3
   21a44:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   21a48:	4770      	bx	lr

00021a4a <send_cmd_status>:
{
   21a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   21a4e:	f04f 32ff 	mov.w	r2, #4294967295
{
   21a52:	4606      	mov	r6, r0
   21a54:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   21a56:	f04f 33ff 	mov.w	r3, #4294967295
   21a5a:	2100      	movs	r1, #0
   21a5c:	200f      	movs	r0, #15
   21a5e:	f7f1 fba5 	bl	131ac <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   21a62:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   21a64:	f100 0808 	add.w	r8, r0, #8
   21a68:	4604      	mov	r4, r0
   21a6a:	7507      	strb	r7, [r0, #20]
   21a6c:	2102      	movs	r1, #2
   21a6e:	4640      	mov	r0, r8
   21a70:	f003 f9d6 	bl	24e20 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21a74:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   21a76:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21a78:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   21a7a:	7041      	strb	r1, [r0, #1]
   21a7c:	4640      	mov	r0, r8
   21a7e:	f003 f9cf 	bl	24e20 <net_buf_simple_add>
	evt->ncmd = 1U;
   21a82:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   21a84:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   21a86:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   21a88:	4620      	mov	r0, r4
}
   21a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   21a8e:	f7f1 be63 	b.w	13758 <bt_recv>

00021a92 <sys_memcpy_swap.constprop.0>:
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   21a92:	f101 0320 	add.w	r3, r1, #32
   21a96:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   21a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   21a9c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   21aa0:	428b      	cmp	r3, r1
   21aa2:	d1f9      	bne.n	21a98 <sys_memcpy_swap.constprop.0+0x6>
	}
}
   21aa4:	4770      	bx	lr

00021aa6 <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   21aa6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   21aaa:	f043 0306 	orr.w	r3, r3, #6
   21aae:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   21ab2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   21ab6:	f043 0304 	orr.w	r3, r3, #4
   21aba:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   21abe:	4770      	bx	lr

00021ac0 <default_CSPRNG>:

int default_CSPRNG(uint8_t *dst, unsigned int len)
{
   21ac0:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   21ac2:	f7fb fd73 	bl	1d5ac <bt_rand>
}
   21ac6:	fab0 f080 	clz	r0, r0
   21aca:	0940      	lsrs	r0, r0, #5
   21acc:	bd08      	pop	{r3, pc}

00021ace <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   21ace:	f7f0 ba13 	b.w	11ef8 <settings_subsys_init>

00021ad2 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   21ad2:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   21ad4:	780b      	ldrb	r3, [r1, #0]
   21ad6:	7814      	ldrb	r4, [r2, #0]
   21ad8:	4063      	eors	r3, r4
   21ada:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   21adc:	7854      	ldrb	r4, [r2, #1]
   21ade:	784b      	ldrb	r3, [r1, #1]
   21ae0:	4063      	eors	r3, r4
   21ae2:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   21ae4:	7894      	ldrb	r4, [r2, #2]
   21ae6:	788b      	ldrb	r3, [r1, #2]
   21ae8:	4063      	eors	r3, r4
   21aea:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   21aec:	78d4      	ldrb	r4, [r2, #3]
   21aee:	78cb      	ldrb	r3, [r1, #3]
   21af0:	4063      	eors	r3, r4
   21af2:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   21af4:	7914      	ldrb	r4, [r2, #4]
   21af6:	790b      	ldrb	r3, [r1, #4]
   21af8:	4063      	eors	r3, r4
   21afa:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   21afc:	7954      	ldrb	r4, [r2, #5]
   21afe:	794b      	ldrb	r3, [r1, #5]
   21b00:	4063      	eors	r3, r4
   21b02:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   21b04:	7994      	ldrb	r4, [r2, #6]
   21b06:	798b      	ldrb	r3, [r1, #6]
   21b08:	4063      	eors	r3, r4
   21b0a:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   21b0c:	79d4      	ldrb	r4, [r2, #7]
   21b0e:	79cb      	ldrb	r3, [r1, #7]
   21b10:	4063      	eors	r3, r4
   21b12:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   21b14:	7a14      	ldrb	r4, [r2, #8]
   21b16:	7a0b      	ldrb	r3, [r1, #8]
   21b18:	4063      	eors	r3, r4
   21b1a:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   21b1c:	7a54      	ldrb	r4, [r2, #9]
   21b1e:	7a4b      	ldrb	r3, [r1, #9]
   21b20:	4063      	eors	r3, r4
   21b22:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   21b24:	7a8b      	ldrb	r3, [r1, #10]
   21b26:	7a94      	ldrb	r4, [r2, #10]
   21b28:	4063      	eors	r3, r4
   21b2a:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   21b2c:	7ad4      	ldrb	r4, [r2, #11]
   21b2e:	7acb      	ldrb	r3, [r1, #11]
   21b30:	4063      	eors	r3, r4
   21b32:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   21b34:	7b14      	ldrb	r4, [r2, #12]
   21b36:	7b0b      	ldrb	r3, [r1, #12]
   21b38:	4063      	eors	r3, r4
   21b3a:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   21b3c:	7b54      	ldrb	r4, [r2, #13]
   21b3e:	7b4b      	ldrb	r3, [r1, #13]
   21b40:	4063      	eors	r3, r4
   21b42:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   21b44:	7b94      	ldrb	r4, [r2, #14]
   21b46:	7b8b      	ldrb	r3, [r1, #14]
   21b48:	4063      	eors	r3, r4
   21b4a:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   21b4c:	7bcb      	ldrb	r3, [r1, #15]
   21b4e:	7bd2      	ldrb	r2, [r2, #15]
   21b50:	4053      	eors	r3, r2
   21b52:	73c3      	strb	r3, [r0, #15]
}
   21b54:	bd10      	pop	{r4, pc}

00021b56 <ccm_crypt.isra.0>:
	}

	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   21b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b5a:	b089      	sub	sp, #36	; 0x24
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   21b5c:	2401      	movs	r4, #1
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   21b5e:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	a_i[0] = 0x01;
   21b62:	f88d 4000 	strb.w	r4, [sp]
	blk_cnt = (msg_len + 15) / 16;
   21b66:	f105 060f 	add.w	r6, r5, #15
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   21b6a:	4607      	mov	r7, r0
		last_blk = 16U;
   21b6c:	f015 050f 	ands.w	r5, r5, #15
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   21b70:	4690      	mov	r8, r2
	memcpy(&a_i[1], nonce, 13);
   21b72:	eb0d 0004 	add.w	r0, sp, r4
   21b76:	f04f 020d 	mov.w	r2, #13
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   21b7a:	4699      	mov	r9, r3
		last_blk = 16U;
   21b7c:	bf08      	it	eq
   21b7e:	2510      	moveq	r5, #16
	memcpy(&a_i[1], nonce, 13);
   21b80:	f7ff ff3a 	bl	219f8 <memcpy>
	blk_cnt = (msg_len + 15) / 16;
   21b84:	1136      	asrs	r6, r6, #4

	for (j = 0; j < blk_cnt; j++) {
   21b86:	eb06 0a04 	add.w	sl, r6, r4
   21b8a:	f04f 0b00 	mov.w	fp, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   21b8e:	3e01      	subs	r6, #1
	for (j = 0; j < blk_cnt; j++) {
   21b90:	4554      	cmp	r4, sl
   21b92:	d102      	bne.n	21b9a <ccm_crypt.isra.0+0x44>
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
}
   21b94:	b009      	add	sp, #36	; 0x24
   21b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   21b9a:	f3c4 2307 	ubfx	r3, r4, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   21b9e:	4669      	mov	r1, sp
   21ba0:	aa04      	add	r2, sp, #16
   21ba2:	4638      	mov	r0, r7
   21ba4:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   21ba8:	f88d 400f 	strb.w	r4, [sp, #15]
   21bac:	f003 fcd6 	bl	2555c <bt_encrypt_be>
		if (err) {
   21bb0:	4601      	mov	r1, r0
   21bb2:	2800      	cmp	r0, #0
   21bb4:	d1ee      	bne.n	21b94 <ccm_crypt.isra.0+0x3e>
		if (j < blk_cnt - 1) {
   21bb6:	1e63      	subs	r3, r4, #1
   21bb8:	429e      	cmp	r6, r3
   21bba:	eb08 020b 	add.w	r2, r8, fp
   21bbe:	eb09 000b 	add.w	r0, r9, fp
   21bc2:	d906      	bls.n	21bd2 <ccm_crypt.isra.0+0x7c>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   21bc4:	a904      	add	r1, sp, #16
   21bc6:	f7ff ff84 	bl	21ad2 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   21bca:	3401      	adds	r4, #1
   21bcc:	f10b 0b10 	add.w	fp, fp, #16
   21bd0:	e7de      	b.n	21b90 <ccm_crypt.isra.0+0x3a>
   21bd2:	f10d 0c10 	add.w	ip, sp, #16
					in_msg[(j * 16) + i] ^ s_i[i];
   21bd6:	f812 3b01 	ldrb.w	r3, [r2], #1
   21bda:	f81c eb01 	ldrb.w	lr, [ip], #1
			for (i = 0; i < last_blk; i++) {
   21bde:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   21be0:	ea83 030e 	eor.w	r3, r3, lr
			for (i = 0; i < last_blk; i++) {
   21be4:	42a9      	cmp	r1, r5
				out_msg[(j * 16) + i] =
   21be6:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   21bea:	d3f4      	bcc.n	21bd6 <ccm_crypt.isra.0+0x80>
   21bec:	e7ed      	b.n	21bca <ccm_crypt.isra.0+0x74>

00021bee <ccm_auth.isra.0>:
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   21bee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		last_blk = 16U;
   21bf2:	f013 080f 	ands.w	r8, r3, #15
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   21bf6:	b08d      	sub	sp, #52	; 0x34
   21bf8:	461d      	mov	r5, r3
	b[0] = 0x01;
   21bfa:	f04f 0301 	mov.w	r3, #1
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   21bfe:	4607      	mov	r7, r0
   21c00:	4616      	mov	r6, r2
	memcpy(b + 1, nonce, 13);
   21c02:	eb0d 0003 	add.w	r0, sp, r3
   21c06:	f04f 020d 	mov.w	r2, #13
   21c0a:	46e9      	mov	r9, sp
		last_blk = 16U;
   21c0c:	bf08      	it	eq
   21c0e:	f04f 0810 	moveq.w	r8, #16
	b[0] = 0x01;
   21c12:	f88d 3000 	strb.w	r3, [sp]
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   21c16:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	memcpy(b + 1, nonce, 13);
   21c18:	f7ff feee 	bl	219f8 <memcpy>
	dst[0] = val >> 8;
   21c1c:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   21c1e:	aa08      	add	r2, sp, #32
   21c20:	4649      	mov	r1, r9
   21c22:	4638      	mov	r0, r7
   21c24:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   21c28:	f88d 300f 	strb.w	r3, [sp, #15]
   21c2c:	f003 fc96 	bl	2555c <bt_encrypt_be>
	if (err) {
   21c30:	2800      	cmp	r0, #0
   21c32:	f040 809e 	bne.w	21d72 <ccm_auth.isra.0+0x184>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   21c36:	9b19      	ldr	r3, [sp, #100]	; 0x64
   21c38:	f88d 500f 	strb.w	r5, [sp, #15]
   21c3c:	3b02      	subs	r3, #2
   21c3e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   21c42:	ea4f 0383 	mov.w	r3, r3, lsl #2
   21c46:	bf14      	ite	ne
   21c48:	2240      	movne	r2, #64	; 0x40
   21c4a:	2200      	moveq	r2, #0
   21c4c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   21c50:	4313      	orrs	r3, r2
   21c52:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   21c56:	f10d 0b10 	add.w	fp, sp, #16
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   21c5a:	f88d 3000 	strb.w	r3, [sp]
	err = bt_encrypt_be(key, b, X0);
   21c5e:	465a      	mov	r2, fp
	dst[0] = val >> 8;
   21c60:	0a2b      	lsrs	r3, r5, #8
   21c62:	4649      	mov	r1, r9
   21c64:	4638      	mov	r0, r7
   21c66:	f88d 300e 	strb.w	r3, [sp, #14]
   21c6a:	f003 fc77 	bl	2555c <bt_encrypt_be>
	if (err) {
   21c6e:	4682      	mov	sl, r0
   21c70:	bbb8      	cbnz	r0, 21ce2 <ccm_auth.isra.0+0xf4>
	if (aad_len) {
   21c72:	b3b4      	cbz	r4, 21ce2 <ccm_auth.isra.0+0xf4>
			b[i] = X0[i] ^ b[i];
   21c74:	f89d 3010 	ldrb.w	r3, [sp, #16]
   21c78:	f88d 3000 	strb.w	r3, [sp]
   21c7c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21c80:	4063      	eors	r3, r4
		aad_len += sizeof(uint16_t);
   21c82:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   21c84:	f88d 3001 	strb.w	r3, [sp, #1]
		aad_len += sizeof(uint16_t);
   21c88:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   21c8a:	2302      	movs	r3, #2
				b[i] = X0[i] ^ aad[j];
   21c8c:	4649      	mov	r1, r9
		while (aad_len > 16) {
   21c8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   21c90:	2c10      	cmp	r4, #16
   21c92:	4452      	add	r2, sl
   21c94:	d80b      	bhi.n	21cae <ccm_auth.isra.0+0xc0>
   21c96:	4611      	mov	r1, r2
   21c98:	aa04      	add	r2, sp, #16
		for (; i < aad_len; i++, j++) {
   21c9a:	42a3      	cmp	r3, r4
   21c9c:	4620      	mov	r0, r4
   21c9e:	db37      	blt.n	21d10 <ccm_auth.isra.0+0x122>
		for (i = aad_len; i < 16; i++) {
   21ca0:	280f      	cmp	r0, #15
   21ca2:	dd3f      	ble.n	21d24 <ccm_auth.isra.0+0x136>
		err = bt_encrypt_be(key, b, X0);
   21ca4:	4669      	mov	r1, sp
   21ca6:	4638      	mov	r0, r7
   21ca8:	f003 fc58 	bl	2555c <bt_encrypt_be>
		if (err) {
   21cac:	e019      	b.n	21ce2 <ccm_auth.isra.0+0xf4>
		while (aad_len > 16) {
   21cae:	4618      	mov	r0, r3
				b[i] = X0[i] ^ aad[j];
   21cb0:	f810 e00b 	ldrb.w	lr, [r0, fp]
   21cb4:	f812 cb01 	ldrb.w	ip, [r2], #1
   21cb8:	ea8c 0c0e 	eor.w	ip, ip, lr
   21cbc:	f800 c001 	strb.w	ip, [r0, r1]
				i++, j++;
   21cc0:	3001      	adds	r0, #1
			} while (i < 16);
   21cc2:	2810      	cmp	r0, #16
   21cc4:	d1f4      	bne.n	21cb0 <ccm_auth.isra.0+0xc2>
				i++, j++;
   21cc6:	f10a 0a10 	add.w	sl, sl, #16
			err = bt_encrypt_be(key, b, X0);
   21cca:	465a      	mov	r2, fp
   21ccc:	4638      	mov	r0, r7
				i++, j++;
   21cce:	ebaa 0a03 	sub.w	sl, sl, r3
			err = bt_encrypt_be(key, b, X0);
   21cd2:	f003 fc43 	bl	2555c <bt_encrypt_be>
			aad_len -= 16;
   21cd6:	3c10      	subs	r4, #16
   21cd8:	b2e4      	uxtb	r4, r4
			if (err) {
   21cda:	4603      	mov	r3, r0
   21cdc:	4669      	mov	r1, sp
   21cde:	2800      	cmp	r0, #0
   21ce0:	d0d5      	beq.n	21c8e <ccm_auth.isra.0+0xa0>
	blk_cnt = (msg_len + 15) / 16;
   21ce2:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   21ce4:	ab04      	add	r3, sp, #16
	blk_cnt = (msg_len + 15) / 16;
   21ce6:	112d      	asrs	r5, r5, #4
   21ce8:	2400      	movs	r4, #0
			memcpy(&b[i], &Xn[i], 16 - i);
   21cea:	eb03 0a08 	add.w	sl, r3, r8
	for (j = 0; j < blk_cnt; j++) {
   21cee:	42a5      	cmp	r5, r4
   21cf0:	d11d      	bne.n	21d2e <ccm_auth.isra.0+0x140>
   21cf2:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   21cf6:	ac08      	add	r4, sp, #32
   21cf8:	ab04      	add	r3, sp, #16
   21cfa:	1851      	adds	r1, r2, r1
	for (i = 0; i < mic_size; i++) {
   21cfc:	4291      	cmp	r1, r2
   21cfe:	d038      	beq.n	21d72 <ccm_auth.isra.0+0x184>
		mic[i] = s0[i] ^ Xn[i];
   21d00:	f814 0b01 	ldrb.w	r0, [r4], #1
   21d04:	f813 5b01 	ldrb.w	r5, [r3], #1
   21d08:	4068      	eors	r0, r5
   21d0a:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < mic_size; i++) {
   21d0e:	e7f5      	b.n	21cfc <ccm_auth.isra.0+0x10e>
			b[i] = X0[i] ^ aad[j];
   21d10:	f812 c003 	ldrb.w	ip, [r2, r3]
   21d14:	f811 0b01 	ldrb.w	r0, [r1], #1
   21d18:	ea80 000c 	eor.w	r0, r0, ip
   21d1c:	f80d 0003 	strb.w	r0, [sp, r3]
		for (; i < aad_len; i++, j++) {
   21d20:	3301      	adds	r3, #1
   21d22:	e7ba      	b.n	21c9a <ccm_auth.isra.0+0xac>
			b[i] = X0[i];
   21d24:	5c13      	ldrb	r3, [r2, r0]
   21d26:	f80d 3000 	strb.w	r3, [sp, r0]
		for (i = aad_len; i < 16; i++) {
   21d2a:	3001      	adds	r0, #1
   21d2c:	e7b8      	b.n	21ca0 <ccm_auth.isra.0+0xb2>
		if (j + 1 == blk_cnt) {
   21d2e:	3401      	adds	r4, #1
   21d30:	42a5      	cmp	r5, r4
   21d32:	d121      	bne.n	21d78 <ccm_auth.isra.0+0x18a>
   21d34:	f10d 0c10 	add.w	ip, sp, #16
   21d38:	4669      	mov	r1, sp
   21d3a:	4630      	mov	r0, r6
			for (i = 0; i < last_blk; i++) {
   21d3c:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   21d3e:	f81c 2b01 	ldrb.w	r2, [ip], #1
   21d42:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   21d46:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   21d48:	ea82 020e 	eor.w	r2, r2, lr
			for (i = 0; i < last_blk; i++) {
   21d4c:	4543      	cmp	r3, r8
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   21d4e:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < last_blk; i++) {
   21d52:	dbf4      	blt.n	21d3e <ccm_auth.isra.0+0x150>
			memcpy(&b[i], &Xn[i], 16 - i);
   21d54:	f1c8 0210 	rsb	r2, r8, #16
   21d58:	4651      	mov	r1, sl
   21d5a:	eb0d 0008 	add.w	r0, sp, r8
   21d5e:	f7ff fe4b 	bl	219f8 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   21d62:	aa04      	add	r2, sp, #16
   21d64:	4649      	mov	r1, r9
   21d66:	4638      	mov	r0, r7
   21d68:	f003 fbf8 	bl	2555c <bt_encrypt_be>
		if (err) {
   21d6c:	3610      	adds	r6, #16
   21d6e:	2800      	cmp	r0, #0
   21d70:	d0bd      	beq.n	21cee <ccm_auth.isra.0+0x100>
}
   21d72:	b00d      	add	sp, #52	; 0x34
   21d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor16(b, Xn, &cleartext_msg[j * 16]);
   21d78:	4632      	mov	r2, r6
   21d7a:	a904      	add	r1, sp, #16
   21d7c:	4668      	mov	r0, sp
   21d7e:	f7ff fea8 	bl	21ad2 <xor16>
   21d82:	e7ee      	b.n	21d62 <ccm_auth.isra.0+0x174>

00021d84 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *enc_data, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *plaintext, size_t mic_size)
{
   21d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d88:	b089      	sub	sp, #36	; 0x24
   21d8a:	461c      	mov	r4, r3
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic) || len > UINT16_MAX) {
   21d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21d8e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
{
   21d92:	e9dd 9514 	ldrd	r9, r5, [sp, #80]	; 0x50
   21d96:	4606      	mov	r6, r0
   21d98:	460f      	mov	r7, r1
   21d9a:	4693      	mov	fp, r2
	if (aad_len >= 0xff00 || mic_size > sizeof(mic) || len > UINT16_MAX) {
   21d9c:	d227      	bcs.n	21dee <bt_ccm_decrypt+0x6a>
   21d9e:	2d10      	cmp	r5, #16
   21da0:	d825      	bhi.n	21dee <bt_ccm_decrypt+0x6a>
   21da2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   21da6:	d222      	bcs.n	21dee <bt_ccm_decrypt+0x6a>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_data, plaintext, len);
   21da8:	fa1f fa84 	uxth.w	sl, r4
   21dac:	464b      	mov	r3, r9
   21dae:	f8cd a000 	str.w	sl, [sp]
   21db2:	f7ff fed0 	bl	21b56 <ccm_crypt.isra.0>

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   21db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21db8:	9301      	str	r3, [sp, #4]
   21dba:	f10d 0810 	add.w	r8, sp, #16
   21dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21dc0:	9300      	str	r3, [sp, #0]
   21dc2:	464a      	mov	r2, r9
   21dc4:	4653      	mov	r3, sl
   21dc6:	4639      	mov	r1, r7
   21dc8:	4630      	mov	r0, r6
   21dca:	9503      	str	r5, [sp, #12]
   21dcc:	f8cd 8008 	str.w	r8, [sp, #8]
   21dd0:	f7ff ff0d 	bl	21bee <ccm_auth.isra.0>

	if (memcmp(mic, enc_data + len, mic_size)) {
   21dd4:	462a      	mov	r2, r5
   21dd6:	eb0b 0104 	add.w	r1, fp, r4
   21dda:	4640      	mov	r0, r8
   21ddc:	f7ff fdfb 	bl	219d6 <memcmp>
		return -EBADMSG;
   21de0:	2800      	cmp	r0, #0
   21de2:	bf18      	it	ne
   21de4:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   21de8:	b009      	add	sp, #36	; 0x24
   21dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   21dee:	f06f 0015 	mvn.w	r0, #21
   21df2:	e7f9      	b.n	21de8 <bt_ccm_decrypt+0x64>

00021df4 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *plaintext, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *enc_data, size_t mic_size)
{
   21df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21df8:	b085      	sub	sp, #20
   21dfa:	e9dd c80d 	ldrd	ip, r8, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", len, bt_hex(plaintext, len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16 || len > UINT16_MAX) {
   21dfe:	f5bc 4f7f 	cmp.w	ip, #65280	; 0xff00
{
   21e02:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   21e06:	4605      	mov	r5, r0
   21e08:	460e      	mov	r6, r1
   21e0a:	4617      	mov	r7, r2
	uint8_t *mic = enc_data + len;
   21e0c:	eb08 0903 	add.w	r9, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16 || len > UINT16_MAX) {
   21e10:	d21a      	bcs.n	21e48 <bt_ccm_encrypt+0x54>
   21e12:	f1be 0f10 	cmp.w	lr, #16
   21e16:	d817      	bhi.n	21e48 <bt_ccm_encrypt+0x54>
   21e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   21e1c:	d214      	bcs.n	21e48 <bt_ccm_encrypt+0x54>
		return -EINVAL;
	}

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   21e1e:	b29c      	uxth	r4, r3
   21e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21e22:	f8cd c004 	str.w	ip, [sp, #4]
   21e26:	e9cd 9e02 	strd	r9, lr, [sp, #8]
   21e2a:	9300      	str	r3, [sp, #0]
   21e2c:	4623      	mov	r3, r4
   21e2e:	f7ff fede 	bl	21bee <ccm_auth.isra.0>

	ccm_crypt(key, nonce, plaintext, enc_data, len);
   21e32:	4628      	mov	r0, r5
   21e34:	9400      	str	r4, [sp, #0]
   21e36:	4643      	mov	r3, r8
   21e38:	463a      	mov	r2, r7
   21e3a:	4631      	mov	r1, r6
   21e3c:	f7ff fe8b 	bl	21b56 <ccm_crypt.isra.0>

	return 0;
   21e40:	2000      	movs	r0, #0
}
   21e42:	b005      	add	sp, #20
   21e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   21e48:	f06f 0015 	mvn.w	r0, #21
   21e4c:	e7f9      	b.n	21e42 <bt_ccm_encrypt+0x4e>

00021e4e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   21e4e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   21e50:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   21e52:	2106      	movs	r1, #6
{
   21e54:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   21e56:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   21e5a:	f7fb fba7 	bl	1d5ac <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   21e5e:	b918      	cbnz	r0, 21e68 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   21e60:	79a3      	ldrb	r3, [r4, #6]
   21e62:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21e66:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   21e68:	bd10      	pop	{r4, pc}

00021e6a <hci_vendor_event>:
}
   21e6a:	4770      	bx	lr

00021e6c <atomic_or>:
{
   21e6c:	4603      	mov	r3, r0
}
   21e6e:	f3bf 8f5b 	dmb	ish
   21e72:	e853 0f00 	ldrex	r0, [r3]
   21e76:	ea40 0201 	orr.w	r2, r0, r1
   21e7a:	e843 2c00 	strex	ip, r2, [r3]
   21e7e:	f1bc 0f00 	cmp.w	ip, #0
   21e82:	d1f6      	bne.n	21e72 <atomic_or+0x6>
   21e84:	f3bf 8f5b 	dmb	ish
   21e88:	4770      	bx	lr

00021e8a <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   21e8a:	2101      	movs	r1, #1
   21e8c:	3008      	adds	r0, #8
   21e8e:	f003 b837 	b.w	24f00 <net_buf_simple_pull_mem>

00021e92 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   21e92:	b410      	push	{r4}
   21e94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21e98:	4604      	mov	r4, r0
   21e9a:	4608      	mov	r0, r1
		if (handler->event != event) {
   21e9c:	7811      	ldrb	r1, [r2, #0]
   21e9e:	42a1      	cmp	r1, r4
   21ea0:	d004      	beq.n	21eac <handle_event_common.isra.0+0x1a>
	for (i = 0; i < num_handlers; i++) {
   21ea2:	3208      	adds	r2, #8
   21ea4:	429a      	cmp	r2, r3
   21ea6:	d1f9      	bne.n	21e9c <handle_event_common.isra.0+0xa>
}
   21ea8:	bc10      	pop	{r4}
   21eaa:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   21eac:	8981      	ldrh	r1, [r0, #12]
   21eae:	7853      	ldrb	r3, [r2, #1]
   21eb0:	4299      	cmp	r1, r3
   21eb2:	d3f9      	bcc.n	21ea8 <handle_event_common.isra.0+0x16>
		handler->handler(buf);
   21eb4:	6853      	ldr	r3, [r2, #4]
}
   21eb6:	bc10      	pop	{r4}
		handler->handler(buf);
   21eb8:	4718      	bx	r3

00021eba <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21eba:	f3bf 8f5b 	dmb	ish
   21ebe:	6800      	ldr	r0, [r0, #0]
   21ec0:	f3bf 8f5b 	dmb	ish
}
   21ec4:	4770      	bx	lr

00021ec6 <is_adv_using_rand_addr>:
{
   21ec6:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   21ec8:	f7f2 f8e2 	bl	14090 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   21ecc:	b120      	cbz	r0, 21ed8 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   21ece:	3010      	adds	r0, #16
   21ed0:	f7ff fff3 	bl	21eba <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21ed4:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   21ed8:	bd08      	pop	{r3, pc}

00021eda <bt_lookup_id_addr>:
}
   21eda:	4608      	mov	r0, r1
   21edc:	4770      	bx	lr

00021ede <bt_id_set_private_addr>:
{
   21ede:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   21ee0:	2106      	movs	r1, #6
   21ee2:	4668      	mov	r0, sp
   21ee4:	f7fb fb62 	bl	1d5ac <bt_rand>
	if (err) {
   21ee8:	b940      	cbnz	r0, 21efc <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   21eea:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   21eee:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   21ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21ef4:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   21ef8:	f7f1 fe94 	bl	13c24 <set_random_address>
}
   21efc:	b003      	add	sp, #12
   21efe:	f85d fb04 	ldr.w	pc, [sp], #4

00021f02 <bt_id_set_adv_private_addr>:
{
   21f02:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   21f04:	2106      	movs	r1, #6
   21f06:	4668      	mov	r0, sp
   21f08:	f7fb fb50 	bl	1d5ac <bt_rand>
	if (err) {
   21f0c:	b940      	cbnz	r0, 21f20 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   21f0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   21f12:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   21f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21f18:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   21f1c:	f7f1 fe82 	bl	13c24 <set_random_address>
}
   21f20:	b003      	add	sp, #12
   21f22:	f85d fb04 	ldr.w	pc, [sp], #4

00021f26 <bt_id_scan_random_addr_check>:
{
   21f26:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   21f28:	f7f2 f8b2 	bl	14090 <bt_le_adv_lookup_legacy>
	if (!adv) {
   21f2c:	b110      	cbz	r0, 21f34 <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   21f2e:	3010      	adds	r0, #16
   21f30:	f7ff ffc3 	bl	21eba <atomic_get>
}
   21f34:	2001      	movs	r0, #1
   21f36:	bd08      	pop	{r3, pc}

00021f38 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   21f38:	2000      	movs	r0, #0
   21f3a:	4770      	bx	lr

00021f3c <get_adv_channel_map>:
{
   21f3c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   21f3e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   21f42:	bf0c      	ite	eq
   21f44:	2007      	moveq	r0, #7
   21f46:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   21f48:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   21f4a:	bf48      	it	mi
   21f4c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   21f50:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   21f52:	bf48      	it	mi
   21f54:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   21f58:	4770      	bx	lr

00021f5a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21f5a:	f3bf 8f5b 	dmb	ish
   21f5e:	6800      	ldr	r0, [r0, #0]
   21f60:	f3bf 8f5b 	dmb	ish
}
   21f64:	4770      	bx	lr

00021f66 <atomic_and>:
{
   21f66:	4603      	mov	r3, r0
}
   21f68:	f3bf 8f5b 	dmb	ish
   21f6c:	e853 0f00 	ldrex	r0, [r3]
   21f70:	ea00 0201 	and.w	r2, r0, r1
   21f74:	e843 2c00 	strex	ip, r2, [r3]
   21f78:	f1bc 0f00 	cmp.w	ip, #0
   21f7c:	d1f6      	bne.n	21f6c <atomic_and+0x6>
   21f7e:	f3bf 8f5b 	dmb	ish
   21f82:	4770      	bx	lr

00021f84 <hci_set_ad>:
{
   21f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f88:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   21f8a:	2120      	movs	r1, #32
{
   21f8c:	4682      	mov	sl, r0
   21f8e:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   21f90:	f7f1 fac0 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   21f94:	4605      	mov	r5, r0
   21f96:	2800      	cmp	r0, #0
   21f98:	d04a      	beq.n	22030 <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   21f9a:	2120      	movs	r1, #32
   21f9c:	3008      	adds	r0, #8
   21f9e:	f002 ff3f 	bl	24e20 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   21fa2:	2220      	movs	r2, #32
   21fa4:	2100      	movs	r1, #0
   21fa6:	4681      	mov	r9, r0
   21fa8:	f7ff fd31 	bl	21a0e <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   21fac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   21fb0:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   21fb4:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   21fb6:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   21fb8:	f8d4 8000 	ldr.w	r8, [r4]
   21fbc:	2300      	movs	r3, #0
   21fbe:	6862      	ldr	r2, [r4, #4]
   21fc0:	4293      	cmp	r3, r2
   21fc2:	d30d      	bcc.n	21fe0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   21fc4:	9b00      	ldr	r3, [sp, #0]
   21fc6:	3408      	adds	r4, #8
   21fc8:	42a3      	cmp	r3, r4
   21fca:	d1f5      	bne.n	21fb8 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   21fcc:	2200      	movs	r2, #0
   21fce:	4629      	mov	r1, r5
   21fd0:	4650      	mov	r0, sl
	*data_len = set_data_len;
   21fd2:	f889 6000 	strb.w	r6, [r9]
}
   21fd6:	b003      	add	sp, #12
   21fd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   21fdc:	f7f1 bad4 	b.w	13588 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   21fe0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   21fe4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   21fe8:	1cb0      	adds	r0, r6, #2
   21fea:	1811      	adds	r1, r2, r0
   21fec:	291f      	cmp	r1, #31
   21fee:	d908      	bls.n	22002 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   21ff0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   21ff4:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   21ff8:	d11f      	bne.n	2203a <hci_set_ad+0xb6>
   21ffa:	2a00      	cmp	r2, #0
   21ffc:	dd1d      	ble.n	2203a <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   21ffe:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   22002:	b2d7      	uxtb	r7, r2
   22004:	1c79      	adds	r1, r7, #1
   22006:	f80b 1006 	strb.w	r1, [fp, r6]
   2200a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   2200c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   2200e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   22012:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   22016:	f8d8 1004 	ldr.w	r1, [r8, #4]
   2201a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   2201c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   2201e:	f7ff fceb 	bl	219f8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   22022:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   22024:	443e      	add	r6, r7
   22026:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   22028:	3301      	adds	r3, #1
   2202a:	f108 0808 	add.w	r8, r8, #8
   2202e:	e7c6      	b.n	21fbe <hci_set_ad+0x3a>
		return -ENOBUFS;
   22030:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   22034:	b003      	add	sp, #12
   22036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   2203a:	4628      	mov	r0, r5
   2203c:	f7f9 fdd6 	bl	1bbec <net_buf_unref>
		return err;
   22040:	f06f 0015 	mvn.w	r0, #21
   22044:	e7f6      	b.n	22034 <hci_set_ad+0xb0>

00022046 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22046:	2301      	movs	r3, #1
{
   22048:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2204a:	fa03 f101 	lsl.w	r1, r3, r1
{
   2204e:	4604      	mov	r4, r0
	if (val) {
   22050:	b162      	cbz	r2, 2206c <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22052:	f3bf 8f5b 	dmb	ish
   22056:	e854 3f00 	ldrex	r3, [r4]
   2205a:	430b      	orrs	r3, r1
   2205c:	e844 3200 	strex	r2, r3, [r4]
   22060:	2a00      	cmp	r2, #0
   22062:	d1f8      	bne.n	22056 <atomic_set_bit_to+0x10>
   22064:	f3bf 8f5b 	dmb	ish
}
   22068:	bc10      	pop	{r4}
   2206a:	4770      	bx	lr
   2206c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2206e:	43c9      	mvns	r1, r1
   22070:	f7ff bf79 	b.w	21f66 <atomic_and>

00022074 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   22074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22078:	b087      	sub	sp, #28
   2207a:	4605      	mov	r5, r0
   2207c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   22080:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   22084:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   22088:	460c      	mov	r4, r1
   2208a:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2208c:	2100      	movs	r1, #0
   2208e:	2210      	movs	r2, #16
   22090:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   22092:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   22094:	f7ff fcbb 	bl	21a0e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   22098:	b186      	cbz	r6, 220bc <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2209a:	f7f1 fda5 	bl	13be8 <bt_get_name>
   2209e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   220a0:	2c00      	cmp	r4, #0
   220a2:	d139      	bne.n	22118 <le_adv_update.constprop.0+0xa4>
   220a4:	2f00      	cmp	r7, #0
   220a6:	d142      	bne.n	2212e <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   220a8:	4658      	mov	r0, fp
   220aa:	f7ff fc67 	bl	2197c <strlen>
   220ae:	2309      	movs	r3, #9
   220b0:	f88d 3000 	strb.w	r3, [sp]
   220b4:	f88d 0001 	strb.w	r0, [sp, #1]
   220b8:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   220bc:	2e01      	cmp	r6, #1
			d_len = 2;
   220be:	bf0c      	ite	eq
   220c0:	2202      	moveq	r2, #2
		d_len = 1;
   220c2:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   220c4:	a902      	add	r1, sp, #8
   220c6:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   220ca:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   220ce:	bf04      	itt	eq
   220d0:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   220d4:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   220d6:	f7ff ff55 	bl	21f84 <hci_set_ad>
		if (err) {
   220da:	4604      	mov	r4, r0
   220dc:	b978      	cbnz	r0, 220fe <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   220de:	f1ba 0f00 	cmp.w	sl, #0
   220e2:	d126      	bne.n	22132 <le_adv_update.constprop.0+0xbe>
   220e4:	3510      	adds	r5, #16
   220e6:	f3bf 8f5b 	dmb	ish
   220ea:	e855 3f00 	ldrex	r3, [r5]
   220ee:	f043 0304 	orr.w	r3, r3, #4
   220f2:	e845 3200 	strex	r2, r3, [r5]
   220f6:	2a00      	cmp	r2, #0
   220f8:	d1f7      	bne.n	220ea <le_adv_update.constprop.0+0x76>
   220fa:	f3bf 8f5b 	dmb	ish
}
   220fe:	4620      	mov	r0, r4
   22100:	b007      	add	sp, #28
   22102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   22106:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2210a:	3a08      	subs	r2, #8
   2210c:	2a01      	cmp	r2, #1
   2210e:	d925      	bls.n	2215c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   22110:	3301      	adds	r3, #1
   22112:	4598      	cmp	r8, r3
   22114:	d1f7      	bne.n	22106 <le_adv_update.constprop.0+0x92>
   22116:	e7c5      	b.n	220a4 <le_adv_update.constprop.0+0x30>
   22118:	2300      	movs	r3, #0
   2211a:	e7fa      	b.n	22112 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2211c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   22120:	3a08      	subs	r2, #8
   22122:	2a01      	cmp	r2, #1
   22124:	d91a      	bls.n	2215c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   22126:	3301      	adds	r3, #1
   22128:	4599      	cmp	r9, r3
   2212a:	d1f7      	bne.n	2211c <le_adv_update.constprop.0+0xa8>
   2212c:	e7bc      	b.n	220a8 <le_adv_update.constprop.0+0x34>
   2212e:	2300      	movs	r3, #0
   22130:	e7fa      	b.n	22128 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   22132:	2e02      	cmp	r6, #2
   22134:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   22138:	bf08      	it	eq
   2213a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2213c:	a902      	add	r1, sp, #8
			d_len = 2;
   2213e:	bf08      	it	eq
   22140:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22142:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   22146:	bf08      	it	eq
   22148:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2214c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22150:	f7ff ff18 	bl	21f84 <hci_set_ad>
		if (err) {
   22154:	2800      	cmp	r0, #0
   22156:	d0c5      	beq.n	220e4 <le_adv_update.constprop.0+0x70>
   22158:	4604      	mov	r4, r0
   2215a:	e7d0      	b.n	220fe <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2215c:	f06f 0415 	mvn.w	r4, #21
   22160:	e7cd      	b.n	220fe <le_adv_update.constprop.0+0x8a>

00022162 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   22162:	6843      	ldr	r3, [r0, #4]
   22164:	f013 0008 	ands.w	r0, r3, #8
   22168:	d00a      	beq.n	22180 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2216a:	035a      	lsls	r2, r3, #13
   2216c:	d407      	bmi.n	2217e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2216e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   22172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22176:	bf0c      	ite	eq
   22178:	2001      	moveq	r0, #1
   2217a:	2002      	movne	r0, #2
   2217c:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2217e:	2001      	movs	r0, #1
}
   22180:	4770      	bx	lr

00022182 <bt_le_adv_set_enable_legacy>:
{
   22182:	b570      	push	{r4, r5, r6, lr}
   22184:	4606      	mov	r6, r0
   22186:	b086      	sub	sp, #24
   22188:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2218a:	f242 000a 	movw	r0, #8202	; 0x200a
   2218e:	2101      	movs	r1, #1
   22190:	f7f1 f9c0 	bl	13514 <bt_hci_cmd_create>
	if (!buf) {
   22194:	4604      	mov	r4, r0
   22196:	b1b0      	cbz	r0, 221c6 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   22198:	3008      	adds	r0, #8
	if (enable) {
   2219a:	b195      	cbz	r5, 221c2 <bt_le_adv_set_enable_legacy+0x40>
   2219c:	2101      	movs	r1, #1
   2219e:	f002 fe4e 	bl	24e3e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   221a2:	f106 0210 	add.w	r2, r6, #16
   221a6:	a903      	add	r1, sp, #12
   221a8:	4620      	mov	r0, r4
   221aa:	9500      	str	r5, [sp, #0]
   221ac:	2306      	movs	r3, #6
   221ae:	f7f1 f99f 	bl	134f0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   221b2:	2200      	movs	r2, #0
   221b4:	4621      	mov	r1, r4
   221b6:	f242 000a 	movw	r0, #8202	; 0x200a
   221ba:	f7f1 f9e5 	bl	13588 <bt_hci_cmd_send_sync>
}
   221be:	b006      	add	sp, #24
   221c0:	bd70      	pop	{r4, r5, r6, pc}
   221c2:	4629      	mov	r1, r5
   221c4:	e7eb      	b.n	2219e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   221c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   221ca:	e7f8      	b.n	221be <bt_le_adv_set_enable_legacy+0x3c>

000221cc <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   221cc:	3018      	adds	r0, #24
   221ce:	f003 bd01 	b.w	25bd4 <k_work_cancel_delayable>

000221d2 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   221d2:	f7f2 b895 	b.w	14300 <bt_le_adv_stop>

000221d6 <atomic_and>:
{
   221d6:	4603      	mov	r3, r0
}
   221d8:	f3bf 8f5b 	dmb	ish
   221dc:	e853 0f00 	ldrex	r0, [r3]
   221e0:	ea00 0201 	and.w	r2, r0, r1
   221e4:	e843 2c00 	strex	ip, r2, [r3]
   221e8:	f1bc 0f00 	cmp.w	ip, #0
   221ec:	d1f6      	bne.n	221dc <atomic_and+0x6>
   221ee:	f3bf 8f5b 	dmb	ish
   221f2:	4770      	bx	lr

000221f4 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   221f4:	f7f2 b8b2 	b.w	1435c <bt_le_scan_set_enable_legacy>

000221f8 <model_start>:
	if (mod->cb && mod->cb->start) {
   221f8:	6983      	ldr	r3, [r0, #24]
   221fa:	b113      	cbz	r3, 22202 <model_start+0xa>
   221fc:	685b      	ldr	r3, [r3, #4]
   221fe:	b103      	cbz	r3, 22202 <model_start+0xa>
		mod->cb->start(mod);
   22200:	4718      	bx	r3
}
   22202:	4770      	bx	lr

00022204 <atomic_and>:
{
   22204:	4603      	mov	r3, r0
}
   22206:	f3bf 8f5b 	dmb	ish
   2220a:	e853 0f00 	ldrex	r0, [r3]
   2220e:	ea00 0201 	and.w	r2, r0, r1
   22212:	e843 2c00 	strex	ip, r2, [r3]
   22216:	f1bc 0f00 	cmp.w	ip, #0
   2221a:	d1f6      	bne.n	2220a <atomic_and+0x6>
   2221c:	f3bf 8f5b 	dmb	ish
   22220:	4770      	bx	lr

00022222 <bt_mesh_init>:
{
   22222:	b538      	push	{r3, r4, r5, lr}
   22224:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   22226:	4608      	mov	r0, r1
   22228:	f7f5 ff70 	bl	1810c <bt_mesh_comp_register>
	if (err) {
   2222c:	4604      	mov	r4, r0
   2222e:	b990      	cbnz	r0, 22256 <bt_mesh_init+0x34>
		err = bt_mesh_prov_init(prov);
   22230:	4628      	mov	r0, r5
   22232:	f7f7 f827 	bl	19284 <bt_mesh_prov_init>
		if (err) {
   22236:	4604      	mov	r4, r0
   22238:	b968      	cbnz	r0, 22256 <bt_mesh_init+0x34>
	bt_mesh_cfg_default_set();
   2223a:	f7f2 fd7b 	bl	14d34 <bt_mesh_cfg_default_set>
	bt_mesh_net_init();
   2223e:	f7f3 fd51 	bl	15ce4 <bt_mesh_net_init>
	bt_mesh_trans_init();
   22242:	f7f5 f91f 	bl	17484 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   22246:	f7f5 fb13 	bl	17870 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   2224a:	f7f2 ff61 	bl	15110 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   2224e:	f7f6 fb6d 	bl	1892c <bt_mesh_adv_init>
		bt_mesh_settings_init();
   22252:	f7f6 fc55 	bl	18b00 <bt_mesh_settings_init>
}
   22256:	4620      	mov	r0, r4
   22258:	bd38      	pop	{r3, r4, r5, pc}

0002225a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2225a:	f3bf 8f5b 	dmb	ish
   2225e:	6800      	ldr	r0, [r0, #0]
   22260:	f3bf 8f5b 	dmb	ish
}
   22264:	4770      	bx	lr

00022266 <bt_mesh_gatt_proxy_set>:
}
   22266:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2226a:	4770      	bx	lr

0002226c <bt_mesh_gatt_proxy_get>:
}
   2226c:	2002      	movs	r0, #2
   2226e:	4770      	bx	lr

00022270 <bt_mesh_friend_set>:
   22270:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22274:	4770      	bx	lr

00022276 <bt_mesh_friend_get>:
   22276:	2002      	movs	r0, #2
   22278:	4770      	bx	lr

0002227a <cfg_set>:
{
   2227a:	b513      	push	{r0, r1, r4, lr}
   2227c:	460c      	mov	r4, r1
   2227e:	4610      	mov	r0, r2
   22280:	4619      	mov	r1, r3
	if (len_rd == 0) {
   22282:	b1d4      	cbz	r4, 222ba <cfg_set+0x40>
	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
   22284:	2307      	movs	r3, #7
   22286:	466a      	mov	r2, sp
   22288:	f002 fb32 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   2228c:	4604      	mov	r4, r0
   2228e:	b9a0      	cbnz	r0, 222ba <cfg_set+0x40>
	bt_mesh_net_transmit_set(cfg.net_transmit);
   22290:	f89d 0000 	ldrb.w	r0, [sp]
   22294:	f7f2 fcde 	bl	14c54 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
   22298:	f89d 1002 	ldrb.w	r1, [sp, #2]
   2229c:	f89d 0001 	ldrb.w	r0, [sp, #1]
   222a0:	f7f2 fcf4 	bl	14c8c <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
   222a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   222a8:	3800      	subs	r0, #0
   222aa:	bf18      	it	ne
   222ac:	2001      	movne	r0, #1
   222ae:	f7f2 fc6f 	bl	14b90 <bt_mesh_beacon_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
   222b2:	f89d 0006 	ldrb.w	r0, [sp, #6]
   222b6:	f7f2 fca9 	bl	14c0c <bt_mesh_default_ttl_set>
}
   222ba:	4620      	mov	r0, r4
   222bc:	b002      	add	sp, #8
   222be:	bd10      	pop	{r4, pc}

000222c0 <bt_mesh_fixed_group_match>:
{
   222c0:	b508      	push	{r3, lr}
	switch (addr) {
   222c2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   222c6:	4298      	cmp	r0, r3
   222c8:	d006      	beq.n	222d8 <bt_mesh_fixed_group_match+0x18>
   222ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   222ce:	4298      	cmp	r0, r3
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   222d0:	bf14      	ite	ne
   222d2:	2000      	movne	r0, #0
   222d4:	2001      	moveq	r0, #1
}
   222d6:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   222d8:	f7f2 fd1c 	bl	14d14 <bt_mesh_relay_get>
   222dc:	2801      	cmp	r0, #1
   222de:	e7f7      	b.n	222d0 <bt_mesh_fixed_group_match+0x10>

000222e0 <adv_buf_destroy>:
{
   222e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   222e2:	6943      	ldr	r3, [r0, #20]
{
   222e4:	4604      	mov	r4, r0
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   222e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   222ea:	ab04      	add	r3, sp, #16
   222ec:	e903 0007 	stmdb	r3, {r0, r1, r2}
   222f0:	4605      	mov	r5, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   222f2:	79a0      	ldrb	r0, [r4, #6]
   222f4:	460e      	mov	r6, r1
   222f6:	f7f9 fbb5 	bl	1ba64 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   222fa:	4621      	mov	r1, r4
   222fc:	f003 fb52 	bl	259a4 <k_queue_prepend>
}

static inline void bt_mesh_adv_send_end(
	int err, struct bt_mesh_adv const *adv)
{
	if (adv->started && adv->cb && adv->cb->end) {
   22300:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22304:	075b      	lsls	r3, r3, #29
   22306:	d508      	bpl.n	2231a <adv_buf_destroy+0x3a>
   22308:	b13d      	cbz	r5, 2231a <adv_buf_destroy+0x3a>
   2230a:	686b      	ldr	r3, [r5, #4]
   2230c:	b12b      	cbz	r3, 2231a <adv_buf_destroy+0x3a>
		adv->cb->end(err, adv->cb_data);
   2230e:	4631      	mov	r1, r6
   22310:	2000      	movs	r0, #0
}
   22312:	b004      	add	sp, #16
   22314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22318:	4718      	bx	r3
   2231a:	b004      	add	sp, #16
   2231c:	bd70      	pop	{r4, r5, r6, pc}

0002231e <bt_mesh_scan_cb>:
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   2231e:	2a03      	cmp	r2, #3
{
   22320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22324:	4688      	mov	r8, r1
   22326:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   22328:	d010      	beq.n	2234c <bt_mesh_scan_cb+0x2e>
}
   2232a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
   2232e:	2200      	movs	r2, #0
   22330:	4641      	mov	r1, r8
   22332:	4620      	mov	r0, r4
   22334:	f7f3 fbea 	bl	15b0c <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
   22338:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   2233a:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
   2233e:	fa10 f686 	uxtah	r6, r0, r6
   22342:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
   22344:	4629      	mov	r1, r5
   22346:	4620      	mov	r0, r4
   22348:	f002 fdd2 	bl	24ef0 <net_buf_simple_pull>
	while (buf->len > 1) {
   2234c:	88a3      	ldrh	r3, [r4, #4]
   2234e:	2b01      	cmp	r3, #1
   22350:	d9eb      	bls.n	2232a <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
   22352:	4620      	mov	r0, r4
   22354:	f002 fddc 	bl	24f10 <net_buf_simple_pull_u8>
		if (len == 0U) {
   22358:	4605      	mov	r5, r0
   2235a:	2800      	cmp	r0, #0
   2235c:	d0e5      	beq.n	2232a <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
   2235e:	88a3      	ldrh	r3, [r4, #4]
   22360:	b287      	uxth	r7, r0
   22362:	42bb      	cmp	r3, r7
   22364:	d3e1      	bcc.n	2232a <bt_mesh_scan_cb+0xc>
	state->offset = net_buf_simple_headroom(buf);
   22366:	4620      	mov	r0, r4
   22368:	f002 fe03 	bl	24f72 <net_buf_simple_headroom>
   2236c:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
   2236e:	4620      	mov	r0, r4
	state->len = buf->len;
   22370:	f8b4 9004 	ldrh.w	r9, [r4, #4]
   22374:	f002 fdcc 	bl	24f10 <net_buf_simple_pull_u8>
		buf->len = len - 1;
   22378:	3f01      	subs	r7, #1
		switch (type) {
   2237a:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
   2237c:	80a7      	strh	r7, [r4, #4]
		switch (type) {
   2237e:	d0d6      	beq.n	2232e <bt_mesh_scan_cb+0x10>
   22380:	282b      	cmp	r0, #43	; 0x2b
   22382:	d005      	beq.n	22390 <bt_mesh_scan_cb+0x72>
   22384:	2829      	cmp	r0, #41	; 0x29
   22386:	d1d7      	bne.n	22338 <bt_mesh_scan_cb+0x1a>
			bt_mesh_pb_adv_recv(buf);
   22388:	4620      	mov	r0, r4
   2238a:	f7f7 ffc3 	bl	1a314 <bt_mesh_pb_adv_recv>
			break;
   2238e:	e7d3      	b.n	22338 <bt_mesh_scan_cb+0x1a>
			bt_mesh_beacon_recv(buf);
   22390:	4620      	mov	r0, r4
   22392:	f7f2 fee5 	bl	15160 <bt_mesh_beacon_recv>
			break;
   22396:	e7cf      	b.n	22338 <bt_mesh_scan_cb+0x1a>

00022398 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
   22398:	b508      	push	{r3, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
   2239a:	f7f2 f9b1 	bl	14700 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
   2239e:	b118      	cbz	r0, 223a8 <bt_mesh_scan_disable+0x10>
		BT_ERR("stopping scan failed (err %d)", err);
		return err;
	}

	return 0;
   223a0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   223a4:	bf08      	it	eq
   223a6:	2000      	moveq	r0, #0
}
   223a8:	bd08      	pop	{r3, pc}

000223aa <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   223aa:	7a43      	ldrb	r3, [r0, #9]
   223ac:	7203      	strb	r3, [r0, #8]
	sub->beacons_cur = 0U;
   223ae:	2300      	movs	r3, #0
   223b0:	7243      	strb	r3, [r0, #9]
}
   223b2:	4770      	bx	lr

000223b4 <beacon_cache_match>:
{
   223b4:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   223b6:	2215      	movs	r2, #21
   223b8:	300a      	adds	r0, #10
   223ba:	f7ff fb0c 	bl	219d6 <memcmp>
}
   223be:	fab0 f080 	clz	r0, r0
   223c2:	0940      	lsrs	r0, r0, #5
   223c4:	bd08      	pop	{r3, pc}

000223c6 <subnet_by_id>:
{
   223c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   223ca:	b085      	sub	sp, #20
   223cc:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   223ce:	f100 046a 	add.w	r4, r0, #106	; 0x6a
   223d2:	2700      	movs	r7, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   223d4:	f10d 0808 	add.w	r8, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   223d8:	f814 6c3a 	ldrb.w	r6, [r4, #-58]
   223dc:	b1e6      	cbz	r6, 22418 <subnet_by_id+0x52>
	if (memcmp(params->net_id, keys->net_id, 8)) {
   223de:	f1a4 0908 	sub.w	r9, r4, #8
   223e2:	6828      	ldr	r0, [r5, #0]
   223e4:	2208      	movs	r2, #8
   223e6:	4649      	mov	r1, r9
   223e8:	f7ff faf5 	bl	219d6 <memcmp>
   223ec:	b9a0      	cbnz	r0, 22418 <subnet_by_id+0x52>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   223ee:	7b29      	ldrb	r1, [r5, #12]
   223f0:	68ab      	ldr	r3, [r5, #8]
   223f2:	f8cd 8000 	str.w	r8, [sp]
   223f6:	464a      	mov	r2, r9
   223f8:	4620      	mov	r0, r4
   223fa:	f000 fcfa 	bl	22df2 <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
   223fe:	6868      	ldr	r0, [r5, #4]
   22400:	2208      	movs	r2, #8
   22402:	4641      	mov	r1, r8
   22404:	f7ff fae7 	bl	219d6 <memcmp>
   22408:	b930      	cbnz	r0, 22418 <subnet_by_id+0x52>
			params->new_key = (i > 0);
   2240a:	736f      	strb	r7, [r5, #13]
}
   2240c:	4630      	mov	r0, r6
   2240e:	b005      	add	sp, #20
   22410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22414:	2701      	movs	r7, #1
   22416:	e7df      	b.n	223d8 <subnet_by_id+0x12>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   22418:	344a      	adds	r4, #74	; 0x4a
   2241a:	2f00      	cmp	r7, #0
   2241c:	d0fa      	beq.n	22414 <subnet_by_id+0x4e>
	return false;
   2241e:	2600      	movs	r6, #0
   22420:	e7f4      	b.n	2240c <subnet_by_id+0x46>

00022422 <k_uptime_get_32>:
{
   22422:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   22424:	f003 fd2a 	bl	25e7c <z_impl_k_uptime_ticks>
   22428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2242c:	fba0 3002 	umull	r3, r0, r0, r2
   22430:	fb02 0101 	mla	r1, r2, r1, r0
   22434:	0bd8      	lsrs	r0, r3, #15
}
   22436:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2243a:	bd08      	pop	{r3, pc}

0002243c <beacon_complete>:
{
   2243c:	b510      	push	{r4, lr}
   2243e:	460c      	mov	r4, r1
	sub->beacon_sent = k_uptime_get_32();
   22440:	f7ff ffef 	bl	22422 <k_uptime_get_32>
   22444:	6020      	str	r0, [r4, #0]
}
   22446:	bd10      	pop	{r4, pc}

00022448 <bt_mesh_beacon_cache_clear>:
	(void)memset(sub->beacon_cache, 0, 21);
   22448:	2215      	movs	r2, #21
   2244a:	2100      	movs	r1, #0
   2244c:	300a      	adds	r0, #10
   2244e:	f7ff bade 	b.w	21a0e <memset>

00022452 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   22452:	2901      	cmp	r1, #1
   22454:	d001      	beq.n	2245a <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   22456:	f7f2 be3d 	b.w	150d4 <bt_mesh_beacon_update>
}
   2245a:	4770      	bx	lr

0002245c <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   2245c:	2200      	movs	r2, #0
   2245e:	8102      	strh	r2, [r0, #8]
	bt_mesh_beacon_update(sub);
   22460:	f7f2 be38 	b.w	150d4 <bt_mesh_beacon_update>

00022464 <sys_get_be24>:
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   22464:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   22468:	7802      	ldrb	r2, [r0, #0]
   2246a:	ba5b      	rev16	r3, r3
   2246c:	b29b      	uxth	r3, r3
}
   2246e:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   22472:	4770      	bx	lr

00022474 <net_encrypt>:
{
   22474:	b570      	push	{r4, r5, r6, lr}
   22476:	460d      	mov	r5, r1
   22478:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2247a:	4601      	mov	r1, r0
   2247c:	1c68      	adds	r0, r5, #1
{
   2247e:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   22480:	f000 fbaf 	bl	22be2 <bt_mesh_net_encrypt>
	if (err) {
   22484:	b938      	cbnz	r0, 22496 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   22486:	6820      	ldr	r0, [r4, #0]
   22488:	f105 0211 	add.w	r2, r5, #17
   2248c:	4631      	mov	r1, r6
}
   2248e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   22492:	f7f5 bb15 	b.w	17ac0 <bt_mesh_net_obfuscate>
}
   22496:	bd70      	pop	{r4, r5, r6, pc}

00022498 <bt_mesh_net_clear>:
{
   22498:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   2249a:	2003      	movs	r0, #3
   2249c:	f7f6 fab8 	bl	18a10 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   224a0:	2004      	movs	r0, #4
   224a2:	f7f6 fab5 	bl	18a10 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   224a6:	2007      	movs	r0, #7
   224a8:	f7f6 fab2 	bl	18a10 <bt_mesh_settings_store_schedule>
}
   224ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   224b0:	2005      	movs	r0, #5
   224b2:	f7f6 baad 	b.w	18a10 <bt_mesh_settings_store_schedule>

000224b6 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   224b6:	2101      	movs	r1, #1
   224b8:	f7f3 bd44 	b.w	15f44 <update_subnet_settings>

000224bc <key_refresh>:
{
   224bc:	b538      	push	{r3, r4, r5, lr}
   224be:	4604      	mov	r4, r0
	switch (new_phase) {
   224c0:	2903      	cmp	r1, #3
   224c2:	d80a      	bhi.n	224da <key_refresh+0x1e>
   224c4:	e8df f001 	tbb	[pc, r1]
   224c8:	130e0216 	.word	0x130e0216
		sub->kr_phase = new_phase;
   224cc:	2301      	movs	r3, #1
   224ce:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   224d2:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   224d4:	4620      	mov	r0, r4
   224d6:	f7f3 fc91 	bl	15dfc <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   224da:	8c20      	ldrh	r0, [r4, #32]
}
   224dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   224e0:	f7ff bfe9 	b.w	224b6 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   224e4:	2302      	movs	r3, #2
   224e6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   224ea:	2103      	movs	r1, #3
   224ec:	e7f2      	b.n	224d4 <key_refresh+0x18>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   224ee:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   224f2:	b16b      	cbz	r3, 22510 <key_refresh+0x54>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   224f4:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   224f6:	f104 017a 	add.w	r1, r4, #122	; 0x7a
		sub->kr_phase = BT_MESH_KR_NORMAL;
   224fa:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   224fe:	224a      	movs	r2, #74	; 0x4a
   22500:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22504:	f7ff fa78 	bl	219f8 <memcpy>
		sub->keys[1].valid = 0U;
   22508:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2250c:	2104      	movs	r1, #4
   2250e:	e7e1      	b.n	224d4 <key_refresh+0x18>
}
   22510:	bd38      	pop	{r3, r4, r5, pc}

00022512 <bt_mesh_kr_update>:
	if (!new_key) {
   22512:	b172      	cbz	r2, 22532 <bt_mesh_kr_update+0x20>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   22514:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   22518:	2b01      	cmp	r3, #1
   2251a:	d105      	bne.n	22528 <bt_mesh_kr_update+0x16>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   2251c:	2900      	cmp	r1, #0
   2251e:	bf14      	ite	ne
   22520:	2102      	movne	r1, #2
   22522:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   22524:	f7ff bfca 	b.w	224bc <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   22528:	2b02      	cmp	r3, #2
   2252a:	d102      	bne.n	22532 <bt_mesh_kr_update+0x20>
   2252c:	b909      	cbnz	r1, 22532 <bt_mesh_kr_update+0x20>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2252e:	2103      	movs	r1, #3
   22530:	e7f8      	b.n	22524 <bt_mesh_kr_update+0x12>
}
   22532:	4770      	bx	lr

00022534 <subnet_del>:
{
   22534:	b510      	push	{r4, lr}
   22536:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   22538:	2100      	movs	r1, #0
   2253a:	8c00      	ldrh	r0, [r0, #32]
   2253c:	f7f3 fd02 	bl	15f44 <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   22540:	8c20      	ldrh	r0, [r4, #32]
   22542:	f7f3 fa27 	bl	15994 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   22546:	2101      	movs	r1, #1
   22548:	4620      	mov	r0, r4
   2254a:	f7f3 fc57 	bl	15dfc <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   2254e:	22c4      	movs	r2, #196	; 0xc4
   22550:	2100      	movs	r1, #0
   22552:	4620      	mov	r0, r4
   22554:	f7ff fa5b 	bl	21a0e <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   22558:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2255c:	8423      	strh	r3, [r4, #32]
}
   2255e:	bd10      	pop	{r4, pc}

00022560 <bt_mesh_subnet_exists>:
{
   22560:	b508      	push	{r3, lr}
	return !!bt_mesh_subnet_get(net_idx);
   22562:	f7f3 fcbb 	bl	15edc <bt_mesh_subnet_get>
}
   22566:	3800      	subs	r0, #0
   22568:	bf18      	it	ne
   2256a:	2001      	movne	r0, #1
   2256c:	bd08      	pop	{r3, pc}

0002256e <bt_mesh_subnet_update>:
{
   2256e:	b538      	push	{r3, r4, r5, lr}
	sub = bt_mesh_subnet_get(net_idx);
   22570:	f7f3 fcb4 	bl	15edc <bt_mesh_subnet_get>
{
   22574:	460c      	mov	r4, r1
	if (!sub) {
   22576:	4605      	mov	r5, r0
   22578:	b348      	cbz	r0, 225ce <bt_mesh_subnet_update+0x60>
	switch (sub->kr_phase) {
   2257a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2257e:	2b01      	cmp	r3, #1
   22580:	d00e      	beq.n	225a0 <bt_mesh_subnet_update+0x32>
   22582:	d904      	bls.n	2258e <bt_mesh_subnet_update+0x20>
   22584:	3b02      	subs	r3, #2
   22586:	2b01      	cmp	r3, #1
   22588:	d813      	bhi.n	225b2 <bt_mesh_subnet_update+0x44>
		return STATUS_CANNOT_UPDATE;
   2258a:	200b      	movs	r0, #11
   2258c:	e010      	b.n	225b0 <bt_mesh_subnet_update+0x42>
		if (!memcmp(key, sub->keys[0].net, 16)) {
   2258e:	f100 0131 	add.w	r1, r0, #49	; 0x31
   22592:	2210      	movs	r2, #16
   22594:	4620      	mov	r0, r4
   22596:	f7ff fa1e 	bl	219d6 <memcmp>
   2259a:	b950      	cbnz	r0, 225b2 <bt_mesh_subnet_update+0x44>
			return STATUS_IDX_ALREADY_STORED;
   2259c:	2006      	movs	r0, #6
   2259e:	e007      	b.n	225b0 <bt_mesh_subnet_update+0x42>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   225a0:	f100 017b 	add.w	r1, r0, #123	; 0x7b
   225a4:	2210      	movs	r2, #16
   225a6:	4620      	mov	r0, r4
   225a8:	f7ff fa15 	bl	219d6 <memcmp>
   225ac:	2800      	cmp	r0, #0
   225ae:	d1ec      	bne.n	2258a <bt_mesh_subnet_update+0x1c>
}
   225b0:	bd38      	pop	{r3, r4, r5, pc}
	err = net_keys_create(&sub->keys[1], key);
   225b2:	4621      	mov	r1, r4
   225b4:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   225b8:	f7f3 fc32 	bl	15e20 <net_keys_create>
	if (err) {
   225bc:	4604      	mov	r4, r0
   225be:	2800      	cmp	r0, #0
   225c0:	d1e3      	bne.n	2258a <bt_mesh_subnet_update+0x1c>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   225c2:	4628      	mov	r0, r5
   225c4:	2101      	movs	r1, #1
   225c6:	f7ff ff79 	bl	224bc <key_refresh>
	return STATUS_SUCCESS;
   225ca:	4620      	mov	r0, r4
   225cc:	e7f0      	b.n	225b0 <bt_mesh_subnet_update+0x42>
		return STATUS_INVALID_NETKEY;
   225ce:	2004      	movs	r0, #4
   225d0:	e7ee      	b.n	225b0 <bt_mesh_subnet_update+0x42>

000225d2 <bt_mesh_subnet_del>:
{
   225d2:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   225d4:	f7f3 fc82 	bl	15edc <bt_mesh_subnet_get>
	if (!sub) {
   225d8:	b118      	cbz	r0, 225e2 <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   225da:	f7ff ffab 	bl	22534 <subnet_del>
	return STATUS_SUCCESS;
   225de:	2000      	movs	r0, #0
}
   225e0:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   225e2:	2004      	movs	r0, #4
   225e4:	e7fc      	b.n	225e0 <bt_mesh_subnet_del+0xe>

000225e6 <bt_mesh_subnet_kr_phase_get>:
{
   225e6:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   225e8:	f7f3 fc78 	bl	15edc <bt_mesh_subnet_get>
	if (!sub) {
   225ec:	b120      	cbz	r0, 225f8 <bt_mesh_subnet_kr_phase_get+0x12>
	*phase = sub->kr_phase;
   225ee:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	return STATUS_SUCCESS;
   225f2:	2000      	movs	r0, #0
   225f4:	700b      	strb	r3, [r1, #0]
}
   225f6:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   225f8:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   225fa:	2004      	movs	r0, #4
   225fc:	e7fa      	b.n	225f4 <bt_mesh_subnet_kr_phase_get+0xe>

000225fe <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   225fe:	2902      	cmp	r1, #2
{
   22600:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   22602:	d006      	beq.n	22612 <bt_mesh_subnet_node_id_set+0x14>
	sub = bt_mesh_subnet_get(net_idx);
   22604:	f7f3 fc6a 	bl	15edc <bt_mesh_subnet_get>
		return STATUS_FEAT_NOT_SUPP;
   22608:	2800      	cmp	r0, #0
   2260a:	bf0c      	ite	eq
   2260c:	2004      	moveq	r0, #4
   2260e:	200a      	movne	r0, #10
}
   22610:	bd08      	pop	{r3, pc}
		return STATUS_CANNOT_SET;
   22612:	200f      	movs	r0, #15
   22614:	e7fc      	b.n	22610 <bt_mesh_subnet_node_id_set+0x12>

00022616 <bt_mesh_subnet_node_id_get>:
{
   22616:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   22618:	f7f3 fc60 	bl	15edc <bt_mesh_subnet_get>
	if (!sub) {
   2261c:	b120      	cbz	r0, 22628 <bt_mesh_subnet_node_id_get+0x12>
	*node_id = sub->node_id;
   2261e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	return STATUS_SUCCESS;
   22622:	2000      	movs	r0, #0
   22624:	700b      	strb	r3, [r1, #0]
}
   22626:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   22628:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2262a:	2004      	movs	r0, #4
   2262c:	e7fa      	b.n	22624 <bt_mesh_subnet_node_id_get+0xe>

0002262e <net_key_set>:
{
   2262e:	b570      	push	{r4, r5, r6, lr}
   22630:	4615      	mov	r5, r2
   22632:	b08a      	sub	sp, #40	; 0x28
   22634:	461e      	mov	r6, r3
	if (!name) {
   22636:	b1d0      	cbz	r0, 2266e <net_key_set+0x40>
	net_idx = strtol(name, NULL, 16);
   22638:	2210      	movs	r2, #16
   2263a:	2100      	movs	r1, #0
   2263c:	f7ff f920 	bl	21880 <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   22640:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
   22642:	4604      	mov	r4, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   22644:	aa01      	add	r2, sp, #4
   22646:	4631      	mov	r1, r6
   22648:	4628      	mov	r0, r5
   2264a:	f002 f951 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   2264e:	b960      	cbnz	r0, 2266a <net_key_set+0x3c>
		net_idx, key.kr_phase, key.val[0],
   22650:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
   22654:	0859      	lsrs	r1, r3, #1
   22656:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
   2265a:	bf18      	it	ne
   2265c:	f10d 0315 	addne.w	r3, sp, #21
   22660:	f10d 0205 	add.w	r2, sp, #5
   22664:	b2a0      	uxth	r0, r4
   22666:	f7f3 fd03 	bl	16070 <bt_mesh_subnet_set>
}
   2266a:	b00a      	add	sp, #40	; 0x28
   2266c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   2266e:	f06f 0001 	mvn.w	r0, #1
   22672:	e7fa      	b.n	2266a <net_key_set+0x3c>

00022674 <app_key_del>:
{
   22674:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   22676:	2100      	movs	r1, #0
{
   22678:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   2267a:	8840      	ldrh	r0, [r0, #2]
   2267c:	f7f3 fe04 	bl	16288 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   22680:	4620      	mov	r0, r4
   22682:	2101      	movs	r1, #1
   22684:	f7f3 fdc0 	bl	16208 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   22688:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2268c:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   2268e:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   22690:	1d60      	adds	r0, r4, #5
   22692:	2222      	movs	r2, #34	; 0x22
}
   22694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   22698:	2100      	movs	r1, #0
   2269a:	f7ff b9b8 	b.w	21a0e <memset>

0002269e <app_key_set>:
{
   2269e:	b5f0      	push	{r4, r5, r6, r7, lr}
   226a0:	460c      	mov	r4, r1
   226a2:	b08b      	sub	sp, #44	; 0x2c
   226a4:	4616      	mov	r6, r2
   226a6:	461f      	mov	r7, r3
	if (!name) {
   226a8:	b1d8      	cbz	r0, 226e2 <app_key_set+0x44>
	app_idx = strtol(name, NULL, 16);
   226aa:	2210      	movs	r2, #16
   226ac:	2100      	movs	r1, #0
   226ae:	f7ff f8e7 	bl	21880 <strtol>
   226b2:	4605      	mov	r5, r0
	if (!len_rd) {
   226b4:	b1c4      	cbz	r4, 226e8 <app_key_set+0x4a>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   226b6:	2323      	movs	r3, #35	; 0x23
   226b8:	aa01      	add	r2, sp, #4
   226ba:	4639      	mov	r1, r7
   226bc:	4630      	mov	r0, r6
   226be:	f002 f917 	bl	248f0 <bt_mesh_settings_set>
	if (err < 0) {
   226c2:	2800      	cmp	r0, #0
   226c4:	db12      	blt.n	226ec <app_key_set+0x4e>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
   226c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   226ca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   226ce:	b10b      	cbz	r3, 226d4 <app_key_set+0x36>
   226d0:	f10d 0317 	add.w	r3, sp, #23
   226d4:	f10d 0207 	add.w	r2, sp, #7
   226d8:	b2a8      	uxth	r0, r5
   226da:	f7f3 fef7 	bl	164cc <bt_mesh_app_key_set>
}
   226de:	b00b      	add	sp, #44	; 0x2c
   226e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOENT;
   226e2:	f06f 0001 	mvn.w	r0, #1
   226e6:	e7fa      	b.n	226de <app_key_set+0x40>
		return 0;
   226e8:	4620      	mov	r0, r4
   226ea:	e7f8      	b.n	226de <app_key_set+0x40>
		return -EINVAL;
   226ec:	f06f 0015 	mvn.w	r0, #21
   226f0:	e7f5      	b.n	226de <app_key_set+0x40>

000226f2 <seg_rx_assemble>:
{
   226f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   226f6:	688b      	ldr	r3, [r1, #8]
   226f8:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   226fa:	2500      	movs	r5, #0
   226fc:	4606      	mov	r6, r0
   226fe:	460c      	mov	r4, r1
   22700:	4617      	mov	r7, r2
   22702:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   22704:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   22708:	f896 3097 	ldrb.w	r3, [r6, #151]	; 0x97
		net_buf_simple_add_mem(buf, rx->seg[i],
   2270c:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   22710:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   22714:	f8b6 3094 	ldrh.w	r3, [r6, #148]	; 0x94
		return BT_MESH_APP_SEG_SDU_MAX;
   22718:	bf14      	ite	ne
   2271a:	2208      	movne	r2, #8
   2271c:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   2271e:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   22722:	429a      	cmp	r2, r3
   22724:	bfa8      	it	ge
   22726:	461a      	movge	r2, r3
   22728:	4620      	mov	r0, r4
   2272a:	f002 fb7f 	bl	24e2c <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   2272e:	f896 3097 	ldrb.w	r3, [r6, #151]	; 0x97
   22732:	3501      	adds	r5, #1
   22734:	461a      	mov	r2, r3
   22736:	f003 031f 	and.w	r3, r3, #31
   2273a:	42ab      	cmp	r3, r5
   2273c:	dae4      	bge.n	22708 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   2273e:	0693      	lsls	r3, r2, #26
   22740:	d406      	bmi.n	22750 <seg_rx_assemble+0x5e>
		buf->len -= APP_MIC_LEN(aszmic);
   22742:	88a3      	ldrh	r3, [r4, #4]
   22744:	2f00      	cmp	r7, #0
   22746:	bf14      	ite	ne
   22748:	2208      	movne	r2, #8
   2274a:	2204      	moveq	r2, #4
   2274c:	1a9b      	subs	r3, r3, r2
   2274e:	80a3      	strh	r3, [r4, #4]
}
   22750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022754 <sdu_try_decrypt>:
	if (ctx->seg) {
   22754:	69d0      	ldr	r0, [r2, #28]
{
   22756:	b570      	push	{r4, r5, r6, lr}
   22758:	460d      	mov	r5, r1
   2275a:	4614      	mov	r4, r2
	if (ctx->seg) {
   2275c:	b118      	cbz	r0, 22766 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   2275e:	7852      	ldrb	r2, [r2, #1]
   22760:	6961      	ldr	r1, [r4, #20]
   22762:	f7ff ffc6 	bl	226f2 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   22766:	69a3      	ldr	r3, [r4, #24]
   22768:	2200      	movs	r2, #0
   2276a:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   2276c:	689a      	ldr	r2, [r3, #8]
   2276e:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   22770:	4621      	mov	r1, r4
   22772:	6962      	ldr	r2, [r4, #20]
   22774:	4628      	mov	r0, r5
}
   22776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2277a:	f000 bad5 	b.w	22d28 <bt_mesh_app_decrypt>

0002277e <seg_send_start>:
	if (!tx->started && tx->cb && tx->cb->start) {
   2277e:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
   22782:	071b      	lsls	r3, r3, #28
{
   22784:	b570      	push	{r4, r5, r6, lr}
   22786:	460d      	mov	r5, r1
   22788:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   2278a:	d40b      	bmi.n	227a4 <seg_send_start+0x26>
   2278c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2278e:	b14b      	cbz	r3, 227a4 <seg_send_start+0x26>
   22790:	681b      	ldr	r3, [r3, #0]
   22792:	b13b      	cbz	r3, 227a4 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   22794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   22796:	4798      	blx	r3
		tx->started = 1U;
   22798:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   2279c:	f043 0308 	orr.w	r3, r3, #8
   227a0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	tx->seg_send_started = 1U;
   227a4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   227a8:	f043 0320 	orr.w	r3, r3, #32
   227ac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err) {
   227b0:	b155      	cbz	r5, 227c8 <seg_send_start+0x4a>
	if (!tx->nack_count) {
   227b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   227b6:	b13b      	cbz	r3, 227c8 <seg_send_start+0x4a>
	k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   227b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   227bc:	2200      	movs	r2, #0
}
   227be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   227c2:	2300      	movs	r3, #0
   227c4:	f7fc ba2c 	b.w	1ec20 <k_work_reschedule>
}
   227c8:	bd70      	pop	{r4, r5, r6, pc}

000227ca <seg_retransmit>:
	seg_tx_send_unacked(tx);
   227ca:	3830      	subs	r0, #48	; 0x30
   227cc:	f7f4 b8c0 	b.w	16950 <seg_tx_send_unacked>

000227d0 <send_unseg>:
{
   227d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   227d4:	4690      	mov	r8, r2
   227d6:	4699      	mov	r9, r3
				 tx->xmit, BUF_TIMEOUT);
   227d8:	2200      	movs	r2, #0
   227da:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   227dc:	e9cd 2300 	strd	r2, r3, [sp]
{
   227e0:	460f      	mov	r7, r1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   227e2:	2101      	movs	r1, #1
   227e4:	7a82      	ldrb	r2, [r0, #10]
{
   227e6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   227ea:	4604      	mov	r4, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   227ec:	4608      	mov	r0, r1
   227ee:	f7f2 fb21 	bl	14e34 <bt_mesh_adv_create>
	if (!buf) {
   227f2:	4605      	mov	r5, r0
   227f4:	b348      	cbz	r0, 2284a <send_unseg+0x7a>
	net_buf_simple_reserve(&buf->b, reserve);
   227f6:	f100 0608 	add.w	r6, r0, #8
   227fa:	2109      	movs	r1, #9
   227fc:	4630      	mov	r0, r6
   227fe:	f002 fab1 	bl	24d64 <net_buf_simple_reserve>
	if (ctl_op) {
   22802:	f1ba 0f00 	cmp.w	sl, #0
   22806:	d014      	beq.n	22832 <send_unseg+0x62>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   22808:	f89a 1000 	ldrb.w	r1, [sl]
	return net_buf_simple_add_u8(&buf->b, val);
   2280c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   22810:	4630      	mov	r0, r6
   22812:	f002 fb14 	bl	24e3e <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22816:	88ba      	ldrh	r2, [r7, #4]
   22818:	6839      	ldr	r1, [r7, #0]
   2281a:	4630      	mov	r0, r6
   2281c:	f002 fb06 	bl	24e2c <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   22820:	464b      	mov	r3, r9
   22822:	4642      	mov	r2, r8
   22824:	4629      	mov	r1, r5
   22826:	4620      	mov	r0, r4
}
   22828:	b002      	add	sp, #8
   2282a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   2282e:	f7f3 b817 	b.w	15860 <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   22832:	6863      	ldr	r3, [r4, #4]
   22834:	8858      	ldrh	r0, [r3, #2]
   22836:	3003      	adds	r0, #3
   22838:	b280      	uxth	r0, r0
   2283a:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   2283c:	bf85      	ittet	hi
   2283e:	7ae1      	ldrbhi	r1, [r4, #11]
   22840:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
   22842:	4651      	movls	r1, sl
   22844:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   22848:	e7e2      	b.n	22810 <send_unseg+0x40>
}
   2284a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2284e:	b002      	add	sp, #8
   22850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022854 <seg_sent>:
	if (!tx->seg_send_started) {
   22854:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   22858:	069b      	lsls	r3, r3, #26
   2285a:	d508      	bpl.n	2286e <seg_sent+0x1a>
	if (!tx->nack_count) {
   2285c:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   22860:	b12b      	cbz	r3, 2286e <seg_sent+0x1a>
	k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   22862:	2200      	movs	r2, #0
   22864:	2300      	movs	r3, #0
   22866:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2286a:	f7fc b9d9 	b.w	1ec20 <k_work_reschedule>
}
   2286e:	4770      	bx	lr

00022870 <bt_mesh_ctl_send>:
{
   22870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   22874:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   22878:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   2287a:	f899 300b 	ldrb.w	r3, [r9, #11]
{
   2287e:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   22880:	2bff      	cmp	r3, #255	; 0xff
{
   22882:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   22886:	4604      	mov	r4, r0
   22888:	4616      	mov	r6, r2
   2288a:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   2288e:	d123      	bne.n	228d8 <bt_mesh_ctl_send+0x68>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   22890:	f7f2 f9da 	bl	14c48 <bt_mesh_default_ttl_get>
   22894:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
   22898:	462a      	mov	r2, r5
   2289a:	4631      	mov	r1, r6
   2289c:	a805      	add	r0, sp, #20
   2289e:	f002 fa5b 	bl	24d58 <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   228a2:	6863      	ldr	r3, [r4, #4]
   228a4:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   228a6:	bf84      	itt	hi
   228a8:	2201      	movhi	r2, #1
   228aa:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   228ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   228b0:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   228b2:	889a      	ldrh	r2, [r3, #4]
   228b4:	b192      	cbz	r2, 228dc <bt_mesh_ctl_send+0x6c>
   228b6:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
   228ba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   228be:	d30d      	bcc.n	228dc <bt_mesh_ctl_send+0x6c>
	if (tx->ctx->send_rel) {
   228c0:	7a9a      	ldrb	r2, [r3, #10]
   228c2:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   228c6:	9300      	str	r3, [sp, #0]
   228c8:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
   228ca:	b162      	cbz	r2, 228e6 <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   228cc:	463a      	mov	r2, r7
   228ce:	a905      	add	r1, sp, #20
   228d0:	4620      	mov	r0, r4
   228d2:	f7f4 f9c5 	bl	16c60 <send_seg>
   228d6:	e003      	b.n	228e0 <bt_mesh_ctl_send+0x70>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   228d8:	061b      	lsls	r3, r3, #24
   228da:	d5dd      	bpl.n	22898 <bt_mesh_ctl_send+0x28>
		return -EINVAL;
   228dc:	f06f 0015 	mvn.w	r0, #21
}
   228e0:	b009      	add	sp, #36	; 0x24
   228e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   228e6:	463a      	mov	r2, r7
   228e8:	a905      	add	r1, sp, #20
   228ea:	4620      	mov	r0, r4
   228ec:	f7ff ff70 	bl	227d0 <send_unseg>
   228f0:	e7f6      	b.n	228e0 <bt_mesh_ctl_send+0x70>

000228f2 <send_ack.isra.0>:
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   228f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   228f4:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   228f6:	8c07      	ldrh	r7, [r0, #32]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   228f8:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   228fc:	f8ad 7010 	strh.w	r7, [sp, #16]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   22900:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   22902:	f64f 77ff 	movw	r7, #65535	; 0xffff
   22906:	2100      	movs	r1, #0
   22908:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   2290c:	ab04      	add	r3, sp, #16
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   2290e:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   22910:	f8cd 1016 	str.w	r1, [sp, #22]
   22914:	f88d 101a 	strb.w	r1, [sp, #26]
   22918:	f8ad 7012 	strh.w	r7, [sp, #18]
   2291c:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   22920:	9109      	str	r1, [sp, #36]	; 0x24
   22922:	9007      	str	r0, [sp, #28]
   22924:	9308      	str	r3, [sp, #32]
   22926:	b36c      	cbz	r4, 22984 <send_ack.isra.0+0x92>
		.src = obo ? bt_mesh_primary_addr() : src,
   22928:	f7f5 fc24 	bl	18174 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   2292c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   22930:	f7f2 f9a6 	bl	14c80 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   22934:	b22d      	sxth	r5, r5
   22936:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   22938:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2293c:	dd20      	ble.n	22980 <send_ack.isra.0+0x8e>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   2293e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	dst[1] = val;
   22940:	f88d 600d 	strb.w	r6, [sp, #13]
   22944:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   22946:	03e4      	lsls	r4, r4, #15
   22948:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2294c:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	dst[0] = val >> 8;
   22950:	f3c4 2307 	ubfx	r3, r4, #8, #8
   22954:	f88d 3008 	strb.w	r3, [sp, #8]
	sys_put_be16(val >> 16, dst);
   22958:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   2295a:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   2295c:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   22960:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   22962:	f3c6 2307 	ubfx	r3, r6, #8, #8
   22966:	f88d 200a 	strb.w	r2, [sp, #10]
   2296a:	f88d 300c 	strb.w	r3, [sp, #12]
   2296e:	e9cd 1100 	strd	r1, r1, [sp]
   22972:	2306      	movs	r3, #6
   22974:	aa02      	add	r2, sp, #8
   22976:	a807      	add	r0, sp, #28
	dst[1] = val;
   22978:	f88d 4009 	strb.w	r4, [sp, #9]
   2297c:	f7ff ff78 	bl	22870 <bt_mesh_ctl_send>
}
   22980:	b00b      	add	sp, #44	; 0x2c
   22982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   22984:	4628      	mov	r0, r5
   22986:	e7d1      	b.n	2292c <send_ack.isra.0+0x3a>

00022988 <seg_ack>:
{
   22988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   2298a:	f810 3c11 	ldrb.w	r3, [r0, #-17]
   2298e:	065a      	lsls	r2, r3, #25
{
   22990:	4604      	mov	r4, r0
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   22992:	d55b      	bpl.n	22a4c <seg_ack+0xc4>
   22994:	f003 031f 	and.w	r3, r3, #31
   22998:	2201      	movs	r2, #1
   2299a:	3301      	adds	r3, #1
   2299c:	fa02 f303 	lsl.w	r3, r2, r3
   229a0:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   229a4:	3b01      	subs	r3, #1
   229a6:	429a      	cmp	r2, r3
   229a8:	d050      	beq.n	22a4c <seg_ack+0xc4>
   229aa:	f003 fa67 	bl	25e7c <z_impl_k_uptime_ticks>
   229ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   229b2:	fba0 0302 	umull	r0, r3, r0, r2
   229b6:	fb02 3301 	mla	r3, r2, r1, r3
   229ba:	0bc0      	lsrs	r0, r0, #15
   229bc:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   229c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   229c4:	1ac0      	subs	r0, r0, r3
   229c6:	f64e 2360 	movw	r3, #60000	; 0xea60
   229ca:	4298      	cmp	r0, r3
   229cc:	d907      	bls.n	229de <seg_ack+0x56>
		seg_rx_reset(rx, false);
   229ce:	2100      	movs	r1, #0
   229d0:	f1a4 00a8 	sub.w	r0, r4, #168	; 0xa8
}
   229d4:	b004      	add	sp, #16
   229d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		seg_rx_reset(rx, false);
   229da:	f7f3 beeb 	b.w	167b4 <seg_rx_reset>
		 rx->block, rx->obo);
   229de:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   229e2:	f854 0ca8 	ldr.w	r0, [r4, #-168]
   229e6:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   229ea:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   229ee:	09db      	lsrs	r3, r3, #7
   229f0:	9302      	str	r3, [sp, #8]
   229f2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   229f6:	9301      	str	r3, [sp, #4]
   229f8:	f1a4 0320 	sub.w	r3, r4, #32
   229fc:	9300      	str	r3, [sp, #0]
   229fe:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   22a02:	f7ff ff76 	bl	228f2 <send_ack.isra.0>
	timeout = ack_timeout(rx);
   22a06:	f814 0c10 	ldrb.w	r0, [r4, #-16]
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   22a0a:	28ff      	cmp	r0, #255	; 0xff
   22a0c:	d101      	bne.n	22a12 <seg_ack+0x8a>
		ttl = bt_mesh_default_ttl_get();
   22a0e:	f7f2 f91b 	bl	14c48 <bt_mesh_default_ttl_get>
	to = CONFIG_BT_MESH_SEG_ACK_BASE_TIMEOUT +
   22a12:	2396      	movs	r3, #150	; 0x96
   22a14:	2532      	movs	r5, #50	; 0x32
   22a16:	fb15 3500 	smlabb	r5, r5, r0, r3
	return MAX(to, 400);
   22a1a:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   22a1e:	bfb8      	it	lt
   22a20:	f44f 75c8 	movlt.w	r5, #400	; 0x190
   22a24:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22a28:	f240 30e7 	movw	r0, #999	; 0x3e7
   22a2c:	2100      	movs	r1, #0
   22a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22a32:	2300      	movs	r3, #0
   22a34:	fbc5 0106 	smlal	r0, r1, r5, r6
   22a38:	f7dd fb62 	bl	100 <__aeabi_uldivmod>
   22a3c:	4602      	mov	r2, r0
   22a3e:	460b      	mov	r3, r1
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   22a40:	4620      	mov	r0, r4
}
   22a42:	b004      	add	sp, #16
   22a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   22a48:	f7fc b8b6 	b.w	1ebb8 <k_work_schedule>
}
   22a4c:	b004      	add	sp, #16
   22a4e:	bd70      	pop	{r4, r5, r6, pc}

00022a50 <bt_mesh_va_add>:
	va_store(va);

	*addr = va->addr;

	return STATUS_SUCCESS;
}
   22a50:	2005      	movs	r0, #5
   22a52:	4770      	bx	lr

00022a54 <bt_mesh_va_del>:
		*addr = va->addr;
	}

	va_store(va);
	return STATUS_SUCCESS;
}
   22a54:	200c      	movs	r0, #12
   22a56:	4770      	bx	lr

00022a58 <bt_mesh_va_label_get>:
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
}
   22a58:	2000      	movs	r0, #0
   22a5a:	4770      	bx	lr

00022a5c <bt_mesh_va_pending_store>:
}
#else
void bt_mesh_va_pending_store(void)
{
	/* Do nothing. */
}
   22a5c:	4770      	bx	lr

00022a5e <hb_unsolicited_pub_end_cb>:
	if (!err) {
   22a5e:	b908      	cbnz	r0, 22a64 <hb_unsolicited_pub_end_cb+0x6>
		notify_pub_sent();
   22a60:	f7f4 bd30 	b.w	174c4 <notify_pub_sent>
}
   22a64:	4770      	bx	lr

00022a66 <hb_publish_start_cb>:
{
   22a66:	4608      	mov	r0, r1
   22a68:	4611      	mov	r1, r2
	if (err) {
   22a6a:	b108      	cbz	r0, 22a70 <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   22a6c:	f7f4 bd54 	b.w	17518 <hb_publish_end_cb>
}
   22a70:	4770      	bx	lr

00022a72 <hb_pub_set>:
{
   22a72:	b510      	push	{r4, lr}
   22a74:	b086      	sub	sp, #24
   22a76:	4610      	mov	r0, r2
   22a78:	4619      	mov	r1, r3
	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   22a7a:	466a      	mov	r2, sp
   22a7c:	2308      	movs	r3, #8
   22a7e:	f001 ff37 	bl	248f0 <bt_mesh_settings_set>
	if (err) {
   22a82:	4604      	mov	r4, r0
   22a84:	bb30      	cbnz	r0, 22ad4 <hb_pub_set+0x62>
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   22a86:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
   22a8a:	f8bd 3000 	ldrh.w	r3, [sp]
   22a8e:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (!val) {
   22a92:	b312      	cbz	r2, 22ada <hb_pub_set+0x68>
	} else if (val == 0xff || val == 0x11) {
   22a94:	2aff      	cmp	r2, #255	; 0xff
   22a96:	d022      	beq.n	22ade <hb_pub_set+0x6c>
   22a98:	2a11      	cmp	r2, #17
   22a9a:	d020      	beq.n	22ade <hb_pub_set+0x6c>
		return (1 << (val - 1));
   22a9c:	3a01      	subs	r2, #1
   22a9e:	2301      	movs	r3, #1
   22aa0:	4093      	lsls	r3, r2
   22aa2:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   22aa4:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
   22aa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   22aaa:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
   22aae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   22ab2:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
   22ab6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
   22abe:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
   22ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
   22ac6:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
   22ac8:	f343 1300 	sbfx	r3, r3, #4, #1
   22acc:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
   22ad0:	f7f4 fe18 	bl	17704 <bt_mesh_hb_pub_set>
}
   22ad4:	4620      	mov	r0, r4
   22ad6:	b006      	add	sp, #24
   22ad8:	bd10      	pop	{r4, pc}
		return 0x0000;
   22ada:	4603      	mov	r3, r0
   22adc:	e7e2      	b.n	22aa4 <hb_pub_set+0x32>
		return 0xffff;
   22ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22ae2:	e7df      	b.n	22aa4 <hb_pub_set+0x32>

00022ae4 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   22ae4:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   22ae6:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   22ae8:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   22aea:	f3c0 2307 	ubfx	r3, r0, #8, #8
   22aee:	700a      	strb	r2, [r1, #0]
   22af0:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   22af2:	70c8      	strb	r0, [r1, #3]
}
   22af4:	4770      	bx	lr

00022af6 <create_app_nonce>:
{
   22af6:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   22af8:	780b      	ldrb	r3, [r1, #0]
{
   22afa:	460c      	mov	r4, r1
		nonce[0] = 0x01;
   22afc:	2b00      	cmp	r3, #0
   22afe:	4601      	mov	r1, r0
   22b00:	bf14      	ite	ne
   22b02:	2302      	movne	r3, #2
   22b04:	2301      	moveq	r3, #1
   22b06:	f801 3b01 	strb.w	r3, [r1], #1
{
   22b0a:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   22b0c:	68a3      	ldr	r3, [r4, #8]
   22b0e:	7860      	ldrb	r0, [r4, #1]
   22b10:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   22b14:	f7ff ffe6 	bl	22ae4 <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   22b18:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   22b1a:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   22b1c:	0a1a      	lsrs	r2, r3, #8
   22b1e:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   22b20:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   22b22:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   22b24:	0a1a      	lsrs	r2, r3, #8
   22b26:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   22b28:	68e0      	ldr	r0, [r4, #12]
   22b2a:	f105 0109 	add.w	r1, r5, #9
}
   22b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   22b32:	f7ff bfd7 	b.w	22ae4 <sys_put_be32>

00022b36 <bt_mesh_aes_cmac>:
{
   22b36:	b570      	push	{r4, r5, r6, lr}
   22b38:	b0c2      	sub	sp, #264	; 0x108
   22b3a:	460c      	mov	r4, r1
   22b3c:	4615      	mov	r5, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   22b3e:	4601      	mov	r1, r0
   22b40:	aa16      	add	r2, sp, #88	; 0x58
   22b42:	4668      	mov	r0, sp
{
   22b44:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   22b46:	f7fe fdbf 	bl	216c8 <tc_cmac_setup>
   22b4a:	b178      	cbz	r0, 22b6c <bt_mesh_aes_cmac+0x36>
   22b4c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
		if (tc_cmac_update(&state, sg->data,
   22b50:	e9d4 1200 	ldrd	r1, r2, [r4]
   22b54:	4668      	mov	r0, sp
   22b56:	f7fe fde2 	bl	2171e <tc_cmac_update>
   22b5a:	b138      	cbz	r0, 22b6c <bt_mesh_aes_cmac+0x36>
	for (; sg_len; sg_len--, sg++) {
   22b5c:	3408      	adds	r4, #8
   22b5e:	42ac      	cmp	r4, r5
   22b60:	d1f6      	bne.n	22b50 <bt_mesh_aes_cmac+0x1a>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   22b62:	4669      	mov	r1, sp
   22b64:	4630      	mov	r0, r6
   22b66:	f7fe fe45 	bl	217f4 <tc_cmac_final>
   22b6a:	b918      	cbnz	r0, 22b74 <bt_mesh_aes_cmac+0x3e>
		return -EIO;
   22b6c:	f06f 0004 	mvn.w	r0, #4
}
   22b70:	b042      	add	sp, #264	; 0x108
   22b72:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   22b74:	2000      	movs	r0, #0
   22b76:	e7fb      	b.n	22b70 <bt_mesh_aes_cmac+0x3a>

00022b78 <bt_mesh_aes_cmac_one>:
{
   22b78:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   22b7a:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   22b7e:	2201      	movs	r2, #1
   22b80:	4669      	mov	r1, sp
   22b82:	f7ff ffd8 	bl	22b36 <bt_mesh_aes_cmac>
}
   22b86:	b003      	add	sp, #12
   22b88:	f85d fb04 	ldr.w	pc, [sp], #4

00022b8c <bt_mesh_s1>:
{
   22b8c:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   22b8e:	2200      	movs	r2, #0
{
   22b90:	b085      	sub	sp, #20
   22b92:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   22b94:	e9cd 2200 	strd	r2, r2, [sp]
   22b98:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   22b9c:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   22b9e:	f7fe feed 	bl	2197c <strlen>
   22ba2:	462b      	mov	r3, r5
   22ba4:	4602      	mov	r2, r0
   22ba6:	4621      	mov	r1, r4
   22ba8:	4668      	mov	r0, sp
   22baa:	f7ff ffe5 	bl	22b78 <bt_mesh_aes_cmac_one>
}
   22bae:	b005      	add	sp, #20
   22bb0:	bd30      	pop	{r4, r5, pc}

00022bb2 <bt_mesh_k1>:
{
   22bb2:	b570      	push	{r4, r5, r6, lr}
   22bb4:	9d04      	ldr	r5, [sp, #16]
   22bb6:	4606      	mov	r6, r0
   22bb8:	461c      	mov	r4, r3
   22bba:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   22bbc:	462b      	mov	r3, r5
   22bbe:	460a      	mov	r2, r1
   22bc0:	4631      	mov	r1, r6
   22bc2:	f7ff ffd9 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   22bc6:	2800      	cmp	r0, #0
   22bc8:	db0a      	blt.n	22be0 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   22bca:	4620      	mov	r0, r4
   22bcc:	f7fe fed6 	bl	2197c <strlen>
   22bd0:	462b      	mov	r3, r5
   22bd2:	4602      	mov	r2, r0
   22bd4:	4621      	mov	r1, r4
   22bd6:	4628      	mov	r0, r5
}
   22bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   22bdc:	f7ff bfcc 	b.w	22b78 <bt_mesh_aes_cmac_one>
}
   22be0:	bd70      	pop	{r4, r5, r6, pc}

00022be2 <bt_mesh_net_encrypt>:
{
   22be2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22be4:	680b      	ldr	r3, [r1, #0]
{
   22be6:	b089      	sub	sp, #36	; 0x24
   22be8:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22bea:	7859      	ldrb	r1, [r3, #1]
{
   22bec:	4607      	mov	r7, r0
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22bee:	f993 0001 	ldrsb.w	r0, [r3, #1]
	nonce[1] = pdu[1];
   22bf2:	f88d 1011 	strb.w	r1, [sp, #17]
	nonce[2] = pdu[2];
   22bf6:	7899      	ldrb	r1, [r3, #2]
   22bf8:	f88d 1012 	strb.w	r1, [sp, #18]
	nonce[3] = pdu[3];
   22bfc:	78d9      	ldrb	r1, [r3, #3]
   22bfe:	f88d 1013 	strb.w	r1, [sp, #19]
	nonce[4] = pdu[4];
   22c02:	7919      	ldrb	r1, [r3, #4]
   22c04:	f88d 1014 	strb.w	r1, [sp, #20]
	nonce[5] = pdu[5];
   22c08:	7959      	ldrb	r1, [r3, #5]
   22c0a:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   22c0e:	799b      	ldrb	r3, [r3, #6]
   22c10:	f88d 3016 	strb.w	r3, [sp, #22]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c14:	2800      	cmp	r0, #0
	nonce[0] = 0x00;
   22c16:	f04f 0500 	mov.w	r5, #0
	sys_put_be32(iv_index, &nonce[9]);
   22c1a:	4610      	mov	r0, r2
   22c1c:	f10d 0119 	add.w	r1, sp, #25
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c20:	bfb4      	ite	lt
   22c22:	2608      	movlt	r6, #8
   22c24:	2604      	movge	r6, #4
	nonce[0] = 0x00;
   22c26:	f88d 5010 	strb.w	r5, [sp, #16]
	nonce[7] = 0U;
   22c2a:	f88d 5017 	strb.w	r5, [sp, #23]
	nonce[8] = 0U;
   22c2e:	f88d 5018 	strb.w	r5, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   22c32:	f7ff ff57 	bl	22ae4 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   22c36:	6822      	ldr	r2, [r4, #0]
   22c38:	88a3      	ldrh	r3, [r4, #4]
   22c3a:	3207      	adds	r2, #7
   22c3c:	e9cd 5500 	strd	r5, r5, [sp]
   22c40:	e9cd 2602 	strd	r2, r6, [sp, #8]
   22c44:	3b07      	subs	r3, #7
   22c46:	a904      	add	r1, sp, #16
   22c48:	4638      	mov	r0, r7
   22c4a:	f7ff f8d3 	bl	21df4 <bt_ccm_encrypt>
	if (!err) {
   22c4e:	4605      	mov	r5, r0
   22c50:	b918      	cbnz	r0, 22c5a <bt_mesh_net_encrypt+0x78>
		net_buf_simple_add(buf, mic_len);
   22c52:	4631      	mov	r1, r6
   22c54:	4620      	mov	r0, r4
   22c56:	f002 f8e3 	bl	24e20 <net_buf_simple_add>
}
   22c5a:	4628      	mov	r0, r5
   22c5c:	b009      	add	sp, #36	; 0x24
   22c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022c60 <bt_mesh_net_decrypt>:
{
   22c60:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c62:	680b      	ldr	r3, [r1, #0]
{
   22c64:	b089      	sub	sp, #36	; 0x24
   22c66:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c68:	7859      	ldrb	r1, [r3, #1]
{
   22c6a:	4606      	mov	r6, r0
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c6c:	f993 0001 	ldrsb.w	r0, [r3, #1]
	nonce[1] = pdu[1];
   22c70:	f88d 1011 	strb.w	r1, [sp, #17]
	nonce[2] = pdu[2];
   22c74:	7899      	ldrb	r1, [r3, #2]
   22c76:	f88d 1012 	strb.w	r1, [sp, #18]
	nonce[3] = pdu[3];
   22c7a:	78d9      	ldrb	r1, [r3, #3]
   22c7c:	f88d 1013 	strb.w	r1, [sp, #19]
	nonce[4] = pdu[4];
   22c80:	7919      	ldrb	r1, [r3, #4]
   22c82:	f88d 1014 	strb.w	r1, [sp, #20]
	nonce[5] = pdu[5];
   22c86:	7959      	ldrb	r1, [r3, #5]
   22c88:	f88d 1015 	strb.w	r1, [sp, #21]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c8c:	2800      	cmp	r0, #0
	nonce[6] = pdu[6];
   22c8e:	799b      	ldrb	r3, [r3, #6]
   22c90:	f88d 3016 	strb.w	r3, [sp, #22]
	nonce[0] = 0x00;
   22c94:	f04f 0500 	mov.w	r5, #0
	sys_put_be32(iv_index, &nonce[9]);
   22c98:	f10d 0119 	add.w	r1, sp, #25
   22c9c:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   22c9e:	bfb4      	ite	lt
   22ca0:	2708      	movlt	r7, #8
   22ca2:	2704      	movge	r7, #4
	nonce[0] = 0x00;
   22ca4:	f88d 5010 	strb.w	r5, [sp, #16]
	nonce[7] = 0U;
   22ca8:	f88d 5017 	strb.w	r5, [sp, #23]
	nonce[8] = 0U;
   22cac:	f88d 5018 	strb.w	r5, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   22cb0:	f7ff ff18 	bl	22ae4 <sys_put_be32>
	buf->len -= mic_len;
   22cb4:	88a3      	ldrh	r3, [r4, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   22cb6:	6822      	ldr	r2, [r4, #0]
	buf->len -= mic_len;
   22cb8:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   22cba:	3207      	adds	r2, #7
	buf->len -= mic_len;
   22cbc:	b29b      	uxth	r3, r3
   22cbe:	80a3      	strh	r3, [r4, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   22cc0:	e9cd 2702 	strd	r2, r7, [sp, #8]
   22cc4:	e9cd 5500 	strd	r5, r5, [sp]
   22cc8:	3b07      	subs	r3, #7
   22cca:	a904      	add	r1, sp, #16
   22ccc:	4630      	mov	r0, r6
   22cce:	f7ff f859 	bl	21d84 <bt_ccm_decrypt>
}
   22cd2:	b009      	add	sp, #36	; 0x24
   22cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022cd6 <bt_mesh_app_encrypt>:
{
   22cd6:	b570      	push	{r4, r5, r6, lr}
   22cd8:	460d      	mov	r5, r1
   22cda:	b088      	sub	sp, #32
   22cdc:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   22cde:	a804      	add	r0, sp, #16
{
   22ce0:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   22ce2:	f7ff ff08 	bl	22af6 <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   22ce6:	692b      	ldr	r3, [r5, #16]
   22ce8:	7868      	ldrb	r0, [r5, #1]
   22cea:	6822      	ldr	r2, [r4, #0]
   22cec:	2b00      	cmp	r3, #0
   22cee:	bf14      	ite	ne
   22cf0:	2110      	movne	r1, #16
   22cf2:	2100      	moveq	r1, #0
   22cf4:	2800      	cmp	r0, #0
   22cf6:	bf14      	ite	ne
   22cf8:	2008      	movne	r0, #8
   22cfa:	2004      	moveq	r0, #4
   22cfc:	e9cd 3100 	strd	r3, r1, [sp]
   22d00:	e9cd 2002 	strd	r2, r0, [sp, #8]
   22d04:	88a3      	ldrh	r3, [r4, #4]
   22d06:	4630      	mov	r0, r6
   22d08:	a904      	add	r1, sp, #16
   22d0a:	f7ff f873 	bl	21df4 <bt_ccm_encrypt>
	if (!err) {
   22d0e:	4606      	mov	r6, r0
   22d10:	b938      	cbnz	r0, 22d22 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   22d12:	786b      	ldrb	r3, [r5, #1]
   22d14:	2b00      	cmp	r3, #0
   22d16:	bf14      	ite	ne
   22d18:	2108      	movne	r1, #8
   22d1a:	2104      	moveq	r1, #4
   22d1c:	4620      	mov	r0, r4
   22d1e:	f002 f87f 	bl	24e20 <net_buf_simple_add>
}
   22d22:	4630      	mov	r0, r6
   22d24:	b008      	add	sp, #32
   22d26:	bd70      	pop	{r4, r5, r6, pc}

00022d28 <bt_mesh_app_decrypt>:
{
   22d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d2a:	460d      	mov	r5, r1
   22d2c:	b089      	sub	sp, #36	; 0x24
   22d2e:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   22d30:	a804      	add	r0, sp, #16
{
   22d32:	4614      	mov	r4, r2
   22d34:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   22d36:	f7ff fede 	bl	22af6 <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   22d3a:	692b      	ldr	r3, [r5, #16]
   22d3c:	7868      	ldrb	r0, [r5, #1]
   22d3e:	6831      	ldr	r1, [r6, #0]
   22d40:	2b00      	cmp	r3, #0
   22d42:	bf14      	ite	ne
   22d44:	2210      	movne	r2, #16
   22d46:	2200      	moveq	r2, #0
   22d48:	2800      	cmp	r0, #0
   22d4a:	bf14      	ite	ne
   22d4c:	2008      	movne	r0, #8
   22d4e:	2004      	moveq	r0, #4
   22d50:	e9cd 1002 	strd	r1, r0, [sp, #8]
   22d54:	e9cd 3200 	strd	r3, r2, [sp]
   22d58:	a904      	add	r1, sp, #16
   22d5a:	88a3      	ldrh	r3, [r4, #4]
   22d5c:	6822      	ldr	r2, [r4, #0]
   22d5e:	4638      	mov	r0, r7
   22d60:	f7ff f810 	bl	21d84 <bt_ccm_decrypt>
	if (!err) {
   22d64:	4605      	mov	r5, r0
   22d66:	b918      	cbnz	r0, 22d70 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   22d68:	88a1      	ldrh	r1, [r4, #4]
   22d6a:	4630      	mov	r0, r6
   22d6c:	f002 f858 	bl	24e20 <net_buf_simple_add>
}
   22d70:	4628      	mov	r0, r5
   22d72:	b009      	add	sp, #36	; 0x24
   22d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022d76 <bt_mesh_prov_salt>:
{
   22d76:	b510      	push	{r4, lr}
   22d78:	b08a      	sub	sp, #40	; 0x28
	const uint8_t prov_salt_key[16] = { 0 };
   22d7a:	2400      	movs	r4, #0
	struct bt_mesh_sg sg[] = {
   22d7c:	9004      	str	r0, [sp, #16]
   22d7e:	2010      	movs	r0, #16
   22d80:	e9cd 0105 	strd	r0, r1, [sp, #20]
   22d84:	e9cd 0207 	strd	r0, r2, [sp, #28]
   22d88:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   22d8a:	eb0d 0100 	add.w	r1, sp, r0
   22d8e:	2203      	movs	r2, #3
   22d90:	4668      	mov	r0, sp
	const uint8_t prov_salt_key[16] = { 0 };
   22d92:	e9cd 4400 	strd	r4, r4, [sp]
   22d96:	e9cd 4402 	strd	r4, r4, [sp, #8]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   22d9a:	f7ff fecc 	bl	22b36 <bt_mesh_aes_cmac>
}
   22d9e:	b00a      	add	sp, #40	; 0x28
   22da0:	bd10      	pop	{r4, pc}

00022da2 <bt_mesh_prov_conf_salt>:
{
   22da2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const uint8_t conf_salt_key[16] = { 0 };
   22da4:	2200      	movs	r2, #0
   22da6:	e9cd 2200 	strd	r2, r2, [sp]
   22daa:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   22dae:	460b      	mov	r3, r1
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   22db0:	2291      	movs	r2, #145	; 0x91
   22db2:	4601      	mov	r1, r0
   22db4:	4668      	mov	r0, sp
   22db6:	f7ff fedf 	bl	22b78 <bt_mesh_aes_cmac_one>
}
   22dba:	b005      	add	sp, #20
   22dbc:	f85d fb04 	ldr.w	pc, [sp], #4

00022dc0 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   22dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   22dc2:	9100      	str	r1, [sp, #0]
   22dc4:	2110      	movs	r1, #16
   22dc6:	e9cd 1201 	strd	r1, r2, [sp, #4]
   22dca:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   22dcc:	2202      	movs	r2, #2
   22dce:	4669      	mov	r1, sp
   22dd0:	f7ff feb1 	bl	22b36 <bt_mesh_aes_cmac>
}
   22dd4:	b005      	add	sp, #20
   22dd6:	f85d fb04 	ldr.w	pc, [sp], #4

00022dda <bt_mesh_prov_encrypt>:
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
}

int bt_mesh_prov_encrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25], uint8_t out[25 + 8])
{
   22dda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_encrypt(key, nonce, data, 25, NULL, 0, out, 8);
   22ddc:	2408      	movs	r4, #8
   22dde:	e9cd 3402 	strd	r3, r4, [sp, #8]
   22de2:	2300      	movs	r3, #0
   22de4:	e9cd 3300 	strd	r3, r3, [sp]
   22de8:	2319      	movs	r3, #25
   22dea:	f7ff f803 	bl	21df4 <bt_ccm_encrypt>
}
   22dee:	b004      	add	sp, #16
   22df0:	bd10      	pop	{r4, pc}

00022df2 <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   22df2:	b530      	push	{r4, r5, lr}
   22df4:	b089      	sub	sp, #36	; 0x24
   22df6:	4604      	mov	r4, r0
   22df8:	4608      	mov	r0, r1
   22dfa:	461d      	mov	r5, r3
   22dfc:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   22dfe:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   22e02:	2208      	movs	r2, #8
   22e04:	f10d 0001 	add.w	r0, sp, #1
   22e08:	f7fe fdf6 	bl	219f8 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   22e0c:	f10d 0109 	add.w	r1, sp, #9
   22e10:	4628      	mov	r0, r5
   22e12:	f7ff fe67 	bl	22ae4 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   22e16:	4620      	mov	r0, r4
   22e18:	ab04      	add	r3, sp, #16
   22e1a:	220d      	movs	r2, #13
   22e1c:	4669      	mov	r1, sp
   22e1e:	f7ff feab 	bl	22b78 <bt_mesh_aes_cmac_one>
	if (!err) {
   22e22:	4604      	mov	r4, r0
   22e24:	b920      	cbnz	r0, 22e30 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   22e26:	980c      	ldr	r0, [sp, #48]	; 0x30
   22e28:	2208      	movs	r2, #8
   22e2a:	a904      	add	r1, sp, #16
   22e2c:	f7fe fde4 	bl	219f8 <memcpy>
	}

	return err;
}
   22e30:	4620      	mov	r0, r4
   22e32:	b009      	add	sp, #36	; 0x24
   22e34:	bd30      	pop	{r4, r5, pc}

00022e36 <k_uptime_get_32>:
{
   22e36:	b508      	push	{r3, lr}
   22e38:	f003 f820 	bl	25e7c <z_impl_k_uptime_ticks>
   22e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22e40:	fba0 3002 	umull	r3, r0, r0, r2
   22e44:	fb02 0101 	mla	r1, r2, r1, r0
   22e48:	0bd8      	lsrs	r0, r3, #15
}
   22e4a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   22e4e:	bd08      	pop	{r3, pc}

00022e50 <find_group_mod_visitor>:
{
   22e50:	b510      	push	{r4, lr}
	if (mod->elem_idx != ctx->mod->elem_idx) {
   22e52:	684b      	ldr	r3, [r1, #4]
   22e54:	7902      	ldrb	r2, [r0, #4]
   22e56:	791b      	ldrb	r3, [r3, #4]
   22e58:	429a      	cmp	r2, r3
   22e5a:	d109      	bne.n	22e70 <find_group_mod_visitor+0x20>
		if (mod->groups[i] == addr) {
   22e5c:	89c3      	ldrh	r3, [r0, #14]
	ctx->entry = model_group_get(mod, ctx->addr);
   22e5e:	890a      	ldrh	r2, [r1, #8]
		if (mod->groups[i] == addr) {
   22e60:	4293      	cmp	r3, r2
   22e62:	f04f 0300 	mov.w	r3, #0
   22e66:	d006      	beq.n	22e76 <find_group_mod_visitor+0x26>
   22e68:	8a04      	ldrh	r4, [r0, #16]
   22e6a:	4294      	cmp	r4, r2
   22e6c:	d002      	beq.n	22e74 <find_group_mod_visitor+0x24>
	ctx->entry = model_group_get(mod, ctx->addr);
   22e6e:	600b      	str	r3, [r1, #0]
		return BT_MESH_WALK_CONTINUE;
   22e70:	2001      	movs	r0, #1
   22e72:	e006      	b.n	22e82 <find_group_mod_visitor+0x32>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   22e74:	2301      	movs	r3, #1
			return &mod->groups[i];
   22e76:	3307      	adds	r3, #7
   22e78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
		ctx->mod = mod;
   22e7c:	e9c1 3000 	strd	r3, r0, [r1]
		return BT_MESH_WALK_STOP;
   22e80:	2000      	movs	r0, #0
}
   22e82:	bd10      	pop	{r4, pc}

00022e84 <publish_sent>:
{
   22e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   22e88:	688d      	ldr	r5, [r1, #8]
{
   22e8a:	460e      	mov	r6, r1
	elapsed = k_uptime_get_32() - pub->period_start;
   22e8c:	f7ff ffd3 	bl	22e36 <k_uptime_get_32>
   22e90:	68ec      	ldr	r4, [r5, #12]
	if (mod->pub->count) {
   22e92:	68b5      	ldr	r5, [r6, #8]
	elapsed = k_uptime_get_32() - pub->period_start;
   22e94:	4601      	mov	r1, r0
   22e96:	1b07      	subs	r7, r0, r4
	if (mod->pub->count) {
   22e98:	7ae8      	ldrb	r0, [r5, #11]
   22e9a:	f010 0ff0 	tst.w	r0, #240	; 0xf0
   22e9e:	d027      	beq.n	22ef0 <publish_sent+0x6c>
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   22ea0:	7a6a      	ldrb	r2, [r5, #9]
   22ea2:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   22ea6:	f002 0207 	and.w	r2, r2, #7
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   22eaa:	2332      	movs	r3, #50	; 0x32
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   22eac:	3201      	adds	r2, #1
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   22eae:	fb0c 3303 	mla	r3, ip, r3, r3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   22eb2:	eba2 1010 	sub.w	r0, r2, r0, lsr #4
		if (period && elapsed >= period) {
   22eb6:	4343      	muls	r3, r0
   22eb8:	d01a      	beq.n	22ef0 <publish_sent+0x6c>
   22eba:	429f      	cmp	r7, r3
	if (elapsed >= period) {
   22ebc:	d21f      	bcs.n	22efe <publish_sent+0x7a>
	return period - elapsed;
   22ebe:	1a64      	subs	r4, r4, r1
	if (delay) {
   22ec0:	18e0      	adds	r0, r4, r3
   22ec2:	d01e      	beq.n	22f02 <publish_sent+0x7e>
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   22ec4:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   22ec8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22ecc:	f240 30e7 	movw	r0, #999	; 0x3e7
   22ed0:	2100      	movs	r1, #0
   22ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22ed6:	2300      	movs	r3, #0
   22ed8:	fbc4 0106 	smlal	r0, r1, r4, r6
   22edc:	f7dd f910 	bl	100 <__aeabi_uldivmod>
   22ee0:	4602      	mov	r2, r0
   22ee2:	460b      	mov	r3, r1
   22ee4:	f105 0018 	add.w	r0, r5, #24
}
   22ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   22eec:	f7fb be64 	b.w	1ebb8 <k_work_schedule>
		period = bt_mesh_model_pub_period_get(mod);
   22ef0:	4630      	mov	r0, r6
   22ef2:	f7f4 ff79 	bl	17de8 <bt_mesh_model_pub_period_get>
   22ef6:	4603      	mov	r3, r0
		if (!period) {
   22ef8:	b118      	cbz	r0, 22f02 <publish_sent+0x7e>
	if (elapsed >= period) {
   22efa:	4287      	cmp	r7, r0
   22efc:	e7de      	b.n	22ebc <publish_sent+0x38>
			return 1;
   22efe:	2001      	movs	r0, #1
   22f00:	e7e0      	b.n	22ec4 <publish_sent+0x40>
}
   22f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022f06 <publish_start>:
{
   22f06:	4608      	mov	r0, r1
   22f08:	4611      	mov	r1, r2
	if (err) {
   22f0a:	b108      	cbz	r0, 22f10 <publish_start+0xa>
		publish_sent(err, user_data);
   22f0c:	f7ff bfba 	b.w	22e84 <publish_sent>
}
   22f10:	4770      	bx	lr

00022f12 <commit_mod>:
{
   22f12:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
   22f14:	6885      	ldr	r5, [r0, #8]
   22f16:	b1dd      	cbz	r5, 22f50 <commit_mod+0x3e>
   22f18:	696b      	ldr	r3, [r5, #20]
   22f1a:	b1cb      	cbz	r3, 22f50 <commit_mod+0x3e>
   22f1c:	88ab      	ldrh	r3, [r5, #4]
   22f1e:	b1bb      	cbz	r3, 22f50 <commit_mod+0x3e>
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   22f20:	f7f4 ff62 	bl	17de8 <bt_mesh_model_pub_period_get>
		if (ms > 0) {
   22f24:	1e04      	subs	r4, r0, #0
   22f26:	dd13      	ble.n	22f50 <commit_mod+0x3e>
   22f28:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22f2c:	f240 30e7 	movw	r0, #999	; 0x3e7
   22f30:	2100      	movs	r1, #0
   22f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22f36:	2300      	movs	r3, #0
   22f38:	fbc4 0106 	smlal	r0, r1, r4, r6
   22f3c:	f7dd f8e0 	bl	100 <__aeabi_uldivmod>
   22f40:	4602      	mov	r2, r0
   22f42:	460b      	mov	r3, r1
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   22f44:	f105 0018 	add.w	r0, r5, #24
}
   22f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   22f4c:	f7fb be34 	b.w	1ebb8 <k_work_schedule>
}
   22f50:	bd70      	pop	{r4, r5, r6, pc}

00022f52 <sig_mod_set>:
{
   22f52:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   22f54:	9300      	str	r3, [sp, #0]
   22f56:	4613      	mov	r3, r2
   22f58:	460a      	mov	r2, r1
   22f5a:	4601      	mov	r1, r0
   22f5c:	2000      	movs	r0, #0
   22f5e:	f7f5 f819 	bl	17f94 <mod_set>
}
   22f62:	b003      	add	sp, #12
   22f64:	f85d fb04 	ldr.w	pc, [sp], #4

00022f68 <vnd_mod_set>:
{
   22f68:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   22f6a:	9300      	str	r3, [sp, #0]
   22f6c:	4613      	mov	r3, r2
   22f6e:	460a      	mov	r2, r1
   22f70:	4601      	mov	r1, r0
   22f72:	2001      	movs	r0, #1
   22f74:	f7f5 f80e 	bl	17f94 <mod_set>
}
   22f78:	b003      	add	sp, #12
   22f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00022f7e <bt_mesh_msg_send>:
{
   22f7e:	b530      	push	{r4, r5, lr}
   22f80:	b085      	sub	sp, #20
   22f82:	461d      	mov	r5, r3
	struct bt_mesh_net_tx tx = {
   22f84:	2300      	movs	r3, #0
   22f86:	e9cd 0302 	strd	r0, r3, [sp, #8]
{
   22f8a:	460c      	mov	r4, r1
	struct bt_mesh_net_tx tx = {
   22f8c:	9301      	str	r3, [sp, #4]
   22f8e:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!bt_mesh_is_provisioned()) {
   22f92:	f7f1 fd33 	bl	149fc <bt_mesh_is_provisioned>
   22f96:	b138      	cbz	r0, 22fa8 <bt_mesh_msg_send+0x2a>
	return bt_mesh_trans_send(&tx, buf, cb, cb_data);
   22f98:	9b08      	ldr	r3, [sp, #32]
   22f9a:	462a      	mov	r2, r5
   22f9c:	4621      	mov	r1, r4
   22f9e:	a801      	add	r0, sp, #4
   22fa0:	f7f3 ff58 	bl	16e54 <bt_mesh_trans_send>
}
   22fa4:	b005      	add	sp, #20
   22fa6:	bd30      	pop	{r4, r5, pc}
		return -EAGAIN;
   22fa8:	f06f 000a 	mvn.w	r0, #10
   22fac:	e7fa      	b.n	22fa4 <bt_mesh_msg_send+0x26>

00022fae <bt_mesh_model_has_key>:
		if (mod->keys[i] == key ||
   22fae:	8983      	ldrh	r3, [r0, #12]
   22fb0:	428b      	cmp	r3, r1
   22fb2:	d00a      	beq.n	22fca <bt_mesh_model_has_key+0x1c>
   22fb4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   22fb8:	4293      	cmp	r3, r2
   22fba:	d108      	bne.n	22fce <bt_mesh_model_has_key+0x20>
		     BT_MESH_IS_DEV_KEY(key))) {
   22fbc:	1cc8      	adds	r0, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   22fbe:	b280      	uxth	r0, r0
   22fc0:	2801      	cmp	r0, #1
   22fc2:	bf8c      	ite	hi
   22fc4:	2000      	movhi	r0, #0
   22fc6:	2001      	movls	r0, #1
   22fc8:	4770      	bx	lr
			return true;
   22fca:	2001      	movs	r0, #1
   22fcc:	4770      	bx	lr
	return false;
   22fce:	2000      	movs	r0, #0
}
   22fd0:	4770      	bx	lr

00022fd2 <bt_mesh_model_send>:
{
   22fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22fd6:	460c      	mov	r4, r1
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   22fd8:	8849      	ldrh	r1, [r1, #2]
{
   22fda:	4607      	mov	r7, r0
   22fdc:	4615      	mov	r5, r2
   22fde:	461e      	mov	r6, r3
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   22fe0:	f7ff ffe5 	bl	22fae <bt_mesh_model_has_key>
   22fe4:	b150      	cbz	r0, 22ffc <bt_mesh_model_send+0x2a>
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   22fe6:	4638      	mov	r0, r7
   22fe8:	f7f4 ff22 	bl	17e30 <bt_mesh_model_elem>
   22fec:	4629      	mov	r1, r5
   22fee:	8802      	ldrh	r2, [r0, #0]
   22ff0:	4633      	mov	r3, r6
   22ff2:	4620      	mov	r0, r4
}
   22ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   22ff8:	f7ff bfc1 	b.w	22f7e <bt_mesh_msg_send>
}
   22ffc:	f06f 0015 	mvn.w	r0, #21
   23000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023004 <bt_mesh_model_find_vnd>:
{
   23004:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   23006:	7947      	ldrb	r7, [r0, #5]
{
   23008:	4604      	mov	r4, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2300a:	2300      	movs	r3, #0
   2300c:	b2d8      	uxtb	r0, r3
   2300e:	4287      	cmp	r7, r0
   23010:	d801      	bhi.n	23016 <bt_mesh_model_find_vnd+0x12>
	return NULL;
   23012:	2000      	movs	r0, #0
}
   23014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   23016:	68e6      	ldr	r6, [r4, #12]
   23018:	015d      	lsls	r5, r3, #5
   2301a:	eb06 1043 	add.w	r0, r6, r3, lsl #5
   2301e:	5b75      	ldrh	r5, [r6, r5]
   23020:	428d      	cmp	r5, r1
   23022:	d102      	bne.n	2302a <bt_mesh_model_find_vnd+0x26>
   23024:	8845      	ldrh	r5, [r0, #2]
   23026:	4295      	cmp	r5, r2
   23028:	d0f4      	beq.n	23014 <bt_mesh_model_find_vnd+0x10>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2302a:	3301      	adds	r3, #1
   2302c:	e7ee      	b.n	2300c <bt_mesh_model_find_vnd+0x8>

0002302e <bt_mesh_model_find>:
{
   2302e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0U; i < elem->model_count; i++) {
   23030:	7906      	ldrb	r6, [r0, #4]
{
   23032:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   23034:	2300      	movs	r3, #0
   23036:	b2d8      	uxtb	r0, r3
   23038:	4286      	cmp	r6, r0
   2303a:	d801      	bhi.n	23040 <bt_mesh_model_find+0x12>
	return NULL;
   2303c:	2000      	movs	r0, #0
   2303e:	e008      	b.n	23052 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   23040:	6895      	ldr	r5, [r2, #8]
   23042:	015c      	lsls	r4, r3, #5
   23044:	eb05 1043 	add.w	r0, r5, r3, lsl #5
   23048:	5b2c      	ldrh	r4, [r5, r4]
   2304a:	428c      	cmp	r4, r1
   2304c:	f103 0301 	add.w	r3, r3, #1
   23050:	d1f1      	bne.n	23036 <bt_mesh_model_find+0x8>
}
   23052:	bd70      	pop	{r4, r5, r6, pc}

00023054 <bt_mesh_model_extensions_walk>:
{
   23054:	460b      	mov	r3, r1
	(void)cb(model, user_data);
   23056:	4611      	mov	r1, r2
   23058:	4718      	bx	r3

0002305a <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   2305a:	88c3      	ldrh	r3, [r0, #6]
   2305c:	f043 0301 	orr.w	r3, r3, #1
   23060:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   23062:	2008      	movs	r0, #8
   23064:	f7f5 bcd4 	b.w	18a10 <bt_mesh_settings_store_schedule>

00023068 <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   23068:	88c3      	ldrh	r3, [r0, #6]
   2306a:	f043 0302 	orr.w	r3, r3, #2
   2306e:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   23070:	2008      	movs	r0, #8
   23072:	f7f5 bccd 	b.w	18a10 <bt_mesh_settings_store_schedule>

00023076 <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   23076:	88c3      	ldrh	r3, [r0, #6]
   23078:	f043 0304 	orr.w	r3, r3, #4
   2307c:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2307e:	2008      	movs	r0, #8
   23080:	f7f5 bcc6 	b.w	18a10 <bt_mesh_settings_store_schedule>

00023084 <bt_mesh_model_msg_init>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_MESH_DEBUG_ACCESS)
#define LOG_MODULE_NAME bt_mesh_msg
#include "common/log.h"

void bt_mesh_model_msg_init(struct net_buf_simple *msg, uint32_t opcode)
{
   23084:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   23086:	6883      	ldr	r3, [r0, #8]
   23088:	4604      	mov	r4, r0
   2308a:	b913      	cbnz	r3, 23092 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   2308c:	f100 030c 	add.w	r3, r0, #12
   23090:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   23092:	68a3      	ldr	r3, [r4, #8]
   23094:	6023      	str	r3, [r4, #0]
	net_buf_simple_init(msg, 0);

	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   23096:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   23098:	f04f 0300 	mov.w	r3, #0
   2309c:	80a3      	strh	r3, [r4, #4]
   2309e:	d805      	bhi.n	230ac <bt_mesh_model_msg_init+0x28>
	case 1:
		net_buf_simple_add_u8(msg, opcode);
   230a0:	4620      	mov	r0, r4
   230a2:	b2c9      	uxtb	r1, r1
		break;
	default:
		BT_WARN("Unknown opcode format");
		break;
	}
}
   230a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   230a8:	f001 bec9 	b.w	24e3e <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   230ac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		net_buf_simple_add_be16(msg, opcode);
   230b0:	b28d      	uxth	r5, r1
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   230b2:	d205      	bcs.n	230c0 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   230b4:	4629      	mov	r1, r5
   230b6:	4620      	mov	r0, r4
}
   230b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   230bc:	f001 bed1 	b.w	24e62 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   230c0:	f3c1 4107 	ubfx	r1, r1, #16, #8
   230c4:	4620      	mov	r0, r4
   230c6:	f001 feba 	bl	24e3e <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   230ca:	4629      	mov	r1, r5
   230cc:	4620      	mov	r0, r4
}
   230ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   230d2:	f001 bebc 	b.w	24e4e <net_buf_simple_add_le16>

000230d6 <bt_mesh_msg_ack_ctx_clear>:

void bt_mesh_msg_ack_ctx_clear(struct bt_mesh_msg_ack_ctx *ack)
{
	ack->op = 0U;
   230d6:	2300      	movs	r3, #0
   230d8:	6183      	str	r3, [r0, #24]
	ack->user_data = NULL;
   230da:	6203      	str	r3, [r0, #32]
	ack->dst = BT_MESH_ADDR_UNASSIGNED;
   230dc:	8383      	strh	r3, [r0, #28]
}
   230de:	4770      	bx	lr

000230e0 <bt_mesh_msg_ack_ctx_prepare>:

int bt_mesh_msg_ack_ctx_prepare(struct bt_mesh_msg_ack_ctx *ack,
				uint32_t op, uint16_t dst, void *user_data)
{
   230e0:	b510      	push	{r4, lr}
	if (ack->op) {
   230e2:	6984      	ldr	r4, [r0, #24]
   230e4:	b924      	cbnz	r4, 230f0 <bt_mesh_msg_ack_ctx_prepare+0x10>
		BT_WARN("Another synchronous operation pending");
		return -EBUSY;
	}

	ack->op = op;
   230e6:	6181      	str	r1, [r0, #24]
	ack->user_data = user_data;
   230e8:	6203      	str	r3, [r0, #32]
	ack->dst = dst;
   230ea:	8382      	strh	r2, [r0, #28]

	return 0;
   230ec:	4620      	mov	r0, r4
}
   230ee:	bd10      	pop	{r4, pc}
		return -EBUSY;
   230f0:	f06f 000f 	mvn.w	r0, #15
   230f4:	e7fb      	b.n	230ee <bt_mesh_msg_ack_ctx_prepare+0xe>

000230f6 <bt_mesh_msg_ack_ctx_wait>:

int bt_mesh_msg_ack_ctx_wait(struct bt_mesh_msg_ack_ctx *ack, k_timeout_t timeout)
{
   230f6:	b510      	push	{r4, lr}
   230f8:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
   230fa:	f7fb fbc5 	bl	1e888 <z_impl_k_sem_take>
	ack->op = 0U;
   230fe:	2300      	movs	r3, #0

	err = k_sem_take(&ack->sem, timeout);
	bt_mesh_msg_ack_ctx_clear(ack);

	if (err == -EAGAIN) {
		return -ETIMEDOUT;
   23100:	f110 0f0b 	cmn.w	r0, #11
	ack->op = 0U;
   23104:	61a3      	str	r3, [r4, #24]
	ack->user_data = NULL;
   23106:	6223      	str	r3, [r4, #32]
	ack->dst = BT_MESH_ADDR_UNASSIGNED;
   23108:	83a3      	strh	r3, [r4, #28]
	}

	return err;
}
   2310a:	bf08      	it	eq
   2310c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
   23110:	bd10      	pop	{r4, pc}

00023112 <bt_mesh_msg_ack_ctx_match>:

bool bt_mesh_msg_ack_ctx_match(const struct bt_mesh_msg_ack_ctx *ack,
			       uint32_t op, uint16_t addr, void **user_data)
{
   23112:	b510      	push	{r4, lr}
	if (ack->op != op || (BT_MESH_ADDR_IS_UNICAST(ack->dst) && ack->dst != addr)) {
   23114:	6984      	ldr	r4, [r0, #24]
   23116:	428c      	cmp	r4, r1
   23118:	d10b      	bne.n	23132 <bt_mesh_msg_ack_ctx_match+0x20>
   2311a:	f9b0 401c 	ldrsh.w	r4, [r0, #28]
   2311e:	8b81      	ldrh	r1, [r0, #28]
   23120:	2c00      	cmp	r4, #0
   23122:	dd01      	ble.n	23128 <bt_mesh_msg_ack_ctx_match+0x16>
   23124:	4291      	cmp	r1, r2
   23126:	d104      	bne.n	23132 <bt_mesh_msg_ack_ctx_match+0x20>
		return false;
	}

	if (user_data != NULL) {
   23128:	b10b      	cbz	r3, 2312e <bt_mesh_msg_ack_ctx_match+0x1c>
		*user_data = ack->user_data;
   2312a:	6a02      	ldr	r2, [r0, #32]
   2312c:	601a      	str	r2, [r3, #0]
	}

	return true;
   2312e:	2001      	movs	r0, #1
   23130:	e000      	b.n	23134 <bt_mesh_msg_ack_ctx_match+0x22>
		return false;
   23132:	2000      	movs	r0, #0
}
   23134:	bd10      	pop	{r4, pc}

00023136 <cfg_srv_init>:
{
   23136:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   23138:	7900      	ldrb	r0, [r0, #4]
   2313a:	b918      	cbnz	r0, 23144 <cfg_srv_init+0xe>
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   2313c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   23140:	819a      	strh	r2, [r3, #12]
	return 0;
   23142:	4770      	bx	lr
		return -EINVAL;
   23144:	f06f 0015 	mvn.w	r0, #21
}
   23148:	4770      	bx	lr

0002314a <key_idx_pack>:

#include <zephyr/sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   2314a:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2314c:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   23150:	4605      	mov	r5, r0
   23152:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   23154:	b289      	uxth	r1, r1
   23156:	f001 fe7a 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2315a:	f3c4 1107 	ubfx	r1, r4, #4, #8
   2315e:	4628      	mov	r0, r5
}
   23160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   23164:	f001 be6b 	b.w	24e3e <net_buf_simple_add_u8>

00023168 <send_krp_status>:
{
   23168:	b5f0      	push	{r4, r5, r6, r7, lr}
   2316a:	b089      	sub	sp, #36	; 0x24
   2316c:	4605      	mov	r5, r0
   2316e:	460e      	mov	r6, r1
   23170:	4617      	mov	r7, r2
   23172:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   23174:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   23178:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   2317a:	a805      	add	r0, sp, #20
   2317c:	f248 0117 	movw	r1, #32791	; 0x8017
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   23180:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23184:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   23186:	f7ff ff7d 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2318a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   2318e:	a805      	add	r0, sp, #20
   23190:	f001 fe55 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   23194:	4639      	mov	r1, r7
   23196:	a805      	add	r0, sp, #20
   23198:	f001 fe59 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   2319c:	4621      	mov	r1, r4
   2319e:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   231a0:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, phase);
   231a2:	f001 fe4c 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   231a6:	9400      	str	r4, [sp, #0]
   231a8:	4623      	mov	r3, r4
   231aa:	aa05      	add	r2, sp, #20
   231ac:	4631      	mov	r1, r6
   231ae:	4628      	mov	r0, r5
   231b0:	f7ff ff0f 	bl	22fd2 <bt_mesh_model_send>
}
   231b4:	4620      	mov	r0, r4
   231b6:	b009      	add	sp, #36	; 0x24
   231b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000231ba <send_node_id_status>:
{
   231ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   231bc:	b089      	sub	sp, #36	; 0x24
   231be:	4605      	mov	r5, r0
   231c0:	460e      	mov	r6, r1
   231c2:	4617      	mov	r7, r2
   231c4:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   231c6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   231ca:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   231cc:	a805      	add	r0, sp, #20
   231ce:	f248 0148 	movw	r1, #32840	; 0x8048
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   231d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   231d6:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   231d8:	f7ff ff54 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   231dc:	4639      	mov	r1, r7
   231de:	a805      	add	r0, sp, #20
   231e0:	f001 fe2d 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   231e4:	4621      	mov	r1, r4
   231e6:	a805      	add	r0, sp, #20
   231e8:	f001 fe31 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   231ec:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, node_id);
   231ee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   231f2:	a805      	add	r0, sp, #20
   231f4:	f001 fe23 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   231f8:	9400      	str	r4, [sp, #0]
   231fa:	4623      	mov	r3, r4
   231fc:	aa05      	add	r2, sp, #20
   231fe:	4631      	mov	r1, r6
   23200:	4628      	mov	r0, r5
   23202:	f7ff fee6 	bl	22fd2 <bt_mesh_model_send>
}
   23206:	4620      	mov	r0, r4
   23208:	b009      	add	sp, #36	; 0x24
   2320a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002320c <send_net_key_status>:
{
   2320c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2320e:	b089      	sub	sp, #36	; 0x24
   23210:	4605      	mov	r5, r0
   23212:	460e      	mov	r6, r1
   23214:	4614      	mov	r4, r2
   23216:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   23218:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   2321c:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   2321e:	a805      	add	r0, sp, #20
   23220:	f248 0144 	movw	r1, #32836	; 0x8044
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   23224:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23228:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   2322a:	f7ff ff2b 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2322e:	4639      	mov	r1, r7
   23230:	a805      	add	r0, sp, #20
   23232:	f001 fe04 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   23236:	4621      	mov	r1, r4
   23238:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2323a:	2400      	movs	r4, #0
	net_buf_simple_add_le16(&msg, idx);
   2323c:	f001 fe07 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23240:	9400      	str	r4, [sp, #0]
   23242:	4623      	mov	r3, r4
   23244:	aa05      	add	r2, sp, #20
   23246:	4631      	mov	r1, r6
   23248:	4628      	mov	r0, r5
   2324a:	f7ff fec2 	bl	22fd2 <bt_mesh_model_send>
}
   2324e:	4620      	mov	r0, r4
   23250:	b009      	add	sp, #36	; 0x24
   23252:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023254 <send_app_key_status>:
{
   23254:	b5f0      	push	{r4, r5, r6, r7, lr}
   23256:	b089      	sub	sp, #36	; 0x24
   23258:	4605      	mov	r5, r0
   2325a:	460e      	mov	r6, r1
   2325c:	4617      	mov	r7, r2
   2325e:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   23260:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   23264:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   23266:	a805      	add	r0, sp, #20
   23268:	f248 0103 	movw	r1, #32771	; 0x8003
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   2326c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23270:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   23272:	f7ff ff07 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   23276:	4639      	mov	r1, r7
   23278:	a805      	add	r0, sp, #20
   2327a:	f001 fde0 	bl	24e3e <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   2327e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   23282:	4622      	mov	r2, r4
   23284:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23286:	2400      	movs	r4, #0
	key_idx_pack(&msg, net_idx, app_idx);
   23288:	f7ff ff5f 	bl	2314a <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2328c:	9400      	str	r4, [sp, #0]
   2328e:	4623      	mov	r3, r4
   23290:	aa05      	add	r2, sp, #20
   23292:	4631      	mov	r1, r6
   23294:	4628      	mov	r0, r5
   23296:	f7ff fe9c 	bl	22fd2 <bt_mesh_model_send>
}
   2329a:	4620      	mov	r0, r4
   2329c:	b009      	add	sp, #36	; 0x24
   2329e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000232a0 <krp_set>:
{
   232a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   232a2:	4606      	mov	r6, r0
   232a4:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   232a6:	4610      	mov	r0, r2
{
   232a8:	4615      	mov	r5, r2
   232aa:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   232ac:	f001 fe38 	bl	24f20 <net_buf_simple_pull_le16>
   232b0:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   232b2:	4628      	mov	r0, r5
   232b4:	f001 fe2c 	bl	24f10 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   232b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   232bc:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   232c0:	d303      	bcc.n	232ca <krp_set+0x2a>
		return -EINVAL;
   232c2:	f06f 0015 	mvn.w	r0, #21
}
   232c6:	b005      	add	sp, #20
   232c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   232ca:	f10d 010f 	add.w	r1, sp, #15
   232ce:	4620      	mov	r0, r4
   232d0:	f7f2 fea2 	bl	16018 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   232d4:	280b      	cmp	r0, #11
   232d6:	d0f4      	beq.n	232c2 <krp_set+0x22>
	return send_krp_status(model, ctx, idx, phase, status);
   232d8:	9000      	str	r0, [sp, #0]
   232da:	f89d 300f 	ldrb.w	r3, [sp, #15]
   232de:	4622      	mov	r2, r4
   232e0:	4639      	mov	r1, r7
   232e2:	4630      	mov	r0, r6
   232e4:	f7ff ff40 	bl	23168 <send_krp_status>
   232e8:	e7ed      	b.n	232c6 <krp_set+0x26>

000232ea <krp_get>:
{
   232ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   232ec:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   232ee:	4610      	mov	r0, r2
{
   232f0:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   232f2:	f001 fe15 	bl	24f20 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   232f6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   232fa:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   232fc:	d20d      	bcs.n	2331a <krp_get+0x30>
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   232fe:	f10d 010f 	add.w	r1, sp, #15
   23302:	f7ff f970 	bl	225e6 <bt_mesh_subnet_kr_phase_get>
	return send_krp_status(model, ctx, idx, kr_phase, status);
   23306:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2330a:	9000      	str	r0, [sp, #0]
   2330c:	4622      	mov	r2, r4
   2330e:	4631      	mov	r1, r6
   23310:	4628      	mov	r0, r5
   23312:	f7ff ff29 	bl	23168 <send_krp_status>
}
   23316:	b004      	add	sp, #16
   23318:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2331a:	f06f 0015 	mvn.w	r0, #21
   2331e:	e7fa      	b.n	23316 <krp_get+0x2c>

00023320 <lpn_timeout_get>:
{
   23320:	b570      	push	{r4, r5, r6, lr}
   23322:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   23324:	ab02      	add	r3, sp, #8
{
   23326:	4605      	mov	r5, r0
   23328:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   2332a:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   2332c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   23330:	e9cd 1306 	strd	r1, r3, [sp, #24]
   23334:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   23336:	f001 fdf3 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   2333a:	b203      	sxth	r3, r0
   2333c:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   2333e:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   23340:	dd17      	ble.n	23372 <lpn_timeout_get+0x52>
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   23342:	f248 012e 	movw	r1, #32814	; 0x802e
   23346:	a805      	add	r0, sp, #20
   23348:	f7ff fe9c 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   2334c:	4621      	mov	r1, r4
   2334e:	a805      	add	r0, sp, #20
   23350:	f001 fd7d 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23354:	2400      	movs	r4, #0
	net_buf_simple_add_le24(&msg, timeout_steps);
   23356:	2100      	movs	r1, #0
   23358:	a805      	add	r0, sp, #20
   2335a:	f001 fd8c 	bl	24e76 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2335e:	9400      	str	r4, [sp, #0]
   23360:	4623      	mov	r3, r4
   23362:	aa05      	add	r2, sp, #20
   23364:	4631      	mov	r1, r6
   23366:	4628      	mov	r0, r5
   23368:	f7ff fe33 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   2336c:	4620      	mov	r0, r4
}
   2336e:	b008      	add	sp, #32
   23370:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   23372:	f06f 0015 	mvn.w	r0, #21
   23376:	e7fa      	b.n	2336e <lpn_timeout_get+0x4e>

00023378 <send_friend_status>:
{
   23378:	b570      	push	{r4, r5, r6, lr}
   2337a:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2337c:	ab03      	add	r3, sp, #12
   2337e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   23382:	4605      	mov	r5, r0
   23384:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   23386:	a805      	add	r0, sp, #20
   23388:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2338c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23390:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   23392:	f7ff fe77 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   23396:	f7fe ff6e 	bl	22276 <bt_mesh_friend_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2339a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   2339c:	4601      	mov	r1, r0
   2339e:	a805      	add	r0, sp, #20
   233a0:	f001 fd4d 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   233a4:	9400      	str	r4, [sp, #0]
   233a6:	4623      	mov	r3, r4
   233a8:	aa05      	add	r2, sp, #20
   233aa:	4631      	mov	r1, r6
   233ac:	4628      	mov	r0, r5
   233ae:	f7ff fe10 	bl	22fd2 <bt_mesh_model_send>
}
   233b2:	4620      	mov	r0, r4
   233b4:	b008      	add	sp, #32
   233b6:	bd70      	pop	{r4, r5, r6, pc}

000233b8 <friend_set>:
{
   233b8:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   233ba:	6813      	ldr	r3, [r2, #0]
{
   233bc:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   233be:	7818      	ldrb	r0, [r3, #0]
   233c0:	2801      	cmp	r0, #1
{
   233c2:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   233c4:	d807      	bhi.n	233d6 <friend_set+0x1e>
	(void)bt_mesh_friend_set(buf->data[0]);
   233c6:	f7fe ff53 	bl	22270 <bt_mesh_friend_set>
	return send_friend_status(model, ctx);
   233ca:	4629      	mov	r1, r5
   233cc:	4620      	mov	r0, r4
}
   233ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_friend_status(model, ctx);
   233d2:	f7ff bfd1 	b.w	23378 <send_friend_status>
}
   233d6:	f06f 0015 	mvn.w	r0, #21
   233da:	bd38      	pop	{r3, r4, r5, pc}

000233dc <friend_get>:
	return send_friend_status(model, ctx);
   233dc:	f7ff bfcc 	b.w	23378 <send_friend_status>

000233e0 <node_reset_pending_handler>:
	bt_mesh_reset();
   233e0:	f7f1 bace 	b.w	14980 <bt_mesh_reset>

000233e4 <send_mod_sub_status>:
{
   233e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   233e8:	b08b      	sub	sp, #44	; 0x2c
   233ea:	4617      	mov	r7, r2
   233ec:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   233ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   233f2:	ab06      	add	r3, sp, #24
{
   233f4:	4605      	mov	r5, r0
   233f6:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   233f8:	a803      	add	r0, sp, #12
   233fa:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   233fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23402:	9303      	str	r3, [sp, #12]
{
   23404:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   23408:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   2340c:	f7ff fe3a 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   23410:	4639      	mov	r1, r7
   23412:	a803      	add	r0, sp, #12
   23414:	f001 fd13 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   23418:	4621      	mov	r1, r4
   2341a:	a803      	add	r0, sp, #12
   2341c:	f001 fd17 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   23420:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   23424:	a803      	add	r0, sp, #12
   23426:	f001 fd12 	bl	24e4e <net_buf_simple_add_le16>
	if (vnd) {
   2342a:	f1b9 0f00 	cmp.w	r9, #0
   2342e:	d013      	beq.n	23458 <send_mod_sub_status+0x74>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   23430:	2104      	movs	r1, #4
   23432:	a803      	add	r0, sp, #12
   23434:	f001 fcf4 	bl	24e20 <net_buf_simple_add>
   23438:	2204      	movs	r2, #4
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2343a:	2400      	movs	r4, #0
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2343c:	4641      	mov	r1, r8
   2343e:	f7fe fadb 	bl	219f8 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23442:	9400      	str	r4, [sp, #0]
   23444:	4623      	mov	r3, r4
   23446:	aa03      	add	r2, sp, #12
   23448:	4631      	mov	r1, r6
   2344a:	4628      	mov	r0, r5
   2344c:	f7ff fdc1 	bl	22fd2 <bt_mesh_model_send>
}
   23450:	4620      	mov	r0, r4
   23452:	b00b      	add	sp, #44	; 0x2c
   23454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   23458:	2102      	movs	r1, #2
   2345a:	a803      	add	r0, sp, #12
   2345c:	f001 fce0 	bl	24e20 <net_buf_simple_add>
   23460:	2202      	movs	r2, #2
   23462:	e7ea      	b.n	2343a <send_mod_sub_status+0x56>

00023464 <node_identity_set>:
{
   23464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23466:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   23468:	4610      	mov	r0, r2
{
   2346a:	460e      	mov	r6, r1
   2346c:	4617      	mov	r7, r2
	idx = net_buf_simple_pull_le16(buf);
   2346e:	f001 fd57 	bl	24f20 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   23472:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   23476:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   23478:	d303      	bcc.n	23482 <node_identity_set+0x1e>
		return -EINVAL;
   2347a:	f06f 0015 	mvn.w	r0, #21
}
   2347e:	b003      	add	sp, #12
   23480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	node_id = net_buf_simple_pull_u8(buf);
   23482:	4638      	mov	r0, r7
   23484:	f001 fd44 	bl	24f10 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   23488:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   2348a:	4607      	mov	r7, r0
	if (node_id != 0x00 && node_id != 0x01) {
   2348c:	d8f5      	bhi.n	2347a <node_identity_set+0x16>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   2348e:	4601      	mov	r1, r0
   23490:	4620      	mov	r0, r4
   23492:	f7ff f8b4 	bl	225fe <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   23496:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   23498:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   2349a:	d103      	bne.n	234a4 <node_identity_set+0x40>
		return send_node_id_status(model, ctx, status, idx,
   2349c:	2300      	movs	r3, #0
   2349e:	9300      	str	r3, [sp, #0]
	return send_node_id_status(model, ctx, status, idx, node_id);
   234a0:	4623      	mov	r3, r4
   234a2:	e005      	b.n	234b0 <node_identity_set+0x4c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   234a4:	280a      	cmp	r0, #10
   234a6:	d108      	bne.n	234ba <node_identity_set+0x56>
		return send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   234a8:	2302      	movs	r3, #2
   234aa:	9300      	str	r3, [sp, #0]
   234ac:	2200      	movs	r2, #0
   234ae:	4623      	mov	r3, r4
	return send_node_id_status(model, ctx, status, idx, node_id);
   234b0:	4631      	mov	r1, r6
   234b2:	4628      	mov	r0, r5
   234b4:	f7ff fe81 	bl	231ba <send_node_id_status>
   234b8:	e7e1      	b.n	2347e <node_identity_set+0x1a>
   234ba:	9700      	str	r7, [sp, #0]
   234bc:	e7f0      	b.n	234a0 <node_identity_set+0x3c>

000234be <node_identity_get>:
{
   234be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   234c0:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   234c2:	4610      	mov	r0, r2
{
   234c4:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   234c6:	f001 fd2b 	bl	24f20 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   234ca:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   234ce:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   234d0:	d20e      	bcs.n	234f0 <node_identity_get+0x32>
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   234d2:	f10d 010f 	add.w	r1, sp, #15
   234d6:	f7ff f89e 	bl	22616 <bt_mesh_subnet_node_id_get>
	return send_node_id_status(model, ctx, status, idx, node_id);
   234da:	f89d 300f 	ldrb.w	r3, [sp, #15]
   234de:	9300      	str	r3, [sp, #0]
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   234e0:	4602      	mov	r2, r0
	return send_node_id_status(model, ctx, status, idx, node_id);
   234e2:	4623      	mov	r3, r4
   234e4:	4631      	mov	r1, r6
   234e6:	4628      	mov	r0, r5
   234e8:	f7ff fe67 	bl	231ba <send_node_id_status>
}
   234ec:	b004      	add	sp, #16
   234ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   234f0:	f06f 0015 	mvn.w	r0, #21
   234f4:	e7fa      	b.n	234ec <node_identity_get+0x2e>

000234f6 <net_key_get>:
{
   234f6:	b570      	push	{r4, r5, r6, lr}
   234f8:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   234fa:	ab03      	add	r3, sp, #12
   234fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   23500:	4605      	mov	r5, r0
   23502:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   23504:	a805      	add	r0, sp, #20
   23506:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   2350a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2350e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   23510:	f7ff fdb8 	bl	23084 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   23514:	2200      	movs	r2, #0
   23516:	2101      	movs	r1, #1
   23518:	a802      	add	r0, sp, #8
   2351a:	f7f2 fcc3 	bl	15ea4 <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   2351e:	b120      	cbz	r0, 2352a <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   23520:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   23524:	a805      	add	r0, sp, #20
   23526:	f001 fc92 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2352a:	2400      	movs	r4, #0
   2352c:	9400      	str	r4, [sp, #0]
   2352e:	4623      	mov	r3, r4
   23530:	aa05      	add	r2, sp, #20
   23532:	4631      	mov	r1, r6
   23534:	4628      	mov	r0, r5
   23536:	f7ff fd4c 	bl	22fd2 <bt_mesh_model_send>
}
   2353a:	4620      	mov	r0, r4
   2353c:	b008      	add	sp, #32
   2353e:	bd70      	pop	{r4, r5, r6, pc}

00023540 <net_key_del>:
{
   23540:	b570      	push	{r4, r5, r6, lr}
   23542:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   23544:	4610      	mov	r0, r2
{
   23546:	460c      	mov	r4, r1
	del_idx = net_buf_simple_pull_le16(buf);
   23548:	f001 fcea 	bl	24f20 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   2354c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   23550:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
   23552:	d20e      	bcs.n	23572 <net_key_del+0x32>
	if (ctx->net_idx == del_idx) {
   23554:	8822      	ldrh	r2, [r4, #0]
   23556:	4282      	cmp	r2, r0
   23558:	d106      	bne.n	23568 <net_key_del+0x28>
		return send_net_key_status(model, ctx, del_idx,
   2355a:	230c      	movs	r3, #12
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   2355c:	4621      	mov	r1, r4
   2355e:	4630      	mov	r0, r6
}
   23560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   23564:	f7ff be52 	b.w	2320c <send_net_key_status>
	(void)bt_mesh_subnet_del(del_idx);
   23568:	f7ff f833 	bl	225d2 <bt_mesh_subnet_del>
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   2356c:	2300      	movs	r3, #0
   2356e:	462a      	mov	r2, r5
   23570:	e7f4      	b.n	2355c <net_key_del+0x1c>
}
   23572:	f06f 0015 	mvn.w	r0, #21
   23576:	bd70      	pop	{r4, r5, r6, pc}

00023578 <net_key_update>:
{
   23578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2357c:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   2357e:	4610      	mov	r0, r2
{
   23580:	460f      	mov	r7, r1
   23582:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   23584:	f001 fccc 	bl	24f20 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   23588:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2358c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2358e:	d20a      	bcs.n	235a6 <net_key_update+0x2e>
	status = bt_mesh_subnet_update(idx, buf->data);
   23590:	6829      	ldr	r1, [r5, #0]
   23592:	f7fe ffec 	bl	2256e <bt_mesh_subnet_update>
	return send_net_key_status(model, ctx, idx, status);
   23596:	4622      	mov	r2, r4
	status = bt_mesh_subnet_update(idx, buf->data);
   23598:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   2359a:	4639      	mov	r1, r7
   2359c:	4630      	mov	r0, r6
}
   2359e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   235a2:	f7ff be33 	b.w	2320c <send_net_key_status>
}
   235a6:	f06f 0015 	mvn.w	r0, #21
   235aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000235ae <net_key_add>:
{
   235ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235b2:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   235b4:	4610      	mov	r0, r2
{
   235b6:	460f      	mov	r7, r1
   235b8:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   235ba:	f001 fcb1 	bl	24f20 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   235be:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   235c2:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   235c4:	d20a      	bcs.n	235dc <net_key_add+0x2e>
	status = bt_mesh_subnet_add(idx, buf->data);
   235c6:	6829      	ldr	r1, [r5, #0]
   235c8:	f7f2 fcf8 	bl	15fbc <bt_mesh_subnet_add>
	return send_net_key_status(model, ctx, idx, status);
   235cc:	4622      	mov	r2, r4
	status = bt_mesh_subnet_add(idx, buf->data);
   235ce:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   235d0:	4639      	mov	r1, r7
   235d2:	4630      	mov	r0, r6
}
   235d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   235d8:	f7ff be18 	b.w	2320c <send_net_key_status>
}
   235dc:	f06f 0015 	mvn.w	r0, #21
   235e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000235e4 <mod_sub_list_clear>:
{
   235e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   235e6:	2400      	movs	r4, #0
   235e8:	f100 060e 	add.w	r6, r0, #14
   235ec:	f100 0512 	add.w	r5, r0, #18
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   235f0:	4627      	mov	r7, r4
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   235f2:	f836 0b02 	ldrh.w	r0, [r6], #2
   235f6:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   235fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   235fe:	d307      	bcc.n	23610 <mod_sub_list_clear+0x2c>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   23600:	b110      	cbz	r0, 23608 <mod_sub_list_clear+0x24>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   23602:	f826 7c02 	strh.w	r7, [r6, #-2]
				clear_count++;
   23606:	3401      	adds	r4, #1
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   23608:	42ae      	cmp	r6, r5
   2360a:	d1f2      	bne.n	235f2 <mod_sub_list_clear+0xe>
}
   2360c:	4620      	mov	r0, r4
   2360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   23610:	f7ff fa22 	bl	22a58 <bt_mesh_va_label_get>
		clear_count++;
   23614:	3401      	adds	r4, #1
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   23616:	f826 7c02 	strh.w	r7, [r6, #-2]
		if (label_uuid) {
   2361a:	2800      	cmp	r0, #0
   2361c:	d0f4      	beq.n	23608 <mod_sub_list_clear+0x24>
			bt_mesh_va_del(label_uuid, NULL);
   2361e:	2100      	movs	r1, #0
   23620:	f7ff fa18 	bl	22a54 <bt_mesh_va_del>
   23624:	e7f0      	b.n	23608 <mod_sub_list_clear+0x24>

00023626 <mod_sub_clear_visitor>:
{
   23626:	b508      	push	{r3, lr}
	mod_sub_list_clear(mod);
   23628:	f7ff ffdc 	bl	235e4 <mod_sub_list_clear>
}
   2362c:	2001      	movs	r0, #1
   2362e:	bd08      	pop	{r3, pc}

00023630 <mod_reset>:
{
   23630:	b510      	push	{r4, lr}
   23632:	4604      	mov	r4, r0
	clear_count = mod_sub_list_clear(mod);
   23634:	f7ff ffd6 	bl	235e4 <mod_sub_list_clear>
		if (clear_count) {
   23638:	b110      	cbz	r0, 23640 <mod_reset+0x10>
			bt_mesh_model_sub_store(mod);
   2363a:	4620      	mov	r0, r4
   2363c:	f7ff fd14 	bl	23068 <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   23640:	69a3      	ldr	r3, [r4, #24]
   23642:	b12b      	cbz	r3, 23650 <mod_reset+0x20>
   23644:	68db      	ldr	r3, [r3, #12]
   23646:	b11b      	cbz	r3, 23650 <mod_reset+0x20>
		mod->cb->reset(mod);
   23648:	4620      	mov	r0, r4
}
   2364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2364e:	4718      	bx	r3
}
   23650:	bd10      	pop	{r4, pc}

00023652 <send_mod_pub_status>:
{
   23652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23656:	b08b      	sub	sp, #44	; 0x2c
   23658:	4692      	mov	sl, r2
   2365a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   2365e:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   23662:	9c15      	ldr	r4, [sp, #84]	; 0x54
   23664:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   23666:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
{
   2366a:	4605      	mov	r5, r0
   2366c:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   2366e:	a802      	add	r0, sp, #8
   23670:	f248 0119 	movw	r1, #32793	; 0x8019
{
   23674:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   23676:	ab05      	add	r3, sp, #20
   23678:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2367c:	9302      	str	r3, [sp, #8]
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   2367e:	f7ff fd01 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   23682:	4659      	mov	r1, fp
   23684:	a802      	add	r0, sp, #8
   23686:	f001 fbda 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   2368a:	4651      	mov	r1, sl
   2368c:	a802      	add	r0, sp, #8
   2368e:	f001 fbde 	bl	24e4e <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   23692:	f1bb 0f00 	cmp.w	fp, #0
   23696:	d01e      	beq.n	236d6 <send_mod_pub_status+0x84>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   23698:	2107      	movs	r1, #7
   2369a:	a802      	add	r0, sp, #8
   2369c:	f001 fbc0 	bl	24e20 <net_buf_simple_add>
   236a0:	2207      	movs	r2, #7
   236a2:	2100      	movs	r1, #0
   236a4:	f7fe f9b3 	bl	21a0e <memset>
	if (vnd) {
   236a8:	f1b8 0f00 	cmp.w	r8, #0
   236ac:	d035      	beq.n	2371a <send_mod_pub_status+0xc8>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   236ae:	2104      	movs	r1, #4
   236b0:	a802      	add	r0, sp, #8
   236b2:	f001 fbb5 	bl	24e20 <net_buf_simple_add>
   236b6:	2204      	movs	r2, #4
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   236b8:	2400      	movs	r4, #0
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   236ba:	4639      	mov	r1, r7
   236bc:	f7fe f99c 	bl	219f8 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   236c0:	9400      	str	r4, [sp, #0]
   236c2:	4623      	mov	r3, r4
   236c4:	aa02      	add	r2, sp, #8
   236c6:	4631      	mov	r1, r6
   236c8:	4628      	mov	r0, r5
   236ca:	f7ff fc82 	bl	22fd2 <bt_mesh_model_send>
}
   236ce:	4620      	mov	r0, r4
   236d0:	b00b      	add	sp, #44	; 0x2c
   236d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   236d6:	4649      	mov	r1, r9
   236d8:	a802      	add	r0, sp, #8
   236da:	f001 fbb8 	bl	24e4e <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   236de:	68a3      	ldr	r3, [r4, #8]
   236e0:	79d9      	ldrb	r1, [r3, #7]
   236e2:	88db      	ldrh	r3, [r3, #6]
   236e4:	f3c1 1100 	ubfx	r1, r1, #4, #1
   236e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
   236ec:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
		net_buf_simple_add_le16(&msg, idx_cred);
   236f0:	a802      	add	r0, sp, #8
   236f2:	f3c1 010c 	ubfx	r1, r1, #0, #13
   236f6:	f001 fbaa 	bl	24e4e <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   236fa:	68a3      	ldr	r3, [r4, #8]
   236fc:	a802      	add	r0, sp, #8
   236fe:	7a19      	ldrb	r1, [r3, #8]
   23700:	f001 fb9d 	bl	24e3e <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   23704:	68a3      	ldr	r3, [r4, #8]
   23706:	a802      	add	r0, sp, #8
   23708:	7a99      	ldrb	r1, [r3, #10]
   2370a:	f001 fb98 	bl	24e3e <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   2370e:	68a3      	ldr	r3, [r4, #8]
   23710:	a802      	add	r0, sp, #8
   23712:	7a59      	ldrb	r1, [r3, #9]
   23714:	f001 fb93 	bl	24e3e <net_buf_simple_add_u8>
   23718:	e7c6      	b.n	236a8 <send_mod_pub_status+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2371a:	2102      	movs	r1, #2
   2371c:	a802      	add	r0, sp, #8
   2371e:	f001 fb7f 	bl	24e20 <net_buf_simple_add>
   23722:	2202      	movs	r2, #2
   23724:	e7c8      	b.n	236b8 <send_mod_pub_status+0x66>

00023726 <relay_set>:
{
   23726:	b570      	push	{r4, r5, r6, lr}
   23728:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2372a:	ab03      	add	r3, sp, #12
{
   2372c:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2372e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   23732:	e9cd 1306 	strd	r1, r3, [sp, #24]
   23736:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   23738:	6813      	ldr	r3, [r2, #0]
{
   2373a:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2373c:	7818      	ldrb	r0, [r3, #0]
   2373e:	2801      	cmp	r0, #1
   23740:	d81e      	bhi.n	23780 <relay_set+0x5a>
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   23742:	7859      	ldrb	r1, [r3, #1]
   23744:	f7f1 faa2 	bl	14c8c <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   23748:	f248 0128 	movw	r1, #32808	; 0x8028
   2374c:	a805      	add	r0, sp, #20
   2374e:	f7ff fc99 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   23752:	f7f1 fadf 	bl	14d14 <bt_mesh_relay_get>
   23756:	4601      	mov	r1, r0
   23758:	a805      	add	r0, sp, #20
   2375a:	f001 fb70 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   2375e:	f7f1 fae3 	bl	14d28 <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23762:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   23764:	4601      	mov	r1, r0
   23766:	a805      	add	r0, sp, #20
   23768:	f001 fb69 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2376c:	9400      	str	r4, [sp, #0]
   2376e:	4623      	mov	r3, r4
   23770:	aa05      	add	r2, sp, #20
   23772:	4631      	mov	r1, r6
   23774:	4628      	mov	r0, r5
   23776:	f7ff fc2c 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   2377a:	4620      	mov	r0, r4
}
   2377c:	b008      	add	sp, #32
   2377e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   23780:	f06f 0015 	mvn.w	r0, #21
   23784:	e7fa      	b.n	2377c <relay_set+0x56>

00023786 <relay_get>:
{
   23786:	b570      	push	{r4, r5, r6, lr}
   23788:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2378a:	ab03      	add	r3, sp, #12
   2378c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   23790:	4605      	mov	r5, r0
   23792:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   23794:	a805      	add	r0, sp, #20
   23796:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2379a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2379e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   237a0:	f7ff fc70 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   237a4:	f7f1 fab6 	bl	14d14 <bt_mesh_relay_get>
   237a8:	4601      	mov	r1, r0
   237aa:	a805      	add	r0, sp, #20
   237ac:	f001 fb47 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   237b0:	f7f1 faba 	bl	14d28 <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   237b4:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   237b6:	4601      	mov	r1, r0
   237b8:	a805      	add	r0, sp, #20
   237ba:	f001 fb40 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   237be:	9400      	str	r4, [sp, #0]
   237c0:	4623      	mov	r3, r4
   237c2:	aa05      	add	r2, sp, #20
   237c4:	4631      	mov	r1, r6
   237c6:	4628      	mov	r0, r5
   237c8:	f7ff fc03 	bl	22fd2 <bt_mesh_model_send>
}
   237cc:	4620      	mov	r0, r4
   237ce:	b008      	add	sp, #32
   237d0:	bd70      	pop	{r4, r5, r6, pc}

000237d2 <net_transmit_set>:
{
   237d2:	b570      	push	{r4, r5, r6, lr}
   237d4:	b088      	sub	sp, #32
   237d6:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   237d8:	ab03      	add	r3, sp, #12
   237da:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   237de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   237e2:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   237e4:	6823      	ldr	r3, [r4, #0]
{
   237e6:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   237e8:	7818      	ldrb	r0, [r3, #0]
{
   237ea:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   237ec:	f7f1 fa32 	bl	14c54 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   237f0:	a805      	add	r0, sp, #20
   237f2:	f248 0125 	movw	r1, #32805	; 0x8025
   237f6:	f7ff fc45 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   237fa:	6823      	ldr	r3, [r4, #0]
   237fc:	a805      	add	r0, sp, #20
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   237fe:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   23800:	7819      	ldrb	r1, [r3, #0]
   23802:	f001 fb1c 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23806:	9400      	str	r4, [sp, #0]
   23808:	4623      	mov	r3, r4
   2380a:	aa05      	add	r2, sp, #20
   2380c:	4631      	mov	r1, r6
   2380e:	4628      	mov	r0, r5
   23810:	f7ff fbdf 	bl	22fd2 <bt_mesh_model_send>
}
   23814:	4620      	mov	r0, r4
   23816:	b008      	add	sp, #32
   23818:	bd70      	pop	{r4, r5, r6, pc}

0002381a <net_transmit_get>:
{
   2381a:	b570      	push	{r4, r5, r6, lr}
   2381c:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2381e:	ab03      	add	r3, sp, #12
   23820:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   23824:	4605      	mov	r5, r0
   23826:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   23828:	a805      	add	r0, sp, #20
   2382a:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2382e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23832:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   23834:	f7ff fc26 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   23838:	f7f1 fa22 	bl	14c80 <bt_mesh_net_transmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2383c:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   2383e:	4601      	mov	r1, r0
   23840:	a805      	add	r0, sp, #20
   23842:	f001 fafc 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23846:	9400      	str	r4, [sp, #0]
   23848:	4623      	mov	r3, r4
   2384a:	aa05      	add	r2, sp, #20
   2384c:	4631      	mov	r1, r6
   2384e:	4628      	mov	r0, r5
   23850:	f7ff fbbf 	bl	22fd2 <bt_mesh_model_send>
}
   23854:	4620      	mov	r0, r4
   23856:	b008      	add	sp, #32
   23858:	bd70      	pop	{r4, r5, r6, pc}

0002385a <send_gatt_proxy_status>:
{
   2385a:	b570      	push	{r4, r5, r6, lr}
   2385c:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2385e:	ab03      	add	r3, sp, #12
   23860:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   23864:	4605      	mov	r5, r0
   23866:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   23868:	a805      	add	r0, sp, #20
   2386a:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2386e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23872:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   23874:	f7ff fc06 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   23878:	f7fe fcf8 	bl	2226c <bt_mesh_gatt_proxy_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2387c:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   2387e:	4601      	mov	r1, r0
   23880:	a805      	add	r0, sp, #20
   23882:	f001 fadc 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23886:	9400      	str	r4, [sp, #0]
   23888:	4623      	mov	r3, r4
   2388a:	aa05      	add	r2, sp, #20
   2388c:	4631      	mov	r1, r6
   2388e:	4628      	mov	r0, r5
   23890:	f7ff fb9f 	bl	22fd2 <bt_mesh_model_send>
}
   23894:	4620      	mov	r0, r4
   23896:	b008      	add	sp, #32
   23898:	bd70      	pop	{r4, r5, r6, pc}

0002389a <gatt_proxy_set>:
{
   2389a:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2389c:	6813      	ldr	r3, [r2, #0]
{
   2389e:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   238a0:	7818      	ldrb	r0, [r3, #0]
   238a2:	2801      	cmp	r0, #1
{
   238a4:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   238a6:	d807      	bhi.n	238b8 <gatt_proxy_set+0x1e>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   238a8:	f7fe fcdd 	bl	22266 <bt_mesh_gatt_proxy_set>
	return send_gatt_proxy_status(model, ctx);
   238ac:	4629      	mov	r1, r5
   238ae:	4620      	mov	r0, r4
}
   238b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_gatt_proxy_status(model, ctx);
   238b4:	f7ff bfd1 	b.w	2385a <send_gatt_proxy_status>
}
   238b8:	f06f 0015 	mvn.w	r0, #21
   238bc:	bd38      	pop	{r3, r4, r5, pc}

000238be <gatt_proxy_get>:
	return send_gatt_proxy_status(model, ctx);
   238be:	f7ff bfcc 	b.w	2385a <send_gatt_proxy_status>

000238c2 <default_ttl_set>:
{
   238c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   238c4:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   238c6:	ab03      	add	r3, sp, #12
{
   238c8:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   238ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   238ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
   238d2:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   238d4:	682b      	ldr	r3, [r5, #0]
{
   238d6:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   238d8:	7818      	ldrb	r0, [r3, #0]
{
   238da:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   238dc:	f7f1 f996 	bl	14c0c <bt_mesh_default_ttl_set>
	if (err) {
   238e0:	4604      	mov	r4, r0
   238e2:	b980      	cbnz	r0, 23906 <default_ttl_set+0x44>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   238e4:	f248 010e 	movw	r1, #32782	; 0x800e
   238e8:	a805      	add	r0, sp, #20
   238ea:	f7ff fbcb 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   238ee:	682b      	ldr	r3, [r5, #0]
   238f0:	a805      	add	r0, sp, #20
   238f2:	7819      	ldrb	r1, [r3, #0]
   238f4:	f001 faa3 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   238f8:	9400      	str	r4, [sp, #0]
   238fa:	4623      	mov	r3, r4
   238fc:	aa05      	add	r2, sp, #20
   238fe:	4639      	mov	r1, r7
   23900:	4630      	mov	r0, r6
   23902:	f7ff fb66 	bl	22fd2 <bt_mesh_model_send>
}
   23906:	4620      	mov	r0, r4
   23908:	b009      	add	sp, #36	; 0x24
   2390a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002390c <default_ttl_get>:
{
   2390c:	b570      	push	{r4, r5, r6, lr}
   2390e:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   23910:	ab03      	add	r3, sp, #12
   23912:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   23916:	4605      	mov	r5, r0
   23918:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   2391a:	a805      	add	r0, sp, #20
   2391c:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   23920:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23924:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   23926:	f7ff fbad 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   2392a:	f7f1 f98d 	bl	14c48 <bt_mesh_default_ttl_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2392e:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   23930:	4601      	mov	r1, r0
   23932:	a805      	add	r0, sp, #20
   23934:	f001 fa83 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23938:	9400      	str	r4, [sp, #0]
   2393a:	4623      	mov	r3, r4
   2393c:	aa05      	add	r2, sp, #20
   2393e:	4631      	mov	r1, r6
   23940:	4628      	mov	r0, r5
   23942:	f7ff fb46 	bl	22fd2 <bt_mesh_model_send>
}
   23946:	4620      	mov	r0, r4
   23948:	b008      	add	sp, #32
   2394a:	bd70      	pop	{r4, r5, r6, pc}

0002394c <beacon_set>:
{
   2394c:	b570      	push	{r4, r5, r6, lr}
   2394e:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   23950:	ab03      	add	r3, sp, #12
{
   23952:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   23954:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   23958:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2395c:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2395e:	6823      	ldr	r3, [r4, #0]
{
   23960:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   23962:	7818      	ldrb	r0, [r3, #0]
   23964:	2801      	cmp	r0, #1
{
   23966:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   23968:	d818      	bhi.n	2399c <beacon_set+0x50>
	bt_mesh_beacon_set(buf->data[0]);
   2396a:	f000 0001 	and.w	r0, r0, #1
   2396e:	f7f1 f90f 	bl	14b90 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   23972:	f248 010b 	movw	r1, #32779	; 0x800b
   23976:	a805      	add	r0, sp, #20
   23978:	f7ff fb84 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   2397c:	6823      	ldr	r3, [r4, #0]
   2397e:	a805      	add	r0, sp, #20
   23980:	7819      	ldrb	r1, [r3, #0]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23982:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   23984:	f001 fa5b 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23988:	9400      	str	r4, [sp, #0]
   2398a:	4623      	mov	r3, r4
   2398c:	aa05      	add	r2, sp, #20
   2398e:	4631      	mov	r1, r6
   23990:	4628      	mov	r0, r5
   23992:	f7ff fb1e 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   23996:	4620      	mov	r0, r4
}
   23998:	b008      	add	sp, #32
   2399a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2399c:	f06f 0015 	mvn.w	r0, #21
   239a0:	e7fa      	b.n	23998 <beacon_set+0x4c>

000239a2 <beacon_get>:
{
   239a2:	b570      	push	{r4, r5, r6, lr}
   239a4:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   239a6:	ab03      	add	r3, sp, #12
   239a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   239ac:	4605      	mov	r5, r0
   239ae:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   239b0:	a805      	add	r0, sp, #20
   239b2:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   239b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   239ba:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   239bc:	f7ff fb62 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   239c0:	f7f1 f91a 	bl	14bf8 <bt_mesh_beacon_enabled>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   239c4:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   239c6:	4601      	mov	r1, r0
   239c8:	a805      	add	r0, sp, #20
   239ca:	f001 fa38 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   239ce:	9400      	str	r4, [sp, #0]
   239d0:	4623      	mov	r3, r4
   239d2:	aa05      	add	r2, sp, #20
   239d4:	4631      	mov	r1, r6
   239d6:	4628      	mov	r0, r5
   239d8:	f7ff fafb 	bl	22fd2 <bt_mesh_model_send>
}
   239dc:	4620      	mov	r0, r4
   239de:	b008      	add	sp, #32
   239e0:	bd70      	pop	{r4, r5, r6, pc}

000239e2 <app_key_get>:
{
   239e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   239e4:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   239e6:	ab04      	add	r3, sp, #16
{
   239e8:	4605      	mov	r5, r0
   239ea:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
   239ec:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   239ee:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   239f2:	e9cd 1308 	strd	r1, r3, [sp, #32]
   239f6:	9307      	str	r3, [sp, #28]
	get_idx = net_buf_simple_pull_le16(buf);
   239f8:	f001 fa92 	bl	24f20 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   239fc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   23a00:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   23a02:	d22b      	bcs.n	23a5c <app_key_get+0x7a>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   23a04:	f248 0102 	movw	r1, #32770	; 0x8002
   23a08:	a807      	add	r0, sp, #28
   23a0a:	f7ff fb3b 	bl	23084 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   23a0e:	4620      	mov	r0, r4
   23a10:	f7fe fda6 	bl	22560 <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   23a14:	2800      	cmp	r0, #0
   23a16:	bf0c      	ite	eq
   23a18:	2704      	moveq	r7, #4
   23a1a:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
   23a1c:	4639      	mov	r1, r7
   23a1e:	a807      	add	r0, sp, #28
   23a20:	f001 fa0d 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   23a24:	4621      	mov	r1, r4
   23a26:	a807      	add	r0, sp, #28
   23a28:	f001 fa11 	bl	24e4e <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   23a2c:	b95f      	cbnz	r7, 23a46 <app_key_get+0x64>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   23a2e:	463b      	mov	r3, r7
   23a30:	2201      	movs	r2, #1
   23a32:	a903      	add	r1, sp, #12
   23a34:	4620      	mov	r0, r4
   23a36:	f7f2 fd8d 	bl	16554 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   23a3a:	b120      	cbz	r0, 23a46 <app_key_get+0x64>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   23a3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   23a40:	a807      	add	r0, sp, #28
   23a42:	f001 fa04 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23a46:	2400      	movs	r4, #0
   23a48:	9400      	str	r4, [sp, #0]
   23a4a:	4623      	mov	r3, r4
   23a4c:	aa07      	add	r2, sp, #28
   23a4e:	4631      	mov	r1, r6
   23a50:	4628      	mov	r0, r5
   23a52:	f7ff fabe 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   23a56:	4620      	mov	r0, r4
}
   23a58:	b00b      	add	sp, #44	; 0x2c
   23a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   23a5c:	f06f 0015 	mvn.w	r0, #21
   23a60:	e7fa      	b.n	23a58 <app_key_get+0x76>

00023a62 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   23a62:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   23a64:	6804      	ldr	r4, [r0, #0]
   23a66:	8823      	ldrh	r3, [r4, #0]
   23a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
   23a6c:	800b      	strh	r3, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   23a6e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	net_buf_simple_pull(buf, 3);
}
   23a72:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   23a74:	091b      	lsrs	r3, r3, #4
   23a76:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   23a78:	2103      	movs	r1, #3
   23a7a:	f001 ba39 	b.w	24ef0 <net_buf_simple_pull>

00023a7e <app_key_del>:
{
   23a7e:	b530      	push	{r4, r5, lr}
   23a80:	b085      	sub	sp, #20
   23a82:	4604      	mov	r4, r0
   23a84:	460d      	mov	r5, r1
   23a86:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   23a88:	a903      	add	r1, sp, #12
   23a8a:	f10d 020e 	add.w	r2, sp, #14
   23a8e:	f7ff ffe8 	bl	23a62 <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   23a92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   23a96:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23a9a:	f7f2 fcf3 	bl	16484 <bt_mesh_app_key_del>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   23a9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23aa2:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   23aa4:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   23aa6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23aaa:	4629      	mov	r1, r5
   23aac:	4620      	mov	r0, r4
   23aae:	f7ff fbd1 	bl	23254 <send_app_key_status>
}
   23ab2:	b005      	add	sp, #20
   23ab4:	bd30      	pop	{r4, r5, pc}

00023ab6 <app_key_update>:
{
   23ab6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23ab8:	4614      	mov	r4, r2
   23aba:	4605      	mov	r5, r0
   23abc:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   23abe:	f10d 020e 	add.w	r2, sp, #14
   23ac2:	a903      	add	r1, sp, #12
   23ac4:	4620      	mov	r0, r4
   23ac6:	f7ff ffcc 	bl	23a62 <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   23aca:	6822      	ldr	r2, [r4, #0]
   23acc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   23ad0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23ad4:	f7f2 fc90 	bl	163f8 <bt_mesh_app_key_update>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   23ad8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23adc:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   23ade:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   23ae0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23ae4:	4631      	mov	r1, r6
   23ae6:	4628      	mov	r0, r5
   23ae8:	f7ff fbb4 	bl	23254 <send_app_key_status>
}
   23aec:	b004      	add	sp, #16
   23aee:	bd70      	pop	{r4, r5, r6, pc}

00023af0 <app_key_add>:
{
   23af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23af2:	4614      	mov	r4, r2
   23af4:	4605      	mov	r5, r0
   23af6:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   23af8:	f10d 020e 	add.w	r2, sp, #14
   23afc:	a903      	add	r1, sp, #12
   23afe:	4620      	mov	r0, r4
   23b00:	f7ff ffaf 	bl	23a62 <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   23b04:	6822      	ldr	r2, [r4, #0]
   23b06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   23b0a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23b0e:	f7f2 fc33 	bl	16378 <bt_mesh_app_key_add>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   23b12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23b16:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   23b18:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   23b1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23b1e:	4631      	mov	r1, r6
   23b20:	4628      	mov	r0, r5
   23b22:	f7ff fb97 	bl	23254 <send_app_key_status>
}
   23b26:	b004      	add	sp, #16
   23b28:	bd70      	pop	{r4, r5, r6, pc}

00023b2a <bt_mesh_hb_pwr2>:
	if (!val) {
   23b2a:	b158      	cbz	r0, 23b44 <bt_mesh_hb_pwr2+0x1a>
	} else if (val == 0xff || val == 0x11) {
   23b2c:	28ff      	cmp	r0, #255	; 0xff
   23b2e:	d007      	beq.n	23b40 <bt_mesh_hb_pwr2+0x16>
   23b30:	2811      	cmp	r0, #17
   23b32:	d005      	beq.n	23b40 <bt_mesh_hb_pwr2+0x16>
		return (1 << (val - 1));
   23b34:	2301      	movs	r3, #1
   23b36:	3801      	subs	r0, #1
   23b38:	fa03 f000 	lsl.w	r0, r3, r0
   23b3c:	b280      	uxth	r0, r0
   23b3e:	4770      	bx	lr
		return 0xffff;
   23b40:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   23b44:	4770      	bx	lr

00023b46 <get_model>:
{
   23b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   23b48:	888b      	ldrh	r3, [r1, #4]
   23b4a:	2b03      	cmp	r3, #3
{
   23b4c:	4605      	mov	r5, r0
   23b4e:	460c      	mov	r4, r1
   23b50:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   23b52:	4608      	mov	r0, r1
	if (buf->len < 4) {
   23b54:	d809      	bhi.n	23b6a <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   23b56:	f001 f9e3 	bl	24f20 <net_buf_simple_pull_le16>
		*vnd = false;
   23b5a:	2300      	movs	r3, #0
		id = net_buf_simple_pull_le16(buf);
   23b5c:	4601      	mov	r1, r0
		*vnd = false;
   23b5e:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   23b60:	4628      	mov	r0, r5
}
   23b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   23b66:	f7ff ba62 	b.w	2302e <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   23b6a:	f001 f9d9 	bl	24f20 <net_buf_simple_pull_le16>
   23b6e:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   23b70:	4620      	mov	r0, r4
   23b72:	f001 f9d5 	bl	24f20 <net_buf_simple_pull_le16>
		*vnd = true;
   23b76:	2301      	movs	r3, #1
		id = net_buf_simple_pull_le16(buf);
   23b78:	4602      	mov	r2, r0
		*vnd = true;
   23b7a:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   23b7c:	4639      	mov	r1, r7
   23b7e:	4628      	mov	r0, r5
}
   23b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   23b84:	f7ff ba3e 	b.w	23004 <bt_mesh_model_find_vnd>

00023b88 <mod_app_get>:
{
   23b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23b8c:	4615      	mov	r5, r2
   23b8e:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   23b90:	ab07      	add	r3, sp, #28
   23b92:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
   23b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
   23b9a:	9304      	str	r3, [sp, #16]
	if ((buf->len != 4U) && (buf->len != 6U)) {
   23b9c:	88ab      	ldrh	r3, [r5, #4]
   23b9e:	f023 0302 	bic.w	r3, r3, #2
   23ba2:	b29b      	uxth	r3, r3
   23ba4:	2b04      	cmp	r3, #4
{
   23ba6:	4606      	mov	r6, r0
   23ba8:	460f      	mov	r7, r1
	if ((buf->len != 4U) && (buf->len != 6U)) {
   23baa:	d147      	bne.n	23c3c <mod_app_get+0xb4>
	elem_addr = net_buf_simple_pull_le16(buf);
   23bac:	4628      	mov	r0, r5
   23bae:	f001 f9b7 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23bb2:	b203      	sxth	r3, r0
   23bb4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23bb6:	4680      	mov	r8, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23bb8:	dd43      	ble.n	23c42 <mod_app_get+0xba>
	mod_id = buf->data;
   23bba:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   23bbe:	f7f4 fadf 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   23bc2:	4604      	mov	r4, r0
   23bc4:	bb58      	cbnz	r0, 23c1e <mod_app_get+0x96>
		vnd = (buf->len == 4U);
   23bc6:	88ab      	ldrh	r3, [r5, #4]
   23bc8:	1f1a      	subs	r2, r3, #4
   23bca:	4253      	negs	r3, r2
   23bcc:	4153      	adcs	r3, r2
   23bce:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   23bd2:	2501      	movs	r5, #1
	if (vnd) {
   23bd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23bd8:	b35b      	cbz	r3, 23c32 <mod_app_get+0xaa>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   23bda:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   23bde:	a804      	add	r0, sp, #16
   23be0:	f7ff fa50 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   23be4:	4629      	mov	r1, r5
   23be6:	a804      	add	r0, sp, #16
   23be8:	f001 f929 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   23bec:	4641      	mov	r1, r8
   23bee:	a804      	add	r0, sp, #16
   23bf0:	f001 f92d 	bl	24e4e <net_buf_simple_add_le16>
	if (vnd) {
   23bf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23bf8:	b1f3      	cbz	r3, 23c38 <mod_app_get+0xb0>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   23bfa:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   23bfc:	4649      	mov	r1, r9
   23bfe:	a804      	add	r0, sp, #16
   23c00:	f001 f914 	bl	24e2c <net_buf_simple_add_mem>
	if (mod) {
   23c04:	bb04      	cbnz	r4, 23c48 <mod_app_get+0xc0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   23c06:	2400      	movs	r4, #0
   23c08:	9400      	str	r4, [sp, #0]
   23c0a:	4623      	mov	r3, r4
   23c0c:	aa04      	add	r2, sp, #16
   23c0e:	4639      	mov	r1, r7
   23c10:	4630      	mov	r0, r6
   23c12:	f7ff f9de 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   23c16:	4620      	mov	r0, r4
}
   23c18:	b00d      	add	sp, #52	; 0x34
   23c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   23c1e:	4629      	mov	r1, r5
   23c20:	f10d 020f 	add.w	r2, sp, #15
   23c24:	f7ff ff8f 	bl	23b46 <get_model>
		status = STATUS_INVALID_MODEL;
   23c28:	1e04      	subs	r4, r0, #0
   23c2a:	bf14      	ite	ne
   23c2c:	2500      	movne	r5, #0
   23c2e:	2502      	moveq	r5, #2
   23c30:	e7d0      	b.n	23bd4 <mod_app_get+0x4c>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   23c32:	f248 014c 	movw	r1, #32844	; 0x804c
   23c36:	e7d2      	b.n	23bde <mod_app_get+0x56>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   23c38:	2202      	movs	r2, #2
   23c3a:	e7df      	b.n	23bfc <mod_app_get+0x74>
		return -EMSGSIZE;
   23c3c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23c40:	e7ea      	b.n	23c18 <mod_app_get+0x90>
		return -EINVAL;
   23c42:	f06f 0015 	mvn.w	r0, #21
   23c46:	e7e7      	b.n	23c18 <mod_app_get+0x90>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   23c48:	89a1      	ldrh	r1, [r4, #12]
   23c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23c4e:	4299      	cmp	r1, r3
   23c50:	d0d9      	beq.n	23c06 <mod_app_get+0x7e>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   23c52:	a804      	add	r0, sp, #16
   23c54:	f001 f8fb 	bl	24e4e <net_buf_simple_add_le16>
		for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
   23c58:	e7d5      	b.n	23c06 <mod_app_get+0x7e>

00023c5a <mod_sub_va_del>:
{
   23c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   23c5e:	8893      	ldrh	r3, [r2, #4]
   23c60:	f023 0302 	bic.w	r3, r3, #2
   23c64:	b29b      	uxth	r3, r3
   23c66:	2b14      	cmp	r3, #20
{
   23c68:	b087      	sub	sp, #28
   23c6a:	4606      	mov	r6, r0
   23c6c:	460f      	mov	r7, r1
   23c6e:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   23c70:	d14c      	bne.n	23d0c <mod_sub_va_del+0xb2>
	elem_addr = net_buf_simple_pull_le16(buf);
   23c72:	4610      	mov	r0, r2
   23c74:	f001 f954 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23c78:	b203      	sxth	r3, r0
   23c7a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23c7c:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23c7e:	dd48      	ble.n	23d12 <mod_sub_va_del+0xb8>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   23c80:	2110      	movs	r1, #16
   23c82:	4620      	mov	r0, r4
   23c84:	f001 f93c 	bl	24f00 <net_buf_simple_pull_mem>
   23c88:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   23c8a:	4628      	mov	r0, r5
	mod_id = buf->data;
   23c8c:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   23c90:	f7f4 fa76 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   23c94:	b9c0      	cbnz	r0, 23cc8 <mod_sub_va_del+0x6e>
		vnd = (buf->len == 4U);
   23c96:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   23c98:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   23c9a:	1f11      	subs	r1, r2, #4
   23c9c:	424a      	negs	r2, r1
   23c9e:	414a      	adcs	r2, r1
   23ca0:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   23ca4:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   23ca8:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   23caa:	f89d 3011 	ldrb.w	r3, [sp, #17]
   23cae:	e9cd 8301 	strd	r8, r3, [sp, #4]
   23cb2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   23cb6:	9300      	str	r3, [sp, #0]
   23cb8:	4639      	mov	r1, r7
   23cba:	462b      	mov	r3, r5
   23cbc:	4630      	mov	r0, r6
   23cbe:	f7ff fb91 	bl	233e4 <send_mod_sub_status>
}
   23cc2:	b007      	add	sp, #28
   23cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   23cc8:	f10d 0211 	add.w	r2, sp, #17
   23ccc:	4621      	mov	r1, r4
   23cce:	f7ff ff3a 	bl	23b46 <get_model>
   23cd2:	9005      	str	r0, [sp, #20]
	if (!mod) {
   23cd4:	b918      	cbnz	r0, 23cde <mod_sub_va_del+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   23cd6:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   23cda:	2202      	movs	r2, #2
		goto send_status;
   23cdc:	e7e5      	b.n	23caa <mod_sub_va_del+0x50>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   23cde:	f10d 0112 	add.w	r1, sp, #18
   23ce2:	4648      	mov	r0, r9
   23ce4:	f7fe feb6 	bl	22a54 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   23ce8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   23cec:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   23cee:	2900      	cmp	r1, #0
   23cf0:	d0db      	beq.n	23caa <mod_sub_va_del+0x50>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   23cf2:	a805      	add	r0, sp, #20
   23cf4:	f7f4 fa9c 	bl	18230 <bt_mesh_model_find_group>
	if (match) {
   23cf8:	b130      	cbz	r0, 23d08 <mod_sub_va_del+0xae>
		*match = BT_MESH_ADDR_UNASSIGNED;
   23cfa:	2400      	movs	r4, #0
   23cfc:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   23cfe:	9805      	ldr	r0, [sp, #20]
   23d00:	f7ff f9b2 	bl	23068 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   23d04:	4622      	mov	r2, r4
   23d06:	e7d0      	b.n	23caa <mod_sub_va_del+0x50>
		status = STATUS_CANNOT_REMOVE;
   23d08:	220c      	movs	r2, #12
   23d0a:	e7ce      	b.n	23caa <mod_sub_va_del+0x50>
		return -EMSGSIZE;
   23d0c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23d10:	e7d7      	b.n	23cc2 <mod_sub_va_del+0x68>
		return -EINVAL;
   23d12:	f06f 0015 	mvn.w	r0, #21
   23d16:	e7d4      	b.n	23cc2 <mod_sub_va_del+0x68>

00023d18 <mod_sub_del>:
{
   23d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   23d1c:	8893      	ldrh	r3, [r2, #4]
   23d1e:	2b06      	cmp	r3, #6
{
   23d20:	b087      	sub	sp, #28
   23d22:	4606      	mov	r6, r0
   23d24:	460f      	mov	r7, r1
   23d26:	4691      	mov	r9, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   23d28:	d001      	beq.n	23d2e <mod_sub_del+0x16>
   23d2a:	2b08      	cmp	r3, #8
   23d2c:	d145      	bne.n	23dba <mod_sub_del+0xa2>
	elem_addr = net_buf_simple_pull_le16(buf);
   23d2e:	4648      	mov	r0, r9
   23d30:	f001 f8f6 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23d34:	b203      	sxth	r3, r0
   23d36:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23d38:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23d3a:	dd41      	ble.n	23dc0 <mod_sub_del+0xa8>
	sub_addr = net_buf_simple_pull_le16(buf);
   23d3c:	4648      	mov	r0, r9
   23d3e:	f001 f8ef 	bl	24f20 <net_buf_simple_pull_le16>
   23d42:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   23d44:	4620      	mov	r0, r4
	mod_id = buf->data;
   23d46:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   23d4a:	f7f4 fa19 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   23d4e:	b948      	cbnz	r0, 23d64 <mod_sub_del+0x4c>
		vnd = (buf->len == 4U);
   23d50:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		mod = NULL;
   23d54:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   23d56:	1f1a      	subs	r2, r3, #4
   23d58:	4253      	negs	r3, r2
   23d5a:	4153      	adcs	r3, r2
   23d5c:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   23d60:	2201      	movs	r2, #1
   23d62:	e01b      	b.n	23d9c <mod_sub_del+0x84>
	mod = get_model(elem, buf, &vnd);
   23d64:	f10d 0213 	add.w	r2, sp, #19
   23d68:	4649      	mov	r1, r9
   23d6a:	f7ff feec 	bl	23b46 <get_model>
   23d6e:	9005      	str	r0, [sp, #20]
	if (!mod) {
   23d70:	b308      	cbz	r0, 23db6 <mod_sub_del+0x9e>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr) && !BT_MESH_ADDR_IS_FIXED_GROUP(sub_addr)) {
   23d72:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   23d76:	b29b      	uxth	r3, r3
   23d78:	f643 72fe 	movw	r2, #16382	; 0x3ffe
   23d7c:	4293      	cmp	r3, r2
   23d7e:	d8ef      	bhi.n	23d60 <mod_sub_del+0x48>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   23d80:	4629      	mov	r1, r5
   23d82:	a805      	add	r0, sp, #20
   23d84:	f7f4 fa54 	bl	18230 <bt_mesh_model_find_group>
	if (match) {
   23d88:	f04f 0900 	mov.w	r9, #0
   23d8c:	4602      	mov	r2, r0
   23d8e:	b128      	cbz	r0, 23d9c <mod_sub_del+0x84>
		*match = BT_MESH_ADDR_UNASSIGNED;
   23d90:	f8a0 9000 	strh.w	r9, [r0]
			bt_mesh_model_sub_store(mod);
   23d94:	9805      	ldr	r0, [sp, #20]
   23d96:	f7ff f967 	bl	23068 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   23d9a:	464a      	mov	r2, r9
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   23d9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   23da0:	9500      	str	r5, [sp, #0]
   23da2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   23da6:	4639      	mov	r1, r7
   23da8:	4623      	mov	r3, r4
   23daa:	4630      	mov	r0, r6
   23dac:	f7ff fb1a 	bl	233e4 <send_mod_sub_status>
}
   23db0:	b007      	add	sp, #28
   23db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   23db6:	2202      	movs	r2, #2
   23db8:	e7f0      	b.n	23d9c <mod_sub_del+0x84>
		return -EMSGSIZE;
   23dba:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23dbe:	e7f7      	b.n	23db0 <mod_sub_del+0x98>
		return -EINVAL;
   23dc0:	f06f 0015 	mvn.w	r0, #21
   23dc4:	e7f4      	b.n	23db0 <mod_sub_del+0x98>

00023dc6 <mod_sub_va_add>:
{
   23dc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   23dca:	8893      	ldrh	r3, [r2, #4]
   23dcc:	f023 0302 	bic.w	r3, r3, #2
   23dd0:	b29b      	uxth	r3, r3
   23dd2:	2b14      	cmp	r3, #20
{
   23dd4:	b087      	sub	sp, #28
   23dd6:	4607      	mov	r7, r0
   23dd8:	4688      	mov	r8, r1
   23dda:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   23ddc:	d15a      	bne.n	23e94 <mod_sub_va_add+0xce>
	elem_addr = net_buf_simple_pull_le16(buf);
   23dde:	4610      	mov	r0, r2
   23de0:	f001 f89e 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23de4:	b203      	sxth	r3, r0
   23de6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23de8:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23dea:	dd56      	ble.n	23e9a <mod_sub_va_add+0xd4>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   23dec:	2110      	movs	r1, #16
   23dee:	4620      	mov	r0, r4
   23df0:	f001 f886 	bl	24f00 <net_buf_simple_pull_mem>
   23df4:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   23df6:	4628      	mov	r0, r5
	mod_id = buf->data;
   23df8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   23dfc:	f7f4 f9c0 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   23e00:	b9c8      	cbnz	r0, 23e36 <mod_sub_va_add+0x70>
		vnd = (buf->len == 4U);
   23e02:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   23e04:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   23e06:	1f11      	subs	r1, r2, #4
   23e08:	424a      	negs	r2, r1
   23e0a:	414a      	adcs	r2, r1
   23e0c:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   23e10:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   23e14:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   23e16:	f89d 3011 	ldrb.w	r3, [sp, #17]
   23e1a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   23e1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   23e22:	9300      	str	r3, [sp, #0]
   23e24:	4622      	mov	r2, r4
   23e26:	462b      	mov	r3, r5
   23e28:	4641      	mov	r1, r8
   23e2a:	4638      	mov	r0, r7
   23e2c:	f7ff fada 	bl	233e4 <send_mod_sub_status>
}
   23e30:	b007      	add	sp, #28
   23e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   23e36:	f10d 0211 	add.w	r2, sp, #17
   23e3a:	4621      	mov	r1, r4
   23e3c:	f7ff fe83 	bl	23b46 <get_model>
   23e40:	9005      	str	r0, [sp, #20]
	if (!mod) {
   23e42:	b918      	cbnz	r0, 23e4c <mod_sub_va_add+0x86>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   23e44:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   23e48:	2402      	movs	r4, #2
		goto send_status;
   23e4a:	e7e4      	b.n	23e16 <mod_sub_va_add+0x50>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   23e4c:	f10d 0112 	add.w	r1, sp, #18
   23e50:	4630      	mov	r0, r6
   23e52:	f7fe fdfd 	bl	22a50 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   23e56:	4604      	mov	r4, r0
   23e58:	2800      	cmp	r0, #0
   23e5a:	d1dc      	bne.n	23e16 <mod_sub_va_add+0x50>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   23e5c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   23e60:	a805      	add	r0, sp, #20
   23e62:	f7f4 f9e5 	bl	18230 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   23e66:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   23e68:	b118      	cbz	r0, 23e72 <mod_sub_va_add+0xac>
		bt_mesh_va_del(label_uuid, NULL);
   23e6a:	4630      	mov	r0, r6
   23e6c:	f7fe fdf2 	bl	22a54 <bt_mesh_va_del>
		goto send_status;
   23e70:	e7d1      	b.n	23e16 <mod_sub_va_add+0x50>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   23e72:	a805      	add	r0, sp, #20
   23e74:	f7f4 f9dc 	bl	18230 <bt_mesh_model_find_group>
	if (!entry) {
   23e78:	b928      	cbnz	r0, 23e86 <mod_sub_va_add+0xc0>
		bt_mesh_va_del(label_uuid, NULL);
   23e7a:	4621      	mov	r1, r4
   23e7c:	4630      	mov	r0, r6
   23e7e:	f7fe fde9 	bl	22a54 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   23e82:	2405      	movs	r4, #5
		goto send_status;
   23e84:	e7c7      	b.n	23e16 <mod_sub_va_add+0x50>
	*entry = sub_addr;
   23e86:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   23e8a:	8003      	strh	r3, [r0, #0]
		bt_mesh_model_sub_store(mod);
   23e8c:	9805      	ldr	r0, [sp, #20]
   23e8e:	f7ff f8eb 	bl	23068 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   23e92:	e7c0      	b.n	23e16 <mod_sub_va_add+0x50>
		return -EMSGSIZE;
   23e94:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23e98:	e7ca      	b.n	23e30 <mod_sub_va_add+0x6a>
		return -EINVAL;
   23e9a:	f06f 0015 	mvn.w	r0, #21
   23e9e:	e7c7      	b.n	23e30 <mod_sub_va_add+0x6a>

00023ea0 <mod_sub_add>:
{
   23ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   23ea4:	8893      	ldrh	r3, [r2, #4]
   23ea6:	2b06      	cmp	r3, #6
{
   23ea8:	b087      	sub	sp, #28
   23eaa:	4607      	mov	r7, r0
   23eac:	4688      	mov	r8, r1
   23eae:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   23eb0:	d001      	beq.n	23eb6 <mod_sub_add+0x16>
   23eb2:	2b08      	cmp	r3, #8
   23eb4:	d147      	bne.n	23f46 <mod_sub_add+0xa6>
	elem_addr = net_buf_simple_pull_le16(buf);
   23eb6:	4620      	mov	r0, r4
   23eb8:	f001 f832 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23ebc:	b203      	sxth	r3, r0
   23ebe:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23ec0:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23ec2:	dd43      	ble.n	23f4c <mod_sub_add+0xac>
	sub_addr = net_buf_simple_pull_le16(buf);
   23ec4:	4620      	mov	r0, r4
   23ec6:	f001 f82b 	bl	24f20 <net_buf_simple_pull_le16>
   23eca:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   23ecc:	4630      	mov	r0, r6
	mod_id = buf->data;
   23ece:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   23ed2:	f7f4 f955 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   23ed6:	b940      	cbnz	r0, 23eea <mod_sub_add+0x4a>
		vnd = (buf->len == 4U);
   23ed8:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   23eda:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   23edc:	1f1a      	subs	r2, r3, #4
   23ede:	4253      	negs	r3, r2
   23ee0:	4153      	adcs	r3, r2
   23ee2:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   23ee6:	2201      	movs	r2, #1
   23ee8:	e01e      	b.n	23f28 <mod_sub_add+0x88>
	mod = get_model(elem, buf, &vnd);
   23eea:	f10d 0213 	add.w	r2, sp, #19
   23eee:	4621      	mov	r1, r4
   23ef0:	f7ff fe29 	bl	23b46 <get_model>
   23ef4:	9005      	str	r0, [sp, #20]
	if (!mod) {
   23ef6:	b1b0      	cbz	r0, 23f26 <mod_sub_add+0x86>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr) && !BT_MESH_ADDR_IS_FIXED_GROUP(sub_addr)) {
   23ef8:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   23efc:	b29b      	uxth	r3, r3
   23efe:	f643 72fe 	movw	r2, #16382	; 0x3ffe
   23f02:	4293      	cmp	r3, r2
   23f04:	d8ef      	bhi.n	23ee6 <mod_sub_add+0x46>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   23f06:	4629      	mov	r1, r5
   23f08:	a805      	add	r0, sp, #20
   23f0a:	f7f4 f991 	bl	18230 <bt_mesh_model_find_group>
   23f0e:	b940      	cbnz	r0, 23f22 <mod_sub_add+0x82>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   23f10:	4601      	mov	r1, r0
   23f12:	a805      	add	r0, sp, #20
   23f14:	f7f4 f98c 	bl	18230 <bt_mesh_model_find_group>
	if (!entry) {
   23f18:	b198      	cbz	r0, 23f42 <mod_sub_add+0xa2>
	*entry = sub_addr;
   23f1a:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   23f1c:	9805      	ldr	r0, [sp, #20]
   23f1e:	f7ff f8a3 	bl	23068 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   23f22:	2200      	movs	r2, #0
   23f24:	e000      	b.n	23f28 <mod_sub_add+0x88>
		status = STATUS_INVALID_MODEL;
   23f26:	2202      	movs	r2, #2
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   23f28:	f89d 3013 	ldrb.w	r3, [sp, #19]
   23f2c:	9500      	str	r5, [sp, #0]
   23f2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   23f32:	4641      	mov	r1, r8
   23f34:	4633      	mov	r3, r6
   23f36:	4638      	mov	r0, r7
   23f38:	f7ff fa54 	bl	233e4 <send_mod_sub_status>
}
   23f3c:	b007      	add	sp, #28
   23f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
   23f42:	2205      	movs	r2, #5
   23f44:	e7f0      	b.n	23f28 <mod_sub_add+0x88>
		return -EMSGSIZE;
   23f46:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23f4a:	e7f7      	b.n	23f3c <mod_sub_add+0x9c>
		return -EINVAL;
   23f4c:	f06f 0015 	mvn.w	r0, #21
   23f50:	e7f4      	b.n	23f3c <mod_sub_add+0x9c>

00023f52 <mod_pub_get>:
{
   23f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   23f56:	8893      	ldrh	r3, [r2, #4]
   23f58:	f023 0302 	bic.w	r3, r3, #2
   23f5c:	b29b      	uxth	r3, r3
   23f5e:	2b04      	cmp	r3, #4
{
   23f60:	b087      	sub	sp, #28
   23f62:	4606      	mov	r6, r0
   23f64:	460f      	mov	r7, r1
   23f66:	4691      	mov	r9, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
   23f68:	d133      	bne.n	23fd2 <mod_pub_get+0x80>
	elem_addr = net_buf_simple_pull_le16(buf);
   23f6a:	4610      	mov	r0, r2
   23f6c:	f000 ffd8 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23f70:	b203      	sxth	r3, r0
   23f72:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23f74:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23f76:	dd2f      	ble.n	23fd8 <mod_pub_get+0x86>
	mod_id = buf->data;
   23f78:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   23f7c:	f7f4 f900 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   23f80:	4604      	mov	r4, r0
   23f82:	b948      	cbnz	r0, 23f98 <mod_pub_get+0x46>
		vnd = (buf->len == 4U);
   23f84:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   23f88:	1f1a      	subs	r2, r3, #4
   23f8a:	4253      	negs	r3, r2
   23f8c:	4153      	adcs	r3, r2
   23f8e:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   23f92:	2201      	movs	r2, #1
	uint16_t elem_addr, pub_addr = 0U;
   23f94:	4623      	mov	r3, r4
   23f96:	e00a      	b.n	23fae <mod_pub_get+0x5c>
	mod = get_model(elem, buf, &vnd);
   23f98:	f10d 0217 	add.w	r2, sp, #23
   23f9c:	4649      	mov	r1, r9
   23f9e:	f7ff fdd2 	bl	23b46 <get_model>
	if (!mod) {
   23fa2:	4604      	mov	r4, r0
   23fa4:	b188      	cbz	r0, 23fca <mod_pub_get+0x78>
	if (!mod->pub) {
   23fa6:	6883      	ldr	r3, [r0, #8]
   23fa8:	b18b      	cbz	r3, 23fce <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   23faa:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   23fac:	2200      	movs	r2, #0
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   23fae:	e9cd 2802 	strd	r2, r8, [sp, #8]
   23fb2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   23fb6:	9200      	str	r2, [sp, #0]
   23fb8:	9401      	str	r4, [sp, #4]
   23fba:	462a      	mov	r2, r5
   23fbc:	4639      	mov	r1, r7
   23fbe:	4630      	mov	r0, r6
   23fc0:	f7ff fb47 	bl	23652 <send_mod_pub_status>
}
   23fc4:	b007      	add	sp, #28
   23fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   23fca:	2202      	movs	r2, #2
   23fcc:	e7e2      	b.n	23f94 <mod_pub_get+0x42>
		status = STATUS_NVAL_PUB_PARAM;
   23fce:	2207      	movs	r2, #7
   23fd0:	e7ed      	b.n	23fae <mod_pub_get+0x5c>
		return -EMSGSIZE;
   23fd2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23fd6:	e7f5      	b.n	23fc4 <mod_pub_get+0x72>
		return -EINVAL;
   23fd8:	f06f 0015 	mvn.w	r0, #21
   23fdc:	e7f2      	b.n	23fc4 <mod_pub_get+0x72>

00023fde <mod_sub_list_visitor>:
{
   23fde:	b538      	push	{r3, r4, r5, lr}
	if (mod->elem_idx != visit->elem_idx) {
   23fe0:	880b      	ldrh	r3, [r1, #0]
   23fe2:	7902      	ldrb	r2, [r0, #4]
   23fe4:	429a      	cmp	r2, r3
{
   23fe6:	4605      	mov	r5, r0
   23fe8:	460c      	mov	r4, r1
	if (mod->elem_idx != visit->elem_idx) {
   23fea:	d117      	bne.n	2401c <mod_sub_list_visitor+0x3e>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   23fec:	89c3      	ldrh	r3, [r0, #14]
   23fee:	b143      	cbz	r3, 24002 <mod_sub_list_visitor+0x24>
		if (net_buf_simple_tailroom(visit->msg) <
   23ff0:	6848      	ldr	r0, [r1, #4]
   23ff2:	f000 ffc2 	bl	24f7a <net_buf_simple_tailroom>
   23ff6:	2805      	cmp	r0, #5
   23ff8:	d90a      	bls.n	24010 <mod_sub_list_visitor+0x32>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   23ffa:	89e9      	ldrh	r1, [r5, #14]
   23ffc:	6860      	ldr	r0, [r4, #4]
   23ffe:	f000 ff26 	bl	24e4e <net_buf_simple_add_le16>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   24002:	8a2b      	ldrh	r3, [r5, #16]
   24004:	b153      	cbz	r3, 2401c <mod_sub_list_visitor+0x3e>
		if (net_buf_simple_tailroom(visit->msg) <
   24006:	6860      	ldr	r0, [r4, #4]
   24008:	f000 ffb7 	bl	24f7a <net_buf_simple_tailroom>
   2400c:	2805      	cmp	r0, #5
   2400e:	d801      	bhi.n	24014 <mod_sub_list_visitor+0x36>
			return BT_MESH_WALK_STOP;
   24010:	2000      	movs	r0, #0
}
   24012:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   24014:	8a29      	ldrh	r1, [r5, #16]
   24016:	6860      	ldr	r0, [r4, #4]
   24018:	f000 ff19 	bl	24e4e <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   2401c:	2001      	movs	r0, #1
   2401e:	e7f8      	b.n	24012 <mod_sub_list_visitor+0x34>

00024020 <create_mod_app_status.constprop.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   24020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24024:	f89d 9020 	ldrb.w	r9, [sp, #32]
   24028:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   2402c:	4604      	mov	r4, r0
   2402e:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   24030:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   24034:	4617      	mov	r7, r2
   24036:	461e      	mov	r6, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   24038:	f7ff f824 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   2403c:	4649      	mov	r1, r9
   2403e:	4620      	mov	r0, r4
   24040:	f000 fefd 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   24044:	4639      	mov	r1, r7
   24046:	4620      	mov	r0, r4
   24048:	f000 ff01 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   2404c:	4631      	mov	r1, r6
   2404e:	4620      	mov	r0, r4
   24050:	f000 fefd 	bl	24e4e <net_buf_simple_add_le16>
	if (vnd) {
   24054:	b14d      	cbz	r5, 2406a <create_mod_app_status.constprop.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   24056:	2104      	movs	r1, #4
   24058:	4620      	mov	r0, r4
   2405a:	f000 fee1 	bl	24e20 <net_buf_simple_add>
   2405e:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   24060:	4641      	mov	r1, r8
}
   24062:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   24066:	f7fd bcc7 	b.w	219f8 <memcpy>
   2406a:	2102      	movs	r1, #2
   2406c:	4620      	mov	r0, r4
   2406e:	f000 fed7 	bl	24e20 <net_buf_simple_add>
   24072:	2202      	movs	r2, #2
   24074:	e7f4      	b.n	24060 <create_mod_app_status.constprop.0+0x40>

00024076 <mod_app_bind>:
{
   24076:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2407a:	4614      	mov	r4, r2
   2407c:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   2407e:	ab06      	add	r3, sp, #24
   24080:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24084:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24088:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   2408a:	88a3      	ldrh	r3, [r4, #4]
   2408c:	2b06      	cmp	r3, #6
{
   2408e:	4607      	mov	r7, r0
   24090:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   24092:	d001      	beq.n	24098 <mod_app_bind+0x22>
   24094:	2b08      	cmp	r3, #8
   24096:	d14e      	bne.n	24136 <mod_app_bind+0xc0>
	elem_addr = net_buf_simple_pull_le16(buf);
   24098:	4620      	mov	r0, r4
   2409a:	f000 ff41 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2409e:	b203      	sxth	r3, r0
   240a0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   240a2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   240a4:	dd4a      	ble.n	2413c <mod_app_bind+0xc6>
	key_app_idx = net_buf_simple_pull_le16(buf);
   240a6:	4620      	mov	r0, r4
   240a8:	f000 ff3a 	bl	24f20 <net_buf_simple_pull_le16>
   240ac:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   240ae:	4630      	mov	r0, r6
	mod_id = buf->data;
   240b0:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   240b4:	f7f4 f864 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   240b8:	b9d8      	cbnz	r0, 240f2 <mod_app_bind+0x7c>
		vnd = (buf->len == 4U);
   240ba:	88a3      	ldrh	r3, [r4, #4]
   240bc:	1f1a      	subs	r2, r3, #4
   240be:	4253      	negs	r3, r2
   240c0:	4153      	adcs	r3, r2
   240c2:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   240c6:	2401      	movs	r4, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   240c8:	e9cd 4900 	strd	r4, r9, [sp]
   240cc:	f89d 100b 	ldrb.w	r1, [sp, #11]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   240d0:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   240d2:	462b      	mov	r3, r5
   240d4:	4632      	mov	r2, r6
   240d6:	a803      	add	r0, sp, #12
   240d8:	f7ff ffa2 	bl	24020 <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   240dc:	9400      	str	r4, [sp, #0]
   240de:	4623      	mov	r3, r4
   240e0:	aa03      	add	r2, sp, #12
   240e2:	4641      	mov	r1, r8
   240e4:	4638      	mov	r0, r7
   240e6:	f7fe ff74 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   240ea:	4620      	mov	r0, r4
}
   240ec:	b00b      	add	sp, #44	; 0x2c
   240ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   240f2:	4621      	mov	r1, r4
   240f4:	f10d 020b 	add.w	r2, sp, #11
   240f8:	f7ff fd25 	bl	23b46 <get_model>
	if (!mod) {
   240fc:	4604      	mov	r4, r0
   240fe:	b1a0      	cbz	r0, 2412a <mod_app_bind+0xb4>
	if (model == mod) {
   24100:	42b8      	cmp	r0, r7
   24102:	d014      	beq.n	2412e <mod_app_bind+0xb8>
	if (!bt_mesh_app_key_exists(key_idx)) {
   24104:	4628      	mov	r0, r5
   24106:	f7f2 fa1d 	bl	16544 <bt_mesh_app_key_exists>
   2410a:	b190      	cbz	r0, 24132 <mod_app_bind+0xbc>
		if (model->keys[i] == key_idx) {
   2410c:	89a3      	ldrh	r3, [r4, #12]
   2410e:	429d      	cmp	r5, r3
   24110:	d009      	beq.n	24126 <mod_app_bind+0xb0>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   24112:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24116:	4293      	cmp	r3, r2
   24118:	d001      	beq.n	2411e <mod_app_bind+0xa8>
	return STATUS_INSUFF_RESOURCES;
   2411a:	2405      	movs	r4, #5
   2411c:	e7d4      	b.n	240c8 <mod_app_bind+0x52>
			model->keys[i] = key_idx;
   2411e:	81a5      	strh	r5, [r4, #12]
				bt_mesh_model_bind_store(model);
   24120:	4620      	mov	r0, r4
   24122:	f7fe ff9a 	bl	2305a <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   24126:	2400      	movs	r4, #0
   24128:	e7ce      	b.n	240c8 <mod_app_bind+0x52>
		status = STATUS_INVALID_MODEL;
   2412a:	2402      	movs	r4, #2
   2412c:	e7cc      	b.n	240c8 <mod_app_bind+0x52>
		status = STATUS_CANNOT_BIND;
   2412e:	240d      	movs	r4, #13
   24130:	e7ca      	b.n	240c8 <mod_app_bind+0x52>
		return STATUS_INVALID_APPKEY;
   24132:	2403      	movs	r4, #3
   24134:	e7c8      	b.n	240c8 <mod_app_bind+0x52>
		return -EMSGSIZE;
   24136:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2413a:	e7d7      	b.n	240ec <mod_app_bind+0x76>
		return -EINVAL;
   2413c:	f06f 0015 	mvn.w	r0, #21
   24140:	e7d4      	b.n	240ec <mod_app_bind+0x76>

00024142 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   24142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24146:	4605      	mov	r5, r0
	if (!model->pub) {
   24148:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   2414a:	f89d 701c 	ldrb.w	r7, [sp, #28]
   2414e:	460e      	mov	r6, r1
   24150:	4690      	mov	r8, r2
   24152:	461c      	mov	r4, r3
	if (!model->pub) {
   24154:	2800      	cmp	r0, #0
   24156:	d058      	beq.n	2420a <_mod_pub_set.constprop.0+0xc8>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   24158:	2b00      	cmp	r3, #0
   2415a:	d154      	bne.n	24206 <_mod_pub_set.constprop.0+0xc4>
	if (!model->pub->update && period) {
   2415c:	6942      	ldr	r2, [r0, #20]
   2415e:	b90a      	cbnz	r2, 24164 <_mod_pub_set.constprop.0+0x22>
   24160:	2f00      	cmp	r7, #0
   24162:	d152      	bne.n	2420a <_mod_pub_set.constprop.0+0xc8>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   24164:	b99e      	cbnz	r6, 2418e <_mod_pub_set.constprop.0+0x4c>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   24166:	8883      	ldrh	r3, [r0, #4]
   24168:	b173      	cbz	r3, 24188 <_mod_pub_set.constprop.0+0x46>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   2416a:	6843      	ldr	r3, [r0, #4]
   2416c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   24170:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   24172:	6883      	ldr	r3, [r0, #8]
   24174:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   24178:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   2417a:	b112      	cbz	r2, 24182 <_mod_pub_set.constprop.0+0x40>
			(void)k_work_cancel_delayable(&model->pub->timer);
   2417c:	3018      	adds	r0, #24
   2417e:	f001 fd29 	bl	25bd4 <k_work_cancel_delayable>
			bt_mesh_model_pub_store(model);
   24182:	4628      	mov	r0, r5
   24184:	f7fe ff77 	bl	23076 <bt_mesh_model_pub_store>
}
   24188:	4620      	mov	r0, r4
   2418a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   2418e:	4640      	mov	r0, r8
   24190:	f7f2 f9d8 	bl	16544 <bt_mesh_app_key_exists>
   24194:	b908      	cbnz	r0, 2419a <_mod_pub_set.constprop.0+0x58>
		return STATUS_INVALID_APPKEY;
   24196:	2403      	movs	r4, #3
   24198:	e7f6      	b.n	24188 <_mod_pub_set.constprop.0+0x46>
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   2419a:	4641      	mov	r1, r8
   2419c:	4628      	mov	r0, r5
   2419e:	f7fe ff06 	bl	22fae <bt_mesh_model_has_key>
   241a2:	2800      	cmp	r0, #0
   241a4:	d0f7      	beq.n	24196 <_mod_pub_set.constprop.0+0x54>
	model->pub->addr = pub_addr;
   241a6:	68ab      	ldr	r3, [r5, #8]
	model->pub->ttl = ttl;
   241a8:	f89d 2018 	ldrb.w	r2, [sp, #24]
	model->pub->addr = pub_addr;
   241ac:	809e      	strh	r6, [r3, #4]
	model->pub->key = app_idx;
   241ae:	88de      	ldrh	r6, [r3, #6]
	model->pub->ttl = ttl;
   241b0:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
   241b2:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
   241b6:	f026 061f 	bic.w	r6, r6, #31
   241ba:	f3c8 080c 	ubfx	r8, r8, #0, #13
	model->pub->retransmit = retransmit;
   241be:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   241c2:	729f      	strb	r7, [r3, #10]
	model->pub->key = app_idx;
   241c4:	ea46 0608 	orr.w	r6, r6, r8
   241c8:	80de      	strh	r6, [r3, #6]
	model->pub->retransmit = retransmit;
   241ca:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   241cc:	695b      	ldr	r3, [r3, #20]
   241ce:	2b00      	cmp	r3, #0
   241d0:	d0d7      	beq.n	24182 <_mod_pub_set.constprop.0+0x40>
		period_ms = bt_mesh_model_pub_period_get(model);
   241d2:	4628      	mov	r0, r5
   241d4:	f7f3 fe08 	bl	17de8 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   241d8:	1e06      	subs	r6, r0, #0
   241da:	68a8      	ldr	r0, [r5, #8]
   241dc:	ddce      	ble.n	2417c <_mod_pub_set.constprop.0+0x3a>
			k_work_reschedule(&model->pub->timer,
   241de:	f100 0718 	add.w	r7, r0, #24
   241e2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   241e6:	f240 30e7 	movw	r0, #999	; 0x3e7
   241ea:	2100      	movs	r1, #0
   241ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   241f0:	2300      	movs	r3, #0
   241f2:	fbc6 010c 	smlal	r0, r1, r6, ip
   241f6:	f7db ff83 	bl	100 <__aeabi_uldivmod>
   241fa:	4602      	mov	r2, r0
   241fc:	460b      	mov	r3, r1
   241fe:	4638      	mov	r0, r7
   24200:	f7fa fd0e 	bl	1ec20 <k_work_reschedule>
   24204:	e7bd      	b.n	24182 <_mod_pub_set.constprop.0+0x40>
		return STATUS_FEAT_NOT_SUPP;
   24206:	240a      	movs	r4, #10
   24208:	e7be      	b.n	24188 <_mod_pub_set.constprop.0+0x46>
		return STATUS_NVAL_PUB_PARAM;
   2420a:	2407      	movs	r4, #7
   2420c:	e7bc      	b.n	24188 <_mod_pub_set.constprop.0+0x46>

0002420e <mod_unbind.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2420e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   24210:	4605      	mov	r5, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   24212:	4608      	mov	r0, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   24214:	460c      	mov	r4, r1
	if (!bt_mesh_app_key_exists(key_idx)) {
   24216:	f7f2 f995 	bl	16544 <bt_mesh_app_key_exists>
   2421a:	b990      	cbnz	r0, 24242 <mod_unbind.constprop.0+0x34>
		return STATUS_INVALID_APPKEY;
   2421c:	2003      	movs	r0, #3
}
   2421e:	b004      	add	sp, #16
   24220:	bd70      	pop	{r4, r5, r6, pc}
		if (model->pub && model->pub->key == key_idx) {
   24222:	88db      	ldrh	r3, [r3, #6]
   24224:	f3c3 030b 	ubfx	r3, r3, #0, #12
   24228:	42b3      	cmp	r3, r6
   2422a:	d116      	bne.n	2425a <mod_unbind.constprop.0+0x4c>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   2422c:	2400      	movs	r4, #0
   2422e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24232:	9400      	str	r4, [sp, #0]
   24234:	4623      	mov	r3, r4
   24236:	4622      	mov	r2, r4
   24238:	4621      	mov	r1, r4
   2423a:	4628      	mov	r0, r5
   2423c:	f7ff ff81 	bl	24142 <_mod_pub_set.constprop.0>
   24240:	e00b      	b.n	2425a <mod_unbind.constprop.0+0x4c>
		if (model->keys[i] != key_idx) {
   24242:	89ae      	ldrh	r6, [r5, #12]
   24244:	42a6      	cmp	r6, r4
   24246:	d108      	bne.n	2425a <mod_unbind.constprop.0+0x4c>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   24248:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2424c:	81ab      	strh	r3, [r5, #12]
			bt_mesh_model_bind_store(model);
   2424e:	4628      	mov	r0, r5
   24250:	f7fe ff03 	bl	2305a <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   24254:	68ab      	ldr	r3, [r5, #8]
   24256:	2b00      	cmp	r3, #0
   24258:	d1e3      	bne.n	24222 <mod_unbind.constprop.0+0x14>
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2425a:	2000      	movs	r0, #0
   2425c:	e7df      	b.n	2421e <mod_unbind.constprop.0+0x10>

0002425e <mod_app_unbind>:
{
   2425e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24262:	4614      	mov	r4, r2
   24264:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   24266:	ab06      	add	r3, sp, #24
   24268:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2426c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24270:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   24272:	88a3      	ldrh	r3, [r4, #4]
   24274:	2b06      	cmp	r3, #6
{
   24276:	4607      	mov	r7, r0
   24278:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   2427a:	d001      	beq.n	24280 <mod_app_unbind+0x22>
   2427c:	2b08      	cmp	r3, #8
   2427e:	d138      	bne.n	242f2 <mod_app_unbind+0x94>
	elem_addr = net_buf_simple_pull_le16(buf);
   24280:	4620      	mov	r0, r4
   24282:	f000 fe4d 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   24286:	b203      	sxth	r3, r0
   24288:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2428a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2428c:	dd34      	ble.n	242f8 <mod_app_unbind+0x9a>
	key_app_idx = net_buf_simple_pull_le16(buf);
   2428e:	4620      	mov	r0, r4
   24290:	f000 fe46 	bl	24f20 <net_buf_simple_pull_le16>
   24294:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   24296:	4628      	mov	r0, r5
	mod_id = buf->data;
   24298:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2429c:	f7f3 ff70 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   242a0:	b9d8      	cbnz	r0, 242da <mod_app_unbind+0x7c>
		vnd = (buf->len == 4U);
   242a2:	88a3      	ldrh	r3, [r4, #4]
   242a4:	1f1a      	subs	r2, r3, #4
   242a6:	4253      	negs	r3, r2
   242a8:	4153      	adcs	r3, r2
   242aa:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   242ae:	2001      	movs	r0, #1
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   242b0:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   242b2:	e9cd 0900 	strd	r0, r9, [sp]
   242b6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   242ba:	4633      	mov	r3, r6
   242bc:	462a      	mov	r2, r5
   242be:	a803      	add	r0, sp, #12
   242c0:	f7ff feae 	bl	24020 <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   242c4:	9400      	str	r4, [sp, #0]
   242c6:	4623      	mov	r3, r4
   242c8:	aa03      	add	r2, sp, #12
   242ca:	4641      	mov	r1, r8
   242cc:	4638      	mov	r0, r7
   242ce:	f7fe fe80 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   242d2:	4620      	mov	r0, r4
}
   242d4:	b00b      	add	sp, #44	; 0x2c
   242d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   242da:	f10d 020b 	add.w	r2, sp, #11
   242de:	4621      	mov	r1, r4
   242e0:	f7ff fc31 	bl	23b46 <get_model>
	if (!mod) {
   242e4:	b118      	cbz	r0, 242ee <mod_app_unbind+0x90>
	status = mod_unbind(mod, key_app_idx, true);
   242e6:	4631      	mov	r1, r6
   242e8:	f7ff ff91 	bl	2420e <mod_unbind.constprop.0>
send_status:
   242ec:	e7e0      	b.n	242b0 <mod_app_unbind+0x52>
		status = STATUS_INVALID_MODEL;
   242ee:	2002      	movs	r0, #2
   242f0:	e7de      	b.n	242b0 <mod_app_unbind+0x52>
		return -EMSGSIZE;
   242f2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   242f6:	e7ed      	b.n	242d4 <mod_app_unbind+0x76>
		return -EINVAL;
   242f8:	f06f 0015 	mvn.w	r0, #21
   242fc:	e7ea      	b.n	242d4 <mod_app_unbind+0x76>

000242fe <mod_app_key_del>:
	mod_unbind(mod, *app_idx, true);
   242fe:	9b00      	ldr	r3, [sp, #0]
   24300:	8819      	ldrh	r1, [r3, #0]
   24302:	f7ff bf84 	b.w	2420e <mod_unbind.constprop.0>

00024306 <mod_pub_set>:
{
   24306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 11U) && (buf->len != 13U)) {
   2430a:	8893      	ldrh	r3, [r2, #4]
   2430c:	2b0b      	cmp	r3, #11
{
   2430e:	b08b      	sub	sp, #44	; 0x2c
   24310:	4681      	mov	r9, r0
   24312:	468a      	mov	sl, r1
   24314:	4693      	mov	fp, r2
	if ((buf->len != 11U) && (buf->len != 13U)) {
   24316:	d001      	beq.n	2431c <mod_pub_set+0x16>
   24318:	2b0d      	cmp	r3, #13
   2431a:	d158      	bne.n	243ce <mod_pub_set+0xc8>
	elem_addr = net_buf_simple_pull_le16(buf);
   2431c:	4658      	mov	r0, fp
   2431e:	f000 fdff 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   24322:	b203      	sxth	r3, r0
   24324:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   24326:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   24328:	dc04      	bgt.n	24334 <mod_pub_set+0x2e>
		return -EINVAL;
   2432a:	f06f 0015 	mvn.w	r0, #21
}
   2432e:	b00b      	add	sp, #44	; 0x2c
   24330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   24334:	4658      	mov	r0, fp
   24336:	f000 fdf3 	bl	24f20 <net_buf_simple_pull_le16>
   2433a:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   2433c:	4658      	mov	r0, fp
   2433e:	f000 fdef 	bl	24f20 <net_buf_simple_pull_le16>
   24342:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   24344:	4658      	mov	r0, fp
   24346:	f000 fde3 	bl	24f10 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2434a:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2434e:	b2db      	uxtb	r3, r3
   24350:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   24352:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   24354:	d9e9      	bls.n	2432a <mod_pub_set+0x24>
	pub_period = net_buf_simple_pull_u8(buf);
   24356:	4658      	mov	r0, fp
   24358:	f000 fdda 	bl	24f10 <net_buf_simple_pull_u8>
   2435c:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   2435e:	4658      	mov	r0, fp
   24360:	f000 fdd6 	bl	24f10 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   24364:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   24368:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   2436a:	4628      	mov	r0, r5
	mod_id = buf->data;
   2436c:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   2436e:	f7f3 ff07 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   24372:	4604      	mov	r4, r0
   24374:	b9a8      	cbnz	r0, 243a2 <mod_pub_set+0x9c>
		vnd = (buf->len == 4U);
   24376:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   2437a:	1f1a      	subs	r2, r3, #4
   2437c:	4253      	negs	r3, r2
   2437e:	4153      	adcs	r3, r2
   24380:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   24384:	2001      	movs	r0, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   24386:	9b05      	ldr	r3, [sp, #20]
   24388:	9401      	str	r4, [sp, #4]
   2438a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2438e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   24392:	9300      	str	r3, [sp, #0]
   24394:	462a      	mov	r2, r5
   24396:	4633      	mov	r3, r6
   24398:	4651      	mov	r1, sl
   2439a:	4648      	mov	r0, r9
   2439c:	f7ff f959 	bl	23652 <send_mod_pub_status>
   243a0:	e7c5      	b.n	2432e <mod_pub_set+0x28>
	mod = get_model(elem, buf, &vnd);
   243a2:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   243a6:	4659      	mov	r1, fp
   243a8:	f7ff fbcd 	bl	23b46 <get_model>
	if (!mod) {
   243ac:	4604      	mov	r4, r0
   243ae:	b160      	cbz	r0, 243ca <mod_pub_set+0xc4>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   243b0:	9b07      	ldr	r3, [sp, #28]
   243b2:	9302      	str	r3, [sp, #8]
   243b4:	9b06      	ldr	r3, [sp, #24]
   243b6:	f3c7 020b 	ubfx	r2, r7, #0, #12
   243ba:	e9cd 8300 	strd	r8, r3, [sp]
   243be:	4631      	mov	r1, r6
   243c0:	f3c7 3300 	ubfx	r3, r7, #12, #1
   243c4:	f7ff febd 	bl	24142 <_mod_pub_set.constprop.0>
   243c8:	e7dd      	b.n	24386 <mod_pub_set+0x80>
		status = STATUS_INVALID_MODEL;
   243ca:	2002      	movs	r0, #2
   243cc:	e7db      	b.n	24386 <mod_pub_set+0x80>
		return -EMSGSIZE;
   243ce:	f06f 0079 	mvn.w	r0, #121	; 0x79
   243d2:	e7ac      	b.n	2432e <mod_pub_set+0x28>

000243d4 <mod_pub_va_set>:
{
   243d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 25U) && (buf->len != 27U)) {
   243d8:	8893      	ldrh	r3, [r2, #4]
   243da:	f023 0302 	bic.w	r3, r3, #2
   243de:	b29b      	uxth	r3, r3
   243e0:	2b19      	cmp	r3, #25
{
   243e2:	b08b      	sub	sp, #44	; 0x2c
   243e4:	4681      	mov	r9, r0
   243e6:	468a      	mov	sl, r1
   243e8:	4693      	mov	fp, r2
	if ((buf->len != 25U) && (buf->len != 27U)) {
   243ea:	d172      	bne.n	244d2 <mod_pub_va_set+0xfe>
	elem_addr = net_buf_simple_pull_le16(buf);
   243ec:	4610      	mov	r0, r2
   243ee:	f000 fd97 	bl	24f20 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   243f2:	b203      	sxth	r3, r0
   243f4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   243f6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   243f8:	dc04      	bgt.n	24404 <mod_pub_va_set+0x30>
		return -EINVAL;
   243fa:	f06f 0015 	mvn.w	r0, #21
}
   243fe:	b00b      	add	sp, #44	; 0x2c
   24400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   24404:	2110      	movs	r1, #16
   24406:	4658      	mov	r0, fp
   24408:	f000 fd7a 	bl	24f00 <net_buf_simple_pull_mem>
   2440c:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   2440e:	4658      	mov	r0, fp
   24410:	f000 fd86 	bl	24f20 <net_buf_simple_pull_le16>
   24414:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   24416:	4658      	mov	r0, fp
   24418:	f000 fd7a 	bl	24f10 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2441c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   24420:	b2db      	uxtb	r3, r3
   24422:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   24424:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   24426:	d9e8      	bls.n	243fa <mod_pub_va_set+0x26>
	pub_period = net_buf_simple_pull_u8(buf);
   24428:	4658      	mov	r0, fp
   2442a:	f000 fd71 	bl	24f10 <net_buf_simple_pull_u8>
   2442e:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   24430:	4658      	mov	r0, fp
   24432:	f000 fd6d 	bl	24f10 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   24436:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   2443a:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   2443c:	4628      	mov	r0, r5
	mod_id = buf->data;
   2443e:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   24440:	f7f3 fe9e 	bl	18180 <bt_mesh_elem_find>
	if (!elem) {
   24444:	4604      	mov	r4, r0
   24446:	b9c0      	cbnz	r0, 2447a <mod_pub_va_set+0xa6>
		vnd = (buf->len == 4U);
   24448:	f8bb 3004 	ldrh.w	r3, [fp, #4]
		pub_addr = 0U;
   2444c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   24450:	1f1a      	subs	r2, r3, #4
   24452:	4253      	negs	r3, r2
   24454:	4153      	adcs	r3, r2
   24456:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   2445a:	2301      	movs	r3, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   2445c:	9a05      	ldr	r2, [sp, #20]
   2445e:	9401      	str	r4, [sp, #4]
   24460:	e9cd 3202 	strd	r3, r2, [sp, #8]
   24464:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   24468:	9300      	str	r3, [sp, #0]
   2446a:	462a      	mov	r2, r5
   2446c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   24470:	4651      	mov	r1, sl
   24472:	4648      	mov	r0, r9
   24474:	f7ff f8ed 	bl	23652 <send_mod_pub_status>
   24478:	e7c1      	b.n	243fe <mod_pub_va_set+0x2a>
	mod = get_model(elem, buf, &vnd);
   2447a:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   2447e:	4659      	mov	r1, fp
   24480:	f7ff fb61 	bl	23b46 <get_model>
	if (!mod) {
   24484:	4604      	mov	r4, r0
   24486:	b918      	cbnz	r0, 24490 <mod_pub_va_set+0xbc>
		pub_addr = 0U;
   24488:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   2448c:	2302      	movs	r3, #2
		goto send_status;
   2448e:	e7e5      	b.n	2445c <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   24490:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   24494:	4630      	mov	r0, r6
   24496:	f7fe fadb 	bl	22a50 <bt_mesh_va_add>
   2449a:	4603      	mov	r3, r0
   2449c:	4683      	mov	fp, r0
	if (status != STATUS_SUCCESS) {
   2449e:	2800      	cmp	r0, #0
   244a0:	d1dc      	bne.n	2445c <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   244a2:	9b07      	ldr	r3, [sp, #28]
   244a4:	9302      	str	r3, [sp, #8]
   244a6:	9b06      	ldr	r3, [sp, #24]
   244a8:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   244ac:	e9cd 8300 	strd	r8, r3, [sp]
   244b0:	f3c7 020b 	ubfx	r2, r7, #0, #12
   244b4:	f3c7 3300 	ubfx	r3, r7, #12, #1
   244b8:	4620      	mov	r0, r4
   244ba:	f7ff fe42 	bl	24142 <_mod_pub_set.constprop.0>
	if (status != STATUS_SUCCESS) {
   244be:	4603      	mov	r3, r0
   244c0:	2800      	cmp	r0, #0
   244c2:	d0cb      	beq.n	2445c <mod_pub_va_set+0x88>
   244c4:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   244c6:	4659      	mov	r1, fp
   244c8:	4630      	mov	r0, r6
   244ca:	f7fe fac3 	bl	22a54 <bt_mesh_va_del>
   244ce:	9b06      	ldr	r3, [sp, #24]
   244d0:	e7c4      	b.n	2445c <mod_pub_va_set+0x88>
		return -EMSGSIZE;
   244d2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   244d6:	e792      	b.n	243fe <mod_pub_va_set+0x2a>

000244d8 <dev_comp_data_get>:
{
   244d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244dc:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   244de:	ab05      	add	r3, sp, #20
{
   244e0:	4680      	mov	r8, r0
   244e2:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   244e4:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   244e6:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   244ea:	e9cd 1303 	strd	r1, r3, [sp, #12]
   244ee:	9302      	str	r3, [sp, #8]
	page = net_buf_simple_pull_u8(buf);
   244f0:	f000 fd0e 	bl	24f10 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   244f4:	2102      	movs	r1, #2
   244f6:	a802      	add	r0, sp, #8
   244f8:	f7fe fdc4 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   244fc:	2100      	movs	r1, #0
   244fe:	a802      	add	r0, sp, #8
   24500:	f000 fc9d 	bl	24e3e <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   24504:	f7f3 fe8e 	bl	18224 <bt_mesh_comp_get>
   24508:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   2450a:	8801      	ldrh	r1, [r0, #0]
   2450c:	a802      	add	r0, sp, #8
   2450e:	f000 fc9e 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   24512:	8869      	ldrh	r1, [r5, #2]
   24514:	a802      	add	r0, sp, #8
   24516:	f000 fc9a 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   2451a:	88a9      	ldrh	r1, [r5, #4]
   2451c:	a802      	add	r0, sp, #8
   2451e:	f000 fc96 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   24522:	210a      	movs	r1, #10
   24524:	a802      	add	r0, sp, #8
   24526:	f000 fc92 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   2452a:	2101      	movs	r1, #1
   2452c:	a802      	add	r0, sp, #8
   2452e:	f000 fc8e 	bl	24e4e <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   24532:	2700      	movs	r7, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   24534:	f04f 0a02 	mov.w	sl, #2
	for (i = 0; i < comp->elem_count; i++) {
   24538:	68ab      	ldr	r3, [r5, #8]
   2453a:	429f      	cmp	r7, r3
   2453c:	d309      	bcc.n	24552 <dev_comp_data_get+0x7a>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   2453e:	2400      	movs	r4, #0
   24540:	9400      	str	r4, [sp, #0]
   24542:	4623      	mov	r3, r4
   24544:	aa02      	add	r2, sp, #8
   24546:	4649      	mov	r1, r9
   24548:	4640      	mov	r0, r8
   2454a:	f7fe fd42 	bl	22fd2 <bt_mesh_model_send>
	return 0;
   2454e:	4620      	mov	r0, r4
   24550:	e03c      	b.n	245cc <dev_comp_data_get+0xf4>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   24552:	68ec      	ldr	r4, [r5, #12]
   24554:	eb04 1407 	add.w	r4, r4, r7, lsl #4
	if (net_buf_simple_tailroom(buf) <
   24558:	a802      	add	r0, sp, #8
   2455a:	f000 fd0e 	bl	24f7a <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   2455e:	7922      	ldrb	r2, [r4, #4]
   24560:	7963      	ldrb	r3, [r4, #5]
   24562:	3202      	adds	r2, #2
   24564:	fb1a 2303 	smlabb	r3, sl, r3, r2
	if (net_buf_simple_tailroom(buf) <
   24568:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   2456c:	d32c      	bcc.n	245c8 <dev_comp_data_get+0xf0>
	net_buf_simple_add_le16(buf, elem->loc);
   2456e:	8861      	ldrh	r1, [r4, #2]
   24570:	a802      	add	r0, sp, #8
   24572:	f000 fc6c 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   24576:	7921      	ldrb	r1, [r4, #4]
   24578:	a802      	add	r0, sp, #8
   2457a:	f000 fc60 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   2457e:	7961      	ldrb	r1, [r4, #5]
   24580:	a802      	add	r0, sp, #8
   24582:	f000 fc5c 	bl	24e3e <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   24586:	2600      	movs	r6, #0
   24588:	7923      	ldrb	r3, [r4, #4]
   2458a:	429e      	cmp	r6, r3
   2458c:	db05      	blt.n	2459a <dev_comp_data_get+0xc2>
	for (i = 0; i < elem->vnd_model_count; i++) {
   2458e:	2600      	movs	r6, #0
   24590:	7963      	ldrb	r3, [r4, #5]
   24592:	429e      	cmp	r6, r3
   24594:	db09      	blt.n	245aa <dev_comp_data_get+0xd2>
	for (i = 0; i < comp->elem_count; i++) {
   24596:	3701      	adds	r7, #1
   24598:	e7ce      	b.n	24538 <dev_comp_data_get+0x60>
		net_buf_simple_add_le16(buf, mod->id);
   2459a:	0173      	lsls	r3, r6, #5
   2459c:	68a2      	ldr	r2, [r4, #8]
   2459e:	a802      	add	r0, sp, #8
   245a0:	5ad1      	ldrh	r1, [r2, r3]
   245a2:	f000 fc54 	bl	24e4e <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   245a6:	3601      	adds	r6, #1
   245a8:	e7ee      	b.n	24588 <dev_comp_data_get+0xb0>
		mod = &elem->vnd_models[i];
   245aa:	68e3      	ldr	r3, [r4, #12]
   245ac:	0172      	lsls	r2, r6, #5
   245ae:	eb03 1b46 	add.w	fp, r3, r6, lsl #5
		net_buf_simple_add_le16(buf, mod->vnd.company);
   245b2:	5a99      	ldrh	r1, [r3, r2]
   245b4:	a802      	add	r0, sp, #8
   245b6:	f000 fc4a 	bl	24e4e <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   245ba:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   245be:	a802      	add	r0, sp, #8
   245c0:	f000 fc45 	bl	24e4e <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   245c4:	3601      	adds	r6, #1
   245c6:	e7e3      	b.n	24590 <dev_comp_data_get+0xb8>
   245c8:	f06f 0006 	mvn.w	r0, #6
}
   245cc:	b00f      	add	sp, #60	; 0x3c
   245ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000245d2 <hb_pub_send_status>:
{
   245d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   245d4:	b08b      	sub	sp, #44	; 0x2c
   245d6:	461c      	mov	r4, r3
   245d8:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   245da:	ab06      	add	r3, sp, #24
   245dc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   245e0:	4605      	mov	r5, r0
   245e2:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   245e4:	a803      	add	r0, sp, #12
   245e6:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   245e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   245ec:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   245ee:	f7fe fd49 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   245f2:	4639      	mov	r1, r7
   245f4:	a803      	add	r0, sp, #12
   245f6:	f000 fc22 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   245fa:	8821      	ldrh	r1, [r4, #0]
   245fc:	a803      	add	r0, sp, #12
   245fe:	f000 fc26 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   24602:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   24604:	b171      	cbz	r1, 24624 <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   24606:	2901      	cmp	r1, #1
   24608:	d00c      	beq.n	24624 <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   2460a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2460e:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   24610:	bf1f      	itttt	ne
   24612:	f101 31ff 	addne.w	r1, r1, #4294967295
   24616:	fab1 f181 	clzne	r1, r1
   2461a:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   2461e:	b2c9      	uxtbne	r1, r1
		return 0xff;
   24620:	bf08      	it	eq
   24622:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   24624:	a803      	add	r0, sp, #12
   24626:	f000 fc0a 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   2462a:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   2462c:	b149      	cbz	r1, 24642 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   2462e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24632:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   24634:	bf1d      	ittte	ne
   24636:	fab1 f181 	clzne	r1, r1
   2463a:	f1c1 0120 	rsbne	r1, r1, #32
   2463e:	b2c9      	uxtbne	r1, r1
		return 0xff;
   24640:	21ff      	moveq	r1, #255	; 0xff
   24642:	a803      	add	r0, sp, #12
   24644:	f000 fbfb 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   24648:	7921      	ldrb	r1, [r4, #4]
   2464a:	a803      	add	r0, sp, #12
   2464c:	f000 fbf7 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   24650:	88e1      	ldrh	r1, [r4, #6]
   24652:	a803      	add	r0, sp, #12
   24654:	f000 fbfb 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   24658:	8921      	ldrh	r1, [r4, #8]
   2465a:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2465c:	2400      	movs	r4, #0
	net_buf_simple_add_le16(&msg, pub->net_idx);
   2465e:	f000 fbf6 	bl	24e4e <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   24662:	9400      	str	r4, [sp, #0]
   24664:	4623      	mov	r3, r4
   24666:	aa03      	add	r2, sp, #12
   24668:	4631      	mov	r1, r6
   2466a:	4628      	mov	r0, r5
   2466c:	f7fe fcb1 	bl	22fd2 <bt_mesh_model_send>
}
   24670:	4620      	mov	r0, r4
   24672:	b00b      	add	sp, #44	; 0x2c
   24674:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024676 <heartbeat_pub_set>:
{
   24676:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct hb_pub_param *param = (void *)buf->data;
   24678:	6812      	ldr	r2, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   2467a:	7894      	ldrb	r4, [r2, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   2467c:	8813      	ldrh	r3, [r2, #0]
{
   2467e:	b085      	sub	sp, #20
   24680:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   24682:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   24684:	f8ad 3000 	strh.w	r3, [sp]
{
   24688:	460e      	mov	r6, r1
	pub.dst = sys_le16_to_cpu(param->dst);
   2468a:	b299      	uxth	r1, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   2468c:	f7ff fa4d 	bl	23b2a <bt_mesh_hb_pwr2>
   24690:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   24694:	78d7      	ldrb	r7, [r2, #3]
   24696:	4638      	mov	r0, r7
   24698:	f7ff fa47 	bl	23b2a <bt_mesh_hb_pwr2>
   2469c:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   2469e:	7913      	ldrb	r3, [r2, #4]
   246a0:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   246a4:	7950      	ldrb	r0, [r2, #5]
   246a6:	f892 c006 	ldrb.w	ip, [r2, #6]
   246aa:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   246ae:	f8ad 0006 	strh.w	r0, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   246b2:	f8b2 2007 	ldrh.w	r2, [r2, #7]
   246b6:	f8ad 2008 	strh.w	r2, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   246ba:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
   246be:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   246c2:	b290      	uxth	r0, r2
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   246c4:	d317      	bcc.n	246f6 <heartbeat_pub_set+0x80>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   246c6:	3c12      	subs	r4, #18
   246c8:	b2e4      	uxtb	r4, r4
   246ca:	2cec      	cmp	r4, #236	; 0xec
   246cc:	d915      	bls.n	246fa <heartbeat_pub_set+0x84>
	if (param->period_log > 0x10) {
   246ce:	2f10      	cmp	r7, #16
   246d0:	d813      	bhi.n	246fa <heartbeat_pub_set+0x84>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   246d2:	f083 0380 	eor.w	r3, r3, #128	; 0x80
   246d6:	2b7e      	cmp	r3, #126	; 0x7e
   246d8:	d911      	bls.n	246fe <heartbeat_pub_set+0x88>
	if (pub.net_idx > 0xfff) {
   246da:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   246de:	d20e      	bcs.n	246fe <heartbeat_pub_set+0x88>
	status = bt_mesh_hb_pub_set(&pub);
   246e0:	4668      	mov	r0, sp
   246e2:	f7f3 f80f 	bl	17704 <bt_mesh_hb_pub_set>
   246e6:	4602      	mov	r2, r0
	return hb_pub_send_status(model, ctx, status, &pub);
   246e8:	466b      	mov	r3, sp
   246ea:	4631      	mov	r1, r6
   246ec:	4628      	mov	r0, r5
   246ee:	f7ff ff70 	bl	245d2 <hb_pub_send_status>
}
   246f2:	b005      	add	sp, #20
   246f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = STATUS_INVALID_ADDRESS;
   246f6:	2201      	movs	r2, #1
   246f8:	e7f6      	b.n	246e8 <heartbeat_pub_set+0x72>
		status = STATUS_CANNOT_SET;
   246fa:	220f      	movs	r2, #15
   246fc:	e7f4      	b.n	246e8 <heartbeat_pub_set+0x72>
		return -EINVAL;
   246fe:	f06f 0015 	mvn.w	r0, #21
   24702:	e7f6      	b.n	246f2 <heartbeat_pub_set+0x7c>

00024704 <heartbeat_pub_get>:
{
   24704:	b530      	push	{r4, r5, lr}
   24706:	b085      	sub	sp, #20
   24708:	4604      	mov	r4, r0
   2470a:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   2470c:	4668      	mov	r0, sp
   2470e:	f7f3 f82b 	bl	17768 <bt_mesh_hb_pub_get>
	return hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   24712:	466b      	mov	r3, sp
   24714:	2200      	movs	r2, #0
   24716:	4629      	mov	r1, r5
   24718:	4620      	mov	r0, r4
   2471a:	f7ff ff5a 	bl	245d2 <hb_pub_send_status>
}
   2471e:	b005      	add	sp, #20
   24720:	bd30      	pop	{r4, r5, pc}

00024722 <hb_sub_send_status>:
{
   24722:	b570      	push	{r4, r5, r6, lr}
   24724:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   24726:	ab06      	add	r3, sp, #24
{
   24728:	4614      	mov	r4, r2
   2472a:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   2472c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   24730:	a803      	add	r0, sp, #12
{
   24732:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   24734:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   24738:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2473c:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   2473e:	f7fe fca1 	bl	23084 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   24742:	2100      	movs	r1, #0
   24744:	a803      	add	r0, sp, #12
   24746:	f000 fb7a 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   2474a:	8921      	ldrh	r1, [r4, #8]
   2474c:	a803      	add	r0, sp, #12
   2474e:	f000 fb7e 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   24752:	8961      	ldrh	r1, [r4, #10]
   24754:	a803      	add	r0, sp, #12
   24756:	f000 fb7a 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   2475a:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   2475c:	b149      	cbz	r1, 24772 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   2475e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24762:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   24764:	bf1d      	ittte	ne
   24766:	fab1 f181 	clzne	r1, r1
   2476a:	f1c1 0120 	rsbne	r1, r1, #32
   2476e:	b2c9      	uxtbne	r1, r1
		return 0xff;
   24770:	21ff      	moveq	r1, #255	; 0xff
   24772:	a803      	add	r0, sp, #12
   24774:	f000 fb63 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   24778:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   2477a:	b149      	cbz	r1, 24790 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   2477c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24780:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   24782:	bf1d      	ittte	ne
   24784:	fab1 f181 	clzne	r1, r1
   24788:	f1c1 0120 	rsbne	r1, r1, #32
   2478c:	b2c9      	uxtbne	r1, r1
		return 0xff;
   2478e:	21ff      	moveq	r1, #255	; 0xff
   24790:	a803      	add	r0, sp, #12
   24792:	f000 fb54 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   24796:	7ba1      	ldrb	r1, [r4, #14]
   24798:	a803      	add	r0, sp, #12
   2479a:	f000 fb50 	bl	24e3e <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   2479e:	7be1      	ldrb	r1, [r4, #15]
   247a0:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   247a2:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, sub->max_hops);
   247a4:	f000 fb4b 	bl	24e3e <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   247a8:	9400      	str	r4, [sp, #0]
   247aa:	4623      	mov	r3, r4
   247ac:	aa03      	add	r2, sp, #12
   247ae:	4631      	mov	r1, r6
   247b0:	4628      	mov	r0, r5
   247b2:	f7fe fc0e 	bl	22fd2 <bt_mesh_model_send>
}
   247b6:	4620      	mov	r0, r4
   247b8:	b00a      	add	sp, #40	; 0x28
   247ba:	bd70      	pop	{r4, r5, r6, pc}

000247bc <heartbeat_sub_set>:
{
   247bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   247c0:	4606      	mov	r6, r0
   247c2:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   247c4:	4610      	mov	r0, r2
{
   247c6:	4614      	mov	r4, r2
   247c8:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   247ca:	f000 fba9 	bl	24f20 <net_buf_simple_pull_le16>
   247ce:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   247d0:	4620      	mov	r0, r4
   247d2:	f000 fba5 	bl	24f20 <net_buf_simple_pull_le16>
   247d6:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   247d8:	4620      	mov	r0, r4
   247da:	f000 fb99 	bl	24f10 <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   247de:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   247e0:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   247e2:	d905      	bls.n	247f0 <heartbeat_sub_set+0x34>
		return -EINVAL;
   247e4:	f06f 0415 	mvn.w	r4, #21
}
   247e8:	4620      	mov	r0, r4
   247ea:	b005      	add	sp, #20
   247ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   247f0:	f7ff f99b 	bl	23b2a <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   247f4:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   247f6:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   247f8:	4602      	mov	r2, r0
   247fa:	4640      	mov	r0, r8
   247fc:	f7f2 ffbe 	bl	1777c <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   24800:	2800      	cmp	r0, #0
   24802:	d1ef      	bne.n	247e4 <heartbeat_sub_set+0x28>
	bt_mesh_hb_sub_get(&sub);
   24804:	4668      	mov	r0, sp
   24806:	f7f3 f809 	bl	1781c <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   2480a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2480e:	b103      	cbz	r3, 24812 <heartbeat_sub_set+0x56>
   24810:	b914      	cbnz	r4, 24818 <heartbeat_sub_set+0x5c>
		sub.min_hops = BT_MESH_TTL_MAX;
   24812:	237f      	movs	r3, #127	; 0x7f
   24814:	f88d 300e 	strb.w	r3, [sp, #14]
	err = hb_sub_send_status(model, ctx, &sub);
   24818:	466a      	mov	r2, sp
   2481a:	4639      	mov	r1, r7
   2481c:	4630      	mov	r0, r6
   2481e:	f7ff ff80 	bl	24722 <hb_sub_send_status>
	if (err) {
   24822:	4604      	mov	r4, r0
   24824:	2800      	cmp	r0, #0
   24826:	d1df      	bne.n	247e8 <heartbeat_sub_set+0x2c>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   24828:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2482c:	2b00      	cmp	r3, #0
   2482e:	d0db      	beq.n	247e8 <heartbeat_sub_set+0x2c>
   24830:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   24834:	2b00      	cmp	r3, #0
   24836:	d0d7      	beq.n	247e8 <heartbeat_sub_set+0x2c>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   24838:	2d00      	cmp	r5, #0
   2483a:	d1d5      	bne.n	247e8 <heartbeat_sub_set+0x2c>
		bt_mesh_hb_sub_reset_count();
   2483c:	f7f2 ffe8 	bl	17810 <bt_mesh_hb_sub_reset_count>
   24840:	e7d2      	b.n	247e8 <heartbeat_sub_set+0x2c>

00024842 <heartbeat_sub_get>:
{
   24842:	b530      	push	{r4, r5, lr}
   24844:	b085      	sub	sp, #20
   24846:	4604      	mov	r4, r0
   24848:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   2484a:	4668      	mov	r0, sp
   2484c:	f7f2 ffe6 	bl	1781c <bt_mesh_hb_sub_get>
	return hb_sub_send_status(model, ctx, &sub);
   24850:	466a      	mov	r2, sp
   24852:	4629      	mov	r1, r5
   24854:	4620      	mov	r0, r4
   24856:	f7ff ff64 	bl	24722 <hb_sub_send_status>
}
   2485a:	b005      	add	sp, #20
   2485c:	bd30      	pop	{r4, r5, pc}

0002485e <bt_mesh_adv_buf_local_ready>:
}
   2485e:	4770      	bx	lr

00024860 <store_pending>:
{
   24860:	b508      	push	{r3, lr}
	    atomic_test_and_clear_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING)) {
   24862:	2000      	movs	r0, #0
   24864:	f7f4 f892 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
	if (IS_ENABLED(CONFIG_BT_MESH_RPL_STORAGE_MODE_SETTINGS) &&
   24868:	b118      	cbz	r0, 24872 <store_pending+0x12>
		bt_mesh_rpl_pending_store(BT_MESH_ADDR_ALL_NODES);
   2486a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2486e:	f7f4 fa8b 	bl	18d88 <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   24872:	2001      	movs	r0, #1
   24874:	f7f4 f88a 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   24878:	b108      	cbz	r0, 2487e <store_pending+0x1e>
		bt_mesh_subnet_pending_store();
   2487a:	f7f1 fca3 	bl	161c4 <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2487e:	2002      	movs	r0, #2
   24880:	f7f4 f884 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   24884:	b108      	cbz	r0, 2488a <store_pending+0x2a>
		bt_mesh_app_key_pending_store();
   24886:	f7f1 ff2b 	bl	166e0 <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2488a:	2003      	movs	r0, #3
   2488c:	f7f4 f87e 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   24890:	b108      	cbz	r0, 24896 <store_pending+0x36>
		bt_mesh_net_pending_net_store();
   24892:	f7f1 fa5f 	bl	15d54 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   24896:	2004      	movs	r0, #4
   24898:	f7f4 f878 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   2489c:	b108      	cbz	r0, 248a2 <store_pending+0x42>
		bt_mesh_net_pending_iv_store();
   2489e:	f7f1 fa35 	bl	15d0c <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   248a2:	2005      	movs	r0, #5
   248a4:	f7f4 f872 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   248a8:	b108      	cbz	r0, 248ae <store_pending+0x4e>
		bt_mesh_net_pending_seq_store();
   248aa:	f7f1 fa75 	bl	15d98 <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   248ae:	2006      	movs	r0, #6
   248b0:	f7f4 f86c 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   248b4:	b108      	cbz	r0, 248ba <store_pending+0x5a>
		bt_mesh_hb_pub_pending_store();
   248b6:	f7f3 f805 	bl	178c4 <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   248ba:	2007      	movs	r0, #7
   248bc:	f7f4 f866 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   248c0:	b108      	cbz	r0, 248c6 <store_pending+0x66>
		bt_mesh_cfg_pending_store();
   248c2:	f7f0 fa4f 	bl	14d64 <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   248c6:	2008      	movs	r0, #8
   248c8:	f7f4 f860 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   248cc:	b108      	cbz	r0, 248d2 <store_pending+0x72>
		bt_mesh_model_pending_store();
   248ce:	f7f3 fd6f 	bl	183b0 <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   248d2:	2009      	movs	r0, #9
   248d4:	f7f4 f85a 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
   248d8:	b108      	cbz	r0, 248de <store_pending+0x7e>
		bt_mesh_va_pending_store();
   248da:	f7fe f8bf 	bl	22a5c <bt_mesh_va_pending_store>
	    atomic_test_and_clear_bit(pending_flags,
   248de:	200a      	movs	r0, #10
   248e0:	f7f4 f854 	bl	1898c <atomic_test_and_clear_bit.constprop.0>
	if (IS_ENABLED(CONFIG_BT_MESH_CDB) &&
   248e4:	b118      	cbz	r0, 248ee <store_pending+0x8e>
}
   248e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_cdb_pending_store();
   248ea:	f7f7 b80b 	b.w	1b904 <bt_mesh_cdb_pending_store>
}
   248ee:	bd08      	pop	{r3, pc}

000248f0 <bt_mesh_settings_set>:
{
   248f0:	b538      	push	{r3, r4, r5, lr}
   248f2:	4605      	mov	r5, r0
   248f4:	4608      	mov	r0, r1
   248f6:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   248f8:	461a      	mov	r2, r3
{
   248fa:	461c      	mov	r4, r3
	len = read_cb(cb_arg, out, read_len);
   248fc:	47a8      	blx	r5
	if (len < 0) {
   248fe:	2800      	cmp	r0, #0
   24900:	db04      	blt.n	2490c <bt_mesh_settings_set+0x1c>
		return -EINVAL;
   24902:	42a0      	cmp	r0, r4
   24904:	bf0c      	ite	eq
   24906:	2000      	moveq	r0, #0
   24908:	f06f 0015 	mvnne.w	r0, #21
}
   2490c:	bd38      	pop	{r3, r4, r5, pc}

0002490e <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   2490e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   24912:	2b00      	cmp	r3, #0
   24914:	da07      	bge.n	24926 <bt_mesh_rpl_update+0x18>
   24916:	7d0b      	ldrb	r3, [r1, #20]
   24918:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   2491c:	bf02      	ittt	eq
   2491e:	6842      	ldreq	r2, [r0, #4]
   24920:	f363 221f 	bfieq	r2, r3, #8, #24
   24924:	6042      	streq	r2, [r0, #4]
	rpl->seq = rx->seq;
   24926:	8a0a      	ldrh	r2, [r1, #16]
	rpl->src = rx->ctx.addr;
   24928:	890b      	ldrh	r3, [r1, #8]
	rpl->seq = rx->seq;
   2492a:	8042      	strh	r2, [r0, #2]
   2492c:	7c8a      	ldrb	r2, [r1, #18]
   2492e:	7102      	strb	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   24930:	7d0a      	ldrb	r2, [r1, #20]
	rpl->src = rx->ctx.addr;
   24932:	f3c3 030e 	ubfx	r3, r3, #0, #15
   24936:	f002 0201 	and.w	r2, r2, #1
   2493a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   2493e:	8003      	strh	r3, [r0, #0]
		schedule_rpl_store(rpl, false);
   24940:	f7f4 b97a 	b.w	18c38 <schedule_rpl_store.constprop.0>

00024944 <pub_key_ready>:
}
   24944:	4770      	bx	lr

00024946 <prov_fail>:
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   24946:	2002      	movs	r0, #2
   24948:	f7f4 bcb4 	b.w	192b4 <prov_link_close>

0002494c <atomic_or>:
{
   2494c:	4603      	mov	r3, r0
}
   2494e:	f3bf 8f5b 	dmb	ish
   24952:	e853 0f00 	ldrex	r0, [r3]
   24956:	ea40 0201 	orr.w	r2, r0, r1
   2495a:	e843 2c00 	strex	ip, r2, [r3]
   2495e:	f1bc 0f00 	cmp.w	ip, #0
   24962:	d1f6      	bne.n	24952 <atomic_or+0x6>
   24964:	f3bf 8f5b 	dmb	ish
   24968:	4770      	bx	lr

0002496a <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   2496a:	b538      	push	{r3, r4, r5, lr}
   2496c:	4604      	mov	r4, r0
   2496e:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   24970:	2100      	movs	r1, #0
   24972:	f000 f9f7 	bl	24d64 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   24976:	4629      	mov	r1, r5
   24978:	4620      	mov	r0, r4
}
   2497a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   2497e:	f000 ba5e 	b.w	24e3e <net_buf_simple_add_u8>

00024982 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   24982:	f101 0320 	add.w	r3, r1, #32
   24986:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   24988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2498c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   24990:	428b      	cmp	r3, r1
   24992:	d1f9      	bne.n	24988 <sys_memcpy_swap.constprop.0+0x6>
}
   24994:	4770      	bx	lr

00024996 <prov_link_closed>:
	reset_state();
   24996:	f7f4 bf11 	b.w	197bc <reset_state.isra.0>

0002499a <prov_failed>:
	reset_state();
   2499a:	f7f4 bf0f 	b.w	197bc <reset_state.isra.0>

0002499e <atomic_or>:
{
   2499e:	4603      	mov	r3, r0
}
   249a0:	f3bf 8f5b 	dmb	ish
   249a4:	e853 0f00 	ldrex	r0, [r3]
   249a8:	ea40 0201 	orr.w	r2, r0, r1
   249ac:	e843 2c00 	strex	ip, r2, [r3]
   249b0:	f1bc 0f00 	cmp.w	ip, #0
   249b4:	d1f6      	bne.n	249a4 <atomic_or+0x6>
   249b6:	f3bf 8f5b 	dmb	ish
   249ba:	4770      	bx	lr

000249bc <adv_buf_create>:
{
   249bc:	b507      	push	{r0, r1, r2, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, BT_MESH_LOCAL_ADV,
   249be:	2300      	movs	r3, #0
   249c0:	f243 3234 	movw	r2, #13108	; 0x3334
   249c4:	e9cd 2300 	strd	r2, r3, [sp]
   249c8:	2101      	movs	r1, #1
   249ca:	f040 0208 	orr.w	r2, r0, #8
   249ce:	2000      	movs	r0, #0
   249d0:	f7f0 fa30 	bl	14e34 <bt_mesh_adv_create>
}
   249d4:	b003      	add	sp, #12
   249d6:	f85d fb04 	ldr.w	pc, [sp], #4

000249da <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   249da:	3008      	adds	r0, #8
   249dc:	f000 ba2f 	b.w	24e3e <net_buf_simple_add_u8>

000249e0 <buf_start>:
{
   249e0:	4608      	mov	r0, r1
   249e2:	4611      	mov	r1, r2
	if (err) {
   249e4:	b108      	cbz	r0, 249ea <buf_start+0xa>
		buf_sent(err, user_data);
   249e6:	f7f5 bc6f 	b.w	1a2c8 <buf_sent>
}
   249ea:	4770      	bx	lr

000249ec <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   249ec:	f7f5 b8ec 	b.w	19bc8 <reset_adv_link>

000249f0 <k_sem_give>:
	z_impl_k_sem_give(sem);
   249f0:	f7f9 bf24 	b.w	1e83c <z_impl_k_sem_give>

000249f4 <mod_sub_list_vnd>:
{
   249f4:	4608      	mov	r0, r1
	return mod_member_list_handle(ctx, buf, OP_MOD_SUB_LIST_VND, true);
   249f6:	2301      	movs	r3, #1
{
   249f8:	4611      	mov	r1, r2
	return mod_member_list_handle(ctx, buf, OP_MOD_SUB_LIST_VND, true);
   249fa:	f248 022c 	movw	r2, #32812	; 0x802c
   249fe:	f7f5 be0d 	b.w	1a61c <mod_member_list_handle>

00024a02 <mod_sub_list>:
{
   24a02:	4608      	mov	r0, r1
	return mod_member_list_handle(ctx, buf, OP_MOD_SUB_LIST, false);
   24a04:	2300      	movs	r3, #0
{
   24a06:	4611      	mov	r1, r2
	return mod_member_list_handle(ctx, buf, OP_MOD_SUB_LIST, false);
   24a08:	f248 022a 	movw	r2, #32810	; 0x802a
   24a0c:	f7f5 be06 	b.w	1a61c <mod_member_list_handle>

00024a10 <mod_app_list_vnd>:
{
   24a10:	4608      	mov	r0, r1
	return mod_member_list_handle(ctx, buf, OP_VND_MOD_APP_LIST, true);
   24a12:	2301      	movs	r3, #1
{
   24a14:	4611      	mov	r1, r2
	return mod_member_list_handle(ctx, buf, OP_VND_MOD_APP_LIST, true);
   24a16:	f248 024e 	movw	r2, #32846	; 0x804e
   24a1a:	f7f5 bdff 	b.w	1a61c <mod_member_list_handle>

00024a1e <mod_app_list>:
{
   24a1e:	4608      	mov	r0, r1
	return mod_member_list_handle(ctx, buf, OP_SIG_MOD_APP_LIST, false);
   24a20:	2300      	movs	r3, #0
{
   24a22:	4611      	mov	r1, r2
	return mod_member_list_handle(ctx, buf, OP_SIG_MOD_APP_LIST, false);
   24a24:	f248 024c 	movw	r2, #32844	; 0x804c
   24a28:	f7f5 bdf8 	b.w	1a61c <mod_member_list_handle>

00024a2c <key_idx_unpack>:
{
   24a2c:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   24a2e:	6804      	ldr	r4, [r0, #0]
   24a30:	8823      	ldrh	r3, [r4, #0]
   24a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
   24a36:	800b      	strh	r3, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   24a38:	f8b4 3001 	ldrh.w	r3, [r4, #1]
}
   24a3c:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   24a3e:	091b      	lsrs	r3, r3, #4
   24a40:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   24a42:	2103      	movs	r1, #3
   24a44:	f000 ba54 	b.w	24ef0 <net_buf_simple_pull>

00024a48 <key_idx_pack>:
{
   24a48:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   24a4a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   24a4e:	4605      	mov	r5, r0
   24a50:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   24a52:	b289      	uxth	r1, r1
   24a54:	f000 f9fb 	bl	24e4e <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   24a58:	f3c4 1107 	ubfx	r1, r4, #4, #8
   24a5c:	4628      	mov	r0, r5
}
   24a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   24a62:	f000 b9ec 	b.w	24e3e <net_buf_simple_add_u8>

00024a66 <bt_mesh_cfg_mod_app_bind>:

int bt_mesh_cfg_mod_app_bind(uint16_t net_idx, uint16_t addr, uint16_t elem_addr,
			     uint16_t mod_app_idx, uint16_t mod_id, uint8_t *status)
{
   24a66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return mod_app_bind(net_idx, addr, elem_addr, mod_app_idx, mod_id,
   24a68:	9c07      	ldr	r4, [sp, #28]
   24a6a:	9402      	str	r4, [sp, #8]
   24a6c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   24a70:	9401      	str	r4, [sp, #4]
   24a72:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   24a76:	9400      	str	r4, [sp, #0]
   24a78:	f7f6 f932 	bl	1ace0 <mod_app_bind>
			    CID_NVAL, status);
}
   24a7c:	b004      	add	sp, #16
   24a7e:	bd10      	pop	{r4, pc}

00024a80 <bt_mesh_comp_p0_get>:
	msg_timeout = timeout;
}

int bt_mesh_comp_p0_get(struct bt_mesh_comp_p0 *page,
			struct net_buf_simple *buf)
{
   24a80:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < 10) {
   24a82:	888b      	ldrh	r3, [r1, #4]
   24a84:	2b09      	cmp	r3, #9
{
   24a86:	4605      	mov	r5, r0
   24a88:	460c      	mov	r4, r1
	if (buf->len < 10) {
   24a8a:	d916      	bls.n	24aba <bt_mesh_comp_p0_get+0x3a>
		return -EINVAL;
	}

	page->cid = net_buf_simple_pull_le16(buf);
   24a8c:	4608      	mov	r0, r1
   24a8e:	f000 fa47 	bl	24f20 <net_buf_simple_pull_le16>
   24a92:	8028      	strh	r0, [r5, #0]
	page->pid = net_buf_simple_pull_le16(buf);
   24a94:	4620      	mov	r0, r4
   24a96:	f000 fa43 	bl	24f20 <net_buf_simple_pull_le16>
   24a9a:	8068      	strh	r0, [r5, #2]
	page->vid = net_buf_simple_pull_le16(buf);
   24a9c:	4620      	mov	r0, r4
   24a9e:	f000 fa3f 	bl	24f20 <net_buf_simple_pull_le16>
   24aa2:	80a8      	strh	r0, [r5, #4]
	page->crpl = net_buf_simple_pull_le16(buf);
   24aa4:	4620      	mov	r0, r4
   24aa6:	f000 fa3b 	bl	24f20 <net_buf_simple_pull_le16>
   24aaa:	80e8      	strh	r0, [r5, #6]
	page->feat = net_buf_simple_pull_le16(buf);
   24aac:	4620      	mov	r0, r4
   24aae:	f000 fa37 	bl	24f20 <net_buf_simple_pull_le16>
	page->_buf = buf;
   24ab2:	60ec      	str	r4, [r5, #12]
	page->feat = net_buf_simple_pull_le16(buf);
   24ab4:	8128      	strh	r0, [r5, #8]

	return 0;
   24ab6:	2000      	movs	r0, #0
}
   24ab8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24aba:	f06f 0015 	mvn.w	r0, #21
   24abe:	e7fb      	b.n	24ab8 <bt_mesh_comp_p0_get+0x38>

00024ac0 <bt_mesh_comp_p0_elem_pull>:

struct bt_mesh_comp_p0_elem *bt_mesh_comp_p0_elem_pull(const struct bt_mesh_comp_p0 *page,
						       struct bt_mesh_comp_p0_elem *elem)
{
   24ac0:	b538      	push	{r3, r4, r5, lr}
   24ac2:	4605      	mov	r5, r0
	size_t modlist_size;

	if (page->_buf->len < 4) {
   24ac4:	68c0      	ldr	r0, [r0, #12]
   24ac6:	8883      	ldrh	r3, [r0, #4]
   24ac8:	2b03      	cmp	r3, #3
{
   24aca:	460c      	mov	r4, r1
	if (page->_buf->len < 4) {
   24acc:	d802      	bhi.n	24ad4 <bt_mesh_comp_p0_elem_pull+0x14>
		return NULL;
   24ace:	2400      	movs	r4, #0
	}

	elem->_buf = net_buf_simple_pull_mem(page->_buf, modlist_size);

	return elem;
}
   24ad0:	4620      	mov	r0, r4
   24ad2:	bd38      	pop	{r3, r4, r5, pc}
	elem->loc = net_buf_simple_pull_le16(page->_buf);
   24ad4:	f000 fa24 	bl	24f20 <net_buf_simple_pull_le16>
   24ad8:	8020      	strh	r0, [r4, #0]
	elem->nsig = net_buf_simple_pull_u8(page->_buf);
   24ada:	68e8      	ldr	r0, [r5, #12]
   24adc:	f000 fa18 	bl	24f10 <net_buf_simple_pull_u8>
   24ae0:	6060      	str	r0, [r4, #4]
	elem->nvnd = net_buf_simple_pull_u8(page->_buf);
   24ae2:	68e8      	ldr	r0, [r5, #12]
   24ae4:	f000 fa14 	bl	24f10 <net_buf_simple_pull_u8>
	modlist_size = elem->nsig * 2 + elem->nvnd * 4;
   24ae8:	6862      	ldr	r2, [r4, #4]
	elem->nvnd = net_buf_simple_pull_u8(page->_buf);
   24aea:	60a0      	str	r0, [r4, #8]
	modlist_size = elem->nsig * 2 + elem->nvnd * 4;
   24aec:	2302      	movs	r3, #2
   24aee:	fb13 2300 	smlabb	r3, r3, r0, r2
	if (page->_buf->len < modlist_size) {
   24af2:	68e8      	ldr	r0, [r5, #12]
   24af4:	8882      	ldrh	r2, [r0, #4]
   24af6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
	modlist_size = elem->nsig * 2 + elem->nvnd * 4;
   24afa:	ea4f 0143 	mov.w	r1, r3, lsl #1
	if (page->_buf->len < modlist_size) {
   24afe:	d3e6      	bcc.n	24ace <bt_mesh_comp_p0_elem_pull+0xe>
	elem->_buf = net_buf_simple_pull_mem(page->_buf, modlist_size);
   24b00:	f000 f9fe 	bl	24f00 <net_buf_simple_pull_mem>
   24b04:	60e0      	str	r0, [r4, #12]
	return elem;
   24b06:	e7e3      	b.n	24ad0 <bt_mesh_comp_p0_elem_pull+0x10>

00024b08 <bt_mesh_comp_p0_elem_mod>:

uint16_t bt_mesh_comp_p0_elem_mod(struct bt_mesh_comp_p0_elem *elem, int idx)
{
	CHECKIF(idx >= elem->nsig) {
   24b08:	6843      	ldr	r3, [r0, #4]
   24b0a:	428b      	cmp	r3, r1
	return ((uint16_t)src[1] << 8) | src[0];
   24b0c:	bf86      	itte	hi
   24b0e:	68c3      	ldrhi	r3, [r0, #12]
   24b10:	f833 0011 	ldrhhi.w	r0, [r3, r1, lsl #1]
		return 0xffff;
   24b14:	f64f 70ff 	movwls	r0, #65535	; 0xffff
	}

	return sys_get_le16(&elem->_buf[idx * 2]);
}
   24b18:	4770      	bx	lr

00024b1a <health_cli_reset>:

static void health_cli_reset(struct bt_mesh_model *model)
{
	struct bt_mesh_health_cli *cli = model->user_data;

	net_buf_simple_reset(cli->pub.msg);
   24b1a:	69c3      	ldr	r3, [r0, #28]
   24b1c:	699b      	ldr	r3, [r3, #24]
	buf->len  = 0U;
   24b1e:	2200      	movs	r2, #0
   24b20:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   24b22:	689a      	ldr	r2, [r3, #8]
   24b24:	601a      	str	r2, [r3, #0]
}
   24b26:	4770      	bx	lr

00024b28 <health_attention_status>:
{
   24b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_mesh_health_cli *cli = model->user_data;
   24b2a:	69c6      	ldr	r6, [r0, #28]
	attention = net_buf_simple_pull_u8(buf);
   24b2c:	4610      	mov	r0, r2
{
   24b2e:	460c      	mov	r4, r1
	attention = net_buf_simple_pull_u8(buf);
   24b30:	f000 f9ee 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_ATTENTION_STATUS,
   24b34:	f106 0778 	add.w	r7, r6, #120	; 0x78
	attention = net_buf_simple_pull_u8(buf);
   24b38:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_ATTENTION_STATUS,
   24b3a:	88a2      	ldrh	r2, [r4, #4]
   24b3c:	ab01      	add	r3, sp, #4
   24b3e:	f248 0107 	movw	r1, #32775	; 0x8007
   24b42:	4638      	mov	r0, r7
   24b44:	f7fe fae5 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   24b48:	b130      	cbz	r0, 24b58 <health_attention_status+0x30>
		if (param->attention) {
   24b4a:	9b01      	ldr	r3, [sp, #4]
   24b4c:	681b      	ldr	r3, [r3, #0]
   24b4e:	b103      	cbz	r3, 24b52 <health_attention_status+0x2a>
			*param->attention = attention;
   24b50:	701d      	strb	r5, [r3, #0]
   24b52:	4638      	mov	r0, r7
   24b54:	f7f9 fe72 	bl	1e83c <z_impl_k_sem_give>
	if (cli->attention_status) {
   24b58:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   24b5a:	b11b      	cbz	r3, 24b64 <health_attention_status+0x3c>
		cli->attention_status(cli, ctx->addr, attention);
   24b5c:	88a1      	ldrh	r1, [r4, #4]
   24b5e:	462a      	mov	r2, r5
   24b60:	4630      	mov	r0, r6
   24b62:	4798      	blx	r3
}
   24b64:	2000      	movs	r0, #0
   24b66:	b003      	add	sp, #12
   24b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024b6a <health_current_status>:
{
   24b6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_cli *cli = model->user_data;
   24b6e:	f8d0 801c 	ldr.w	r8, [r0, #28]
	test_id = net_buf_simple_pull_u8(buf);
   24b72:	4610      	mov	r0, r2
{
   24b74:	4614      	mov	r4, r2
   24b76:	460d      	mov	r5, r1
	test_id = net_buf_simple_pull_u8(buf);
   24b78:	f000 f9ca 	bl	24f10 <net_buf_simple_pull_u8>
   24b7c:	4606      	mov	r6, r0
	cid = net_buf_simple_pull_le16(buf);
   24b7e:	4620      	mov	r0, r4
   24b80:	f000 f9ce 	bl	24f20 <net_buf_simple_pull_le16>
	if (cli->current_status) {
   24b84:	f8d8 7074 	ldr.w	r7, [r8, #116]	; 0x74
	cid = net_buf_simple_pull_le16(buf);
   24b88:	4603      	mov	r3, r0
	if (cli->current_status) {
   24b8a:	b13f      	cbz	r7, 24b9c <health_current_status+0x32>
		cli->current_status(cli, ctx->addr, test_id, cid,
   24b8c:	88a2      	ldrh	r2, [r4, #4]
   24b8e:	9201      	str	r2, [sp, #4]
   24b90:	6822      	ldr	r2, [r4, #0]
   24b92:	9200      	str	r2, [sp, #0]
   24b94:	88a9      	ldrh	r1, [r5, #4]
   24b96:	4632      	mov	r2, r6
   24b98:	4640      	mov	r0, r8
   24b9a:	47b8      	blx	r7
}
   24b9c:	2000      	movs	r0, #0
   24b9e:	b002      	add	sp, #8
   24ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024ba4 <health_fault_status>:
{
   24ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_health_cli *cli = model->user_data;
   24ba8:	f8d0 801c 	ldr.w	r8, [r0, #28]
{
   24bac:	b085      	sub	sp, #20
	test_id = net_buf_simple_pull_u8(buf);
   24bae:	4610      	mov	r0, r2
{
   24bb0:	460e      	mov	r6, r1
   24bb2:	4614      	mov	r4, r2
	test_id = net_buf_simple_pull_u8(buf);
   24bb4:	f000 f9ac 	bl	24f10 <net_buf_simple_pull_u8>
   24bb8:	4605      	mov	r5, r0
	cid = net_buf_simple_pull_le16(buf);
   24bba:	4620      	mov	r0, r4
   24bbc:	f000 f9b0 	bl	24f20 <net_buf_simple_pull_le16>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx,
   24bc0:	f108 0978 	add.w	r9, r8, #120	; 0x78
	cid = net_buf_simple_pull_le16(buf);
   24bc4:	4607      	mov	r7, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx,
   24bc6:	88b2      	ldrh	r2, [r6, #4]
   24bc8:	ab03      	add	r3, sp, #12
   24bca:	2105      	movs	r1, #5
   24bcc:	4648      	mov	r0, r9
   24bce:	f7fe faa0 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   24bd2:	b1e0      	cbz	r0, 24c0e <health_fault_status+0x6a>
		if (param->expect_test_id &&
   24bd4:	9b03      	ldr	r3, [sp, #12]
   24bd6:	685a      	ldr	r2, [r3, #4]
   24bd8:	b112      	cbz	r2, 24be0 <health_fault_status+0x3c>
   24bda:	7812      	ldrb	r2, [r2, #0]
   24bdc:	42aa      	cmp	r2, r5
   24bde:	d116      	bne.n	24c0e <health_fault_status+0x6a>
		if (cid != param->cid) {
   24be0:	881a      	ldrh	r2, [r3, #0]
   24be2:	42ba      	cmp	r2, r7
   24be4:	d113      	bne.n	24c0e <health_fault_status+0x6a>
		if (param->test_id) {
   24be6:	689b      	ldr	r3, [r3, #8]
   24be8:	b103      	cbz	r3, 24bec <health_fault_status+0x48>
			*param->test_id = test_id;
   24bea:	701d      	strb	r5, [r3, #0]
		if (param->faults && param->fault_count) {
   24bec:	9b03      	ldr	r3, [sp, #12]
   24bee:	68d8      	ldr	r0, [r3, #12]
   24bf0:	b150      	cbz	r0, 24c08 <health_fault_status+0x64>
   24bf2:	691b      	ldr	r3, [r3, #16]
   24bf4:	b143      	cbz	r3, 24c08 <health_fault_status+0x64>
			if (buf->len > *param->fault_count) {
   24bf6:	88a2      	ldrh	r2, [r4, #4]
   24bf8:	6819      	ldr	r1, [r3, #0]
   24bfa:	428a      	cmp	r2, r1
				*param->fault_count = buf->len;
   24bfc:	bf98      	it	ls
   24bfe:	601a      	strls	r2, [r3, #0]
			memcpy(param->faults, buf->data, *param->fault_count);
   24c00:	681a      	ldr	r2, [r3, #0]
   24c02:	6821      	ldr	r1, [r4, #0]
   24c04:	f7fc fef8 	bl	219f8 <memcpy>
   24c08:	4648      	mov	r0, r9
   24c0a:	f7f9 fe17 	bl	1e83c <z_impl_k_sem_give>
	if (cli->fault_status) {
   24c0e:	f8d8 9070 	ldr.w	r9, [r8, #112]	; 0x70
   24c12:	f1b9 0f00 	cmp.w	r9, #0
   24c16:	d008      	beq.n	24c2a <health_fault_status+0x86>
		cli->fault_status(cli, ctx->addr, test_id, cid,
   24c18:	88a3      	ldrh	r3, [r4, #4]
   24c1a:	9301      	str	r3, [sp, #4]
   24c1c:	6823      	ldr	r3, [r4, #0]
   24c1e:	9300      	str	r3, [sp, #0]
   24c20:	88b1      	ldrh	r1, [r6, #4]
   24c22:	463b      	mov	r3, r7
   24c24:	462a      	mov	r2, r5
   24c26:	4640      	mov	r0, r8
   24c28:	47c8      	blx	r9
}
   24c2a:	2000      	movs	r0, #0
   24c2c:	b005      	add	sp, #20
   24c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00024c32 <health_period_status>:
{
   24c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_mesh_health_cli *cli = model->user_data;
   24c34:	69c6      	ldr	r6, [r0, #28]
	divisor = net_buf_simple_pull_u8(buf);
   24c36:	4610      	mov	r0, r2
{
   24c38:	460c      	mov	r4, r1
	divisor = net_buf_simple_pull_u8(buf);
   24c3a:	f000 f969 	bl	24f10 <net_buf_simple_pull_u8>
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx,
   24c3e:	f106 0778 	add.w	r7, r6, #120	; 0x78
	divisor = net_buf_simple_pull_u8(buf);
   24c42:	4605      	mov	r5, r0
	if (bt_mesh_msg_ack_ctx_match(&cli->ack_ctx,
   24c44:	88a2      	ldrh	r2, [r4, #4]
   24c46:	ab01      	add	r3, sp, #4
   24c48:	f248 0137 	movw	r1, #32823	; 0x8037
   24c4c:	4638      	mov	r0, r7
   24c4e:	f7fe fa60 	bl	23112 <bt_mesh_msg_ack_ctx_match>
   24c52:	b130      	cbz	r0, 24c62 <health_period_status+0x30>
		if (param->divisor) {
   24c54:	9b01      	ldr	r3, [sp, #4]
   24c56:	681b      	ldr	r3, [r3, #0]
   24c58:	b103      	cbz	r3, 24c5c <health_period_status+0x2a>
			*param->divisor = divisor;
   24c5a:	701d      	strb	r5, [r3, #0]
   24c5c:	4638      	mov	r0, r7
   24c5e:	f7f9 fded 	bl	1e83c <z_impl_k_sem_give>
	if (cli->period_status) {
   24c62:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   24c64:	b11b      	cbz	r3, 24c6e <health_period_status+0x3c>
		cli->period_status(cli, ctx->addr, divisor);
   24c66:	88a1      	ldrh	r1, [r4, #4]
   24c68:	462a      	mov	r2, r5
   24c6a:	4630      	mov	r0, r6
   24c6c:	4798      	blx	r3
}
   24c6e:	2000      	movs	r0, #0
   24c70:	b003      	add	sp, #12
   24c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024c74 <atomic_or>:
{
   24c74:	4603      	mov	r3, r0
}
   24c76:	f3bf 8f5b 	dmb	ish
   24c7a:	e853 0f00 	ldrex	r0, [r3]
   24c7e:	ea40 0201 	orr.w	r2, r0, r1
   24c82:	e843 2c00 	strex	ip, r2, [r3]
   24c86:	f1bc 0f00 	cmp.w	ip, #0
   24c8a:	d1f6      	bne.n	24c7a <atomic_or+0x6>
   24c8c:	f3bf 8f5b 	dmb	ish
   24c90:	4770      	bx	lr

00024c92 <bt_mesh_cdb_subnet_del>:
{
   24c92:	b510      	push	{r4, lr}
   24c94:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   24c96:	b111      	cbz	r1, 24c9e <bt_mesh_cdb_subnet_del+0xc>
		update_cdb_subnet_settings(sub, false);
   24c98:	2100      	movs	r1, #0
   24c9a:	f7f6 fadb 	bl	1b254 <update_cdb_subnet_settings>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   24c9e:	4620      	mov	r0, r4
   24ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   24ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sub->net_idx = BT_MESH_KEY_UNUSED;
   24ca8:	f820 3b03 	strh.w	r3, [r0], #3
	memset(sub->keys, 0, sizeof(sub->keys));
   24cac:	2220      	movs	r2, #32
   24cae:	2100      	movs	r1, #0
   24cb0:	f7fc bead 	b.w	21a0e <memset>

00024cb4 <bt_mesh_cdb_subnet_store>:
		update_cdb_subnet_settings(sub, true);
   24cb4:	2101      	movs	r1, #1
   24cb6:	f7f6 bacd 	b.w	1b254 <update_cdb_subnet_settings>

00024cba <bt_mesh_cdb_node_del>:
{
   24cba:	b510      	push	{r4, lr}
   24cbc:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   24cbe:	b111      	cbz	r1, 24cc6 <bt_mesh_cdb_node_del+0xc>
		update_cdb_node_settings(node, false);
   24cc0:	2100      	movs	r1, #0
   24cc2:	f7f6 fb73 	bl	1b3ac <update_cdb_node_settings>
	node->addr = BT_MESH_ADDR_UNASSIGNED;
   24cc6:	2100      	movs	r1, #0
   24cc8:	8221      	strh	r1, [r4, #16]
	memset(node->dev_key, 0, sizeof(node->dev_key));
   24cca:	f104 0015 	add.w	r0, r4, #21
   24cce:	2210      	movs	r2, #16
}
   24cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(node->dev_key, 0, sizeof(node->dev_key));
   24cd4:	f7fc be9b 	b.w	21a0e <memset>

00024cd8 <bt_mesh_cdb_node_store>:
		update_cdb_node_settings(node, true);
   24cd8:	2101      	movs	r1, #1
   24cda:	f7f6 bb67 	b.w	1b3ac <update_cdb_node_settings>

00024cde <bt_mesh_cdb_app_key_del>:
{
   24cde:	b510      	push	{r4, lr}
   24ce0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   24ce2:	b111      	cbz	r1, 24cea <bt_mesh_cdb_app_key_del+0xc>
		update_cdb_app_key_settings(key, false);
   24ce4:	2100      	movs	r1, #0
   24ce6:	f7f6 faef 	bl	1b2c8 <update_cdb_app_key_settings>
	key->net_idx = BT_MESH_KEY_UNUSED;
   24cea:	4620      	mov	r0, r4
   24cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   24cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	key->net_idx = BT_MESH_KEY_UNUSED;
   24cf4:	f820 3b04 	strh.w	r3, [r0], #4
	memset(key->keys, 0, sizeof(key->keys));
   24cf8:	2220      	movs	r2, #32
   24cfa:	2100      	movs	r1, #0
   24cfc:	f7fc be87 	b.w	21a0e <memset>

00024d00 <bt_mesh_cdb_app_key_store>:
		update_cdb_app_key_settings(key, true);
   24d00:	2101      	movs	r1, #1
   24d02:	f7f6 bae1 	b.w	1b2c8 <update_cdb_app_key_settings>

00024d06 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   24d06:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   24d08:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   24d0a:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   24d0c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   24d10:	700a      	strb	r2, [r1, #0]
   24d12:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   24d14:	70c8      	strb	r0, [r1, #3]
}
   24d16:	4770      	bx	lr

00024d18 <fixed_data_unref>:
}
   24d18:	4770      	bx	lr

00024d1a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   24d1a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   24d1c:	6849      	ldr	r1, [r1, #4]
   24d1e:	6809      	ldr	r1, [r1, #0]
   24d20:	f7f6 bed0 	b.w	1bac4 <net_buf_alloc_len>

00024d24 <net_buf_get>:
{
   24d24:	b570      	push	{r4, r5, r6, lr}
   24d26:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   24d28:	f7f9 fd54 	bl	1e7d4 <z_impl_k_queue_get>
	if (!buf) {
   24d2c:	4605      	mov	r5, r0
   24d2e:	b128      	cbz	r0, 24d3c <net_buf_get+0x18>
   24d30:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24d32:	7963      	ldrb	r3, [r4, #5]
   24d34:	f013 0301 	ands.w	r3, r3, #1
   24d38:	d102      	bne.n	24d40 <net_buf_get+0x1c>
	frag->frags = NULL;
   24d3a:	6023      	str	r3, [r4, #0]
}
   24d3c:	4628      	mov	r0, r5
   24d3e:	bd70      	pop	{r4, r5, r6, pc}
   24d40:	2300      	movs	r3, #0
   24d42:	2200      	movs	r2, #0
   24d44:	4630      	mov	r0, r6
   24d46:	f7f9 fd45 	bl	1e7d4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   24d4a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   24d4c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   24d4e:	f023 0301 	bic.w	r3, r3, #1
   24d52:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24d54:	4604      	mov	r4, r0
   24d56:	e7ec      	b.n	24d32 <net_buf_get+0xe>

00024d58 <net_buf_simple_init_with_data>:
	buf->size  = size;
   24d58:	b292      	uxth	r2, r2
	buf->__buf = data;
   24d5a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   24d5c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   24d5e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   24d60:	8082      	strh	r2, [r0, #4]
}
   24d62:	4770      	bx	lr

00024d64 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   24d64:	6883      	ldr	r3, [r0, #8]
   24d66:	440b      	add	r3, r1
   24d68:	6003      	str	r3, [r0, #0]
}
   24d6a:	4770      	bx	lr

00024d6c <net_buf_slist_put>:
{
   24d6c:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   24d6e:	460b      	mov	r3, r1
   24d70:	681c      	ldr	r4, [r3, #0]
   24d72:	b98c      	cbnz	r4, 24d98 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   24d74:	f04f 0240 	mov.w	r2, #64	; 0x40
   24d78:	f3ef 8411 	mrs	r4, BASEPRI
   24d7c:	f382 8812 	msr	BASEPRI_MAX, r2
   24d80:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   24d84:	b119      	cbz	r1, 24d8e <net_buf_slist_put+0x22>
	return list->tail;
   24d86:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   24d88:	b962      	cbnz	r2, 24da4 <net_buf_slist_put+0x38>
	list->head = node;
   24d8a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   24d8c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   24d8e:	f384 8811 	msr	BASEPRI, r4
   24d92:	f3bf 8f6f 	isb	sy
}
   24d96:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   24d98:	795a      	ldrb	r2, [r3, #5]
   24d9a:	f042 0201 	orr.w	r2, r2, #1
   24d9e:	715a      	strb	r2, [r3, #5]
   24da0:	4623      	mov	r3, r4
   24da2:	e7e5      	b.n	24d70 <net_buf_slist_put+0x4>
	parent->next = child;
   24da4:	6011      	str	r1, [r2, #0]
}
   24da6:	e7f1      	b.n	24d8c <net_buf_slist_put+0x20>

00024da8 <net_buf_slist_get>:
{
   24da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24daa:	4603      	mov	r3, r0
	__asm__ volatile(
   24dac:	f04f 0240 	mov.w	r2, #64	; 0x40
   24db0:	f3ef 8611 	mrs	r6, BASEPRI
   24db4:	f382 8812 	msr	BASEPRI_MAX, r2
   24db8:	f3bf 8f6f 	isb	sy
	return list->head;
   24dbc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24dbe:	b158      	cbz	r0, 24dd8 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dc0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24dc2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24dc4:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dc6:	4288      	cmp	r0, r1
	list->tail = node;
   24dc8:	bf08      	it	eq
   24dca:	605a      	streq	r2, [r3, #4]
   24dcc:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24dce:	7951      	ldrb	r1, [r2, #5]
   24dd0:	f011 0401 	ands.w	r4, r1, #1
   24dd4:	d105      	bne.n	24de2 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   24dd6:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   24dd8:	f386 8811 	msr	BASEPRI, r6
   24ddc:	f3bf 8f6f 	isb	sy
}
   24de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   24de2:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   24de4:	b12c      	cbz	r4, 24df2 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24de6:	685f      	ldr	r7, [r3, #4]
	return node->next;
   24de8:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   24dea:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dec:	42bc      	cmp	r4, r7
	list->tail = node;
   24dee:	bf08      	it	eq
   24df0:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   24df2:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   24df6:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   24df8:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24dfa:	4622      	mov	r2, r4
   24dfc:	e7e7      	b.n	24dce <net_buf_slist_get+0x26>

00024dfe <net_buf_put>:
{
   24dfe:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   24e00:	460a      	mov	r2, r1
   24e02:	6814      	ldr	r4, [r2, #0]
   24e04:	b914      	cbnz	r4, 24e0c <net_buf_put+0xe>
}
   24e06:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   24e08:	f000 bdd6 	b.w	259b8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   24e0c:	7953      	ldrb	r3, [r2, #5]
   24e0e:	f043 0301 	orr.w	r3, r3, #1
   24e12:	7153      	strb	r3, [r2, #5]
   24e14:	4622      	mov	r2, r4
   24e16:	e7f4      	b.n	24e02 <net_buf_put+0x4>

00024e18 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   24e18:	7902      	ldrb	r2, [r0, #4]
   24e1a:	3201      	adds	r2, #1
   24e1c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   24e1e:	4770      	bx	lr

00024e20 <net_buf_simple_add>:
	return buf->data + buf->len;
   24e20:	8883      	ldrh	r3, [r0, #4]
   24e22:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   24e24:	4419      	add	r1, r3
   24e26:	8081      	strh	r1, [r0, #4]
	return tail;
}
   24e28:	18d0      	adds	r0, r2, r3
   24e2a:	4770      	bx	lr

00024e2c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   24e2c:	b430      	push	{r4, r5}
   24e2e:	8884      	ldrh	r4, [r0, #4]
   24e30:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   24e32:	18a3      	adds	r3, r4, r2
   24e34:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24e36:	1928      	adds	r0, r5, r4
}
   24e38:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24e3a:	f7fc bddd 	b.w	219f8 <memcpy>

00024e3e <net_buf_simple_add_u8>:
   24e3e:	8883      	ldrh	r3, [r0, #4]
   24e40:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   24e42:	b510      	push	{r4, lr}
	buf->len += len;
   24e44:	1c5c      	adds	r4, r3, #1
   24e46:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   24e48:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   24e4a:	18d0      	adds	r0, r2, r3
   24e4c:	bd10      	pop	{r4, pc}

00024e4e <net_buf_simple_add_le16>:
   24e4e:	8883      	ldrh	r3, [r0, #4]
   24e50:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   24e52:	b530      	push	{r4, r5, lr}
   24e54:	18d4      	adds	r4, r2, r3
	buf->len += len;
   24e56:	1c9d      	adds	r5, r3, #2
   24e58:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   24e5a:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   24e5c:	0a09      	lsrs	r1, r1, #8
   24e5e:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   24e60:	bd30      	pop	{r4, r5, pc}

00024e62 <net_buf_simple_add_be16>:
   24e62:	8883      	ldrh	r3, [r0, #4]
   24e64:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   24e66:	b530      	push	{r4, r5, lr}
	buf->len += len;
   24e68:	1c9d      	adds	r5, r3, #2
   24e6a:	8085      	strh	r5, [r0, #4]
   24e6c:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   24e6e:	0a08      	lsrs	r0, r1, #8
   24e70:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   24e72:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   24e74:	bd30      	pop	{r4, r5, pc}

00024e76 <net_buf_simple_add_le24>:
   24e76:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le24(struct net_buf_simple *buf, uint32_t val)
{
   24e78:	b530      	push	{r4, r5, lr}
   24e7a:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   24e7c:	1cdd      	adds	r5, r3, #3
   24e7e:	18e2      	adds	r2, r4, r3
   24e80:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   24e82:	54e1      	strb	r1, [r4, r3]
	dst[1] = val >> 8;
   24e84:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[2] = val >> 16;
   24e88:	0c09      	lsrs	r1, r1, #16
	dst[1] = val >> 8;
   24e8a:	7053      	strb	r3, [r2, #1]
	dst[2] = val >> 16;
   24e8c:	7091      	strb	r1, [r2, #2]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le24(val, net_buf_simple_add(buf, 3));
}
   24e8e:	bd30      	pop	{r4, r5, pc}

00024e90 <net_buf_simple_add_be32>:

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   24e90:	4603      	mov	r3, r0
   24e92:	4608      	mov	r0, r1
   24e94:	889a      	ldrh	r2, [r3, #4]
   24e96:	6819      	ldr	r1, [r3, #0]
   24e98:	b410      	push	{r4}
	buf->len += len;
   24e9a:	1d14      	adds	r4, r2, #4
   24e9c:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   24e9e:	4411      	add	r1, r2
}
   24ea0:	bc10      	pop	{r4}
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   24ea2:	f7ff bf30 	b.w	24d06 <sys_put_be32>

00024ea6 <net_buf_simple_push_be16>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   24ea6:	6803      	ldr	r3, [r0, #0]
   24ea8:	1e9a      	subs	r2, r3, #2
   24eaa:	6002      	str	r2, [r0, #0]
	buf->len += len;
   24eac:	8882      	ldrh	r2, [r0, #4]
   24eae:	3202      	adds	r2, #2
   24eb0:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   24eb2:	0a0a      	lsrs	r2, r1, #8
   24eb4:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   24eb8:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   24ebc:	4770      	bx	lr

00024ebe <net_buf_simple_push_u8>:
	buf->data -= len;
   24ebe:	6802      	ldr	r2, [r0, #0]
   24ec0:	1e53      	subs	r3, r2, #1
   24ec2:	6003      	str	r3, [r0, #0]
	buf->len += len;
   24ec4:	8883      	ldrh	r3, [r0, #4]
   24ec6:	3301      	adds	r3, #1
   24ec8:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   24eca:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   24ece:	4770      	bx	lr

00024ed0 <net_buf_simple_push_be24>:
	buf->data -= len;
   24ed0:	6803      	ldr	r3, [r0, #0]
   24ed2:	1eda      	subs	r2, r3, #3
   24ed4:	6002      	str	r2, [r0, #0]
	buf->len += len;
   24ed6:	8882      	ldrh	r2, [r0, #4]
   24ed8:	3203      	adds	r2, #3
   24eda:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   24edc:	0c0a      	lsrs	r2, r1, #16
   24ede:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   24ee2:	f3c1 2207 	ubfx	r2, r1, #8, #8
   24ee6:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   24eea:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   24eee:	4770      	bx	lr

00024ef0 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24ef0:	8882      	ldrh	r2, [r0, #4]
   24ef2:	1a52      	subs	r2, r2, r1
{
   24ef4:	4603      	mov	r3, r0
	buf->len -= len;
   24ef6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   24ef8:	6800      	ldr	r0, [r0, #0]
   24efa:	4408      	add	r0, r1
   24efc:	6018      	str	r0, [r3, #0]
}
   24efe:	4770      	bx	lr

00024f00 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   24f00:	4603      	mov	r3, r0
	void *data = buf->data;
   24f02:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24f04:	889a      	ldrh	r2, [r3, #4]
   24f06:	1a52      	subs	r2, r2, r1
	buf->data += len;
   24f08:	4401      	add	r1, r0
	buf->len -= len;
   24f0a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   24f0c:	6019      	str	r1, [r3, #0]

	return data;
}
   24f0e:	4770      	bx	lr

00024f10 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   24f10:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   24f12:	6803      	ldr	r3, [r0, #0]
   24f14:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   24f16:	2101      	movs	r1, #1
   24f18:	f7ff ffea 	bl	24ef0 <net_buf_simple_pull>

	return val;
}
   24f1c:	4620      	mov	r0, r4
   24f1e:	bd10      	pop	{r4, pc}

00024f20 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   24f20:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   24f22:	6803      	ldr	r3, [r0, #0]
   24f24:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24f26:	2102      	movs	r1, #2
   24f28:	f7ff ffe2 	bl	24ef0 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   24f2c:	4620      	mov	r0, r4
   24f2e:	bd10      	pop	{r4, pc}

00024f30 <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   24f30:	6803      	ldr	r3, [r0, #0]
{
   24f32:	b510      	push	{r4, lr}
   24f34:	881c      	ldrh	r4, [r3, #0]
   24f36:	ba64      	rev16	r4, r4
   24f38:	b2a4      	uxth	r4, r4
	net_buf_simple_pull(buf, sizeof(val));
   24f3a:	2102      	movs	r1, #2
   24f3c:	f7ff ffd8 	bl	24ef0 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
}
   24f40:	4620      	mov	r0, r4
   24f42:	bd10      	pop	{r4, pc}

00024f44 <net_buf_simple_pull_le24>:
{
	struct uint24 {
		uint32_t u24:24;
	} __packed val;

	val = UNALIGNED_GET((struct uint24 *)buf->data);
   24f44:	6803      	ldr	r3, [r0, #0]
{
   24f46:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   24f48:	785a      	ldrb	r2, [r3, #1]
   24f4a:	781c      	ldrb	r4, [r3, #0]
   24f4c:	789b      	ldrb	r3, [r3, #2]
   24f4e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   24f52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	net_buf_simple_pull(buf, sizeof(val));
   24f56:	2103      	movs	r1, #3
   24f58:	f7ff ffca 	bl	24ef0 <net_buf_simple_pull>

	return sys_le24_to_cpu(val.u24);
}
   24f5c:	4620      	mov	r0, r4
   24f5e:	bd10      	pop	{r4, pc}

00024f60 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   24f60:	b510      	push	{r4, lr}
   24f62:	6803      	ldr	r3, [r0, #0]
   24f64:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   24f66:	2104      	movs	r1, #4
   24f68:	ba24      	rev	r4, r4
   24f6a:	f7ff ffc1 	bl	24ef0 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   24f6e:	4620      	mov	r0, r4
   24f70:	bd10      	pop	{r4, pc}

00024f72 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   24f72:	6802      	ldr	r2, [r0, #0]
   24f74:	6880      	ldr	r0, [r0, #8]
}
   24f76:	1a10      	subs	r0, r2, r0
   24f78:	4770      	bx	lr

00024f7a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24f7a:	8883      	ldrh	r3, [r0, #4]
   24f7c:	88c2      	ldrh	r2, [r0, #6]
   24f7e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   24f80:	6803      	ldr	r3, [r0, #0]
   24f82:	6880      	ldr	r0, [r0, #8]
   24f84:	1a18      	subs	r0, r3, r0
}
   24f86:	1a10      	subs	r0, r2, r0
   24f88:	4770      	bx	lr

00024f8a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   24f8a:	6903      	ldr	r3, [r0, #16]
   24f8c:	b2c9      	uxtb	r1, r1
   24f8e:	220c      	movs	r2, #12
   24f90:	fb01 3302 	mla	r3, r1, r2, r3
   24f94:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   24f96:	f000 0007 	and.w	r0, r0, #7
   24f9a:	4770      	bx	lr

00024f9c <set_on_state>:
	__asm__ volatile(
   24f9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fa0:	f3ef 8211 	mrs	r2, BASEPRI
   24fa4:	f383 8812 	msr	BASEPRI_MAX, r3
   24fa8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   24fac:	6803      	ldr	r3, [r0, #0]
   24fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   24fb2:	f043 0302 	orr.w	r3, r3, #2
   24fb6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   24fb8:	f382 8811 	msr	BASEPRI, r2
   24fbc:	f3bf 8f6f 	isb	sy
}
   24fc0:	4770      	bx	lr

00024fc2 <stop>:
{
   24fc2:	4603      	mov	r3, r0
   24fc4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   24fc6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   24fc8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   24fca:	f04f 0440 	mov.w	r4, #64	; 0x40
   24fce:	f3ef 8611 	mrs	r6, BASEPRI
   24fd2:	f384 8812 	msr	BASEPRI_MAX, r4
   24fd6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24fda:	250c      	movs	r5, #12
   24fdc:	fb05 0401 	mla	r4, r5, r1, r0
   24fe0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   24fe2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   24fe6:	d001      	beq.n	24fec <stop+0x2a>
   24fe8:	42a2      	cmp	r2, r4
   24fea:	d110      	bne.n	2500e <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   24fec:	fb05 0001 	mla	r0, r5, r1, r0
   24ff0:	2201      	movs	r2, #1
   24ff2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   24ff4:	2000      	movs	r0, #0
	__asm__ volatile(
   24ff6:	f386 8811 	msr	BASEPRI, r6
   24ffa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   24ffe:	b928      	cbnz	r0, 2500c <stop+0x4a>
	get_sub_config(dev, type)->stop();
   25000:	685b      	ldr	r3, [r3, #4]
   25002:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   25006:	684b      	ldr	r3, [r1, #4]
   25008:	4798      	blx	r3
	return 0;
   2500a:	2000      	movs	r0, #0
}
   2500c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2500e:	f04f 30ff 	mov.w	r0, #4294967295
   25012:	e7f0      	b.n	24ff6 <stop+0x34>

00025014 <api_stop>:
	return stop(dev, subsys, CTX_API);
   25014:	2280      	movs	r2, #128	; 0x80
   25016:	f7ff bfd4 	b.w	24fc2 <stop>

0002501a <async_start>:
{
   2501a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2501c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2501e:	6904      	ldr	r4, [r0, #16]
{
   25020:	4605      	mov	r5, r0
   25022:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   25024:	f04f 0040 	mov.w	r0, #64	; 0x40
   25028:	f3ef 8c11 	mrs	ip, BASEPRI
   2502c:	f380 8812 	msr	BASEPRI_MAX, r0
   25030:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25034:	260c      	movs	r6, #12
   25036:	fb06 4601 	mla	r6, r6, r1, r4
   2503a:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2503c:	f000 0e07 	and.w	lr, r0, #7
   25040:	f1be 0f01 	cmp.w	lr, #1
   25044:	d111      	bne.n	2506a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   25046:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   25048:	2600      	movs	r6, #0
	__asm__ volatile(
   2504a:	f38c 8811 	msr	BASEPRI, ip
   2504e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   25052:	b946      	cbnz	r6, 25066 <async_start+0x4c>
	subdata->cb = cb;
   25054:	200c      	movs	r0, #12
   25056:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   2505a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2505e:	686b      	ldr	r3, [r5, #4]
   25060:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   25064:	4798      	blx	r3
}
   25066:	4630      	mov	r0, r6
   25068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2506a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2506e:	4287      	cmp	r7, r0
   25070:	bf14      	ite	ne
   25072:	f04f 36ff 	movne.w	r6, #4294967295
   25076:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2507a:	e7e6      	b.n	2504a <async_start+0x30>

0002507c <api_start>:
{
   2507c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2507e:	2480      	movs	r4, #128	; 0x80
   25080:	9400      	str	r4, [sp, #0]
   25082:	f7ff ffca 	bl	2501a <async_start>
}
   25086:	b002      	add	sp, #8
   25088:	bd10      	pop	{r4, pc}

0002508a <onoff_started_callback>:
	return &data->mgr[type];
   2508a:	6900      	ldr	r0, [r0, #16]
{
   2508c:	b410      	push	{r4}
	return &data->mgr[type];
   2508e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   25090:	241c      	movs	r4, #28
   25092:	fb03 0004 	mla	r0, r3, r4, r0
   25096:	2100      	movs	r1, #0
}
   25098:	bc10      	pop	{r4}
	notify(mgr, 0);
   2509a:	4710      	bx	r2

0002509c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2509c:	2000      	movs	r0, #0
   2509e:	f7f8 baff 	b.w	1d6a0 <nrfx_clock_start>

000250a2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   250a2:	2000      	movs	r0, #0
   250a4:	f000 baaf 	b.w	25606 <nrfx_clock_stop>

000250a8 <blocking_start_callback>:
{
   250a8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   250aa:	f7f9 bbc7 	b.w	1e83c <z_impl_k_sem_give>

000250ae <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   250ae:	6843      	ldr	r3, [r0, #4]
   250b0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   250b2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   250b6:	600b      	str	r3, [r1, #0]
}
   250b8:	2000      	movs	r0, #0
   250ba:	4770      	bx	lr

000250bc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   250bc:	6843      	ldr	r3, [r0, #4]
   250be:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   250c0:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   250c4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   250c8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   250cc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   250d0:	2000      	movs	r0, #0
   250d2:	4770      	bx	lr

000250d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   250d4:	6843      	ldr	r3, [r0, #4]
   250d6:	685b      	ldr	r3, [r3, #4]
}
   250d8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   250da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   250de:	4770      	bx	lr

000250e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   250e0:	6843      	ldr	r3, [r0, #4]
   250e2:	685b      	ldr	r3, [r3, #4]
}
   250e4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   250e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   250ea:	4770      	bx	lr

000250ec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   250ec:	6843      	ldr	r3, [r0, #4]
   250ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   250f0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   250f4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   250f8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   250fa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   250fe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   25102:	2000      	movs	r0, #0
   25104:	4770      	bx	lr

00025106 <gpio_nrfx_manage_callback>:
	return port->data;
   25106:	6903      	ldr	r3, [r0, #16]
	return list->head;
   25108:	6858      	ldr	r0, [r3, #4]
{
   2510a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2510c:	b158      	cbz	r0, 25126 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2510e:	2400      	movs	r4, #0
   25110:	4281      	cmp	r1, r0
   25112:	d112      	bne.n	2513a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   25114:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   25116:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   25118:	b954      	cbnz	r4, 25130 <gpio_nrfx_manage_callback+0x2a>
   2511a:	428d      	cmp	r5, r1
	list->head = node;
   2511c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2511e:	d100      	bne.n	25122 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   25120:	6098      	str	r0, [r3, #8]
	parent->next = child;
   25122:	2000      	movs	r0, #0
   25124:	6008      	str	r0, [r1, #0]
	if (set) {
   25126:	b96a      	cbnz	r2, 25144 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   25128:	2000      	movs	r0, #0
}
   2512a:	bd30      	pop	{r4, r5, pc}
   2512c:	4628      	mov	r0, r5
   2512e:	e7ef      	b.n	25110 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   25130:	428d      	cmp	r5, r1
	parent->next = child;
   25132:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25134:	bf08      	it	eq
   25136:	609c      	streq	r4, [r3, #8]
}
   25138:	e7f3      	b.n	25122 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2513a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2513c:	4604      	mov	r4, r0
   2513e:	2d00      	cmp	r5, #0
   25140:	d1f4      	bne.n	2512c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   25142:	b13a      	cbz	r2, 25154 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   25144:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   25146:	685a      	ldr	r2, [r3, #4]
   25148:	600a      	str	r2, [r1, #0]
	list->head = node;
   2514a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2514c:	2800      	cmp	r0, #0
   2514e:	d1eb      	bne.n	25128 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   25150:	6099      	str	r1, [r3, #8]
}
   25152:	e7ea      	b.n	2512a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   25154:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25158:	e7e7      	b.n	2512a <gpio_nrfx_manage_callback+0x24>

0002515a <erase_op>:
{
   2515a:	b570      	push	{r4, r5, r6, lr}
   2515c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2515e:	f000 fabc 	bl	256da <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   25162:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   25164:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   25166:	b10b      	cbz	r3, 2516c <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   25168:	f000 fa57 	bl	2561a <nrf_flash_sync_get_timestamp_begin>
{
   2516c:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2516e:	6860      	ldr	r0, [r4, #4]
   25170:	f7f8 ffe8 	bl	1e144 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   25174:	68a3      	ldr	r3, [r4, #8]
   25176:	1b5b      	subs	r3, r3, r5
   25178:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2517a:	6863      	ldr	r3, [r4, #4]
   2517c:	442b      	add	r3, r5
   2517e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   25180:	7b23      	ldrb	r3, [r4, #12]
		i++;
   25182:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   25184:	b93b      	cbnz	r3, 25196 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   25186:	68a3      	ldr	r3, [r4, #8]
   25188:	2b00      	cmp	r3, #0
   2518a:	d1f0      	bne.n	2516e <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2518c:	68a0      	ldr	r0, [r4, #8]
}
   2518e:	3800      	subs	r0, #0
   25190:	bf18      	it	ne
   25192:	2001      	movne	r0, #1
   25194:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   25196:	4630      	mov	r0, r6
   25198:	f7f8 fb56 	bl	1d848 <nrf_flash_sync_check_time_limit>
   2519c:	2800      	cmp	r0, #0
   2519e:	d0f2      	beq.n	25186 <erase_op+0x2c>
   251a0:	e7f4      	b.n	2518c <erase_op+0x32>

000251a2 <is_regular_addr_valid>:
{
   251a2:	b538      	push	{r3, r4, r5, lr}
   251a4:	4605      	mov	r5, r0
   251a6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   251a8:	f000 fa91 	bl	256ce <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   251ac:	2d00      	cmp	r5, #0
   251ae:	db07      	blt.n	251c0 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   251b0:	42a8      	cmp	r0, r5
   251b2:	d905      	bls.n	251c0 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   251b4:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   251b6:	4284      	cmp	r4, r0
   251b8:	bf8c      	ite	hi
   251ba:	2000      	movhi	r0, #0
   251bc:	2001      	movls	r0, #1
}
   251be:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   251c0:	2000      	movs	r0, #0
   251c2:	e7fc      	b.n	251be <is_regular_addr_valid+0x1c>

000251c4 <flash_nrf_read>:
{
   251c4:	b570      	push	{r4, r5, r6, lr}
   251c6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   251c8:	4628      	mov	r0, r5
   251ca:	4619      	mov	r1, r3
{
   251cc:	4616      	mov	r6, r2
   251ce:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   251d0:	f7ff ffe7 	bl	251a2 <is_regular_addr_valid>
   251d4:	b138      	cbz	r0, 251e6 <flash_nrf_read+0x22>
	if (!len) {
   251d6:	b14c      	cbz	r4, 251ec <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   251d8:	4622      	mov	r2, r4
   251da:	4629      	mov	r1, r5
   251dc:	4630      	mov	r0, r6
   251de:	f7fc fc0b 	bl	219f8 <memcpy>
	return 0;
   251e2:	2000      	movs	r0, #0
}
   251e4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   251e6:	f06f 0015 	mvn.w	r0, #21
   251ea:	e7fb      	b.n	251e4 <flash_nrf_read+0x20>
		return 0;
   251ec:	4620      	mov	r0, r4
   251ee:	e7f9      	b.n	251e4 <flash_nrf_read+0x20>

000251f0 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   251f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   251f4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   251f6:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   251f8:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   251fc:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   251fe:	f8c4 8000 	str.w	r8, [r4]
{
   25202:	460d      	mov	r5, r1
   25204:	4616      	mov	r6, r2
	info->index = 0U;
   25206:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   2520a:	aa01      	add	r2, sp, #4
   2520c:	4669      	mov	r1, sp
   2520e:	4798      	blx	r3

	while (layout_size--) {
   25210:	e9dd 7c00 	ldrd	r7, ip, [sp]
   25214:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   25216:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   2521a:	4560      	cmp	r0, ip
   2521c:	d104      	bne.n	25228 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2521e:	f06f 0015 	mvn.w	r0, #21
}
   25222:	b003      	add	sp, #12
   25224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   25228:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   2522c:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   2522e:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   25230:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   25234:	b985      	cbnz	r5, 25258 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   25236:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   25238:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   2523c:	4543      	cmp	r3, r8
   2523e:	bf28      	it	cs
   25240:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   25242:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   25246:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   25248:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   2524a:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   2524c:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2524e:	f100 0001 	add.w	r0, r0, #1
   25252:	d9e2      	bls.n	2521a <flash_get_page_info+0x2a>
			return 0;
   25254:	2000      	movs	r0, #0
   25256:	e7e4      	b.n	25222 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   25258:	1aab      	subs	r3, r5, r2
   2525a:	fbb3 f3f9 	udiv	r3, r3, r9
   2525e:	e7eb      	b.n	25238 <flash_get_page_info+0x48>

00025260 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   25260:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   25262:	2200      	movs	r2, #0
   25264:	f7ff bfc4 	b.w	251f0 <flash_get_page_info>

00025268 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   25268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2526c:	6883      	ldr	r3, [r0, #8]
{
   2526e:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   25270:	691b      	ldr	r3, [r3, #16]
{
   25272:	4688      	mov	r8, r1
   25274:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   25276:	a901      	add	r1, sp, #4
   25278:	aa02      	add	r2, sp, #8
   2527a:	4798      	blx	r3
	off_t off = 0;
   2527c:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2527e:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   25280:	4625      	mov	r5, r4
   25282:	9b02      	ldr	r3, [sp, #8]
   25284:	42ab      	cmp	r3, r5
   25286:	d802      	bhi.n	2528e <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   25288:	b006      	add	sp, #24
   2528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2528e:	9f01      	ldr	r7, [sp, #4]
   25290:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   25294:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   25296:	687b      	ldr	r3, [r7, #4]
   25298:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2529a:	683a      	ldr	r2, [r7, #0]
   2529c:	42b2      	cmp	r2, r6
   2529e:	eb0a 0306 	add.w	r3, sl, r6
   252a2:	d802      	bhi.n	252aa <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   252a4:	3501      	adds	r5, #1
   252a6:	469a      	mov	sl, r3
   252a8:	e7eb      	b.n	25282 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   252aa:	4649      	mov	r1, r9
   252ac:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   252ae:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   252b0:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   252b2:	47c0      	blx	r8
   252b4:	2800      	cmp	r0, #0
   252b6:	d0e7      	beq.n	25288 <flash_page_foreach+0x20>
			off += page_info.size;
   252b8:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   252ba:	3601      	adds	r6, #1
			off += page_info.size;
   252bc:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   252be:	e7ec      	b.n	2529a <flash_page_foreach+0x32>

000252c0 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   252c0:	6902      	ldr	r2, [r0, #16]
{
   252c2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   252c4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   252c8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   252cc:	2000      	movs	r0, #0
   252ce:	4770      	bx	lr

000252d0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   252d0:	6843      	ldr	r3, [r0, #4]
   252d2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   252d4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   252d8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   252dc:	4770      	bx	lr

000252de <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   252de:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   252e0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   252e2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   252e4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   252e8:	b150      	cbz	r0, 25300 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   252ea:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   252ec:	2000      	movs	r0, #0
   252ee:	7812      	ldrb	r2, [r2, #0]
   252f0:	700a      	strb	r2, [r1, #0]
   252f2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   252f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   252fa:	2201      	movs	r2, #1
   252fc:	601a      	str	r2, [r3, #0]
	return 0;
   252fe:	4770      	bx	lr
		return -1;
   25300:	f04f 30ff 	mov.w	r0, #4294967295
}
   25304:	4770      	bx	lr

00025306 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   25306:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   25308:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2530a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2530e:	b940      	cbnz	r0, 25322 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   25310:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   25312:	079b      	lsls	r3, r3, #30
   25314:	d406      	bmi.n	25324 <is_tx_ready.isra.0+0x1e>
   25316:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2531a:	3800      	subs	r0, #0
   2531c:	bf18      	it	ne
   2531e:	2001      	movne	r0, #1
   25320:	4770      	bx	lr
   25322:	2001      	movs	r0, #1
}
   25324:	4770      	bx	lr

00025326 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   25326:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   25328:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2532a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2532e:	05c9      	lsls	r1, r1, #23
   25330:	d518      	bpl.n	25364 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25332:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   25336:	b1a9      	cbz	r1, 25364 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   25338:	f04f 0040 	mov.w	r0, #64	; 0x40
   2533c:	f3ef 8111 	mrs	r1, BASEPRI
   25340:	f380 8812 	msr	BASEPRI_MAX, r0
   25344:	f3bf 8f6f 	isb	sy
   25348:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2534c:	b130      	cbz	r0, 2535c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2534e:	2000      	movs	r0, #0
   25350:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   25354:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25358:	2001      	movs	r0, #1
   2535a:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2535c:	f381 8811 	msr	BASEPRI, r1
   25360:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25364:	6852      	ldr	r2, [r2, #4]
   25366:	06d2      	lsls	r2, r2, #27
   25368:	d515      	bpl.n	25396 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2536a:	f04f 0140 	mov.w	r1, #64	; 0x40
   2536e:	f3ef 8211 	mrs	r2, BASEPRI
   25372:	f381 8812 	msr	BASEPRI_MAX, r1
   25376:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2537a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2537e:	b111      	cbz	r1, 25386 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   25380:	2100      	movs	r1, #0
   25382:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   25386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2538a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2538e:	f382 8811 	msr	BASEPRI, r2
   25392:	f3bf 8f6f 	isb	sy
}
   25396:	4770      	bx	lr

00025398 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   25398:	b510      	push	{r4, lr}
   2539a:	2200      	movs	r2, #0
   2539c:	4604      	mov	r4, r0
   2539e:	2101      	movs	r1, #1
   253a0:	2028      	movs	r0, #40	; 0x28
   253a2:	f7ed f90d 	bl	125c0 <z_arm_irq_priority_set>
   253a6:	2028      	movs	r0, #40	; 0x28
   253a8:	f7ed f8d8 	bl	1255c <arch_irq_enable>
   253ac:	4620      	mov	r0, r4
   253ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   253b2:	f7f7 b8e7 	b.w	1c584 <uarte_instance_init.constprop.0>

000253b6 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   253b6:	b510      	push	{r4, lr}
   253b8:	2200      	movs	r2, #0
   253ba:	4604      	mov	r4, r0
   253bc:	2101      	movs	r1, #1
   253be:	2002      	movs	r0, #2
   253c0:	f7ed f8fe 	bl	125c0 <z_arm_irq_priority_set>
   253c4:	2002      	movs	r0, #2
   253c6:	f7ed f8c9 	bl	1255c <arch_irq_enable>
   253ca:	4620      	mov	r0, r4
   253cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   253d0:	f7f7 b8d8 	b.w	1c584 <uarte_instance_init.constprop.0>

000253d4 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   253d4:	2000      	movs	r0, #0
   253d6:	4770      	bx	lr

000253d8 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   253d8:	b538      	push	{r3, r4, r5, lr}
   253da:	460c      	mov	r4, r1
   253dc:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   253de:	f7ee fbf7 	bl	13bd0 <bt_is_ready>
   253e2:	b128      	cbz	r0, 253f0 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   253e4:	4629      	mov	r1, r5
   253e6:	4620      	mov	r0, r4
}
   253e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   253ec:	f7ee b92e 	b.w	1364c <bt_hci_le_rand>
}
   253f0:	f06f 000a 	mvn.w	r0, #10
   253f4:	bd38      	pop	{r3, r4, r5, pc}

000253f6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   253f6:	4770      	bx	lr

000253f8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   253f8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   253fa:	6843      	ldr	r3, [r0, #4]
   253fc:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   253fe:	7a03      	ldrb	r3, [r0, #8]
   25400:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   25404:	3b01      	subs	r3, #1
   25406:	00db      	lsls	r3, r3, #3
   25408:	6845      	ldr	r5, [r0, #4]
   2540a:	6814      	ldr	r4, [r2, #0]
   2540c:	441d      	add	r5, r3
   2540e:	42ac      	cmp	r4, r5
   25410:	d902      	bls.n	25418 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   25412:	f06f 0001 	mvn.w	r0, #1
}
   25416:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   25418:	7965      	ldrb	r5, [r4, #5]
   2541a:	428d      	cmp	r5, r1
   2541c:	d002      	beq.n	25424 <pinctrl_lookup_state+0x2c>
		(*state)++;
   2541e:	3408      	adds	r4, #8
   25420:	6014      	str	r4, [r2, #0]
   25422:	e7f1      	b.n	25408 <pinctrl_lookup_state+0x10>
			return 0;
   25424:	2000      	movs	r0, #0
   25426:	e7f6      	b.n	25416 <pinctrl_lookup_state+0x1e>

00025428 <nrf_gpio_pin_write>:
    if (value == 0)
   25428:	b909      	cbnz	r1, 2542e <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   2542a:	f7f7 bd11 	b.w	1ce50 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2542e:	f7f7 bd41 	b.w	1ceb4 <nrf_gpio_pin_set>

00025432 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   25432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25436:	4616      	mov	r6, r2
   25438:	4605      	mov	r5, r0
   2543a:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2543e:	42af      	cmp	r7, r5
   25440:	d102      	bne.n	25448 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   25442:	2000      	movs	r0, #0
}
   25444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   25448:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   2544a:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2544c:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   25450:	2b19      	cmp	r3, #25
   25452:	d871      	bhi.n	25538 <pinctrl_configure_pins+0x106>
   25454:	e8df f003 	tbb	[pc, r3]
   25458:	2621190d 	.word	0x2621190d
   2545c:	70263c2b 	.word	0x70263c2b
   25460:	46707070 	.word	0x46707070
   25464:	70707050 	.word	0x70707050
   25468:	70707070 	.word	0x70707070
   2546c:	61557070 	.word	0x61557070
   25470:	6b66      	.short	0x6b66
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   25472:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25476:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2547a:	6828      	ldr	r0, [r5, #0]
   2547c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   25480:	f7f7 fd18 	bl	1ceb4 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   25484:	4643      	mov	r3, r8
   25486:	2201      	movs	r2, #1
   25488:	e005      	b.n	25496 <pinctrl_configure_pins+0x64>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2548a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2548e:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   25492:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   25494:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   25496:	4611      	mov	r1, r2
   25498:	e015      	b.n	254c6 <pinctrl_configure_pins+0x94>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   2549a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2549e:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   254a2:	e7ea      	b.n	2547a <pinctrl_configure_pins+0x48>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   254a4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254a8:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   254ac:	e7f1      	b.n	25492 <pinctrl_configure_pins+0x60>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   254ae:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254b2:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   254b6:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   254b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   254bc:	f7f7 fcc8 	bl	1ce50 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   254c0:	4643      	mov	r3, r8
   254c2:	2200      	movs	r2, #0
   254c4:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   254c6:	6828      	ldr	r0, [r5, #0]
   254c8:	f7f7 fcd2 	bl	1ce70 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   254cc:	3504      	adds	r5, #4
   254ce:	e7b6      	b.n	2543e <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   254d0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254d4:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   254d8:	6828      	ldr	r0, [r5, #0]
   254da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   254de:	f7f7 fcb7 	bl	1ce50 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   254e2:	e7cf      	b.n	25484 <pinctrl_configure_pins+0x52>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   254e4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254e8:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
   254ec:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   254f0:	bf14      	ite	ne
   254f2:	4643      	movne	r3, r8
   254f4:	2306      	moveq	r3, #6
   254f6:	e7cd      	b.n	25494 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   254f8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254fc:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
   25500:	e7f4      	b.n	254ec <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   25502:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25506:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2550a:	6828      	ldr	r0, [r5, #0]
   2550c:	f3c0 3140 	ubfx	r1, r0, #13, #1
   25510:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   25514:	f7ff ff88 	bl	25428 <nrf_gpio_pin_write>
   25518:	e7b4      	b.n	25484 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2551a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2551e:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   25522:	e7f2      	b.n	2550a <pinctrl_configure_pins+0xd8>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   25524:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25528:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2552c:	e7ed      	b.n	2550a <pinctrl_configure_pins+0xd8>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2552e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25532:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   25536:	e7e8      	b.n	2550a <pinctrl_configure_pins+0xd8>
		switch (NRF_GET_FUN(pins[i])) {
   25538:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2553c:	e782      	b.n	25444 <pinctrl_configure_pins+0x12>

0002553e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2553e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   25540:	2000      	movs	r0, #0
   25542:	f7ed fbc3 	bl	12ccc <sys_arch_reboot>

00025546 <sdc_assertion_handler>:
	k_oops();
   25546:	4040      	eors	r0, r0
   25548:	f380 8811 	msr	BASEPRI, r0
   2554c:	f04f 0003 	mov.w	r0, #3
   25550:	df02      	svc	2
}
   25552:	4770      	bx	lr

00025554 <rand_prio_high_vector_get>:
   25554:	f7f7 bd72 	b.w	1d03c <rand_prio_low_vector_get>

00025558 <receive_work_handler>:
	hci_driver_receive_process();
   25558:	f7f7 bdde 	b.w	1d118 <hci_driver_receive_process>

0002555c <bt_encrypt_be>:
}

int bt_encrypt_be(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2555e:	4605      	mov	r5, r0
   25560:	460e      	mov	r6, r1
	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   25562:	f04f 30ff 	mov.w	r0, #4294967295
   25566:	f04f 31ff 	mov.w	r1, #4294967295
{
   2556a:	4617      	mov	r7, r2
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2556c:	f7f7 fcb2 	bl	1ced4 <multithreading_lock_acquire>

	if (!errcode) {
   25570:	4604      	mov	r4, r0
   25572:	b938      	cbnz	r0, 25584 <bt_encrypt_be+0x28>
		errcode = sdc_soc_ecb_block_encrypt(key, plaintext, enc_data);
   25574:	463a      	mov	r2, r7
   25576:	4631      	mov	r1, r6
   25578:	4628      	mov	r0, r5
   2557a:	f7e7 fee6 	bl	d34a <sdc_soc_ecb_block_encrypt>
   2557e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   25580:	f7f7 fcb0 	bl	1cee4 <multithreading_lock_release>
	if (!errcode) {
		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   25584:	4620      	mov	r0, r4
   25586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025588 <m_assert_handler>:
	k_oops();
   25588:	4040      	eors	r0, r0
   2558a:	f380 8811 	msr	BASEPRI, r0
   2558e:	f04f 0003 	mov.w	r0, #3
   25592:	df02      	svc	2
}
   25594:	4770      	bx	lr

00025596 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   25596:	4668      	mov	r0, sp
   25598:	f020 0107 	bic.w	r1, r0, #7
   2559c:	468d      	mov	sp, r1
   2559e:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   255a0:	f7dd f9ce 	bl	2940 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   255a4:	f7ed f826 	bl	125f4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   255a8:	f7ed f90e 	bl	127c8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   255ac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   255b0:	4685      	mov	sp, r0
   255b2:	4770      	bx	lr

000255b4 <mpsl_low_prio_work_handler>:
{
   255b4:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   255b6:	f04f 31ff 	mov.w	r1, #4294967295
   255ba:	f04f 30ff 	mov.w	r0, #4294967295
   255be:	f7f7 fc89 	bl	1ced4 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   255c2:	f7e7 fcec 	bl	cf9e <mpsl_low_priority_process>
}
   255c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   255ca:	f7f7 bc8b 	b.w	1cee4 <multithreading_lock_release>

000255ce <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   255ce:	4668      	mov	r0, sp
   255d0:	f020 0107 	bic.w	r1, r0, #7
   255d4:	468d      	mov	sp, r1
   255d6:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   255d8:	f7dd f928 	bl	282c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   255dc:	f7ed f80a 	bl	125f4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   255e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   255e4:	4685      	mov	sp, r0
   255e6:	4770      	bx	lr

000255e8 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   255e8:	4668      	mov	r0, sp
   255ea:	f020 0107 	bic.w	r1, r0, #7
   255ee:	468d      	mov	sp, r1
   255f0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   255f2:	f7da fea3 	bl	33c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   255f6:	f7ec fffd 	bl	125f4 <_arch_isr_direct_pm>
   255fa:	f7ed f8e5 	bl	127c8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   255fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   25602:	4685      	mov	sp, r0
   25604:	4770      	bx	lr

00025606 <nrfx_clock_stop>:
	switch (domain) {
   25606:	2801      	cmp	r0, #1
   25608:	d101      	bne.n	2560e <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2560a:	f7de b80f 	b.w	362c <mpsl_clock_hfclk_release>
}
   2560e:	4770      	bx	lr

00025610 <nrfx_clock_enable>:
}
   25610:	4770      	bx	lr

00025612 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   25612:	f7dd be1f 	b.w	3254 <MPSL_IRQ_CLOCK_Handler>

00025616 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   25616:	f7de b9bb 	b.w	3990 <mpsl_is_initialized>

0002561a <nrf_flash_sync_get_timestamp_begin>:
}
   2561a:	4770      	bx	lr

0002561c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2561c:	4700      	bx	r0

0002561e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2561e:	f000 bc2f 	b.w	25e80 <z_impl_k_busy_wait>

00025622 <nrf_gpio_reconfigure>:
{
   25622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25624:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25626:	a801      	add	r0, sp, #4
{
   25628:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2562c:	4617      	mov	r7, r2
   2562e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25630:	f7f8 fa1c 	bl	1da6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   25634:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   25636:	2f00      	cmp	r7, #0
   25638:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2563c:	bf14      	ite	ne
   2563e:	2302      	movne	r3, #2
   25640:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   25642:	2900      	cmp	r1, #0
   25644:	bf18      	it	ne
   25646:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2564a:	2d00      	cmp	r5, #0
   2564c:	bf14      	ite	ne
   2564e:	f04f 0c0c 	movne.w	ip, #12
   25652:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   25656:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   25658:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2565c:	bf14      	ite	ne
   2565e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   25662:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25666:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   25668:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2566c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25670:	bf14      	ite	ne
   25672:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   25676:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2567a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2567e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   25682:	b101      	cbz	r1, 25686 <nrf_gpio_reconfigure+0x64>
   25684:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   25686:	b10f      	cbz	r7, 2568c <nrf_gpio_reconfigure+0x6a>
   25688:	783f      	ldrb	r7, [r7, #0]
   2568a:	007f      	lsls	r7, r7, #1
   2568c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2568e:	b10d      	cbz	r5, 25694 <nrf_gpio_reconfigure+0x72>
   25690:	782d      	ldrb	r5, [r5, #0]
   25692:	00ad      	lsls	r5, r5, #2
   25694:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   25696:	b10c      	cbz	r4, 2569c <nrf_gpio_reconfigure+0x7a>
   25698:	7822      	ldrb	r2, [r4, #0]
   2569a:	0214      	lsls	r4, r2, #8
   2569c:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2569e:	b10e      	cbz	r6, 256a4 <nrf_gpio_reconfigure+0x82>
   256a0:	7836      	ldrb	r6, [r6, #0]
   256a2:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   256a4:	432c      	orrs	r4, r5
   256a6:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   256a8:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   256ac:	b003      	add	sp, #12
   256ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000256b0 <nrf_gpio_cfg_sense_set>:
{
   256b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   256b2:	f10d 030f 	add.w	r3, sp, #15
   256b6:	9301      	str	r3, [sp, #4]
   256b8:	2300      	movs	r3, #0
{
   256ba:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   256be:	9300      	str	r3, [sp, #0]
   256c0:	461a      	mov	r2, r3
   256c2:	4619      	mov	r1, r3
   256c4:	f7ff ffad 	bl	25622 <nrf_gpio_reconfigure>
}
   256c8:	b005      	add	sp, #20
   256ca:	f85d fb04 	ldr.w	pc, [sp], #4

000256ce <nrfx_nvmc_flash_size_get>:
   256ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   256d2:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   256d4:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   256d6:	4350      	muls	r0, r2
   256d8:	4770      	bx	lr

000256da <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   256da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   256de:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   256e0:	4770      	bx	lr

000256e2 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   256e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   256e6:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   256e8:	4770      	bx	lr

000256ea <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   256ea:	f7f8 bd5f 	b.w	1e1ac <_DoInit>

000256ee <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   256ee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   256f0:	f7ff fffb 	bl	256ea <SEGGER_RTT_Init>

	return 0;
}
   256f4:	2000      	movs	r0, #0
   256f6:	bd08      	pop	{r3, pc}

000256f8 <z_device_state_init>:
}
   256f8:	4770      	bx	lr

000256fa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   256fa:	b138      	cbz	r0, 2570c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   256fc:	68c3      	ldr	r3, [r0, #12]
   256fe:	8818      	ldrh	r0, [r3, #0]
   25700:	f3c0 0008 	ubfx	r0, r0, #0, #9
   25704:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   25708:	4258      	negs	r0, r3
   2570a:	4158      	adcs	r0, r3
}
   2570c:	4770      	bx	lr

0002570e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2570e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25710:	4605      	mov	r5, r0
   25712:	460e      	mov	r6, r1
	__asm__ volatile(
   25714:	f04f 0340 	mov.w	r3, #64	; 0x40
   25718:	f3ef 8711 	mrs	r7, BASEPRI
   2571c:	f383 8812 	msr	BASEPRI_MAX, r3
   25720:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25724:	f7f9 fd74 	bl	1f210 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25728:	4631      	mov	r1, r6
   2572a:	4604      	mov	r4, r0
   2572c:	4628      	mov	r0, r5
   2572e:	f7ff ff06 	bl	2553e <k_sys_fatal_error_handler>
	__asm__ volatile(
   25732:	f387 8811 	msr	BASEPRI, r7
   25736:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2573a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2573c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25740:	f7ed b9ca 	b.w	12ad8 <z_impl_k_thread_abort>

00025744 <z_early_memset>:
	(void) memset(dst, c, n);
   25744:	f7fc b963 	b.w	21a0e <memset>

00025748 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   25748:	f7fc b956 	b.w	219f8 <memcpy>

0002574c <k_heap_init>:
{
   2574c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2574e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   25752:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   25756:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   25758:	f7fa baeb 	b.w	1fd32 <sys_heap_init>

0002575c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25760:	b085      	sub	sp, #20
   25762:	4606      	mov	r6, r0
   25764:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25766:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2576a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2576c:	f000 fb8c 	bl	25e88 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25770:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25774:	4605      	mov	r5, r0
   25776:	460f      	mov	r7, r1
	__asm__ volatile(
   25778:	f04f 0340 	mov.w	r3, #64	; 0x40
   2577c:	f3ef 8411 	mrs	r4, BASEPRI
   25780:	f383 8812 	msr	BASEPRI_MAX, r3
   25784:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25788:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2578c:	464a      	mov	r2, r9
   2578e:	4641      	mov	r1, r8
   25790:	4630      	mov	r0, r6
   25792:	f7fa fa66 	bl	1fc62 <sys_heap_aligned_alloc>
   25796:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   25798:	f7f9 ff12 	bl	1f5c0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2579c:	9b03      	ldr	r3, [sp, #12]
   2579e:	b13b      	cbz	r3, 257b0 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   257a0:	f384 8811 	msr	BASEPRI, r4
   257a4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   257a8:	4618      	mov	r0, r3
   257aa:	b005      	add	sp, #20
   257ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   257b0:	1a28      	subs	r0, r5, r0
   257b2:	eb67 0101 	sbc.w	r1, r7, r1
   257b6:	2801      	cmp	r0, #1
   257b8:	f171 0200 	sbcs.w	r2, r1, #0
   257bc:	dbf0      	blt.n	257a0 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   257be:	e9cd 0100 	strd	r0, r1, [sp]
   257c2:	465a      	mov	r2, fp
   257c4:	4621      	mov	r1, r4
   257c6:	4650      	mov	r0, sl
   257c8:	f7f9 fbca 	bl	1ef60 <z_pend_curr>
	__asm__ volatile(
   257cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   257d0:	f3ef 8411 	mrs	r4, BASEPRI
   257d4:	f383 8812 	msr	BASEPRI_MAX, r3
   257d8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   257dc:	e7d6      	b.n	2578c <k_heap_aligned_alloc+0x30>

000257de <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   257de:	b538      	push	{r3, r4, r5, lr}
   257e0:	4604      	mov	r4, r0
   257e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   257e6:	f3ef 8511 	mrs	r5, BASEPRI
   257ea:	f383 8812 	msr	BASEPRI_MAX, r3
   257ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   257f2:	f7fa f9fe 	bl	1fbf2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   257f6:	f104 000c 	add.w	r0, r4, #12
   257fa:	f000 fabe 	bl	25d7a <z_unpend_all>
   257fe:	b130      	cbz	r0, 2580e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   25800:	4629      	mov	r1, r5
   25802:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2580a:	f7f9 ba55 	b.w	1ecb8 <z_reschedule>
	__asm__ volatile(
   2580e:	f385 8811 	msr	BASEPRI, r5
   25812:	f3bf 8f6f 	isb	sy
}
   25816:	bd38      	pop	{r3, r4, r5, pc}

00025818 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   25818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2581a:	4604      	mov	r4, r0
   2581c:	460d      	mov	r5, r1
	__asm__ volatile(
   2581e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25822:	f3ef 8611 	mrs	r6, BASEPRI
   25826:	f383 8812 	msr	BASEPRI_MAX, r3
   2582a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2582e:	6947      	ldr	r7, [r0, #20]
   25830:	b977      	cbnz	r7, 25850 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   25832:	f000 fa8a 	bl	25d4a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   25836:	b158      	cbz	r0, 25850 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   25838:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2583a:	6142      	str	r2, [r0, #20]
   2583c:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2583e:	f000 fa28 	bl	25c92 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   25842:	4631      	mov	r1, r6
   25844:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   25848:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2584c:	f7f9 ba34 	b.w	1ecb8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   25850:	682b      	ldr	r3, [r5, #0]
   25852:	6962      	ldr	r2, [r4, #20]
   25854:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   25856:	682b      	ldr	r3, [r5, #0]
   25858:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2585a:	69a3      	ldr	r3, [r4, #24]
   2585c:	3b01      	subs	r3, #1
   2585e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   25860:	f386 8811 	msr	BASEPRI, r6
   25864:	f3bf 8f6f 	isb	sy
}
   25868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002586a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2586a:	f3ef 8005 	mrs	r0, IPSR
}
   2586e:	3800      	subs	r0, #0
   25870:	bf18      	it	ne
   25872:	2001      	movne	r0, #1
   25874:	4770      	bx	lr

00025876 <z_impl_k_thread_name_set>:
}
   25876:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2587a:	4770      	bx	lr

0002587c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2587c:	f7f9 bb14 	b.w	1eea8 <z_sched_start>

00025880 <z_pm_save_idle_exit>:
{
   25880:	b508      	push	{r3, lr}
	pm_system_resume();
   25882:	f7ec fc1f 	bl	120c4 <pm_system_resume>
}
   25886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2588a:	f7ff bdb4 	b.w	253f6 <sys_clock_idle_exit>

0002588e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2588e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25892:	428b      	cmp	r3, r1
   25894:	d001      	beq.n	2589a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   25896:	f7f9 bb77 	b.w	1ef88 <z_set_prio>
}
   2589a:	2000      	movs	r0, #0
   2589c:	4770      	bx	lr

0002589e <z_impl_k_mutex_init>:
{
   2589e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   258a0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   258a2:	e9c3 0002 	strd	r0, r0, [r3, #8]
   258a6:	e9c3 3300 	strd	r3, r3, [r3]
}
   258aa:	4770      	bx	lr

000258ac <queue_insert>:
{
   258ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   258b0:	4699      	mov	r9, r3
   258b2:	4604      	mov	r4, r0
   258b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   258b8:	460d      	mov	r5, r1
   258ba:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   258bc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   258c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   258c4:	f3ef 8711 	mrs	r7, BASEPRI
   258c8:	f382 8812 	msr	BASEPRI_MAX, r2
   258cc:	f3bf 8f6f 	isb	sy
	if (is_append) {
   258d0:	b103      	cbz	r3, 258d4 <queue_insert+0x28>
	return list->tail;
   258d2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   258d4:	4630      	mov	r0, r6
   258d6:	f000 fa38 	bl	25d4a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   258da:	b158      	cbz	r0, 258f4 <queue_insert+0x48>
   258dc:	2400      	movs	r4, #0
   258de:	67c4      	str	r4, [r0, #124]	; 0x7c
   258e0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   258e4:	f000 f9d5 	bl	25c92 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   258e8:	4630      	mov	r0, r6
   258ea:	4639      	mov	r1, r7
   258ec:	f7f9 f9e4 	bl	1ecb8 <z_reschedule>
	return 0;
   258f0:	2000      	movs	r0, #0
   258f2:	e00c      	b.n	2590e <queue_insert+0x62>
	if (alloc) {
   258f4:	f1b9 0f00 	cmp.w	r9, #0
   258f8:	d01b      	beq.n	25932 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   258fa:	2108      	movs	r1, #8
   258fc:	f7f9 fefe 	bl	1f6fc <z_thread_aligned_alloc>
		if (anode == NULL) {
   25900:	b938      	cbnz	r0, 25912 <queue_insert+0x66>
	__asm__ volatile(
   25902:	f387 8811 	msr	BASEPRI, r7
   25906:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2590a:	f06f 000b 	mvn.w	r0, #11
}
   2590e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   25912:	2301      	movs	r3, #1
		anode->data = data;
   25914:	f8c0 8004 	str.w	r8, [r0, #4]
   25918:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2591a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2591c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   25920:	b95d      	cbnz	r5, 2593a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25922:	6823      	ldr	r3, [r4, #0]
   25924:	4313      	orrs	r3, r2
   25926:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25928:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2592a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2592c:	b973      	cbnz	r3, 2594c <queue_insert+0xa0>
	list->tail = node;
   2592e:	6060      	str	r0, [r4, #4]
}
   25930:	e00c      	b.n	2594c <queue_insert+0xa0>
	node->next_and_flags = flags;
   25932:	f8c8 9000 	str.w	r9, [r8]
}
   25936:	4640      	mov	r0, r8
   25938:	e7ef      	b.n	2591a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2593a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2593c:	f033 0303 	bics.w	r3, r3, #3
   25940:	d110      	bne.n	25964 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25942:	6002      	str	r2, [r0, #0]
	return list->tail;
   25944:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25946:	b93a      	cbnz	r2, 25958 <queue_insert+0xac>
	list->head = node;
   25948:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2594c:	2104      	movs	r1, #4
   2594e:	f104 0010 	add.w	r0, r4, #16
   25952:	f000 fbf3 	bl	2613c <z_handle_obj_poll_events>
   25956:	e7c7      	b.n	258e8 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25958:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2595a:	f003 0303 	and.w	r3, r3, #3
   2595e:	4303      	orrs	r3, r0
   25960:	6013      	str	r3, [r2, #0]
   25962:	e7e4      	b.n	2592e <queue_insert+0x82>
   25964:	4313      	orrs	r3, r2
   25966:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25968:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2596a:	f003 0303 	and.w	r3, r3, #3
   2596e:	4303      	orrs	r3, r0
   25970:	602b      	str	r3, [r5, #0]
}
   25972:	e7eb      	b.n	2594c <queue_insert+0xa0>

00025974 <z_queue_node_peek>:
{
   25974:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25976:	4604      	mov	r4, r0
   25978:	b130      	cbz	r0, 25988 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2597a:	6802      	ldr	r2, [r0, #0]
   2597c:	0793      	lsls	r3, r2, #30
   2597e:	d003      	beq.n	25988 <z_queue_node_peek+0x14>
		ret = anode->data;
   25980:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25982:	b109      	cbz	r1, 25988 <z_queue_node_peek+0x14>
			k_free(anode);
   25984:	f000 fbe8 	bl	26158 <k_free>
}
   25988:	4620      	mov	r0, r4
   2598a:	bd10      	pop	{r4, pc}

0002598c <z_impl_k_queue_init>:
	list->head = NULL;
   2598c:	2300      	movs	r3, #0
	list->tail = NULL;
   2598e:	e9c0 3300 	strd	r3, r3, [r0]
   25992:	f100 0308 	add.w	r3, r0, #8
   25996:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2599a:	f100 0310 	add.w	r3, r0, #16
   2599e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   259a2:	4770      	bx	lr

000259a4 <k_queue_prepend>:
{
   259a4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   259a6:	2300      	movs	r3, #0
{
   259a8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   259aa:	9300      	str	r3, [sp, #0]
   259ac:	4619      	mov	r1, r3
   259ae:	f7ff ff7d 	bl	258ac <queue_insert>
}
   259b2:	b003      	add	sp, #12
   259b4:	f85d fb04 	ldr.w	pc, [sp], #4

000259b8 <k_queue_append_list>:
{
   259b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   259bc:	4605      	mov	r5, r0
   259be:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   259c0:	460c      	mov	r4, r1
   259c2:	b391      	cbz	r1, 25a2a <k_queue_append_list+0x72>
   259c4:	b38a      	cbz	r2, 25a2a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   259c6:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   259ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   259ce:	f3ef 8811 	mrs	r8, BASEPRI
   259d2:	f383 8812 	msr	BASEPRI_MAX, r3
   259d6:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   259da:	4638      	mov	r0, r7
   259dc:	f000 f9b5 	bl	25d4a <z_unpend_first_thread>
   259e0:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   259e4:	b920      	cbnz	r0, 259f0 <k_queue_append_list+0x38>
	return list->tail;
   259e6:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   259e8:	b9ca      	cbnz	r2, 25a1e <k_queue_append_list+0x66>
	list->head = node;
   259ea:	602c      	str	r4, [r5, #0]
	list->tail = node;
   259ec:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   259ee:	e00a      	b.n	25a06 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   259f0:	6144      	str	r4, [r0, #20]
   259f2:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   259f6:	f000 f94c 	bl	25c92 <z_ready_thread>
		head = *(void **)head;
   259fa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   259fc:	4638      	mov	r0, r7
   259fe:	f000 f9a4 	bl	25d4a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   25a02:	2c00      	cmp	r4, #0
   25a04:	d1ee      	bne.n	259e4 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25a06:	2104      	movs	r1, #4
   25a08:	f105 0010 	add.w	r0, r5, #16
   25a0c:	f000 fb96 	bl	2613c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25a10:	4638      	mov	r0, r7
   25a12:	4641      	mov	r1, r8
   25a14:	f7f9 f950 	bl	1ecb8 <z_reschedule>
	return 0;
   25a18:	2000      	movs	r0, #0
}
   25a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a1e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a20:	f003 0303 	and.w	r3, r3, #3
   25a24:	431c      	orrs	r4, r3
   25a26:	6014      	str	r4, [r2, #0]
}
   25a28:	e7e0      	b.n	259ec <k_queue_append_list+0x34>
		return -EINVAL;
   25a2a:	f06f 0015 	mvn.w	r0, #21
   25a2e:	e7f4      	b.n	25a1a <k_queue_append_list+0x62>

00025a30 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   25a30:	b15a      	cbz	r2, 25a4a <z_impl_k_sem_init+0x1a>
   25a32:	428a      	cmp	r2, r1
   25a34:	d309      	bcc.n	25a4a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   25a36:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25a3a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   25a3e:	e9c0 0000 	strd	r0, r0, [r0]
   25a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   25a46:	2000      	movs	r0, #0
   25a48:	4770      	bx	lr
		return -EINVAL;
   25a4a:	f06f 0015 	mvn.w	r0, #21
}
   25a4e:	4770      	bx	lr

00025a50 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   25a50:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   25a52:	2301      	movs	r3, #1
   25a54:	408b      	lsls	r3, r1
   25a56:	ea22 0303 	bic.w	r3, r2, r3
   25a5a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   25a5c:	fa22 f001 	lsr.w	r0, r2, r1
}
   25a60:	f000 0001 	and.w	r0, r0, #1
   25a64:	4770      	bx	lr

00025a66 <unschedule_locked>:
{
   25a66:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25a68:	2103      	movs	r1, #3
{
   25a6a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25a6c:	300c      	adds	r0, #12
   25a6e:	f7ff ffef 	bl	25a50 <flag_test_and_clear>
   25a72:	4604      	mov	r4, r0
   25a74:	b118      	cbz	r0, 25a7e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   25a76:	f105 0010 	add.w	r0, r5, #16
   25a7a:	f000 f9ab 	bl	25dd4 <z_abort_timeout>
}
   25a7e:	4620      	mov	r0, r4
   25a80:	bd38      	pop	{r3, r4, r5, pc}

00025a82 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   25a82:	b120      	cbz	r0, 25a8e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   25a84:	2200      	movs	r2, #0
   25a86:	4611      	mov	r1, r2
   25a88:	3088      	adds	r0, #136	; 0x88
   25a8a:	f000 b986 	b.w	25d9a <z_sched_wake>
}
   25a8e:	4770      	bx	lr

00025a90 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   25a90:	68c3      	ldr	r3, [r0, #12]
{
   25a92:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25a94:	f3c3 0540 	ubfx	r5, r3, #1, #1
   25a98:	079b      	lsls	r3, r3, #30
{
   25a9a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25a9c:	d416      	bmi.n	25acc <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   25a9e:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25aa0:	2102      	movs	r1, #2
   25aa2:	300c      	adds	r0, #12
   25aa4:	f7ff ffd4 	bl	25a50 <flag_test_and_clear>
   25aa8:	b180      	cbz	r0, 25acc <cancel_async_locked+0x3c>
	return list->head;
   25aaa:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25aae:	b16a      	cbz	r2, 25acc <cancel_async_locked+0x3c>
   25ab0:	4294      	cmp	r4, r2
   25ab2:	d11b      	bne.n	25aec <cancel_async_locked+0x5c>
	return node->next;
   25ab4:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   25ab6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   25aba:	b98d      	cbnz	r5, 25ae0 <cancel_async_locked+0x50>
   25abc:	428c      	cmp	r4, r1
	list->head = node;
   25abe:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   25ac2:	d101      	bne.n	25ac8 <cancel_async_locked+0x38>
	list->tail = node;
   25ac4:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   25ac8:	2300      	movs	r3, #0
   25aca:	6023      	str	r3, [r4, #0]
	return *flagp;
   25acc:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   25ace:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   25ad2:	bf1e      	ittt	ne
   25ad4:	f043 0302 	orrne.w	r3, r3, #2
   25ad8:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   25ada:	f003 000f 	andne.w	r0, r3, #15
}
   25ade:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   25ae0:	428c      	cmp	r4, r1
	parent->next = child;
   25ae2:	602a      	str	r2, [r5, #0]
	list->tail = node;
   25ae4:	bf08      	it	eq
   25ae6:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   25aea:	e7ed      	b.n	25ac8 <cancel_async_locked+0x38>
	return node->next;
   25aec:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25aee:	6812      	ldr	r2, [r2, #0]
   25af0:	e7dd      	b.n	25aae <cancel_async_locked+0x1e>

00025af2 <work_timeout>:
{
   25af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25af4:	4604      	mov	r4, r0
   25af6:	f04f 0340 	mov.w	r3, #64	; 0x40
   25afa:	f3ef 8511 	mrs	r5, BASEPRI
   25afe:	f383 8812 	msr	BASEPRI_MAX, r3
   25b02:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   25b06:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25b08:	f1a0 0610 	sub.w	r6, r0, #16
   25b0c:	2103      	movs	r1, #3
   25b0e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   25b10:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25b12:	f7ff ff9d 	bl	25a50 <flag_test_and_clear>
   25b16:	b128      	cbz	r0, 25b24 <work_timeout+0x32>
		queue = dw->queue;
   25b18:	69a3      	ldr	r3, [r4, #24]
   25b1a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25b1c:	a901      	add	r1, sp, #4
   25b1e:	4630      	mov	r0, r6
   25b20:	f7f8 ff92 	bl	1ea48 <submit_to_queue_locked>
	__asm__ volatile(
   25b24:	f385 8811 	msr	BASEPRI, r5
   25b28:	f3bf 8f6f 	isb	sy
}
   25b2c:	b002      	add	sp, #8
   25b2e:	bd70      	pop	{r4, r5, r6, pc}

00025b30 <k_work_init>:
{
   25b30:	b538      	push	{r3, r4, r5, lr}
   25b32:	4604      	mov	r4, r0
   25b34:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25b36:	2210      	movs	r2, #16
   25b38:	2100      	movs	r1, #0
   25b3a:	f7fb ff68 	bl	21a0e <memset>
   25b3e:	6065      	str	r5, [r4, #4]
}
   25b40:	bd38      	pop	{r3, r4, r5, pc}

00025b42 <k_work_busy_get>:
	__asm__ volatile(
   25b42:	f04f 0240 	mov.w	r2, #64	; 0x40
   25b46:	f3ef 8311 	mrs	r3, BASEPRI
   25b4a:	f382 8812 	msr	BASEPRI_MAX, r2
   25b4e:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   25b52:	68c0      	ldr	r0, [r0, #12]
   25b54:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   25b58:	f383 8811 	msr	BASEPRI, r3
   25b5c:	f3bf 8f6f 	isb	sy
}
   25b60:	4770      	bx	lr

00025b62 <z_work_submit_to_queue>:
{
   25b62:	b513      	push	{r0, r1, r4, lr}
   25b64:	9001      	str	r0, [sp, #4]
   25b66:	4608      	mov	r0, r1
	__asm__ volatile(
   25b68:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b6c:	f3ef 8411 	mrs	r4, BASEPRI
   25b70:	f383 8812 	msr	BASEPRI_MAX, r3
   25b74:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   25b78:	a901      	add	r1, sp, #4
   25b7a:	f7f8 ff65 	bl	1ea48 <submit_to_queue_locked>
	__asm__ volatile(
   25b7e:	f384 8811 	msr	BASEPRI, r4
   25b82:	f3bf 8f6f 	isb	sy
}
   25b86:	b002      	add	sp, #8
   25b88:	bd10      	pop	{r4, pc}

00025b8a <k_work_submit_to_queue>:
{
   25b8a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   25b8c:	f7ff ffe9 	bl	25b62 <z_work_submit_to_queue>
	if (ret > 0) {
   25b90:	1e04      	subs	r4, r0, #0
   25b92:	dd09      	ble.n	25ba8 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   25b94:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b98:	f3ef 8011 	mrs	r0, BASEPRI
   25b9c:	f383 8812 	msr	BASEPRI_MAX, r3
   25ba0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25ba4:	f000 f859 	bl	25c5a <z_reschedule_irqlock>
}
   25ba8:	4620      	mov	r0, r4
   25baa:	bd10      	pop	{r4, pc}

00025bac <k_work_queue_init>:
{
   25bac:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   25bae:	22a0      	movs	r2, #160	; 0xa0
   25bb0:	2100      	movs	r1, #0
   25bb2:	f7fb ff2c 	bl	21a0e <memset>
}
   25bb6:	bd08      	pop	{r3, pc}

00025bb8 <k_work_init_delayable>:
{
   25bb8:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   25bba:	2230      	movs	r2, #48	; 0x30
{
   25bbc:	4604      	mov	r4, r0
   25bbe:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   25bc0:	2100      	movs	r1, #0
   25bc2:	f7fb ff24 	bl	21a0e <memset>
   25bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
   25bca:	6065      	str	r5, [r4, #4]
   25bcc:	60e3      	str	r3, [r4, #12]
}
   25bce:	bd38      	pop	{r3, r4, r5, pc}

00025bd0 <k_work_delayable_busy_get>:
   25bd0:	f7ff bfb7 	b.w	25b42 <k_work_busy_get>

00025bd4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   25bd4:	b538      	push	{r3, r4, r5, lr}
   25bd6:	4604      	mov	r4, r0
   25bd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bdc:	f3ef 8511 	mrs	r5, BASEPRI
   25be0:	f383 8812 	msr	BASEPRI_MAX, r3
   25be4:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   25be8:	f7ff ff3d 	bl	25a66 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25bec:	4620      	mov	r0, r4
   25bee:	f7ff ff4f 	bl	25a90 <cancel_async_locked>
	__asm__ volatile(
   25bf2:	f385 8811 	msr	BASEPRI, r5
   25bf6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   25bfa:	bd38      	pop	{r3, r4, r5, pc}

00025bfc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   25bfc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25c00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25c02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25c04:	2300      	movs	r3, #0
	node->prev = NULL;
   25c06:	e9c0 3300 	strd	r3, r3, [r0]
}
   25c0a:	4770      	bx	lr

00025c0c <unpend_thread_no_timeout>:
{
   25c0c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   25c0e:	f7ff fff5 	bl	25bfc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25c12:	7b43      	ldrb	r3, [r0, #13]
   25c14:	f023 0302 	bic.w	r3, r3, #2
   25c18:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   25c1a:	2300      	movs	r3, #0
   25c1c:	6083      	str	r3, [r0, #8]
}
   25c1e:	bd08      	pop	{r3, pc}

00025c20 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   25c20:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25c24:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   25c28:	4283      	cmp	r3, r0
		return b2 - b1;
   25c2a:	bf14      	ite	ne
   25c2c:	1ac0      	subne	r0, r0, r3
	return 0;
   25c2e:	2000      	moveq	r0, #0
}
   25c30:	4770      	bx	lr

00025c32 <z_unpend_thread>:
{
   25c32:	b510      	push	{r4, lr}
	__asm__ volatile(
   25c34:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c38:	f3ef 8411 	mrs	r4, BASEPRI
   25c3c:	f383 8812 	msr	BASEPRI_MAX, r3
   25c40:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   25c44:	f7ff ffe2 	bl	25c0c <unpend_thread_no_timeout>
	__asm__ volatile(
   25c48:	f384 8811 	msr	BASEPRI, r4
   25c4c:	f3bf 8f6f 	isb	sy
}
   25c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25c54:	3018      	adds	r0, #24
   25c56:	f000 b8bd 	b.w	25dd4 <z_abort_timeout>

00025c5a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25c5a:	4603      	mov	r3, r0
   25c5c:	b920      	cbnz	r0, 25c68 <z_reschedule_irqlock+0xe>
   25c5e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   25c62:	b90a      	cbnz	r2, 25c68 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   25c64:	f7ec bcf4 	b.w	12650 <arch_swap>
   25c68:	f383 8811 	msr	BASEPRI, r3
   25c6c:	f3bf 8f6f 	isb	sy
}
   25c70:	4770      	bx	lr

00025c72 <z_reschedule_unlocked>:
	__asm__ volatile(
   25c72:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c76:	f3ef 8011 	mrs	r0, BASEPRI
   25c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   25c7e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25c82:	f7ff bfea 	b.w	25c5a <z_reschedule_irqlock>

00025c86 <z_priq_dumb_best>:
{
   25c86:	4603      	mov	r3, r0
	return list->head == list;
   25c88:	6800      	ldr	r0, [r0, #0]
}
   25c8a:	4283      	cmp	r3, r0
   25c8c:	bf08      	it	eq
   25c8e:	2000      	moveq	r0, #0
   25c90:	4770      	bx	lr

00025c92 <z_ready_thread>:
{
   25c92:	b510      	push	{r4, lr}
   25c94:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c98:	f3ef 8411 	mrs	r4, BASEPRI
   25c9c:	f383 8812 	msr	BASEPRI_MAX, r3
   25ca0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   25ca4:	f7f9 f8ca 	bl	1ee3c <ready_thread>
	__asm__ volatile(
   25ca8:	f384 8811 	msr	BASEPRI, r4
   25cac:	f3bf 8f6f 	isb	sy
}
   25cb0:	bd10      	pop	{r4, pc}

00025cb2 <z_thread_timeout>:
{
   25cb2:	b510      	push	{r4, lr}
   25cb4:	4601      	mov	r1, r0
	__asm__ volatile(
   25cb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   25cba:	f3ef 8411 	mrs	r4, BASEPRI
   25cbe:	f383 8812 	msr	BASEPRI_MAX, r3
   25cc2:	f3bf 8f6f 	isb	sy
		if (!killed) {
   25cc6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   25cca:	f013 0f28 	tst.w	r3, #40	; 0x28
   25cce:	d10d      	bne.n	25cec <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   25cd0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   25cd4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   25cd6:	b10b      	cbz	r3, 25cdc <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   25cd8:	f7ff ff98 	bl	25c0c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25cdc:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   25ce0:	f023 0314 	bic.w	r3, r3, #20
   25ce4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   25ce8:	f7f9 f8a8 	bl	1ee3c <ready_thread>
	__asm__ volatile(
   25cec:	f384 8811 	msr	BASEPRI, r4
   25cf0:	f3bf 8f6f 	isb	sy
}
   25cf4:	bd10      	pop	{r4, pc}

00025cf6 <add_to_waitq_locked>:
{
   25cf6:	b538      	push	{r3, r4, r5, lr}
   25cf8:	4604      	mov	r4, r0
   25cfa:	460d      	mov	r5, r1
	unready_thread(thread);
   25cfc:	f7f9 f8f2 	bl	1eee4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25d00:	7b63      	ldrb	r3, [r4, #13]
   25d02:	f043 0302 	orr.w	r3, r3, #2
   25d06:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   25d08:	b195      	cbz	r5, 25d30 <add_to_waitq_locked+0x3a>
   25d0a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   25d0c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d0e:	429d      	cmp	r5, r3
   25d10:	d015      	beq.n	25d3e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25d12:	b1a3      	cbz	r3, 25d3e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   25d14:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25d18:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   25d1c:	4291      	cmp	r1, r2
   25d1e:	d008      	beq.n	25d32 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   25d20:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   25d22:	2a00      	cmp	r2, #0
   25d24:	dd05      	ble.n	25d32 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   25d26:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25d28:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25d2c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25d2e:	605c      	str	r4, [r3, #4]
}
   25d30:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   25d32:	686a      	ldr	r2, [r5, #4]
   25d34:	4293      	cmp	r3, r2
   25d36:	d002      	beq.n	25d3e <add_to_waitq_locked+0x48>
   25d38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25d3a:	2b00      	cmp	r3, #0
   25d3c:	d1ec      	bne.n	25d18 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   25d3e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   25d40:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   25d44:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25d46:	606c      	str	r4, [r5, #4]
}
   25d48:	e7f2      	b.n	25d30 <add_to_waitq_locked+0x3a>

00025d4a <z_unpend_first_thread>:
{
   25d4a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25d4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d50:	f3ef 8511 	mrs	r5, BASEPRI
   25d54:	f383 8812 	msr	BASEPRI_MAX, r3
   25d58:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   25d5c:	f7ff ff93 	bl	25c86 <z_priq_dumb_best>
		if (thread != NULL) {
   25d60:	4604      	mov	r4, r0
   25d62:	b120      	cbz	r0, 25d6e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   25d64:	f7ff ff52 	bl	25c0c <unpend_thread_no_timeout>
   25d68:	3018      	adds	r0, #24
   25d6a:	f000 f833 	bl	25dd4 <z_abort_timeout>
	__asm__ volatile(
   25d6e:	f385 8811 	msr	BASEPRI, r5
   25d72:	f3bf 8f6f 	isb	sy
}
   25d76:	4620      	mov	r0, r4
   25d78:	bd38      	pop	{r3, r4, r5, pc}

00025d7a <z_unpend_all>:
{
   25d7a:	b538      	push	{r3, r4, r5, lr}
   25d7c:	4605      	mov	r5, r0
	int need_sched = 0;
   25d7e:	2000      	movs	r0, #0
	return list->head == list;
   25d80:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d82:	42a5      	cmp	r5, r4
   25d84:	d000      	beq.n	25d88 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25d86:	b904      	cbnz	r4, 25d8a <z_unpend_all+0x10>
}
   25d88:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   25d8a:	4620      	mov	r0, r4
   25d8c:	f7ff ff51 	bl	25c32 <z_unpend_thread>
		z_ready_thread(thread);
   25d90:	4620      	mov	r0, r4
   25d92:	f7ff ff7e 	bl	25c92 <z_ready_thread>
		need_sched = 1;
   25d96:	2001      	movs	r0, #1
   25d98:	e7f2      	b.n	25d80 <z_unpend_all+0x6>

00025d9a <z_sched_wake>:
{
   25d9a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25da0:	f3ef 8511 	mrs	r5, BASEPRI
   25da4:	f383 8812 	msr	BASEPRI_MAX, r3
   25da8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   25dac:	f7ff ff6b 	bl	25c86 <z_priq_dumb_best>
		if (thread != NULL) {
   25db0:	4604      	mov	r4, r0
   25db2:	b150      	cbz	r0, 25dca <z_sched_wake+0x30>
   25db4:	67c1      	str	r1, [r0, #124]	; 0x7c
   25db6:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   25db8:	f7ff ff28 	bl	25c0c <unpend_thread_no_timeout>
   25dbc:	3018      	adds	r0, #24
   25dbe:	f000 f809 	bl	25dd4 <z_abort_timeout>
			ready_thread(thread);
   25dc2:	4620      	mov	r0, r4
   25dc4:	f7f9 f83a 	bl	1ee3c <ready_thread>
			ret = true;
   25dc8:	2001      	movs	r0, #1
	__asm__ volatile(
   25dca:	f385 8811 	msr	BASEPRI, r5
   25dce:	f3bf 8f6f 	isb	sy
}
   25dd2:	bd38      	pop	{r3, r4, r5, pc}

00025dd4 <z_abort_timeout>:
{
   25dd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   25dd6:	f04f 0240 	mov.w	r2, #64	; 0x40
   25dda:	f3ef 8411 	mrs	r4, BASEPRI
   25dde:	f382 8812 	msr	BASEPRI_MAX, r2
   25de2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25de6:	6803      	ldr	r3, [r0, #0]
   25de8:	b13b      	cbz	r3, 25dfa <z_abort_timeout+0x26>
			remove_timeout(to);
   25dea:	f7f9 fad3 	bl	1f394 <remove_timeout>
			ret = 0;
   25dee:	2000      	movs	r0, #0
	__asm__ volatile(
   25df0:	f384 8811 	msr	BASEPRI, r4
   25df4:	f3bf 8f6f 	isb	sy
}
   25df8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25dfa:	f06f 0015 	mvn.w	r0, #21
   25dfe:	e7f7      	b.n	25df0 <z_abort_timeout+0x1c>

00025e00 <z_timeout_remaining>:
{
   25e00:	b510      	push	{r4, lr}
	__asm__ volatile(
   25e02:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e06:	f3ef 8411 	mrs	r4, BASEPRI
   25e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   25e0e:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   25e12:	f7f9 fad9 	bl	1f3c8 <timeout_rem>
	__asm__ volatile(
   25e16:	f384 8811 	msr	BASEPRI, r4
   25e1a:	f3bf 8f6f 	isb	sy
}
   25e1e:	bd10      	pop	{r4, pc}

00025e20 <z_get_next_timeout_expiry>:
{
   25e20:	b510      	push	{r4, lr}
	__asm__ volatile(
   25e22:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e26:	f3ef 8411 	mrs	r4, BASEPRI
   25e2a:	f383 8812 	msr	BASEPRI_MAX, r3
   25e2e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   25e32:	f7f9 fa89 	bl	1f348 <next_timeout>
	__asm__ volatile(
   25e36:	f384 8811 	msr	BASEPRI, r4
   25e3a:	f3bf 8f6f 	isb	sy
}
   25e3e:	bd10      	pop	{r4, pc}

00025e40 <z_set_timeout_expiry>:
{
   25e40:	b570      	push	{r4, r5, r6, lr}
   25e42:	4604      	mov	r4, r0
   25e44:	460d      	mov	r5, r1
	__asm__ volatile(
   25e46:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e4a:	f3ef 8611 	mrs	r6, BASEPRI
   25e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   25e52:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   25e56:	f7f9 fa77 	bl	1f348 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25e5a:	2801      	cmp	r0, #1
   25e5c:	dd05      	ble.n	25e6a <z_set_timeout_expiry+0x2a>
   25e5e:	42a0      	cmp	r0, r4
   25e60:	db03      	blt.n	25e6a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   25e62:	4629      	mov	r1, r5
   25e64:	4620      	mov	r0, r4
   25e66:	f7f6 ffb7 	bl	1cdd8 <sys_clock_set_timeout>
	__asm__ volatile(
   25e6a:	f386 8811 	msr	BASEPRI, r6
   25e6e:	f3bf 8f6f 	isb	sy
}
   25e72:	bd70      	pop	{r4, r5, r6, pc}

00025e74 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   25e74:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   25e76:	f7f9 fba3 	bl	1f5c0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25e7a:	bd08      	pop	{r3, pc}

00025e7c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   25e7c:	f7f9 bba0 	b.w	1f5c0 <sys_clock_tick_get>

00025e80 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   25e80:	b108      	cbz	r0, 25e86 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   25e82:	f7ec bf39 	b.w	12cf8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   25e86:	4770      	bx	lr

00025e88 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25e88:	f1b1 3fff 	cmp.w	r1, #4294967295
   25e8c:	bf08      	it	eq
   25e8e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   25e92:	b538      	push	{r3, r4, r5, lr}
   25e94:	4605      	mov	r5, r0
   25e96:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25e98:	d01d      	beq.n	25ed6 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25e9a:	ea51 0300 	orrs.w	r3, r1, r0
   25e9e:	d103      	bne.n	25ea8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   25ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   25ea4:	f7f9 bb8c 	b.w	1f5c0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25ea8:	f06f 0301 	mvn.w	r3, #1
   25eac:	1a18      	subs	r0, r3, r0
   25eae:	f04f 33ff 	mov.w	r3, #4294967295
   25eb2:	eb63 0101 	sbc.w	r1, r3, r1
   25eb6:	2900      	cmp	r1, #0
   25eb8:	da0c      	bge.n	25ed4 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   25eba:	f7f9 fb81 	bl	1f5c0 <sys_clock_tick_get>
   25ebe:	2d01      	cmp	r5, #1
   25ec0:	4622      	mov	r2, r4
   25ec2:	f174 0400 	sbcs.w	r4, r4, #0
   25ec6:	462b      	mov	r3, r5
   25ec8:	bfbc      	itt	lt
   25eca:	2301      	movlt	r3, #1
   25ecc:	2200      	movlt	r2, #0
   25ece:	1818      	adds	r0, r3, r0
   25ed0:	eb41 0102 	adc.w	r1, r1, r2
}
   25ed4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   25ed6:	f04f 30ff 	mov.w	r0, #4294967295
   25eda:	4601      	mov	r1, r0
   25edc:	e7fa      	b.n	25ed4 <sys_clock_timeout_end_calc+0x4c>

00025ede <add_event>:
{
   25ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ee0:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   25ee2:	e9d0 1300 	ldrd	r1, r3, [r0]
   25ee6:	4288      	cmp	r0, r1
   25ee8:	4604      	mov	r4, r0
   25eea:	d00d      	beq.n	25f08 <add_event+0x2a>
	if ((pending == NULL) ||
   25eec:	b163      	cbz	r3, 25f08 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   25eee:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25ef0:	b100      	cbz	r0, 25ef4 <add_event+0x16>
   25ef2:	3860      	subs	r0, #96	; 0x60
   25ef4:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   25ef8:	4639      	mov	r1, r7
   25efa:	f7ff fe91 	bl	25c20 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   25efe:	2800      	cmp	r0, #0
   25f00:	dc02      	bgt.n	25f08 <add_event+0x2a>
	return list->head == list;
   25f02:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f04:	42b4      	cmp	r4, r6
   25f06:	d109      	bne.n	25f1c <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   25f08:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   25f0a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   25f0e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   25f10:	6065      	str	r5, [r4, #4]
}
   25f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   25f14:	6863      	ldr	r3, [r4, #4]
   25f16:	42b3      	cmp	r3, r6
   25f18:	d0f6      	beq.n	25f08 <add_event+0x2a>
   25f1a:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   25f1c:	2e00      	cmp	r6, #0
   25f1e:	d0f3      	beq.n	25f08 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   25f20:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25f22:	b101      	cbz	r1, 25f26 <add_event+0x48>
   25f24:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   25f26:	4638      	mov	r0, r7
   25f28:	f7ff fe7a 	bl	25c20 <z_sched_prio_cmp>
   25f2c:	2800      	cmp	r0, #0
   25f2e:	ddf1      	ble.n	25f14 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   25f30:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   25f32:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   25f36:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25f38:	6075      	str	r5, [r6, #4]
			return;
   25f3a:	e7ea      	b.n	25f12 <add_event+0x34>

00025f3c <register_events>:
{
   25f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   25f40:	2500      	movs	r5, #0
{
   25f42:	468b      	mov	fp, r1
   25f44:	4614      	mov	r4, r2
   25f46:	461f      	mov	r7, r3
   25f48:	4682      	mov	sl, r0
	int events_registered = 0;
   25f4a:	462e      	mov	r6, r5
	event->poller = NULL;
   25f4c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   25f4e:	455d      	cmp	r5, fp
   25f50:	db02      	blt.n	25f58 <register_events+0x1c>
}
   25f52:	4630      	mov	r0, r6
   25f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   25f58:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f5c:	f3ef 8911 	mrs	r9, BASEPRI
   25f60:	f383 8812 	msr	BASEPRI_MAX, r3
   25f64:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   25f68:	f89a 300d 	ldrb.w	r3, [sl, #13]
   25f6c:	f003 031f 	and.w	r3, r3, #31
   25f70:	3b01      	subs	r3, #1
   25f72:	2b07      	cmp	r3, #7
   25f74:	d80f      	bhi.n	25f96 <register_events+0x5a>
   25f76:	e8df f003 	tbb	[pc, r3]
   25f7a:	041e      	.short	0x041e
   25f7c:	0e0e0a0e 	.word	0x0e0e0a0e
   25f80:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   25f82:	f8da 3010 	ldr.w	r3, [sl, #16]
   25f86:	689b      	ldr	r3, [r3, #8]
   25f88:	b12b      	cbz	r3, 25f96 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   25f8a:	2302      	movs	r3, #2
   25f8c:	e020      	b.n	25fd0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   25f8e:	f8da 3010 	ldr.w	r3, [sl, #16]
   25f92:	681b      	ldr	r3, [r3, #0]
   25f94:	bb8b      	cbnz	r3, 25ffa <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   25f96:	bb47      	cbnz	r7, 25fea <register_events+0xae>
   25f98:	7823      	ldrb	r3, [r4, #0]
   25f9a:	b333      	cbz	r3, 25fea <register_events+0xae>
	switch (event->type) {
   25f9c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   25fa0:	f003 031f 	and.w	r3, r3, #31
   25fa4:	3b01      	subs	r3, #1
   25fa6:	2b07      	cmp	r3, #7
   25fa8:	d830      	bhi.n	2600c <register_events+0xd0>
   25faa:	e8df f003 	tbb	[pc, r3]
   25fae:	2833      	.short	0x2833
   25fb0:	2f2f282f 	.word	0x2f2f282f
   25fb4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   25fb6:	f8da 3010 	ldr.w	r3, [sl, #16]
   25fba:	689b      	ldr	r3, [r3, #8]
   25fbc:	2b00      	cmp	r3, #0
   25fbe:	d0ea      	beq.n	25f96 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   25fc0:	2301      	movs	r3, #1
   25fc2:	e005      	b.n	25fd0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   25fc4:	f8da 3010 	ldr.w	r3, [sl, #16]
   25fc8:	6a1b      	ldr	r3, [r3, #32]
   25fca:	2b00      	cmp	r3, #0
   25fcc:	d0e3      	beq.n	25f96 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   25fce:	2310      	movs	r3, #16
	event->state |= state;
   25fd0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   25fd4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   25fd8:	f3c2 3145 	ubfx	r1, r2, #13, #6
   25fdc:	430b      	orrs	r3, r1
   25fde:	f363 3252 	bfi	r2, r3, #13, #6
   25fe2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   25fe6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   25fea:	f389 8811 	msr	BASEPRI, r9
   25fee:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   25ff2:	3501      	adds	r5, #1
   25ff4:	f10a 0a14 	add.w	sl, sl, #20
   25ff8:	e7a9      	b.n	25f4e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25ffa:	2304      	movs	r3, #4
   25ffc:	e7e8      	b.n	25fd0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   25ffe:	f8da 0010 	ldr.w	r0, [sl, #16]
   26002:	4622      	mov	r2, r4
   26004:	4651      	mov	r1, sl
   26006:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   26008:	f7ff ff69 	bl	25ede <add_event>
	event->poller = poller;
   2600c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   26010:	3601      	adds	r6, #1
   26012:	e7ea      	b.n	25fea <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   26014:	f8da 0010 	ldr.w	r0, [sl, #16]
   26018:	4622      	mov	r2, r4
   2601a:	4651      	mov	r1, sl
   2601c:	e7f4      	b.n	26008 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2601e:	f8da 0010 	ldr.w	r0, [sl, #16]
   26022:	4622      	mov	r2, r4
   26024:	4651      	mov	r1, sl
   26026:	3024      	adds	r0, #36	; 0x24
   26028:	e7ee      	b.n	26008 <register_events+0xcc>

0002602a <signal_poll_event>:
{
   2602a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2602e:	6884      	ldr	r4, [r0, #8]
{
   26030:	4605      	mov	r5, r0
   26032:	460e      	mov	r6, r1
	if (poller != NULL) {
   26034:	b144      	cbz	r4, 26048 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   26036:	7863      	ldrb	r3, [r4, #1]
   26038:	2b01      	cmp	r3, #1
   2603a:	d136      	bne.n	260aa <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2603c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26040:	f013 0302 	ands.w	r3, r3, #2
   26044:	d10a      	bne.n	2605c <signal_poll_event+0x32>
		poller->is_polling = false;
   26046:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   26048:	68eb      	ldr	r3, [r5, #12]
   2604a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2604e:	430e      	orrs	r6, r1
	event->poller = NULL;
   26050:	2000      	movs	r0, #0
	event->state |= state;
   26052:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   26056:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   26058:	60eb      	str	r3, [r5, #12]
	return retcode;
   2605a:	e00b      	b.n	26074 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2605c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   26060:	f1b3 3fff 	cmp.w	r3, #4294967295
   26064:	bf08      	it	eq
   26066:	f112 0f02 	cmneq.w	r2, #2
   2606a:	d105      	bne.n	26078 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2606c:	2300      	movs	r3, #0
   2606e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   26070:	f06f 000a 	mvn.w	r0, #10
}
   26074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26078:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2607c:	4640      	mov	r0, r8
   2607e:	f7ff fdd8 	bl	25c32 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26082:	2e08      	cmp	r6, #8
   26084:	bf0c      	ite	eq
   26086:	f06f 0303 	mvneq.w	r3, #3
   2608a:	2300      	movne	r3, #0
   2608c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2608e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26092:	06db      	lsls	r3, r3, #27
   26094:	d102      	bne.n	2609c <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   26096:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2609a:	b10f      	cbz	r7, 260a0 <signal_poll_event+0x76>
		poller->is_polling = false;
   2609c:	2300      	movs	r3, #0
   2609e:	e7d2      	b.n	26046 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   260a0:	4640      	mov	r0, r8
   260a2:	f7ff fdf6 	bl	25c92 <z_ready_thread>
		poller->is_polling = false;
   260a6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   260a8:	e7ce      	b.n	26048 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   260aa:	2b02      	cmp	r3, #2
   260ac:	d1f6      	bne.n	2609c <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   260ae:	7823      	ldrb	r3, [r4, #0]
   260b0:	2b00      	cmp	r3, #0
   260b2:	d0c9      	beq.n	26048 <signal_poll_event+0x1e>
   260b4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   260b8:	2f00      	cmp	r7, #0
   260ba:	d0f4      	beq.n	260a6 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   260bc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   260c0:	f1a4 0914 	sub.w	r9, r4, #20
   260c4:	f104 0014 	add.w	r0, r4, #20
   260c8:	f7ff fe84 	bl	25dd4 <z_abort_timeout>
		twork->poll_result = 0;
   260cc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   260d0:	4649      	mov	r1, r9
   260d2:	4638      	mov	r0, r7
   260d4:	f7ff fd45 	bl	25b62 <z_work_submit_to_queue>
		poller->is_polling = false;
   260d8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   260dc:	e7b4      	b.n	26048 <signal_poll_event+0x1e>

000260de <clear_event_registrations>:
	while (num_events--) {
   260de:	2314      	movs	r3, #20
{
   260e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   260e2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   260e6:	2400      	movs	r4, #0
   260e8:	2601      	movs	r6, #1
	while (num_events--) {
   260ea:	b901      	cbnz	r1, 260ee <clear_event_registrations+0x10>
}
   260ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   260ee:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   260f2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   260f6:	f003 031f 	and.w	r3, r3, #31
   260fa:	2b08      	cmp	r3, #8
   260fc:	f1a0 0714 	sub.w	r7, r0, #20
   26100:	d80d      	bhi.n	2611e <clear_event_registrations+0x40>
   26102:	fa06 f303 	lsl.w	r3, r6, r3
   26106:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2610a:	d008      	beq.n	2611e <clear_event_registrations+0x40>
	return node->next != NULL;
   2610c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   26110:	b12b      	cbz	r3, 2611e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   26112:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   26116:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   26118:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2611a:	e940 4405 	strd	r4, r4, [r0, #-20]
   2611e:	f382 8811 	msr	BASEPRI, r2
   26122:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   26126:	f04f 0340 	mov.w	r3, #64	; 0x40
   2612a:	f3ef 8211 	mrs	r2, BASEPRI
   2612e:	f383 8812 	msr	BASEPRI_MAX, r3
   26132:	f3bf 8f6f 	isb	sy
   26136:	3901      	subs	r1, #1
   26138:	4638      	mov	r0, r7
   2613a:	e7d6      	b.n	260ea <clear_event_registrations+0xc>

0002613c <z_handle_obj_poll_events>:
{
   2613c:	4603      	mov	r3, r0
	return list->head == list;
   2613e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26140:	4283      	cmp	r3, r0
   26142:	d008      	beq.n	26156 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   26144:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26148:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2614a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2614c:	2300      	movs	r3, #0
	node->prev = NULL;
   2614e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   26152:	f7ff bf6a 	b.w	2602a <signal_poll_event>
}
   26156:	4770      	bx	lr

00026158 <k_free>:
	if (ptr != NULL) {
   26158:	b120      	cbz	r0, 26164 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2615a:	1f01      	subs	r1, r0, #4
   2615c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   26160:	f7ff bb3d 	b.w	257de <k_heap_free>
}
   26164:	4770      	bx	lr

00026166 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   26166:	4770      	bx	lr
